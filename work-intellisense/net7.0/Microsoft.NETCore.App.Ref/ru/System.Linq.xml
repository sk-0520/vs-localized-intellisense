<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Linq</name>
  </assembly>
  <members>
    <member name="T:System.Linq.Enumerable">
      <summary vsli:raw="Provides a set of &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) methods for querying objects that implement &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Предоставляет набор методов типа <see langword="static" /> (<see langword="Shared" /> в Visual Basic) для выполнения запросов к объектам, реализующим интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary vsli:raw="Applies an accumulator function over a sequence.">Применяет к последовательности агрегатную функцию.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to aggregate over.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, для которого выполняется статистическая операция.</param>
      <param name="func" vsli:raw="An accumulator function to be invoked on each element.">Агрегатная функция, вызываемая для каждого элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="func" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The final accumulator value.">Конечное агрегатное значение.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary vsli:raw="Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.">Применяет к последовательности агрегатную функцию. Указанное начальное значение используется в качестве исходного значения агрегатной операции.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to aggregate over.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, для которого выполняется статистическая операция.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Начальное агрегатное значение.</param>
      <param name="func" vsli:raw="An accumulator function to be invoked on each element.">Агрегатная функция, вызываемая для каждого элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulator value.">Тип агрегатного значения.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="func" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The final accumulator value.">Конечное агрегатное значение.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary vsli:raw="Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.">Применяет к последовательности агрегатную функцию. Указанное начальное значение служит исходным значением для агрегатной операции, а указанная функция используется для выбора результирующего значения.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to aggregate over.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, для которого выполняется статистическая операция.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Начальное агрегатное значение.</param>
      <param name="func" vsli:raw="An accumulator function to be invoked on each element.">Агрегатная функция, вызываемая для каждого элемента.</param>
      <param name="resultSelector" vsli:raw="A function to transform the final accumulator value into the result value.">Функция, преобразующая конечное агрегатное значение в результирующее значение.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulator value.">Тип агрегатного значения.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the resulting value.">Тип результирующего значения.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" />, <paramref name="func" /> или <paramref name="resultSelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The transformed final accumulator value.">Преобразованное конечное агрегатное значение.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Determines whether all elements of a sequence satisfy a condition.">Проверяет, все ли элементы последовательности удовлетворяют условию.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements to apply the predicate to.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы, к которым применяется предикат.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если каждый элемент исходной последовательности проходит проверку, определяемую указанным предикатом, или если последовательность пуста; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Determines whether a sequence contains any elements.">Проверяет, содержит ли последовательность какие-либо элементы.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to check for emptiness.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, проверяемый на наличие элементов.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source sequence contains any elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если исходная последовательность содержит какие-либо элементы, в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Determines whether any element of a sequence satisfies a condition.">Проверяет, удовлетворяет ли какой-либо элемент последовательности заданному условию.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to apply the predicate to.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, к элементам которого применяется предикат.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source sequence is not empty and at least one of its elements passes the test in the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если исходная последовательность не является пустой и хотя бы один из ее элементов проходит проверку, определяемую указанным предикатом. В противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary vsli:raw="Appends a value to the end of the sequence.">Добавляет значение в конец последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values.">Последовательность значений.</param>
      <param name="element" vsli:raw="The value to append to &lt;paramref name=&quot;source&quot; /&gt;.">Значение, добавляемое к <paramref name="source" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A new sequence that ends with &lt;paramref name=&quot;element&quot; /&gt;.">Новая последовательность, которая заканчивается <paramref name="element" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the input typed as &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Возвращает входное значение, типизированное как <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source" vsli:raw="The sequence to type as &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Последовательность, которая приводится к типу <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <returns vsli:raw="The input sequence typed as &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Входная последовательность, приведенная к типу <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Вычисляет среднее последовательности значений типа <see cref="T:System.Decimal" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the average of.">Последовательность значений <see cref="T:System.Decimal" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The average of the sequence of values.">Среднее для последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Вычисляет среднее последовательности значений типа <see cref="T:System.Double" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the average of.">Последовательность значений <see cref="T:System.Double" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The average of the sequence of values.">Среднее для последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Вычисляет среднее последовательности значений типа <see cref="T:System.Int32" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the average of.">Последовательность значений <see cref="T:System.Int32" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The average of the sequence of values.">Среднее для последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Вычисляет среднее последовательности значений типа <see cref="T:System.Int64" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the average of.">Последовательность значений <see cref="T:System.Int64" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The average of the sequence of values.">Среднее для последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Вычисляет среднее для последовательности <see cref="T:System.Decimal" />, допускающей значение null.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the average of.">Последовательность <see cref="T:System.Decimal" />, допускающая значение null, для вычисления среднего.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum of the elements in the sequence is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">Сумма элементов в последовательности превышает значение <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Среднее для последовательности значений или <see langword="null" />, если исходная последовательность пуста или содержит только значения <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Вычисляет среднее для последовательности <see cref="T:System.Double" />, допускающей значение null.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the average of.">Последовательность <see cref="T:System.Double" />, допускающая значение null, для вычисления среднего.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Среднее для последовательности значений или <see langword="null" />, если исходная последовательность пуста или содержит только значения <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Вычисляет среднее для последовательности <see cref="T:System.Int32" />, допускающей значение null.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the average of.">Последовательность <see cref="T:System.Int32" />, допускающая значение null, для вычисления среднего.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum of the elements in the sequence is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Сумма элементов в последовательности превышает значение <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Среднее для последовательности значений или <see langword="null" />, если исходная последовательность пуста или содержит только значения <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Вычисляет среднее для последовательности <see cref="T:System.Int64" />, допускающей значение null.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the average of.">Последовательность <see cref="T:System.Int64" />, допускающая значение null, для вычисления среднего.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum of the elements in the sequence is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Сумма элементов в последовательности превышает значение <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Среднее для последовательности значений или <see langword="null" />, если исходная последовательность пуста или содержит только значения <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Вычисляет среднее для последовательности <see cref="T:System.Single" />, допускающей значение null.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the average of.">Последовательность <see cref="T:System.Single" />, допускающая значение null, для вычисления среднего.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Среднее для последовательности значений или <see langword="null" />, если исходная последовательность пуста или содержит только значения <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Вычисляет среднее последовательности значений типа <see cref="T:System.Single" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the average of.">Последовательность значений <see cref="T:System.Single" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The average of the sequence of values.">Среднее для последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет среднее для последовательности значений типа <see cref="T:System.Decimal" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate an average.">Последовательность значений, используемых для вычисления среднего.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum of the elements in the sequence is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">Сумма элементов в последовательности превышает значение <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns vsli:raw="The average of the sequence of values.">Среднее для последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет среднее для последовательности значений типа <see cref="T:System.Double" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The average of the sequence of values.">Среднее для последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет среднее для последовательности значений типа <see cref="T:System.Int32" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum of the elements in the sequence is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Сумма элементов в последовательности превышает значение <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The average of the sequence of values.">Среднее для последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет среднее для последовательности значений типа <see cref="T:System.Int64" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of source.">Тип элементов исходной последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum of the elements in the sequence is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Сумма элементов в последовательности превышает значение <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The average of the sequence of values.">Среднее для последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет среднее для последовательности значений <see cref="T:System.Decimal" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum of the elements in the sequence is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">Сумма элементов в последовательности превышает значение <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Среднее для последовательности значений или <see langword="null" />, если исходная последовательность пуста или содержит только значения <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет среднее для последовательности значений <see cref="T:System.Double" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Среднее для последовательности значений или <see langword="null" />, если исходная последовательность пуста или содержит только значения <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет среднее для последовательности значений <see cref="T:System.Int32" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum of the elements in the sequence is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Сумма элементов в последовательности превышает значение <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Среднее для последовательности значений или <see langword="null" />, если исходная последовательность пуста или содержит только значения <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет среднее для последовательности значений <see cref="T:System.Int64" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Среднее для последовательности значений или <see langword="null" />, если исходная последовательность пуста или содержит только значения <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет среднее для последовательности значений <see cref="T:System.Single" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Среднее для последовательности значений или <see langword="null" />, если исходная последовательность пуста или содержит только значения <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет среднее для последовательности значений типа <see cref="T:System.Single" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The average of the sequence of values.">Среднее для последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary vsli:raw="Casts the elements of an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; to the specified type.">Приводит элементы объекта <see cref="T:System.Collections.IEnumerable" /> к заданному типу.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; that contains the elements to be cast to type &lt;paramref name=&quot;TResult&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerable" />, содержащий элементы, которые можно привести к <paramref name="TResult" />.</param>
      <typeparam name="TResult" vsli:raw="The type to cast the elements of &lt;paramref name=&quot;source&quot; /&gt; to.">Тип, в который приводятся элементы параметра <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="An element in the sequence cannot be cast to type &lt;paramref name=&quot;TResult&quot; /&gt;.">Элемент последовательности не может быть приведен к типу <paramref name="TResult" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains each element of the source sequence cast to the specified type.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит все элементы исходной последовательности, приведенные в заданный тип.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Concatenates two sequences.">Объединяет две последовательности.</summary>
      <param name="first" vsli:raw="The first sequence to concatenate.">Первая из объединяемых последовательностей.</param>
      <param name="second" vsli:raw="The sequence to concatenate to the first sequence.">Последовательность, объединяемая с первой последовательностью.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the concatenated elements of the two input sequences.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объединенные элементы двух входных последовательностей.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary vsli:raw="Determines whether a sequence contains a specified element by using the default equality comparer.">Определяет, содержится ли указанный элемент в последовательности, используя компаратор проверки на равенство по умолчанию.</summary>
      <param name="source" vsli:raw="A sequence in which to locate a value.">Последовательность, в которой требуется найти данное значение.</param>
      <param name="value" vsli:raw="The value to locate in the sequence.">Значение, которое требуется найти в последовательности.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source sequence contains an element that has the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если исходная последовательность содержит элемент с указанным значением, в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Determines whether a sequence contains a specified element by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Определяет, содержит ли последовательность заданный элемент, используя указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="source" vsli:raw="A sequence in which to locate a value.">Последовательность, в которой требуется найти данное значение.</param>
      <param name="value" vsli:raw="The value to locate in the sequence.">Значение, которое требуется найти в последовательности.</param>
      <param name="comparer" vsli:raw="An equality comparer to compare values.">Компаратор проверки на равенство, используемый для сравнения значений.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source sequence contains an element that has the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если исходная последовательность содержит элемент с указанным значением, в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the number of elements in a sequence.">Возвращает количество элементов в последовательности.</summary>
      <param name="source" vsli:raw="A sequence that contains elements to be counted.">Последовательность, элементы которой требуется подсчитать.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt; is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The number of elements in the input sequence.">Число элементов во входной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns a number that represents how many elements in the specified sequence satisfy a condition.">Возвращает число, представляющее количество элементов последовательности, удовлетворяющих заданному условию.</summary>
      <param name="source" vsli:raw="A sequence that contains elements to be tested and counted.">Последовательность, элементы которой требуется проверить и подсчитать.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt; is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="A number that represents how many elements in the sequence satisfy the condition in the predicate function.">Число, представляющее количество элементов последовательности, удовлетворяющих условию функции предиката.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.">Возвращает элементы указанной последовательности или одноэлементную коллекцию, содержащую значение параметра типа по умолчанию, если последовательность пуста.</summary>
      <param name="source" vsli:raw="The sequence to return a default value for if it is empty.">Последовательность, для которой возвращается значение по умолчанию, если она пуста.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; object that contains the default value for the &lt;paramref name=&quot;TSource&quot; /&gt; type if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, &lt;paramref name=&quot;source&quot; /&gt;.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий значение по умолчанию для типа <paramref name="TSource" />, если параметр <paramref name="source" /> пуст; в противном случае — значение <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary vsli:raw="Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.">Возвращает элементы указанной последовательности или одноэлементную коллекцию, содержащую указанное значение, если последовательность пуста.</summary>
      <param name="source" vsli:raw="The sequence to return the specified value for if it is empty.">Последовательность, для которой возвращается указанное значение, если она пуста.</param>
      <param name="defaultValue" vsli:raw="The value to return if the sequence is empty.">Значение, возвращаемое в случае пустой последовательности.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;paramref name=&quot;defaultValue&quot; /&gt; if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, &lt;paramref name=&quot;source&quot; /&gt;.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий значение <paramref name="defaultValue" />, если последовательность <paramref name="source" /> пуста; в противном случае возвращается <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns distinct elements from a sequence by using the default equality comparer to compare values.">Возвращает различающиеся элементы последовательности, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <param name="source" vsli:raw="The sequence to remove duplicate elements from.">Последовательность, из которой требуется удалить дубликаты элементов.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains distinct elements from the source sequence.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий различающиеся элементы из исходной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Returns distinct elements from a sequence by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Возвращает различающиеся элементы последовательности, используя для сравнения значений указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="source" vsli:raw="The sequence to remove duplicate elements from.">Последовательность, из которой требуется удалить дубликаты элементов.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains distinct elements from the source sequence.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий различающиеся элементы из исходной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence.">Возвращает элемент по указанному индексу в последовательности.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return an element from.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="index" vsli:raw="The zero-based index of the element to retrieve.">Отсчитываемый от нуля индекс извлекаемого элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0 or greater than or equal to the number of elements in &lt;paramref name=&quot;source&quot; /&gt;.">Значение <paramref name="index" /> меньше 0 либо больше или равно числу элементов последовательности <paramref name="source" />.</exception>
      <returns vsli:raw="The element at the specified position in the source sequence.">Элемент, находящийся в указанной позиции в исходной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence or a default value if the index is out of range.">Возвращает элемент последовательности по указанному индексу или значение по умолчанию, если индекс вне допустимого диапазона.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return an element from.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="index" vsli:raw="The zero-based index of the element to retrieve.">Отсчитываемый от нуля индекс извлекаемого элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.">
        <see langword="default" />(<paramref name="TSource" />), если индекс указывает позицию вне исходной последовательности, в противном случае — элемент, находящийся в указанной позиции в исходной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary vsli:raw="Returns an empty &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that has the specified type argument.">Возвращает пустую коллекцию <see cref="T:System.Collections.Generic.IEnumerable`1" /> с указанным аргументом типа.</summary>
      <typeparam name="TResult" vsli:raw="The type to assign to the type parameter of the returned generic &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Тип, присваиваемый параметру типа возвращаемого универсального интерфейса <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns vsli:raw="An empty &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose type argument is &lt;paramref name=&quot;TResult&quot; /&gt;.">Пустая коллекция <see cref="T:System.Collections.Generic.IEnumerable`1" /> с аргументом типа <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set difference of two sequences by using the default equality comparer to compare values.">Находит разность множеств, представленных двумя последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <param name="first" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements that are not also in &lt;paramref name=&quot;second&quot; /&gt; will be returned.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется извлечь элементы, отсутствующие в последовательности <paramref name="second" />.</param>
      <param name="second" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.">Последовательность <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которой, входящие также в первую последовательность, должны быть исключены из возвращаемой последовательности.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A sequence that contains the set difference of the elements of two sequences.">Последовательность, представляющая собой разность двух последовательностей как множеств.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set difference of two sequences by using the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Находит разность множеств, представленных двумя последовательностями, используя для сравнения значений указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="first" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements that are not also in &lt;paramref name=&quot;second&quot; /&gt; will be returned.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется извлечь элементы, отсутствующие в последовательности <paramref name="second" />.</param>
      <param name="second" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.">Последовательность <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которой, входящие также в первую последовательность, должны быть исключены из возвращаемой последовательности.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A sequence that contains the set difference of the elements of two sequences.">Последовательность, представляющая собой разность двух последовательностей как множеств.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the first element of a sequence.">Возвращает первый элемент последовательности.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return the first element of.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, первый элемент которого требуется возвратить.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source sequence is empty.">Исходная последовательность пуста.</exception>
      <returns vsli:raw="The first element in the specified sequence.">Первый элемент указанной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element in a sequence that satisfies a specified condition.">Возвращает первый элемент последовательности, удовлетворяющий указанному условию.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return an element from.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Ни один элемент не удовлетворяет условию предиката <paramref name="predicate" />.  
  
-или- 
Исходная последовательность пуста.</exception>
      <returns vsli:raw="The first element in the sequence that passes the test in the specified predicate function.">Первый элемент последовательности, который прошел проверку, определенную указанной функцией предиката.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the first element of a sequence, or a default value if the sequence contains no elements.">Возвращает первый элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return the first element of.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, первый элемент которого требуется возвратить.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, the first element in &lt;paramref name=&quot;source&quot; /&gt;.">
        <see langword="default" />(<paramref name="TSource" />), если последовательность <paramref name="source" /> пуста, в противном случае — первый элемент последовательности <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.">Возвращает первый элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если ни одного такого элемента не найдено.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return an element from.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty or if no element passes the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;; otherwise, the first element in &lt;paramref name=&quot;source&quot; /&gt; that passes the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <see langword="default" />(<paramref name="TSource" />), если последовательность <paramref name="source" /> пуста или если ни один ее элемент не прошел проверку, определенную предикатом <paramref name="predicate" />; в противном случае — первый элемент последовательности <paramref name="source" />, прошедший проверку, определенную предикатом <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function.">Группирует элементы последовательности в соответствии с заданной функцией селектора ключа.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to group.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Функция, извлекающая ключ для каждого элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;IEnumerable&amp;lt;IGrouping&amp;lt;TKey, TSource&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IEnumerable(Of IGrouping(Of TKey, TSource))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; object contains a sequence of objects and a key.">Объект <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> в C# или <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит последовательность и ключ.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.">Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и сравнивает ключи с помощью указанного компаратора.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to group.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;IEnumerable&amp;lt;IGrouping&amp;lt;TKey, TSource&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IEnumerable(Of IGrouping(Of TKey, TSource))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; object contains a collection of objects and a key.">Объект <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> в C# или <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит коллекцию объектов и ключ.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.">Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и проецирует элементы каждой группы с помощью указанной функции.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to group.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in the &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Функция, сопоставляющая каждый исходный элемент с элементом объекта <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in the &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Тип элементов в <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;IEnumerable&amp;lt;IGrouping&amp;lt;TKey, TElement&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IEnumerable(Of IGrouping(Of TKey, TElement))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; object contains a collection of objects of type &lt;paramref name=&quot;TElement&quot; /&gt; and a key.">Объект <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> в C# или <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит коллекцию объектов типа <paramref name="TElement" /> и ключ.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.">Группирует элементы последовательности в соответствии с функцией селектора ключа. Ключи сравниваются с помощью компаратора, элементы каждой группы проецируются с помощью указанной функции.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to group.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Функция, сопоставляющая каждый исходный элемент с элементом объекта <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in the &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Тип элементов в <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;IEnumerable&amp;lt;IGrouping&amp;lt;TKey, TElement&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IEnumerable(Of IGrouping(Of TKey, TElement))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; object contains a collection of objects of type &lt;paramref name=&quot;TElement&quot; /&gt; and a key.">Объект <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> в C# или <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит коллекцию объектов типа <paramref name="TElement" /> и ключ.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.">Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to group.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Функция для создания результирующего значения для каждой группы.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Тип результирующего значения, возвращаемого функцией <paramref name="resultSelector" />.</typeparam>
      <returns vsli:raw="A collection of elements of type &lt;paramref name=&quot;TResult&quot; /&gt; where each element represents a projection over a group and its key.">Коллекция элементов типа <paramref name="TResult" />, в которой каждый элемент представляет проекцию группы и ее ключа.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.">Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа. Ключи сравниваются с использованием заданного компаратора.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to group.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Функция для создания результирующего значения для каждой группы.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys with.">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Тип результирующего значения, возвращаемого функцией <paramref name="resultSelector" />.</typeparam>
      <returns vsli:raw="A collection of elements of type &lt;paramref name=&quot;TResult&quot; /&gt; where each element represents a projection over a group and its key.">Коллекция элементов типа <paramref name="TResult" />, в которой каждый элемент представляет проекцию группы и ее ключа.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.">Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа. Элементы каждой группы проецируются с помощью указанной функции.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to group.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Функция, сопоставляющая каждый исходный элемент с элементом объекта <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Функция для создания результирующего значения для каждой группы.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Тип элементов каждого объекта <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Тип результирующего значения, возвращаемого функцией <paramref name="resultSelector" />.</typeparam>
      <returns vsli:raw="A collection of elements of type &lt;paramref name=&quot;TResult&quot; /&gt; where each element represents a projection over a group and its key.">Коллекция элементов типа <paramref name="TResult" />, в которой каждый элемент представляет проекцию группы и ее ключа.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.">Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа. Значения ключей сравниваются с помощью указанного компаратора, элементы каждой группы проецируются с помощью указанной функции.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to group.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Функция, сопоставляющая каждый исходный элемент с элементом объекта <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Функция для создания результирующего значения для каждой группы.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys with.">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Тип элементов каждого объекта <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Тип результирующего значения, возвращаемого функцией <paramref name="resultSelector" />.</typeparam>
      <returns vsli:raw="A collection of elements of type &lt;paramref name=&quot;TResult&quot; /&gt; where each element represents a projection over a group and its key.">Коллекция элементов типа <paramref name="TResult" />, в которой каждый элемент представляет проекцию группы и ее ключа.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary vsli:raw="Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.">Устанавливает корреляцию между элементами двух последовательностей на основе равенства ключей и группирует результаты. Для сравнения ключей используется компаратор проверки на равенство по умолчанию.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Первая последовательность для соединения.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.">Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Значение параметра <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> — <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements of type &lt;paramref name=&quot;TResult&quot; /&gt; that are obtained by performing a grouped join on two sequences.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате соединения двух последовательностей с группировкой.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Correlates the elements of two sequences based on key equality and groups the results. A specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; is used to compare keys.">Устанавливает корреляцию между элементами двух последовательностей на основе равенства ключей и группирует результаты. Для сравнения ключей используется указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Первая последовательность для соединения.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.">Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to hash and compare keys.">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для хэширования и сравнения ключей.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Значение параметра <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> — <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements of type &lt;paramref name=&quot;TResult&quot; /&gt; that are obtained by performing a grouped join on two sequences.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате соединения двух последовательностей с группировкой.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set intersection of two sequences by using the default equality comparer to compare values.">Находит пересечение множеств, представленных двумя последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <param name="first" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements that also appear in &lt;paramref name=&quot;second&quot; /&gt; will be returned.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого извлекаются различающиеся элементы, входящие также в последовательность <paramref name="second" />.</param>
      <param name="second" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements that also appear in the first sequence will be returned.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого извлекаются различающиеся элементы, входящие также в первую последовательность.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A sequence that contains the elements that form the set intersection of two sequences.">Последовательность элементов, представляющая собой пересечение двух заданных последовательностей как множеств.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set intersection of two sequences by using the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Находит пересечение множеств, представленных двумя последовательностями, используя для сравнения значений указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="first" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements that also appear in &lt;paramref name=&quot;second&quot; /&gt; will be returned.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого извлекаются различающиеся элементы, входящие также в последовательность <paramref name="second" />.</param>
      <param name="second" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements that also appear in the first sequence will be returned.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого извлекаются различающиеся элементы, входящие также в первую последовательность.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A sequence that contains the elements that form the set intersection of two sequences.">Последовательность элементов, представляющая собой пересечение двух заданных последовательностей как множеств.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary vsli:raw="Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.">Устанавливает корреляцию между элементами двух последовательностей на основе сопоставления ключей. Для сравнения ключей используется компаратор проверки на равенство по умолчанию.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Первая последовательность для соединения.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from two matching elements.">Функция для создания результирующего элемента для пары соответствующих элементов.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Значение параметра <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> — <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that has elements of type &lt;paramref name=&quot;TResult&quot; /&gt; that are obtained by performing an inner join on two sequences.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате внутреннего соединения двух последовательностей.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Correlates the elements of two sequences based on matching keys. A specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; is used to compare keys.">Устанавливает корреляцию между элементами двух последовательностей на основе сопоставления ключей. Для сравнения ключей используется указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Первая последовательность для соединения.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from two matching elements.">Функция для создания результирующего элемента для пары соответствующих элементов.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to hash and compare keys.">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для хэширования и сравнения ключей.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Значение параметра <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> — <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that has elements of type &lt;paramref name=&quot;TResult&quot; /&gt; that are obtained by performing an inner join on two sequences.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате внутреннего соединения двух последовательностей.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the last element of a sequence.">Возвращает последний элемент последовательности.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return the last element of.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, последний элемент которого требуется возвратить.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source sequence is empty.">Исходная последовательность пуста.</exception>
      <returns vsli:raw="The value at the last position in the source sequence.">Значение, находящееся в последней позиции исходной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a specified condition.">Возвращает последний элемент последовательности, удовлетворяющий указанному условию.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return an element from.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Ни один элемент не удовлетворяет условию предиката <paramref name="predicate" />.  
  
-или- 
Исходная последовательность пуста.</exception>
      <returns vsli:raw="The last element in the sequence that passes the test in the specified predicate function.">Последний элемент последовательности, который прошел проверку, определенную указанной функцией предиката.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the last element of a sequence, or a default value if the sequence contains no elements.">Возвращает последний элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return the last element of.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, последний элемент которого требуется возвратить.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if the source sequence is empty; otherwise, the last element in the &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">
        <see langword="default" />(<paramref name="TSource" />), если исходная последовательность пуста, в противном случае — последний элемент коллекции <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.">Возвращает последний элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если ни одного такого элемента не найдено.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return an element from.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.">
        <see langword="default" />(<paramref name="TSource" />), если последовательность пуста или ни один ее элемент не прошел проверку функцией предиката, в противном случае — последний элемент, прошедший проверку функцией предиката.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Int64&quot; /&gt; that represents the total number of elements in a sequence.">Возвращает значение типа <see cref="T:System.Int64" />, представляющее общее число элементов в последовательности.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements to be counted.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements exceeds &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Число элементов больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The number of elements in the source sequence.">Число элементов в исходной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Int64&quot; /&gt; that represents how many elements in a sequence satisfy a condition.">Возвращает значение типа <see cref="T:System.Int64" />, представляющее число элементов последовательности, удовлетворяющих заданному условию.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements to be counted.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of matching elements exceeds &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Число найденных элементов больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="A number that represents how many elements in the sequence satisfy the condition in the predicate function.">Число, представляющее количество элементов последовательности, удовлетворяющих условию функции предиката.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary vsli:raw="Returns the maximum value in a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Возвращает максимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Decimal" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to determine the maximum value of.">Последовательность значений типа <see cref="T:System.Decimal" />, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The maximum value in the sequence.">Максимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary vsli:raw="Returns the maximum value in a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Возвращает максимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Double" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values to determine the maximum value of.">Последовательность значений типа <see cref="T:System.Double" />, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The maximum value in the sequence.">Максимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary vsli:raw="Returns the maximum value in a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Возвращает максимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Int32" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to determine the maximum value of.">Последовательность значений типа <see cref="T:System.Int32" />, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The maximum value in the sequence.">Максимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary vsli:raw="Returns the maximum value in a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Возвращает максимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Int64" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to determine the maximum value of.">Последовательность значений типа <see cref="T:System.Int64" />, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The maximum value in the sequence.">Максимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary vsli:raw="Returns the maximum value in a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Возвращает максимальное значение в последовательности значений <see cref="T:System.Decimal" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to determine the maximum value of.">Последовательность значений <see cref="T:System.Decimal" /> обнуляемого типа, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Decimal&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Decimal)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Значение типа <c>Nullable&lt;Decimal&gt;</c> в C# или <c>Nullable(Of Decimal)</c> в Visual Basic, соответствующее максимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary vsli:raw="Returns the maximum value in a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Возвращает максимальное значение в последовательности значений <see cref="T:System.Double" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values to determine the maximum value of.">Последовательность значений <see cref="T:System.Double" /> обнуляемого типа, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Double&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Double)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Значение типа <c>Nullable&lt;Double&gt;</c> в C# или <c>Nullable(Of Double)</c> в Visual Basic, соответствующее максимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary vsli:raw="Returns the maximum value in a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Возвращает максимальное значение в последовательности значений <see cref="T:System.Int32" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to determine the maximum value of.">Последовательность значений <see cref="T:System.Int32" /> обнуляемого типа, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Int32&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Int32)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Значение типа <c>Nullable&lt;Int32&gt;</c> в C# или <c>Nullable(Of Int32)</c> в Visual Basic, соответствующее максимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary vsli:raw="Returns the maximum value in a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Возвращает максимальное значение в последовательности значений <see cref="T:System.Int64" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to determine the maximum value of.">Последовательность значений <see cref="T:System.Int64" /> обнуляемого типа, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Int64&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Int64)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Значение типа <c>Nullable&lt;Int64&gt;</c> в C# или <c>Nullable(Of Int64)</c> в Visual Basic, соответствующее максимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary vsli:raw="Returns the maximum value in a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Возвращает максимальное значение в последовательности значений <see cref="T:System.Single" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values to determine the maximum value of.">Последовательность значений <see cref="T:System.Single" /> обнуляемого типа, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Single&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Single)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Значение типа <c>Nullable&lt;Single&gt;</c> в C# или <c>Nullable(Of Single)</c> в Visual Basic, соответствующее максимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary vsli:raw="Returns the maximum value in a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Возвращает максимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Single" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values to determine the maximum value of.">Последовательность значений типа <see cref="T:System.Single" />, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The maximum value in the sequence.">Максимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the maximum value in a generic sequence.">Возвращает максимальное значение, содержащееся в универсальной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Последовательность значений, для которой определяется максимальное значение.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="No object in &lt;paramref name=&quot;source&quot; /&gt; implements the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; interface.">Ни один объект в <paramref name="source" /> не реализует интерфейс <see cref="T:System.IComparable" /> или <see cref="T:System.IComparable`1" />.</exception>
      <returns vsli:raw="The maximum value in the sequence.">Максимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение типа <see cref="T:System.Decimal" />.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The maximum value in the sequence.">Максимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum &lt;see cref=&quot;T:System.Double&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение типа <see cref="T:System.Double" />.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The maximum value in the sequence.">Максимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum &lt;see cref=&quot;T:System.Int32&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение типа <see cref="T:System.Int32" />.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The maximum value in the sequence.">Максимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum &lt;see cref=&quot;T:System.Int64&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение типа <see cref="T:System.Int64" />.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The maximum value in the sequence.">Максимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Decimal" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Decimal&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Decimal)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Значение типа <c>Nullable&lt;Decimal&gt;</c> в C# или <c>Nullable(Of Decimal)</c> в Visual Basic, соответствующее максимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Double" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Double&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Double)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Значение типа <c>Nullable&lt;Double&gt;</c> в C# или <c>Nullable(Of Double)</c> в Visual Basic, соответствующее максимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Int32" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Int32&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Int32)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Значение типа <c>Nullable&lt;Int32&gt;</c> в C# или <c>Nullable(Of Int32)</c> в Visual Basic, соответствующее максимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Int64" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Int64&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Int64)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Значение типа <c>Nullable&lt;Int64&gt;</c> в C# или <c>Nullable(Of Int64)</c> в Visual Basic, соответствующее максимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Single" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Single&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Single)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Значение типа <c>Nullable&lt;Single&gt;</c> в C# или <c>Nullable(Of Single)</c> в Visual Basic, соответствующее максимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum &lt;see cref=&quot;T:System.Single&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение типа <see cref="T:System.Single" />.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The maximum value in the sequence.">Максимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.">Вызывает функцию преобразования для каждого элемента универсальной последовательности и возвращает максимальное результирующее значение.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by &lt;paramref name=&quot;selector&quot; /&gt;.">Тип значения, возвращаемого функцией <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The maximum value in the sequence.">Максимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary vsli:raw="Returns the minimum value in a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Возвращает минимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Decimal" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to determine the minimum value of.">Последовательность значений типа <see cref="T:System.Decimal" />, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The minimum value in the sequence.">Минимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary vsli:raw="Returns the minimum value in a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Возвращает минимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Double" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values to determine the minimum value of.">Последовательность значений типа <see cref="T:System.Double" />, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The minimum value in the sequence.">Минимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary vsli:raw="Returns the minimum value in a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Возвращает минимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Int32" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to determine the minimum value of.">Последовательность значений типа <see cref="T:System.Int32" />, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The minimum value in the sequence.">Минимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary vsli:raw="Returns the minimum value in a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Возвращает минимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Int64" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to determine the minimum value of.">Последовательность значений типа <see cref="T:System.Int64" />, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The minimum value in the sequence.">Минимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary vsli:raw="Returns the minimum value in a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Возвращает минимальное значение в последовательности значений <see cref="T:System.Decimal" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to determine the minimum value of.">Последовательность значений <see cref="T:System.Decimal" /> обнуляемого типа, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Decimal&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Decimal)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Значение типа <c>Nullable&lt;Decimal&gt;</c> в C# или <c>Nullable(Of Decimal)</c> в Visual Basic, соответствующее минимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary vsli:raw="Returns the minimum value in a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Возвращает минимальное значение в последовательности значений <see cref="T:System.Double" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values to determine the minimum value of.">Последовательность значений <see cref="T:System.Double" /> обнуляемого типа, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Double&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Double)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Значение типа <c>Nullable&lt;Double&gt;</c> в C# или <c>Nullable(Of Double)</c> в Visual Basic, соответствующее минимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary vsli:raw="Returns the minimum value in a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Возвращает минимальное значение в последовательности значений <see cref="T:System.Int32" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to determine the minimum value of.">Последовательность значений <see cref="T:System.Int32" /> обнуляемого типа, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Int32&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Int32)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Значение типа <c>Nullable&lt;Int32&gt;</c> в C# или <c>Nullable(Of Int32)</c> в Visual Basic, соответствующее минимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary vsli:raw="Returns the minimum value in a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Возвращает минимальное значение в последовательности значений <see cref="T:System.Int64" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to determine the minimum value of.">Последовательность значений <see cref="T:System.Int64" /> обнуляемого типа, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Int64&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Int64)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Значение типа <c>Nullable&lt;Int64&gt;</c> в C# или <c>Nullable(Of Int64)</c> в Visual Basic, соответствующее минимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary vsli:raw="Returns the minimum value in a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Возвращает минимальное значение в последовательности значений <see cref="T:System.Single" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values to determine the minimum value of.">Последовательность значений <see cref="T:System.Single" /> обнуляемого типа, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Single&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Single)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Значение типа <c>Nullable&lt;Single&gt;</c> в C# или <c>Nullable(Of Single)</c> в Visual Basic, соответствующее минимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary vsli:raw="Returns the minimum value in a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Возвращает минимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Single" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values to determine the minimum value of.">Последовательность значений типа <see cref="T:System.Single" />, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The minimum value in the sequence.">Минимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the minimum value in a generic sequence.">Возвращает минимальное значение, содержащееся в универсальной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Последовательность значений, для которой определяется минимальное значение.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="No object in &lt;paramref name=&quot;source&quot; /&gt; implements the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; interface.">Ни один объект в <paramref name="source" /> не реализует интерфейс <see cref="T:System.IComparable" /> или <see cref="T:System.IComparable`1" />.</exception>
      <returns vsli:raw="The minimum value in the sequence.">Минимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение типа <see cref="T:System.Decimal" />.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The minimum value in the sequence.">Минимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum &lt;see cref=&quot;T:System.Double&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение типа <see cref="T:System.Double" />.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The minimum value in the sequence.">Минимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum &lt;see cref=&quot;T:System.Int32&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение типа <see cref="T:System.Int32" />.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The minimum value in the sequence.">Минимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum &lt;see cref=&quot;T:System.Int64&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение типа <see cref="T:System.Int64" />.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The minimum value in the sequence.">Минимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Decimal" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Decimal&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Decimal)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Значение типа <c>Nullable&lt;Decimal&gt;</c> в C# или <c>Nullable(Of Decimal)</c> в Visual Basic, соответствующее минимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Double" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Double&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Double)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Значение типа <c>Nullable&lt;Double&gt;</c> в C# или <c>Nullable(Of Double)</c> в Visual Basic, соответствующее минимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Int32" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Int32&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Int32)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Значение типа <c>Nullable&lt;Int32&gt;</c> в C# или <c>Nullable(Of Int32)</c> в Visual Basic, соответствующее минимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Int64" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Int64&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Int64)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Значение типа <c>Nullable&lt;Int64&gt;</c> в C# или <c>Nullable(Of Int64)</c> в Visual Basic, соответствующее минимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Single" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Single&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Single)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Значение типа <c>Nullable&lt;Single&gt;</c> в C# или <c>Nullable(Of Single)</c> в Visual Basic, соответствующее минимальному значению последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum &lt;see cref=&quot;T:System.Single&quot; /&gt; value.">Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение типа <see cref="T:System.Single" />.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <returns vsli:raw="The minimum value in the sequence.">Минимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.">Вызывает функцию преобразования для каждого элемента универсальной последовательности и возвращает минимальное результирующее значение.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by &lt;paramref name=&quot;selector&quot; /&gt;.">Тип значения, возвращаемого функцией <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The minimum value in the sequence.">Минимальное значение в последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary vsli:raw="Filters the elements of an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; based on a specified type.">Выполняет фильтрацию элементов объекта <see cref="T:System.Collections.IEnumerable" /> по заданному типу.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; whose elements to filter.">Объект <see cref="T:System.Collections.IEnumerable" />, элементы которого следует фильтровать.</param>
      <typeparam name="TResult" vsli:raw="The type to filter the elements of the sequence on.">Тип, по которому фильтруются элементы последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements from the input sequence of type &lt;paramref name=&quot;TResult&quot; /&gt;.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы входной последовательности типа <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Sorts the elements of a sequence in ascending order according to a key.">Сортирует элементы последовательности в порядке возрастания ключа.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Функция, извлекающая ключ из элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted according to a key.">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Sorts the elements of a sequence in ascending order by using a specified comparer.">Сортирует элементы последовательности в порядке возрастания с использованием указанного компаратора.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Функция, извлекающая ключ из элемента.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted according to a key.">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Sorts the elements of a sequence in descending order according to a key.">Сортирует элементы последовательности в порядке убывания ключа.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Функция, извлекающая ключ из элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Sorts the elements of a sequence in descending order by using a specified comparer.">Сортирует элементы последовательности в порядке убывания с использованием указанного компаратора.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Функция, извлекающая ключ из элемента.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary vsli:raw="Adds a value to the beginning of the sequence.">Добавляет значение в начало последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values.">Последовательность значений.</param>
      <param name="element" vsli:raw="The value to prepend to &lt;paramref name=&quot;source&quot; /&gt;.">Значение, которое добавляется в начало <paramref name="source" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A new sequence that begins with &lt;paramref name=&quot;element&quot; /&gt;.">Новая последовательность, которая начиняется с <paramref name="element" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary vsli:raw="Generates a sequence of integral numbers within a specified range.">Генерирует последовательность целых чисел в заданном диапазоне.</summary>
      <param name="start" vsli:raw="The value of the first integer in the sequence.">Значение первого целого числа для последовательности.</param>
      <param name="count" vsli:raw="The number of sequential integers to generate.">Количество генерируемых последовательных целых чисел.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is less than 0.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;count&quot; /&gt; -1 is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Значение параметра<paramref name="count" /> меньше 0.  
  
-или- 
 <paramref name="start" /> + <paramref name="count" /> –1 больше, чем значение <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="An &lt;c&gt;IEnumerable&amp;lt;Int32&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IEnumerable(Of Int32)&lt;/c&gt; in Visual Basic that contains a range of sequential integral numbers.">Интерфейс <c>IEnumerable&lt;Int32&gt;</c> в C# или <c>IEnumerable(Of Int32)</c> в Visual Basic, содержащий диапазон последовательных целых чисел.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary vsli:raw="Generates a sequence that contains one repeated value.">Генерирует последовательность, содержащую одно повторяющееся значение.</summary>
      <param name="element" vsli:raw="The value to be repeated.">Повторяемое значение.</param>
      <param name="count" vsli:raw="The number of times to repeat the value in the generated sequence.">Требуемое число повторений данного значения в создаваемой последовательности.</param>
      <typeparam name="TResult" vsli:raw="The type of the value to be repeated in the result sequence.">Тип значения, которое будет повторяться в результирующей последовательности.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is less than 0.">Значение параметра<paramref name="count" /> меньше 0.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains a repeated value.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий повторяющееся значение.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Inverts the order of the elements in a sequence.">Изменяет порядок элементов последовательности на противоположный.</summary>
      <param name="source" vsli:raw="A sequence of values to reverse.">Последовательность значений, которые следует расставить в обратном порядке.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A sequence whose elements correspond to those of the input sequence in reverse order.">Последовательность, элементы которой соответствуют элементам входной последовательности, но следуют в противоположном порядке.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Projects each element of a sequence into a new form.">Проецирует каждый элемент последовательности в новую форму.</summary>
      <param name="source" vsli:raw="A sequence of values to invoke a transform function on.">Последовательность значений, для которых вызывается функция преобразования.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by &lt;paramref name=&quot;selector&quot; /&gt;.">Тип значения, возвращаемого функцией <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the transform function on each element of &lt;paramref name=&quot;source&quot; /&gt;.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования для каждого элемента последовательности <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary vsli:raw="Projects each element of a sequence into a new form by incorporating the element's index.">Проецирует каждый элемент последовательности в новую форму, добавляя индекс элемента.</summary>
      <param name="source" vsli:raw="A sequence of values to invoke a transform function on.">Последовательность значений, для которых вызывается функция преобразования.</param>
      <param name="selector" vsli:raw="A transform function to apply to each source element; the second parameter of the function represents the index of the source element.">Функция преобразования, применяемая к каждому исходному элементу; второй параметр функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by &lt;paramref name=&quot;selector&quot; /&gt;.">Тип значения, возвращаемого функцией <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the transform function on each element of &lt;paramref name=&quot;source&quot; /&gt;.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования для каждого элемента последовательности <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; and flattens the resulting sequences into one sequence.">Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> и объединяет результирующие последовательности в одну последовательность.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Последовательность значений, которые следует проецировать.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the sequence returned by &lt;paramref name=&quot;selector&quot; /&gt;.">Тип элементов последовательности, возвращаемых функцией <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования "один ко многим" для каждого элемента входной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.">Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> и объединяет результирующие последовательности в одну последовательность. Индекс каждого элемента исходной последовательности используется в проецированной форме этого элемента.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Последовательность значений, которые следует проецировать.</param>
      <param name="selector" vsli:raw="A transform function to apply to each source element; the second parameter of the function represents the index of the source element.">Функция преобразования, применяемая к каждому исходному элементу; второй параметр функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the sequence returned by &lt;paramref name=&quot;selector&quot; /&gt;.">Тип элементов последовательности, возвращаемых функцией <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования "один ко многим" для каждого элемента входной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.">Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, объединяет результирующие последовательности в одну и вызывает функцию селектора результата для каждого элемента этой последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Последовательность значений, которые следует проецировать.</param>
      <param name="collectionSelector" vsli:raw="A transform function to apply to each element of the input sequence.">Функция преобразования, применяемая к каждому элементу входной последовательности.</param>
      <param name="resultSelector" vsli:raw="A transform function to apply to each element of the intermediate sequence.">Функция преобразования, применяемая к каждому элементу промежуточной последовательности.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">Тип промежуточных элементов, собранных функцией <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">Тип элементов результирующей последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;collectionSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" />, <paramref name="collectionSelector" /> или <paramref name="resultSelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the one-to-many transform function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each element of &lt;paramref name=&quot;source&quot; /&gt; and then mapping each of those sequence elements and their corresponding source element to a result element.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования "один ко многим" <paramref name="collectionSelector" /> для каждого элемента последовательности <paramref name="source" /> и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему исходного элемента с результирующим элементом.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.">Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, объединяет результирующие последовательности в одну и вызывает функцию селектора результата для каждого элемента этой последовательности. Индекс каждого элемента исходной последовательности используется в промежуточной проецированной форме этого элемента.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Последовательность значений, которые следует проецировать.</param>
      <param name="collectionSelector" vsli:raw="A transform function to apply to each source element; the second parameter of the function represents the index of the source element.">Функция преобразования, применяемая к каждому исходному элементу; второй параметр функции представляет индекс исходного элемента.</param>
      <param name="resultSelector" vsli:raw="A transform function to apply to each element of the intermediate sequence.">Функция преобразования, применяемая к каждому элементу промежуточной последовательности.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">Тип промежуточных элементов, собранных функцией <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">Тип элементов результирующей последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;collectionSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" />, <paramref name="collectionSelector" /> или <paramref name="resultSelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the one-to-many transform function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each element of &lt;paramref name=&quot;source&quot; /&gt; and then mapping each of those sequence elements and their corresponding source element to a result element.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования "один ко многим" <paramref name="collectionSelector" /> для каждого элемента последовательности <paramref name="source" /> и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему исходного элемента с результирующим элементом.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.">Определяет, совпадают ли две последовательности, используя для сравнения элементов компаратор проверки на равенство по умолчанию, предназначенный для их типа.</summary>
      <param name="first" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to compare to &lt;paramref name=&quot;second&quot; /&gt;.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, сравниваемый с последовательностью <paramref name="second" />.</param>
      <param name="second" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to compare to the first sequence.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, сравниваемый с первой последовательностью.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если у двух исходных последовательностей одинаковая длина и соответствующие элементы совпадают, согласно компаратору проверки на равенство по умолчанию для этого типа элементов, в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Determines whether two sequences are equal by comparing their elements by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Определяет, совпадают ли две последовательности, используя для сравнения элементов указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="first" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to compare to &lt;paramref name=&quot;second&quot; /&gt;.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, сравниваемый с последовательностью <paramref name="second" />.</param>
      <param name="second" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to compare to the first sequence.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, сравниваемый с первой последовательностью.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to use to compare elements.">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения элементов.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two source sequences are of equal length and their corresponding elements compare equal according to &lt;paramref name=&quot;comparer&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если у двух исходных последовательностей одинаковая длина и соответствующие элементы совпадают согласно компаратору <paramref name="comparer" />, в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.">Возвращает единственный элемент последовательности и генерирует исключение, если число элементов последовательности отлично от 1.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return the single element of.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, единственный элемент которого требуется возвратить.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The input sequence contains more than one element.&#xA;&#xA; -or-&#xA;&#xA; The input sequence is empty.">Входная последовательность содержит более одного элемента.  
  
 -или-  
  
 Входная последовательность пуста.</exception>
      <returns vsli:raw="The single element of the input sequence.">Единственный элемент входной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.">Возвращает единственный элемент последовательности, удовлетворяющий указанному условию, и вызывает исключение, если таких элементов больше одного.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return a single element from.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить единственный элемент.</param>
      <param name="predicate" vsli:raw="A function to test an element for a condition.">Функция для проверки элемента на соответствие условию.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Ни один элемент не удовлетворяет условию предиката <paramref name="predicate" />.  
  
-или- 
Условию предиката <paramref name="predicate" /> удовлетворяет более одного элемента.  
  
-или- 
Исходная последовательность пуста.</exception>
      <returns vsli:raw="The single element of the input sequence that satisfies a condition.">Единственный элемент входной последовательности, удовлетворяющий условию.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.">Возвращает единственный элемент последовательности или значение по умолчанию, если последовательность пуста; если в последовательности более одного элемента, генерируется исключение.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return the single element of.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, единственный элемент которого требуется возвратить.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The input sequence contains more than one element.">Входная последовательность содержит более одного элемента.</exception>
      <returns vsli:raw="The single element of the input sequence, or &lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if the sequence contains no elements.">Единственный элемент входной последовательности или <see langword="default" />(<paramref name="TSource" />), если в последовательности нет элементов.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.">Возвращает единственный элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если такого элемента не существует; если условию удовлетворяет более одного элемента, вызывается исключение.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return a single element from.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить единственный элемент.</param>
      <param name="predicate" vsli:raw="A function to test an element for a condition.">Функция для проверки элемента на соответствие условию.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">Условию предиката <paramref name="predicate" /> удовлетворяет более одного элемента.</exception>
      <returns vsli:raw="The single element of the input sequence that satisfies the condition, or &lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if no such element is found.">Единственный элемент входной последовательности, удовлетворяющий условию, или <see langword="default" />(<paramref name="TSource" />), если такой элемент не найден.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary vsli:raw="Bypasses a specified number of elements in a sequence and then returns the remaining elements.">Пропускает заданное число элементов в последовательности и возвращает остальные элементы.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return elements from.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элементы.</param>
      <param name="count" vsli:raw="The number of elements to skip before returning the remaining elements.">Число элементов, пропускаемых перед возвращением остальных элементов.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements that occur after the specified index in the input sequence.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы из входной последовательности, начиная с указанного индекса.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary vsli:raw="Returns a new enumerable collection that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; with the last &lt;paramref name=&quot;count&quot; /&gt; elements of the source collection omitted.">Возвращает новую перечислимую коллекцию, содержащую элементы из <paramref name="source" /> с исключенными <paramref name="count" /> элементами из конца исходной коллекции.</summary>
      <param name="source" vsli:raw="An enumerable collection instance.">Экземпляр перечислимой коллекции.</param>
      <param name="count" vsli:raw="The number of elements to omit from the end of the collection.">Число элементов в конце коллекции, которые необходимо исключить.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the enumerable collection.">Тип элементов в перечислимой коллекции.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A new enumerable collection that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; minus &lt;paramref name=&quot;count&quot; /&gt; elements from the end of the collection.">Возвращает новую перечислимую коллекцию, содержащую элементы из <paramref name="source" /> минус <paramref name="count" /> элементов из конца коллекции.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.">Пропускает элементы в последовательности, пока они удовлетворяют заданному условию, и затем возвращает оставшиеся элементы.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return elements from.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элементы.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий цепочку элементов входной последовательности, начиная с первого элемента, который не прошел проверку, заданную предикатом <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary vsli:raw="Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.">Пропускает элементы в последовательности, пока они удовлетворяют заданному условию, и затем возвращает оставшиеся элементы. Индекс элемента используется в логике функции предиката.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return elements from.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элементы.</param>
      <param name="predicate" vsli:raw="A function to test each source element for a condition; the second parameter of the function represents the index of the source element.">Функция, применяемая к каждому исходному элементу для проверки условия; второй параметр функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий цепочку элементов входной последовательности, начиная с первого элемента, который не прошел проверку, заданную предикатом <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Вычисляет сумму последовательности значений типа <see cref="T:System.Decimal" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the sum of.">Последовательность значений <see cref="T:System.Decimal" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Сумма последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Вычисляет сумму последовательности значений типа <see cref="T:System.Double" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the sum of.">Последовательность значений <see cref="T:System.Double" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Сумма последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Вычисляет сумму последовательности значений типа <see cref="T:System.Int32" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the sum of.">Последовательность значений <see cref="T:System.Int32" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Сумма последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Вычисляет сумму последовательности значений типа <see cref="T:System.Int64" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the sum of.">Последовательность значений <see cref="T:System.Int64" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Сумма последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Вычисляет сумму последовательности значений <see cref="T:System.Decimal" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the sum of.">Последовательность значений <see cref="T:System.Decimal" /> обнуляемого типа, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Сумма последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Вычисляет сумму последовательности значений <see cref="T:System.Double" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the sum of.">Последовательность значений <see cref="T:System.Double" /> обнуляемого типа, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Сумма последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Вычисляет сумму последовательности значений <see cref="T:System.Int32" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the sum of.">Последовательность значений <see cref="T:System.Int32" /> обнуляемого типа, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Сумма последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Вычисляет сумму последовательности значений <see cref="T:System.Int64" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the sum of.">Последовательность значений <see cref="T:System.Int64" /> обнуляемого типа, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Сумма последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Вычисляет сумму последовательности значений <see cref="T:System.Single" /> обнуляемого типа.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the sum of.">Последовательность значений <see cref="T:System.Single" /> обнуляемого типа, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Сумма последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Вычисляет сумму последовательности значений типа <see cref="T:System.Single" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the sum of.">Последовательность значений <see cref="T:System.Single" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Сумма последовательности значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет сумму последовательности значений типа <see cref="T:System.Decimal" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Сумма проецированных значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет сумму последовательности значений типа <see cref="T:System.Double" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Сумма проецированных значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет сумму последовательности значений типа <see cref="T:System.Int32" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Сумма проецированных значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет сумму последовательности значений типа <see cref="T:System.Int64" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Сумма проецированных значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет сумму последовательности значений <see cref="T:System.Decimal" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Сумма проецированных значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет сумму последовательности значений <see cref="T:System.Double" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Сумма проецированных значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет сумму последовательности значений <see cref="T:System.Int32" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Сумма проецированных значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет сумму последовательности значений <see cref="T:System.Int64" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Сумма проецированных значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет сумму последовательности значений <see cref="T:System.Single" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Сумма проецированных значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Вычисляет сумму последовательности значений типа <see cref="T:System.Single" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Сумма проецированных значений.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary vsli:raw="Returns a specified number of contiguous elements from the start of a sequence.">Возвращает указанное число подряд идущих элементов с начала последовательности.</summary>
      <param name="source" vsli:raw="The sequence to return elements from.">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="count" vsli:raw="The number of elements to return.">Число возвращаемых элементов.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the specified number of elements from the start of the input sequence.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий заданное число элементов с начала входной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary vsli:raw="Returns a new enumerable collection that contains the last &lt;paramref name=&quot;count&quot; /&gt; elements from &lt;paramref name=&quot;source&quot; /&gt;.">Возвращает новую перечислимую коллекцию, содержащую последние <paramref name="count" /> элементов из <paramref name="source" />.</summary>
      <param name="source" vsli:raw="An enumerable collection instance.">Экземпляр перечислимой коллекции.</param>
      <param name="count" vsli:raw="The number of elements to take from the end of the collection.">Число элементов, которые необходимо взять из конца коллекции.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the enumerable collection.">Тип элементов в перечислимой коллекции.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A new enumerable collection that contains the last &lt;paramref name=&quot;count&quot; /&gt; elements from &lt;paramref name=&quot;source&quot; /&gt;.">Новая перечислимая коллекция, содержащая последние <paramref name="count" /> элементов из <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns elements from a sequence as long as a specified condition is true.">Возвращает цепочку элементов последовательности, удовлетворяющих указанному условию.</summary>
      <param name="source" vsli:raw="A sequence to return elements from.">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements from the input sequence that occur before the element at which the test no longer passes.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы входной последовательности до первого элемента, который не прошел проверку.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary vsli:raw="Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.">Возвращает цепочку элементов последовательности, удовлетворяющих указанному условию. Индекс элемента используется в логике функции предиката.</summary>
      <param name="source" vsli:raw="The sequence to return elements from.">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="predicate" vsli:raw="A function to test each source element for a condition; the second parameter of the function represents the index of the source element.">Функция, применяемая к каждому исходному элементу для проверки условия; второй параметр функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements from the input sequence that occur before the element at which the test no longer passes.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы входной последовательности до первого элемента, который не прошел проверку.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.">Выполняет дополнительное упорядочение элементов последовательности в порядке возрастания ключа.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; that contains elements to sort.">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted according to a key.">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.">Выполняет дополнительное упорядочение элементов последовательности в порядке возрастания с использованием указанного компаратора.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; that contains elements to sort.">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted according to a key.">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.">Выполняет дополнительное упорядочение элементов последовательности в порядке убывания ключа.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; that contains elements to sort.">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.">Выполняет дополнительное упорядочение элементов последовательности в порядке убывания с использованием указанного компаратора.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; that contains elements to sort.">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates an array from a &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Создает массив из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create an array from.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается массив.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An array that contains the elements from the input sequence.">Массив, содержащий элементы из входной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; according to a specified key selector function.">Создает словарь <see cref="T:System.Collections.Generic.Dictionary`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданной функцией селектора ключа.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;keySelector&quot; /&gt; produces a key that is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.  
  
-или- 
 Функция <paramref name="keySelector" /> возвращает <see langword="null" /> в качестве ключа.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;keySelector&quot; /&gt; produces duplicate keys for two elements.">Функция <paramref name="keySelector" /> выдает дубликаты ключей для двух элементов.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; that contains keys and values. The values within each group are in the same order as in &lt;paramref name=&quot;source&quot; /&gt;.">Объект <see cref="T:System.Collections.Generic.Dictionary`2" />, содержащий ключи и значения. Значения в каждой группе находятся в том же порядке, что и в <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; according to a specified key selector function and key comparer.">Создает словарь <see cref="T:System.Collections.Generic.Dictionary`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданной функцией селектора ключа и компаратором ключей.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключей, возвращаемых функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;keySelector&quot; /&gt; produces a key that is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.  
  
-или- 
 Функция <paramref name="keySelector" /> возвращает <see langword="null" /> в качестве ключа.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;keySelector&quot; /&gt; produces duplicate keys for two elements.">Функция <paramref name="keySelector" /> выдает дубликаты ключей для двух элементов.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; that contains keys and values. The values within each group are in the same order as in &lt;paramref name=&quot;source&quot; /&gt;.">Объект <see cref="T:System.Collections.Generic.Dictionary`2" />, содержащий ключи и значения. Значения в каждой группе находятся в том же порядке, что и в <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; according to specified key selector and element selector functions.">Создает словарь <see cref="T:System.Collections.Generic.Dictionary`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданными функциями селектора ключа и селектора элемента.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="elementSelector" vsli:raw="A transform function to produce a result element value from each element.">Функция преобразования для получения результирующего значения каждого элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the value returned by &lt;paramref name=&quot;elementSelector&quot; /&gt;.">Тип значения, возвращаемого функцией <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;keySelector&quot; /&gt; produces a key that is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение <see langword="null" />.  
  
-или- 
 Функция <paramref name="keySelector" /> возвращает <see langword="null" /> в качестве ключа.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;keySelector&quot; /&gt; produces duplicate keys for two elements.">Функция <paramref name="keySelector" /> выдает дубликаты ключей для двух элементов.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; that contains values of type &lt;paramref name=&quot;TElement&quot; /&gt; selected from the input sequence.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит значения типа <paramref name="TElement" />, выбранные из входной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; according to a specified key selector function, a comparer, and an element selector function.">Создает словарь <see cref="T:System.Collections.Generic.Dictionary`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданным компаратором и функциями селектора ключа и селектора элемента.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="elementSelector" vsli:raw="A transform function to produce a result element value from each element.">Функция преобразования для получения результирующего значения каждого элемента.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the value returned by &lt;paramref name=&quot;elementSelector&quot; /&gt;.">Тип значения, возвращаемого функцией <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;keySelector&quot; /&gt; produces a key that is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение <see langword="null" />.  
  
-или- 
 Функция <paramref name="keySelector" /> возвращает <see langword="null" /> в качестве ключа.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;keySelector&quot; /&gt; produces duplicate keys for two elements.">Функция <paramref name="keySelector" /> выдает дубликаты ключей для двух элементов.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; that contains values of type &lt;paramref name=&quot;TElement&quot; /&gt; selected from the input sequence.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит значения типа <paramref name="TElement" />, выбранные из входной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Создает <see cref="T:System.Collections.Generic.HashSet`1" /> из <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; that contains values of type &lt;paramref name=&quot;TSource&quot; /&gt; selected from the input sequence.">
        <see cref="T:System.Collections.Generic.HashSet`1" />, который содержит значения типа TSource, выбранные из входной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; using the &lt;paramref name=&quot;comparer&quot; /&gt; to compare keys.">Создает <see cref="T:System.Collections.Generic.HashSet`1" /> из <see cref="T:System.Collections.Generic.IEnumerable`1" /> с использованием <paramref name="comparer" /> для сравнения ключей.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; that contains values of type &lt;paramref name=&quot;TSource&quot; /&gt; selected from the input sequence.">
        <see cref="T:System.Collections.Generic.HashSet`1" />, который содержит значения типа <paramref name="TSource" />, выбранные из входной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Создает <see cref="T:System.Collections.Generic.List`1" /> из <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; from.">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается список <see cref="T:System.Collections.Generic.List`1" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that contains elements from the input sequence.">Объект <see cref="T:System.Collections.Generic.List`1" />, содержащий элементы из входной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; according to a specified key selector function.">Создает словарь <see cref="T:System.Linq.Lookup`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданной функцией селектора ключа.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; from.">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается список <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; that contains keys and values. The values within each group are in the same order as in &lt;paramref name=&quot;source&quot; /&gt;.">Объект <see cref="T:System.Linq.Lookup`2" />, содержащий ключи и значения. Значения в каждой группе находятся в том же порядке, что и в <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; according to a specified key selector function and key comparer.">Создает словарь <see cref="T:System.Linq.Lookup`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданной функцией селектора ключа и компаратором ключей.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; from.">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается список <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; that contains keys and values. The values within each group are in the same order as in &lt;paramref name=&quot;source&quot; /&gt;.">Объект <see cref="T:System.Linq.Lookup`2" />, содержащий ключи и значения. Значения в каждой группе находятся в том же порядке, что и в <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; according to specified key selector and element selector functions.">Создает словарь <see cref="T:System.Linq.Lookup`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданными функциями селектора ключа и селектора элемента.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; from.">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается список <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="elementSelector" vsli:raw="A transform function to produce a result element value from each element.">Функция преобразования для получения результирующего значения каждого элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the value returned by &lt;paramref name=&quot;elementSelector&quot; /&gt;.">Тип значения, возвращаемого функцией <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; that contains values of type &lt;paramref name=&quot;TElement&quot; /&gt; selected from the input sequence.">
        <see cref="T:System.Linq.Lookup`2" />, который содержит значения типа <paramref name="TElement" />, выбранные из входной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; according to a specified key selector function, a comparer and an element selector function.">Создает объект <see cref="T:System.Linq.Lookup`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданным компаратором и функциями селектора ключа и селектора элемента.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; from.">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается список <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="elementSelector" vsli:raw="A transform function to produce a result element value from each element.">Функция преобразования для получения результирующего значения каждого элемента.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the value returned by &lt;paramref name=&quot;elementSelector&quot; /&gt;.">Тип значения, возвращаемого функцией <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; that contains values of type &lt;paramref name=&quot;TElement&quot; /&gt; selected from the input sequence.">
        <see cref="T:System.Linq.Lookup`2" />, который содержит значения типа <paramref name="TElement" />, выбранные из входной последовательности.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set union of two sequences by using the default equality comparer.">Находит объединение множеств, представленных двумя последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <param name="first" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements form the first set for the union.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, различающиеся элементы которого образуют первое множество для объединения.</param>
      <param name="second" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements form the second set for the union.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, различающиеся элементы которого образуют второе множество для объединения.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements from both input sequences, excluding duplicates.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы, имеющиеся в обеих входных последовательностях, кроме дубликатов.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set union of two sequences by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Находит объединение множеств, представленных двумя последовательностями, используя указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="first" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements form the first set for the union.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, различающиеся элементы которого образуют первое множество для объединения.</param>
      <param name="second" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements form the second set for the union.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, различающиеся элементы которого образуют второе множество для объединения.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements from both input sequences, excluding duplicates.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы, имеющиеся в обеих входных последовательностях, кроме дубликатов.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Filters a sequence of values based on a predicate.">Выполняет фильтрацию последовательности значений на основе заданного предиката.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to filter.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, подлежащий фильтрации.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements from the input sequence that satisfy the condition.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы входной последовательности, которые удовлетворяют условию.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary vsli:raw="Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.">Выполняет фильтрацию последовательности значений на основе заданного предиката. Индекс каждого элемента используется в логике функции предиката.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to filter.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, подлежащий фильтрации.</param>
      <param name="predicate" vsli:raw="A function to test each source element for a condition; the second parameter of the function represents the index of the source element.">Функция, применяемая к каждому исходному элементу для проверки условия; второй параметр функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements from the input sequence that satisfy the condition.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы входной последовательности, которые удовлетворяют условию.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
      <summary vsli:raw="Produces a sequence of tuples with elements from the two specified sequences.">Создает последовательность кортежей с элементами из двух указанных последовательностей.</summary>
      <param name="first" vsli:raw="The first sequence to merge.">Первая последовательность для объединения.</param>
      <param name="second" vsli:raw="The second sequence to merge.">Вторая последовательность для объединения.</param>
      <typeparam name="TFirst" vsli:raw="The type of the elements of the first input sequence.">Тип элементов первой входной последовательности.</typeparam>
      <typeparam name="TSecond" vsli:raw="The type of the elements of the second input sequence.">Тип элементов второй входной последовательности.</typeparam>
      <returns vsli:raw="A sequence of tuples with elements taken from the first and second sequences, in that order.">Последовательность кортежей с элементами, взятыми из первой и второй последовательностей в указанном порядке.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary vsli:raw="Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.">Применяет указанную функцию к соответствующим элементам двух последовательностей, что дает последовательность результатов.</summary>
      <param name="first" vsli:raw="The first sequence to merge.">Первая последовательность для объединения.</param>
      <param name="second" vsli:raw="The second sequence to merge.">Вторая последовательность для объединения.</param>
      <param name="resultSelector" vsli:raw="A function that specifies how to merge the elements from the two sequences.">Функция, которая определяет, как объединить элементы двух последовательностей.</param>
      <typeparam name="TFirst" vsli:raw="The type of the elements of the first input sequence.">Тип элементов первой входной последовательности.</typeparam>
      <typeparam name="TSecond" vsli:raw="The type of the elements of the second input sequence.">Тип элементов второй входной последовательности.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the result sequence.">Тип элементов результирующей последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains merged elements of two input sequences.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объединенные элементы двух входных последовательностей.</returns>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary vsli:raw="Represents a collection of objects that have a common key.">Представляет коллекцию объектов с общим ключом.</summary>
      <typeparam name="TKey" vsli:raw="The type of the key of the &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Тип ключа объекта <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the values in the &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Тип значений объекта <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary vsli:raw="Gets the key of the &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Возвращает ключ объекта <see cref="T:System.Linq.IGrouping`2" />.</summary>
      <returns vsli:raw="The key of the &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Ключ объекта <see cref="T:System.Linq.IGrouping`2" />.</returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary vsli:raw="Defines an indexer, size property, and Boolean search method for data structures that map keys to &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; sequences of values.">Определяет индексатор, свойство размера и метод логического поиска для структур данных, сопоставляющих ключи с последовательностями <see cref="T:System.Collections.Generic.IEnumerable`1" /> значений.</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the &lt;see cref=&quot;T:System.Linq.ILookup`2&quot; /&gt;.">Тип ключей объекта <see cref="T:System.Linq.ILookup`2" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in the &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; sequences that make up the values in the &lt;see cref=&quot;T:System.Linq.ILookup`2&quot; /&gt;.">Тип элементов в последовательностях <see cref="T:System.Collections.Generic.IEnumerable`1" />, представляющих значения объекта <see cref="T:System.Linq.ILookup`2" />.</typeparam>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary vsli:raw="Determines whether a specified key exists in the &lt;see cref=&quot;T:System.Linq.ILookup`2&quot; /&gt;.">Определяет, существует ли указанный ключ в <see cref="T:System.Linq.ILookup`2" />.</summary>
      <param name="key" vsli:raw="The key to search for in the &lt;see cref=&quot;T:System.Linq.ILookup`2&quot; /&gt;.">Ключ, который требуется найти в <see cref="T:System.Linq.ILookup`2" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is in the &lt;see cref=&quot;T:System.Linq.ILookup`2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если ключ <paramref name="key" /> содержится в <see cref="T:System.Linq.ILookup`2" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary vsli:raw="Gets the number of key/value collection pairs in the &lt;see cref=&quot;T:System.Linq.ILookup`2&quot; /&gt;.">Возвращает число пар коллекции "ключ-значение", содержащихся в <see cref="T:System.Linq.ILookup`2" />.</summary>
      <returns vsli:raw="The number of key/value collection pairs in the &lt;see cref=&quot;T:System.Linq.ILookup`2&quot; /&gt;.">Число пар "ключ/коллекция значений", содержащихся в объекте <see cref="T:System.Linq.ILookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; sequence of values indexed by a specified key.">Возвращает последовательность значений <see cref="T:System.Collections.Generic.IEnumerable`1" /> по индексу, определенному указанным ключом.</summary>
      <param name="key" vsli:raw="The key of the desired sequence of values.">Ключ требуемой последовательности значений.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; sequence of values indexed by the specified key.">Последовательность значений <see cref="T:System.Collections.Generic.IEnumerable`1" /> с индексом, определенным указанным ключом.</returns>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary vsli:raw="Represents a sorted sequence.">Представляет упорядоченную последовательность.</summary>
      <typeparam name="TElement" vsli:raw="The type of the elements of the sequence.">Тип элементов последовательности.</typeparam>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary vsli:raw="Performs a subsequent ordering on the elements of an &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; according to a key.">Выполняет дополнительное упорядочение элементов объекта <see cref="T:System.Linq.IOrderedEnumerable`1" /> по ключу.</summary>
      <param name="keySelector" vsli:raw="The &lt;see cref=&quot;T:System.Func`2&quot; /&gt; used to extract the key for each element.">Функция <see cref="T:System.Func`2" />, используемая для извлечения ключа для каждого элемента.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; used to compare keys for placement in the returned sequence.">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей при формировании возвращаемой последовательности.</param>
      <param name="descending" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to sort the elements in descending order; &lt;see langword=&quot;false&quot; /&gt; to sort the elements in ascending order.">
        <see langword="true" />, если элементы требуется сортировать в порядке убывания; <see langword="false" />, чтобы сортировать элементы в порядке возрастания.</param>
      <typeparam name="TKey" vsli:raw="The type of the key produced by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Тип ключа, созданного функцией <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted according to a key.">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу.</returns>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary vsli:raw="Represents a collection of keys each mapped to one or more values.">Представляет коллекцию ключей, каждый из сопоставляется с одним или несколькими значениями.</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Тип ключей объекта <see cref="T:System.Linq.Lookup`2" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements of each &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; value in the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Тип элементов для каждого значения <see cref="T:System.Collections.Generic.IEnumerable`1" /> в составе объекта <see cref="T:System.Linq.Lookup`2" />.</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary vsli:raw="Applies a transform function to each key and its associated values and returns the results.">Применяет функцию преобразования к каждому ключу и связанным с ним значениям и возвращает результаты.</summary>
      <param name="resultSelector" vsli:raw="A function to project a result value from each key and its associated values.">Функция, проецирующая результирующее значение из каждого ключа и связанных с ним значений.</param>
      <typeparam name="TResult" vsli:raw="The type of the result values produced by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Тип результирующих значений, возвращаемых функцией <paramref name="resultSelector" />.</typeparam>
      <returns vsli:raw="A collection that contains one value for each key/value collection pair in the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Коллекция, содержащая одно значение для каждой пары "ключ/коллекция значений", содержащейся в объекте <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary vsli:raw="Determines whether a specified key is in the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Определяет, содержится ли указанный ключ в объекте <see cref="T:System.Linq.Lookup`2" />.</summary>
      <param name="key" vsli:raw="The key to find in the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Ключ, который требуется найти в объекте <see cref="T:System.Linq.Lookup`2" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is in the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если ключ <paramref name="key" /> содержится в <see cref="T:System.Linq.Lookup`2" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary vsli:raw="Returns a generic enumerator that iterates through the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Возвращает универсальный перечислитель, осуществляющий итерацию элементов объекта <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns vsli:raw="An enumerator for the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Перечислитель для коллекции <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;. This class cannot be inherited.">Возвращает перечислитель, осуществляющий перебор элементов списка <see cref="T:System.Linq.Lookup`2" />. Этот класс не наследуется.</summary>
      <returns vsli:raw="An enumerator for the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Перечислитель для коллекции <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary vsli:raw="Gets the number of key/value collection pairs in the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Возвращает число пар коллекции "ключ-значение", содержащихся в <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns vsli:raw="The number of key/value collection pairs in the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Число пар "ключ/коллекция значений", содержащихся в объекте <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary vsli:raw="Gets the collection of values indexed by the specified key.">Возвращает коллекцию значений, индексированных по указанному ключу.</summary>
      <param name="key" vsli:raw="The key of the desired collection of values.">Ключ требуемой коллекции значений.</param>
      <returns vsli:raw="The collection of values indexed by the specified key.">Коллекция значений, индексированных по указанному ключу.</returns>
    </member>
  </members>
</doc>
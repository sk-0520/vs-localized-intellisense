<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Numerics.Vectors</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.Matrix3x2">
      <summary>Представляет матрицу 3x2.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Создает матрицу 3x2 на основе заданных координат.</summary>
      <param name="m11">Значение, которое присваивается первому элементу в первой строке.</param>
      <param name="m12">Значение, которое присваивается второму элементу в первой строке.</param>
      <param name="m21">Значение, которое присваивается первому элементу во второй строке.</param>
      <param name="m22">Значение, которое присваивается второму элементу во второй строке.</param>
      <param name="m31">Значение, которое присваивается первому элементу в третьей строке.</param>
      <param name="m32">Значение, которое присваивается второму элементу в третьей строке.</param>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Add(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Складывает каждый элемент в одной матрице с соответствующим элементом во второй матрице.</summary>
      <param name="value1">Первая матрица.</param>
      <param name="value2">Вторая матрица.</param>
      <returns>Матрица, содержащая суммарные значения <paramref name="value1" /> и <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single)">
      <summary>Создает матрицу поворота на основе заданного угла поворота в радианах.</summary>
      <param name="radians">Значение поворота (в радианах).</param>
      <returns>Матрица поворота.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single,System.Numerics.Vector2)">
      <summary>Создает матрицу поворота на основе заданного угла поворота в радианах и центральной точки.</summary>
      <param name="radians">Значение поворота (в радианах).</param>
      <param name="centerPoint">Центральная точка.</param>
      <returns>Матрица поворота.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2)">
      <summary>Создает матрицу масштабирования на основе заданного масштаба вектора.</summary>
      <param name="scales">Используемый масштаб.</param>
      <returns>Матрица масштабирования.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Создает матрицу масштабирования на основе заданного масштаба вектора со смещением от указанной центральной точки.</summary>
      <param name="scales">Используемый масштаб.</param>
      <param name="centerPoint">Смещение от центра.</param>
      <returns>Матрица масштабирования.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single)">
      <summary>Создает матрицу масштабирования с равномерным масштабированием с данным масштабом.</summary>
      <param name="scale">Используемый равномерный масштаб.</param>
      <returns>Матрица масштабирования.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Numerics.Vector2)">
      <summary>Создает матрицу масштабирования с равномерным масштабированием с данным масштабом со смещением от указанного центра.</summary>
      <param name="scale">Используемый равномерный масштаб.</param>
      <param name="centerPoint">Смещение от центра.</param>
      <returns>Матрица масштабирования.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single)">
      <summary>Создает матрицу масштабирования на основе заданных координат X и Y.</summary>
      <param name="xScale">Значение для масштабирования по оси X.</param>
      <param name="yScale">Значение для масштабирования по оси Y.</param>
      <returns>Матрица масштабирования.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>Создает матрицу масштабирования со смещением на заданную центральную точку.</summary>
      <param name="xScale">Значение для масштабирования по оси X.</param>
      <param name="yScale">Значение для масштабирования по оси Y.</param>
      <param name="centerPoint">Центральная точка.</param>
      <returns>Матрица масштабирования.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single)">
      <summary>Создает матрицу наклона на основе заданных углов в радианах.</summary>
      <param name="radiansX">Угол X (в радианах).</param>
      <param name="radiansY">Угол Y (в радианах).</param>
      <returns>Матрица наклона.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>Создает матрицу наклона на основе заданных углов в радианах и центральной точки.</summary>
      <param name="radiansX">Угол X (в радианах).</param>
      <param name="radiansY">Угол Y (в радианах).</param>
      <param name="centerPoint">Центральная точка.</param>
      <returns>Матрица наклона.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Numerics.Vector2)">
      <summary>Создает матрицу трансляции на основе заданного двухмерного вектора.</summary>
      <param name="position">Позиция трансляции.</param>
      <returns>Матрица трансляции.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Single,System.Single)">
      <summary>Создает матрицу трансляции на основе заданных координат X и Y.</summary>
      <param name="xPosition">Позиция по оси Х.</param>
      <param name="yPosition">Позиция по оси Y.</param>
      <returns>Матрица трансляции.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Numerics.Matrix3x2)">
      <summary>Возвращает значение, указывающее, равен ли данный экземпляр другой матрице 3х2.</summary>
      <param name="other">Другая матрица.</param>
      <returns>Значение <see langword="true" />, если две матрицы равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли данный экземпляр указанному объекту.</summary>
      <param name="obj">Объект для сравнения с текущим экземпляром.</param>
      <returns>Значение <see langword="true" />, если объект <paramref name="obj" /> равен текущему экземпляру; в противном случае — значение <see langword="false" />. Если значением параметра <paramref name="obj" /> является <see langword="null" />, метод возвращает <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetDeterminant">
      <summary>Вычисляет определитель данной матрицы.</summary>
      <returns>Определитель.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Identity">
      <summary>Получает матрицу мультипликативного тождества.</summary>
      <returns>Матрица мультипликативного тождества.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Invert(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2@)">
      <summary>Инвертирует заданную матрицу. Возвращаемое значение указывает, успешно ли выполнена операция.</summary>
      <param name="matrix">Инвертируемая матрица.</param>
      <param name="result">В качестве возвращаемого значения этот метод содержит инвертированную матрицу, если операция выполнена успешно.</param>
      <returns>Значение <see langword="true" />, если параметр <paramref name="matrix" /> успешно преобразован; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.IsIdentity">
      <summary>Указывает, является ли текущая матрица единичной матрицей.</summary>
      <returns>Значение <see langword="true" />, если текущая матрица — единичная матрица; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Lerp(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2,System.Single)">
      <summary>Выполняет линейную интерполяцию из одной матрицы во вторую матрицу на основе значения, указывающего взвешивание второй матрицы.</summary>
      <param name="matrix1">Первая матрица.</param>
      <param name="matrix2">Вторая матрица.</param>
      <param name="amount">Относительное взвешивание матрицы <paramref name="matrix2" />.</param>
      <returns>Интерполированная матрица.</returns>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M11">
      <summary>Первый элемент первой строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M12">
      <summary>Второй элемент первой строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M21">
      <summary>Первый элемент второй строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M22">
      <summary>Второй элемент второй строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M31">
      <summary>Первый элемент третьей строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M32">
      <summary>Второй элемент третьей строки.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Возвращает матрицу, полученную в результате перемножения двух матриц.</summary>
      <param name="value1">Первая матрица.</param>
      <param name="value2">Вторая матрица.</param>
      <returns>Матрица произведения.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>Возвращает матрицу, получаемую в результате масштабирования всех элементов заданной матрицы на скалярный множитель.</summary>
      <param name="value1">Масштабируемая матрица.</param>
      <param name="value2">Используемое значение масштабирования.</param>
      <returns>Масштабированная матрица.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Negate(System.Numerics.Matrix3x2)">
      <summary>Преобразует заданную матрицу в отрицательную, умножая все ее значения на "-1".</summary>
      <param name="value">Матрица, преобразуемая в отрицательную.</param>
      <returns>Матрица, преобразованная в отрицательную.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Addition(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Складывает каждый элемент в одной матрице с соответствующим элементом во второй матрице.</summary>
      <param name="value1">Первая матрица.</param>
      <param name="value2">Вторая матрица.</param>
      <returns>Матрица, содержащая суммарные значения.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Equality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Возвращает значение, указывающее на равенство заданных матриц.</summary>
      <param name="value1">Первая матрица для сравнения.</param>
      <param name="value2">Вторая матрица для сравнения.</param>
      <returns>Значение <see langword="true" />, если <paramref name="value1" /> и <paramref name="value2" /> равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Inequality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Возвращает значение, указывающее на неравенство заданных матриц.</summary>
      <param name="value1">Первая матрица для сравнения.</param>
      <param name="value2">Вторая матрица для сравнения.</param>
      <returns>Значение <see langword="true" />, если <paramref name="value1" /> и <paramref name="value2" /> не равны друг другу; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Возвращает матрицу, полученную в результате перемножения двух матриц.</summary>
      <param name="value1">Первая матрица.</param>
      <param name="value2">Вторая матрица.</param>
      <returns>Матрица произведения.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>Возвращает матрицу, получаемую в результате масштабирования всех элементов заданной матрицы на скалярный множитель.</summary>
      <param name="value1">Масштабируемая матрица.</param>
      <param name="value2">Используемое значение масштабирования.</param>
      <returns>Масштабированная матрица.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Subtraction(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Вычитает каждый элемент во второй матрице из соответствующего элемента в первой матрице.</summary>
      <param name="value1">Первая матрица.</param>
      <param name="value2">Вторая матрица.</param>
      <returns>Матрица, содержащая значения, которые являются результатом вычитания каждого элемента в <paramref name="value2" /> из соответствующего элемента в <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_UnaryNegation(System.Numerics.Matrix3x2)">
      <summary>Преобразует заданную матрицу в отрицательную, умножая все ее значения на "-1".</summary>
      <param name="value">Матрица, преобразуемая в отрицательную.</param>
      <returns>Матрица, преобразованная в отрицательную.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Subtract(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Вычитает каждый элемент во второй матрице из соответствующего элемента в первой матрице.</summary>
      <param name="value1">Первая матрица.</param>
      <param name="value2">Вторая матрица.</param>
      <returns>Матрица, содержащая значения, которые являются результатом вычитания каждого элемента в <paramref name="value2" /> из соответствующего элемента в <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.ToString">
      <summary>Возвращает строку, представляющую данную матрицу.</summary>
      <returns>Строковое представление данной матрицы.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Translation">
      <summary>Получает или задает координату трансляции данной матрицы.</summary>
      <returns>Координата трансляции текущего экземпляра.</returns>
    </member>
    <member name="T:System.Numerics.Matrix4x4">
      <summary>Представляет матрицу 4x4.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Numerics.Matrix3x2)">
      <summary>Создает объект <see cref="T:System.Numerics.Matrix4x4" /> из указанного объекта <see cref="T:System.Numerics.Matrix3x2" />.</summary>
      <param name="value">Матрица 3x2.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Создает матрицу 4x4 на основе заданных координат.</summary>
      <param name="m11">Значение, которое присваивается первому элементу в первой строке.</param>
      <param name="m12">Значение, которое присваивается второму элементу в первой строке.</param>
      <param name="m33">Значение, которое присваивается третьему элементу в третьей строке.</param>
      <param name="m34">Значение, которое присваивается четвертому элементу в третьей строке.</param>
      <param name="m41">Значение, которое присваивается первому элементу в четвертой строке.</param>
      <param name="m42">Значение, которое присваивается второму элементу в четвертой строке.</param>
      <param name="m43">Значение, которое присваивается третьему элементу в четвертой строке.</param>
      <param name="m44">Значение, которое присваивается четвертому элементу в четвертой строке.</param>
      <param name="m13">Значение, которое присваивается третьему элементу в первой строке.</param>
      <param name="m14">Значение, которое присваивается четвертому элементу в первой строке.</param>
      <param name="m21">Значение, которое присваивается первому элементу во второй строке.</param>
      <param name="m22">Значение, которое присваивается второму элементу во второй строке.</param>
      <param name="m23">Значение, которое присваивается третьему элементу во второй строке.</param>
      <param name="m24">Значение, которое присваивается третьему элементу во второй строке.</param>
      <param name="m31">Значение, которое присваивается первому элементу в третьей строке.</param>
      <param name="m32">Значение, которое присваивается второму элементу в третьей строке.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Add(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Складывает каждый элемент в одной матрице с соответствующим элементом во второй матрице.</summary>
      <param name="value1">Первая матрица.</param>
      <param name="value2">Вторая матрица.</param>
      <returns>Матрица, содержащая суммарные значения <paramref name="value1" /> и <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Создает сферический элемент с объявлением, который вращается вокруг заданной позиции объекта.</summary>
      <param name="objectPosition">Позиция объекта, вокруг которой будет вращаться элемент с объявлением.</param>
      <param name="cameraPosition">Положение камеры.</param>
      <param name="cameraUpVector">Вектор перемещения камеры вверх.</param>
      <param name="cameraForwardVector">Вектор перемещения камеры вперед.</param>
      <returns>Созданный элемент с объявлением.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateConstrainedBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Создает цилиндрический элемент с объявлением, который вращается вокруг заданной оси.</summary>
      <param name="objectPosition">Позиция объекта, вокруг которой будет вращаться элемент с объявлением.</param>
      <param name="cameraPosition">Положение камеры.</param>
      <param name="rotateAxis">Ось, вокруг которой будет вращаться элемент с объявлением.</param>
      <param name="cameraForwardVector">Вектор перемещения камеры вперед.</param>
      <param name="objectForwardVector">Вектор перемещения объекта вперед.</param>
      <returns>Матрица элемента с объявлением.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>Создает матрицу, которая вращается вокруг произвольного вектора.</summary>
      <param name="axis">Ось вращения.</param>
      <param name="angle">Угол поворота вокруг <paramref name="axis" /> (в радианах).</param>
      <returns>Матрица поворота.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromQuaternion(System.Numerics.Quaternion)">
      <summary>Создает матрицу поворота на основе заданного значения поворота кватерниона.</summary>
      <param name="quaternion">Исходный кватернион.</param>
      <returns>Матрица поворота.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Создает матрицу поворота на основе заданного значения нутации, прецессии и собственного вращения.</summary>
      <param name="yaw">Угол поворота вокруг оси Y (в радианах).</param>
      <param name="pitch">Угол поворота вокруг оси X (в радианах).</param>
      <param name="roll">Угол поворота вокруг оси Z (в радианах).</param>
      <returns>Матрица поворота.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateLookAt(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Создает матрицу просмотра.</summary>
      <param name="cameraPosition">Положение камеры.</param>
      <param name="cameraTarget">Целевой объект, на который указывает камера.</param>
      <param name="cameraUpVector">Направление "вверх" с точки зрения камеры.</param>
      <returns>Матрица просмотра.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
      <summary>Создает матрицу ортогональной перспективы на основе данных размеров отображаемого объема.</summary>
      <param name="width">Ширина отображаемого объема.</param>
      <param name="height">Высота отображаемого объема.</param>
      <param name="zNearPlane">Минимальное значение по оси Z отображаемого объема.</param>
      <param name="zFarPlane">Максимальное значение по оси Z отображаемого объема.</param>
      <returns>Матрица ортогональной проекции.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Создает настраиваемую матрицу ортогональной проекции.</summary>
      <param name="left">Минимальное значение по оси X отображаемого объема.</param>
      <param name="right">Максимальное значение по оси X отображаемого объема.</param>
      <param name="bottom">Минимальное значение по оси Y отображаемого объема.</param>
      <param name="top">Максимальное значение по оси Y отображаемого объема.</param>
      <param name="zNearPlane">Минимальное значение по оси Z отображаемого объема.</param>
      <param name="zFarPlane">Максимальное значение по оси Z отображаемого объема.</param>
      <returns>Матрица ортогональной проекции.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
      <summary>Создает матрицу перспективы на основе данных размеров отображаемого объема.</summary>
      <param name="width">Ширина отображаемого объема в ближней плоскости просмотра.</param>
      <param name="height">Высота отображаемого объема в ближней плоскости просмотра.</param>
      <param name="nearPlaneDistance">Расстояние до ближней плоскости просмотра.</param>
      <param name="farPlaneDistance">Расстояние до дальней плоскости просмотра.</param>
      <returns>Матрица перспективы.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="nearPlaneDistance" /> не больше нуля.
-или-
Значение <paramref name="farPlaneDistance" /> не больше нуля.
-или-
Значение <paramref name="nearPlaneDistance" /> больше или равно <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>Создает матрицу перспективы на основе поля зрения, пропорций и расстояния до ближней и дальней плоскости просмотра.</summary>
      <param name="fieldOfView">Поле зрения в направлении Y в радианах.</param>
      <param name="aspectRatio">Пропорции, определенные как ширина зрительного пространства, деленная на высоту.</param>
      <param name="nearPlaneDistance">Расстояние до ближней плоскости просмотра.</param>
      <param name="farPlaneDistance">Расстояние до дальней плоскости просмотра.</param>
      <returns>Матрица перспективы.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="fieldOfView" /> не больше нуля.
-или-
Значение <paramref name="fieldOfView" /> больше или равно <see cref="F:System.Math.PI" />.
Значение <paramref name="nearPlaneDistance" /> не больше нуля.
-или-
Значение <paramref name="farPlaneDistance" /> не больше нуля.
-или-
Значение <paramref name="nearPlaneDistance" /> больше или равно <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Создает настраиваемую матрицу перспективы.</summary>
      <param name="left">Минимальное значение по оси X отображаемого объема в ближней плоскости просмотра.</param>
      <param name="right">Максимальное значение по оси X отображаемого объема в ближней плоскости просмотра.</param>
      <param name="bottom">Минимальное значение по оси Y отображаемого объема в ближней плоскости просмотра.</param>
      <param name="top">Максимальное значение по оси Y отображаемого объема в ближней плоскости просмотра.</param>
      <param name="nearPlaneDistance">Расстояние до ближней плоскости просмотра.</param>
      <param name="farPlaneDistance">Расстояние до дальней плоскости просмотра.</param>
      <returns>Матрица перспективы.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="nearPlaneDistance" /> не больше нуля.
-или-
Значение <paramref name="farPlaneDistance" /> не больше нуля.
-или-
Значение <paramref name="nearPlaneDistance" /> больше или равно <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateReflection(System.Numerics.Plane)">
      <summary>Создает матрицу, отражающую систему координат для указанной плоскости.</summary>
      <param name="value">Плоскость, для которой будет создано отражение.</param>
      <returns>Новая матрица, выражающая отражение.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single)">
      <summary>Создает матрицу для поворота точек вокруг оси X.</summary>
      <param name="radians">Значение поворота вокруг оси X (в радианах).</param>
      <returns>Матрица поворота.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single,System.Numerics.Vector3)">
      <summary>Создает матрицу для поворота точек вокруг оси X относительно центральной точки.</summary>
      <param name="radians">Значение поворота вокруг оси X (в радианах).</param>
      <param name="centerPoint">Центральная точка.</param>
      <returns>Матрица поворота.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single)">
      <summary>Создает матрицу для поворота точек вокруг оси Y.</summary>
      <param name="radians">Значение поворота вокруг оси Y (в радианах).</param>
      <returns>Матрица поворота.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single,System.Numerics.Vector3)">
      <summary>Значение поворота вокруг оси Y относительно центральной точки (в радианах).</summary>
      <param name="radians">Значение поворота вокруг оси Y (в радианах).</param>
      <param name="centerPoint">Центральная точка.</param>
      <returns>Матрица поворота.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single)">
      <summary>Создает матрицу для поворота точек вокруг оси Z.</summary>
      <param name="radians">Значение поворота вокруг оси Z (в радианах).</param>
      <returns>Матрица поворота.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single,System.Numerics.Vector3)">
      <summary>Создает матрицу для поворота точек вокруг оси Z относительно центральной точки.</summary>
      <param name="radians">Значение поворота вокруг оси Z (в радианах).</param>
      <param name="centerPoint">Центральная точка.</param>
      <returns>Матрица поворота.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3)">
      <summary>Создает матрицу масштабирования на основе заданного масштаба вектора.</summary>
      <param name="scales">Используемый масштаб.</param>
      <returns>Матрица масштабирования.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Создает матрицу масштабирования с центральной точкой.</summary>
      <param name="scales">Вектор, который содержит значение масштабирования по каждой оси.</param>
      <param name="centerPoint">Центральная точка.</param>
      <returns>Матрица масштабирования.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single)">
      <summary>Создает матрицу равномерного масштабирования, выполняющую равномерное масштабирование по каждой оси.</summary>
      <param name="scale">Коэффициент равномерного масштабирования.</param>
      <returns>Матрица масштабирования.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Numerics.Vector3)">
      <summary>Создает матрицу равномерного масштабирования, выполняющую равномерное масштабирование по каждой оси, с центральной точкой.</summary>
      <param name="scale">Коэффициент равномерного масштабирования.</param>
      <param name="centerPoint">Центральная точка.</param>
      <returns>Матрица масштабирования.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single)">
      <summary>Создает матрицу масштабирования на основе заданных координат X, Y и Z.</summary>
      <param name="xScale">Значение для масштабирования по оси X.</param>
      <param name="yScale">Значение для масштабирования по оси Y.</param>
      <param name="zScale">Значение для масштабирования по оси Z.</param>
      <returns>Матрица масштабирования.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,System.Numerics.Vector3)">
      <summary>Создает матрицу масштабирования со смещением на заданную центральную точку.</summary>
      <param name="xScale">Значение для масштабирования по оси X.</param>
      <param name="yScale">Значение для масштабирования по оси Y.</param>
      <param name="zScale">Значение для масштабирования по оси Z.</param>
      <param name="centerPoint">Центральная точка.</param>
      <returns>Матрица масштабирования.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateShadow(System.Numerics.Vector3,System.Numerics.Plane)">
      <summary>Создает матрицу, которая создает проекцию геометрической фигуры на указанной плоскости подобно отбрасыванию тени от указанного источника света.</summary>
      <param name="lightDirection">Направление, из которого поступает свет, отбрасывающий тень.</param>
      <param name="plane">Плоскость, на которой новая матрица должна создать проекцию геометрической фигуры, подобную отбрасыванию тени.</param>
      <returns>Новая матрица, которую можно использовать для создания проекции геометрической фигуры на указанной плоскости из заданного направления.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Numerics.Vector3)">
      <summary>Создает матрицу трансляции на основе заданного трехмерного вектора.</summary>
      <param name="position">Значение трансляции по каждой оси.</param>
      <returns>Матрица трансляции.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Single,System.Single,System.Single)">
      <summary>Создает матрицу трансляции на основе заданных координат X, Y и Z.</summary>
      <param name="xPosition">Значение трансляции по оси X.</param>
      <param name="yPosition">Значение трансляции по оси Y.</param>
      <param name="zPosition">Значение трансляции по оси Z.</param>
      <returns>Матрица трансляции.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateWorld(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Создает мировую матрицу с заданными параметрами.</summary>
      <param name="position">Позиция объекта.</param>
      <param name="forward">Направление вперед объекта.</param>
      <param name="up">Направление вверх объекта. Его значение обычно равно <c>[0, 1, 0]</c>.</param>
      <returns>Мировая матрица.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Decompose(System.Numerics.Matrix4x4,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Numerics.Vector3@)">
      <summary>Пытается извлечь координаты масштаба, трансляции и поворота на основе данной матрицы масштабирования, поворота или трансляции. Возвращаемое значение указывает, успешно ли выполнена операция.</summary>
      <param name="matrix">Исходная матрица.</param>
      <param name="scale">В качестве возвращаемого значения этот метод содержит координату масштабирования матрицы преобразования, если операция выполнена успешно.</param>
      <param name="rotation">В качестве возвращаемого значения этот метод содержит координату поворота матрицы преобразования, если операция выполнена успешно.</param>
      <param name="translation">В качестве возвращаемого значения этот метод содержит координату трансляции матрицы трансляции, если операция выполнена успешно.</param>
      <returns>Значение <see langword="true" />, если объект <paramref name="matrix" /> успешно разложен; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Numerics.Matrix4x4)">
      <summary>Возвращает значение, указывающее, равен ли данный экземпляр другой матрице 4x4.</summary>
      <param name="other">Другая матрица.</param>
      <returns>Значение <see langword="true" />, если две матрицы равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли данный экземпляр указанному объекту.</summary>
      <param name="obj">Объект для сравнения с текущим экземпляром.</param>
      <returns>Значение <see langword="true" />, если объект <paramref name="obj" /> равен текущему экземпляру; в противном случае — значение <see langword="false" />. Если значением параметра <paramref name="obj" /> является <see langword="null" />, метод возвращает <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetDeterminant">
      <summary>Вычисляет определитель текущей матрицы 4x4.</summary>
      <returns>Определитель.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Identity">
      <summary>Получает матрицу мультипликативного тождества.</summary>
      <returns>Получает матрицу мультипликативного тождества.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Invert(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4@)">
      <summary>Инвертирует заданную матрицу. Возвращаемое значение указывает, успешно ли выполнена операция.</summary>
      <param name="matrix">Инвертируемая матрица.</param>
      <param name="result">В качестве возвращаемого значения этот метод содержит инвертированную матрицу, если операция выполнена успешно.</param>
      <returns>Значение <see langword="true" />, если параметр <paramref name="matrix" /> успешно преобразован; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.IsIdentity">
      <summary>Указывает, является ли текущая матрица единичной матрицей.</summary>
      <returns>Значение <see langword="true" />, если текущая матрица — единичная матрица; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Lerp(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Single)">
      <summary>Выполняет линейную интерполяцию из одной матрицы во вторую матрицу на основе значения, указывающего взвешивание второй матрицы.</summary>
      <param name="matrix1">Первая матрица.</param>
      <param name="matrix2">Вторая матрица.</param>
      <param name="amount">Относительное взвешивание матрицы <paramref name="matrix2" />.</param>
      <returns>Интерполированная матрица.</returns>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M11">
      <summary>Первый элемент первой строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M12">
      <summary>Второй элемент первой строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M13">
      <summary>Третий элемент первой строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M14">
      <summary>Четвертый элемент первой строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M21">
      <summary>Первый элемент второй строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M22">
      <summary>Второй элемент второй строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M23">
      <summary>Третий элемент второй строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M24">
      <summary>Четвертый элемент второй строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M31">
      <summary>Первый элемент третьей строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M32">
      <summary>Второй элемент третьей строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M33">
      <summary>Третий элемент третьей строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M34">
      <summary>Четвертый элемент третьей строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M41">
      <summary>Первый элемент четвертой строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M42">
      <summary>Второй элемент четвертой строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M43">
      <summary>Третий элемент четвертой строки.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M44">
      <summary>Четвертый элемент четвертой строки.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Возвращает матрицу, полученную в результате перемножения двух матриц.</summary>
      <param name="value1">Первая матрица.</param>
      <param name="value2">Вторая матрица.</param>
      <returns>Матрица произведения.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>Возвращает матрицу, получаемую в результате масштабирования всех элементов заданной матрицы на скалярный множитель.</summary>
      <param name="value1">Масштабируемая матрица.</param>
      <param name="value2">Используемое значение масштабирования.</param>
      <returns>Масштабированная матрица.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Negate(System.Numerics.Matrix4x4)">
      <summary>Преобразует заданную матрицу в отрицательную, умножая все ее значения на "-1".</summary>
      <param name="value">Матрица, преобразуемая в отрицательную.</param>
      <returns>Матрица, преобразованная в отрицательную.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Addition(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Складывает каждый элемент в одной матрице с соответствующим элементом во второй матрице.</summary>
      <param name="value1">Первая матрица.</param>
      <param name="value2">Вторая матрица.</param>
      <returns>Матрица, содержащая суммарные значения.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Equality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Возвращает значение, указывающее на равенство заданных матриц.</summary>
      <param name="value1">Первая матрица для сравнения.</param>
      <param name="value2">Вторая матрица для сравнения.</param>
      <returns>Значение <see langword="true" />, если <paramref name="value1" /> и <paramref name="value2" /> равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Inequality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Возвращает значение, указывающее на неравенство заданных матриц.</summary>
      <param name="value1">Первая матрица для сравнения.</param>
      <param name="value2">Вторая матрица для сравнения.</param>
      <returns>Значение <see langword="true" />, если <paramref name="value1" /> и <paramref name="value2" /> не равны друг другу; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Возвращает матрицу, полученную в результате перемножения двух матриц.</summary>
      <param name="value1">Первая матрица.</param>
      <param name="value2">Вторая матрица.</param>
      <returns>Матрица произведения.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>Возвращает матрицу, получаемую в результате масштабирования всех элементов заданной матрицы на скалярный множитель.</summary>
      <param name="value1">Масштабируемая матрица.</param>
      <param name="value2">Используемое значение масштабирования.</param>
      <returns>Масштабированная матрица.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Subtraction(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Вычитает каждый элемент во второй матрице из соответствующего элемента в первой матрице.</summary>
      <param name="value1">Первая матрица.</param>
      <param name="value2">Вторая матрица.</param>
      <returns>Матрица, содержащая значения, которые являются результатом вычитания каждого элемента в <paramref name="value2" /> из соответствующего элемента в <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_UnaryNegation(System.Numerics.Matrix4x4)">
      <summary>Преобразует заданную матрицу в отрицательную, умножая все ее значения на "-1".</summary>
      <param name="value">Матрица, преобразуемая в отрицательную.</param>
      <returns>Матрица, преобразованная в отрицательную.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Subtract(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Вычитает каждый элемент во второй матрице из соответствующего элемента в первой матрице.</summary>
      <param name="value1">Первая матрица.</param>
      <param name="value2">Вторая матрица.</param>
      <returns>Матрица, содержащая значения, которые являются результатом вычитания каждого элемента в <paramref name="value2" /> из соответствующего элемента в <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.ToString">
      <summary>Возвращает строку, представляющую данную матрицу.</summary>
      <returns>Строковое представление данной матрицы.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transform(System.Numerics.Matrix4x4,System.Numerics.Quaternion)">
      <summary>Преобразует заданную матрицу, применяя указанный поворот кватерниона.</summary>
      <param name="value">Преобразуемая матрица.</param>
      <param name="rotation">Применяемый поворот.</param>
      <returns>Преобразованная матрица.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Translation">
      <summary>Получает или задает координату трансляции данной матрицы.</summary>
      <returns>Координата трансляции текущего экземпляра.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transpose(System.Numerics.Matrix4x4)">
      <summary>Переставляет строки и столбцы матрицы.</summary>
      <param name="matrix">Преобразуемая матрица.</param>
      <returns>Преобразованная матрица.</returns>
    </member>
    <member name="T:System.Numerics.Plane">
      <summary>Представляет плоскость в трехмерном пространстве.</summary>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Создает объект <see cref="T:System.Numerics.Plane" /> на основе заданной нормали и расстояния вдоль нормали от начала координат.</summary>
      <param name="normal">Вектор нормали плоскости.</param>
      <param name="d">Расстояние плоскости от начала координат вдоль ее вектора нормали.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector4)">
      <summary>Создает объект <see cref="T:System.Numerics.Plane" /> на основе заданного четырехмерного вектора.</summary>
      <param name="value">Вектор, первые три элемента которого описывают вектор нормали и <see cref="F:System.Numerics.Vector4.W" /> которого определяет расстояние вдоль этой нормали от начала координат.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Создает объект <see cref="T:System.Numerics.Plane" /> на основе координат X, Y и Z его нормали и расстояния от точки начала координат для этой нормали.</summary>
      <param name="x">Координата X нормали.</param>
      <param name="y">Координата Y нормали.</param>
      <param name="z">Координата Z нормали.</param>
      <param name="d">Расстояние плоскости вдоль ее нормали от начала координат.</param>
    </member>
    <member name="M:System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Создает объект <see cref="T:System.Numerics.Plane" />, содержащий три заданные точки.</summary>
      <param name="point1">Первая точка, определяющая плоскость.</param>
      <param name="point2">Вторая точка, определяющая плоскость.</param>
      <param name="point3">Третья точка, определяющая плоскость.</param>
      <returns>Плоскость, содержащая три точки.</returns>
    </member>
    <member name="F:System.Numerics.Plane.D">
      <summary>Расстояние плоскости вдоль ее нормали от начала координат.</summary>
    </member>
    <member name="M:System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)">
      <summary>Вычисляет скалярное произведение плоскости и четырехмерного вектора.</summary>
      <param name="plane">Плоскость.</param>
      <param name="value">Четырехмерный вектор.</param>
      <returns>Скалярное произведение.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>Возвращает скалярное произведение заданного трехмерного вектора и вектора нормали этой плоскости, а также значение расстояния (<see cref="F:System.Numerics.Plane.D" />) плоскости.</summary>
      <param name="plane">Плоскость.</param>
      <param name="value">Трехмерный вектор.</param>
      <returns>Скалярное произведение.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>Возвращает скалярное произведение заданного трехмерного вектора и вектора <see cref="F:System.Numerics.Plane.Normal" /> этой плоскости.</summary>
      <param name="plane">Плоскость.</param>
      <param name="value">Трехмерный вектор.</param>
      <returns>Скалярное произведение.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Numerics.Plane)">
      <summary>Возвращает значение, указывающее, равен ли данный экземпляр другому объекту плоскости.</summary>
      <param name="other">Другая плоскость.</param>
      <returns>Значение <see langword="true" />, если две плоскости равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли данный экземпляр указанному объекту.</summary>
      <param name="obj">Объект для сравнения с текущим экземпляром.</param>
      <returns>Значение <see langword="true" />, если объект <paramref name="obj" /> равен текущему экземпляру; в противном случае — значение <see langword="false" />. Если значением параметра <paramref name="obj" /> является <see langword="null" />, метод возвращает <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код.</returns>
    </member>
    <member name="F:System.Numerics.Plane.Normal">
      <summary>Вектор нормали плоскости.</summary>
    </member>
    <member name="M:System.Numerics.Plane.Normalize(System.Numerics.Plane)">
      <summary>Создает новый объект <see cref="T:System.Numerics.Plane" />, вектор нормали которого — нормализованный вектор нормали исходной плоскости.</summary>
      <param name="value">Исходная плоскость.</param>
      <returns>Нормализованная плоскость.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>Возвращает значение, указывающее, равны ли две плоскости.</summary>
      <param name="value1">Первая сравниваемая плоскость.</param>
      <param name="value2">Вторая сравниваемая плоскость.</param>
      <returns>Значение <see langword="true" />, если <paramref name="value1" /> и <paramref name="value2" /> равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>Возвращает значение, указывающее, что две плоскости не равны.</summary>
      <param name="value1">Первая сравниваемая плоскость.</param>
      <param name="value2">Вторая сравниваемая плоскость.</param>
      <returns>Значение <see langword="true" />, если <paramref name="value1" /> и <paramref name="value2" /> не равны друг другу; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.ToString">
      <summary>Возвращает строковое представление данного объекта плоскости.</summary>
      <returns>Строка, представляющая данный объект <see cref="T:System.Numerics.Plane" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)">
      <summary>Преобразует нормализованную плоскость по матрице 4x4.</summary>
      <param name="plane">Нормализованная плоскость для преобразования.</param>
      <param name="matrix">Матрица преобразования, применяемая к <paramref name="plane" />.</param>
      <returns>Преобразованная плоскость.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)">
      <summary>Преобразует нормализованную плоскость по повороту кватерниона.</summary>
      <param name="plane">Нормализованная плоскость для преобразования.</param>
      <param name="rotation">Поворот кватерниона для применения к плоскости.</param>
      <returns>Новая плоскость, полученная в результате применения поворота кватерниона.</returns>
    </member>
    <member name="T:System.Numerics.Quaternion">
      <summary>Представляет вектор, используемый для кодирования трехмерных физических поворотов.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Создает кватернион на основе заданного вектора и частей поворота.</summary>
      <param name="vectorPart">Часть вектора кватерниона.</param>
      <param name="scalarPart">Часть поворота кватерниона.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Создает кватернион на основе заданных координат.</summary>
      <param name="x">Значение, назначаемое координате X кватерниона.</param>
      <param name="y">Значение, назначаемое координате Y кватерниона.</param>
      <param name="z">Значение, назначаемое координате Z кватерниона.</param>
      <param name="w">Значение, назначаемое координате W кватерниона.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Складывает каждый элемент в одном кватернионе с соответствующим элементом во втором кватернионе.</summary>
      <param name="value1">Первый кватернион.</param>
      <param name="value2">Второй кватернион.</param>
      <returns>Кватернион, содержащий суммарные значения <paramref name="value1" /> и <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Сцепляет два кватерниона.</summary>
      <param name="value1">Поворот первого кватерниона в серии.</param>
      <param name="value2">Поворот второго кватерниона в серии.</param>
      <returns>Новый кватернион, представляющий результат сцепления поворота <paramref name="value1" />, за которым следует поворот <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)">
      <summary>Возвращает сопряженный объект заданного кватерниона.</summary>
      <param name="value">Кватернион.</param>
      <returns>Новый кватернион, который является сопряженным объектом <see langword="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>Создает кватернион на основе единичного вектора и угла поворота вокруг вектора.</summary>
      <param name="axis">Единичный вектор, вокруг которого необходимо выполнить поворот.</param>
      <param name="angle">Угол в радианах для поворота вокруг вектора.</param>
      <returns>Только что созданный кватернион.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)">
      <summary>Создает кватернион на основе заданной матрицы поворота.</summary>
      <param name="matrix">Матрица поворота.</param>
      <returns>Только что созданный кватернион.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Создает новый кватернион на основе заданного значения нутации, прецессии и собственного вращения.</summary>
      <param name="yaw">Угол нутации вокруг оси Y в радианах.</param>
      <param name="pitch">Угол прецессии вокруг оси X в радианах.</param>
      <param name="roll">Угол собственного вращения вокруг оси Z в радианах.</param>
      <returns>Полученный кватернион.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Делит один кватернион на второй кватернион.</summary>
      <param name="value1">Делимое.</param>
      <param name="value2">Делитель.</param>
      <returns>Кватернион, полученный в результате деления <paramref name="value1" /> на <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Вычисляет скалярное произведение двух кватернионов.</summary>
      <param name="quaternion1">Первый кватернион.</param>
      <param name="quaternion2">Второй кватернион.</param>
      <returns>Скалярное произведение.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)">
      <summary>Возвращает значение, указывающее, равен ли данный экземпляр другому кватерниону.</summary>
      <param name="other">Другой кватернион.</param>
      <returns>Значение <see langword="true" />, если два кватерниона равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли данный экземпляр указанному объекту.</summary>
      <param name="obj">Объект для сравнения с текущим экземпляром.</param>
      <returns>Значение <see langword="true" />, если объект <paramref name="obj" /> равен текущему экземпляру; в противном случае — значение <see langword="false" />. Если значением параметра <paramref name="obj" /> является <see langword="null" />, метод возвращает <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.Identity">
      <summary>Получает кватернион, который представляет отсутствие вращения.</summary>
      <returns>Кватернион, значения которого равны <c>(0, 0, 0, 1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)">
      <summary>Возвращает инверсный объект кватерниона.</summary>
      <param name="value">Кватернион.</param>
      <returns>Инвертированный кватернион.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.IsIdentity">
      <summary>Получает значение, указывающее, является ли текущий экземпляр единичным кватернионом.</summary>
      <returns>Значение <see langword="true" />, если текущий экземпляр является единичным кватернионом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Length">
      <summary>Вычисляет длину кватерниона.</summary>
      <returns>Вычисленная длина кватерниона.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.LengthSquared">
      <summary>Вычисляет длину кватерниона в квадрате.</summary>
      <returns>Длина кватерниона в квадрате.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>Выполняет линейную интерполяцию между двумя кватернионами на основе значения, указывающего взвешивание второго кватерниона.</summary>
      <param name="quaternion1">Первый кватернион.</param>
      <param name="quaternion2">Второй кватернион.</param>
      <param name="amount">Относительный вес <paramref name="quaternion2" /> в интерполяции.</param>
      <returns>Интерполированный кватернион.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Возвращает кватернион, являющийся результатом перемножения двух кватернионов.</summary>
      <param name="value1">Первый кватернион.</param>
      <param name="value2">Второй кватернион.</param>
      <returns>Кватернион произведения.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>Возвращает кватернион, получаемый в результате масштабирования всех координат заданного кватерниона на скалярный множитель.</summary>
      <param name="value1">Исходный кватернион.</param>
      <param name="value2">Скалярное значение.</param>
      <returns>Масштабированный кватернион.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)">
      <summary>Обращает знак каждой координаты кватерниона.</summary>
      <param name="value">Кватернион, преобразуемый в отрицательный.</param>
      <returns>Кватернион, преобразованный в отрицательный.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)">
      <summary>Делит каждую координату указанного кватерниона <see cref="T:System.Numerics.Quaternion" /> на его длину.</summary>
      <param name="value">Нормализуемый кватернион.</param>
      <returns>Нормализованный кватернион.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Складывает каждый элемент в одном кватернионе с соответствующим элементом во втором кватернионе.</summary>
      <param name="value1">Первый кватернион.</param>
      <param name="value2">Второй кватернион.</param>
      <returns>Кватернион, содержащий суммарные значения <paramref name="value1" /> и <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Делит один кватернион на второй кватернион.</summary>
      <param name="value1">Делимое.</param>
      <param name="value2">Делитель.</param>
      <returns>Кватернион, полученный в результате деления <paramref name="value1" /> на <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Возвращает значение, указывающее на равенство двух кватернионов.</summary>
      <param name="value1">Первый сравниваемый кватернион.</param>
      <param name="value2">Второй сравниваемый кватернион.</param>
      <returns>Значение <see langword="true" />, если два кватерниона равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Возвращает значение, указывающее на неравенство двух кватернионов.</summary>
      <param name="value1">Первый сравниваемый кватернион.</param>
      <param name="value2">Второй сравниваемый кватернион.</param>
      <returns>Значение <see langword="true" />, если <paramref name="value1" /> и <paramref name="value2" /> не равны друг другу; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Возвращает кватернион, являющийся результатом перемножения двух кватернионов.</summary>
      <param name="value1">Первый кватернион.</param>
      <param name="value2">Второй кватернион.</param>
      <returns>Кватернион произведения.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>Возвращает кватернион, получаемый в результате масштабирования всех координат заданного кватерниона на скалярный множитель.</summary>
      <param name="value1">Исходный кватернион.</param>
      <param name="value2">Скалярное значение.</param>
      <returns>Масштабированный кватернион.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Вычитает каждый элемент во втором кватернионе из соответствующего элемента в первом кватернионе.</summary>
      <param name="value1">Первый кватернион.</param>
      <param name="value2">Второй кватернион.</param>
      <returns>Кватернион, содержащий значения, которые являются результатом вычитания каждого элемента в <paramref name="value2" /> из соответствующего элемента в <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)">
      <summary>Обращает знак каждой координаты кватерниона.</summary>
      <param name="value">Кватернион, преобразуемый в отрицательный.</param>
      <returns>Кватернион, преобразованный в отрицательный.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>Выполняет интерполяцию между двумя кватернионами, используя сферическую линейную интерполяцию.</summary>
      <param name="quaternion1">Первый кватернион.</param>
      <param name="quaternion2">Второй кватернион.</param>
      <param name="amount">Относительный вес второго кватерниона в интерполяции.</param>
      <returns>Интерполированный кватернион.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Вычитает каждый элемент во втором кватернионе из соответствующего элемента в первом кватернионе.</summary>
      <param name="value1">Первый кватернион.</param>
      <param name="value2">Второй кватернион.</param>
      <returns>Кватернион, содержащий значения, которые являются результатом вычитания каждого элемента в <paramref name="value2" /> из соответствующего элемента в <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.ToString">
      <summary>Возвращает строку, представляющую данный кватернион.</summary>
      <returns>Строковое представление данного кватерниона.</returns>
    </member>
    <member name="F:System.Numerics.Quaternion.W">
      <summary>Получает координату поворота кватерниона.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.X">
      <summary>Значение X координаты вектора кватерниона.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Y">
      <summary>Значение Y координаты вектора кватерниона.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Z">
      <summary>Значение Z координаты вектора кватерниона.</summary>
    </member>
    <member name="T:System.Numerics.Vector">
      <summary>Предоставляет коллекцию статических удобных методов для создания, обработки, объединения и преобразования универсальных векторов.</summary>
    </member>
    <member name="M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, элементы которого являются абсолютными значениями элементов данного вектора.</summary>
      <param name="value">Исходный вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Вектор абсолютного значения.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, значения которого являются суммой каждой пары элементов из двух заданных векторов.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Суммарный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, выполняя битовую операцию И НЕ для каждой пары соответствующих элементов в двух векторах.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Полученный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})">
      <summary>Повторно интерпретирует биты заданного вектора в биты вектора байтов без знака.</summary>
      <param name="value">Исходный вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})">
      <summary>Повторно интерпретирует биты заданного вектора в биты вектора двойной точности с плавающей запятой.</summary>
      <param name="value">Исходный вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})">
      <summary>Повторно интерпретирует биты заданного вектора в биты вектора 16-разрядных целых чисел.</summary>
      <param name="value">Исходный вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})">
      <summary>Повторно интерпретирует биты заданного вектора в биты вектора целых чисел.</summary>
      <param name="value">Исходный вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})">
      <summary>Повторно интерпретирует биты заданного вектора в биты вектора длинных целых чисел.</summary>
      <param name="value">Исходный вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})">
      <summary>Повторно интерпретирует биты заданного вектора в биты вектора байтов со знаком.</summary>
      <param name="value">Исходный вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})">
      <summary>Повторно интерпретирует биты заданного вектора в биты вектора одинарной точности с плавающей запятой.</summary>
      <param name="value">Исходный вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})">
      <summary>Повторно интерпретирует биты заданного вектора в биты вектора 16-разрядных целых чисел без знака.</summary>
      <param name="value">Исходный вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})">
      <summary>Повторно интерпретирует биты заданного вектора в биты вектора целых чисел без знака.</summary>
      <param name="value">Исходный вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})">
      <summary>Повторно интерпретирует биты заданного вектора в биты вектора длинных целых чисел без знака.</summary>
      <param name="value">Исходный вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, выполняя битовую операцию <see langword="And" /> для всех пар элементов в двух векторах.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Полученный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, выполняя битовую операцию <see langword="Or" /> для всех пар элементов в двух векторах.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Полученный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Создает новый вектор одинарной точности с элементами, выбранными между двумя заданными исходными векторами одинарной точности на основе целого вектора маски.</summary>
      <param name="condition">Целый вектор маски, используемый для выбора.</param>
      <param name="left">Первый исходный вектор.</param>
      <param name="right">Второй исходный вектор.</param>
      <returns>Новый вектор с элементами, выбранными на основе маски.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Создает новый вектор двойной точности с элементами, выбранными между двумя заданными исходными векторами двойной точности на основе целого вектора маски.</summary>
      <param name="condition">Целый вектор маски, используемый для выбора.</param>
      <param name="left">Первый исходный вектор.</param>
      <param name="right">Второй исходный вектор.</param>
      <returns>Новый вектор с элементами, выбранными на основе маски.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Создает новый вектор заданного типа с элементами, выбранными между двумя заданными исходными векторами того же типа на основе целого вектора маски.</summary>
      <param name="condition">Целый вектор маски, используемый для выбора.</param>
      <param name="left">Первый исходный вектор.</param>
      <param name="right">Второй исходный вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Новый вектор с элементами, выбранными на основе маски.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})">
      <summary>Преобразует <c>Vector&lt;Int64&gt;</c> в <c>Vector&lt;Double&gt;</c>.</summary>
      <param name="value">Исходный вектор.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})">
      <summary>Преобразует <c>Vector&lt;UInt64&gt;</c> в <c>Vector&lt;Double&gt;</c>.</summary>
      <param name="value">Исходный вектор.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})">
      <summary>Преобразует <c>Vector&lt;Single&gt;</c> в <c>Vector&lt;Int32&gt;</c>.</summary>
      <param name="value">Исходный вектор.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})">
      <summary>Преобразует <c>Vector&lt;Double&gt;</c> в <c>Vector&lt;Int64&gt;</c>.</summary>
      <param name="value">Исходный вектор.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})">
      <summary>Преобразует <c>Vector&lt;Int32&gt;</c> в <c>Vector&lt;Single&gt;</c>.</summary>
      <param name="value">Исходный вектор.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})">
      <summary>Преобразует <c>Vector&lt;UInt32&gt;</c> в <c>Vector&lt;Single&gt;</c>.</summary>
      <param name="value">Исходный вектор.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})">
      <summary>Преобразует <c>Vector&lt;Single&gt;</c> в <c>Vector&lt;UInt32&gt;</c>.</summary>
      <param name="value">Исходный вектор.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})">
      <summary>Преобразует <c>Vector&lt;Double&gt;</c> в <c>Vector&lt;UInt64&gt;</c>.</summary>
      <param name="value">Исходный вектор.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, значения которого являются результатом деления элементов первого вектора на соответствующие элементы второго вектора.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Деленный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает скалярное произведение двух векторов.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Скалярное произведение.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Возвращает новый целый вектор, элементы которого указывают, равны ли элементы в двух заданных векторах двойной точности.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный целый вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Возвращает новый целый вектор, элементы которого указывают, равны ли элементы в двух заданных целых векторах.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный целый вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Возвращает новый вектор, элементы которого указывают, равны ли элементы в двух заданных векторах длинных целых чисел.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный вектор длинных целых чисел.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Возвращает новый целый вектор, элементы которого указывают, равны ли элементы в двух заданных векторах одинарной точности.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный целый вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор заданного типа, элементы которого указывают, равны ли элементы в двух заданных векторах того же типа.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Полученный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает значение, указывающее, равны ли пары элементов в данных векторах.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Значение <see langword="true" />, если все элементы в <paramref name="left" /> и <paramref name="right" /> равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает значение, указывающее, равна ли каждая отдельная пара элементов в данных векторах.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Значение <see langword="true" />, если любая пара элементов в <paramref name="left" /> и <paramref name="right" /> равна; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Возвращает новый целый вектор, элементы которого указывают, больше ли элементы в одном векторе двойной точности с плавающей запятой, чем соответствующие элементы во втором векторе двойной точности с плавающей запятой.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный целый вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Возвращает новый целый вектор, элементы которого указывают, больше ли элементы в одном целом векторе, чем соответствующие элементы во втором целом векторе.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный целый вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Возвращает новый вектор длинных целых чисел, элементы которого указывают, больше ли элементы в одном векторе длинных целых чисел, чем соответствующие элементы во втором векторе длинных целых чисел.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный вектор длинных целых чисел.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Возвращает новый целый вектор, элементы которого указывают, больше ли элементы в одном векторе одинарной точности с плавающей запятой, чем соответствующие элементы во втором векторе одинарной точности с плавающей запятой.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный целый вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, элементы которого указывают, больше ли элементы в одном векторе заданного типа, чем соответствующие элементы во втором векторе того же типа.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Полученный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает значение, указывающее, больше ли все элементы в первом векторе, чем соответствующие элементы во втором векторе.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Значение <see langword="true" />, если все элементы в <paramref name="left" /> больше, чем соответствующие элементы в <paramref name="right" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает значение, указывающее, больше ли любой элемент в первом векторе, чем соответствующий элемент во втором векторе.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Значение <see langword="true" />, если любой элемент в <paramref name="left" /> больше, чем соответствующий элемент в <paramref name="right" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Возвращает новый целый вектор, элементы которого указывают, больше ли элементы в одном векторе, чем соответствующие элементы во втором векторе двойной точности с плавающей запятой, или равны им.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный целый вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Возвращает новый целый вектор, элементы которого указывают, больше ли элементы в одном целом векторе, чем соответствующие элементы во втором целом векторе, или равны им.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный целый вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Возвращает новый вектор длинных целых чисел, элементы которого указывают, больше ли элементы в одном векторе длинных целых чисел, чем соответствующие элементы во втором векторе длинных целых чисел, или равны им.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный вектор длинных целых чисел.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Возвращает новый целый вектор, элементы которого указывают, больше ли элементы в одном векторе, чем соответствующие элементы во втором векторе одинарной точности с плавающей запятой, или равны им.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный целый вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, элементы которого указывают, больше ли элементы в одном векторе заданного типа, чем соответствующие элементы во втором векторе заданного типа, или равны им.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Полученный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает значение, указывающее, больше ли все элементы в первом векторе, чем все соответствующие элементы во втором векторе, или равны им.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Значение <see langword="true" />, если все элементы в <paramref name="left" /> больше, чем соответствующие элементы в <paramref name="right" />, или равны им; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает значение, указывающее, больше ли любой элемент в первом векторе, чем соответствующий элемент во втором векторе, или равен ему.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Значение <see langword="true" />, если любой элемент в <paramref name="left" /> больше, чем соответствующий элемент в <paramref name="right" />, или равен ему; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Vector.IsHardwareAccelerated">
      <summary>Возвращает значение, указывающее, можно ли применить к операциям с векторами аппаратное ускорение посредством встроенной поддержки JIT.</summary>
      <returns>Значение <see langword="true" />, если к операциям с векторами можно применить аппаратное ускорение; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Возвращает новый целый вектор, элементы которого указывают, меньше ли элементы в одном векторе двойной точности с плавающей запятой, чем соответствующие элементы во втором векторе двойной точности с плавающей запятой.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный целый вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Возвращает новый целый вектор, элементы которого указывают, меньше ли элементы в одном целом векторе, чем соответствующие элементы во втором целом векторе.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный целый вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Возвращает новый вектор длинных целых чисел, элементы которого указывают, меньше ли элементы в одном векторе длинных целых чисел, чем соответствующие элементы во втором векторе длинных целых чисел.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный вектор длинных целых чисел.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Возвращает новый целый вектор, элементы которого указывают, меньше ли элементы в одном векторе одинарной точности, чем соответствующие элементы во втором векторе одинарной точности.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный целый вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор заданного типа, элементы которого указывают, меньше ли элементы в одном векторе, чем соответствующие элементы во втором векторе.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Полученный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает значение, указывающее, меньше ли все элементы в первом векторе, чем соответствующие элементы во втором векторе.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Значение <see langword="true" />, если все элементы в <paramref name="left" /> меньше, чем соответствующие элементы в <paramref name="right" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает значение, указывающее, меньше ли любой элемент в первом векторе, чем соответствующий элемент во втором векторе.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Значение <see langword="true" />, если любой элемент в <paramref name="left" /> меньше, чем соответствующий элемент в <paramref name="right" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Возвращает новый целый вектор, элементы которого указывают, меньше ли элементы в одном векторе двойной точности с плавающей запятой, чем соответствующие элементы во втором векторе двойной точности с плавающей запятой, или равны им.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный целый вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Возвращает новый целый вектор, элементы которого указывают, меньше ли элементы в одном целом векторе, чем соответствующие элементы во втором целом векторе, или равны им.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный целый вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Возвращает новый вектор длинных целых чисел, элементы которого указывают, меньше ли элементы в одном векторе длинных целых чисел, чем соответствующие элементы во втором векторе длинных целых чисел, или равны им.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный вектор длинных целых чисел.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Возвращает новый целый вектор, элементы которого указывают, меньше ли элементы в одном векторе одинарной точности с плавающей запятой, чем соответствующие элементы во втором векторе одинарной точности с плавающей запятой, или равны им.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Полученный целый вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, элементы которого указывают, меньше ли элементы в одном векторе, чем соответствующие элементы во втором векторе, или равны им.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Полученный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает значение, указывающее, меньше ли все элементы в первом векторе, чем соответствующие элементы во втором векторе, или равны им.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Значение <see langword="true" />, если все элементы в <paramref name="left" /> меньше, чем соответствующие элементы в <paramref name="right" />, или равны им; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает значение, указывающее, меньше ли любой элемент в первом векторе, чем соответствующий элемент во втором векторе, или равен ему.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Значение <see langword="true" />, если любой элемент в <paramref name="left" /> меньше, чем соответствующий элемент в <paramref name="right" />, или равен ему; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, элементы которого являются максимальным значением каждой пары элементов в двух данных векторах.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Вектор максимума.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, элементы которого являются минимальным значением каждой пары элементов в двух данных векторах.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Вектор минимума.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, значения которого являются скалярным значением, умноженным на каждое из значений заданного вектора.</summary>
      <param name="left">Скалярное значение.</param>
      <param name="right">Вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Масштабированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)">
      <summary>Возвращает новый вектор, значения которого являются значениями заданного вектора, каждое из которых умножено на скалярное значение.</summary>
      <param name="left">Вектор.</param>
      <param name="right">Скалярное значение.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Масштабированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, значения которого являются произведением каждой пары элементов в двух заданных векторах.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Поэлементный вектор произведения.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Сводит два экземпляра <c>Vector&lt;Double&gt;</c> в один <c>Vector&lt;Single&gt;</c>.</summary>
      <param name="source1">Первый исходный вектор, элементы которого становятся элементами нижнего индекса возвращаемого значения.</param>
      <param name="source2">Второй исходный вектор, элементы которого становятся элементами верхнего индекса возвращаемого значения.</param>
      <returns>
        <c>Vector&lt;Single&gt;</c>, содержащий элементы, сведенные из исходных векторов.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})">
      <summary>Сводит два экземпляра <c>Vector&lt;Int16&gt;</c> в один <c>Vector&lt;SByte&gt;</c>.</summary>
      <param name="source1">Первый исходный вектор, элементы которого становятся элементами нижнего индекса возвращаемого значения.</param>
      <param name="source2">Второй исходный вектор, элементы которого становятся элементами верхнего индекса возвращаемого значения.</param>
      <returns>
        <c>Vector&lt;SByte&gt;</c>, содержащий элементы, сведенные из исходных векторов.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Сводит два экземпляра <c>Vector&lt;Int32&gt;</c> в один <c>Vector&lt;Int16&gt;</c>.</summary>
      <param name="source1">Первый исходный вектор, элементы которого становятся элементами нижнего индекса возвращаемого значения.</param>
      <param name="source2">Второй исходный вектор, элементы которого становятся элементами верхнего индекса возвращаемого значения.</param>
      <returns>
        <c>Vector&lt;Int16&gt;</c>, содержащий элементы, сведенные из исходных векторов.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Сводит два экземпляра <c>Vector&lt;Int64&gt;</c> в один <c>Vector&lt;Int32&gt;</c>.</summary>
      <param name="source1">Первый исходный вектор, элементы которого становятся элементами нижнего индекса возвращаемого значения.</param>
      <param name="source2">Второй исходный вектор, элементы которого становятся элементами верхнего индекса возвращаемого значения.</param>
      <returns>
        <c>Vector&lt;Int32&gt;</c>, содержащий элементы, сведенные из исходных векторов.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})">
      <summary>Сводит два экземпляра <c>Vector&lt;UInt16&gt;</c> в один <c>Vector&lt;Byte&gt;</c>.</summary>
      <param name="source1">Первый исходный вектор, элементы которого становятся элементами нижнего индекса возвращаемого значения.</param>
      <param name="source2">Второй исходный вектор, элементы которого становятся элементами верхнего индекса возвращаемого значения.</param>
      <returns>
        <c>Vector&lt;Byte&gt;</c>, содержащий элементы, сведенные из исходных векторов.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})">
      <summary>Сводит два экземпляра <c>Vector&lt;UInt32&gt;</c> в один <c>Vector&lt;UInt16&gt;</c>.</summary>
      <param name="source1">Первый исходный вектор, элементы которого становятся элементами нижнего индекса возвращаемого значения.</param>
      <param name="source2">Второй исходный вектор, элементы которого становятся элементами верхнего индекса возвращаемого значения.</param>
      <returns>
        <c>Vector&lt;UInt16&gt;</c>, содержащий элементы, сведенные из исходных векторов.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})">
      <summary>Сводит два экземпляра <c>Vector&lt;UInt64&gt;</c> в один <c>Vector&lt;UInt32&gt;</c>.</summary>
      <param name="source1">Первый исходный вектор, элементы которого становятся элементами нижнего индекса возвращаемого значения.</param>
      <param name="source2">Второй исходный вектор, элементы которого становятся элементами верхнего индекса возвращаемого значения.</param>
      <returns>
        <c>Vector&lt;UInt32&gt;</c>, содержащий элементы, сведенные из исходных векторов.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, элементы которого являются отрицательными значениями соответствующих элементов заданного вектора.</summary>
      <param name="value">Исходный вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Вектор, преобразованный в отрицательный.</returns>
    </member>
    <member name="M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, элементы которого получаются путем принятия дополнения до единицы элементов заданного вектора.</summary>
      <param name="value">Исходный вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Полученный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, элементы которого являются квадратным корнем элементов заданного вектора.</summary>
      <param name="value">Исходный вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Вектор квадратного корня.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, значения которого являются разностью элементов второго вектора и соответствующих элементов первого вектора.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Вектор отличия.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)">
      <summary>Расширяет <c>Vector&lt;Byte&gt;</c> на два экземпляра <c>Vector&lt;UInt16&gt;</c>.</summary>
      <param name="source">Исходный вектор, элементы которого расширяются в выходные данные.</param>
      <param name="dest1">Первый выходной вектор, элементы которого будут содержать расширенные элементы из нижних индексов в исходном векторе.</param>
      <param name="dest2">Второй выходной вектор, элементы которого будут содержать расширенные элементы из верхних индексов в исходном векторе.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)">
      <summary>Расширяет <c>Vector&lt;Int16&gt;</c> на два экземпляра <c>Vector&lt;Int32&gt;</c>.</summary>
      <param name="source">Исходный вектор, элементы которого расширяются в выходные данные.</param>
      <param name="dest1">Первый выходной вектор, элементы которого будут содержать расширенные элементы из нижних индексов в исходном векторе.</param>
      <param name="dest2">Второй выходной вектор, элементы которого будут содержать расширенные элементы из верхних индексов в исходном векторе.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)">
      <summary>Расширяет <c>Vector&lt;Int32&gt;</c> на два экземпляра <c>Vector&lt;Int64&gt;</c>.</summary>
      <param name="source">Исходный вектор, элементы которого расширяются в выходные данные.</param>
      <param name="dest1">Первый выходной вектор, элементы которого будут содержать расширенные элементы из нижних индексов в исходном векторе.</param>
      <param name="dest2">Второй выходной вектор, элементы которого будут содержать расширенные элементы из верхних индексов в исходном векторе.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)">
      <summary>Расширяет <c>Vector&lt;SByte&gt;</c> на два экземпляра <c>Vector&lt;Int16&gt;</c>.</summary>
      <param name="source">Исходный вектор, элементы которого расширяются в выходные данные.</param>
      <param name="dest1">Первый выходной вектор, элементы которого будут содержать расширенные элементы из нижних индексов в исходном векторе.</param>
      <param name="dest2">Второй выходной вектор, элементы которого будут содержать расширенные элементы из верхних индексов в исходном векторе.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)">
      <summary>Расширяет <c>Vector&lt;Single&gt;</c> на два экземпляра <c>Vector&lt;Double&gt;</c>.</summary>
      <param name="source">Исходный вектор, элементы которого расширяются в выходные данные.</param>
      <param name="dest1">Первый выходной вектор, элементы которого будут содержать расширенные элементы из нижних индексов в исходном векторе.</param>
      <param name="dest2">Второй выходной вектор, элементы которого будут содержать расширенные элементы из верхних индексов в исходном векторе.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)">
      <summary>Расширяет <c>Vector&lt;UInt16&gt;</c> на два экземпляра <c>Vector&lt;UInt32&gt;</c>.</summary>
      <param name="source">Исходный вектор, элементы которого расширяются в выходные данные.</param>
      <param name="dest1">Первый выходной вектор, элементы которого будут содержать расширенные элементы из нижних индексов в исходном векторе.</param>
      <param name="dest2">Второй выходной вектор, элементы которого будут содержать расширенные элементы из верхних индексов в исходном векторе.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)">
      <summary>Расширяет <c>Vector&lt;UInt32&gt;</c> на два экземпляра <c>Vector&lt;UInt64&gt;</c>.</summary>
      <param name="source">Исходный вектор, элементы которого расширяются в выходные данные.</param>
      <param name="dest1">Первый выходной вектор, элементы которого будут содержать расширенные элементы из нижних индексов в исходном векторе.</param>
      <param name="dest2">Второй выходной вектор, элементы которого будут содержать расширенные элементы из верхних индексов в исходном векторе.</param>
    </member>
    <member name="M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Возвращает новый вектор, выполняя битовую операцию исключающего ИЛИ (<see langword="XOr" />) для всех пар элементов в двух векторах.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
      <returns>Полученный вектор.</returns>
    </member>
    <member name="T:System.Numerics.Vector`1">
      <summary>Представляет один вектор указанного числового типа, который подходит для низкоуровневой оптимизации параллельных алгоритмов.</summary>
      <typeparam name="T">Тип вектора. <c>T</c> может быть любым простым числовым типом.</typeparam>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0)">
      <summary>Создает вектор с координатами заданного типа.</summary>
      <param name="value">Числовой тип, определяющий тип координат вектора.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[])">
      <summary>Создает вектор на основе заданного массива.</summary>
      <param name="values">Числовой массив.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="values" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
      <summary>Создает вектор на основе заданного массива, начиная с указанной позиции индекса.</summary>
      <param name="values">Числовой массив.</param>
      <param name="index">Начальная позиция индекса для создания индекса.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="values" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Значение параметра <paramref name="index" /> меньше нуля.
-или-
Длина массива <paramref name="values" /> минус <paramref name="index" /> меньше <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{`0})">
      <summary>Конструирует вектор из заданного <see cref="T:System.ReadOnlySpan`1" />.</summary>
      <param name="values">Значения, добавляемые к вектору в виде доступного только для чтения диапазона объектов типа T. Минимальное число элементов в диапазоне: <see cref="P:System.Numerics.Vector`1.Count" />.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>Конструирует вектор из заданного диапазона байтов, доступного только для чтения.</summary>
      <param name="values">Доступный только для чтения диапазон байтов, который содержит значения для добавления в вектор. Минимальное число элементов в диапазоне: <see cref="P:System.Numerics.Vector`1.Count" />.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.Span{`0})">
      <summary>Конструирует вектор из заданного <see cref="T:System.Span`1" />.</summary>
      <param name="values">Значения, добавляемые к вектору в виде диапазона объектов типа T. Минимальное число элементов в диапазоне: <see cref="P:System.Numerics.Vector`1.Count" />.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[])">
      <summary>Копирует экземпляр вектора в заданный массив назначения.</summary>
      <param name="destination">Массив, получающий копию значений вектора.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="destination" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Число элементов в текущем векторе больше числа элементов, доступных в массиве <paramref name="destination" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
      <summary>Копирует экземпляр вектора в заданный массив назначения, начиная с указанной позиции индекса.</summary>
      <param name="destination">Массив, получающий копию значений вектора.</param>
      <param name="startIndex">Начальный индекс в массиве <paramref name="destination" />, с которого начинается операция копирования.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="destination" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Число элементов в текущем экземпляре больше числа элементов, доступных от <paramref name="startIndex" /> до конца массива <paramref name="destination" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> меньше нуля или больше последнего индекса в <paramref name="destination" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{`0})">
      <summary>Копирует вектор в заданный диапазон. .</summary>
      <param name="destination">Целевой диапазон, в который копируются значения. Минимальный размер целевого диапазона: <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.ArgumentException">Количество элементов в исходном векторе превышает доступный объем в диапазоне назначения.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{System.Byte})">
      <summary>Копирует вектор в заданный <see cref="T:System.Span`1" />.</summary>
      <param name="destination">Целевой диапазон, в который копируются значения. Минимальный размер целевого диапазона: <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.ArgumentException">Количество элементов в исходном векторе превышает доступный объем в диапазоне назначения.</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.Count">
      <summary>Возвращает количество элементов, хранимых в векторе.</summary>
      <returns>Количество элементов, хранимых в векторе.</returns>
      <exception cref="T:System.NotSupportedException">Доступ к методу получения свойства через отражение не поддерживается.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})">
      <summary>Возвращает значение, показывающее, равен ли данный экземпляр указанному вектору.</summary>
      <param name="other">Вектор, который необходимо сравнить с данным экземпляром.</param>
      <returns>Значение <see langword="true" />, если объект <paramref name="other" /> равен текущему экземпляру; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Object)">
      <summary>Возвращает значение, показывающее, равен ли экземпляр указанному объекту.</summary>
      <param name="obj">Объект, сравниваемый с данным экземпляром.</param>
      <returns>Значение <see langword="true" />, если объект <paramref name="obj" /> равен текущему экземпляру; в противном случае — значение <see langword="false" />. Этот метод возвращает <see langword="false" />, если <paramref name="obj" /> имеет значение null или если <paramref name="obj" /> представляет собой вектор, тип которого отличается от текущего экземпляра.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Item(System.Int32)">
      <summary>Получает элемент по указанному индексу.</summary>
      <param name="index">Возвращаемый индекс элемента.</param>
      <returns>Элемент с индексом <paramref name="index" />.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Значение параметра <paramref name="index" /> меньше нуля.
-или-
Значение <paramref name="index" /> больше или равно <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.One">
      <summary>Возвращает вектор, содержащий все единицы.</summary>
      <returns>Вектор, содержащий все единицы.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Складывает два вектора.</summary>
      <param name="left">Первый складываемый вектор.</param>
      <param name="right">Второй складываемый вектор.</param>
      <returns>Суммарный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Возвращает новый вектор, выполняя битовую операцию <see langword="And" /> для всех элементов в двух векторах.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Вектор, полученный в результате битовой операции <see langword="And" /> для <paramref name="left" /> и <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Возвращает новый вектор, выполняя битовую операцию <see langword="Or" /> для всех элементов в двух векторах.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Вектор, полученный в результате битовой операции <see langword="Or" /> для элементов <paramref name="left" /> и <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Делит первый вектор на второй.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Вектор, полученный в результате деления <paramref name="left" /> на <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Возвращает значение, указывающее, равны ли все пары элементов в двух заданных векторах.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Значение <see langword="true" />, если <paramref name="left" /> и <paramref name="right" /> равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Возвращает новый вектор, выполняя битовую операцию <see langword="XOr" /> для всех элементов в двух векторах.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Вектор, полученный в результате битовой операции <see langword="XOr" /> для элементов <paramref name="left" /> и <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}">
      <summary>Повторно интерпретирует биты заданного вектора в вектор типа <see cref="T:System.Byte" />.</summary>
      <param name="value">Повторно интерпретируемый вектор.</param>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}">
      <summary>Повторно интерпретирует биты заданного вектора в вектор типа <see cref="T:System.Double" />.</summary>
      <param name="value">Повторно интерпретируемый вектор.</param>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}">
      <summary>Повторно интерпретирует биты заданного вектора в вектор типа <see cref="T:System.Int16" />.</summary>
      <param name="value">Повторно интерпретируемый вектор.</param>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}">
      <summary>Повторно интерпретирует биты заданного вектора в вектор типа <see cref="T:System.Int32" />.</summary>
      <param name="value">Повторно интерпретируемый вектор.</param>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}">
      <summary>Повторно интерпретирует биты заданного вектора в вектор типа <see cref="T:System.Int64" />.</summary>
      <param name="value">Повторно интерпретируемый вектор.</param>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}">
      <summary>Повторно интерпретирует биты заданного вектора в вектор типа <see cref="T:System.SByte" />.</summary>
      <param name="value">Повторно интерпретируемый вектор.</param>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}">
      <summary>Повторно интерпретирует биты заданного вектора в вектор типа <see cref="T:System.Single" />.</summary>
      <param name="value">Повторно интерпретируемый вектор.</param>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}">
      <summary>Повторно интерпретирует биты заданного вектора в вектор типа <see cref="T:System.UInt16" />.</summary>
      <param name="value">Повторно интерпретируемый вектор.</param>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}">
      <summary>Повторно интерпретирует биты заданного вектора в вектор типа <see cref="T:System.UInt32" />.</summary>
      <param name="value">Повторно интерпретируемый вектор.</param>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}">
      <summary>Повторно интерпретирует биты заданного вектора в вектор типа <see cref="T:System.UInt64" />.</summary>
      <param name="value">Повторно интерпретируемый вектор.</param>
      <returns>Повторно интерпретированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Возвращает значение, указывающее, равна ли каждая отдельная пара элементов в двух заданных векторах.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Значение <see langword="true" />, если любые пары элементов в левой и правой части равны. Значение <see langword="false" />, если нет равных пар элементов.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})">
      <summary>Умножает вектор на заданное скалярное значение.</summary>
      <param name="factor">Скалярное значение.</param>
      <param name="value">Исходный вектор.</param>
      <returns>Масштабированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)">
      <summary>Умножает вектор на заданное скалярное значение.</summary>
      <param name="value">Исходный вектор.</param>
      <param name="factor">Скалярное значение.</param>
      <returns>Масштабированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Возвращает новый вектор, значения которого являются произведением каждой пары элементов в двух заданных векторах.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Поэлементный вектор произведения.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})">
      <summary>Возвращает новый вектор, элементы которого получаются путем принятия дополнения до единицы элементов заданного вектора.</summary>
      <param name="value">Исходный вектор.</param>
      <returns>Вектор дополнения до единицы.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Вычитает второй вектор из первого.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Вектор, полученный в результате вычитания <paramref name="right" /> из <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})">
      <summary>Преобразует данный вектор в отрицательный.</summary>
      <param name="value">Вектор, преобразуемый в отрицательный.</param>
      <returns>Вектор, преобразованный в отрицательный.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString">
      <summary>Возвращает строковое представление данного вектора, используя форматирование по умолчанию.</summary>
      <returns>Строковое представление данного вектора.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String)">
      <summary>Возвращает строковое представление данного вектора, используя заданную строку форматирования для форматирования отдельных элементов.</summary>
      <param name="format">или  , который задает формат отдельных элементов.</param>
      <returns>Строковое представление текущего экземпляра.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)">
      <summary>Возвращает строковое представление данного вектора, используя заданную строку форматирования для форматирования отдельных элементов и заданный поставщик формата для указания форматирования, определяемого языком и региональными параметрами.</summary>
      <param name="format">или  , который задает формат отдельных элементов.</param>
      <param name="formatProvider">Поставщик формата, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</param>
      <returns>Строковое представление текущего экземпляра.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{`0})">
      <summary>Пытается скопировать вектор в заданный <see cref="T:System.Span`1" />.</summary>
      <param name="destination">Целевой диапазон, в который копируются значения. Минимальный размер целевого диапазона: <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <returns>Значение <see langword="true" />, если исходный вектор был успешно скопирован в<paramref name="destination" />. <see langword="false" />, если <paramref name="destination" /> недостаточен для хранения исходного вектора.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{System.Byte})">
      <summary>Пытается скопировать вектор в заданный диапазон байтов.</summary>
      <param name="destination">Целевой диапазон, в который копируются значения. Минимальный размер целевого диапазона: <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <returns>Значение <see langword="true" />, если исходный вектор был успешно скопирован в<paramref name="destination" />. <see langword="false" />, если <paramref name="destination" /> недостаточен для хранения исходного вектора.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Zero">
      <summary>Возвращает вектор, содержащий все нули.</summary>
      <returns>Вектор, содержащий все нули.</returns>
    </member>
    <member name="T:System.Numerics.Vector2">
      <summary>Представляет вектор с двумя значениями одинарной точности с плавающей запятой.</summary>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single)">
      <summary>Создает новый объект <see cref="T:System.Numerics.Vector2" /> с двумя элементами, имеющими одинаковое значение.</summary>
      <param name="value">Значение, присваиваемое обоим элементам.</param>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single,System.Single)">
      <summary>Создает вектор, элементы которого имеют заданные значения.</summary>
      <param name="x">Значение, присваиваемое полю <see cref="F:System.Numerics.Vector2.X" />.</param>
      <param name="y">Значение, присваиваемое полю <see cref="F:System.Numerics.Vector2.Y" />.</param>
    </member>
    <member name="M:System.Numerics.Vector2.Abs(System.Numerics.Vector2)">
      <summary>Возвращает вектор, элементы которого являются абсолютными значениями каждого из элементов заданного вектора.</summary>
      <param name="value">Вектор.</param>
      <returns>Вектор абсолютного значения.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Складывает два вектора.</summary>
      <param name="left">Первый складываемый вектор.</param>
      <param name="right">Второй складываемый вектор.</param>
      <returns>Суммарный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Ограничивает минимальное и максимальное значение вектора.</summary>
      <param name="value1">Ограничиваемый вектор.</param>
      <param name="min">Минимальное значение.</param>
      <param name="max">Максимальное значение.</param>
      <returns>Ограниченный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[])">
      <summary>Копирует элементы вектора в заданный массив.</summary>
      <param name="array">Массив назначения.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Количество элементов в текущем экземпляре больше, чем в массиве.</exception>
      <exception cref="T:System.RankException">Массив <paramref name="array" /> является многомерным.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)">
      <summary>Копирует элементы вектора в заданный массив, начиная с указанной позиции индекса.</summary>
      <param name="array">Массив назначения.</param>
      <param name="index">Индекс, с которого начинается копирование первого элемента вектора.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Количество элементов в текущем экземпляре больше, чем в массиве.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше нуля.
-или-
Длина параметра <paramref name="index" /> больше или равна длине массива.</exception>
      <exception cref="T:System.RankException">Массив <paramref name="array" /> является многомерным.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Вычисляет евклидово расстояние между двумя заданными точками.</summary>
      <param name="value1">Первая точка.</param>
      <param name="value2">Вторая точка.</param>
      <returns>Расстояние.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Возвращает квадрат евклидова расстояния между двумя заданными точками.</summary>
      <param name="value1">Первая точка.</param>
      <param name="value2">Вторая точка.</param>
      <returns>Квадрат расстояния.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Делит первый вектор на второй.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Вектор, полученный в результате деления.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)">
      <summary>Делит заданный вектор на указанное скалярное значение.</summary>
      <param name="left">Вектор.</param>
      <param name="divisor">Скалярное значение.</param>
      <returns>Вектор, полученный в результате деления.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Возвращает скалярное произведение двух векторов.</summary>
      <param name="value1">Первый вектор.</param>
      <param name="value2">Второй вектор.</param>
      <returns>Скалярное произведение.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Numerics.Vector2)">
      <summary>Возвращает значение, указывающее, равен ли данный экземпляр другому вектору.</summary>
      <param name="other">Другой вектор.</param>
      <returns>Значение <see langword="true" />, если два вектора равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли данный экземпляр указанному объекту.</summary>
      <param name="obj">Объект для сравнения с текущим экземпляром.</param>
      <returns>Значение <see langword="true" />, если объект <paramref name="obj" /> равен текущему экземпляру; в противном случае — значение <see langword="false" />. Если значением параметра <paramref name="obj" /> является <see langword="null" />, метод возвращает <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Length">
      <summary>Возвращает длину вектора.</summary>
      <returns>Длина вектора.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.LengthSquared">
      <summary>Возвращает длину вектора в квадрате.</summary>
      <returns>Длина вектора в квадрате.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
      <summary>Выполняет линейную интерполяцию между двумя векторами на основе заданного взвешивания.</summary>
      <param name="value1">Первый вектор.</param>
      <param name="value2">Второй вектор.</param>
      <param name="amount">Значение от 0 до 1, указывающее вес <paramref name="value2" />.</param>
      <returns>Интерполированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Возвращает вектор, элементы которого являются максимальными значениями каждой пары элементов в двух заданных векторах.</summary>
      <param name="value1">Первый вектор.</param>
      <param name="value2">Второй вектор.</param>
      <returns>Вектор, приведенный к максимуму.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Возвращает вектор, элементы которого являются минимальными значениями каждой пары элементов в двух заданных векторах.</summary>
      <param name="value1">Первый вектор.</param>
      <param name="value2">Второй вектор.</param>
      <returns>Вектор, приведенный к минимуму.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Возвращает новый вектор, значения которого являются произведением каждой пары элементов в двух заданных векторах.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Поэлементный вектор произведения.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)">
      <summary>Умножает вектор на заданный скаляр.</summary>
      <param name="left">Умножаемый вектор.</param>
      <param name="right">Скалярное значение.</param>
      <returns>Масштабированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)">
      <summary>Умножает скалярное значение на заданный вектор.</summary>
      <param name="left">Масштабированное значение.</param>
      <param name="right">Вектор.</param>
      <returns>Масштабированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Negate(System.Numerics.Vector2)">
      <summary>Преобразует заданный вектор в отрицательный.</summary>
      <param name="value">Вектор, преобразуемый в отрицательный.</param>
      <returns>Вектор, преобразованный в отрицательный.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Normalize(System.Numerics.Vector2)">
      <summary>Возвращает вектор с тем же направлением, что и заданный вектор, но с длиной равной единице.</summary>
      <param name="value">Нормализуемый вектор.</param>
      <returns>Нормализованный вектор.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.One">
      <summary>Получает вектор, два элемента которого равны единице.</summary>
      <returns>Вектор, два элемента которого равны одному (т. е. он возвращает вектор <c>(1, 1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Складывает два вектора.</summary>
      <param name="left">Первый складываемый вектор.</param>
      <param name="right">Второй складываемый вектор.</param>
      <returns>Суммарный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Делит первый вектор на второй.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Вектор, полученный в результате деления <paramref name="left" /> на <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)">
      <summary>Делит заданный вектор на указанное скалярное значение.</summary>
      <param name="value1">Вектор.</param>
      <param name="value2">Скалярное значение.</param>
      <returns>Результат деления.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Возвращает значение, указывающее, равна ли каждая пара элементов в двух заданных векторах.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Значение <see langword="true" />, если <paramref name="left" /> и <paramref name="right" /> равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Возвращает значение, указывающее на неравенство двух заданных векторов.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Значение <see langword="true" />, если <paramref name="left" /> и <paramref name="right" /> не равны друг другу; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Возвращает новый вектор, значения которого являются произведением каждой пары элементов в двух заданных векторах.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Поэлементный вектор произведения.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)">
      <summary>Умножает заданный вектор на указанное скалярное значение.</summary>
      <param name="left">Вектор.</param>
      <param name="right">Скалярное значение.</param>
      <returns>Масштабированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)">
      <summary>Умножает скалярное значение на заданный вектор.</summary>
      <param name="left">Вектор.</param>
      <param name="right">Скалярное значение.</param>
      <returns>Масштабированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Вычитает второй вектор из первого.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Вектор, полученный в результате вычитания <paramref name="right" /> из <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)">
      <summary>Преобразует заданный вектор в отрицательный.</summary>
      <param name="value">Вектор, преобразуемый в отрицательный.</param>
      <returns>Вектор, преобразованный в отрицательный.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Возвращает отражение вектора от поверхности, которая имеет заданную нормаль.</summary>
      <param name="vector">Исходный вектор.</param>
      <param name="normal">Нормаль отражаемой поверхности.</param>
      <returns>Отраженный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)">
      <summary>Возвращает вектор, элементы которого являются квадратным корнем каждого из элементов заданного вектора.</summary>
      <param name="value">Вектор.</param>
      <returns>Вектор квадратного корня.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Вычитает второй вектор из первого.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Вектор отличия.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString">
      <summary>Возвращает строковое представление текущего экземпляра, используя форматирование по умолчанию.</summary>
      <returns>Строковое представление текущего экземпляра.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String)">
      <summary>Возвращает строковое представление текущего экземпляра, используя заданную строку форматирования для форматирования отдельных элементов.</summary>
      <param name="format">Строка стандартного или настраиваемого числового формата, определяющая формат отдельных элементов.</param>
      <returns>Строковое представление текущего экземпляра.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)">
      <summary>Возвращает строковое представление текущего экземпляра, используя заданную строку форматирования для форматирования отдельных элементов и заданный поставщик формата для указания форматирования, определяемого языком и региональными параметрами.</summary>
      <param name="format">Строка стандартного или настраиваемого числового формата, определяющая формат отдельных элементов.</param>
      <param name="formatProvider">Поставщик формата, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</param>
      <returns>Строковое представление текущего экземпляра.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>Преобразует вектор посредством заданной матрицы 3x2.</summary>
      <param name="position">Преобразуемый вектор.</param>
      <param name="matrix">Матрица преобразования.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Преобразует вектор посредством заданной матрицы 4x4.</summary>
      <param name="position">Преобразуемый вектор.</param>
      <param name="matrix">Матрица преобразования.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>Преобразует вектор посредством заданного значения поворота кватерниона.</summary>
      <param name="value">Поворачиваемый вектор.</param>
      <param name="rotation">Применяемый поворот.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>Преобразует нормаль вектора посредством заданной матрицы 3x2.</summary>
      <param name="normal">Исходный вектор.</param>
      <param name="matrix">Матрица.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Преобразует нормаль вектора посредством заданной матрицы 4x4.</summary>
      <param name="normal">Исходный вектор.</param>
      <param name="matrix">Матрица.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitX">
      <summary>Получает вектор (1,0).</summary>
      <returns>Вектор <c>(1, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitY">
      <summary>Получает вектор (0,1).</summary>
      <returns>Вектор <c>(0, 1)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector2.X">
      <summary>Координата X вектора.</summary>
    </member>
    <member name="F:System.Numerics.Vector2.Y">
      <summary>Координата Y вектора.</summary>
    </member>
    <member name="P:System.Numerics.Vector2.Zero">
      <summary>Возвращает вектор, два элемента которого равны нулю.</summary>
      <returns>Вектор, два элемента которого равны нулю (то есть он возвращает вектор <c>(0, 0)</c>.</returns>
    </member>
    <member name="T:System.Numerics.Vector3">
      <summary>Представляет вектор с тремя значениями одинарной точности с плавающей запятой.</summary>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)">
      <summary>Создает новый объект <see cref="T:System.Numerics.Vector3" /> на основе заданного объекта <see cref="T:System.Numerics.Vector2" /> и значения.</summary>
      <param name="value">Вектор с двумя элементами.</param>
      <param name="z">Дополнительное значение, присваиваемое полю <see cref="F:System.Numerics.Vector3.Z" />.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single)">
      <summary>Создает новый объект <see cref="T:System.Numerics.Vector3" /> с тремя элементами, имеющими одинаковое значение.</summary>
      <param name="value">Значение, присваиваемое всем трем элементам.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>Создает вектор, элементы которого имеют заданные значения.</summary>
      <param name="x">Значение, присваиваемое полю <see cref="F:System.Numerics.Vector3.X" />.</param>
      <param name="y">Значение, присваиваемое полю <see cref="F:System.Numerics.Vector3.Y" />.</param>
      <param name="z">Значение, присваиваемое полю <see cref="F:System.Numerics.Vector3.Z" />.</param>
    </member>
    <member name="M:System.Numerics.Vector3.Abs(System.Numerics.Vector3)">
      <summary>Возвращает вектор, элементы которого являются абсолютными значениями каждого из элементов заданного вектора.</summary>
      <param name="value">Вектор.</param>
      <returns>Вектор абсолютного значения.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Складывает два вектора.</summary>
      <param name="left">Первый складываемый вектор.</param>
      <param name="right">Второй складываемый вектор.</param>
      <returns>Суммарный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Ограничивает минимальное и максимальное значение вектора.</summary>
      <param name="value1">Ограничиваемый вектор.</param>
      <param name="min">Минимальное значение.</param>
      <param name="max">Максимальное значение.</param>
      <returns>Ограниченный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[])">
      <summary>Копирует элементы вектора в заданный массив.</summary>
      <param name="array">Массив назначения.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Количество элементов в текущем экземпляре больше, чем в массиве.</exception>
      <exception cref="T:System.RankException">Массив <paramref name="array" /> является многомерным.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)">
      <summary>Копирует элементы вектора в заданный массив, начиная с указанной позиции индекса.</summary>
      <param name="array">Массив назначения.</param>
      <param name="index">Индекс, с которого начинается копирование первого элемента вектора.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Количество элементов в текущем экземпляре больше, чем в массиве.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше нуля.
-или-
Длина параметра <paramref name="index" /> больше или равна длине массива.</exception>
      <exception cref="T:System.RankException">Массив <paramref name="array" /> является многомерным.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Вычисляет векторное произведение двух векторов.</summary>
      <param name="vector1">Первый вектор.</param>
      <param name="vector2">Второй вектор.</param>
      <returns>Векторное произведение.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Вычисляет евклидово расстояние между двумя заданными точками.</summary>
      <param name="value1">Первая точка.</param>
      <param name="value2">Вторая точка.</param>
      <returns>Расстояние.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Возвращает квадрат евклидова расстояния между двумя заданными точками.</summary>
      <param name="value1">Первая точка.</param>
      <param name="value2">Вторая точка.</param>
      <returns>Квадрат расстояния.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Делит первый вектор на второй.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Вектор, полученный в результате деления.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)">
      <summary>Делит заданный вектор на указанное скалярное значение.</summary>
      <param name="left">Вектор.</param>
      <param name="divisor">Скалярное значение.</param>
      <returns>Вектор, полученный в результате деления.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Возвращает скалярное произведение двух векторов.</summary>
      <param name="vector1">Первый вектор.</param>
      <param name="vector2">Второй вектор.</param>
      <returns>Скалярное произведение.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Numerics.Vector3)">
      <summary>Возвращает значение, указывающее, равен ли данный экземпляр другому вектору.</summary>
      <param name="other">Другой вектор.</param>
      <returns>Значение <see langword="true" />, если два вектора равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли данный экземпляр указанному объекту.</summary>
      <param name="obj">Объект для сравнения с текущим экземпляром.</param>
      <returns>Значение <see langword="true" />, если объект <paramref name="obj" /> равен текущему экземпляру; в противном случае — значение <see langword="false" />. Если значением параметра <paramref name="obj" /> является <see langword="null" />, метод возвращает <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Length">
      <summary>Возвращает длину данного объекта вектора.</summary>
      <returns>Длина вектора.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.LengthSquared">
      <summary>Возвращает длину вектора в квадрате.</summary>
      <returns>Длина вектора в квадрате.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
      <summary>Выполняет линейную интерполяцию между двумя векторами на основе заданного взвешивания.</summary>
      <param name="value1">Первый вектор.</param>
      <param name="value2">Второй вектор.</param>
      <param name="amount">Значение от 0 до 1, указывающее вес <paramref name="value2" />.</param>
      <returns>Интерполированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Возвращает вектор, элементы которого являются максимальными значениями каждой пары элементов в двух заданных векторах.</summary>
      <param name="value1">Первый вектор.</param>
      <param name="value2">Второй вектор.</param>
      <returns>Вектор, приведенный к максимуму.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Возвращает вектор, элементы которого являются минимальными значениями каждой пары элементов в двух заданных векторах.</summary>
      <param name="value1">Первый вектор.</param>
      <param name="value2">Второй вектор.</param>
      <returns>Вектор, приведенный к минимуму.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Возвращает новый вектор, значения которого являются произведением каждой пары элементов в двух заданных векторах.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Поэлементный вектор произведения.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)">
      <summary>Умножает вектор на заданный скаляр.</summary>
      <param name="left">Умножаемый вектор.</param>
      <param name="right">Скалярное значение.</param>
      <returns>Масштабированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)">
      <summary>Умножает скалярное значение на заданный вектор.</summary>
      <param name="left">Масштабированное значение.</param>
      <param name="right">Вектор.</param>
      <returns>Масштабированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Negate(System.Numerics.Vector3)">
      <summary>Преобразует заданный вектор в отрицательный.</summary>
      <param name="value">Вектор, преобразуемый в отрицательный.</param>
      <returns>Вектор, преобразованный в отрицательный.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Normalize(System.Numerics.Vector3)">
      <summary>Возвращает вектор с тем же направлением, что и заданный вектор, но с длиной равной единице.</summary>
      <param name="value">Нормализуемый вектор.</param>
      <returns>Нормализованный вектор.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.One">
      <summary>Получает вектор, три элемента которого равны единице.</summary>
      <returns>Вектор, три элемента которого равны одному (т. е. он возвращает вектор <c>(1, 1, 1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Складывает два вектора.</summary>
      <param name="left">Первый складываемый вектор.</param>
      <param name="right">Второй складываемый вектор.</param>
      <returns>Суммарный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Делит первый вектор на второй.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Вектор, полученный в результате деления <paramref name="left" /> на <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)">
      <summary>Делит заданный вектор на указанное скалярное значение.</summary>
      <param name="value1">Вектор.</param>
      <param name="value2">Скалярное значение.</param>
      <returns>Результат деления.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Возвращает значение, указывающее, равна ли каждая пара элементов в двух заданных векторах.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Значение <see langword="true" />, если <paramref name="left" /> и <paramref name="right" /> равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Возвращает значение, указывающее на неравенство двух заданных векторов.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Значение <see langword="true" />, если <paramref name="left" /> и <paramref name="right" /> не равны друг другу; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Возвращает новый вектор, значения которого являются произведением каждой пары элементов в двух заданных векторах.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Поэлементный вектор произведения.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)">
      <summary>Умножает заданный вектор на указанное скалярное значение.</summary>
      <param name="left">Вектор.</param>
      <param name="right">Скалярное значение.</param>
      <returns>Масштабированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)">
      <summary>Умножает скалярное значение на заданный вектор.</summary>
      <param name="left">Вектор.</param>
      <param name="right">Скалярное значение.</param>
      <returns>Масштабированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Вычитает второй вектор из первого.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Вектор, полученный в результате вычитания <paramref name="right" /> из <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)">
      <summary>Преобразует заданный вектор в отрицательный.</summary>
      <param name="value">Вектор, преобразуемый в отрицательный.</param>
      <returns>Вектор, преобразованный в отрицательный.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Возвращает отражение вектора от поверхности, которая имеет заданную нормаль.</summary>
      <param name="vector">Исходный вектор.</param>
      <param name="normal">Нормаль отражаемой поверхности.</param>
      <returns>Отраженный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)">
      <summary>Возвращает вектор, элементы которого являются квадратным корнем каждого из элементов заданного вектора.</summary>
      <param name="value">Вектор.</param>
      <returns>Вектор квадратного корня.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Вычитает второй вектор из первого.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Вектор отличия.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString">
      <summary>Возвращает строковое представление текущего экземпляра, используя форматирование по умолчанию.</summary>
      <returns>Строковое представление текущего экземпляра.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String)">
      <summary>Возвращает строковое представление текущего экземпляра, используя заданную строку форматирования для форматирования отдельных элементов.</summary>
      <param name="format">Строка стандартного или настраиваемого числового формата, определяющая формат отдельных элементов.</param>
      <returns>Строковое представление текущего экземпляра.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)">
      <summary>Возвращает строковое представление текущего экземпляра, используя заданную строку форматирования для форматирования отдельных элементов и заданный поставщик формата для указания форматирования, определяемого языком и региональными параметрами.</summary>
      <param name="format">Строка стандартного или настраиваемого числового формата, определяющая формат отдельных элементов.</param>
      <param name="formatProvider">Поставщик формата, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</param>
      <returns>Строковое представление текущего экземпляра.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Преобразует вектор посредством заданной матрицы 4x4.</summary>
      <param name="position">Преобразуемый вектор.</param>
      <param name="matrix">Матрица преобразования.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>Преобразует вектор посредством заданного значения поворота кватерниона.</summary>
      <param name="value">Поворачиваемый вектор.</param>
      <param name="rotation">Применяемый поворот.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Преобразует нормаль вектора посредством заданной матрицы 4x4.</summary>
      <param name="normal">Исходный вектор.</param>
      <param name="matrix">Матрица.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitX">
      <summary>Получает вектор (1,0,0).</summary>
      <returns>Вектор <c>(1, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitY">
      <summary>Получает вектор (1,0,0).</summary>
      <returns>Вектор <c>(0, 1, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitZ">
      <summary>Получает вектор (0,0,1).</summary>
      <returns>Вектор <c>(0, 0, 1)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector3.X">
      <summary>Координата X вектора.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Y">
      <summary>Координата Y вектора.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Z">
      <summary>Координата Z вектора.</summary>
    </member>
    <member name="P:System.Numerics.Vector3.Zero">
      <summary>Получает вектор, три элемента которого равны нулю.</summary>
      <returns>Вектор, три элемента которого равны нулю (то есть он возвращает вектор <c>(0, 0, 0)</c>.</returns>
    </member>
    <member name="T:System.Numerics.Vector4">
      <summary>Представляет вектор с четырьмя значениями одинарной точности с плавающей запятой.</summary>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector2,System.Single,System.Single)">
      <summary>Создает новый объект <see cref="T:System.Numerics.Vector4" /> на основе заданного объекта <see cref="T:System.Numerics.Vector2" /> и координат Z и W.</summary>
      <param name="value">Вектор, который необходимо использовать для координат X и Y.</param>
      <param name="z">Координата Z.</param>
      <param name="w">Координата W.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Строит новый объект <see cref="T:System.Numerics.Vector4" /> на основе заданного объекта <see cref="T:System.Numerics.Vector3" /> и координаты W.</summary>
      <param name="value">Вектор, который необходимо использовать для координат X, Y и Z.</param>
      <param name="w">Координата W.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single)">
      <summary>Создает новый объект <see cref="T:System.Numerics.Vector4" /> с четырьмя элементами, имеющими одинаковое значение.</summary>
      <param name="value">Значение, присваиваемое всем четырем элементам.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Создает вектор, элементы которого имеют заданные значения.</summary>
      <param name="x">Значение, присваиваемое полю <see cref="F:System.Numerics.Vector4.X" />.</param>
      <param name="y">Значение, присваиваемое полю <see cref="F:System.Numerics.Vector4.Y" />.</param>
      <param name="z">Значение, присваиваемое полю <see cref="F:System.Numerics.Vector4.Z" />.</param>
      <param name="w">Значение, присваиваемое полю <see cref="F:System.Numerics.Vector4.W" />.</param>
    </member>
    <member name="M:System.Numerics.Vector4.Abs(System.Numerics.Vector4)">
      <summary>Возвращает вектор, элементы которого являются абсолютными значениями каждого из элементов заданного вектора.</summary>
      <param name="value">Вектор.</param>
      <returns>Вектор абсолютного значения.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Add(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Складывает два вектора.</summary>
      <param name="left">Первый складываемый вектор.</param>
      <param name="right">Второй складываемый вектор.</param>
      <returns>Суммарный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Clamp(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Ограничивает минимальное и максимальное значение вектора.</summary>
      <param name="value1">Ограничиваемый вектор.</param>
      <param name="min">Минимальное значение.</param>
      <param name="max">Максимальное значение.</param>
      <returns>Ограниченный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[])">
      <summary>Копирует элементы вектора в заданный массив.</summary>
      <param name="array">Массив назначения.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Количество элементов в текущем экземпляре больше, чем в массиве.</exception>
      <exception cref="T:System.RankException">Массив <paramref name="array" /> является многомерным.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[],System.Int32)">
      <summary>Копирует элементы вектора в заданный массив, начиная с указанной позиции индекса.</summary>
      <param name="array">Массив назначения.</param>
      <param name="index">Индекс, с которого начинается копирование первого элемента вектора.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Количество элементов в текущем экземпляре больше, чем в массиве.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше нуля.
-или-
Длина параметра <paramref name="index" /> больше или равна длине массива.</exception>
      <exception cref="T:System.RankException">Массив <paramref name="array" /> является многомерным.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.Distance(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Вычисляет евклидово расстояние между двумя заданными точками.</summary>
      <param name="value1">Первая точка.</param>
      <param name="value2">Вторая точка.</param>
      <returns>Расстояние.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.DistanceSquared(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Возвращает квадрат евклидова расстояния между двумя заданными точками.</summary>
      <param name="value1">Первая точка.</param>
      <param name="value2">Вторая точка.</param>
      <returns>Квадрат расстояния.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Делит первый вектор на второй.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Вектор, полученный в результате деления.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Single)">
      <summary>Делит заданный вектор на указанное скалярное значение.</summary>
      <param name="left">Вектор.</param>
      <param name="divisor">Скалярное значение.</param>
      <returns>Вектор, полученный в результате деления.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Dot(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Возвращает скалярное произведение двух векторов.</summary>
      <param name="vector1">Первый вектор.</param>
      <param name="vector2">Второй вектор.</param>
      <returns>Скалярное произведение.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Numerics.Vector4)">
      <summary>Возвращает значение, указывающее, равен ли данный экземпляр другому вектору.</summary>
      <param name="other">Другой вектор.</param>
      <returns>Значение <see langword="true" />, если два вектора равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли данный экземпляр указанному объекту.</summary>
      <param name="obj">Объект для сравнения с текущим экземпляром.</param>
      <returns>Значение <see langword="true" />, если объект <paramref name="obj" /> равен текущему экземпляру; в противном случае — значение <see langword="false" />. Если значением параметра <paramref name="obj" /> является <see langword="null" />, метод возвращает <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Length">
      <summary>Возвращает длину данного объекта вектора.</summary>
      <returns>Длина вектора.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.LengthSquared">
      <summary>Возвращает длину вектора в квадрате.</summary>
      <returns>Длина вектора в квадрате.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Lerp(System.Numerics.Vector4,System.Numerics.Vector4,System.Single)">
      <summary>Выполняет линейную интерполяцию между двумя векторами на основе заданного взвешивания.</summary>
      <param name="value1">Первый вектор.</param>
      <param name="value2">Второй вектор.</param>
      <param name="amount">Значение от 0 до 1, указывающее вес <paramref name="value2" />.</param>
      <returns>Интерполированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Max(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Возвращает вектор, элементы которого являются максимальными значениями каждой пары элементов в двух заданных векторах.</summary>
      <param name="value1">Первый вектор.</param>
      <param name="value2">Второй вектор.</param>
      <returns>Вектор, приведенный к максимуму.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Min(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Возвращает вектор, элементы которого являются минимальными значениями каждой пары элементов в двух заданных векторах.</summary>
      <param name="value1">Первый вектор.</param>
      <param name="value2">Второй вектор.</param>
      <returns>Вектор, приведенный к минимуму.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Возвращает новый вектор, значения которого являются произведением каждой пары элементов в двух заданных векторах.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Поэлементный вектор произведения.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Single)">
      <summary>Умножает вектор на заданный скаляр.</summary>
      <param name="left">Умножаемый вектор.</param>
      <param name="right">Скалярное значение.</param>
      <returns>Масштабированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Single,System.Numerics.Vector4)">
      <summary>Умножает скалярное значение на заданный вектор.</summary>
      <param name="left">Масштабированное значение.</param>
      <param name="right">Вектор.</param>
      <returns>Масштабированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Negate(System.Numerics.Vector4)">
      <summary>Преобразует заданный вектор в отрицательный.</summary>
      <param name="value">Вектор, преобразуемый в отрицательный.</param>
      <returns>Вектор, преобразованный в отрицательный.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Normalize(System.Numerics.Vector4)">
      <summary>Возвращает вектор с тем же направлением, что и заданный вектор, но с длиной равной единице.</summary>
      <param name="vector">Нормализуемый вектор.</param>
      <returns>Нормализованный вектор.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.One">
      <summary>Получает вектор, четыре элемента которого равны единице.</summary>
      <returns>Возвращает <see cref="T:System.Numerics.Vector4" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Addition(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Складывает два вектора.</summary>
      <param name="left">Первый складываемый вектор.</param>
      <param name="right">Второй складываемый вектор.</param>
      <returns>Суммарный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Делит первый вектор на второй.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Вектор, полученный в результате деления <paramref name="left" /> на <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Single)">
      <summary>Делит заданный вектор на указанное скалярное значение.</summary>
      <param name="value1">Вектор.</param>
      <param name="value2">Скалярное значение.</param>
      <returns>Результат деления.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Equality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Возвращает значение, указывающее, равна ли каждая пара элементов в двух заданных векторах.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Значение <see langword="true" />, если <paramref name="left" /> и <paramref name="right" /> равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Inequality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Возвращает значение, указывающее на неравенство двух заданных векторов.</summary>
      <param name="left">Первый сравниваемый вектор.</param>
      <param name="right">Второй сравниваемый вектор.</param>
      <returns>Значение <see langword="true" />, если <paramref name="left" /> и <paramref name="right" /> не равны друг другу; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Возвращает новый вектор, значения которого являются произведением каждой пары элементов в двух заданных векторах.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Поэлементный вектор произведения.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Single)">
      <summary>Умножает заданный вектор на указанное скалярное значение.</summary>
      <param name="left">Вектор.</param>
      <param name="right">Скалярное значение.</param>
      <returns>Масштабированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Single,System.Numerics.Vector4)">
      <summary>Умножает скалярное значение на заданный вектор.</summary>
      <param name="left">Вектор.</param>
      <param name="right">Скалярное значение.</param>
      <returns>Масштабированный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Subtraction(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Вычитает второй вектор из первого.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Вектор, полученный в результате вычитания <paramref name="right" /> из <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_UnaryNegation(System.Numerics.Vector4)">
      <summary>Преобразует заданный вектор в отрицательный.</summary>
      <param name="value">Вектор, преобразуемый в отрицательный.</param>
      <returns>Вектор, преобразованный в отрицательный.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.SquareRoot(System.Numerics.Vector4)">
      <summary>Возвращает вектор, элементы которого являются квадратным корнем каждого из элементов заданного вектора.</summary>
      <param name="value">Вектор.</param>
      <returns>Вектор квадратного корня.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Subtract(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Вычитает второй вектор из первого.</summary>
      <param name="left">Первый вектор.</param>
      <param name="right">Второй вектор.</param>
      <returns>Вектор отличия.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString">
      <summary>Возвращает строковое представление текущего экземпляра, используя форматирование по умолчанию.</summary>
      <returns>Строковое представление текущего экземпляра.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String)">
      <summary>Возвращает строковое представление текущего экземпляра, используя заданную строку форматирования для форматирования отдельных элементов.</summary>
      <param name="format">Строка стандартного или настраиваемого числового формата, определяющая формат отдельных элементов.</param>
      <returns>Строковое представление текущего экземпляра.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String,System.IFormatProvider)">
      <summary>Возвращает строковое представление текущего экземпляра, используя заданную строку форматирования для форматирования отдельных элементов и заданный поставщик формата для указания форматирования, определяемого языком и региональными параметрами.</summary>
      <param name="format">Строка стандартного или настраиваемого числового формата, определяющая формат отдельных элементов.</param>
      <param name="formatProvider">Поставщик формата, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</param>
      <returns>Строковое представление текущего экземпляра.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Преобразует двухмерный вектор посредством заданной матрицы 4x4.</summary>
      <param name="position">Преобразуемый вектор.</param>
      <param name="matrix">Матрица преобразования.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>Преобразует двухмерный вектор посредством заданного значения поворота кватерниона.</summary>
      <param name="value">Поворачиваемый вектор.</param>
      <param name="rotation">Применяемый поворот.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Преобразует трехмерный вектор посредством заданной матрицы 4x4.</summary>
      <param name="position">Преобразуемый вектор.</param>
      <param name="matrix">Матрица преобразования.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>Преобразует трехмерный вектор посредством заданного значения поворота кватерниона.</summary>
      <param name="value">Поворачиваемый вектор.</param>
      <param name="rotation">Применяемый поворот.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Matrix4x4)">
      <summary>Преобразует четырехмерный вектор посредством заданной матрицы 4x4.</summary>
      <param name="vector">Преобразуемый вектор.</param>
      <param name="matrix">Матрица преобразования.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Quaternion)">
      <summary>Преобразует четырехмерный вектор посредством заданного значения поворота кватерниона.</summary>
      <param name="value">Поворачиваемый вектор.</param>
      <param name="rotation">Применяемый поворот.</param>
      <returns>Преобразованный вектор.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitW">
      <summary>Получает вектор (0,0,0,1).</summary>
      <returns>Вектор <c>(0, 0, 0, 1)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitX">
      <summary>Получает вектор (1,0,0,0).</summary>
      <returns>Вектор <c>(1, 0, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitY">
      <summary>Получает вектор (0,1,0,0).</summary>
      <returns>Вектор <c>(0, 1, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitZ">
      <summary>Получает вектор (0,0,1,0).</summary>
      <returns>Вектор <c>(0, 0, 1, 0)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector4.W">
      <summary>Координата W вектора.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.X">
      <summary>Координата X вектора.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Y">
      <summary>Координата Y вектора.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Z">
      <summary>Координата Z вектора.</summary>
    </member>
    <member name="P:System.Numerics.Vector4.Zero">
      <summary>Получает вектор, четыре элемента которого равны нулю.</summary>
      <returns>Вектор, четыре элемента которого равны нулю (то есть он возвращает вектор <c>(0, 0, 0, 0)</c>.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Channels</name>
  </assembly>
  <members>
    <member name="T:System.Threading.Channels.BoundedChannelFullMode">
      <summary>Определяет поведение при записи в канал с ограниченной емкостью, который уже заполнен.</summary>
    </member>
    <member name="F:System.Threading.Channels.BoundedChannelFullMode.DropNewest">
      <summary>Удаляет и не использует новый элемент в канале, чтобы освободить место для записываемого элемента.</summary>
    </member>
    <member name="F:System.Threading.Channels.BoundedChannelFullMode.DropOldest">
      <summary>Удаляет и не использует наиболее старый элемент в канале, чтобы освободить место для записываемого элемента.</summary>
    </member>
    <member name="F:System.Threading.Channels.BoundedChannelFullMode.DropWrite">
      <summary>Удаляет записываемый элемент.</summary>
    </member>
    <member name="F:System.Threading.Channels.BoundedChannelFullMode.Wait">
      <summary>Ожидает, когда освободится место для завершения операции записи.</summary>
    </member>
    <member name="T:System.Threading.Channels.BoundedChannelOptions">
      <summary>Предоставляет параметры, которые позволяют управлять поведением связанных экземпляров <see cref="T:System.Threading.Channels.Channel`1" />.</summary>
    </member>
    <member name="M:System.Threading.Channels.BoundedChannelOptions.#ctor(System.Int32)">
      <summary>Инициализирует параметры.</summary>
      <param name="capacity">Максимальное количество элементов, которое может содержать канал с ограниченной емкостью.</param>
    </member>
    <member name="P:System.Threading.Channels.BoundedChannelOptions.Capacity">
      <summary>Возвращает или задает максимальное количество элементов, которое может содержать канал с ограниченной емкостью.</summary>
    </member>
    <member name="P:System.Threading.Channels.BoundedChannelOptions.FullMode">
      <summary>Возвращает или задает поведение, вызываемое операциями записи, если канал заполнен.</summary>
    </member>
    <member name="T:System.Threading.Channels.Channel">
      <summary>Предоставляет статические методы для создания каналов.</summary>
    </member>
    <member name="M:System.Threading.Channels.Channel.CreateBounded``1(System.Int32)">
      <summary>Создает канал с указанной максимальной емкостью.</summary>
      <param name="capacity">Максимальное количество элементов, которое может содержать канал.</param>
      <typeparam name="T">Указывает тип данных в канале.</typeparam>
      <returns>Созданный канал.</returns>
    </member>
    <member name="M:System.Threading.Channels.Channel.CreateBounded``1(System.Threading.Channels.BoundedChannelOptions)">
      <summary>Создает канал с указанной максимальной емкостью.</summary>
      <param name="options">Параметры, которые позволяют управлять поведением канала.</param>
      <typeparam name="T">Указывает тип данных в канале.</typeparam>
      <returns>Созданный канал.</returns>
    </member>
    <member name="M:System.Threading.Channels.Channel.CreateUnbounded``1">
      <summary>Создает канал с неограниченной емкостью, который может использоваться любым количеством объектов чтения и записи одновременно.</summary>
      <typeparam name="T">Тип данных в канале.</typeparam>
      <returns>Созданный канал.</returns>
    </member>
    <member name="M:System.Threading.Channels.Channel.CreateUnbounded``1(System.Threading.Channels.UnboundedChannelOptions)">
      <summary>Создает канал с неограниченной емкостью с учетом предоставленных параметров.</summary>
      <param name="options">Параметры, которые позволяют управлять поведением канала.</param>
      <typeparam name="T">Указывает тип данных в канале.</typeparam>
      <returns>Созданный канал.</returns>
    </member>
    <member name="T:System.Threading.Channels.Channel`1">
      <summary>Предоставляет базовый класс для каналов, поддерживающих чтение и запись элементов с типом <typeparamref name="T" />.</summary>
      <typeparam name="T">Указывает тип данных, доступных для чтения и записи в канале.</typeparam>
    </member>
    <member name="M:System.Threading.Channels.Channel`1.#ctor">
      <summary>Инициализирует экземпляр класса <see cref="T:System.Threading.Channels.Channel`1" />.</summary>
    </member>
    <member name="T:System.Threading.Channels.Channel`2">
      <summary>Предоставляет базовый класс для каналов, поддерживающих чтение элементов с типом <typeparamref name="TRead" /> и запись элементов с типом <typeparamref name="TWrite" />.</summary>
      <typeparam name="TWrite">Указывает тип данных, которые могут быть записаны в канал.</typeparam>
      <typeparam name="TRead">Указывает тип данных, которые могут быть считаны из канала.</typeparam>
    </member>
    <member name="M:System.Threading.Channels.Channel`2.#ctor">
      <summary>Инициализирует экземпляр класса <see cref="T:System.Threading.Channels.Channel`2" />.</summary>
    </member>
    <member name="M:System.Threading.Channels.Channel`2.op_Implicit(System.Threading.Channels.Channel{`0,`1})~System.Threading.Channels.ChannelReader{`1}">
      <summary>Неявное приведение из <see cref="T:System.Threading.Channels.Channel`2" /> к его доступной для чтения половине.</summary>
      <param name="channel">Приводимое <see cref="T:System.Threading.Channels.Channel`2" />.</param>
      <returns>Доступная для чтения половина.</returns>
    </member>
    <member name="M:System.Threading.Channels.Channel`2.op_Implicit(System.Threading.Channels.Channel{`0,`1})~System.Threading.Channels.ChannelWriter{`0}">
      <summary>Неявное приведение из <see cref="T:System.Threading.Channels.Channel`2" /> к его доступной для записи половине.</summary>
      <param name="channel">Приводимое <see cref="T:System.Threading.Channels.Channel`2" />.</param>
      <returns>Доступная для записи половина.</returns>
    </member>
    <member name="P:System.Threading.Channels.Channel`2.Reader">
      <summary>Возвращает объект, выполняющий чтение из канала.</summary>
    </member>
    <member name="P:System.Threading.Channels.Channel`2.Writer">
      <summary>Возвращает объект, выполняющий запись в канал.</summary>
    </member>
    <member name="T:System.Threading.Channels.ChannelClosedException">
      <summary>Исключение, возникающее при использовании канала после того, как он был закрыт.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Channels.ChannelClosedException" />.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor(System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Channels.ChannelClosedException" />.</summary>
      <param name="innerException">Исключение, являющееся причиной этого исключения.</param>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Channels.ChannelClosedException" /> с сериализованными данными.</summary>
      <param name="info">Объект, содержащий сериализованные данные объекта.</param>
      <param name="context">Контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Channels.ChannelClosedException" />.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Channels.ChannelClosedException" />.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
      <param name="innerException">Исключение, являющееся причиной этого исключения.</param>
    </member>
    <member name="T:System.Threading.Channels.ChannelOptions">
      <summary>Предоставляет параметры, которые позволяют управлять поведением экземпляров канала.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelOptions.#ctor">
      <summary>Инициализирует экземпляр класса <see cref="T:System.Threading.Channels.ChannelOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Channels.ChannelOptions.AllowSynchronousContinuations">
      <summary>Имеет значение <see langword="true" />, если выполняемые с каналом операции могут синхронно вызывать продолжения, подписанные на уведомления об ожидающих асинхронных операциях. Имеет значение <see langword="false" />, если все продолжения должны вызываться асинхронно.</summary>
    </member>
    <member name="P:System.Threading.Channels.ChannelOptions.SingleReader">
      <summary>Имеет значение <see langword="true" />, если гарантируется, что объекты чтения из канала будут выполнять не больше одной операции чтения одновременно. Имеет значение <see langword="false" />, если такое ограничение не гарантируется.</summary>
    </member>
    <member name="P:System.Threading.Channels.ChannelOptions.SingleWriter">
      <summary>Имеет значение <see langword="true" />, если гарантируется, что объекты записи из канала будут выполнять не больше одной операции записи одновременно. Имеет значение <see langword="false" />, если такое ограничение не гарантируется.</summary>
    </member>
    <member name="T:System.Threading.Channels.ChannelReader`1">
      <summary>Предоставляет базовый класс для считывания данных из канала.</summary>
      <typeparam name="T">Указывает тип данных, которые могут быть считаны из канала.</typeparam>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.#ctor">
      <summary>Инициализирует экземпляр класса <see cref="T:System.Threading.Channels.ChannelReader`1" />.</summary>
    </member>
    <member name="P:System.Threading.Channels.ChannelReader`1.Completion">
      <summary>Возвращает задачу <see cref="T:System.Threading.Tasks.Task" />, которая будет выполнена, когда из этого канала будут считаны все данные.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.ReadAllAsync(System.Threading.CancellationToken)">
      <summary>Создает интерфейс <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />, позволяющий считывать все данные из канала.</summary>
      <param name="cancellationToken">Токен отмены для отмены перечисления.</param>
      <returns>Созданное асинхронное перечисление.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.ReadAsync(System.Threading.CancellationToken)">
      <summary>Асинхронно считывает элемент из канала.</summary>
      <param name="cancellationToken">Метод <see cref="T:System.Threading.CancellationToken" />, используемый для отмены операции чтения.</param>
      <returns>Задача <see cref="T:System.Threading.Tasks.ValueTask`1" />, представляющая асинхронную операцию чтения.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.TryRead(`0@)">
      <summary>Пытается считать элемент из канала.</summary>
      <param name="item">Считываемый элемент или значение по умолчанию, если нет элементов для чтения.</param>
      <returns>Если значение успешно считано, возвращается <see langword="true" />. В противном случае возвращается <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.WaitToReadAsync(System.Threading.CancellationToken)">
      <summary>Возвращает задачу <see cref="T:System.Threading.Tasks.ValueTask`1" />, которая будет выполнена, когда данные станут доступны для чтения.</summary>
      <param name="cancellationToken">Параметр <see cref="T:System.Threading.CancellationToken" /> используется для отмены операции ожидания.</param>
      <returns>Задача <see cref="T:System.Threading.Tasks.ValueTask`1" />, которая будет выполнена с результатом <see langword="true" />, если данные доступны для чтения. Если же данных для чтения больше не будет из-за успешного завершения канала, результатом станет <see langword="false" />.
Если выполнение канала завершается с исключением, задача также завершается с исключением.
.</returns>
    </member>
    <member name="T:System.Threading.Channels.ChannelWriter`1">
      <summary>Предоставляет базовый класс для записи в канал.</summary>
      <typeparam name="T">Указывает тип данных, которые могут быть записаны в канал.</typeparam>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.#ctor">
      <summary>Инициализирует экземпляр класса <see cref="T:System.Threading.Channels.ChannelWriter`1" />.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.Complete(System.Exception)">
      <summary>Помечает канал как заполненный. То есть в него уже нельзя записать элементы.</summary>
      <param name="error">Необязательное исключение, указывающее на ошибку, которая приводит к заполнению канала.</param>
      <exception cref="T:System.InvalidOperationException">Канал уже помечен как заполненный.</exception>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.TryComplete(System.Exception)">
      <summary>Предпринимает попытку пометить канал как заполненный. То есть в него уже нельзя записать данные.</summary>
      <param name="error">
        <see cref="T:System.Exception" /> указывает на ошибку, из-за которой больше невозможно записать данные. Либо возвращает значение null в случае успешного выполнения.</param>
      <returns>Если в результате этой операции канал успешно помечен как заполненный, возвращается значение <see langword="true" />. Если не удалось пометить канал (уже помечен или не поддерживает заполнение), возвращается <see langword="false" />.
.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.TryWrite(`0)">
      <summary>Предпринимает попытку записать указанный элемент в канал.</summary>
      <param name="item">Элемент для записи.</param>
      <returns>Если элемент был записан, возвращается <see langword="true" />. В противном случае возвращается <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.WaitToWriteAsync(System.Threading.CancellationToken)">
      <summary>Возвращает операцию <see cref="T:System.Threading.Tasks.ValueTask`1" />, которая будет выполнена, когда освободиться место для записи элемента.</summary>
      <param name="cancellationToken">Параметр <see cref="T:System.Threading.CancellationToken" /> используется для отмены операции ожидания.</param>
      <returns>Операция <see cref="T:System.Threading.Tasks.ValueTask`1" /> завершится с результатом <see langword="true" />, если будет доступно место для записи элемента, либо с результатом <see langword="false" />, если запись не будет разрешена.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.WriteAsync(`0,System.Threading.CancellationToken)">
      <summary>Асинхронно записывает элемент в канал.</summary>
      <param name="item">Значение, которое нужно записать в канал.</param>
      <param name="cancellationToken">Параметр <see cref="T:System.Threading.CancellationToken" /> используется для отмены операции записи.</param>
      <returns>Задача <see cref="T:System.Threading.Tasks.ValueTask" />, представляющая асинхронную операцию записи.</returns>
    </member>
    <member name="T:System.Threading.Channels.UnboundedChannelOptions">
      <summary>Предоставляет параметры, которые позволяют управлять поведением несвязанных экземпляров <see cref="T:System.Threading.Channels.Channel`1" />.</summary>
    </member>
    <member name="M:System.Threading.Channels.UnboundedChannelOptions.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Channels.UnboundedChannelOptions" />.</summary>
    </member>
  </members>
</doc>
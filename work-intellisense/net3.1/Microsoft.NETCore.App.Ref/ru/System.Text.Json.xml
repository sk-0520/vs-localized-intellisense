<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary>Определяет, как структура <see cref="T:System.Text.Json.Utf8JsonReader" /> обрабатывает комментарии.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary>Разрешает комментарии внутри входных данных JSON и обрабатывает их как допустимые токены. При чтении вызывающий объект может обратиться к значениям комментариев.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary>Запрещает комментарии внутри входных данных JSON. При обнаружении комментарии обрабатываются как недопустимая JSON, и возникает исключение <see cref="T:System.Text.Json.JsonException" />. Это значение по умолчанию.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary>Разрешает комментарии внутри входных данных JSON и игнорирует их. <see cref="T:System.Text.Json.Utf8JsonReader" /> работает так, будто комментарии отсутствуют.</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary>Предоставляет механизм для проверки структурного содержимого значения JSON без автоматического создания экземпляров для значений данных.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary>Освобождает ресурсы, используемые этим экземпляром <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary>Анализирует последовательность в виде текста в кодировке UTF-8, представляющего отдельное байтовое значение JSON в JsonDocument.</summary>
      <param name="utf8Json">Анализируемый текст JSON.</param>
      <param name="options">Параметры для управления поведением модуля чтения во время анализа.</param>
      <returns>Представление JsonDocument данного значения JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> не представляет допустимое отдельное значение JSON.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> содержит неподдерживаемые параметры.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary>Анализирует <see cref="T:System.IO.Stream" /> в виде данных в кодировке UTF-8, представляющих отдельное значение JSON в JsonDocument. Поток считывается до завершения.</summary>
      <param name="utf8Json">Анализируемые данные JSON.</param>
      <param name="options">Параметры для управления поведением модуля чтения во время анализа.</param>
      <returns>Представление JsonDocument данного значения JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> не представляет допустимое отдельное значение JSON.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> содержит неподдерживаемые параметры.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary>Анализирует память в виде текста в кодировке UTF-8, представляющего отдельное байтовое значение JSON в JsonDocument.</summary>
      <param name="utf8Json">Анализируемый текст JSON.</param>
      <param name="options">Параметры для управления поведением модуля чтения во время анализа.</param>
      <returns>Представление JsonDocument данного значения JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> не представляет допустимое отдельное значение JSON.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> содержит неподдерживаемые параметры.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary>Анализирует текст, представляющий отдельное символьное значение JSON в JsonDocument.</summary>
      <param name="json">Анализируемый текст JSON.</param>
      <param name="options">Параметры для управления поведением модуля чтения во время анализа.</param>
      <returns>Представление JsonDocument данного значения JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="json" /> не представляет допустимое отдельное значение JSON.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> содержит неподдерживаемые параметры.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary>Анализирует текст, представляющий отдельное строковое значение JSON в JsonDocument.</summary>
      <param name="json">Анализируемый текст JSON.</param>
      <param name="options">Параметры для управления поведением модуля чтения во время анализа.</param>
      <returns>Представление JsonDocument данного значения JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="json" /> не представляет допустимое отдельное значение JSON.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> содержит неподдерживаемые параметры.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary>Анализирует <see cref="T:System.IO.Stream" /> в виде данных в кодировке UTF-8, представляющих отдельное значение JSON в JsonDocument. Поток считывается до завершения.</summary>
      <param name="utf8Json">Анализируемые данные JSON.</param>
      <param name="options">Параметры для управления поведением модуля чтения во время анализа.</param>
      <param name="cancellationToken">Токен для отслеживания запросов отмены.</param>
      <returns>Задача по созданию представления JsonDocument данного значения JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> не представляет допустимое отдельное значение JSON.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> содержит неподдерживаемые параметры.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary>Анализирует одно значение JSON (включая объекты или массивы) из указанного модуля чтения.</summary>
      <param name="reader">Модуль чтения, используемый для чтения.</param>
      <returns>JsonDocument, представляющий значение (и вложенные значения), считанное из модуля чтения.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> содержит неподдерживаемые параметры.
-или-
Текущий маркер <paramref name="reader" /> не запускается или не представляет значение.</exception>
      <exception cref="T:System.Text.Json.JsonException">Не удалось считать значение из модуля чтения.</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary>Возвращает корневой элемент этого документа JSON.</summary>
      <returns>
        <see cref="T:System.Text.Json.JsonElement" />, представляющая значение документа.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary>Пытается проанализировать одно значение JSON (включая объекты или массивы) из указанного модуля чтения.</summary>
      <param name="reader">Модуль чтения, используемый для чтения.</param>
      <param name="document">Когда этот метод возвращает данные, содержит анализируемый документ.</param>
      <returns>Значение <see langword="true" />, если значение было считано и проанализировано в JsonDocument; значение <see langword="false" />, если модулю чтения не хватило данных во время анализа. Во всех других ситуациях возникает исключение.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> содержит неподдерживаемые параметры.
-или-
Текущий маркер <paramref name="reader" /> не запускается или не представляет значение.</exception>
      <exception cref="T:System.Text.Json.JsonException">Не удалось считать значение из модуля чтения.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>Записывает документ в предоставленный модуль записи в виде значения JSON.</summary>
      <param name="writer">Модуль записи, в который необходимо записать документ.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="writer" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого <see cref="P:System.Text.Json.JsonDocument.RootElement" /> приведет к недопустимому JSON.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary>Предоставляет пользователю возможность определить пользовательское поведение при анализе JSON для создания <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary>Возвращает или задает значение, которое указывает, разрешена ли (и игнорируется) лишняя запятая в конце списка значений JSON в объекте или массиве внутри считываемых полезных данных JSON.</summary>
      <returns>
        <see langword="true" />, разрешена ли лишняя запятая в конце списка значений JSON в объекте или массиве; в противном случае <see langword="false" />. Значение по умолчанию — <see langword="false" /></returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary>Возвращает или задает значение, определяющее способ, с помощью которого <see cref="T:System.Text.Json.JsonDocument" /> обрабатывает комментарии при чтении данных JSON.</summary>
      <returns>Одно из значений перечисления, указывающее, как обрабатываются комментарии.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Перечисление обработки комментариев имеет значение, которое не поддерживается (или находится за пределами диапазона перечисления <see cref="T:System.Text.Json.JsonCommentHandling" />).</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary>Возвращает или задает максимальную глубину, разрешенную при анализе данных JSON, при этом значение по умолчанию (то есть 0) указывает максимальную глубину 64.</summary>
      <returns>Максимальная глубина, допустимая при анализе данных JSON.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Максимальной глубине присвоено отрицательное значение.</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary>Представляет определенное значение JSON в <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary>Представляет перечислитель для содержимого массива JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary>Возвращает элемент коллекции, соответствующий текущей позиции перечислителя.</summary>
      <returns>Элемент коллекции, соответствующий текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary>Освобождает ресурсы, используемые этим экземпляром <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов массива.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу коллекции.</summary>
      <returns>Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца коллекции.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary>Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns>Перечислитель массива элементов <see cref="T:System.Text.Json.JsonElement" />, который может использоваться для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns>Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary>Возвращает элемент коллекции, соответствующий текущей позиции перечислителя.</summary>
      <returns>Элемент коллекции, соответствующий текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary>Возвращает JsonElement, который можно безопасно хранить по истечении времени существования исходного <see cref="T:System.Text.Json.JsonDocument" />.</summary>
      <returns>JsonElement, который можно безопасно хранить по истечении времени существования исходного <see cref="T:System.Text.Json.JsonDocument" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary>Возвращает перечислитель для перечисления значений в массиве JSON, представленном этим JsonElement.</summary>
      <returns>Перечислитель для перечисления значений в массиве JSON, представленном этим JsonElement.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary>Возвращает перечислитель для перечисления свойств в объекте JSON, представленном этим JsonElement.</summary>
      <returns>Перечислитель для перечисления свойств в объекте JSON, представленном этим JsonElement.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary>Возвращает количество значений, содержащихся в текущем значении массива.</summary>
      <returns>Количество значений, содержащихся в текущем значении массива.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary>Возвращает значение элемента в виде <see cref="T:System.Boolean" />.</summary>
      <returns>Значение элемента в виде <see cref="T:System.Boolean" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является ни <see cref="F:System.Text.Json.JsonValueKind.True" />, ни <see cref="F:System.Text.Json.JsonValueKind.False" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary>Возвращает текущий номер JSON в виде <see cref="T:System.Byte" />.</summary>
      <returns>Текущий номер JSON в виде <see cref="T:System.Byte" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение невозможно представить в виде <see cref="T:System.Byte" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary>Возвращает значение элемента в виде массива байтов.</summary>
      <returns>Значение, декодированное как массив байтов.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">Значение не закодировано в тексте Base64 и поэтому не может быть декодировано в байты.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary>Возвращает значение элемента в виде <see cref="T:System.DateTime" />.</summary>
      <returns>Значение элемента в виде <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">Это значение не может быть прочитано как <see cref="T:System.DateTime" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary>Возвращает значение элемента в виде <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Значение элемента в виде <see cref="T:System.DateTimeOffset" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">Это значение не может быть прочитано как <see cref="T:System.DateTimeOffset" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary>Возвращает текущий номер JSON в виде <see cref="T:System.Decimal" />.</summary>
      <returns>Текущий номер JSON в виде <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение невозможно представить в виде <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary>Возвращает текущий номер JSON в виде <see cref="T:System.Double" />.</summary>
      <returns>Текущий номер JSON в виде <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение невозможно представить в виде <see cref="T:System.Double" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary>Возвращает значение элемента в виде <see cref="T:System.Guid" />.</summary>
      <returns>Значение элемента в виде <see cref="T:System.Guid" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">Значение невозможно представить в виде <see cref="T:System.Guid" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary>Возвращает текущий номер JSON в виде <see cref="T:System.Int16" />.</summary>
      <returns>Текущий номер JSON в виде <see cref="T:System.Int16" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение невозможно представить в виде <see cref="T:System.Int16" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary>Возвращает текущий номер JSON в виде <see cref="T:System.Int32" />.</summary>
      <returns>Текущий номер JSON в виде <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение невозможно представить в виде <see cref="T:System.Int32" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary>Возвращает текущий номер JSON в виде <see cref="T:System.Int64" />.</summary>
      <returns>Текущий номер JSON в виде <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение невозможно представить в виде <see cref="T:System.Int64" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary>Возвращает <see cref="T:System.Text.Json.JsonElement" />, представляющий значение требуемого свойства, определяемого по <paramref name="utf8PropertyName" />.</summary>
      <param name="utf8PropertyName">Представление в кодировке UTF-8 (без метки порядка байтов) для имени возвращаемого свойства.</param>
      <returns>
        <see cref="T:System.Text.Json.JsonElement" />, представляющий значение запрошенного свойства.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Свойство с запрошенным именем не найдено.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary>Возвращает <see cref="T:System.Text.Json.JsonElement" />, представляющий значение требуемого свойства, определяемого по <paramref name="propertyName" />.</summary>
      <param name="propertyName">Имя свойства, значение которого требуется возвратить.</param>
      <returns>
        <see cref="T:System.Text.Json.JsonElement" />, представляющий значение запрошенного свойства.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Свойство с запрошенным именем не найдено.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary>Возвращает <see cref="T:System.Text.Json.JsonElement" />, представляющий значение требуемого свойства, определяемого по <paramref name="propertyName" />.</summary>
      <param name="propertyName">Имя свойства, значение которого требуется возвратить.</param>
      <returns>
        <see cref="T:System.Text.Json.JsonElement" />, представляющий значение запрошенного свойства.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Свойство с запрошенным именем не найдено.</exception>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary>Возвращает строку, представляющую исходные входные данные, на которых основано это значение.</summary>
      <returns>Исходные входные данные, на которых основано это значение.</returns>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary>Возвращает текущий номер JSON в виде <see cref="T:System.SByte" />.</summary>
      <returns>Текущий номер JSON в виде <see cref="T:System.SByte" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение невозможно представить в виде <see cref="T:System.SByte" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary>Возвращает текущий номер JSON в виде <see cref="T:System.Single" />.</summary>
      <returns>Текущий номер JSON в виде <see cref="T:System.Single" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение невозможно представить в виде <see cref="T:System.Single" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary>Возвращает значение элемента в виде <see cref="T:System.String" />.</summary>
      <returns>Значение элемента в виде <see cref="T:System.String" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является ни <see cref="F:System.Text.Json.JsonValueKind.String" />, ни <see cref="F:System.Text.Json.JsonValueKind.Null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary>Возвращает текущий номер JSON в виде <see cref="T:System.UInt16" />.</summary>
      <returns>Текущий номер JSON в виде <see cref="T:System.UInt16" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение невозможно представить в виде <see cref="T:System.UInt16" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary>Возвращает текущий номер JSON в виде <see cref="T:System.UInt32" />.</summary>
      <returns>Текущий номер JSON в виде <see cref="T:System.UInt32" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение невозможно представить в виде <see cref="T:System.UInt32" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary>Возвращает текущий номер JSON в виде <see cref="T:System.UInt64" />.</summary>
      <returns>Текущий номер JSON в виде <see cref="T:System.UInt64" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение невозможно представить в виде <see cref="T:System.UInt64" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary>Возвращает значение по указанному индексу, когда текущее значение — <see cref="F:System.Text.Json.JsonValueKind.Array" />.</summary>
      <param name="index">Индекс элемента.</param>
      <returns>Значение по указанному индексу.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> не входит в диапазон [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()).</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary>Представляет перечислитель для свойств объекта JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary>Возвращает элемент коллекции, соответствующий текущей позиции перечислителя.</summary>
      <returns>Элемент коллекции, соответствующий текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary>Освобождает ресурсы, используемые данным экземпляром <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary>Возвращает перечислитель, который перебирает свойства объекта.</summary>
      <returns>Перечислитель, который можно использовать для перебора элементов объекта.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу коллекции.</summary>
      <returns>Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца коллекции.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary>Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>Возвращает перечислитель, осуществляющий итерацию в коллекции.</summary>
      <returns>Перечислитель объектов <see cref="T:System.Text.Json.JsonProperty" />, который может использоваться для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, осуществляющий итерацию в коллекции.</summary>
      <returns>Перечислитель, который может использоваться для выполнения итерации по элементам коллекции.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary>Возвращает элемент коллекции, соответствующий текущей позиции перечислителя.</summary>
      <returns>Элемент коллекции, соответствующий текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary>Возвращает строковое представление для текущего значения в соответствии с типом значения.</summary>
      <returns>Строковое представление для текущего значения в соответствии с типом значения.</returns>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary>Пытается представить текущий номер JSON в виде <see cref="T:System.Byte" />.</summary>
      <param name="value">После возврата из этого метода содержит байтовый эквивалент текущего числа JSON, если преобразование выполнено успешно.</param>
      <returns>Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.Byte" />, иначе — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary>Пытается представить текущую строку JSON в виде массива байтов, предполагая, что она в кодировке Base64.</summary>
      <param name="value">Если метод выполнен, содержит декодированное двоичное представление текста в кодировке Base64.</param>
      <returns>
        <see langword="true" />, если все значение токена закодировано как допустимый текст в Base64 и может быть успешно декодировано в байты; в противном случае — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary>Пытается представить текущую строку JSON в виде <see cref="T:System.DateTime" />.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит значение даты и времени, эквивалентное текущей строке JSON.</param>
      <returns>Значение <see langword="true" />, если строку можно представить в виде <see cref="T:System.DateTime" />, иначе — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary>Пытается представить текущую строку JSON в виде <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит дату и время, эквивалентные текущей строке JSON.</param>
      <returns>Значение <see langword="true" />, если строку можно представить в виде <see cref="T:System.DateTimeOffset" />, иначе — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary>Пытается представить текущий номер JSON в виде <see cref="T:System.Decimal" />.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит десятичный эквивалент текущего номера JSON.</param>
      <returns>Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.Decimal" />, иначе — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary>Пытается представить текущий номер JSON в виде <see cref="T:System.Double" />.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит значение с плавающей запятой двойной точности, эквивалентное текущему номеру JSON.</param>
      <returns>Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.Double" />, иначе — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary>Пытается представить текущую строку JSON в виде <see cref="T:System.Guid" />.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит GUID, эквивалентный текущей строке JSON.</param>
      <returns>Значение <see langword="true" />, если строку можно представить в виде <see cref="T:System.Guid" />, иначе — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary>Пытается представить текущий номер JSON в виде <see cref="T:System.Int16" />.</summary>
      <param name="value">После возврата из этого метода содержит 16-разрядный целочисленный эквивалент текущего числа JSON, если преобразование выполнено успешно.</param>
      <returns>Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.Int16" />, иначе — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary>Пытается представить текущий номер JSON в виде <see cref="T:System.Int32" />.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит 32-разрядное целочисленное значение, эквивалентное текущему номеру JSON.</param>
      <returns>Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.Int32" />, иначе — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary>Пытается представить текущий номер JSON в виде <see cref="T:System.Int64" />.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит 64-разрядное целочисленное значение, эквивалентное текущему номеру JSON.</param>
      <returns>Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.Int64" />, иначе — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary>Ищет свойство с именем <paramref name="utf8PropertyName" /> в текущем объекте, возвращая значение, которое указывает, существует ли такое свойство. Если свойство существует, метод назначает его значение аргументу <paramref name="value" />.</summary>
      <param name="utf8PropertyName">Представление в кодировке UTF-8 (без метки порядка байтов) для имени возвращаемого свойства.</param>
      <param name="value">Получает значение найденного свойства.</param>
      <returns>Значение <see langword="true" />, если свойство найдено; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary>Ищет свойство с именем <paramref name="propertyName" /> в текущем объекте, возвращая значение, которое указывает, существует ли такое свойство. Если свойство существует, метод назначает его значение аргументу <paramref name="value" />.</summary>
      <param name="propertyName">Имя искомого свойства.</param>
      <param name="value">Когда этот метод возвращает данные, содержит значение указанного свойства.</param>
      <returns>Значение <see langword="true" />, если свойство найдено; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary>Ищет свойство с именем <paramref name="propertyName" /> в текущем объекте, возвращая значение, которое указывает, существует ли такое свойство. Если свойство существует, его значение назначается аргументу <paramref name="value" />.</summary>
      <param name="propertyName">Имя искомого свойства.</param>
      <param name="value">Когда этот метод возвращает данные, содержит значение указанного свойства.</param>
      <returns>Значение <see langword="true" />, если свойство найдено; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary>Пытается представить текущий номер JSON в виде <see cref="T:System.SByte" />.</summary>
      <param name="value">После возврата из этого метода содержит байтовый эквивалент со знаком текущего числа JSON, если преобразование выполнено успешно.</param>
      <returns>Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.SByte" />, иначе — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary>Пытается представить текущий номер JSON в виде <see cref="T:System.Single" />.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит значение с плавающей запятой одиночной точности, эквивалентное текущему номеру JSON.</param>
      <returns>Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.Single" />, иначе — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary>Пытается представить текущий номер JSON в виде <see cref="T:System.UInt16" />.</summary>
      <param name="value">После возврата из этого метода содержит беззнаковый 16-разрядный целочисленный эквивалент текущего числа JSON, если преобразование выполнено успешно.</param>
      <returns>Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.UInt16" />, иначе — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary>Пытается представить текущий номер JSON в виде <see cref="T:System.UInt32" />.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит 32-разрядное целочисленное значение без знака, эквивалентное текущему номеру JSON.</param>
      <returns>Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.UInt32" />, иначе — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary>Пытается представить текущий номер JSON в виде <see cref="T:System.UInt64" />.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит 64-разрядное целочисленное значение без знака, эквивалентное текущему номеру JSON.</param>
      <returns>Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.UInt64" />, иначе — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary>Сравнивает текст, представленный байтовым диапазоном в кодировке UTF-8, со строковым значением этого элемента.</summary>
      <param name="utf8Text">Текст в кодировке UTF-8, с которым производится сравнение.</param>
      <returns>Значение <see langword="true" />, если строковое значение этого элемента имеет ту же кодировку UTF-8, что и <paramref name="utf8Text" />, иначе — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary>Сравнивает указанный диапазон символов только для чтения со строковым значением этого элемента.</summary>
      <param name="text">Текст, с которым выполняется сравнение.</param>
      <returns>Значение <see langword="true" />, если строковое значение этого элемента совпадает с <paramref name="text" />, иначе — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary>Сравнивает указанную строку со строковым значением этого элемента.</summary>
      <param name="text">Текст, с которым выполняется сравнение.</param>
      <returns>Значение <see langword="true" />, если строковое значение этого элемента совпадает с <paramref name="text" />, иначе — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary>Возвращает тип текущего значения JSON.</summary>
      <returns>Тип текущего значения JSON.</returns>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>Записывает элемент в указанный модуль записи в виде значения JSON.</summary>
      <param name="writer">Средство записи, в которое необходимо записать элемент.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="writer" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Значение <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого параметра — <see cref="F:System.Text.Json.JsonValueKind.Undefined" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary>Предоставляет методы для преобразования текста в кодировке UTF-8 или UTF-16 в форму, подходящую для JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>Кодирует текстовое значение UTF-8 в виде строки JSON.</summary>
      <param name="utf8Value">Текст в кодировке UTF-8 для преобразования в текст в кодировке JSON.</param>
      <param name="encoder">Кодировщик, используемый при экранировании строки. Укажите значение <see langword="null" /> для использования кодировщика по умолчанию.</param>
      <returns>Текст в кодировке JSON.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="utf8Value" /> — слишком большое значение.
-или-
<paramref name="utf8Value" /> содержит недопустимые байты UTF-8.</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>Кодирует указанное текстовое значение в строку JSON.</summary>
      <param name="value">Значение для преобразования в текст в кодировке JSON.</param>
      <param name="encoder">Кодировщик, используемый при экранировании строки. Укажите значение <see langword="null" /> для использования кодировщика по умолчанию.</param>
      <returns>Текст в кодировке JSON.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> — слишком большое значение.

или -

<paramref name="value" /> содержит недопустимые символы UTF-16.</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>Кодирует строковое текстовое значение в виде строки JSON.</summary>
      <param name="value">Значение для преобразования в текст в кодировке JSON.</param>
      <param name="encoder">Кодировщик, используемый при экранировании строки. Укажите значение <see langword="null" /> для использования кодировщика по умолчанию.</param>
      <returns>Текст в кодировке JSON.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> — слишком большое значение.

или -

<paramref name="value" /> содержит недопустимые символы UTF-16.</exception>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary>Возвращает представление предварительно закодированного текста JSON в кодировке UTF-8.</summary>
      <returns>Представление предварительно закодированного текста JSON в кодировке UTF-8.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary>Определяет, равны ли значения этого экземпляра и указанного объекта, который также должен быть экземпляром <see cref="T:System.Text.Json.JsonEncodedText" />.</summary>
      <param name="obj">Объект, сравниваемый с этим экземпляром.</param>
      <returns>Значение <see langword="true" />, если объект <paramref name="obj" /> равен текущему экземпляру; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary>Определяет, равны ли значения этого экземпляра и указанного экземпляра <see cref="T:System.Text.Json.JsonEncodedText" />.</summary>
      <param name="other">Объект, сравниваемый с этим экземпляром.</param>
      <returns>Значение <see langword="true" />, если значения данного экземпляра и <paramref name="other" /> совпадают; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary>Возвращает хэш-код для модуля чтения данных <see cref="T:System.Text.Json.JsonEncodedText" />.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary>Преобразует значение данного экземпляра в <see cref="T:System.String" />.</summary>
      <returns>Базовая строка в кодировке UTF-16.</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary>Определяет пользовательский объект исключения, порождаемого при обнаружении недопустимого текста JSON, при превышении определенной максимальной глубины или несовместимости текста JSON с типом свойства объекта.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.JsonException" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Создает новый объект исключения с сериализованными данными.</summary>
      <param name="info">Данные сериализованного объекта о вызываемом исключении.</param>
      <param name="context">Объект, содержащий контекстные сведения об источнике или назначении.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="info" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.JsonException" /> с указанным сообщением об ошибке.</summary>
      <param name="message">Контекстно-зависимое сообщение об ошибке.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.JsonException" /> с указанным сообщением об ошибке и ссылкой на внутреннее исключение, вызвавшее это исключение.</summary>
      <param name="message">Контекстно-зависимое сообщение об ошибке.</param>
      <param name="innerException">Исключение, которое вызвало текущее исключение.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>Создает объект исключения для передачи сведений об ошибке пользователю.</summary>
      <param name="message">Контекстно-зависимое сообщение об ошибке.</param>
      <param name="path">Путь, по которому был обнаружен недопустимый JSON.</param>
      <param name="lineNumber">Номер строки (начиная с 0), где обнаружен недопустимый JSON при десериализации.</param>
      <param name="bytePositionInLine">Число байтов (начиная с 0) в текущей строке, где обнаружен недопустимый JSON.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary>Создает объект исключения для передачи сведений об ошибке пользователю, включающий указанное внутреннее исключение.</summary>
      <param name="message">Контекстно-зависимое сообщение об ошибке.</param>
      <param name="path">Путь, по которому был обнаружен недопустимый JSON.</param>
      <param name="lineNumber">Номер строки (начиная с 0), где обнаружен недопустимый JSON при десериализации.</param>
      <param name="bytePositionInLine">Число байтов (начиная с 0) в текущей строке, где обнаружен недопустимый JSON.</param>
      <param name="innerException">Исключение, которое вызвало текущее исключение.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary>Возвращает число байтов, считанных в пределах текущей строки (начиная с 0) перед исключением.</summary>
      <returns>Отсчитываемое от нуля число байтов, считанных в текущей строке до исключения.</returns>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> сведениями об исключении.</summary>
      <param name="info">Данные сериализованного объекта о вызываемом исключении.</param>
      <param name="context">Объект, содержащий контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary>Возвращает число считанных строк (начиная с 0) перед исключением.</summary>
      <returns>Начинающееся с нуля число строк, считанных до исключения.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary>Возвращает сообщение, описывающее текущее исключение.</summary>
      <returns>Сообщение об ошибке, описывающее текущее исключение.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary>Возвращает путь в JSON, где было обнаружено исключение.</summary>
      <returns>Путь в JSON, где было обнаружено исключение.</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary>Определяет политику именования, используемую для преобразования строкового имени в другой формат, например Camel.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary>Возвращает политику именования для Camel.</summary>
      <returns>Политика именования для Camel.</returns>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary>Если переопределено в производном классе, преобразует указанное имя согласно политике.</summary>
      <param name="name">Имя для преобразования.</param>
      <returns>Преобразованное имя.</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary>Представляет одно свойство объекта JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary>Получает имя данного свойства.</summary>
      <returns>Имя данного свойства.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary>Сравнивает указанный текст в кодировке UTF-8 с именем этого свойства.</summary>
      <param name="utf8Text">Текст в кодировке UTF-8, с которым производится сравнение.</param>
      <returns>Значение <see langword="true" />, если имя этого свойства имеет ту же кодировку UTF-8, что и <paramref name="utf8Text" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Type" /> этого значения не является <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary>Сравнивает указанный текст как диапазон символов с именем этого свойства.</summary>
      <param name="text">Текст, с которым выполняется сравнение.</param>
      <returns>Значение <see langword="true" />, если имя этого свойства совпадает с <paramref name="text" />; в противном случае — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Type" /> этого значения не является <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary>Сравнивает указанную строку с именем этого свойства.</summary>
      <param name="text">Текст, с которым выполняется сравнение.</param>
      <returns>Значение <see langword="true" />, если имя этого свойства совпадает с <paramref name="text" />; в противном случае — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Type" /> этого значения не является <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary>Предоставляет строковое представление свойства для целей отладки.</summary>
      <returns>Строка, содержащая неинтерпретированное значение свойства, начинающаяся с объявляющей открывающей кавычки и заканчивающаяся последним символом, который является частью значения.</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary>Возвращает значение свойства.</summary>
      <returns>Значение этого свойства.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>Записывает свойство в предоставленный модуль записи как свойство именованного объекта JSON.</summary>
      <param name="writer">Модуль записи, в который необходимо записать свойство.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="writer" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Text.Json.JsonProperty.Name" /> слишком велико, чтобы быть свойством объекта JSON.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого свойства JSON <see cref="P:System.Text.Json.JsonProperty.Value" /> приведет к недопустимому JSON.</exception>
      <exception cref="T:System.ObjectDisposedException">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary>Предоставляет пользователю возможность определить пользовательское поведение при чтении JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary>Возвращает или задает значение, которое определяет, разрешена ли (и игнорируется) лишняя запятая в конце списка значений JSON в объекте или массиве внутри считываемых полезных данных JSON.</summary>
      <returns>
        <see langword="true" />, разрешена ли лишняя запятая; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary>Возвращает или задает значение, определяющее способ, с помощью которого <see cref="T:System.Text.Json.Utf8JsonReader" /> обрабатывает комментарии при чтении данных JSON.</summary>
      <returns>Одно из значений перечисления, указывающее, как обрабатываются комментарии.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Свойству присвоено значение, которое не является членом перечисления <see cref="T:System.Text.Json.JsonCommentHandling" />.</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary>Возвращает или задает максимальную глубину, разрешенную при чтении JSON, при этом значение по умолчанию (то есть 0) указывает максимальную глубину 64.</summary>
      <returns>Максимальная глубина, разрешенная при чтении JSON.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Для максимальной глубины задается отрицательное значение.</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary>Определяет непрозрачный тип, содержащий и сохраняющий все соответствующие сведения о состоянии, которые необходимо предоставить <see cref="T:System.Text.Json.Utf8JsonReader" /> для продолжения чтения после обработки неполных данных.</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary>Формирует новый экземпляр <see cref="T:System.Text.Json.JsonReaderState" />.</summary>
      <param name="options">Определяет пользовательское поведение <see cref="T:System.Text.Json.Utf8JsonReader" />, которое отличается от RFC по JSON (например, способом обработки комментариев или максимально допустимой глубиной при чтении). По умолчанию <see cref="T:System.Text.Json.Utf8JsonReader" /> строго следует RFC по JSON (то есть комментарии в JSON являются недопустимыми) и осуществляет чтение до максимальной глубины 64.</param>
      <exception cref="T:System.ArgumentException">Для максимальной глубины задано значение, не являющееся положительным (&lt; 0).</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary>Возвращает пользовательское поведение, применяемое при чтении данных JSON с помощью структуры <see cref="T:System.Text.Json.Utf8JsonReader" />, которое может отклоняться от спецификации JSON, отражающей поведение по умолчанию.</summary>
      <returns>Пользовательское поведение, используемое при чтении данных JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary>Предоставляет функциональные возможности сериализации объектов или типов значений в JSON и десериализации JSON в объекты или типы значений.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Выполняет синтаксический анализ текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр указанного типа.</summary>
      <param name="utf8Json">Анализируемый текст JSON.</param>
      <param name="returnType">Тип объекта для преобразования и возврата.</param>
      <param name="options">Параметры для управления поведением во время анализа.</param>
      <returns>Представление <paramref name="returnType" /> данного значения JSON.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="returnType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Недопустимый JSON.
-или-
<typeparamref name="returnType" /> несовместим с JSON.
-или-
Остались данные в диапазоне больше одного значения JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Выполняет синтаксический анализ текста, представляющего одно значение JSON, в экземпляр указанного типа.</summary>
      <param name="json">Анализируемый текст JSON.</param>
      <param name="returnType">Тип объекта для преобразования и возврата.</param>
      <param name="options">Параметры для управления поведением во время анализа.</param>
      <returns>Представление <paramref name="returnType" /> данного значения JSON.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="json" /> или <paramref name="returnType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Недопустимый JSON.
-или-
<typeparamref name="TValue" /> несовместим с JSON.
-или-
Остались данные в строке больше одного значения JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Считывает одно значение JSON (включая объекты или массивы) из предоставленного модуля чтения и преобразует его в экземпляр указанного типа.</summary>
      <param name="reader">Модуль чтения, из которого читается JSON.</param>
      <param name="returnType">Тип объекта для преобразования и возврата.</param>
      <param name="options">Параметры для управления поведением сериализатора во время чтения.</param>
      <returns>Представление <paramref name="returnType" /> данного значения JSON.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="returnType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Недопустимый JSON.
-или-
<typeparamref name="returnType" /> несовместим с JSON.
-или-
Не удалось считать значение из модуля чтения.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> использует неподдерживаемые параметры.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary>Выполняет синтаксический анализ текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр типа, заданного параметром универсального типа.</summary>
      <param name="utf8Json">Анализируемый текст JSON.</param>
      <param name="options">Параметры для управления поведением во время анализа.</param>
      <typeparam name="TValue">Целевой тип текста в кодировке UTF-8.</typeparam>
      <returns>Представление <typeparamref name="TValue" /> данного значения JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">Недопустимый JSON.
-или-
<typeparamref name="TValue" /> несовместим с JSON.
-или-
Остались данные в диапазоне больше одного значения JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary>Выполняет синтаксический анализ текста, представляющего одно значение JSON, в экземпляр типа, заданного параметром универсального типа.</summary>
      <param name="json">Анализируемый текст JSON.</param>
      <param name="options">Параметры для управления поведением во время анализа.</param>
      <typeparam name="TValue">Целевой тип значения JSON.</typeparam>
      <returns>Представление <typeparamref name="TValue" /> данного значения JSON.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="json" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Недопустимый JSON.
-или-
<typeparamref name="TValue" /> несовместим с JSON.
-или-
Остались данные в строке больше одного значения JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary>Считывает одно значение JSON (включая объекты или массивы) из предоставленного модуля чтения в экземпляр типа, заданного параметром универсального типа.</summary>
      <param name="reader">Модуль чтения, из которого читается JSON.</param>
      <param name="options">Параметры для управления поведением сериализатора во время чтения.</param>
      <typeparam name="TValue">Целевой тип значения JSON.</typeparam>
      <returns>Представление <typeparamref name="TValue" /> данного значения JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">Недопустимый JSON.
-или-
<typeparamref name="TValue" /> несовместим с JSON.
-или-
Не удалось считать значение из модуля чтения.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> использует неподдерживаемые параметры.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Асинхронное чтение текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр указанного типа. Поток считывается до завершения.</summary>
      <param name="utf8Json">Анализируемые данные JSON.</param>
      <param name="returnType">Тип объекта для преобразования и возврата.</param>
      <param name="options">Параметры для управления поведением во время чтения.</param>
      <param name="cancellationToken">Токен отмены, который может использоваться для отмены операции чтения.</param>
      <returns>Представление <paramref name="returnType" /> данного значения JSON.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="utf8Json" /> или <paramref name="returnType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Недопустимый JSON.
-или-
<typeparamref name="TValue" /> несовместим с JSON.
-или-
В потоке остались данные.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Асинхронное чтение текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр типа, заданного параметром универсального типа. Поток считывается до завершения.</summary>
      <param name="utf8Json">Анализируемые данные JSON.</param>
      <param name="options">Параметры для управления поведением во время чтения.</param>
      <param name="cancellationToken">Токен, который можно использовать для отмены операции чтения.</param>
      <typeparam name="TValue">Целевой тип значения JSON.</typeparam>
      <returns>Представление <typeparamref name="TValue" /> данного значения JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">Недопустимый JSON.
-или-
<typeparamref name="TValue" /> несовместим с JSON.
-или-
В потоке остались данные.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Преобразует значение указанного типа в строку JSON.</summary>
      <param name="value">Преобразуемое значение.</param>
      <param name="inputType">Тип <paramref name="value" /> для преобразования.</param>
      <param name="options">Параметры для управления поведением преобразования.</param>
      <returns>Строковое представление JSON значения.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Записывает представление JSON указанного типа в предоставленный модуль записи.</summary>
      <param name="writer">Модуль записи JSON, в который производится запись.</param>
      <param name="value">Значение для преобразования и записи.</param>
      <param name="inputType">Тип <paramref name="value" /> для преобразования.</param>
      <param name="options">Параметры управления поведением сериализации.</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary>Преобразует значение типа, заданного параметром универсального типа, в строку JSON.</summary>
      <param name="value">Преобразуемое значение.</param>
      <param name="options">Параметры управления поведением сериализации.</param>
      <typeparam name="TValue">Тип значения для сериализации.</typeparam>
      <returns>Строковое представление JSON значения.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary>Записывает представление JSON типа, указанного параметром универсального типа, в предоставленный модуль записи.</summary>
      <param name="writer">Модуль записи JSON, в который производится запись.</param>
      <param name="value">Значение для преобразования и записи.</param>
      <param name="options">Параметры управления поведением сериализации.</param>
      <typeparam name="TValue">Тип значения для сериализации.</typeparam>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Асинхронно преобразует значение указанного типа в текст JSON в кодировке UTF-8 и записывает его в указанный поток.</summary>
      <param name="utf8Json">Поток UTF-8, в который требуется выполнить запись.</param>
      <param name="value">Преобразуемое значение.</param>
      <param name="inputType">Тип <paramref name="value" /> для преобразования.</param>
      <param name="options">Параметры управления поведением сериализации.</param>
      <param name="cancellationToken">Токен, который можно использовать для отмены операции записи.</param>
      <returns>Задача, представляющая асинхронную операцию записи.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Асинхронно преобразует значение типа, заданного параметром универсального типа, в текст JSON в кодировке UTF-8 и записывает его в поток.</summary>
      <param name="utf8Json">Поток UTF-8, в который требуется выполнить запись.</param>
      <param name="value">Преобразуемое значение.</param>
      <param name="options">Параметры управления поведением сериализации.</param>
      <param name="cancellationToken">Токен, который можно использовать для отмены операции записи.</param>
      <typeparam name="TValue">Тип значения для сериализации.</typeparam>
      <returns>Задача, представляющая асинхронную операцию записи.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Преобразует значение указанного типа в строку JSON, закодированную как байты UTF-8.</summary>
      <param name="value">Преобразуемое значение.</param>
      <param name="inputType">Тип <paramref name="value" /> для преобразования.</param>
      <param name="options">Параметры для управления поведением преобразования.</param>
      <returns>Строковое представление JSON значения, закодированное как байты UTF-8.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary>Преобразует значение типа, указанного параметром универсального типа, в строку JSON, закодированную как байты UTF-8.</summary>
      <param name="value">Преобразуемое значение.</param>
      <param name="options">Параметры для управления поведением преобразования.</param>
      <typeparam name="TValue">Тип значения.</typeparam>
      <returns>Строковое представление JSON значения, закодированное как байты UTF-8.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary>Предоставляет параметры для использования с <see cref="T:System.Text.Json.JsonSerializer" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.JsonSerializerOptions" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary>Возвращает или задает значение, которое указывает, разрешена ли (и игнорируется) лишняя запятая в конце списка значений JSON в объекте или массиве внутри десериализуемых полезных данных JSON.</summary>
      <returns>
        <see langword="true" />, разрешена ли лишняя запятая в конце списка значений JSON в объекте или массиве (и игнорируется); в противном случае <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Это свойство было задано после сериализации или десериализации.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary>Возвращает список зарегистрированных пользовательских преобразователей.</summary>
      <returns>Список пользовательских преобразователей.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary>Возвращает или задает размер буфера по умолчанию (в байтах), используемый при создании временных буферов.</summary>
      <returns>Размер буфера по умолчанию в байтах.</returns>
      <exception cref="T:System.ArgumentException">Размер буфера меньше 1.</exception>
      <exception cref="T:System.InvalidOperationException">Это свойство было задано после сериализации или десериализации.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary>Возвращает или задает политику, используемую для преобразования имени ключа <see cref="T:System.Collections.IDictionary" /> в другой формат, например Camel.</summary>
      <returns>Политика, используемая для преобразования имени <see cref="T:System.Collections.IDictionary" />ого ключа в другой формат.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary>Возвращает или устанавливает кодировщик, используемый при экранировании строк. Укажите значение <see langword="null" /> для использования кодировщика по умолчанию.</summary>
      <returns>Кодировка символов JavaScript.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary>Возвращает преобразователь для указанного типа.</summary>
      <param name="typeToConvert">Тип, для которого возвращается преобразователь.</param>
      <returns>Первый преобразователь, который поддерживает заданный тип, или значение <see langword="null" />, если преобразовать отсутствует.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary>Возвращает или задает значение, определяющее, пропускаются ли значения <see langword="null" /> во время сериализации и десериализации. Значение по умолчанию — <see langword="false" />.</summary>
      <returns>
        <see langword="true" /> игнорировать значения NULL во время сериализации и десериализации; в противном случае см. раздел langword = "false"/&gt;.</returns>
      <exception cref="T:System.InvalidOperationException">Это свойство было задано после сериализации или десериализации.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary>Возвращает значение, определяющее, пропускаются ли во время сериализации свойства, доступные только для чтения. Значение по умолчанию — <see langword="false" />.</summary>
      <returns>
        <see langword="true" /> пропускать свойства только для чтения во время сериализации; в противном случае <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Это свойство было задано после сериализации или десериализации.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary>Возвращает или задает максимальную глубину, разрешенную при сериализации или десериализации JSON, при этом значение по умолчанию 0 указывает максимальную глубину 64.</summary>
      <returns>Максимальная глубина, допустимая при сериализации или десериализации JSON.</returns>
      <exception cref="T:System.InvalidOperationException">Это свойство было задано после сериализации или десериализации.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Максимальной глубине присвоено отрицательное значение.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary>Возвращает или задает значение, которое определяет, использует ли имя свойства сравнение без учета регистра во время десериализации. Значение по умолчанию — <see langword="false" />.</summary>
      <returns>
        <see langword="true" /> для сравнения имен свойств с помощью сравнения без учета регистра; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary>Возвращает или задает значение, указывающее политику, используемую для преобразования имени свойства объекта в другой формат, например "верблюжий" стиль, или <see langword="null" />, чтобы оставить имена свойств без изменений.</summary>
      <returns>Политика именования свойств или <see langword="null" />, чтобы имена свойств не изменялись.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary>Возвращает или задает значение, определяющее, как комментарии обрабатываются во время десериализации.</summary>
      <returns>Значение, указывающее, разрешены ли комментарии, запрещены или пропущены.</returns>
      <exception cref="T:System.InvalidOperationException">Это свойство было задано после сериализации или десериализации.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Перечисление обработки комментариев имеет значение, которое не поддерживается (или находится за пределами диапазона перечисления <see cref="T:System.Text.Json.JsonCommentHandling" />).</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary>Возвращает или задает значение, которое определяет, должен ли JSON использовать автоматическое форматирование. По умолчанию JSON сериализуется без лишних пробелов.</summary>
      <returns>
        <see langword="true" />, если JSON довольно хорошо печатается при сериализации; в противном случае <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Это свойство было задано после сериализации или десериализации.</exception>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary>Определяет различные токены JSON, составляющие текст JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary>Тип токена — строка комментария.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary>Тип токена — конец массива JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary>Тип токена — конец объекта JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary>Тип токена — литерал false JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary>Значения нет (не аналогично <see cref="F:System.Text.Json.JsonTokenType.Null" />).</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary>Тип токена — литерал null JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary>Тип токена — это число JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary>Тип токена — это имя свойства JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary>Тип токена — начало массива JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary>Тип токена — начало объекта JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary>Тип токена — строка JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary>Тип токена — литерал true JSON.</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary>Задает тип данных значения JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary>Массив JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary>Значение false у JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary>Значение NULL у JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary>Число JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary>Объект JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary>Строка JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary>Значение true у JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary>Значения нет (не аналогично <see cref="F:System.Text.Json.JsonValueKind.Null" />).</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary>Разрешает пользователю определить пользовательское поведение при чтении JSON с помощью <see cref="T:System.Text.Json.Utf8JsonWriter" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary>Возвращает или устанавливает кодировщик, используемый при экранировании строк. Укажите значение <see langword="null" /> для использования кодировщика по умолчанию.</summary>
      <returns>Кодировщик символов JavaScript, используемый для переопределения поведения экранирования.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary>Возвращает или задает значение, указывающее, следует ли <see cref="T:System.Text.Json.Utf8JsonWriter" /> форматировать выходные данные JSON, включая добавление отступов для вложенных токенов JSON, добавление новых строк и добавление пробела между именами и значениями свойств.</summary>
      <returns>
        <see langword="true" /> для форматирования выходных данных JSON; <see langword="false" /> для записи без лишних пробелов. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary>Возвращает или задает значение, указывающее, следует ли <see cref="T:System.Text.Json.Utf8JsonWriter" /> пропустить структурную проверку и разрешить пользователю записать недопустимую JSON.</summary>
      <returns>
        <see langword="true" /> пропустить структурную проверку и разрешить недопустимый код JSON; <see langword="false" /> создать <see cref="T:System.InvalidOperationException" /> при любой попытке записи недопустимого JSON.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary>Предоставляет базовый класс для сериализации атрибутов.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary>Создает новый экземпляр класса <see cref="T:System.Text.Json.Serialization.JsonAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary>Преобразует объект или значение в формат JSON или из него.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary>Если переопределено в производном классе, определяет, может ли экземпляр преобразователя преобразовать указанный тип объекта.</summary>
      <param name="typeToConvert">Тип объекта, для которого необходимо проверить, можно ли его преобразовать этим экземпляром преобразователя.</param>
      <returns>Значение <see langword="true" />, если этот экземпляр может преобразовать заданный тип объекта. В противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary>Преобразует объект или значение в формат JSON или из него.</summary>
      <typeparam name="T">Тип объекта или значения, обрабатываемого преобразователем.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Serialization.JsonConverter`1" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary>Определяет, можно ли выполнить преобразование в указанный тип.</summary>
      <param name="typeToConvert">Тип, с которым выполняется сравнение.</param>
      <returns>Значение <see langword="true" />, если тип может быть преобразован; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Считывает и преобразует JSON в тип <typeparamref name="T" />.</summary>
      <param name="reader">Средство чтения.</param>
      <param name="typeToConvert">Тип, преобразование которого выполняется.</param>
      <param name="options">Объект, указывающий используемые параметры сериализации.</param>
      <returns>Преобразованное значение.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary>Записывает указанное значение в формате JSON.</summary>
      <param name="writer">Модуль записи, в который производится запись.</param>
      <param name="value">Значение для преобразования в JSON.</param>
      <param name="options">Объект, указывающий используемые параметры сериализации.</param>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary>При размещении в свойстве или типе указывает используемый тип преобразователя.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> с указанным типом преобразователя.</summary>
      <param name="converterType">Тип преобразователя.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary>Возвращает тип <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> или <see langword="null" />, если атрибут был создан без типа.</summary>
      <returns>Тип <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />или <see langword="null" />, если он был создан без типа.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary>Если переопределяется в производном классе и <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" />имеет значение <see langword="null" />, позволяет производному классу создать объект <see cref="T:System.Text.Json.Serialization.JsonConverter" /> для передачи дополнительного состояния.</summary>
      <param name="typeToConvert">Тип преобразователя.</param>
      <returns>Пользовательский преобразователь.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary>Поддерживает преобразование нескольких типов с помощью шаблона фабрики.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary>Если переопределен в производном классе, инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Создает преобразователь для указанного типа.</summary>
      <param name="typeToConvert">Тип, обрабатываемый преобразователем.</param>
      <param name="options">Используемые параметры сериализации.</param>
      <returns>Преобразователь, для которого <typeparamref name="T" /> совместим с <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary>При указании для свойства типа <see cref="T:System.Collections.Generic.IDictionary`2" /> все свойства, не имеющие соответствующего элемента, добавляются в этот словарь во время десериализации и записываются во время сериализации.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary>Создает новый экземпляр класса <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary>Предотвращает сериализацию или десериализацию свойства.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary>Указывает имя свойства, которое содержится в JSON при сериализации и десериализации. Это переопределяет политику именования, заданную параметром <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> с заданным именем свойства.</summary>
      <param name="name">Имя свойства.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary>Возвращает имя свойства.</summary>
      <returns>Имя свойства.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary>Производит преобразования между значениями перечисления и строками.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary>Инициализирует экземпляр класса <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> политикой именования по умолчанию, допускающей целые числа.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary>Инициализирует экземпляр класса <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> с указанной политикой именования и значением, указывающим, разрешены ли неопределенные значения перечисления.</summary>
      <param name="namingPolicy">Необязательная политика именования для записи значений перечисления.</param>
      <param name="allowIntegerValues">Значение <see langword="true" />, чтобы разрешить неопределенные значения перечисления; в противном случае — <see langword="false" />. Если задано <see langword="true" /> и значение перечисления не определено, оно выводится как число, а не как строка.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary>Определяет, можно ли преобразовать указанный тип в перечисление.</summary>
      <param name="typeToConvert">Проверяемый тип.</param>
      <returns>Значение <see langword="true" />, если тип может быть преобразован; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Создает преобразователь для указанного типа.</summary>
      <param name="typeToConvert">Тип, обрабатываемый преобразователем.</param>
      <param name="options">Используемые параметры сериализации.</param>
      <returns>Преобразователь, для которого <typeparamref name="T" /> совместим с <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary>Предоставляет высокопроизводительный API для однонаправленного доступа только для чтения к тексту JSON в кодировке UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.Text.Json.Utf8JsonReader" />, который обрабатывает последовательность текста в кодировке UTF-8, доступную только для чтения, и указывает, содержат ли входные данные весь текст для обработки.</summary>
      <param name="jsonData">Предназначенный для обработки текст JSON в кодировке UTF-8.</param>
      <param name="isFinalBlock">Значение <see langword="true" /> указывает, что входная последовательность содержит все данные для обработки; значение <see langword="false" /> указывает, что входной диапазон содержит частичные данные и ожидаются дополнительные данные.</param>
      <param name="state">Объект, содержащий состояние модуля чтения. Если это первый вызов конструктора, передайте состояние по умолчанию. В противном случае передайте значение свойства <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> из предыдущего экземпляра <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.Text.Json.Utf8JsonReader" />, который обрабатывает последовательность текста в кодировке UTF-8, доступную только для чтения, с использованием указанных параметров.</summary>
      <param name="jsonData">Предназначенный для обработки текст JSON в кодировке UTF-8.</param>
      <param name="options">Определяет пользовательское поведение <see cref="T:System.Text.Json.Utf8JsonReader" />, которое отличается от RFC по JSON (например, способом обработки комментариев или максимально допустимой глубиной при чтении). По умолчанию <see cref="T:System.Text.Json.Utf8JsonReader" /> строго следует RFC по JSON, то есть комментарии в JSON являются недопустимыми, а максимальная глубина составляет 64.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.Text.Json.Utf8JsonReader" />, который обрабатывает доступный только для чтения диапазон текста в кодировке UTF-8 и указывает, содержат ли входные данные весь текст для обработки.</summary>
      <param name="jsonData">Предназначенный для обработки текст JSON в кодировке UTF-8.</param>
      <param name="isFinalBlock">Значение <see langword="true" /> указывает, что входная последовательность содержит все данные для обработки; значение <see langword="false" /> указывает, что входной диапазон содержит частичные данные и ожидаются дополнительные данные.</param>
      <param name="state">Объект, содержащий состояние модуля чтения. Если это первый вызов конструктора, передайте состояние по умолчанию. В противном случае передайте значение свойства <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> из предыдущего экземпляра <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.Text.Json.Utf8JsonReader" />, который обрабатывает диапазон текста в кодировке UTF-8, доступный только для чтения, с использованием указанных параметров.</summary>
      <param name="jsonData">Предназначенный для обработки текст JSON в кодировке UTF-8.</param>
      <param name="options">Определяет пользовательское поведение <see cref="T:System.Text.Json.Utf8JsonReader" />, которое отличается от RFC по JSON (например, способом обработки комментариев или максимально допустимой глубиной при чтении). По умолчанию <see cref="T:System.Text.Json.Utf8JsonReader" /> строго следует RFC по JSON, то есть комментарии в JSON являются недопустимыми, а максимальная глубина составляет 64.</param>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary>Возвращает общее число байтов, уже использованных этим экземпляром <see cref="T:System.Text.Json.Utf8JsonReader" />.</summary>
      <returns>Общее количество байтов, использованных на данный момент.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary>Возвращает глубину текущего токена.</summary>
      <returns>Глубина текущего маркера.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary>Возвращает текущее состояние <see cref="T:System.Text.Json.Utf8JsonReader" /> для передачи в конструктор <see cref="T:System.Text.Json.Utf8JsonReader" /> с дополнительными данными.</summary>
      <returns>Текущее состояние модуля чтения.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary>Считывает следующее значение токена JSON из источника в виде <see cref="T:System.Boolean" />.</summary>
      <returns>Значение <see langword="true" />, если <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> имеет значение <see cref="F:System.Text.Json.JsonTokenType.True" />; значение <see langword="false" />, если <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> имеет значение <see cref="F:System.Text.Json.JsonTokenType.False" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является логическим (то есть <see cref="F:System.Text.Json.JsonTokenType.True" /> или <see cref="F:System.Text.Json.JsonTokenType.False" />).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary>Анализирует текущее значение токена JSON из источника в виде <see cref="T:System.Byte" />.</summary>
      <returns>Значение токена в кодировке UTF-8.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Неверный числовой формат значения токена JSON (например, он содержит дробное значение или записывается в экспоненциальном представлении).
-или-
Значение токена JSON представляет число, которое меньше <see cref="F:System.Byte.MinValue" /> или больше <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary>Анализирует текущее значение токена JSON из источника и декодирует строку JSON в кодировке Base64 в виде массива байтов.</summary>
      <returns>Массив байтов, представляющий текущее значение токена JSON.</returns>
      <exception cref="T:System.InvalidOperationException">Тип токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">Значение не закодировано в тексте Base64 и поэтому не может быть декодировано в байты.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary>Анализирует текущее значение токена JSON из источника как комментарий, перекодируя его как <see cref="T:System.String" />.</summary>
      <returns>Комментарий, представляющий текущее значение токена JSON.</returns>
      <exception cref="T:System.InvalidOperationException">Токен JSON не является комментарием.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary>Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.DateTime" />.</summary>
      <returns>Значение даты и времени, если все значение токена в кодировке UTF-8 можно успешно проанализировать.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">Значение токена JSON не может быть прочитано как <see cref="T:System.DateTime" />.
-или-
Все значения токенов в кодировке UTF-8 невозможно проанализировать до значения <see cref="T:System.DateTime" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary>Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Смещение даты и времени, если все значения токена в кодировке UTF-8 могут быть успешно проанализированы.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">Значение токена JSON не может быть прочитано как <see cref="T:System.DateTimeOffset" />.
-или-
Все значения токенов в кодировке UTF-8 невозможно проанализировать до значения <see cref="T:System.DateTimeOffset" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary>Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Decimal" />.</summary>
      <returns>Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение токена JSON представляет число, которое меньше <see cref="F:System.Decimal.MinValue" /> или больше <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary>Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Double" />.</summary>
      <returns>Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение токена JSON представляет число, которое меньше <see cref="F:System.Double.MinValue" /> или больше <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary>Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Guid" />.</summary>
      <returns>Значение GUID, если все значение токена в кодировке UTF-8 можно успешно проанализировать.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">Значение токена JSON имеет неподдерживаемый формат для GUID.
-или-
Все значения токенов в кодировке UTF-8 невозможно проанализировать до значения <see cref="T:System.Guid" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary>Анализирует текущее значение токена JSON из источника в виде <see cref="T:System.Int16" />.</summary>
      <returns>Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.Int16" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Неверный числовой формат значения токена JSON (например, он содержит дробное значение или записывается в экспоненциальном представлении).
-или-
Значение токена JSON представляет число, которое меньше <see cref="F:System.Int16.MinValue" /> или больше <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary>Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Int32" />.</summary>
      <returns>Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение токена JSON имеет неправильный числовой формат. Например, оно содержит десятичную часть или записано в экспоненциальном представлении.
-или-
Значение токена JSON представляет число, которое меньше <see cref="F:System.Int32.MinValue" /> или больше <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary>Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Int64" />.</summary>
      <returns>Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение токена JSON имеет неправильный числовой формат. Например, оно содержит десятичную часть или записано в экспоненциальном представлении.
-или-
Значение токена JSON представляет число, которое меньше <see cref="F:System.Int64.MinValue" /> или больше <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary>Анализирует текущее значение токена JSON из источника в виде <see cref="T:System.SByte" />.</summary>
      <returns>Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.SByte" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Неверный числовой формат значения токена JSON (например, он содержит дробное значение или записывается в экспоненциальном представлении).
-или-
Значение токена JSON представляет число, которое меньше <see cref="F:System.SByte.MinValue" /> или больше <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary>Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Single" />.</summary>
      <returns>Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.Single" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение токена JSON представляет число, которое меньше <see cref="F:System.Single.MinValue" /> или больше <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary>Считывает следующее значение токена JSON из источника неэкранированным и перекодированным в строку.</summary>
      <returns>Значение токена, преобразуемое в строку, или <see langword="null" />, если <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> имеет значение <see cref="F:System.Text.Json.JsonTokenType.Null" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является строкой (то есть <see cref="F:System.Text.Json.JsonTokenType.String" />, <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> или <see cref="F:System.Text.Json.JsonTokenType.Null" />).
-или-
Строка JSON содержит недопустимые байты UTF-8 либо недопустимые суррогаты UTF-16.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary>Анализирует текущее значение токена JSON из источника в виде <see cref="T:System.UInt16" />.</summary>
      <returns>Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.UInt16" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Неверный числовой формат значения токена JSON (например, он содержит дробное значение или записывается в экспоненциальном представлении).
-или-
Значение токена JSON представляет число, которое меньше <see cref="F:System.UInt16.MinValue" /> или больше <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary>Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.UInt32" />.</summary>
      <returns>Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.UInt32" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение токена JSON имеет неправильный числовой формат. Например, оно содержит десятичную часть или записано в экспоненциальном представлении.
-или-
Значение токена JSON представляет число, которое меньше <see cref="F:System.UInt32.MinValue" /> или больше <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary>Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.UInt64" />.</summary>
      <returns>Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.UInt64" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Значение токена JSON имеет неправильный числовой формат. Например, оно содержит десятичную часть или записано в экспоненциальном представлении.
-или-
Значение токена JSON представляет число, которое меньше <see cref="F:System.UInt64.MinValue" /> или больше <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary>Возвращает значение, указывающее, какое свойство <c>Value</c> нужно использовать для получения значения токена.</summary>
      <returns>
        <see langword="true" />, следует ли использовать <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> для получения значения токена; <see langword="false" />, если вместо этого следует использовать <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" />.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary>Возвращает режим данного экземпляра <see cref="T:System.Text.Json.Utf8JsonReader" />, который указывает, были ли предоставлены все данные JSON или еще поступят дополнительные данные.</summary>
      <returns>
        <see langword="true" />, если средство чтения было создано с входным диапазоном или последовательностью, содержащими все данные JSON для обработки; <see langword="false" />, если модуль чтения был создан с входным диапазоном или последовательностью, которая может содержать часть данных JSON с дополнительными данными.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary>Возвращает текущий <see cref="T:System.SequencePosition" /> в рамках предоставленных входных данных ReadOnlySequence&lt;byte&gt; в кодировке UTF-8 или значение по умолчанию <see cref="T:System.SequencePosition" />, если структура <see cref="T:System.Text.Json.Utf8JsonReader" /> была создана с использованием ReadOnlySpan&lt;byte&gt;.</summary>
      <returns>Текущая <see cref="T:System.SequencePosition" /> в предоставленном кодировке UTF-8 Реадонлисекуенце&lt;Byte&gt; или <see cref="T:System.SequencePosition" /> по умолчанию, если структура <see cref="T:System.Text.Json.Utf8JsonReader" /> была построена с Реадонлиспан&lt;Byte&gt;.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary>Считывает следующий токен JSON из источника входных данных.</summary>
      <returns>Значение <see langword="true" />, если токен был считан успешно, в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.Text.Json.JsonException">Обнаружен токен JSON, не являющийся допустимым согласно RFC по JSON.
-или-
Текущая глубина превышает рекурсивный предел, заданный максимальной глубиной.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary>Пропускает дочерний узел текущего токена JSON.</summary>
      <exception cref="T:System.InvalidOperationException">Модулю чтения были переданы частичные данные с последующими дополнительными данными (то есть <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> — это <see langword="false" />).</exception>
      <exception cref="T:System.Text.Json.JsonException">При пропуске обнаружен токен JSON, не являющийся допустимым согласно RFC по JSON.
-или-
Текущая глубина превышает рекурсивный предел, заданный максимальной глубиной.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary>Возвращает индекс, с которого начинается последний обработанный токен JSON (в заданном входном тексте UTF-8), пропуская все пробелы.</summary>
      <returns>Начальный индекс последнего обработанного маркера JSON в заданном входном тексте в кодировке UTF-8.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary>Возвращает тип последнего обработанного токена JSON в тексте JSON с кодировкой UTF-8.</summary>
      <returns>Тип последнего обработанного маркера JSON.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary>Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.Byte" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <returns>Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Byte" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary>Пытается выполнить синтаксический анализ текущего значения токена JSON из источника, декодирует строку JSON в кодировке Base64 в виде массива байтов и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value">При возврате из метода содержит декодированное двоичное представление текста в кодировке Base64.</param>
      <returns>
        <see langword="true" />, если все значение токена закодировано как допустимый текст в Base64 и может быть успешно декодировано в байты; в противном случае — <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Токен JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary>Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.DateTime" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <returns>Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.DateTime" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary>Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.DateTimeOffset" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <returns>Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.DateTimeOffset" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary>Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.Decimal" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <returns>Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Decimal" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary>Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.Double" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <returns>Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Double" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary>Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.Guid" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <returns>Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Guid" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary>Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.Int16" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <returns>Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Int16" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary>Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.Int32" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <returns>Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Int32" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary>Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.Int64" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <returns>Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Int64" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary>Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.SByte" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <returns>Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.SByte" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary>Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.Single" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <returns>Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Single" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary>Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.UInt16" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <returns>Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.UInt16" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary>Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.UInt32" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <returns>Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.UInt32" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary>Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.UInt64" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <returns>Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.UInt64" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary>Пытается пропустить дочерние узлы текущего токена JSON.</summary>
      <returns>
        <see langword="true" /> при наличии достаточного количества данных для успешного пропуска дочерних элементов; в противном случае — <see langword="false" />.</returns>
      <exception cref="T:System.Text.Json.JsonException">При пропуске обнаружен токен JSON, не являющийся допустимым согласно RFC по JSON.
-или-
Текущая глубина превышает рекурсивный предел, заданный максимальной глубиной.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary>Получает необработанное значение последнего обработанного токена в виде среза полезных входных данных ReadOnlySequence&lt;байт&gt;, только если токен содержится в нескольких сегментах.</summary>
      <returns>Однобайтовая последовательность только для чтения.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary>Получает необработанное значение последнего обработанного токена в виде среза полезных входных данных ReadOnlySpan&lt;байт&gt;, если токен помещается в один сегмент или если модуль чтения был создан с использованием полезных данных JSON, содержащихся в ReadOnlySpan&lt;байт&gt;.</summary>
      <returns>Массив байтов с доступом только для чтения.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary>Сравнивает текст в кодировке UTF-8 в диапазоне байтов только для чтения с неэкранированным значением токена JSON в источнике и возвращает значение, указывающее, совпадают ли они.</summary>
      <param name="utf8Text">Текст в кодировке UTF-8, с которым производится сравнение.</param>
      <returns>Значение <see langword="true" />, если значение токена JSON в источнике совпадает с текстом поиска в кодировке UTF-8, в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Токен JSON не является строкой JSON (т. е. не <see cref="F:System.Text.Json.JsonTokenType.String" /> или <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary>Сравнивает текст в диапазоне символов только для чтения с неэкранированным значением токена JSON в источнике и возвращает значение, указывающее, совпадают ли они.</summary>
      <param name="text">Текст, с которым выполняется сравнение.</param>
      <returns>Значение <see langword="true" />, если значение токена JSON в источнике совпадает с текстом поиска, в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Токен JSON не является строкой JSON (т. е. не <see cref="F:System.Text.Json.JsonTokenType.String" /> или <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary>Сравнивает текст строки с неэкранированным значением токена JSON в источнике и возвращает значение, указывающее, совпадают ли они.</summary>
      <param name="text">Текст, с которым выполняется сравнение.</param>
      <returns>Значение <see langword="true" />, если значение токена JSON в источнике совпадает с текстом поиска, в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Токен JSON не является строкой JSON (т. е. не <see cref="F:System.Text.Json.JsonTokenType.String" /> или <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary>Предоставляет высокопроизводительный API для однонаправленной некэшированной записи текста JSON в кодировке UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Utf8JsonWriter" />, используя указанный <see cref="T:System.Buffers.IBufferWriter`1" /> для записи в него выходных данных и параметров настройки.</summary>
      <param name="bufferWriter">Назначение для записи текста JSON.</param>
      <param name="options">Определяет настраиваемое поведение объекта <see cref="T:System.Text.Json.Utf8JsonWriter" />. По умолчанию он записывает JSON в свернутом состоянии (то есть без дополнительных пробелов) и проверяет, являются ли записываемые данные JSON структурно допустимыми в соответствии с RFC по JSON.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="bufferWriter" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Utf8JsonWriter" />, используя указанный поток для записи в него выходных данных и параметров настройки.</summary>
      <param name="utf8Json">Назначение для записи текста JSON.</param>
      <param name="options">Определяет настраиваемое поведение объекта <see cref="T:System.Text.Json.Utf8JsonWriter" />. По умолчанию он записывает JSON в свернутом состоянии (то есть без дополнительных пробелов) и проверяет, являются ли записываемые данные JSON структурно допустимыми в соответствии с RFC по JSON.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="utf8Json" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary>Возвращает общее число байтов, зафиксированных в выходных данных к настоящему времени текущим экземпляром.</summary>
      <returns>Общее число байтов, зафиксированных на выходе <see cref="T:System.Text.Json.Utf8JsonWriter" /> до сих пор.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary>Возвращает число байтов, записанных к настоящему времени объектом <see cref="T:System.Text.Json.Utf8JsonWriter" /> и еще не зафиксированных в выходных данных.</summary>
      <returns>Число байтов, записанных на данный момент <see cref="T:System.Text.Json.Utf8JsonWriter" />, которые еще не были сброшены в выходные данные и зафиксированы.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary>Возвращает глубину текущего токена.</summary>
      <returns>Глубина текущего маркера.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary>Фиксирует весь оставшийся текст JSON, который еще не был записан, и освобождает все ресурсы, используемые текущим экземпляром.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary>Асинхронно фиксирует весь оставшийся текст JSON, который еще не был записан, и освобождает все ресурсы, используемые текущим экземпляром.</summary>
      <returns>Задача, представляющая асинхронную операцию удаления.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary>Фиксирует текст JSON, записанный на данный момент, что делает его доступным для места назначения вывода.</summary>
      <exception cref="T:System.ObjectDisposedException">Этот экземпляр удален.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary>Асинхронно фиксирует текст JSON, записанный на данный момент, что делает его доступным для места назначения вывода.</summary>
      <param name="cancellationToken">Токен для отслеживания запросов отмены. Значение по умолчанию — <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Задача, представляющая асинхронную операцию освобождения.</returns>
      <exception cref="T:System.ObjectDisposedException">Этот экземпляр удален.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary>Возвращает пользовательский режим записи JSON с использованием этого экземпляра, который определяет, необходимо ли форматировать выходные данные при записи, следует ли пропускать структурную проверку JSON и какие символы экранировановать.</summary>
      <returns>Пользовательское поведение данного экземпляра модуля записи для форматирования, проверки и экранирования.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary>Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно.</summary>
      <exception cref="T:System.ObjectDisposedException">Этот экземпляр удален.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary>Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно с новым экземпляром <see cref="T:System.Buffers.IBufferWriter`1" />.</summary>
      <param name="bufferWriter">Назначение для записи текста JSON.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="bufferWriter" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Этот экземпляр удален.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary>Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно с новым экземпляром <see cref="T:System.IO.Stream" />.</summary>
      <param name="utf8Json">Назначение для записи текста JSON.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="utf8Json" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Этот экземпляр удален.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Записывает имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя записываемого свойства в кодировке UTF-8.</param>
      <param name="bytes">Двоичные данные для записи в виде текста в кодировке Base64.</param>
      <exception cref="T:System.ArgumentException">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Записывает имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</param>
      <param name="bytes">Двоичные данные для записи в виде текста в кодировке Base64.</param>
      <exception cref="T:System.ArgumentException">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary>Записывает имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</param>
      <param name="bytes">Двоичные данные для записи в виде текста в кодировке Base64.</param>
      <exception cref="T:System.ArgumentException">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary>Записывает заранее закодированное имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя записываемого свойства в кодировке JSON.</param>
      <param name="bytes">Двоичные данные для записи в виде текста в кодировке Base64.</param>
      <exception cref="T:System.ArgumentException">Указанное значение слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary>Записывает необработанные байты (в виде строки JSON в кодировке Base64) в качестве элемента массива JSON.</summary>
      <param name="bytes">Двоичные данные, которые нужно записать в виде строкового элемента JSON массива JSON в кодировке Base64.</param>
      <exception cref="T:System.ArgumentException">Указанное значение слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Boolean" /> (в виде литерала JSON true или false) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value">Значение, которое нужно записать в виде литерала JSON true или false в составе пары "имя-значение".</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Boolean" /> (в виде литерала JSON true или false) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде литерала JSON true или false в составе пары "имя-значение".</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary>Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Boolean" /> (в виде литерала JSON true или false) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде литерала JSON true или false в составе пары "имя-значение".</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary>Записывает заранее закодированное имя свойства и значение <see cref="T:System.Boolean" /> (в виде литерала JSON true или false) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value">Значение, которое нужно записать в виде литерала JSON true или false в составе пары "имя-значение".</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary>Записывает значение <see cref="T:System.Boolean" /> (в виде литерала JSON true или false) в качестве элемента массива JSON.</summary>
      <param name="value">Значение, которое нужно записать в виде литерала JSON true или false в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary>Записывает текстовое значение UTF-8 в виде комментария JSON.</summary>
      <param name="utf8Value">Значение в кодировке UTF-8, записываемое в виде комментария JSON, заключенного в /*..*/.</param>
      <exception cref="T:System.ArgumentException">Указанное значение слишком велико.
-или-
<paramref name="utf8Value" /> содержит разделитель комментария (*/).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary>Записывает текстовое значение UTF-16 в виде комментария JSON.</summary>
      <param name="value">Значение в кодировке UTF-16, записываемое в виде перекодированного в UTF-8 комментария JSON, заключенного в /*..*/.</param>
      <exception cref="T:System.ArgumentException">Указанное значение слишком велико.
-или-
<paramref name="value" /> содержит разделитель комментария (*/).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary>Записывает строковое текстовое значение в виде комментария JSON.</summary>
      <param name="value">Значение в кодировке UTF-16, записываемое в виде перекодированного в UTF-8 комментария JSON, заключенного в /*..*/.</param>
      <exception cref="T:System.ArgumentException">Указанное значение слишком велико.
-или-
<paramref name="value" /> содержит разделитель комментария (*/).</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary>Записывает конец массива JSON.</summary>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary>Записывает конец объекта JSON.</summary>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и литерал JSON null в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и литерал JSON null в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary>Записывает имя свойства, указываемое как строка, и литерал JSON null в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary>Записывает заранее закодированное имя свойства и литерал JSON null в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary>Записывает литерал JSON null в качестве элемента массива JSON.</summary>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary>Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary>Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary>Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary>Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary>Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary>Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary>Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary>Записывает заранее закодированное имя свойства и значение <see cref="T:System.Decimal" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary>Записывает заранее закодированное имя свойства и значение <see cref="T:System.Double" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary>Записывает заранее закодированное имя свойства и значение <see cref="T:System.Int32" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary>Записывает заранее закодированное имя свойства и значение <see cref="T:System.Int64" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary>Записывает заранее закодированное имя свойства и значение <see cref="T:System.Single" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary>Записывает заранее закодированное имя свойства и значение <see cref="T:System.UInt32" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary>Записывает заранее закодированное имя свойства и значение <see cref="T:System.UInt64" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary>Записывает значение <see cref="T:System.Decimal" /> (в виде числа JSON) как элемент массива JSON.</summary>
      <param name="value">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary>Записывает значение <see cref="T:System.Double" /> (в виде числа JSON) как элемент массива JSON.</summary>
      <param name="value">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary>Записывает значение <see cref="T:System.Int32" /> (в виде числа JSON) как элемент массива JSON.</summary>
      <param name="value">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary>Записывает значение <see cref="T:System.Int64" /> (в виде числа JSON) как элемент массива JSON.</summary>
      <param name="value">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary>Записывает значение <see cref="T:System.Single" /> (в виде числа JSON) как элемент массива JSON.</summary>
      <param name="value">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary>Записывает значение <see cref="T:System.UInt32" /> (в виде числа JSON) как элемент массива JSON.</summary>
      <param name="value">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary>Записывает значение <see cref="T:System.UInt64" /> (в виде числа JSON) как элемент массива JSON.</summary>
      <param name="value">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary>Записывает имя свойства в кодировке UTF-8 (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary>Записывает имя свойства (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary>Записывает имя свойства (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary>Записывает заранее закодированное имя свойства (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary>Записывает начало массива JSON.</summary>
      <exception cref="T:System.InvalidOperationException">Глубина JSON превышает максимальную глубину, равную 1000.
-или-
Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary>Записывает начало массива JSON с именем свойства, указанным как доступный только для чтения диапазон байтов, в качестве ключа.</summary>
      <param name="utf8PropertyName">Имя свойства массива JSON, который нужно записать, в кодировке UTF-8.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Глубина JSON превышает максимальную глубину, равную 1000.
-или-
Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary>Записывает начало массива JSON с именем свойства, указанным как доступный только для чтения диапазон символов, в качестве ключа.</summary>
      <param name="propertyName">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Глубина JSON превышает максимальную глубину, равную 1000.
-или-
Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary>Записывает начало массива JSON с именем свойства, указанным как строка, в качестве ключа.</summary>
      <param name="propertyName">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Глубина JSON превышает максимальную глубину, равную 1000.
-или-
Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary>Записывает начало массива JSON с заранее закодированным именем свойства в качестве ключа.</summary>
      <param name="propertyName">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <exception cref="T:System.InvalidOperationException">Глубина JSON превысила максимальную глубину, равную 1000.
-или-
Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary>Записывает начало объекта JSON.</summary>
      <exception cref="T:System.InvalidOperationException">Глубина JSON превышает максимальную глубину, равную 1000.
-или-
Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary>Записывает начало объекта JSON с именем свойства, указанным как доступный только для чтения диапазон байтов, в качестве ключа.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Глубина JSON превышает максимальную глубину, равную 1000.
-или-
Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary>Записывает начало объекта JSON с именем свойства, указанным как доступный только для чтения диапазон символов, в качестве ключа.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Глубина JSON превышает максимальную глубину, равную 1000.
-или-
Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary>Записывает начало объекта JSON с именем свойства, указанным как строка, в качестве ключа.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Глубина JSON превышает максимальную глубину, равную 1000.
-или-
Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary>Записывает начало объекта JSON с заранее закодированным именем свойства в качестве ключа.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <exception cref="T:System.InvalidOperationException">Глубина JSON превысила максимальную глубину, равную 1000.
-или-
Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary>Записывает имя свойства UTF-8 и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary>Записывает имя свойства UTF-8 и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary>Записывает имя свойства UTF-8 и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Записывает имя свойства UTF-8 и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="utf8Value">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary>Записывает имя свойства UTF-8 и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary>Записывает имя свойства UTF-8 и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary>Записывает имя свойства в кодировке UTF-8 и заранее закодированное значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary>Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Записывает имя свойства UTF-16 и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="utf8Value">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Записывает имя свойства UTF-16 и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary>Записывает имя свойства UTF-16 и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary>Записывает имя свойства и заранее закодированное значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</param>
      <param name="value">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary>Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary>Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary>Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary>Записывает имя свойства, указываемое как строка, и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="utf8Value">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary>Записывает имя свойства, указываемое как строка, и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary>Записывает имя свойства, указываемое как строка, и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary>Записывает имя свойства и заранее закодированное значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</param>
      <param name="value">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</param>
      <exception cref="T:System.ArgumentException">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary>Записывает заранее закодированное имя свойства и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary>Записывает заранее закодированное имя свойства и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary>Записывает заранее закодированное имя свойства и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary>Записывает заранее закодированное имя свойства и текстовое значение в UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="utf8Value">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException">Указанное значение слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary>Записывает заранее закодированное имя свойства и текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value">Значение, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</param>
      <exception cref="T:System.ArgumentException">Указанное значение слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary>Записывает заранее закодированное имя свойства и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value">Значение, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</param>
      <exception cref="T:System.ArgumentException">Указанное значение слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary>Записывает заранее закодированные имя свойства и значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary>Записывает значение <see cref="T:System.DateTime" /> (в виде строки JSON) в качестве элемента массива JSON.</summary>
      <param name="value">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary>Записывает значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в качестве элемента массива JSON.</summary>
      <param name="value">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary>Записывает значение <see cref="T:System.Guid" /> (в виде строки JSON) в качестве элемента массива JSON.</summary>
      <param name="value">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary>Записывает текстовое значение UTF-8 (в виде строки JSON) в качестве элемента массива JSON.</summary>
      <param name="utf8Value">Значение, которое нужно записать в виде строкового элемента JSON массива JSON, в кодировке UTF-8.</param>
      <exception cref="T:System.ArgumentException">Указанное значение слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary>Записывает текстовое значение UTF-16 (в виде строки JSON) в качестве элемента массива JSON.</summary>
      <param name="value">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке UTF-16.</param>
      <exception cref="T:System.ArgumentException">Указанное значение слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary>Записывает строковое текстовое значение (в виде строки JSON) в качестве элемента массива JSON.</summary>
      <param name="value">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке UTF-16.</param>
      <exception cref="T:System.ArgumentException">Указанное значение слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary>Записывает заранее закодированное значение (в виде строки JSON) в качестве элемента массива JSON.</summary>
      <param name="value">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке JSON.</param>
      <exception cref="T:System.InvalidOperationException">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
  </members>
</doc>
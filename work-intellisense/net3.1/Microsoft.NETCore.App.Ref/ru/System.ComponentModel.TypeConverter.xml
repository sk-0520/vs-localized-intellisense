<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary>Предоставляет данные для события <see cref="E:System.Windows.Forms.BindingSource.AddingNew" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AddingNewEventArgs" /> без параметров.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AddingNewEventArgs" />, используя заданный объект в качестве нового элемента.</summary>
      <param name="newObject">Объект <see cref="T:System.Object" />, используемый в качестве значения нового элемента.</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary>Получает или задает объект, добавляемый в связанный список.</summary>
      <returns>Объект <see cref="T:System.Object" />, добавляемый в качестве нового элемента в связанную коллекцию.</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary>Представляет метод, обрабатывающий событие <see cref="E:System.Windows.Forms.BindingSource.AddingNew" />.</summary>
      <param name="sender">Источник события, обычно, — контейнер с данными или коллекция, связанная с данными.</param>
      <param name="e">Объект <see cref="T:System.ComponentModel.AddingNewEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary>Указывает значение, которое нужно передать в свойство, чтобы свойство получило свое значение из другого источника. Это называется окружением. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя заданное значение типа Boolean.</summary>
      <param name="value">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя заданное значение 8-разрядного целого числа без знака.</summary>
      <param name="value">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя значение знака Юникод.</summary>
      <param name="value">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя значение с плавающей запятой с двойной точностью.</summary>
      <param name="value">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя заданное значение 16-разрядного целого числа со знаком.</summary>
      <param name="value">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя заданное значение 32-разрядного целого числа со знаком.</summary>
      <param name="value">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя заданное значение 64-разрядного целого числа со знаком.</summary>
      <param name="value">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя в качестве значения заданный объект.</summary>
      <param name="value">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя значение с плавающей запятой обычной точности.</summary>
      <param name="value">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя строку в качестве значения.</summary>
      <param name="value">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя заданные значение и тип.</summary>
      <param name="type">Тип <see cref="T:System.Type" /> параметра <paramref name="value" />.</param>
      <param name="value">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary>Определяет, равен ли указанный объект <see cref="T:System.ComponentModel.AmbientValueAttribute" /> текущему объекту <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</summary>
      <param name="obj">Объект <see cref="T:System.ComponentModel.AmbientValueAttribute" />, с которым сравнивается текущий объект <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</param>
      <returns>Значение <see langword="true" />, если указанный объект <see cref="T:System.ComponentModel.AmbientValueAttribute" /> равен текущему объекту <see cref="T:System.ComponentModel.AmbientValueAttribute" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary>Возвращает объект, который является значением этого атрибута <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</summary>
      <returns>Объект, являющийся значением этого атрибута <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary>Предоставляет преобразователь типов для преобразования объектов <see cref="T:System.Array" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ArrayConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразовывает указанное значение объекта в указанный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Язык и региональные параметры, в которые будет выполнено преобразование <paramref name="value" />.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType">Тип <see cref="T:System.Type" />, к которому следует привести значение.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Возвращает коллекцию свойств для типа массива, заданного параметром.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value">Объект <see cref="T:System.Object" />, задающий тип массива, для которого нужно получить свойства.</param>
      <param name="attributes">Массив типа <see cref="T:System.Attribute" />, который будет использоваться как фильтр.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, предоставляемыми для массива, или <see langword="null" /> в случае отсутствия свойств.</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, поддерживает ли свойства этот объект.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, так как для поиска свойств данного объекта следует вызывать метод <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary>Представляет коллекцию атрибутов.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
      <param name="attributes">Массив элементов типа <see cref="T:System.Attribute" />, предоставляющий атрибуты для этой коллекции.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributes" /> — <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary>Получает коллекцию атрибутов.</summary>
      <returns>Коллекция атрибутов.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary>Определяет, содержит ли коллекция атрибутов указанный атрибут.</summary>
      <param name="attribute">Элемент класса <see cref="T:System.Attribute" />, который нужно найти в коллекции.</param>
      <returns>Значение <see langword="true" />, если коллекция содержит атрибут или является атрибутом по умолчанию для этого типа атрибута; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary>Определяет, содержит ли коллекция атрибутов все указанные атрибуты в массиве атрибутов.</summary>
      <param name="attributes">Массив элементов типа <see cref="T:System.Attribute" />, которые нужно найти в коллекции.</param>
      <returns>Значение <see langword="true" />, если коллекция содержит все атрибуты; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary>Копирует коллекцию в массив, начиная с указанного индекса.</summary>
      <param name="array">Массив <see cref="T:System.Array" />, в который копируется коллекция.</param>
      <param name="index">Начальный индекс.</param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary>Возвращает количество атрибутов.</summary>
      <returns>Количество атрибутов.</returns>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary>Определяет пустую коллекцию, которую можно использовать, не прибегая к созданию новой. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary>Создает новую коллекцию <see cref="T:System.ComponentModel.AttributeCollection" /> из существующей коллекции <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
      <param name="existing">Коллекция <see cref="T:System.ComponentModel.AttributeCollection" />, используемая для создания копии.</param>
      <param name="newAttributes">Массив элементов типа <see cref="T:System.Attribute" />, предоставляющий атрибуты для этой коллекции. Может иметь значение <see langword="null" />.</param>
      <returns>Новая коллекция <see cref="T:System.ComponentModel.AttributeCollection" />, являющаяся копией коллекции <paramref name="existing" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="existing" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary>Возвращает <see cref="T:System.Attribute" /> по умолчанию с заданным типом <see cref="T:System.Type" />.</summary>
      <param name="attributeType">Тип <see cref="T:System.Type" /> извлекаемого атрибута.</param>
      <returns>
        <see cref="T:System.Attribute" /> по умолчанию с заданным типом <paramref name="attributeType" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary>Возвращает перечислитель для этой коллекции.</summary>
      <returns>Перечислитель типа <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary>Возвращает атрибут с указанным номером индекса.</summary>
      <param name="index">Отсчитываемый от нуля индекс элемента <see cref="T:System.ComponentModel.AttributeCollection" />.</param>
      <returns>Объект <see cref="T:System.Attribute" /> с заданным индексом.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary>Возвращает атрибут указанного типа.</summary>
      <param name="attributeType">Тип <see cref="T:System.Type" /> атрибута <see cref="T:System.Attribute" />, извлекаемого из коллекции.</param>
      <returns>Возвращает атрибут <see cref="T:System.Attribute" /> указанного типа, а если такого атрибута не существует, то значение по умолчанию для типа этого атрибута.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary>Определяет, совпадает ли указанный атрибут с атрибутом в коллекции.</summary>
      <param name="attribute">Экземпляр атрибута <see cref="T:System.Attribute" />, сравниваемый с атрибутами в коллекции.</param>
      <returns>Значение <see langword="true" />, если атрибут содержится в коллекции и имеет то же значение, что и атрибут в коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary>Определяет, совпадают ли атрибуты в указанном массиве атрибутов с атрибутами в коллекции.</summary>
      <param name="attributes">Массив атрибутов <see cref="T:System.CodeDom.MemberAttributes" />, сравниваемых с атрибутами в этой коллекции.</param>
      <returns>Значение <see langword="true" />, если все атрибуты, входящие в массив, содержатся в коллекции и их значения совпадают со значениями атрибутов в коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary>Возвращает количество элементов, содержащихся в коллекции.</summary>
      <returns>Количество элементов в коллекции.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Возвращает значение, указывающее на то, синхронизирован ли доступ к коллекции (потокобезопасный).</summary>
      <returns>Значение <see langword="true" />, если доступ к коллекции синхронизирован (потокобезопасен); в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>Возвращает объект, который можно использовать для синхронизации доступа к коллекции.</summary>
      <returns>Объект, который можно использовать для синхронизации доступа к коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает объект <see cref="T:System.Collections.IEnumerator" /> для <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IEnumerator" /> для <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary>Включает перенаправление атрибутов. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AttributeProviderAttribute" />, используя заданное имя типа.</summary>
      <param name="typeName">Имя задаваемого типа.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="typeName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AttributeProviderAttribute" />, используя заданное имя типа и имя свойства.</summary>
      <param name="typeName">Имя задаваемого типа.</param>
      <param name="propertyName">Имя свойства, для которого будут возвращены атрибуты.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AttributeProviderAttribute" />, используя заданный тип.</summary>
      <param name="type">Задаваемый тип.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="type" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary>Возвращает имя свойства, для которого будут возвращены атрибуты.</summary>
      <returns>Имя свойства, для которого будут возвращены атрибуты.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary>Возвращает имя типа, переданное в конструктор, с указанием сборки.</summary>
      <returns>Имя типа с указанием имя сборки для типа, заданного в конструкторе.</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary>Предоставляет преобразователь базовых типов для числовых типов без плавающей запятой.</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Определяет, может ли данный преобразователь преобразовывать объект заданного типа источника в собственный тип преобразователя.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType">Тип <see cref="T:System.Type" />, представляющий конечный тип преобразования.</param>
      <returns>Значение <see langword="true" />, если данный преобразователь может выполнить операцию, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, показывающее, может ли данный преобразователь преобразовать объект с помощью контекста в конечный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="t">
        <see cref="T:System.Type" /> представляет нужный результат конвертирования.</param>
      <returns>Значение <see langword="true" />, если данный преобразователь может выполнить операцию, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует указанный объект в тип, используемый преобразователем.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, определяющий язык и региональные параметры для представления числа.</param>
      <param name="value">Преобразуемый объект.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.Exception">Значение <paramref name="value" /> не является допустимым значением для конечного типа.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует указанный объект в другой тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, определяющий язык и региональные параметры для представления числа.</param>
      <param name="value">Преобразуемый объект.</param>
      <param name="destinationType">Тип, в который требуется преобразовать объект.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> — <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary>Определяет, используется ли обычно член для привязки данных. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.BindableAttribute" />, используя значение типа Boolean.</summary>
      <param name="bindable">Значение <see langword="true" />, чтобы использовать свойство для связывания; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="bindable">Значение <see langword="true" />, чтобы использовать свойство для связывания; в противном случае — значение <see langword="false" />.</param>
      <param name="direction">Одно из значений перечисления <see cref="T:System.ComponentModel.BindingDirection" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.BindableAttribute" /> с использованием одного из стандартных значений <see cref="T:System.ComponentModel.BindableSupport" />.</summary>
      <param name="flags">Одно из значений <see cref="T:System.ComponentModel.BindableSupport" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="flags">Одно из значений перечисления <see cref="T:System.ComponentModel.BindableSupport" />.</param>
      <param name="direction">Одно из значений перечисления <see cref="T:System.ComponentModel.BindingDirection" />.</param>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary>Возвращает значение, указывающее, что свойство обычно используется для привязки данных.</summary>
      <returns>Значение <see langword="true" />, если свойство обычно используется для привязки данных, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary>Задает значение по умолчанию для атрибута <see cref="T:System.ComponentModel.BindableAttribute" />, равное <see cref="F:System.ComponentModel.BindableAttribute.No" />. Это поле доступно только для чтения.</summary>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary>Возвращает значение, показывающее направление или направления этого связывания данных со свойством.</summary>
      <returns>Направление привязки данных этого свойства.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary>Определяет равенство двух объектов <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="obj">Объект для сравнения.</param>
      <returns>Значение <see langword="true" />, если заданный <see cref="T:System.ComponentModel.BindableAttribute" /> равен текущему атрибуту <see cref="T:System.ComponentModel.BindableAttribute" />; значение <see langword="false" />, если эти атрибуты не равны.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary>Служит хэш-функцией для класса <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.ComponentModel.BindableAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary>Определяет, является ли этот атрибут используемым по умолчанию.</summary>
      <returns>Значение <see langword="true" />, если атрибут является значением по умолчанию для данного класса атрибутов; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary>Указывает, что свойство не предназначено для привязки данных. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary>Указывает, что это свойство обычно используется для привязки данных. Это поле доступно только для чтения.</summary>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary>Задает значения, указывающие, может ли свойство быть связано с элементом данных или другим свойством.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary>Свойство установлено равным значению по умолчанию.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary>Это свойство не может быть связано во время разработки.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary>Это свойство может быть связано во время разработки.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary>Определяет, можно ли привязать этот шаблон односторонним или двусторонним образом.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary>Шаблон может только принимать значения свойств. Используется с общим шаблоном <see cref="T:System.Web.UI.ITemplate" />.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary>Шаблон может принимать и предоставлять значения свойств. Используется с шаблоном <see cref="T:System.Web.UI.IBindableTemplate" />.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary>Обеспечивает универсальную коллекцию, поддерживающую привязку данных.</summary>
      <typeparam name="T">Тип элементов в списке.</typeparam>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.BindingList`1" />, используя значения по умолчанию.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.BindingList`1" />, используя заданный список.</summary>
      <param name="list">Список <see cref="T:System.Collections.Generic.IList`1" /> элементов, включаемых в список <see cref="T:System.ComponentModel.BindingList`1" />.</param>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary>Происходит перед добавлением элемента список.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary>Добавляет новый элемент в коллекцию.</summary>
      <returns>Элемент, который нужно добавить в список.</returns>
      <exception cref="T:System.InvalidOperationException">Свойству <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> задано значение <see langword="false" />.

или -
Для текущего типа элемента не удалось найти открытый конструктор без параметров.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary>Добавляет новый элемент в конец коллекции.</summary>
      <returns>Элемент, добавленный в коллекцию.</returns>
      <exception cref="T:System.InvalidCastException">Тип нового элемента не совпадает с типом объектов, содержащихся в списке <see cref="T:System.ComponentModel.BindingList`1" />.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary>Получает или задает значение, показывающее, можно ли редактировать элементы в списке.</summary>
      <returns>Значение <see langword="true" />, если элементы списка можно редактировать; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary>Получает или задает значение, показывающее, можно ли добавлять элементы в список с помощью метода <see cref="M:System.ComponentModel.BindingList`1.AddNew" />.</summary>
      <returns>Значение <see langword="true" />, если можно добавить элементы в список с помощью метода <see cref="M:System.ComponentModel.BindingList`1.AddNew" />; в противном случае — значение <see langword="false" />. Значение по умолчанию зависит от базового типа, содержащегося в списке.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary>Получает или задает значение, показывающее, можно ли удалять элементы из коллекции.</summary>
      <returns>Значение <see langword="true" />, если можно удалить элементы из списка с помощью метода <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" />; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>При переопределении в производном классе сортирует элементы; в противном случае вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="prop">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, определяющий свойство для сортировки.</param>
      <param name="direction">Одно из значений перечисления <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
      <exception cref="T:System.NotSupportedException">Метод не переопределяется в производном классе.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary>Уничтожает ожидающий новый элемент.</summary>
      <param name="itemIndex">Индекс добавляемого нового элемента</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary>Удаляет из коллекции все элементы.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary>Фиксирует незафиксированный новый элемент в коллекции.</summary>
      <param name="itemIndex">Индекс добавляемого нового элемента.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Выполняет поиск индекса элемента, у которого заданный дескриптор свойств равен заданному значению, если поиск реализуется в производном классе; в противном случае — исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="prop">Объект <see cref="T:System.ComponentModel.PropertyDescriptor" />, который требуется найти.</param>
      <param name="key">Значение параметр <paramref name="prop" /> для поиска соответствия.</param>
      <returns>Отсчитываемый от нуля индекс элемента, соответствующего дескриптору свойств и содержащему заданное значение.</returns>
      <exception cref="T:System.NotSupportedException">Метод <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" /> не переопределяется в производном классе.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary>Вставляет заданный элемент в список по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить элемент.</param>
      <param name="item">Элемент, который требуется вставить в список.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary>Возвращает значение, показывающее, сортируется ли список.</summary>
      <returns>Значение <see langword="true" />, если список сортируется; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary>Происходит при изменениях в списке или при изменении элемента списка.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>Вызывает событие <see cref="E:System.ComponentModel.BindingList`1.AddingNew" />.</summary>
      <param name="e">Объект класса <see cref="T:System.ComponentModel.AddingNewEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>Вызывает событие <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <param name="e">Объект <see cref="T:System.ComponentModel.ListChangedEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary>Получает или задает значение, показывающее, вызывает ли добавление или удаление элемента списка события <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <returns>Значение <see langword="true" />, если добавление или удаление элемента списка вызывает события <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary>Удаляет элемент с указанным индексом.</summary>
      <param name="index">Отсчитываемый от нуля индекс удаляемого элемента.</param>
      <exception cref="T:System.NotSupportedException">Только что добавленный элемент удаляется и свойство <see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> устанавливается равным <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary>Удаляет любую сортировку, применяемую с помощью метода <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />, если сортировка реализована в производном классе; в противном случае вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Метод не переопределяется в производном классе.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary>Вызывает событие <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> типа <see cref="F:System.ComponentModel.ListChangedType.Reset" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary>Вызывает событие <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> типа <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> для элемента в заданной позиции.</summary>
      <param name="position">Отсчитываемый с нуля индекс сбрасываемого элемента.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary>Заменяет элемент по заданному индексу указанным элементом.</summary>
      <param name="index">Отсчитываемый с нуля индекс заменяемого элемента.</param>
      <param name="item">Новое значение для элемента с указанным индексом. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше нуля.

или -
Значение <paramref name="index" /> больше значения <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary>Возвращает направление сортировки списка.</summary>
      <returns>Одно из значений <see cref="T:System.ComponentModel.ListSortDirection" />. Значение по умолчанию — <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary>Возвращает дескриптор свойства, используемый для сортировки списка, если сортировка реализуется в производном классе; в противном случае возвращает <see langword="null" />.</summary>
      <returns>Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, используемая для сортировки списка.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary>Возвращает значение, показывающее, включены ли события <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <returns>Значение <see langword="true" />, если события <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> поддерживаются, в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary>Возвращает значение, показывающее, поддерживается ли этим списком поиск.</summary>
      <returns>Значение <see langword="true" />, если список поддерживает поиск; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary>Возвращает значение, показывающее, поддерживается ли этим списком сортировка.</summary>
      <returns>Значение <see langword="true" />, если список поддерживает сортировку; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Описание этого члена см. в разделе <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, добавляемый как условие поиска.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary>Добавляет новый элемент в список. Для получения дополнительной информации см. <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
      <returns>Элемент, который нужно добавить в список.</returns>
      <exception cref="T:System.NotSupportedException">Этот метод не поддерживается.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary>Возвращает значение, показывающее, можно ли редактировать элементы в списке.</summary>
      <returns>Значение <see langword="true" />, если элементы списка можно редактировать; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary>Возвращает значение, показывающее, можно ли добавить новые элементы в список с помощью метода <see cref="M:System.ComponentModel.BindingList`1.AddNew" />.</summary>
      <returns>Значение <see langword="true" />, если можно добавить элементы в список с помощью метода <see cref="M:System.ComponentModel.BindingList`1.AddNew" />; в противном случае — значение <see langword="false" />. Значение по умолчанию зависит от базового типа, содержащегося в списке.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary>Возвращает значение, показывающее, можно ли удалять элементы из списка.</summary>
      <returns>Значение <see langword="true" />, если можно удалить элементы из списка с помощью метода <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" />; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Сортирует список, используя дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> и направление <see cref="T:System.ComponentModel.ListSortDirection" />. Полное описание этого члена см. в разделе, посвященном методу <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
      <param name="prop">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> для сортировки.</param>
      <param name="direction">Одно из значений перечисления <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Описание этого члена см. в разделе <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />.</summary>
      <param name="prop">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> для поиска.</param>
      <param name="key">Значение параметра <paramref name="prop" />, используемое для поиска.</param>
      <returns>Индекс строки с данным дескриптором <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary>Описание этого члена см. в разделе <see cref="P:System.ComponentModel.IBindingList.IsSorted" />.</summary>
      <returns>Значение <see langword="true" />, если был вызван метод <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" />, а метод <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> не вызывался; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Описание этого члена см. в разделе <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, удаляемый из индексов, используемых для поиска.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary>Описание этого элемента см. в разделе <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />.</summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary>Описание этого члена см. в разделе <see cref="P:System.ComponentModel.IBindingList.SortDirection" />.</summary>
      <returns>Одно из значений перечисления <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary>Описание этого члена см. в разделе <see cref="P:System.ComponentModel.IBindingList.SortProperty" />.</summary>
      <returns>Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, используемый для сортировки.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>Описание этого члена см. в разделе <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />.</summary>
      <returns>Значение <see langword="true" />, если при изменениях в списке или при изменении элемента списка вызывается событие <see cref="E:System.ComponentModel.IBindingList.ListChanged" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>Описание этого члена см. в разделе <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />.</summary>
      <returns>Значение <see langword="true" />, если список поддерживает поиск с использованием метода <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>Описание этого члена см. в разделе <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />.</summary>
      <returns>Значение <see langword="true" />, если список поддерживает сортировку; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary>Возвращает значение, показывающее, приводят ли изменения значения свойства элемента к появлению событий <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> типа <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" />. Этот метод не может быть переопределен в производном классе.</summary>
      <returns>
        <see langword="true" />значение, если тип списка <see cref="T:System.ComponentModel.INotifyPropertyChanged" />реализует; в противном случае —. <see langword="false" /> Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary>Предоставляет преобразователь типов для преобразования объектов <see cref="T:System.Boolean" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.BooleanConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в объект типа Boolean, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType">Тип <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns>
        <see langword="true" />, если этот объект может выполнить преобразование; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует данный объект значения в объект Boolean.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, определяющий язык и региональные параметры для преобразования.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
      <exception cref="T:System.FormatException">Значение <paramref name="value" /> не является допустимым значением для конечного типа.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает коллекцию стандартных значений для типа данных Boolean.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, содержащая стандартный набор допустимых значений.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, является ли список стандартных значений, возвращенных методом <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />, исчерпывающим.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, так как коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, возвращенная методом <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />, является исчерпывающим списком возможных значений. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Получает значение, показывающее, поддерживает ли этот объект стандартный набор значений, которые можно выбрать из списка.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, так как для поиска общего набора значений, поддерживаемых объектом, можно вызвать метод <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary>Предоставляет преобразователь типов для преобразования 8-разрядных целочисленных объектов без знака в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ByteConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary>Представляет метод обработки события, которое может быть отменено.</summary>
      <param name="sender">Источник события.</param>
      <param name="e">Объект <see cref="T:System.ComponentModel.CancelEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary>Предоставляет преобразователь типов для преобразования символьных объектов Юникода в другие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.CharConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в символьный объект Юникод, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType">Объект <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует данный объект в символьный объект Юникод.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Язык и региональные параметры, в которые будет выполнено преобразование <paramref name="value" />.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
      <exception cref="T:System.FormatException">Значение <paramref name="value" /> не является допустимым значением для конечного типа.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразовывает объект с заданным значением в символьный объект Юникод, используя аргументы.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Язык и региональные параметры, в которые будет выполнено преобразование <paramref name="value" />.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType">Тип <see cref="T:System.Type" />, к которому следует привести значение.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary>Определяет, как изменяется коллекция.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary>Указывает, что в коллекцию был добавлен элемент.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary>Указывает, что была изменена вся коллекция. Такие изменения совершаются методами, работающими сразу со всей коллекцией, например, <see cref="M:System.Collections.CollectionBase.Clear" />.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary>Указывает, что из коллекции был удален элемент.</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary>Предоставляет данные для события <see cref="E:System.Data.DataColumnCollection.CollectionChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />.</summary>
      <param name="action">Одно из значений <see cref="T:System.ComponentModel.CollectionChangeAction" />, показывающее, каким образом была изменена коллекция.</param>
      <param name="element">Объект типа <see cref="T:System.Object" />, показывающий экземпляр коллекции, в котором произошло изменение.</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary>Возвращает действие, определяющее, каким образом была изменена коллекция.</summary>
      <returns>Одно из значений перечисления <see cref="T:System.ComponentModel.CollectionChangeAction" />.</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary>Возвращает экземпляр коллекции, в котором произошло изменение.</summary>
      <returns>Объект типа <see cref="T:System.Object" />, представляющий экземпляр коллекции, в котором произошло изменение; <see langword="null" />, если коллекция была полностью обновлено.</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary>Представляет метод, обрабатывающий событие <see cref="E:System.Data.DataColumnCollection.CollectionChanged" />, возникающее при добавлении или удалении элементов из коллекции.</summary>
      <param name="sender">Источник события.</param>
      <param name="e">Объект <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary>Предоставляет преобразователь типов для преобразования объектов коллекций в различные другие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.CollectionConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразовывает указанное значение объекта в указанный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Язык и региональные параметры, к которым будет преобразован параметр <paramref name="value" />.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />. Этот параметр должен наследоваться из <see cref="T:System.Collections.ICollection" />.</param>
      <param name="destinationType">Тип <see cref="T:System.Type" />, к которому следует привести значение.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> — <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Возвращает коллекцию свойств для типа массива, заданного параметром value, используя заданные контекст и атрибуты.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value">Объект <see cref="T:System.Object" />, задающий тип массива, для которого нужно получить свойства.</param>
      <param name="attributes">Массив типа <see cref="T:System.Attribute" />, который будет использоваться как фильтр.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, доступными для этого типа данных, или <see langword="null" />, если свойства отсутствуют. Этот метод всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, поддерживает ли свойства этот объект.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="false" />, так как метод <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> не следует вызывать для поиска свойств данного объекта. Этот метод никогда не возвращает значение <see langword="true" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary>Задает источник данных и свойства элемента данных для компонента, поддерживающего сложную привязку данных. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> без параметров.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />, используя указанный источник данных.</summary>
      <param name="dataSource">Имя свойства, используемого в качестве источника данных.</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />, используя указанный источник данных и элемент данных.</summary>
      <param name="dataSource">Имя свойства, используемого в качестве источника данных.</param>
      <param name="dataMember">Имя свойства, используемого в качестве источника данных.</param>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary>Возвращает имя свойства элемента данных для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
      <returns>Имя свойства элемента данных для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary>Возвращает имя свойства источника данных для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
      <returns>Имя свойства источника данных для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary>Представляет значение по умолчанию для класса <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary>Определяет, равен ли указанный объект <see cref="T:System.Object" /> текущему экземпляру <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
      <param name="obj">Объект <see cref="T:System.Object" /> для сравнения с текущим экземпляром <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</param>
      <returns>Значение <see langword="true" />, если объект равен текущему экземпляру; в противном случае — значение <see langword="false" />, сообщающее о неравенстве.</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary>Предоставляет преобразователь типов для преобразования объектов между различными представлениями.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ComponentConverter" />.</summary>
      <param name="type">Тип <see cref="T:System.Type" />, представляющий тип для связи с преобразователем компонента.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Возвращает коллекцию свойств для типа компонента, заданного параметром значения.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value">Объект <see cref="T:System.Object" />, задающий тип компонента, для которого нужно получить свойства.</param>
      <param name="attributes">Массив типа <see cref="T:System.Attribute" />, который будет использоваться как фильтр.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, предоставляемыми для компонента, или <see langword="null" /> в случае отсутствия свойств.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, поддерживает ли свойства этот объект, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, так как для поиска свойств данного объекта следует вызывать метод <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary>Предоставляет базовый класс для редактора настраиваемых компонентов.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ComponentEditor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Редактирует компонент и возвращает значение, по которому можно определить, был ли изменен данный компонент на основе заданного контекста.</summary>
      <param name="context">Необязательный объект контекста, с помощью которого можно получить дополнительные сведения о редактировании.</param>
      <param name="component">Редактируемый компонент.</param>
      <returns>Значение <see langword="true" />, если компонент был изменен, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary>Редактирует компонент и возвращает значение, по которому можно определить, был ли изменен данный компонент.</summary>
      <param name="component">Редактируемый компонент.</param>
      <returns>Значение <see langword="true" />, если компонент был изменен, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary>Обеспечивает простые функциональные возможности для перечисления ресурсов компонента или объекта. Класс <see cref="T:System.ComponentModel.ComponentResourceManager" /> является классом <see cref="T:System.Resources.ResourceManager" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ComponentResourceManager" /> со значениями по умолчанию.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary>Создает <see cref="T:System.ComponentModel.ComponentResourceManager" />, который ищет ресурсы в сопутствующих сборках, используя сведения из указанного типа <see cref="T:System.Type" />.</summary>
      <param name="t">Тип <see cref="T:System.Type" />, из которого экземпляр класса <see cref="T:System.ComponentModel.ComponentResourceManager" /> получает все сведения, необходимые для поиска файлов ресурсов.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary>Применяет значение ресурса к соответствующему свойству объекта.</summary>
      <param name="value">Объект <see cref="T:System.Object" />, содержащий применяемое значение свойства.</param>
      <param name="objectName">Строка <see cref="T:System.String" />, содержащая имя объекта, который нужно найти в ресурсах.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="value" /> или <paramref name="objectName" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>Применяет значение ресурса к соответствующему свойству объекта.</summary>
      <param name="value">Объект <see cref="T:System.Object" />, содержащий применяемое значение свойства.</param>
      <param name="objectName">Строка <see cref="T:System.String" />, содержащая имя объекта, который нужно найти в ресурсах.</param>
      <param name="culture">Язык и региональные параметры, к которым применяются ресурсы.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="value" /> или <paramref name="objectName" /> — <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary>Инкапсулирует ноль или более компонентов.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Container" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary>Добавляет заданный объект <see cref="T:System.ComponentModel.Component" /> в <see cref="T:System.ComponentModel.Container" />. Компонент добавляется без имени.</summary>
      <param name="component">Добавляемый компонент.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="component" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary>Добавляет указанный <see cref="T:System.ComponentModel.Component" /> в <see cref="T:System.ComponentModel.Container" /> и присваивает ему имя.</summary>
      <param name="component">Добавляемый компонент.</param>
      <param name="name">Назначаемое компоненту уникальное имя, в котором не учитывается регистр.

или -
<see langword="null" />, при котором компонент остается безымянным.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="name" /> не является уникальным.</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary>Получает все компоненты в контейнере <see cref="T:System.ComponentModel.Container" />.</summary>
      <returns>Коллекция компонентов, инкапсулированных в объект <see cref="T:System.ComponentModel.Container" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>Создает узел <see cref="T:System.ComponentModel.ISite" /> для указанного компонента <see cref="T:System.ComponentModel.IComponent" /> и присваивает узлу заданное имя.</summary>
      <param name="component">Компонент <see cref="T:System.ComponentModel.IComponent" />, для которого создается узел.</param>
      <param name="name">Имя, которое нужно присвоить параметру <paramref name="component" />, или <see langword="null" />, чтобы опустить назначение имени.</param>
      <returns>Вновь созданный узел.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary>Освобождает все ресурсы, занятые модулем <see cref="T:System.ComponentModel.Container" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые журналом <see cref="T:System.ComponentModel.Container" />, и при необходимости освобождает также управляемые ресурсы.</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить управляемые и неуправляемые ресурсы; значение <see langword="false" /> позволяет освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary>Освобождает неуправляемые ресурсы и выполняет другие операции очистки, перед тем как объект <see cref="T:System.ComponentModel.Container" /> будет удален при сборке мусора.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary>Возвращает объект службы указанного типа, если он доступен.</summary>
      <param name="service">
        <see cref="T:System.Type" /> искомой службы.</param>
      <returns>Объект <see cref="T:System.Object" />, реализующий запрошенную службу, или значение <see langword="null" />, если служба не может быть реализована.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary>Удаляет компонент из контейнера <see cref="T:System.ComponentModel.Container" />.</summary>
      <param name="component">Удаляемый компонент.</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary>Удаляет компонент из контейнера <see cref="T:System.ComponentModel.Container" />, не устанавливая для узла <see cref="P:System.ComponentModel.IComponent.Site" /> значение <see langword="null" />.</summary>
      <param name="component">Удаляемый компонент.</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary>Определяет, является ли имя компонента уникальным для этого контейнера.</summary>
      <param name="component">Компонент с именем.</param>
      <param name="name">Проверяемое имя компонента.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="name" /> не является уникальным.</exception>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary>Предоставляет базовый класс для службы фильтра контейнера.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ContainerFilterService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary>Выполняет фильтрацию коллекции компонентов.</summary>
      <param name="components">Фильтруемая коллекция компонентов.</param>
      <returns>Объект <see cref="T:System.ComponentModel.ComponentCollection" />, представляющий измененную коллекцию.</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary>Предоставляет преобразователь типов для преобразования объектов <see cref="T:System.Globalization.CultureInfo" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.CultureInfoConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в <see cref="T:System.Globalization.CultureInfo" />, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType">Тип <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Получает значение, показывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType">Объект <see cref="T:System.Type" />, представляющий тип, в который необходимо выполнить преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует указанный объект-значение в <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, определяющий язык и региональные параметры для преобразования.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.ArgumentException">В параметре <paramref name="value" /> указаны неправильные язык и региональные параметры.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразовывает указанное значение объекта в указанный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, определяющий язык и региональные параметры для преобразования.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType">Тип <see cref="T:System.Type" />, к которому следует привести значение.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary>Извлекает имя заданного языка и региональных параметров.</summary>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, определяющий язык и региональные параметры, для которых необходимо получить имя.</param>
      <returns>Имя заданного языка и региональных параметров.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает коллекцию стандартных значений для объекта <see cref="T:System.Globalization.CultureInfo" />, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, содержащая стандартный набор допустимых значений, или <see langword="null" />, если этот тип данных не поддерживает стандартный набор значений.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, является ли список стандартных значений, возвращенных из <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />, исчерпывающим.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="false" />, так как коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, возвращенная методом <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />, не является исчерпывающим списком возможных значений, (то есть возможны другие значения). Этот метод никогда не возвращает значение <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, поддерживает ли этот объект стандартный набор значений, которые можно выбрать из списка, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, поскольку для поиска набора значений, поддерживаемых объектом, необходимо вызвать метод <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary>Предоставляет простую реализацию по умолчанию для интерфейса <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.CustomTypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.CustomTypeDescriptor" />, используя дескриптор родительского настраиваемого типа.</summary>
      <param name="parent">Дескриптор родительского настраиваемого типа.</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary>Возвращает коллекцию настраиваемых атрибутов для типа, представленного этим дескриптором типа.</summary>
      <returns>Коллекция <see cref="T:System.ComponentModel.AttributeCollection" />, содержащая атрибуты для этого типа. Значение по умолчанию — <see cref="F:System.ComponentModel.AttributeCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary>Возвращает полное имя класса, представленного этим дескриптором типа.</summary>
      <returns>Свойство <see cref="T:System.String" />, содержащее полное имя класса типа, описываемого этим дескриптором типа. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary>Возвращает имя класса, представленное этим дескриптором типа.</summary>
      <returns>Строка <see cref="T:System.String" />, содержащая имя экземпляра компонента, описываемого этим дескриптором типа. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary>Возвращает преобразователь типов для типа, представленного этим дескриптором типа.</summary>
      <returns>Преобразователь <see cref="T:System.ComponentModel.TypeConverter" /> для типа, представленного этим дескриптором типа. Значением по умолчанию является только что созданный преобразователь <see cref="T:System.ComponentModel.TypeConverter" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary>Возвращает дескриптор события по умолчанию для объекта, представленного этим дескриптором типа.</summary>
      <returns>Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> события по умолчанию для объекта, представленного этим дескриптором типа. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary>Возвращает дескриптор свойства по умолчанию для объекта, представленного этим дескриптором типа.</summary>
      <returns>Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> свойства по умолчанию для объекта, представленного этим дескриптором типа. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary>Возвращает редактор для заданного типа, который должен быть связан с классом, представленным этим дескриптором типа.</summary>
      <param name="editorBaseType">Базовый тип возвращаемого редактора.</param>
      <returns>Редактор для данного типа, который должен быть связан с классом, представленным этим дескриптором типа. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary>Возвращает коллекцию дескрипторов событий по умолчанию для объекта, представленного этим дескриптором типа.</summary>
      <returns>Коллекция <see cref="T:System.ComponentModel.EventDescriptorCollection" />, содержащая дескрипторы событий для объекта, представленного этим дескриптором типа. Значение по умолчанию — <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>Возвращает фильтрованную коллекцию дескрипторов событий по умолчанию для объекта, представленного этим дескриптором типа.</summary>
      <param name="attributes">Массив атрибутов, используемый в качестве фильтра. Это может быть <see langword="null" />.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.EventDescriptorCollection" />, содержащая описания событий для объекта, представленного этим дескриптором типа. Значение по умолчанию — <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary>Возвращает коллекцию дескрипторов свойств для объекта, представленного этим дескриптором типа.</summary>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая описания свойств для объекта, представленного этим дескриптором типа. Значение по умолчанию — <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>Возвращает фильтрованную коллекцию дескрипторов свойств для объекта, представленного этим дескриптором типа.</summary>
      <param name="attributes">Массив атрибутов, используемый в качестве фильтра. Это может быть <see langword="null" />.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая описания свойств для объекта, представленного этим дескриптором типа. Значение по умолчанию — <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Возвращает объект, содержащий свойство, описанное указанным дескриптором свойства.</summary>
      <param name="pd">Дескриптор свойства, для которого возвращается объект-владелец.</param>
      <returns>Объект <see cref="T:System.Object" />, являющийся владельцем данного свойства, заданного дескриптором типа. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary>Определяет тип объекта, подходящий для связывания с объектом <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DataObjectAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DataObjectAttribute" /> и показывает, подходит ли объект для связывания с объектом <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</summary>
      <param name="isDataObject">Значение <see langword="true" />, если объект подходит для связывания с объектом <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary>Показывает, что этот класс подходит для связывания с объектом <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> во время разработки. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary>Представляет значение по умолчанию класса <see cref="T:System.ComponentModel.DataObjectAttribute" />, показывающее, что класс подходит для связывания с объектом <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> во время разработки. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary>Определяет, соответствует ли этот экземпляр атрибута <see cref="T:System.ComponentModel.DataObjectAttribute" /> шаблону другого объекта.</summary>
      <param name="obj">Объект, сравниваемый с этим экземпляром атрибута <see cref="T:System.ComponentModel.DataObjectAttribute" />.</param>
      <returns>Значение <see langword="true" />, если этот экземпляр совпадает с экземпляром, заданным параметром <paramref name="obj" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary>Возвращает значение, показывающее, следует ли считать объект подходящим для связывания с объектом <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> во время разработки.</summary>
      <returns>Значение <see langword="true" />, если объект должен считаться подходящим для связывания с объектом <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary>Возвращает значение, показывающее, является ли текущее значение атрибута его значением по умолчанию.</summary>
      <returns>Значение <see langword="true" />, если текущим значением атрибута является значение по умолчанию; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary>Показывает, что этот класс не подходит для связывания с объектом <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> во время разработки. Это поле доступно только для чтения.</summary>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary>Предоставляет метаданные для свойства, представляющего поле данных. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> и показывает, является ли поле первичным ключом для строки данных.</summary>
      <param name="primaryKey">Значение <see langword="true" />, показывающее, что это поле является первичным ключом строки данных; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> и показывает, является ли поле первичным ключом для строки данных и является ли это поле полем удостоверения базы данных.</summary>
      <param name="primaryKey">Значение <see langword="true" />, показывающее, что это поле является первичным ключом строки данных; в противном случае — значение <see langword="false" />.</param>
      <param name="isIdentity">Значение <see langword="true" />, показывающее, что это поле является полем удостоверения данных, уникальным образом идентифицирующим строку данных; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> и показывает, является ли поле первичным ключом для строки данных, является ли оно полем удостоверения данных, и может ли оно принимать значение "null".</summary>
      <param name="primaryKey">Значение <see langword="true" />, показывающее, что это поле является первичным ключом строки данных; в противном случае — значение <see langword="false" />.</param>
      <param name="isIdentity">Значение <see langword="true" />, показывающее, что это поле является полем удостоверения данных, уникальным образом идентифицирующим строку данных; в противном случае — значение <see langword="false" />.</param>
      <param name="isNullable">Значение <see langword="true" />, показывающее, что это поле в хранилище данных может принимать значение "null"; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> и показывает, является ли поле первичным ключом для строки данных, является ли оно полем удостоверения данных, и может ли оно принимать значение "null", и задает длину поля.</summary>
      <param name="primaryKey">Значение <see langword="true" />, показывающее, что это поле является первичным ключом строки данных; в противном случае — значение <see langword="false" />.</param>
      <param name="isIdentity">Значение <see langword="true" />, показывающее, что это поле является полем удостоверения данных, уникальным образом идентифицирующим строку данных; в противном случае — значение <see langword="false" />.</param>
      <param name="isNullable">Значение <see langword="true" />, показывающее, что это поле в хранилище данных может принимать значение "null"; в противном случае — значение <see langword="false" />.</param>
      <param name="length">Длина поля в байтах.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary>Возвращает значение, показывающее, равен ли данный экземпляр заданному объекту.</summary>
      <param name="obj">Объект, сравниваемый с этим экземпляром атрибута <see cref="T:System.ComponentModel.DataObjectFieldAttribute" />.</param>
      <returns>Значение <see langword="true" />, если этот экземпляр совпадает с экземпляром, заданным параметром <paramref name="obj" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary>Возвращает значение, показывающее, представляет ли свойство поле удостоверения в базовых данных.</summary>
      <returns>Значение <see langword="true" />, если свойство представляет поле удостоверения в базовых данных; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary>Возвращает значение, показывающее, представляет ли свойство поле, которое может принимать значение "null" в базовом хранилище данных.</summary>
      <returns>Значение <see langword="true" />, если свойство представляет поле, которое может принимать значение "null" в базовом хранилище данных; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary>Возвращает длину свойства в байтах.</summary>
      <returns>Длина свойства в байтах, или -1, если это значение не задано.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary>Возвращает значение, показывающее, входит ли свойство в первичный ключ базовых данных.</summary>
      <returns>Значение <see langword="true" />, если свойство является первичным ключом хранилища данных; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary>Определяет метод работы с данными, предоставляемый типом, тип операций, выполняемых методом, и то, является ли этот метод методом работы с данным по умолчанию. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> и определяет тип операций с данными, выполняемых методом.</summary>
      <param name="methodType">Одно из значений <see cref="T:System.ComponentModel.DataObjectMethodType" />, описывающих операцию с данными, выполняемую методом.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />, определяет тип операции с данными, выполняемой методом, и определяет является ли этот метод методом работы с данными по умолчанию, предоставляемым объектом данных.</summary>
      <param name="methodType">Одно из значений <see cref="T:System.ComponentModel.DataObjectMethodType" />, описывающих операцию с данными, выполняемую методом.</param>
      <param name="isDefault">Значение <see langword="true" />, показывающее, что метод, к которому применен атрибут, является методом объекта данных по умолчанию для заданного параметра <paramref name="methodType" />; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary>Возвращает значение, показывающее, равен ли данный экземпляр заданному объекту.</summary>
      <param name="obj">Объект, сравниваемый с этим экземпляром атрибута <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</param>
      <returns>Значение <see langword="true" />, если этот экземпляр совпадает с экземпляром, заданным параметром <paramref name="obj" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary>Возвращает значение, показывающее, является ли метод, к которому применяется атрибут <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />, методом по умолчанию для работы с данными, предоставленным объектом данных для конкретного типа метода.</summary>
      <returns>Значение <see langword="true" />, если метод является методом по умолчанию, предоставленным объектом для типа метода; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary>Возвращает значение, показывающее, использует ли этот экземпляр общую модель с заданным атрибутом.</summary>
      <param name="obj">Объект, сравниваемый с этим экземпляром атрибута <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</param>
      <returns>Значение <see langword="true" />, если этот экземпляр совпадает с экземпляром, заданным параметром <paramref name="obj" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary>Возвращает значение <see cref="T:System.ComponentModel.DataObjectMethodType" />, показывающее тип операции с данными, выполняемой методом.</summary>
      <returns>Одно из значений <see cref="T:System.ComponentModel.DataObjectMethodType" />, определяющих тип операции с данными, выполняемой методом, к которому применен атрибут <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary>Определяет тип операции с данными, выполняемой методом, в соответствии с атрибутом <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />, примененным к методу.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary>Показывает, что метод используется для операции с данными, удаляющей данные.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary>Показывает, что метод используется для операции с данными, заполняющей объект <see cref="T:System.Data.DataSet" />.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary>Показывает, что метод используется для операции с данными, вставляющей данные.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary>Показывает, что метод используется для операции с данными, возвращающей данные.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary>Показывает, что метод используется для операции с данными, изменяющей данные.</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary>Предоставляет преобразователь типов для преобразования объектов <see cref="T:System.DateTime" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DateTimeConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в <see cref="T:System.DateTime" />, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType">Тип <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns>
        <see langword="true" />, если этот объект может выполнить преобразование; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Получает значение, показывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType">Объект <see cref="T:System.Type" />, представляющий тип, в который необходимо выполнить преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует данный объект значения в объект <see cref="T:System.DateTime" />.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Необязательный объект <see cref="T:System.Globalization.CultureInfo" />. Если не предоставляются, предполагается использование текущего языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
      <exception cref="T:System.FormatException">Значение <paramref name="value" /> не является допустимым значением для конечного типа.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует объект с заданным значением в <see cref="T:System.DateTime" />, используя заданные аргументы.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Необязательный объект <see cref="T:System.Globalization.CultureInfo" />. Если не предоставляются, предполагается использование текущего языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType">Тип <see cref="T:System.Type" />, к которому следует привести значение.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary>Предоставляет преобразователь типов для преобразования структур <see cref="T:System.DateTimeOffset" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DateTimeOffsetConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, указывающее, можно преобразовать объект с заданным исходным типом в объект <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="context">Контекст формата даты.</param>
      <param name="sourceType">Проверяемый исходный тип.</param>
      <returns>Значение <see langword="true" />, если заданный тип можно преобразовать в объект <see cref="T:System.DateTimeOffset" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, указывающее, можно преобразовать объект <see cref="T:System.DateTimeOffset" /> в объект заданного типа.</summary>
      <param name="context">Контекст формата даты.</param>
      <param name="destinationType">Проверяемый конечный тип.</param>
      <returns>Значение <see langword="true" />, если объект <see cref="T:System.DateTimeOffset" /> можно привести к заданному типу; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует указанный объект в <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="context">Контекст формата даты.</param>
      <param name="culture">Язык и региональные параметры, определяющие формат даты.</param>
      <param name="value">Преобразуемый объект.</param>
      <returns>Объект <see cref="T:System.DateTimeOffset" />, представляющий заданный объект.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует <see cref="T:System.DateTimeOffset" /> в объект заданного типа.</summary>
      <param name="context">Контекст формата даты.</param>
      <param name="culture">Язык и региональные параметры, определяющие формат даты.</param>
      <param name="value">Преобразуемая структура <see cref="T:System.DateTimeOffset" />.</param>
      <param name="destinationType">Целевой тип преобразования.</param>
      <returns>Объект заданного типа, представляющий объект <see cref="T:System.DateTimeOffset" />.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary>Предоставляет преобразователь типов для преобразования объектов <see cref="T:System.Decimal" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DecimalConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Получает значение, показывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType">Объект <see cref="T:System.Type" />, представляющий тип, в который необходимо выполнить преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует объект с заданным значением в <see cref="T:System.Decimal" />, используя заданные аргументы.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Необязательный объект <see cref="T:System.Globalization.CultureInfo" />. Если не предоставляются, предполагается использование текущего языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType">Тип <see cref="T:System.Type" />, к которому следует привести значение.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="destinationType" /> — <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary>Задает свойство привязки по умолчанию для компонента. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> без параметров.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />, используя указанное имя свойства.</summary>
      <param name="name">Имя свойства привязки по умолчанию.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary>Представляет значение по умолчанию для класса <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary>Определяет, равен ли указанный объект <see cref="T:System.Object" /> текущему экземпляру <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</summary>
      <param name="obj">Объект <see cref="T:System.Object" /> для сравнения с текущим экземпляром <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</param>
      <returns>Значение <see langword="true" />, если объект равен текущему экземпляру; в противном случае — значение <see langword="false" />, сообщающее о неравенстве.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary>Возвращает имя свойства привязки по умолчанию для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</summary>
      <returns>Имя свойства привязки по умолчанию для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary>Задает событие по умолчанию для компонента.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultEventAttribute" />.</summary>
      <param name="name">Имя события по умолчанию для компонента, с которым связан этот атрибут.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary>Задает значение по умолчанию для атрибута <see cref="T:System.ComponentModel.DefaultEventAttribute" />, равное <see langword="null" />. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary>Возвращает значение, показывающее, равно ли значение данного объекта текущему атрибуту <see cref="T:System.ComponentModel.DefaultEventAttribute" />.</summary>
      <param name="obj">Объект, проверяемый на равенство.</param>
      <returns>Значение <see langword="true" />, если значение данного объекта равно значению текущего; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary>Возвращает имя события по умолчанию для компонента, с которым связан этот атрибут.</summary>
      <returns>Имя события по умолчанию для компонента, с которым связан этот атрибут. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary>Задает свойство по умолчанию для компонента.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />.</summary>
      <param name="name">Имя свойства по умолчанию для компонента, с которым связан этот атрибут.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary>Задает значение по умолчанию для атрибута <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />, равное <see langword="null" />. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary>Возвращает значение, показывающее, равно ли значение данного объекта текущему атрибуту <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />.</summary>
      <param name="obj">Объект, проверяемый на равенство.</param>
      <returns>Значение <see langword="true" />, если значение данного объекта равно значению текущего; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary>Возвращает имя свойства по умолчанию для компонента, с которым связан этот атрибут.</summary>
      <returns>Имя свойства по умолчанию для компонента, с которым связан этот атрибут. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary>Предоставляет данные для события <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />.</summary>
      <param name="oldDesigner">Документ, который перестает быть активным.</param>
      <param name="newDesigner">Документ, который становится активным.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary>Возвращает документ, который становится активным.</summary>
      <returns>узел <see cref="T:System.ComponentModel.Design.IDesignerHost" />, представляющий документ, который становится активным.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary>Возвращает документ, который перестает быть активным.</summary>
      <returns>узел <see cref="T:System.ComponentModel.Design.IDesignerHost" />, представляющий документ, который перестает быть активным.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary>Представляет метод, обрабатывающий событие <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" />.</summary>
      <param name="sender">Источник события.</param>
      <param name="e">Объект класса <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary>Исключение, которое создается, если попытка попытка извлечь возвращенный в программу управления исходным кодом файл отменяется или вызывает ошибку.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.CheckoutException" /> со связанным сообщением или кодом ошибки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.CheckoutException" />, используя заданные данные сериализации и контекст.</summary>
      <param name="info">Метод <see cref="T:System.Runtime.Serialization.SerializationInfo" />, используемый для десериализации.</param>
      <param name="context">Объект назначения, используемый для десериализации.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.CheckoutException" /> указанным сообщением.</summary>
      <param name="message">Сообщение, описывающее исключение.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.CheckoutException" /> с указанным подробным описанием и указанным исключением.</summary>
      <param name="message">Подробное описание ошибки.</param>
      <param name="innerException">Ссылка на внутреннее исключение, которое является причиной этого исключения.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.CheckoutException" /> с указанным сообщением и кодом ошибки.</summary>
      <param name="message">Сообщение, описывающее исключение.</param>
      <param name="errorCode">Передаваемый код ошибки.</param>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.CheckoutException" />, указывающий на отмену попытки извлечь файл. Это поле доступно только для чтения.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary>Предоставляет уникальный идентификатор команды, состоящий из числового идентификатора команды (ID) и глобального уникального идентификатора группы меню (GUID).</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.CommandID" />, используя указанные GUID-идентификатор группы и числовой идентификатор команды.</summary>
      <param name="menuGroup">GUID-идентификатор группы, к которой принадлежит данная команда меню.</param>
      <param name="commandID">Числовой идентификатор этой команды меню.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary>Определяет, равны ли два экземпляра <see cref="T:System.ComponentModel.Design.CommandID" />.</summary>
      <param name="obj">Объект для сравнения.</param>
      <returns>Значение <see langword="true" />, если заданный объект равен данному; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary>Возвращает GUID-идентификатор группы, к которой принадлежит команда, соответствующая данному идентификатору <see cref="T:System.ComponentModel.Design.CommandID" />.</summary>
      <returns>GUID-идентификатор группы команд, к которой принадлежит данная команда.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary>Возвращает числовой идентификатор команды.</summary>
      <returns>Число-идентификатор команды.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary>Возвращает строку (<see cref="T:System.String" />), которая представляет текущий объект.</summary>
      <returns>Строка, содержащая оба компонента идентификатора команды: GUID-идентификатор группы меню и целочисленный идентификатор команды.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary>Предоставляет данные для события <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />.</summary>
      <param name="component">Измененный компонент.</param>
      <param name="member">Идентификатор <see cref="T:System.ComponentModel.MemberDescriptor" />, представляющий измененный элемент.</param>
      <param name="oldValue">Прежнее значение измененного элемента.</param>
      <param name="newValue">Новое значение измененного элемента.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary>Возвращает измененный компонент.</summary>
      <returns>Объект <see cref="T:System.Object" />, представляющий измененный компонент.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary>Возвращает измененный элемент.</summary>
      <returns>Идентификатор <see cref="T:System.ComponentModel.MemberDescriptor" />, обозначающий измененный элемент.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary>Возвращает новое значение измененного элемента.</summary>
      <returns>Новое значение измененного элемента. Это свойство может иметь значение <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary>Возвращает прежнее значение измененного элемента.</summary>
      <returns>Прежнее значение измененного элемента. Это свойство может иметь значение <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary>Представляет метод, обрабатывающий событие <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />.</summary>
      <param name="sender">Источник события.</param>
      <param name="e">Объект <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary>Предоставляет данные для события <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" />.</summary>
      <param name="component">Изменяемый компонент.</param>
      <param name="member">Свойство <see cref="T:System.ComponentModel.MemberDescriptor" /> обозначает изменяемый элемент компонента.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary>Возвращает компонент, в который будут вноситься изменения, или компонент, являющийся родительским контейнером изменяемого элемента.</summary>
      <returns>Компонент, в элемент которого будут внесены изменения.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary>Возвращает изменяемый элемент компонента.</summary>
      <returns>Идентификатор <see cref="T:System.ComponentModel.MemberDescriptor" />, обозначающий изменяемый элемент, если он известен, или <see langword="null" /> в противном случае.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary>Представляет метод, обрабатывающий событие <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
      <param name="sender">Источник события.</param>
      <param name="e">Событие <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" />, содержащее данные события.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary>Предоставляет данные для событий <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> и <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />.</summary>
      <param name="component">Компонент, являющийся источником события.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary>Возвращает компонент, связанный с событием.</summary>
      <returns>Компонент, связанный с событием.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary>Представляет метод, предназначенный для обработки событий <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> и <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" />, вызываемых для событий уровня компонентов.</summary>
      <param name="sender">Источник события.</param>
      <param name="e">Объект <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary>Предоставляет данные для события <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />.</summary>
      <param name="component">Переименованный компонент.</param>
      <param name="oldName">Старое имя компонента.</param>
      <param name="newName">Новое имя компонента.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary>Возвращает переименованный компонент.</summary>
      <returns>Переименованный компонент.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary>Возвращает имя компонента после события переименования.</summary>
      <returns>Имя компонента после события переименования.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary>Возвращает имя компонента перед событием переименования.</summary>
      <returns>Предыдущее имя компонента.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary>Представляет метод, обрабатывающий событие <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" />.</summary>
      <param name="sender">Источник события.</param>
      <param name="e">Объект <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary>Представляет коллекцию конструкторов.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerCollection" />, содержащий указанный набор конструкторов.</summary>
      <param name="designers">Список, содержащий добавляемую коллекцию конструкторов.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerCollection" />, содержащий указанные конструкторы.</summary>
      <param name="designers">Сохраняемый массив объектов <see cref="T:System.ComponentModel.Design.IDesignerHost" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary>Возвращает число конструкторов в коллекции.</summary>
      <returns>Число конструкторов в коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary>Возвращает новый перечислитель для данной коллекции.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IEnumerator" />, обеспечивающий перечисление коллекции.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary>Возвращает конструктор по указанному индексу.</summary>
      <param name="index">Индекс возвращаемого конструктора.</param>
      <returns>Конструктор по указанному индексу.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы коллекции в <see cref="T:System.Array" />, начиная с определенного индекса <see cref="T:System.Array" />.</summary>
      <param name="array">Одномерный массив <see cref="T:System.Array" />, который является конечным массивом для элементов, скопированных из коллекции. Массив <see cref="T:System.Array" /> должен иметь индексацию, начинающуюся с нуля.</param>
      <param name="index">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary>Возвращает количество элементов, содержащихся в коллекции.</summary>
      <returns>Количество элементов в коллекции.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Возвращает значение, показывающее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>
        <see langword="true" />, если доступ к классу <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary>Возвращает объект, который можно использовать для синхронизации доступа к коллекции.</summary>
      <returns>Объект, который можно использовать для синхронизации доступа к коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает новый перечислитель для данной коллекции.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IEnumerator" />, обеспечивающий перечисление коллекции.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary>Предоставляет данные для событий <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> и <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />.</summary>
      <param name="host">узел <see cref="T:System.ComponentModel.Design.IDesignerHost" /> документа.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary>Возвращает хост документа.</summary>
      <returns>узел <see cref="T:System.ComponentModel.Design.IDesignerHost" /> документа.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary>Представляет метод, обрабатывающий события <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> и <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" />, вызываемые при создании или уничтожении документа.</summary>
      <param name="sender">Источник события.</param>
      <param name="e">Объект <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary>Предоставляет базовый класс для возврата и установки значений параметров конструктора.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerOptionService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary>Создает новую коллекцию <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> с указанным именем и добавляет ее в заданный родительский объект.</summary>
      <param name="parent">Родительская коллекция параметров конструктора. Все коллекции имеют родительские коллекции, за исключением коллекции корневых объектов.</param>
      <param name="name">Имя данной коллекции.</param>
      <param name="value">Объект, предоставляющий свойства для данной коллекции. Может быть значением <see langword="null" />, если коллекция не должна содержать каких-либо свойств.</param>
      <returns>Новый <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> с заданным именем.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="parent" /> или <paramref name="name" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="name" /> равен пустой строке.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary>Содержит коллекцию параметров конструктора. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>Копирует целую коллекцию в совместимый одномерный массив <see cref="T:System.Array" />, начиная с указанного индекса целевого массива.</summary>
      <param name="array">Одномерный массив <see cref="T:System.Array" />, который является местом назначения для элементов, копируемых из коллекции. Массив <paramref name="array" /> должен иметь индексацию, начинающуюся с нуля.</param>
      <param name="index">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary>Возвращает количество дочерних коллекций параметров, которые содержатся в данной коллекции <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns>Количество дочерних коллекций параметров, которые содержатся в данной коллекции <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary>Возвращает перечислитель <see cref="T:System.Collections.IEnumerator" />, который может использоваться для перебора элементов коллекции.</summary>
      <returns>Перечислитель <see cref="T:System.Collections.IEnumerator" />, который может использоваться для перебора элементов коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>Возвращает индекс первого вхождения заданного значения в диапазоне этой коллекции.</summary>
      <param name="value">Объект, который требуется найти в коллекции.</param>
      <returns>Индекс первого вхождения значения в целой коллекции, если оно обнаружено; в обратном случае — нижняя граница коллекции минус 1.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary>Возвращает дочернюю коллекцию по заданному индексу.</summary>
      <param name="index">Индекс (начиная с нуля) возвращаемой дочерней коллекции.</param>
      <returns>Дочерняя коллекция по заданному индексу.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary>Возвращает дочернюю коллекцию с заданным именем.</summary>
      <param name="name">Имя тега дочерней коллекции.</param>
      <returns>Дочерняя коллекция с именем, заданным параметром <paramref name="name" />, или значение <see langword="null" />, если имя не найдено.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary>Возвращает имя этого аспекта <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns>Имя этого аспекта <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary>Возвращает объект родительской коллекции.</summary>
      <returns>Объект родительской коллекции или значение <see langword="null" />, если родительский объект отсутствует.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary>Возвращает коллекцию свойств, предоставленных коллекцией <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, вместе со всеми ее дочерними объектами.</summary>
      <returns>Коллекция свойств, предоставленных коллекцией <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, вместе со всеми ее дочерними объектами.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary>Отображает интерфейс пользователя диалогового окна, при помощи которого пользователь может настраивать свойства в этой коллекции <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns>Значение <see langword="true" />, если можно отобразить диалоговое окно; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Возвращает значение, указывающее, является ли доступ к коллекции синхронизированным (потокобезопасным).</summary>
      <returns>Значение <see langword="true" />, если доступ к коллекции является синхронизированным; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>Возвращает объект, который можно использовать для синхронизации доступа к коллекции.</summary>
      <returns>Объект, который можно использовать для синхронизации доступа к коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>Добавляет элемент в коллекцию <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Объект <see cref="T:System.Object" />, добавляемый в список <see cref="T:System.Collections.IList" />.</param>
      <returns>Позиция, на которую вставлен новый элемент.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary>Удаляет все элементы из коллекции.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Определяет, содержит ли коллекция указанное значение.</summary>
      <param name="value">Объект <see cref="T:System.Object" /> для поиска в коллекции.</param>
      <returns>Значение <see langword="true" />, если элемент <see cref="T:System.Object" /> найден в коллекции; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Определяет индекс определенного элемента в коллекции.</summary>
      <param name="value">Объект <see cref="T:System.Object" /> для поиска в коллекции.</param>
      <returns>Индекс <paramref name="value" />, если он найден в списке; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Вставляет элемент в коллекцию по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="value" />.</param>
      <param name="value">Объект <see cref="T:System.Object" /> для вставки в коллекцию.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary>Возвращает значение, указывающее, имеет ли коллекция фиксированный размер.</summary>
      <returns>Значение <see langword="true" />, если коллекция имеет фиксированный размер; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary>Возвращает значение, указывающее, является ли коллекция доступной только для чтения.</summary>
      <returns>Значение <see langword="true" />, если коллекция доступна только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Возвращает или задает элемент по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс элемента, который требуется возвратить или задать.</param>
      <returns>Элемент, расположенный по указанному индексу.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Удаляет первое вхождение конкретного объекта из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.Object" />, который требуется удалить из коллекции.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Удаляет из коллекции элемент с заданным индексом.</summary>
      <param name="index">Отсчитываемый от нуля индекс удаляемого элемента.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary>Возвращает коллекцию свойств для этой службы.</summary>
      <returns>Объект <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> заполняется доступными параметрами конструктора.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>Заполняет коллекцию <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <param name="options">Коллекция для заполнения.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary>Отображает диалоговое окно параметров для заданного объекта.</summary>
      <param name="options">Коллекция свойств, содержащая вызываемый объект.</param>
      <param name="optionObject">Объект фактических параметров.</param>
      <returns>Значение <see langword="true" />, если диалоговое окно отображается; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary>Возвращает значение параметра, определенного в данном пакете.</summary>
      <param name="pageName">Страница, к которой привязан данный параметр.</param>
      <param name="valueName">Имя значения параметра.</param>
      <returns>Значение параметра с именем <paramref name="valueName" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="pageName" /> или <paramref name="valueName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary>Устанавливает значение параметра, определенного в данном пакете.</summary>
      <param name="pageName">Страница, к которой привязан данный параметр.</param>
      <param name="valueName">Имя значения параметра.</param>
      <param name="value">Значение параметра.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="pageName" /> или <paramref name="valueName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary>Предоставляет способ сгруппировать последовательность действий этапа разработки, что позволяет повысить производительность и дает возможность отменять действия большинства типов.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> без описания.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> с помощью указанного описания транзакции.</summary>
      <param name="description">Описание транзакции.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary>Отменяет транзакцию и пытается отменить все действия, выполненные событиями транзакции.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary>Возвращает значение, определяющее, была ли отменена данная транзакция.</summary>
      <returns>
        <see langword="true" />, если транзакция была отменена; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary>Фиксирует транзакцию.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary>Возвращает значение, определяющее, была ли зафиксирована данная транзакция.</summary>
      <returns>Значение <see langword="true" />, если транзакция была зафиксирована; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary>Возвращает описание транзакции.</summary>
      <returns>Описание транзакции.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.ComponentModel.Design.DesignerTransaction" />, а при необходимости освобождает также управляемые ресурсы.</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary>Освобождает ресурсы, связанные с данным объектом. Этот метод фиксирует транзакцию, если она не была зафиксирована ранее.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary>Вызывает событие <see langword="Cancel" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary>Фактически фиксирует транзакцию.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary>Освобождает все ресурсы, занятые модулем <see cref="T:System.ComponentModel.Design.DesignerTransaction" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary>Предоставляет данные для событий <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> и <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />, используя заданное значение, указывающее, вызывал ли конструктор метод <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> для транзакции.</summary>
      <param name="commit">Значение, определяющее, была ли зафиксирована данная транзакция.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />.</summary>
      <param name="commit">Значение, определяющее, была ли зафиксирована данная транзакция.</param>
      <param name="lastTransaction">
        <see langword="true" />, если это последняя транзакция, которая должна быть закрыта; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary>Возвращает значение, указывающее, является ли данная транзакция последней, которая должна быть закрыта.</summary>
      <returns>
        <see langword="true" />, если это последняя транзакция, которая должна быть закрыта; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary>Указывает, вызывал ли конструктор метод <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> для транзакции.</summary>
      <returns>Значение <see langword="true" /> если конструктор вызывал метод <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> для транзакции, в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary>Представляет метод, обрабатывающий события конструктора <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> и <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />.</summary>
      <param name="sender">Источник события.</param>
      <param name="e">Объект <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />, содержащий данные, которые относятся к событию.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary>Предоставляет команду, которая может быть вызвана из конструктора.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="text">Текст команды меню, отображаемый для пользователя.</param>
      <param name="handler">Обработчик события, выполняющий действия команды.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="text">Текст команды меню, отображаемый для пользователя.</param>
      <param name="handler">Обработчик события, выполняющий действия команды.</param>
      <param name="startCommandID">Начальный идентификатор команды для данной команды конструктора. По умолчанию архитектура конструктора задает диапазон идентификаторов, допустимых для команд конструктора. Пользователь может переопределить данный идентификатор и задать свой идентификатор команды.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary>Получает или задает описание команды меню для команды.</summary>
      <returns>Строка, описывающая команду меню.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary>Возвращает текстовое описание команды меню.</summary>
      <returns>Текстовое описание команды меню.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary>Переопределяет <see cref="M:System.Object.ToString" />.</summary>
      <returns>Текст команды или пустая строка (""), если в текстовом поле отсутствует значение.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />, используя указанный массив объектов <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="value">Массив <see cref="T:System.ComponentModel.Design.DesignerVerb" />, указывающий команды конструктора, которые должны содержаться в коллекции.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary>Добавляет указанный параметр <see cref="T:System.ComponentModel.Design.DesignerVerb" /> в коллекцию.</summary>
      <param name="value">Параметр <see cref="T:System.ComponentModel.Design.DesignerVerb" /> для добавления в коллекцию.</param>
      <returns>Индекс коллекции, соответствующий добавленной команде конструктора.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary>Добавляет заданный набор команд конструктора в коллекцию.</summary>
      <param name="value">Массив объектов <see cref="T:System.ComponentModel.Design.DesignerVerb" />, добавляемый в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary>Добавляет в коллекцию заданную коллекцию команд конструктора.</summary>
      <param name="value">Объект <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> для добавления в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary>Возвращает значение, определяющее, включен ли в коллекцию указанный объект <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="value">Объект <see cref="T:System.ComponentModel.Design.DesignerVerb" /> для поиска в коллекции.</param>
      <returns>Значение <see langword="true" />, если указанный объект присутствует в коллекции; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary>Копирует элементы коллекции в заданный массив объектов <see cref="T:System.ComponentModel.Design.DesignerVerb" />, начиная с заданного индекса назначения.</summary>
      <param name="array">Массив, в который выполняется копирование элементов коллекции.</param>
      <param name="index">Индекс в массиве назначения, начиная с которого нужно вставлять копируемые элементы коллекции.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary>Получает индекс заданного ограничения <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="value">Объект <see cref="T:System.ComponentModel.Design.DesignerVerb" />, индекс которого в коллекции будет возвращен.</param>
      <returns>Индекс заданного объекта, если он найден в списке, в противном случае значение -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary>Вставляет заданный объект <see cref="T:System.ComponentModel.Design.DesignerVerb" /> по заданному индексу.</summary>
      <param name="index">Индекс коллекции, по которому нужно вставить команду конструктора.</param>
      <param name="value">Объект <see cref="T:System.ComponentModel.Design.DesignerVerb" />, вставляемый в коллекцию.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary>Возвращает или задает объект <see cref="T:System.ComponentModel.Design.DesignerVerb" /> с заданным индексом.</summary>
      <param name="index">Индекс, по которому требуется получить или задать объект <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</param>
      <returns>Объект <see cref="T:System.ComponentModel.Design.DesignerVerb" /> для каждого допустимого в коллекции индекса.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>Вызывает событие <see langword="Clear" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>Вызывает событие <see langword="Insert" />.</summary>
      <param name="index">Индекс вставки элемента.</param>
      <param name="value">Вставляемый объект.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>Вызывает событие <see langword="Remove" />.</summary>
      <param name="index">Индекс удаляемого элемента.</param>
      <param name="value">Удаляемый объект.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Вызывает событие <see langword="Set" />.</summary>
      <param name="index">Индекс установки значения элемента.</param>
      <param name="oldValue">Прежний объект.</param>
      <param name="newValue">Новый объект.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary>Вызывает событие <see langword="Validate" />.</summary>
      <param name="value">Объект для проверки.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary>Удаляет указанный объект <see cref="T:System.ComponentModel.Design.DesignerVerb" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.ComponentModel.Design.DesignerVerb" />, который требуется удалить из коллекции.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary>Предоставляет лицензионное содержимое этапа разработки, позволяющее поддерживать работу поставщика лицензий во время разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>Возвращает сохраненный лицензионный ключ.</summary>
      <param name="type">Тип лицензионного ключа.</param>
      <param name="resourceAssembly">Сборка, из которой нужно вернуть ключ.</param>
      <returns>Сохраненный лицензионный ключ, соответствующий заданному типу.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>Задает сохраненный лицензионный ключ.</summary>
      <param name="type">Тип лицензионного ключа.</param>
      <param name="key">Лицензионный ключ.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary>Возвращает режим использования лицензии.</summary>
      <returns>Свойство <see cref="T:System.ComponentModel.LicenseUsageMode" />, указывающее режим лицензирования для контекста.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary>Предоставляет поддержку сериализации лицензионного содержимого во время разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary>Проводит сериализацию лицензии заданного лицензионного содержимого этапа разработки, используя при этом заданный ключевой пакет и поток вывода.</summary>
      <param name="o">Поток для вывода.</param>
      <param name="cryptoKey">Ключ, используемый для шифрования.</param>
      <param name="context">Класс <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />, задающий лицензионное содержимое.</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary>Определяет идентификаторы, несущие данные о контексте, из которого был вызван запрос на предоставление справочных сведений.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary>Общий контекст.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary>Выделение.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary>Выделение окна средств.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary>Окно.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary>Указывает ключевое слово контекста для класса или члена. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
      <param name="keyword">Значение ключевого слова справки.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="keyword" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> на основе заданного типа.</summary>
      <param name="t">Тип, из которого будет получено ключевое слово справки.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="t" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary>Представляет значение по умолчанию для объекта <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary>Определяет, равны ли два экземпляра <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
      <param name="obj">Объект <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />, с которым сравнивается текущий объект <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</param>
      <returns>Значение <see langword="true" />, если указанный объект <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> равен текущему объекту <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary>Возвращает ключевое слово справки, предоставленное в данном атрибуте.</summary>
      <returns>Ключевое слово справки, предоставленное в данном атрибуте.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary>Определяет, имеет ли ключевое слово справки значение <see langword="null" />.</summary>
      <returns>Значение <see langword="true" />, если ключевое слово справки имеет значение <see langword="null" />, в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary>Определяет идентификаторы, показывающие тип ключевого слова справки.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary>Ключевое слово, запрос которого был вызван нажатием клавиши F1.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary>Ключевое слово фильтра.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary>Общее ключевое слово.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary>Предоставляет интерфейс для добавления или удаления обработчиков событий, добавляющих, удаляющих или переименовывающих компоненты. Предоставляет методы для вызова событий <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> и <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary>Происходит после добавления компонента.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary>Происходит перед самым добавлением компонента.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary>Происходит после изменения компонента.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary>Происходит в процессе изменения компонента.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary>Происходит после удаления компонента.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary>Происходит в процессе удаления компонента.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary>Происходит после переименования компонента.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>Сообщает службе изменения компонентов об изменении определенного компонента.</summary>
      <param name="component">Измененный компонент.</param>
      <param name="member">Измененный элемент. Значение <see langword="null" />, если изменение относится к нескольким элементам.</param>
      <param name="oldValue">Прежнее значение элемента. Это свойство имеет смысл только в том случае, если элемент не равен <see langword="null" />.</param>
      <param name="newValue">Новое значение элемента. Это свойство имеет смысл только в том случае, если элемент не равен <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Сообщает службе изменения компонентов об изменении определенного компонента перед внесением изменений.</summary>
      <param name="component">Компонент непосредственно перед изменением.</param>
      <param name="member">Изменяемый элемент. Значение <see langword="null" />, если изменение относится к нескольким элементам.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary>Включает перечисление компонентов во время разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary>Возвращает список доступных типов компонентов.</summary>
      <param name="designerHost">Хост конструктора, обеспечивающий службы времени разработки. Может иметь значение <see langword="null" />.</param>
      <param name="baseType">Базовый тип, указывающий компоненты для извлечения. Может иметь значение <see langword="null" />.</param>
      <returns>Список доступных типов компонентов.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary>Предоставляет набор рекомендованных значений по умолчанию во время создания компонента.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary>Восстанавливает состояние по умолчанию для экземпляра компонента.</summary>
      <param name="defaultValues">Словарь значений свойства по умолчанию, содержащий пары имя/значение, при помощи которого компонент будет возвращен в исходное состояние.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>Инициализирует новый компонент с использованием набора рекомендованных значений.</summary>
      <param name="defaultValues">Словарь значений свойства по умолчанию, содержащий пары имя/значение, при помощи которого будет инициализировано состояние компонента.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary>Предоставляет базовую оболочку для построения настраиваемого конструктора.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary>Возвращает базовый компонент, создаваемый данным конструктором.</summary>
      <returns>Класс <see cref="T:System.ComponentModel.IComponent" />, показывающий основной компонент, создаваемый данным конструктором.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary>Выполняет действие по умолчанию для конструктора.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>Инициализирует конструктор, используя заданный компонент.</summary>
      <param name="component">Компонент для связи с данным конструктором.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary>Получает коллекцию команд времени разработки, поддерживаемых конструктором.</summary>
      <returns>Объект <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />, содержащий поддерживаемые конструктором команды, либо значение <see langword="null" />, если в компоненте отсутствуют команды.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary>Предоставляет уведомления о событиях при добавлении и удалении базовых конструкторов, изменении выделенного компонента и изменении текущего базового конструктора.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary>Возвращает базовый конструктор для документа, активного в текущий момент.</summary>
      <returns>Документ, активный в текущий момент, или значение <see langword="null" />, если документ не активен.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary>Возникает при изменении текущего базового конструктора.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary>Возникает при создании базового конструктора.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary>Возникает при уничтожении базового конструктора для документа.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary>Возвращает коллекцию базовых конструкторов для документов проекта, которые являются активными в текущий момент в среде разработки.</summary>
      <returns>Класс <see cref="T:System.ComponentModel.Design.DesignerCollection" />, содержащий созданные и еще не удаленные базовые конструкторы.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary>Возникает при изменении текущего режима разработки.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary>Предоставляет интерфейс, позволяющий конструктору получать доступ и фильтровать словари класса <see cref="T:System.ComponentModel.TypeDescriptor" />, в которых хранятся дескрипторы свойств, атрибутов и событий, предоставляемые конструктором компонентов в среде режима разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>При переопределении в производном классе позволяет конструктору изменять или удалять элементы из набора атрибутов, предоставляемых через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes">Объекты <see cref="T:System.Attribute" /> класса компонента. Ключи в словаре атрибутов являются значениями <see cref="P:System.Attribute.TypeId" /> атрибутов.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary>При переопределении в производном классе позволяет конструктору изменять или удалять элементы из набора событий, предоставляемых через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events">Объекты <see cref="T:System.ComponentModel.EventDescriptor" />, представляющие события класса компонента. Ключи в словаре событий являются именами событий.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary>При переопределении в производном классе позволяет конструктору изменять или удалять элементы из набора свойств, предоставляемых через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties">Объекты <see cref="T:System.ComponentModel.PropertyDescriptor" />, представляющие свойства класса компонента. Ключи в словаре свойств являются именами свойств.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>При переопределении в производном классе позволяет конструктору добавлять элементы в набор атрибутов, предоставляемых через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes">Объекты <see cref="T:System.Attribute" /> класса компонента. Ключи в словаре атрибутов являются значениями <see cref="P:System.Attribute.TypeId" /> атрибутов.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary>При переопределении в производном классе позволяет конструктору добавлять элементы в набор событий, предоставляемых через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events">Объекты <see cref="T:System.ComponentModel.EventDescriptor" />, представляющие события класса компонента. Ключи в словаре событий являются именами событий.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary>При переопределении в производном классе позволяет конструктору добавлять элементы в набор свойств, предоставляемых через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties">Объекты <see cref="T:System.ComponentModel.PropertyDescriptor" />, представляющие свойства класса компонента. Ключи в словаре свойств являются именами свойств.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary>Предоставляет интерфейс для управления транзакциями и компонентами конструктора.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary>Активизирует конструктор, размещенный на данном хосте.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary>Возникает, когда конструктор активизирован.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary>Получает контейнер для данного хоста конструктора.</summary>
      <returns>Класс <see cref="T:System.ComponentModel.IContainer" /> для данного хоста.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary>Создает компонент указанного типа и добавляет его в документ проекта.</summary>
      <param name="componentClass">Тип создаваемого компонента.</param>
      <returns>Вновь созданный компонент.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary>Создает компонент с заданным типом и именем и добавляет его в документ проекта.</summary>
      <param name="componentClass">Тип создаваемого компонента.</param>
      <param name="name">Имя компонента.</param>
      <returns>Вновь созданный компонент.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary>Создает класс <see cref="T:System.ComponentModel.Design.DesignerTransaction" />, который может инкапсулировать последовательности событий для повышения производительности, а также для включения вспомогательных функциональных возможностей: отмены и возврата.</summary>
      <returns>Новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. По завершении этапов транзакции необходимо вызвать для этого объекта метод <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary>Создает класс <see cref="T:System.ComponentModel.Design.DesignerTransaction" />, который может инкапсулировать последовательности событий для повышения производительности, а также для включения вспомогательных функциональных возможностей: отмены и возврата, с помощью заданного описания транзакции.</summary>
      <param name="description">Заголовок или описание для вновь созданной транзакции.</param>
      <returns>Новый объект <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. По завершении этапов транзакции необходимо вызвать для этого объекта метод <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary>Возникает, когда данный конструктор отключен.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary>Уничтожает заданный компонент и удаляет его из контейнера конструктора.</summary>
      <param name="component">Уничтожаемый компонент.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary>Получает экземпляр конструктора, содержащий указанный компонент.</summary>
      <param name="component">Класс <see cref="T:System.ComponentModel.IComponent" />, для которого загружается конструктор.</param>
      <returns>Класс <see cref="T:System.ComponentModel.Design.IDesigner" /> или значение <see langword="null" />, если для указанного компонента не существует конструктора.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary>Получает экземпляр заданного полного имени типа.</summary>
      <param name="typeName">Имя загружаемого типа.</param>
      <returns>Объект типа для заданного имени типа или значение <see langword="null" />, если тип не найден.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary>Получает значение, показывающее, находится ли хост конструктора в текущий момент в процессе транзакции.</summary>
      <returns>Значение <see langword="true" />, если транзакция выполняется; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary>Возникает, когда конструктор завершил загрузку документа.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary>Получает значение, показывающее, загружается ли в текущий момент документ хостом конструктора.</summary>
      <returns>Значение <see langword="true" />, если документ загружается в текущий момент хостом конструктора; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary>Получает экземпляр базового класса, используемого в качестве корневого компонента для текущего конструктора.</summary>
      <returns>Экземпляр класса корневого компонента.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary>Получает полное имя разрабатываемого класса.</summary>
      <returns>Полное имя класса базового компонента.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary>Добавляет обработчик событий для события <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary>Добавляет обработчик событий для события <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary>Получает описание текущей транзакции.</summary>
      <returns>Описание текущей транзакции.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary>Добавляет обработчик событий для события <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary>Добавляет обработчик событий для события <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary>Определяет методы для хоста конструктора для отчета о состоянии транзакций.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary>Получает значение, показывающее, находится ли хост конструктора в процессе закрытия транзакции.</summary>
      <returns>Значение <see langword="true" />, если конструктор закрывает транзакцию; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary>Предоставляет доступ к параметрам конструктора, расположенным в среде разработки Visual Studio в меню Сервис под пунктом Параметры.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary>Возвращает значение указанного параметра конструктора Windows Forms.</summary>
      <param name="pageName">Имя страницы, определяющей этот параметр.</param>
      <param name="valueName">Имя свойства параметра.</param>
      <returns>Значение заданного параметра.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary>Устанавливает значение указанного параметра конструктора Windows Forms.</summary>
      <param name="pageName">Имя страницы, определяющей этот параметр.</param>
      <param name="valueName">Имя свойства параметра.</param>
      <param name="value">Новое значение.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary>Предоставляет базовый словарь пар "ключ-значение", свойственный компоненту, через службу, которая может использоваться конструктором для хранения пользовательских данных.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary>Получает ключ, соответствующий заданному значению.</summary>
      <param name="value">Значение для поиска в словаре.</param>
      <returns>Соответствующий ключ или значение <see langword="null" />, если ключ не существует.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary>Возвращает значение, соответствующее указанному ключу.</summary>
      <param name="key">Ключ, для которого необходимо найти значение.</param>
      <returns>Соответствующее значение или <see langword="null" />, если значение не существует.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary>Задает указанную пару "ключ-значение".</summary>
      <param name="key">Объект, используемый в качестве ключа, с которым необходимо сопоставить значение.</param>
      <param name="value">Хранимое значение.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary>Предоставляет службу регистрации обработчиков событий для событий в компонентах.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>Создает уникальное имя для метода обработчика событий заданного компонента и события.</summary>
      <param name="component">Экземпляр компонента, с которым связано событие.</param>
      <param name="e">Событие, для которого должно быть создано имя.</param>
      <returns>Рекомендованное имя метода обработчика событий для данного события.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary>Возвращает коллекцию методов обработчика событий, обладающих сигнатурой метода, совместимой с заданным событием.</summary>
      <param name="e">Событие, для которого необходимо получить совместимые методы обработчика событий.</param>
      <returns>Коллекция строк.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary>Возвращает дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> для события, которое представлено заданным дескриптором свойств, если он отражает событие.</summary>
      <param name="property">Свойство, представляющее событие.</param>
      <returns>Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> для события, представляемого свойством, или значение <see langword="null" />, если свойство не представляет событие.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary>Преобразует набор дескрипторов событий в набор дескрипторов свойств.</summary>
      <param name="events">События для преобразования в свойства.</param>
      <returns>Массив объектов <see cref="T:System.ComponentModel.PropertyDescriptor" />, описывающих набор событий.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary>Преобразует один дескриптор событий в дескриптор свойств.</summary>
      <param name="e">Преобразуемое событие.</param>
      <returns>Объект <see cref="T:System.ComponentModel.PropertyDescriptor" />, описывающий событие.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary>Отображает код пользователя для конструктора.</summary>
      <returns>Значение <see langword="true" />, если код отображается; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>Отображает код пользователя для заданного события.</summary>
      <param name="component">Компонент, с которым связано событие.</param>
      <param name="e">Отображаемое событие.</param>
      <returns>Значение <see langword="true" />, если код отображается; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary>Отображает код пользователя для конструктора в заданной строке.</summary>
      <param name="lineNumber">Номер строки для размещения курсора.</param>
      <returns>Значение <see langword="true" />, если код отображается; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary>Предоставляет интерфейс, который может перечислять поставщиков расширений.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary>Получает набор поставщиков расширений для компонента.</summary>
      <returns>Массив типа <see cref="T:System.ComponentModel.IExtenderProvider" />, в котором перечислены активные поставщики расширений. Если поставщики отсутствуют, возвращается пустой массив.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary>Предоставляет интерфейс для добавления и удаления поставщиков расширителей во время разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>Добавляет указанный поставщик расширений.</summary>
      <param name="provider">Добавляемый поставщик расширений.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>Удаляет указанный поставщик расширений.</summary>
      <param name="provider">Удаляемый поставщик расширений.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary>Предоставляет методы для отображения разделов справки, а также для добавления и удаления зарезервированных слов справки во время разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary>Добавляет в документ атрибут контекста.</summary>
      <param name="name">Имя добавляемого атрибута.</param>
      <param name="value">Значение атрибута.</param>
      <param name="keywordType">Тип зарезервированного слова из перечисления <see cref="T:System.ComponentModel.Design.HelpKeywordType" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary>Удаляет из документа все существующие атрибуты контекста.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary>Создает локальный класс <see cref="T:System.ComponentModel.Design.IHelpService" /> для управления вложенными контекстами.</summary>
      <param name="contextType">Приоритетный тип добавляемого вложенного контекста.</param>
      <returns>Вновь созданный <see cref="T:System.ComponentModel.Design.IHelpService" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary>Удаляет ранее добавленный атрибут контекста.</summary>
      <param name="name">Имя удаляемого атрибута.</param>
      <param name="value">Значение удаляемого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary>Удаляет контекст, созданный с помощью метода <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" />.</summary>
      <param name="localContext">Удаляемый локальный контекст <see cref="T:System.ComponentModel.Design.IHelpService" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary>Отображает раздел справки, соответствующий заданному зарезервированному слову.</summary>
      <param name="helpKeyword">Зарезервированного слово для отображаемого раздела справки.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary>Отображает раздел справки, соответствующий заданному URL-адресу.</summary>
      <param name="helpUrl">URL-адрес отображаемого раздела справки.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary>Предоставляет методы, указывающие компоненты компонента.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>Выполняет поиск в заданном компоненте полей, которые реализуют интерфейс <see cref="T:System.ComponentModel.IComponent" />, а также добавляет каждое из них в заданный контейнер, сохраняя уровень наследования каждого поля, которое может быть извлечено с использованием метода <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" />.</summary>
      <param name="component">Объект <see cref="T:System.ComponentModel.IComponent" />, в котором будет выполнен поиск. Поиск начинается с данного компонента.</param>
      <param name="container">Интерфейс <see cref="T:System.ComponentModel.IContainer" />, в который будут добавлены компоненты.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary>Возвращает атрибут наследования для заданного компонента.</summary>
      <param name="component">Интерфейс <see cref="T:System.ComponentModel.IComponent" />, для которого должен быть извлечен атрибут наследования.</param>
      <returns>Экземпляр класса <see cref="T:System.ComponentModel.InheritanceAttribute" />, который описывает уровень наследования заданного компонента.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary>Предоставляет методы для управления общими командами конструктора и командами меню, доступными в режиме конструктора, а также методы для отображения некоторых типов контекстных меню.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>Добавляет в меню указанную стандартную команду меню.</summary>
      <param name="command">Добавляемый объект <see cref="T:System.ComponentModel.Design.MenuCommand" />.</param>
      <exception cref="T:System.InvalidOperationException">Идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> указанной команды <see cref="T:System.ComponentModel.Design.MenuCommand" /> уже представлен в меню.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>Добавляет указанную команду конструктора в набор общих команд конструктора.</summary>
      <param name="verb">Добавляемый объект <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary>Осуществляет поиск указанного идентификатора команды и возвращает связанную с ним команду меню.</summary>
      <param name="commandID">Объект <see cref="T:System.ComponentModel.Design.CommandID" />, который требуется найти.</param>
      <returns>Команда <see cref="T:System.ComponentModel.Design.MenuCommand" />, связанная с идентификатором команды, или значение <see langword="null" />, если команда не найдена.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary>Вызывает команду меню или команду конструктора, соответствующую указанному идентификатору команды.</summary>
      <param name="commandID">Идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> команды, которую необходимо найти и выполнить.</param>
      <returns>Значение <see langword="true" />, если команда найдена и вызвана успешно; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>Удаляет из меню указанную стандартную команду меню.</summary>
      <param name="command">Объект <see cref="T:System.ComponentModel.Design.MenuCommand" /> для удаления.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>Удаляет указанную команду конструктора из коллекции глобальных команд конструктора.</summary>
      <param name="verb">Объект <see cref="T:System.ComponentModel.Design.DesignerVerb" /> для удаления.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary>Отображает указанное контекстное меню в заданном месте.</summary>
      <param name="menuID">Идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> отображаемого контекстного меню.</param>
      <param name="x">Координата по оси X, в которой отображается меню (в экранных координатах).</param>
      <param name="y">Координата по оси Y, в которой отображается меню (в экранных координатах).</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary>Возвращает коллекцию команд конструктора, доступных в настоящий момент.</summary>
      <returns>Коллекция <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />, содержащая доступные в текущий момент команды конструктора.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary>Предоставляет интерфейс для получения ссылок на объекты проекта по имени или типу, для получения имени заданного объекта, а также для поиска родительского объекта для заданного объекта в проекте конструктора.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary>Получает компонент, содержащий заданный компонент.</summary>
      <param name="reference">Объект, для которого загружается родительский компонент.</param>
      <returns>Базовый интерфейс <see cref="T:System.ComponentModel.IComponent" />, содержащий заданный объект, или значение <see langword="null" />, если родительского компонента не существует.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary>Получает имя указанного компонента.</summary>
      <param name="reference">Объект, имя которого должно быть возвращено.</param>
      <returns>Имя объекта, на который осуществляется ссылка, или значение <see langword="null" />, если ссылка на объект недопустима.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary>Получает ссылку на компонент, имя которого соответствует заданному имени.</summary>
      <param name="name">Имя компонента, на который возвращается ссылка.</param>
      <returns>Объект, на который ссылается указанное имя, или значение <see langword="null" />, если ссылка не найдена.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary>Получает все доступные ссылки на компоненты проекта.</summary>
      <returns>Массив всех объектов со ссылками, доступными в классе <see cref="T:System.ComponentModel.Design.IReferenceService" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary>Получает все доступные ссылки на компоненты заданного типа.</summary>
      <param name="baseType">Тип объекта, на экземпляры которого возвращаются ссылки.</param>
      <returns>Массив всех доступных объектов заданного типа.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary>Предоставляет конструкторам интерфейс для получения доступа к устройствам чтения и записи ресурсов для определенных типов ресурсов класса <see cref="T:System.Globalization.CultureInfo" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary>Осуществляет поиск устройства чтения ресурсов для заданной культуры.</summary>
      <param name="info">Класс <see cref="T:System.Globalization.CultureInfo" /> ресурса, для которого необходимо загрузить устройство чтения ресурсов.</param>
      <returns>Интерфейс <see cref="T:System.Resources.IResourceReader" />, содержащий ресурсы для культуры, или значение <see langword="null" />, если для нее не существует ресурсов.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary>Осуществляет поиск устройства записи ресурсов для заданной культуры.</summary>
      <param name="info">Класс <see cref="T:System.Globalization.CultureInfo" /> ресурса, для которого необходимо создать устройство записи ресурсов.</param>
      <returns>Интерфейс <see cref="T:System.Resources.IResourceWriter" /> для заданной культуры.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary>Предоставляет поддержку технологий просмотра конструктора корневого уровня.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>Получает объект просмотра для заданной технологии просмотра.</summary>
      <param name="technology">
        <see cref="T:System.ComponentModel.Design.ViewTechnology" /> показывает определенную технологию просмотра.</param>
      <returns>Объект, отражающий представление для данного конструктора.</returns>
      <exception cref="T:System.ArgumentException">Указанная технология просмотра не поддерживается или не существует.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary>Возвращает или устанавливает набор технологий, которые данный конструктор может поддерживать для отображения.</summary>
      <returns>Массив значений поддерживаемого типа <see cref="T:System.ComponentModel.Design.ViewTechnology" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary>Предоставляет интерфейс выбора компонентов для конструктора.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary>Получает значение, показывающее, выделен ли указанный компонент в данный момент.</summary>
      <param name="component">Проверяемый компонент.</param>
      <returns>Значение <see langword="true" />, если компонент является частью текущего выбора пользователя; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary>Возвращает коллекцию компонентов, выделенную в настоящий момент.</summary>
      <returns>Коллекция, представляющая текущий набор выделенных компонентов.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary>Получает объект, являющийся на данный момент основным выделенным объектом.</summary>
      <returns>Объект, являющийся на данный момент основным выделенным объектом.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary>Возникает при изменении текущего выделения.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary>Возникает перед изменением текущего выделения.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary>Получает число выделенных объектов.</summary>
      <returns>Число выделенных объектов.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary>Выделяет заданную коллекцию компонентов.</summary>
      <param name="components">Коллекция выделяемых компонентов.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary>Выделяет компоненты из заданной коллекции компонентов, которые соответствуют указанному типу выделения.</summary>
      <param name="components">Коллекция выделяемых компонентов.</param>
      <param name="selectionType">Значение из перечисления <see cref="T:System.ComponentModel.Design.SelectionTypes" />. Значение по умолчанию — <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary>Предоставляет контейнер для служб.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>Добавляет заданную службу в контейнер служб.</summary>
      <param name="serviceType">Тип добавляемой службы.</param>
      <param name="callback">Объект обратного вызова, используемый для создания службы. Это позволяет объявить службу доступной, однако создание объекта откладывается до запроса службы.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>Добавляет заданную службу в контейнер служб и дополнительно распространяет ее в родительские контейнеры служб.</summary>
      <param name="serviceType">Тип добавляемой службы.</param>
      <param name="callback">Объект обратного вызова, используемый для создания службы. Это позволяет объявить службу доступной, однако создание объекта откладывается до запроса службы.</param>
      <param name="promote">Значение <see langword="true" />, если этот запрос следует распространить во все родительские контейнеры служб; в противном случае — <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary>Добавляет заданную службу в контейнер служб.</summary>
      <param name="serviceType">Тип добавляемой службы.</param>
      <param name="serviceInstance">Экземпляр добавляемого типа службы. Данный объект должен реализовывать или наследовать тип, определяемый параметром <paramref name="serviceType" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>Добавляет заданную службу в контейнер служб и дополнительно распространяет ее во все родительские контейнеры служб.</summary>
      <param name="serviceType">Тип добавляемой службы.</param>
      <param name="serviceInstance">Экземпляр добавляемого типа службы. Данный объект должен реализовывать или наследовать тип, определяемый параметром <paramref name="serviceType" />.</param>
      <param name="promote">Значение <see langword="true" />, если этот запрос следует распространить во все родительские контейнеры служб; в противном случае — <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary>Удаляет службы указанного типа из контейнера служб.</summary>
      <param name="serviceType">Тип удаляемой службы.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>Удаляет заданный тип службы из контейнера служб и дополнительно распространяет службу в родительские контейнеры служб.</summary>
      <param name="serviceType">Тип удаляемой службы.</param>
      <param name="promote">Значение <see langword="true" />, если этот запрос следует распространить во все родительские контейнеры служб; в противном случае — <see langword="false" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary>Предоставляет поддержку для создания набора связанных пользовательских конструкторов.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary>Возвращает коллекцию дочерних конструкторов.</summary>
      <returns>Коллекция <see cref="T:System.Collections.ICollection" />, содержащая коллекцию дочерних объектов интерфейса <see cref="T:System.ComponentModel.Design.IDesigner" /> текущего конструкторов.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary>Возвращает родительский конструктор.</summary>
      <returns>Интерфейс <see cref="T:System.ComponentModel.Design.IDesigner" />, представляющий родительский интерфейс, либо интерфейс <see langword="null" />, если родительский объект отсутствует.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary>Предоставляет интерфейс для изменения набора дескрипторов элементов для компонента в режиме разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Фильтрует атрибуты, предоставляемые компонентом через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component">Компонент, атрибуты которого необходимо отфильтровать.</param>
      <param name="attributes">Словарь атрибутов, которые можно изменить.</param>
      <returns>Значение <see langword="true" />, если набор отфильтрованных атрибутов должен быть помещен в кэш; значение <see langword="false" />, если служба фильтрации должна снова сделать запрос.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Фильтрует события, предоставляемые компонентом через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component">Компонент, для которого необходимо отфильтровать события.</param>
      <param name="events">Словарь событий, которые можно изменить.</param>
      <returns>Значение <see langword="true" />, если набор отфильтрованных событий должен быть помещен в кэш; значение <see langword="false" />, если служба фильтрации должна снова сделать запрос.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Фильтрует свойства, предоставляемые компонентом через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component">Компонент, для которого необходимо отфильтровать свойства.</param>
      <param name="properties">Словарь свойств, которые можно изменить.</param>
      <returns>Значение <see langword="true" />, если набор отфильтрованных свойств должен быть помещен в кэш; значение <see langword="false" />, если служба фильтрации должна снова сделать запрос.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary>Выявляет доступные типы времени разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary>Извлекает список доступных типов.</summary>
      <param name="baseType">Базовый тип для выполнения сравнения. Может иметь значение <see langword="null" />.</param>
      <param name="excludeGlobalTypes">Указывает, должны проверяться типы из всех базовых сборок.</param>
      <returns>Коллекция типов, которые соответствует критериям, определенным параметрами <paramref name="baseType" /> и <paramref name="excludeGlobalTypes" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary>Предоставляет интерфейс для извлечения сборки или типа по имени.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary>Получает запрошенную сборку.</summary>
      <param name="name">Имя извлекаемой сборки.</param>
      <returns>Экземпляр запрошенной сборки, либо значение <see langword="null" />, если сборку найти невозможно.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary>Получает запрошенную сборку.</summary>
      <param name="name">Имя извлекаемой сборки.</param>
      <param name="throwOnError">Значение <see langword="true" />, если этот метод должен создать исключение в случае, если сборка не может быть найдена; в противном случае — <see langword="false" />. Метод возвращает значение <see langword="null" />, если сборку найти невозможно.</param>
      <returns>Экземпляр запрошенной сборки, либо значение <see langword="null" />, если сборку найти невозможно.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary>Возвращает путь к файлу, из которого загружена сборка.</summary>
      <param name="name">Имя сборки.</param>
      <returns>Путь к файлу, из которого загружена сборка.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary>Загружает тип с указанным именем.</summary>
      <param name="name">Имя типа. Если имя типа не является полным именем, определяющим сборку, служба будет выполнять поиск внутреннего набора сборок, на которые существуют ссылки.</param>
      <returns>Экземпляр класса <see cref="T:System.Type" />, соответствующий указанному имени, или значение <see langword="null" />, если тип найти невозможно.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary>Загружает тип с указанным именем.</summary>
      <param name="name">Имя типа. Если имя типа не является полным именем, определяющим сборку, служба будет выполнять поиск внутреннего набора сборок, на которые существуют ссылки.</param>
      <param name="throwOnError">Значение <see langword="true" />, если этот метод должен создать исключение в случае, если сборка не может быть найдена; в противном случае — <see langword="false" />. Метод возвращает значение <see langword="null" />, если сборку найти невозможно.</param>
      <returns>Экземпляр класса <see cref="T:System.Type" />, соответствующий указанному имени, или значение <see langword="null" />, если тип найти невозможно.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Загружает тип с указанным именем.</summary>
      <param name="name">Имя типа. Если имя типа не является полным именем, определяющим сборку, служба будет выполнять поиск внутреннего набора сборок, на которые существуют ссылки.</param>
      <param name="throwOnError">Значение <see langword="true" />, если этот метод должен создать исключение в случае, если сборка не может быть найдена; в противном случае — <see langword="false" />. Метод возвращает значение <see langword="null" />, если сборку найти невозможно.</param>
      <param name="ignoreCase">Значение <see langword="true" />, чтобы не учитывать регистр при поиске типов; в противном случае — значение <see langword="false" />.</param>
      <returns>Экземпляр класса <see cref="T:System.Type" />, соответствующий указанному имени, или значение <see langword="null" />, если тип найти невозможно.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary>Добавляет ссылку на указанную сборку.</summary>
      <param name="name">Класс <see cref="T:System.Reflection.AssemblyName" />, определяющий сборку, на которую нужно установить ссылку.</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary>Представляет меню Windows или команду панели инструментов.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.MenuCommand" />.</summary>
      <param name="handler">Событие, вызываемое при выборе пользователем команды меню или нажатии кнопки панели инструментов.</param>
      <param name="command">Уникальный идентификатор команды, связывающий данную команду меню с меню среды.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary>Получает или задает значение, указывающее, отмечена ли данная команда меню.</summary>
      <returns>Значение <see langword="true" />, если команда отмечена флажком; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary>Возникает при изменении команды меню.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary>Получает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" />, связанный с данной командой меню.</summary>
      <returns>Идентификатор <see cref="T:System.ComponentModel.Design.CommandID" />, связанный с данной командой меню.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary>Получает значение, показывающее, доступна ли данная команда меню.</summary>
      <returns>Значение <see langword="true" />, если команда включена; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary>Вызывает команду.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary>Вызывает команду с заданным параметром.</summary>
      <param name="arg">Дополнительный аргумент для команды.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary>Получает код состояния команды OLE для данной команды меню.</summary>
      <returns>Целочисленное значение, содержащее сочетание флагов состояний, отражающих состояние данной команды меню.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary>Вызывает событие <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" />.</summary>
      <param name="e">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary>Возвращает открытые свойства, сопоставленные объекту <see cref="T:System.ComponentModel.Design.MenuCommand" />.</summary>
      <returns>Словарь <see cref="T:System.Collections.IDictionary" />, содержащий открытые свойства объекта <see cref="T:System.ComponentModel.Design.MenuCommand" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary>Получает или задает значение, показывающее, поддерживается ли данная команда меню.</summary>
      <returns>Значение <see langword="true" />, если команда поддерживается (это значение установлено по умолчанию); в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary>Возвращает строковое представление данной команды меню.</summary>
      <returns>Строка, содержащая значение свойства <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" />, дополненного именами всех установленных флагов, разделенными вертикальной чертой "|". Эти свойства флагов включают свойства <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /> и <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary>Возвращает или задает значение, указывающее, отображается ли данная команда меню.</summary>
      <returns>Значение <see langword="true" />, если команда отображается на экране; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary>Определяет идентификаторы, показывающие тип выделения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary>Представляет выбор для добавления, при котором выбранные компоненты добавляются в текущее выделение с сохранением текущего набора выбранных компонентов.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary>Представляет обычное выделение. Служба выбора реагирует на нажатие клавиш CTRL and SHIFT для поддержки добавления или удаления компонентов выделения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary>Представляет выделение, возникающее при щелчке компонента пользователем. Если вновь выделенный компонент уже выделен, это выделение не снимается, а компонент становится основным выделенным компонентом.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary>Представляет выделение, возникающее при нажатии пользователем кнопки мыши, когда указатель мыши расположен на компоненте. Если этот компонент уже выделен, выделение не снимается, а компонент становится основным выделенным компонентом.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary>Представляет выделение, возникающее при отпускании кнопки мыши сразу после того как компонент был выделен. Если вновь выделенный компонент уже выделен, это выделение не снимается, а компонент становится основным выделенным компонентом.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary>Представляет обычное выделение. Служба выбора реагирует на нажатие клавиш CTRL and SHIFT для поддержки добавления или удаления компонентов выделения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary>Представляет основное выделение, возникающее при щелчке компонента пользователем. Если компонент в списке выбора ужа выбран, этот компонент становится основным выбранным компонентом.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary>Представляет выбор для удаления, при котором выбранные компоненты удаляются из текущего выделения с сохранением текущего набора выбранных компонентов.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary>Представляет выделение, возникающее при замещении содержимого выделения. Служба выбора заменяет текущее выделение на новое.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary>Представляет выделение переключения, при котором выполняется переключение между текущим выделением и предоставленным выделением. Если компонент уже выбран и передается в объект <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> с типом выделения <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" />, выбор компонента будет отменен.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary>Определяет допустимые типы выделений как поле <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" /> или <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary>Предоставляет базовый класс для сериализации набора компонентов или сериализуемых объектов в хранилище сериализации.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary>Создает новый экземпляр <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
      <returns>Новое хранилище сериализованных объектов.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary>Выполняет десериализацию заданного хранилища для создания коллекции объектов.</summary>
      <param name="store">Объект <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, предназначенный для выполнения десериализации.</param>
      <returns>Коллекция объектов, созданная в соответствии с состоянием хранения.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="store" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="store" /> не содержит данных в формате обработки контейнера сериализации.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>Выполняет десериализацию заданного хранилища и заполняет заданное хранилище <see cref="T:System.ComponentModel.IContainer" /> десериализованными объектами <see cref="T:System.ComponentModel.IComponent" />.</summary>
      <param name="store">Объект <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, предназначенный для выполнения десериализации.</param>
      <param name="container">Класс <see cref="T:System.ComponentModel.IContainer" />, в который будут добавляться объекты <see cref="T:System.ComponentModel.IComponent" />.</param>
      <returns>Коллекция объектов, созданная в соответствии с состоянием хранения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="store" /> или <paramref name="container" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="store" /> не содержит данных в формате обработки контейнера сериализации.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>Выполняет десериализацию заданного объекта <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> в заданный контейнер.</summary>
      <param name="store">Объект <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, предназначенный для выполнения десериализации.</param>
      <param name="container">Контейнер, в который добавляются объекты <see cref="T:System.ComponentModel.IComponent" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="store" /> или <paramref name="container" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="store" /> не содержит данных в формате обработки контейнера сериализации.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary>Выполняет десериализацию заданного объекта <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> в заданный контейнер (при необходимости выполняется проверка очищенных типов).</summary>
      <param name="store">Объект <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, предназначенный для выполнения десериализации.</param>
      <param name="container">Контейнер, в который добавляются объекты <see cref="T:System.ComponentModel.IComponent" />.</param>
      <param name="validateRecycledTypes">Значение <see langword="true" /> гарантирует, что в процессе десериализации используется объект того же типа.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="store" /> или <paramref name="container" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="store" /> не содержит данных в формате обработки контейнера сериализации.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary>Выполняет десериализацию заданного объекта <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> в заданный контейнер (при необходимости применяются значения свойств по умолчанию).</summary>
      <param name="store">Объект <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, предназначенный для выполнения десериализации.</param>
      <param name="container">Контейнер, в который добавляются объекты <see cref="T:System.ComponentModel.IComponent" />.</param>
      <param name="validateRecycledTypes">Значение <see langword="true" /> гарантирует, что в процессе десериализации используется объект того же типа.</param>
      <param name="applyDefaults">Значение <see langword="true" /> указывает, что используются значения свойств по умолчанию.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="store" /> или <paramref name="container" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="store" /> не содержит данных в формате обработки контейнера сериализации.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary>Загружает хранилище <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> из потока.</summary>
      <param name="stream">Поток <see cref="T:System.IO.Stream" />, из которого загружается хранилище.</param>
      <returns>Новый экземпляр <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="stream" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="stream" /> не содержит данных, сохраненных при предыдущем вызове в метод <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>Выполняет сериализацию заданного объекта в заданное хранилище <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
      <param name="store">Класс <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, в который будет записано состояние параметра <paramref name="value" />.</param>
      <param name="value">Объект для сериализации.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="store" /> или <paramref name="value" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="store" /> закрыт или параметр <paramref name="store" /> не поддерживается типом хранилища сериализации. Используйте хранилище, возвращенное методом <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>Выполняет сериализацию заданного объекта, учитывая значения свойств по умолчанию.</summary>
      <param name="store">Класс <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, в который будет выполнена сериализация состояния параметра <paramref name="value" />.</param>
      <param name="value">Объект для сериализации.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="store" /> или <paramref name="value" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="store" /> закрыт или параметр <paramref name="store" /> не поддерживается типом хранилища сериализации. Используйте хранилище, возвращенное методом <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Сериализует заданный элемент в заданном объекте.</summary>
      <param name="store">Класс <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, в который будет выполнена сериализация состояния параметра <paramref name="member" />.</param>
      <param name="owningObject">Объект, к которому привязывается параметр <paramref name="member" />.</param>
      <param name="member">Объект <see cref="T:System.ComponentModel.MemberDescriptor" />, указывающий член для сериализации.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="store" /> или <paramref name="value" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="store" /> закрыт или параметр <paramref name="store" /> не поддерживается типом хранилища сериализации. Используйте хранилище, возвращенное методом <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Выполняет сериализацию заданного элемента в заданный объект, учитывая значение свойства по умолчанию.</summary>
      <param name="store">Класс <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, в который будет выполнена сериализация состояния параметра <paramref name="member" />.</param>
      <param name="owningObject">Объект, к которому привязывается параметр <paramref name="member" />.</param>
      <param name="member">Элемент для сериализации.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="store" /> или <paramref name="value" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="store" /> закрыт или параметр <paramref name="store" /> не поддерживается типом хранилища сериализации. Используйте хранилище, возвращенное методом <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary>Содержит объект стека, который может использоваться сериализатором для обеспечения доступности данных вложенным сериализаторам.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary>Добавляет объект в конец стека, но не отправляет его на верх стека.</summary>
      <param name="context">Контекстный объект, добавленный в стек.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="context" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary>Возвращает текущий объект в стеке.</summary>
      <returns>Текущий объект в стеке или значение <see langword="null" />, если в стек не отправлено ни одного объекта.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary>Возвращает объект стека на указанном уровне.</summary>
      <param name="level">Уровень, с которого загружается объект стека. Уровень 0 является верхним в стеке, за ним идет уровень 1 и т. д. Этот уровень должен быть 0 или выше. Если уровень больше, чем количество уровней в стеке, возвращается значение <see langword="null" />.</param>
      <returns>Объект в стеке на указанном уровне или значение <see langword="null" />, если на уровне нет объектов.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="level" /> меньше 0.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary>Возвращает первый объект стека, который наследует или использует заданный тип.</summary>
      <param name="type">Тип, загружаемый из контекстного стека.</param>
      <returns>Первый объект стека, который наследует или использует заданный тип, либо значение <see langword="null" />, если тип не используется ни одним из объектов стека.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="type" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary>Удаляет текущий объект из стека, возвращая его значение.</summary>
      <returns>Удаленный из стека объект; значение <see langword="null" />, если в стеке нет объектов.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary>Отправляет или помещает указанный объект в стек.</summary>
      <param name="context">Контекстный объект, отправленный в стек.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> — <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary>Атрибут <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> размещается в сериализатор для обозначения класса, используемого в качестве поставщика по умолчанию данного типа сериализатора.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> с именованным типом поставщика.</summary>
      <param name="providerTypeName">Имя типа поставщика сериализации.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerTypeName" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> с заданным типом поставщика.</summary>
      <param name="providerType">Класс <see cref="T:System.Type" /> поставщика сериализации.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="providerType" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary>Возвращает имя типа поставщика сериализации.</summary>
      <returns>Строка, содержащая название поставщика.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary>Предоставляет основной интерфейс загрузчика конструктора, используемый для реализации пользовательского загрузчика конструктора.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary>Начинает загрузку конструктора.</summary>
      <param name="host">узел загрузчика, через который происходит загрузка компонентов.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary>Освобождает все ресурсы, занятые модулем <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary>Записывает изменения в кэше в то расположение, из которого был загружен конструктор.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary>Возвращает значение, определяющее, загружается ли документ загрузчиком.</summary>
      <returns>Значение <see langword="true" />, если документ загружается загрузчиком; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>Обозначает сериализатор, использующийся диспетчером сериализации при сериализации значений типа, к которому применяется данный атрибут. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerTypeName">Полное имя типа данных сериализатора.</param>
      <param name="baseSerializerTypeName">Полное имя базового типа данных сериализатора. Поскольку сериализаторы имеют различные базовые типы, классу может быть предоставлено несколько сериализаторов.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerTypeName">Полное имя типа данных сериализатора.</param>
      <param name="baseSerializerType">Базовый тип данных сериализатора. Поскольку сериализаторы имеют различные базовые типы, классу может быть предоставлено несколько сериализаторов.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerType">Тип данных сериализатора.</param>
      <param name="baseSerializerType">Базовый тип данных сериализатора. Поскольку сериализаторы имеют различные базовые типы, классу может быть предоставлено несколько сериализаторов.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>Получает полное имя базового типа сериализатора.</summary>
      <returns>Полное имя базового типа сериализатора.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>Получает полное имя типа сериализатора.</summary>
      <returns>Полное имя типа сериализатора.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId">
      <summary>Указывает уникальный идентификатор для атрибута данного типа.</summary>
      <returns>Уникальный идентификатор для атрибута данного типа.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary>Предоставляет интерфейс, позволяющий расширить узел конструктора для обеспечения загрузки из сериализованного состояния.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary>Прекращает операцию загрузки конструктора.</summary>
      <param name="baseClassName">Полное имя базового класса документа, создаваемого конструктором.</param>
      <param name="successful">Значение <see langword="true" />, если конструктор загружен успешно; в противном случае — <see langword="false" />.</param>
      <param name="errorCollection">Коллекция ошибок, возникших при загрузке. Если ошибок нет, передается либо пустая коллекция, либо значение <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary>Перезагружает документ проекта.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary>Предоставляет интерфейс для расширения <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />, чтобы указать, допускаются ли ошибки в процессе загрузки документа проекта.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary>Возвращает или задает значение, указывающее, возможна ли повторная загрузка с ошибками.</summary>
      <returns>Значение <see langword="true" />, если загрузчик конструктора может выполнить повторную загрузку документа проекта с обнаруженными ошибками; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary>Возвращает или задает значение, указывающее, следует ли игнорировать ошибки при вызове метода <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" />.</summary>
      <returns>Значение <see langword="true" />, если загрузчик конструктора игнорирует ошибки при загрузке; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary>Предоставляет интерфейс, позволяющий расширить загрузчик конструктора для обеспечения асинхронной загрузки внешних компонентов.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary>Регистрирует внешний компонент как часть процесса загрузки под управлением данного интерфейса.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary>Посылает сигнал о завершении зависимой загрузки.</summary>
      <param name="successful">Значение <see langword="true" />, если загрузка конструктора прошла успешно; значение <see langword="false" />, если возникли ошибки и загрузка не завершена.</param>
      <param name="errorCollection">Коллекция ошибок, возникших при загрузке. Если ошибок нет, передается либо пустая коллекция, либо значение <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary>Перезагружает документ проекта.</summary>
      <returns>Значение <see langword="true" />, если принят запрос о перезагрузке, либо значение <see langword="false" />, если перезагрузка запрещена.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary>Предоставляет интерфейс для управления сериализацией во время разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Добавляет диспетчеру сериализации заданный поставщик сериализации.</summary>
      <param name="provider">Добавляемый поставщик сериализации.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary>Получает стековую, определяемую пользователем область памяти, которая используется для взаимодействия сериализаторов.</summary>
      <returns>Класс <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />, где хранятся данные.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>Создает экземпляр указанного типа, и добавляет его в сборник именованных экземпляров.</summary>
      <param name="type">Создаваемый тип данных.</param>
      <param name="arguments">Аргументы, передаваемые конструктору для данного типа.</param>
      <param name="name">Имя объекта. Это имя используется для доступа к объекту через класс <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />. Если передается значение <see langword="null" />, объект создается, но к нему нельзя получить доступ по имени.</param>
      <param name="addToContainer">При значении <see langword="true" /> объект добавляется в контейнер проекта. Для этого объект должен реализовать класс <see cref="T:System.ComponentModel.IComponent" />.</param>
      <returns>Вновь созданный экземпляр объекта.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary>Получает экземпляр созданного объекта с указанным именем либо значение <see langword="null" />, если объект не существует.</summary>
      <param name="name">Имя загружаемого объекта.</param>
      <returns>Экземпляр объекта с заданным именем либо значение <see langword="null" />, если не удается найти объект с указанным именем.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary>Получает имя указанного объекта или значение <see langword="null" />, если у объекта нет имени.</summary>
      <param name="value">Объект, для которого получается имя.</param>
      <returns>Имя объекта или значение <see langword="null" />, если у объекта нет имени.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>Получает сериализатор запрошенного типа для указанного типа объекта.</summary>
      <param name="objectType">Тип объекта, для которого получается сериализатор.</param>
      <param name="serializerType">Тип загружаемого сериализатора.</param>
      <returns>Экземпляр запрошенного типа или значение <see langword="null" />, если не удается найти соответствующий сериализатор.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary>Возвращает тип указанного имени.</summary>
      <param name="typeName">Полное имя загружаемого типа.</param>
      <returns>Экземпляр типа или значение <see langword="null" />, если не удается загрузить тип.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary>Определяет настраиваемые свойства, которые могут быть сериализованы с помощью доступных сериализаторов.</summary>
      <returns>Класс <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащий свойства, подлежащие сериализации.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Удаляет пользовательский поставщик сериализации из диспетчера сериализации.</summary>
      <param name="provider">Удаляемый поставщик. Этот объект должен добавляться с помощью метода <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary>Сообщает об ошибке в сериализации.</summary>
      <param name="errorInformation">Ошибка. Этот объект данных может принадлежать к любому типу объектов. Если это исключение, пользователь получает сообщение об исключении. Если объект другого типа, то для представления информации пользователю вызывается метод <see cref="M:System.Object.ToString" />.</param>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary>Возникает, если не удается найти заданное имя в таблице имен диспетчера сериализации с помощью метода <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary>Возникает при завершении сериализации.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary>Задает имя указанного существующего объекта.</summary>
      <param name="instance">Экземпляр объекта, которому необходимо задать имя.</param>
      <param name="name">Имя экземпляра.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary>Предоставляет интерфейс, позволяющий получать доступ к сериализатору.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary>Получает сериализатор с помощью указанных атрибутов.</summary>
      <param name="manager">Диспетчер сериализации, запрашивающий сериализатор.</param>
      <param name="currentSerializer">Экземпляр текущего сериализатора указанного типа. Может иметь значение <see langword="null" />, если сериализатор указанного типа не существует.</param>
      <param name="objectType">Тип данных объекта сериализации.</param>
      <param name="serializerType">Тип данных создаваемого сериализатора.</param>
      <returns>Экземпляр сериализатора запрошенного типа или значение <see langword="null" />, если не удалось выполнить запрос.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary>Предоставляет интерфейс для вызова процессов сериализации и десериализации.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary>Выполняет десериализацию указанного объекта данных сериализации и возвращает коллекцию объектов, представляемых этими данными.</summary>
      <param name="serializationData">Объект, состоящий из сериализованных данных.</param>
      <returns>Класс <see cref="T:System.Collections.ICollection" /> объектов, восстановленных из указанного объекта данных сериализации.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary>Выполняет сериализацию указанной коллекции объектов и сохраняет их в объекте данных сериализации.</summary>
      <param name="objects">Коллекция объектов, которые необходимо сериализовать.</param>
      <returns>Объект, содержащий сериализованное состояние указанной коллекции объектов.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary>Предоставляет службу для генерации уникальных имен объектов.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary>Создает новое имя, которое уникально для всех компонентов в указанном контейнере.</summary>
      <param name="container">Контейнер, в который добавляется новый объект.</param>
      <param name="dataType">Тип данных объекта, которому возвращается имя.</param>
      <returns>Уникальное имя типа данных.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary>Возвращает значение, определяющее, является ли указанное имя допустимым.</summary>
      <param name="name">Имя для проверки.</param>
      <returns>Значение <see langword="true" />, если имя является допустимым; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary>Возвращает значение, определяющее, является ли указанное имя допустимым.</summary>
      <param name="name">Имя для проверки.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary>Предоставляет необходимые сведения для создания экземпляра объекта. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, используя сведения и аргументы указанного элемента.</summary>
      <param name="member">Сведения элемента для дескриптора. Это может быть класс <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> или <see cref="T:System.Reflection.PropertyInfo" />. Если это класс — <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> или <see cref="T:System.Reflection.PropertyInfo" />, представляется элемент <see langword="static" />.</param>
      <param name="arguments">Коллекция аргументов, передаваемый элементу. Параметр принимает значение <see langword="null" /> или является пустой коллекцией, если аргументы отсутствуют. Коллекция может также содержать другие экземпляры класса <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> или <see cref="T:System.Reflection.PropertyInfo" /> и не представляет участника <see langword="static" />.

или -
Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.PropertyInfo" /> и не является считываемым.

-или-
Параметр <paramref name="member" /> имеет тип <see cref="T:System.Reflection.MethodInfo" /> или <see cref="T:System.Reflection.ConstructorInfo" />, а число аргументов в <paramref name="arguments" /> не соответствует сигнатуре объекта <paramref name="member" />.

или -

Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.ConstructorInfo" /> и представляет участника <see langword="static" />.

или -
Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.FieldInfo" />, а число аргументов в <paramref name="arguments" /> не равно нулю.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, используя сведения указанного элемента, аргументы и значение, показывающее полноту описания экземпляра указанными сведениями.</summary>
      <param name="member">Сведения элемента для дескриптора. Это может быть класс <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> или <see cref="T:System.Reflection.PropertyInfo" />. Если это класс — <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> или <see cref="T:System.Reflection.PropertyInfo" />, представляется элемент <see langword="static" />.</param>
      <param name="arguments">Коллекция аргументов, передаваемый элементу. Параметр принимает значение <see langword="null" /> или является пустой коллекцией, если аргументы отсутствуют. Коллекция может также содержать другие экземпляры класса <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
      <param name="isComplete">Значение <see langword="true" />, если указанные сведения полностью описывают экземпляр; в противном случае — <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> или <see cref="T:System.Reflection.PropertyInfo" /> и не представляет участника <see langword="static" />
Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.PropertyInfo" /> и не является считываемым.
Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.MethodInfo" /> или <see cref="T:System.Reflection.ConstructorInfo" />, а число аргументов в <paramref name="arguments" /> не соответствует подписи параметра <paramref name="member" />.
Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.ConstructorInfo" /> и представляет участника <see langword="static" />
Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.FieldInfo" />, а число аргументов в <paramref name="arguments" /> не равно нулю.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary>Возвращает коллекцию аргументов, который можно использовать для восстановления экземпляра объекта, представляемого данным дескриптором экземпляра.</summary>
      <returns>Коллекция аргументов <see cref="T:System.Collections.ICollection" />, используемый для создания объекта.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary>Вызывает дескриптор экземпляра и возвращает объект, который он описывает.</summary>
      <returns>Объект, который описывается дескриптором данного экземпляра.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary>Возвращает значение, показывающее полноту определения экземпляра содержимым класса <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</summary>
      <returns>Значение <see langword="true" />, если описание экземпляра полное; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary>Возвращает сведения элемента, описывающие экземпляр, с которым связан данный дескриптор.</summary>
      <returns>Класс <see cref="T:System.Reflection.MemberInfo" />, описывающий экземпляр, с которым связан данный объект.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary>Представляет одиночную связь между объектом и элементом.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</summary>
      <param name="owner">Объект, являющийся владельцем элемента <paramref name="member" />.</param>
      <param name="member">Элемент, связанный с владельцем <paramref name="owner" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="owner" /> или <paramref name="member" /> — <see langword="null" />.</exception>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary>Представляет связь пустого элемента. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary>Определяет, равны ли два экземпляра <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</summary>
      <param name="obj">Объект <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />, с которым сравнивается текущий объект <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</param>
      <returns>Значение <see langword="true" />, если указанный объект <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> равен текущему объекту <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary>Возвращает значение, указывающее, соответствует ли эта связь связи <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />.</summary>
      <returns>Значение <see langword="true" />, если эта связь соответствует связи <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary>Возвращает связанный элемент.</summary>
      <returns>Элемент, передаваемый в метод <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Проверяет эквивалентность двух указанных структур <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</summary>
      <param name="left">Структура <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />, которая находится слева от оператора равенства.</param>
      <param name="right">Структура <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />, которая находится справа от оператора равенства.</param>
      <returns>Этот оператор возвращает значение <see langword="true" />, если две структуры <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Проверяет различие двух указанных структур <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</summary>
      <param name="left">Структура <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />, которая находится слева от оператора неравенства.</param>
      <param name="right">Структура <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />, которая находится справа от оператора неравенства.</param>
      <returns>Этот оператор возвращает значение <see langword="true" />, если две структуры <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> различны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary>Возвращает владеющий объект.</summary>
      <returns>Владеющий объект, передаваемый в метод <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary>Предоставляет базовый класс для соотношения элементов друг с другом.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Устанавливает связь для заданной исходной связи.</summary>
      <param name="source">Исходная связь.</param>
      <returns>Связь с <paramref name="source" />, или <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />, если связи не существует.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Устанавливает связь между источником и целевым объектом.</summary>
      <param name="source">Исходная связь. Это левая сторона при назначении связи.</param>
      <returns>Текущая связь соотносится со значением параметра <paramref name="source" /> или <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />, если связь отсутствует.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="source" /> пустое, или связь не поддерживается службой.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Устанавливает связь между источником и целевым объектом.</summary>
      <param name="sourceOwner">Владелец исходной связи.</param>
      <param name="sourceMember">Элемент исходной связи.</param>
      <returns>Структура <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />, инкапсулирующая связь между исходным и целевым объектом, или значение <see langword="null" />, если связь отсутствует.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="sourceOwner" /> или <paramref name="sourceMember" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="sourceOwner" /> или <paramref name="sourceMember" /> пустое, или связь не поддерживается службой.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Создает связь между исходным объектом и целевой связью.</summary>
      <param name="source">Исходная связь.</param>
      <param name="relationship">Связь для источника.</param>
      <exception cref="T:System.ArgumentException">Связь не поддерживается службой.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Возвращает значение, определяющее, поддерживается ли заданная связь.</summary>
      <param name="source">Исходная связь.</param>
      <param name="relationship">Связь для источника.</param>
      <returns>Значение <see langword="true" />, если поддерживается связь между двумя заданными объектами; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary>Предоставляет данные для события <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />.</summary>
      <param name="name">Имя для сопоставления.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary>Возвращает имя сопоставляемого объекта.</summary>
      <returns>Имя сопоставляемого объекта.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary>Возвращает или задает объект, соответствующий имени.</summary>
      <returns>Объект, с которым связано это имя.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary>Представляет метод, обрабатывающий событие <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> диспетчера сериализации.</summary>
      <param name="sender">Источник события.</param>
      <param name="e">Объект <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary>Определяет базовый сериализатор для объекта корневого конструктора. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> с помощью указанных атрибутов.</summary>
      <param name="serializerTypeName">Полное имя типа данных сериализатора.</param>
      <param name="baseSerializerTypeName">Имя базового типа сериализатора. Класс может содержать несколько сериализаторов, если их базовые типы отличаются друг от друга.</param>
      <param name="reloadable">Значение <see langword="true" />, если сериализатор поддерживает динамическую перезагрузку документа; в противном случае — <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> с помощью указанных атрибутов.</summary>
      <param name="serializerTypeName">Полное имя типа данных сериализатора.</param>
      <param name="baseSerializerType">Имя базового типа сериализатора. Класс может содержать несколько сериализаторов, если их базовые типы отличаются друг от друга.</param>
      <param name="reloadable">Значение <see langword="true" />, если сериализатор поддерживает динамическую перезагрузку документа; в противном случае — <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> с помощью указанных атрибутов.</summary>
      <param name="serializerType">Тип данных сериализатора.</param>
      <param name="baseSerializerType">Базовый тип сериализатора. Класс может содержать несколько сериализаторов, если их базовые типы отличаются друг от друга.</param>
      <param name="reloadable">Значение <see langword="true" />, если сериализатор поддерживает динамическую перезагрузку документа; в противном случае — <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary>Возвращает значение, обозначающее возможность поддержки корневым сериализатором перезагрузки документа проекта без предварительного удаления узла конструктора.</summary>
      <returns>Значение <see langword="true" />, если корневой сериализатор поддерживает перезагрузку; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>Получает полное имя типа базового типа сериализатора.</summary>
      <returns>Имя базового типа сериализатора.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary>Получает полное имя типа сериализатора.</summary>
      <returns>Имя типа сериализатора.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary>Получает уникальный идентификатор для атрибута данного типа.</summary>
      <returns>Объект с уникальным идентификатором для атрибута данного типа.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary>Предоставляет базовый класс для хранения данных сериализации компонента <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary>Закрывает хранилище сериализации.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, а при необходимости освобождает также управляемые ресурсы.</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить управляемые и неуправляемые ресурсы; значение <see langword="false" /> позволяет освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary>Возвращает коллекцию ошибок, которые возникли в процессе сериализации или десериализации.</summary>
      <returns>Коллекция <see cref="T:System.Collections.ICollection" />, содержащий ошибки, которые возникли в процессе сериализации или десериализации.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary>Сохраняет хранилище в заданный поток.</summary>
      <param name="stream">Поток, для которого необходимо сериализовать хранилище.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary>Освобождает все ресурсы, занятые модулем <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary>Предоставляет простую реализацию интерфейса <see cref="T:System.ComponentModel.Design.IServiceContainer" />. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.ComponentModel.Design.ServiceContainer" /> с использованием указанного родительского поставщика службы.</summary>
      <param name="parentProvider">Родительский поставщик службы.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>Добавляет заданную службу в контейнер служб.</summary>
      <param name="serviceType">Тип добавляемой службы.</param>
      <param name="callback">Объект обратного вызова, создающий службу. Это позволяет объявить службу как доступную, однако создание объекта откладывается до запроса службы.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="serviceType" /> или <paramref name="callback" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">В контейнере уже присутствует служба с типом <paramref name="serviceType" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>Добавляет заданную службу в контейнер служб.</summary>
      <param name="serviceType">Тип добавляемой службы.</param>
      <param name="callback">Объект обратного вызова, создающий службу. Это позволяет объявить службу как доступную, однако создание объекта откладывается до запроса службы.</param>
      <param name="promote">Значение <see langword="true" />, если эту службу следует добавить в любой родительский контейнер служб; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="serviceType" /> или <paramref name="callback" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">В контейнере уже присутствует служба с типом <paramref name="serviceType" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary>Добавляет заданную службу в контейнер служб.</summary>
      <param name="serviceType">Тип добавляемой службы.</param>
      <param name="serviceInstance">Экземпляр добавляемой службы. Данный объект должен реализовывать или наследовать тип, определяемый параметром <paramref name="serviceType" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="serviceType" /> или <paramref name="serviceInstance" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">В контейнере уже присутствует служба с типом <paramref name="serviceType" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>Добавляет заданную службу в контейнер служб.</summary>
      <param name="serviceType">Тип добавляемой службы.</param>
      <param name="serviceInstance">Экземпляр добавляемого типа службы. Данный объект должен реализовывать или наследовать тип, определяемый параметром <paramref name="serviceType" />.</param>
      <param name="promote">Значение <see langword="true" />, если эту службу следует добавить в любой родительский контейнер служб; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="serviceType" /> или <paramref name="serviceInstance" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">В контейнере уже присутствует служба с типом <paramref name="serviceType" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary>Возвращает службы по умолчанию, реализованные непосредственно классом <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</summary>
      <returns>Службы по умолчанию.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary>Удаляет данный контейнер служб.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary>Удаляет данный контейнер служб.</summary>
      <param name="disposing">Значение <see langword="true" />, если объект <see cref="T:System.ComponentModel.Design.ServiceContainer" /> находится в процессе удаления; в обратном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary>Возвращает запрашиваемую службу.</summary>
      <param name="serviceType">Тип возвращаемой службы.</param>
      <returns>Экземпляр службы, если ее удалось найти, в обратном случае — значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary>Удаляет службы указанного типа из контейнера служб.</summary>
      <param name="serviceType">Тип удаляемой службы.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="serviceType" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>Удаляет службы указанного типа из контейнера служб.</summary>
      <param name="serviceType">Тип удаляемой службы.</param>
      <param name="promote">Значение <see langword="true" />, если эту службу следует удалить из любого родительского контейнера служб; в противном случае — <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="serviceType" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary>Предоставляет механизм обратного вызова, с помощью которого выполняется создание экземпляра службы по запросу.</summary>
      <param name="container">Контейнер служб, выдающий запрос на создание службы.</param>
      <param name="serviceType">Тип создаваемой службы.</param>
      <returns>Служба, заданная параметром <paramref name="serviceType" />, либо значение <see langword="null" />, если не удалось выполнить создание службы.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary>Определяет идентификаторы для стандартного набора команд, доступных в большинстве приложений.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.StandardCommands" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды AlignBottom. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды AlignHorizontalCenters. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды AlignLeft. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды AlignRight. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды AlignToGrid. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды AlignTop. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды AlignVerticalCenters. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды ArrangeBottom. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды ArrangeIcons. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды ArrangeRight. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды BringForward. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды BringToFront. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды CenterHorizontally. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды CenterVertically. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Copy. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Cut. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Delete. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды "Структура документа". Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды F1Help. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Group. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary>Возвращает идетификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды HorizSpaceConcatenate. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды HorizSpaceDecrease. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды HorizSpaceIncrease. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды HorizSpaceMakeEqual. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды LineupIcons. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды LockControls. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды MultiLevelRedo. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды MultiLevelUndo. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Paste. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Properties. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды PropertiesWindow. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Redo. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Replace. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SelectAll. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SendBackward. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SendToBack. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды ShowGrid. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды ShowLargeIcons. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SizeToControl. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SizeToControlHeight. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SizeToControlWidth. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SizeToFit. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SizeToGrid. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SnapToGrid. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды TabOrder. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Undo. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Ungroup. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary>Получает первую команду из набора команд. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary>Получает последнюю команду из набора команд. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды VertSpaceConcatenate. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды VertSpaceDecrease. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды VertSpaceIncrease. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды VertSpaceMakeEqual. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды ViewCode. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary>Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды ViewGrid. Это поле доступно только для чтения.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary>Определяет идентификаторы GUID, относящиеся к стандартному набору окон инструментов, доступному в среде разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.StandardToolWindows" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary>Получает GUID для обозревателя объектов. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary>Получает GUID для окна вывода. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary>Получает GUID для обозревателя решений. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary>Получает GUID для окна свойств. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary>Получает GUID для фрейма дополнительных ссылок. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary>Получает GUID для обозревателя серверов. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary>Получает GUID для списка задач. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary>Получает GUID для панели инструментов. Это поле доступно только для чтения.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary>Поставщик описания типа для указанного типа.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary>Получает поставщик описания типа для указанного объекта.</summary>
      <param name="instance">Объект, для которого необходимо получить поставщик описания типа.</param>
      <returns>Объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, соответствующий значению параметра <paramref name="instance" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary>Получает поставщик описания типа для указанного типа.</summary>
      <param name="type">Тип, для которого необходимо получить поставщик описания типа.</param>
      <returns>Объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, соответствующий значению параметра <paramref name="type" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary>Определяет идентификаторы для набора технологий, поддерживаемых хостами конструкторов.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary>Задает поддержку используемой по умолчанию технологии представления.
Конструктор верхнего уровня может возвратить любой тип объекта, но этот объект должен быть совместим с адаптером для технологии узла. Среды размещения, такие как Visual Studio, предоставляют способ подключения новых адаптеров технологии представления. Объектом представления по умолчанию для конструктора Windows Forms является экземпляр <see cref="T:System.Windows.Forms.Control" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary>Представляет режим, при котором объект просмотра передается непосредственно в среду разработки.
Объект представления должен реализовывать любые интерфейсы, необходимые среде разработки. Среда разработки Visual Studio поддерживает объекты представления, представляющие собой элемент управления ActiveX, активный документ или объект, реализующий интерфейс IVsWindowPane, доступный по программе Visual Studio VSI (Visual Studio Integration). Среда разработки Visual Studio обеспечивает поддержку для этой технологии представления. Поддержка этой технологии представления необязательно доступна во всех средах разработки.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary>Представляет режим отображения базового конструктора с помощью объекта элемента управления Windows Forms. Узел конструктора заполняет окно документа среды разработки элементом управления Windows Forms.</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>Указывает класс, используемый для реализации служб времени разработки для компонента.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DesignerAttribute" />, используя указанное имя типа, предоставляющего службы времени разработки.</summary>
      <param name="designerTypeName">Объединение полного имени типа, предоставляющего службы времени разработки для компонента, с которым связан этот атрибут, и имени сборки, в которой находится этот тип.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DesignerAttribute" />, используя тип конструктора и базовый класс конструктора.</summary>
      <param name="designerTypeName">Объединение полного имени типа, предоставляющего службы времени разработки для компонента, с которым связан этот атрибут, и имени сборки, в которой находится этот тип.</param>
      <param name="designerBaseTypeName">Полное имя базового класса, который нужно связать с классом конструктора.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DesignerAttribute" />, используя имя класса конструктора и базовый класс конструктора.</summary>
      <param name="designerTypeName">Объединение полного имени типа, предоставляющего службы времени разработки для компонента, с которым связан этот атрибут, и имени сборки, в которой находится этот тип.</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" /> задает базовый класс, который нужно связать с параметром <paramref name="designerTypeName" />.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DesignerAttribute" />, используя указанный тип, предоставляющий службы времени разработки.</summary>
      <param name="designerType">
        <see cref="T:System.Type" />, представляющий класс, предоставляющий службы времени выполнения для компонента, с которым связан этот атрибут.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DesignerAttribute" />, используя тип конструктора и базовый класс конструктора.</summary>
      <param name="designerType">
        <see cref="T:System.Type" />, представляющий класс, предоставляющий службы времени выполнения для компонента, с которым связан этот атрибут.</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" /> задает базовый класс, который нужно связать с параметром <paramref name="designerType" />.</param>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>Возвращает имя базового типа конструктора.</summary>
      <returns>Имя базового типа конструктора.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>Возвращает имя типа конструктора, связанного с этим атрибутом конструктора.</summary>
      <returns>Имя типа конструктора, связанного с этим атрибутом конструктора.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.Equals(System.Object)">
      <summary>Возвращает значение, показывающее, равно ли значение данного объекта текущему атрибуту <see cref="T:System.ComponentModel.DesignerAttribute" />.</summary>
      <param name="obj">Объект, проверяемый на равенство.</param>
      <returns>Значение <see langword="true" />, если значение данного объекта равно значению текущего; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.TypeId">
      <summary>Получает уникальный идентификатор для атрибута данного типа.</summary>
      <returns>Уникальный идентификатор для атрибута данного типа.</returns>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary>Атрибут <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> помечает видимость компонента. Если установлено поле <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" />, этот компонент может быть отображен в визуальном конструкторе.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary>Создает новый атрибут <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> со значением по умолчанию <see langword="false" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary>Создает новый атрибут <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> со свойством <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" />, равным заданному значению параметра <paramref name="visible" />.</summary>
      <param name="visible">Значение, устанавливаемое для свойства <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" />.</param>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary>По умолчанию значение видимости — <see langword="Yes" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary>Возвращает значение, показывающее, равен ли экземпляр указанному объекту.</summary>
      <param name="obj">Объект для сравнения с этим экземпляром или пустая ссылка (<see langword="Nothing" /> в Visual Basic).</param>
      <returns>
        <see langword="true" />, если объект <paramref name="obj" /> типу и значению данного экземпляра; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary>Возвращает значение, показывающее, равен ли этот экземпляр значению <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" />.</summary>
      <returns>Значение <see langword="true" />, если этот экземпляр равен значению <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary>Помечает компонент как невидимый в визуальном конструкторе.</summary>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary>Возвращает или устанавливает значение, определяющее, должен ли компонент отображаться во время разработки.</summary>
      <returns>Значение <see langword="true" />, если компонент должен отображаться во время разработки, или значение <see langword="false" />, если не должен.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary>Помечает компонент как видимый в визуальном конструкторе.</summary>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary>Предоставляет преобразователь типов для преобразования объектов, являющихся числами с плавающей запятой с удвоенной точностью, в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DoubleConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>Указывает редактор, используемый для изменения свойства. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EditorAttribute" />, используя редактор по умолчанию, который не является редактором.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EditorAttribute" />, используя имя типа и имя базового типа редактора.</summary>
      <param name="typeName">Полное имя типа редактора.</param>
      <param name="baseTypeName">Полное имя типа базового класса или интерфейса, используемого в качестве ключа для поиска редактора. Это должен быть класс <see cref="T:System.Drawing.Design.UITypeEditor" /> или класс, производный от этого класса.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EditorAttribute" />, используя имя типа и базовый тип.</summary>
      <param name="typeName">Полное имя типа редактора.</param>
      <param name="baseType">Тип <see cref="T:System.Type" /> базового класса или интерфейса, используемого в качестве ключа для поиска редактора. Это должен быть класс <see cref="T:System.Drawing.Design.UITypeEditor" /> или класс, производный от этого класса.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EditorAttribute" />, используя тип и базовый тип.</summary>
      <param name="type">Объект <see cref="T:System.Type" />, представляющий тип редактора.</param>
      <param name="baseType">Тип <see cref="T:System.Type" /> базового класса или интерфейса, используемого в качестве ключа для поиска редактора. Это должен быть класс <see cref="T:System.Drawing.Design.UITypeEditor" /> или класс, производный от этого класса.</param>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>Возвращает имя базового класса или интерфейса, используемого в качестве ключа для поиска этого редактора.</summary>
      <returns>Имя базового класса или интерфейса, используемого в качестве ключа для поиска этого редактора.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>Возвращает имя класса редактора в формате <see cref="P:System.Type.AssemblyQualifiedName" />.</summary>
      <returns>Получает имя класса редактора в формате<see cref="P:System.Type.AssemblyQualifiedName" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.Equals(System.Object)">
      <summary>Возвращает значение, показывающее, равно ли значение данного объекта текущему атрибуту <see cref="T:System.ComponentModel.EditorAttribute" />.</summary>
      <param name="obj">Объект, проверяемый на равенство.</param>
      <returns>Значение <see langword="true" />, если значение данного объекта равно значению текущего объекта; в противном случае — значение <see langword="false" />, если нет.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.TypeId">
      <summary>Получает уникальный идентификатор для атрибута данного типа.</summary>
      <returns>Уникальный идентификатор для атрибута данного типа.</returns>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary>Предоставляет преобразователь типов для преобразования объектов <see cref="T:System.Enum" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EnumConverter" /> для данного типа.</summary>
      <param name="type">Тип <see cref="T:System.Type" />, представляющий тип перечисления, связываемый с этим преобразователем перечисления.</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в объект перечисления, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType">Тип <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Получает значение, показывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType">Объект <see cref="T:System.Type" />, представляющий тип, в который необходимо выполнить преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary>Возвращает интерфейс сравнения <see cref="T:System.Collections.IComparer" />, который может использоваться для выполнения сортировки значений перечисления.</summary>
      <returns>Объект <see cref="T:System.Collections.IComparer" /> для сортировки значений перечисления.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует заданный объект значения в объект перечисления.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Необязательный объект <see cref="T:System.Globalization.CultureInfo" />. Если не предоставляются, предполагается использование текущего языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
      <exception cref="T:System.FormatException">Значение <paramref name="value" /> не является допустимым значением для конечного типа.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразовывает указанное значение объекта в указанный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Необязательный объект <see cref="T:System.Globalization.CultureInfo" />. Если не предоставляются, предполагается использование текущего языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType">Тип <see cref="T:System.Type" />, к которому следует привести значение.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="value" /> не является допустимым значением перечисления.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary>Определяет тип перечислителя, с которым связан этот преобразователь.</summary>
      <returns>Определяет тип перечислителя, с которым связан этот преобразователь.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Получает коллекцию стандартных значений для того типа данных, для которого предназначен данный проверяющий элемент управления.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Класс <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, содержащий стандартный набор допустимых значений или значение <see langword="null" />, если этот тип данных не поддерживает стандартный набор значений.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, является ли список стандартных значений, возвращаемых методом <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />, исчерпывающим списком в заданном контексте.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, если коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, возвращенная методом <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />, является исчерпывающим списком возможных значений; значение <see langword="false" />, если возможны другие значения.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, поддерживает ли этот объект стандартный набор значений, которые можно выбрать из списка, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, поскольку для поиска набора значений, поддерживаемых объектом, необходимо вызвать метод <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Возвращает значение, показывающее, допустимо ли данное значение объекта для этого типа.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value">Объект <see cref="T:System.Object" /> для проверки.</param>
      <returns>Значение <see langword="true" />, если заданное значение допустимо для этого объекта; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary>Получает или задает коллекцию <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, определяющую возможные значения для перечисления.</summary>
      <returns>Коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, определяющая возможные значения для перечисления.</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary>Предоставляет сведения о событии.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EventDescriptor" />, используя имя и атрибуты заданного объекта <see cref="T:System.ComponentModel.MemberDescriptor" />.</summary>
      <param name="descr">Объект <see cref="T:System.ComponentModel.MemberDescriptor" />, содержащий имя события и его атрибуты.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EventDescriptor" />, используя имя в заданном дескрипторе <see cref="T:System.ComponentModel.MemberDescriptor" /> и атрибуты как в дескрипторе <see cref="T:System.ComponentModel.MemberDescriptor" />, так и в массиве <see cref="T:System.Attribute" />.</summary>
      <param name="descr">Объект <see cref="T:System.ComponentModel.MemberDescriptor" />, который содержит имя члена и его атрибуты.</param>
      <param name="attrs">Массив <see cref="T:System.Attribute" /> с атрибутами, которые нужно добавить в описание этого события.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EventDescriptor" />, используя указанные имя и массив атрибутов.</summary>
      <param name="name">Имя события.</param>
      <param name="attrs">Массив типа <see cref="T:System.Attribute" />, который содержит атрибуты события.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary>При переопределении в производном классе связывает событие с компонентом.</summary>
      <param name="component">Компонент, который передает события делегату.</param>
      <param name="value">Делегат, который представляет метод для обработки события.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary>При переопределении в производном классе возвращает тип компонента, с которым связано это событие.</summary>
      <returns>Тип <see cref="T:System.Type" />, представляющий тип компонента, с которым связано событие.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary>При переопределении в производном классе возвращает тип делегата для события.</summary>
      <returns>
        <see cref="T:System.Type" />, где представляется тип делегата для события.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary>При переопределении в производном классе возвращает значение, показывающее, является ли делегат события многоадресным.</summary>
      <returns>Значение <see langword="true" />, если делегат является многоадресным; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>При переопределении в производном классе разрывает связь делегата с компонентом и, таким образом, в дальнейшем делегат не будет получать события от компонента.</summary>
      <param name="component">Компонент, с которым связан делегат.</param>
      <param name="value">Делегат, связь которого с компонентом разрывается.</param>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.ComponentModel.EventDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EventDescriptorCollection" />, используя заданный массив объектов <see cref="T:System.ComponentModel.EventDescriptor" />.</summary>
      <param name="events">Массив типа <see cref="T:System.ComponentModel.EventDescriptor" />, предоставляющий события для данной коллекции.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EventDescriptorCollection" />, используя заданный массив объектов <see cref="T:System.ComponentModel.EventDescriptor" />. При необходимости для коллекции может быть установлен режим только для чтения.</summary>
      <param name="events">Массив типа <see cref="T:System.ComponentModel.EventDescriptor" />, предоставляющий события для данной коллекции.</param>
      <param name="readOnly">Значение <see langword="true" />, чтобы задать коллекцию только для чтения; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary>Добавляет объект <see cref="T:System.ComponentModel.EventDescriptor" /> в конец коллекции.</summary>
      <param name="value">Объект <see cref="T:System.ComponentModel.EventDescriptor" />, добавляемый в коллекцию.</param>
      <returns>Позиция объекта <see cref="T:System.ComponentModel.EventDescriptor" /> в коллекции.</returns>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary>Удаляет все объекты из коллекции.</summary>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary>Возвращает значение, показывающее, содержит ли коллекция данный дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> .</summary>
      <param name="value">Объект <see cref="T:System.ComponentModel.EventDescriptor" />, который требуется найти в коллекции.</param>
      <returns>Значение <see langword="true" />, если коллекция содержит указанный параметр <paramref name="value" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary>Возвращает число дескрипторов событий в коллекции.</summary>
      <returns>Число дескрипторов событий в коллекции.</returns>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary>Задает использование пустой коллекции вместо создания новой коллекции, не содержащей элементов. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>Возвращает описание события с указанным именем в коллекции.</summary>
      <param name="name">Имя события, извлекаемого из коллекции.</param>
      <param name="ignoreCase">Значение <see langword="true" />, если требуется игнорировать событие; в противном случае — значение <see langword="false" />.</param>
      <returns>Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> с указанным именем или значение <see langword="null" />, если событие не существует.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary>Возвращает перечислитель для данной коллекции <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</summary>
      <returns>Перечислитель, реализующий <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary>Возвращает индекс данного дескриптора <see cref="T:System.ComponentModel.EventDescriptor" /> .</summary>
      <param name="value">Объект <see cref="T:System.ComponentModel.EventDescriptor" />, который требуется найти в коллекции.</param>
      <returns>Индекс данного дескриптора <see cref="T:System.ComponentModel.EventDescriptor" /> в коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary>Вставляет объект <see cref="T:System.ComponentModel.EventDescriptor" /> в коллекцию, используя указанный индекс.</summary>
      <param name="index">Индекс в коллекции, используемый для вставки параметра <paramref name="value" />.</param>
      <param name="value">Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" />, вставляемый в коллекцию.</param>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>Выполняет сортировку элементов этой коллекции <see cref="T:System.ComponentModel.EventDescriptorCollection" />, используя указанный объект <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="sorter">Средство сравнения, которое нужно использовать для сортировки объектов <see cref="T:System.ComponentModel.EventDescriptor" /> в данной коллекции.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary>Выполняет сортировку элементов этой коллекции <see cref="T:System.ComponentModel.EventDescriptorCollection" />. Сначала выполняется сортировка в указанном порядке, затем используется порядок сортировки по умолчанию, обычно являющийся алфавитным,.</summary>
      <param name="names">Массив строк, описывающий порядок сортировки для объектов <see cref="T:System.ComponentModel.EventDescriptor" /> в этой коллекции.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary>Получает или задает событие с указанным номером индекса.</summary>
      <param name="index">Индекс (отсчитываемый от нуля) возвращаемого или задаваемого дескриптора <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
      <returns>Объект <see cref="T:System.ComponentModel.EventDescriptor" /> с заданным индексом.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Индекс <paramref name="index" /> не является допустимым для свойства <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary>Получает или задает событие с заданным именем.</summary>
      <param name="name">Имя возвращаемого или устанавливаемого дескриптора <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
      <returns>Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> с указанным именем или значение <see langword="null" />, если событие не существует.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary>Удаляет указанный объект <see cref="T:System.ComponentModel.EventDescriptor" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.ComponentModel.EventDescriptor" />, который требуется удалить из коллекции.</param>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary>Удаляет из коллекции дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> с заданным индексом.</summary>
      <param name="index">Индекс удаляемого объекта <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary>Выполняет сортировку элементов этой коллекции <see cref="T:System.ComponentModel.EventDescriptorCollection" />, используя установленный для этой коллекции по умолчанию порядок сортировки, обычно являющийся алфавитным.</summary>
      <returns>Новый объект <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>Выполняет сортировку элементов этой коллекции <see cref="T:System.ComponentModel.EventDescriptorCollection" />, используя указанный объект <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="comparer">Объект <see cref="T:System.Collections.IComparer" />, используемый для сортировки объектов <see cref="T:System.ComponentModel.EventDescriptor" /> в этой коллекции.</param>
      <returns>Новый объект <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary>Выполняет сортировку элементов этой коллекции <see cref="T:System.ComponentModel.EventDescriptorCollection" />, используя заданный порядок сортировки.</summary>
      <param name="names">Массив строк, описывающий порядок сортировки объектов <see cref="T:System.ComponentModel.EventDescriptor" /> в коллекции.</param>
      <returns>Новый объект <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>Выполняет сортировку элементов этой коллекции <see cref="T:System.ComponentModel.EventDescriptorCollection" />, используя заданный порядок сортировки и средство сравнения <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="names">Массив строк, описывающий порядок сортировки объектов <see cref="T:System.ComponentModel.EventDescriptor" /> в коллекции.</param>
      <param name="comparer">Объект <see cref="T:System.Collections.IComparer" />, используемый для сортировки объектов <see cref="T:System.ComponentModel.EventDescriptor" /> в этой коллекции.</param>
      <returns>Новый объект <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы коллекции в <see cref="T:System.Array" /> начиная с определенного индекса в <see cref="T:System.Array" />.</summary>
      <param name="array">Одномерный массив <see cref="T:System.Array" />, который является конечным массивом для элементов, скопированных из коллекции. Массив <see cref="T:System.Array" /> должен иметь индексацию, начинающуюся с нуля.</param>
      <param name="index">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary>Возвращает количество элементов, содержащихся в коллекции.</summary>
      <returns>Количество элементов в коллекции.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Возвращает значение, указывающее, является ли доступ к коллекции синхронизированным.</summary>
      <returns>
        <see langword="true" />, если доступ к коллекции синхронизирован; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>Возвращает объект, который можно использовать для синхронизации доступа к коллекции.</summary>
      <returns>Объект, который можно использовать для синхронизации доступа к коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации элементов коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>Добавляет элемент в коллекцию.</summary>
      <param name="value">Параметр <see cref="T:System.Object" /> для добавления в коллекцию.</param>
      <returns>Позиция, на которую вставлен новый элемент.</returns>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary>Удаляет из коллекции все элементы.</summary>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Определяет, содержит ли коллекция указанное значение.</summary>
      <param name="value">Объект <see cref="T:System.Object" /> для поиска в коллекции.</param>
      <returns>Значение <see langword="true" />, если элемент <see cref="T:System.Object" /> найден в коллекции; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Определяет индекс определенного элемента в коллекции.</summary>
      <param name="value">Объект <see cref="T:System.Object" /> для поиска в коллекции.</param>
      <returns>Индекс <paramref name="value" />, если он найден в списке; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Вставляет элемент в коллекцию по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="value" />.</param>
      <param name="value">Объект <see cref="T:System.Object" /> для вставки в коллекцию.</param>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>Возвращает значение, указывающее, имеет ли коллекция фиксированный размер.</summary>
      <returns>Значение <see langword="true" />, если коллекция имеет фиксированный размер; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>Возвращает значение, указывающее, является ли коллекция доступной только для чтения.</summary>
      <returns>Значение <see langword="true" />, если коллекция доступна только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Возвращает или задает элемент по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс элемента, который требуется возвратить или задать.</param>
      <returns>Элемент, расположенный по указанному индексу.</returns>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Значение параметра <paramref name="index" /> меньше 0.

или -
Значение параметра <paramref name="index" /> больше или равно значению свойства <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Удаляет первое вхождение конкретного объекта из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.Object" />, который требуется удалить из коллекции.</param>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Удаляет элемент с указанным индексом.</summary>
      <param name="index">Отсчитываемый от нуля индекс удаляемого элемента.</param>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary>Предоставляет преобразователь типа для преобразования расширяемых объектов в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ExpandableObjectConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Возвращает коллекцию свойств для типа объекта, заданного параметром значения.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value">Объект <see cref="T:System.Object" />, задающий тип объекта, для которого нужно получить свойства.</param>
      <param name="attributes">Массив типа <see cref="T:System.Attribute" />, который будет использоваться как фильтр.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, предоставляемыми для компонента, или <see langword="null" /> в случае отсутствия свойств.</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, поддерживает ли свойства этот объект, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, так как для поиска свойств данного объекта следует вызывать метод <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary>Определяет свойство, предлагаемое поставщиком расширений. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли этот экземпляр указанному объекту.</summary>
      <param name="obj">Объект <see cref="T:System.Object" /> для сравнения с этим экземпляром или пустая ссылка (<see langword="Nothing" /> в Visual Basic).</param>
      <returns>
        <see langword="true" />, если значение параметра <paramref name="obj" /> равно типу и значению данного экземпляра; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary>Возвращает предоставляемое свойство.</summary>
      <returns>Объект <see cref="T:System.ComponentModel.PropertyDescriptor" />, инкапсулирующий предоставляемое свойство.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary>Предоставляет признак, показывающий, является ли значение этого экземпляра значением по умолчанию для производного класса.</summary>
      <returns>Значение <see langword="true" />, если этот экземпляр является атрибутом по умолчанию для класса; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary>Возвращает поставщика расширений, предоставляющего свойство.</summary>
      <returns>Поставщик <see cref="T:System.ComponentModel.IExtenderProvider" />, предоставляющий свойство.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary>Возвращает тип объекта, который может получить данное свойство.</summary>
      <returns>Тип <see cref="T:System.Type" />, описывающий тип объекта, который может получить данное свойство.</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary>Предоставляет преобразователь типов для преобразования объектов <see cref="T:System.Guid" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.GuidConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в объект GUID, используя контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType">Тип <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Получает значение, показывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType">Объект <see cref="T:System.Type" />, представляющий тип, в который необходимо выполнить преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует данный объект в объект GUID.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Необязательный объект <see cref="T:System.Globalization.CultureInfo" />. Если не предоставляются, предполагается использование текущего языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует указанный объект в другой тип.</summary>
      <param name="context">Контекст модуля форматирования.</param>
      <param name="culture">Язык и региональные параметры, в которые будет выполнено преобразование <paramref name="value" />.</param>
      <param name="value">Преобразуемый объект.</param>
      <param name="destinationType">Тип, в который требуется преобразовать объект.</param>
      <returns>Преобразованный объект.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> — <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary>Предоставляет данные для событий, которые могут быть полностью обработаны в обработчике событий.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.HandledEventArgs" />, используя значение по умолчанию свойства <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />, <see langword="false" />.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.HandledEventArgs" />, используя указанное значение по умолчанию для свойства <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />.</summary>
      <param name="defaultHandledValue">Значение по умолчанию для свойства<see cref="P:System.ComponentModel.HandledEventArgs.Handled" />.</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary>Получает или задает значение, показывающее, полностью ли обработчик событий обработал событие или система должна продолжить собственную обработку.</summary>
      <returns>Значение <see langword="true" />, если событие было обработано полностью; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary>Представляет метод, который может обрабатывать события, которые могут требовать или не требовать дальнейшей обработки после возвращения из обработчика событий.</summary>
      <param name="sender">Источник события.</param>
      <param name="e">Объект <see cref="T:System.ComponentModel.HandledEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary>Обеспечивает возможности, необходимые для поддержки как сложных, так и простых скриптов при связывании с источником данных.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Добавляет дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> к индексам, используемым для поиска.</summary>
      <param name="property">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, добавляемый к индексам, используемым для поиска.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary>Добавляет новый элемент в список.</summary>
      <returns>Элемент, который нужно добавить в список.</returns>
      <exception cref="T:System.NotSupportedException">Свойство <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> имеет значение <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary>Возвращает значение, показывающее, можно ли обновить элементы в списке.</summary>
      <returns>Значение <see langword="true" />, если можно обновить элементы в списке; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary>Возвращает значение, показывающее, можно ли добавить элементы в список, используя метод <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
      <returns>Значение <see langword="true" />, если можно добавить элементы в список с помощью метода <see cref="M:System.ComponentModel.IBindingList.AddNew" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary>Возвращает значение, показывающее, можно ли удалить элементы из списка с помощью метода <see cref="M:System.Collections.IList.Remove(System.Object)" /> или <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />.</summary>
      <returns>Значение <see langword="true" />, если можно удалить элементы из списка; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Сортирует список, используя дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> и направление <see cref="T:System.ComponentModel.ListSortDirection" />.</summary>
      <param name="property">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> для сортировки.</param>
      <param name="direction">Одно из значений перечисления <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
      <exception cref="T:System.NotSupportedException">Свойство <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> имеет значение <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Возвращает индекс строки с данным дескриптором <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
      <param name="property">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> для поиска.</param>
      <param name="key">Значение параметра <paramref name="property" />, используемое для поиска.</param>
      <returns>Индекс строки с данным дескриптором <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
      <exception cref="T:System.NotSupportedException">Свойство <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> имеет значение <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary>Возвращает значение, показывающее, отсортированы ли элементы списка.</summary>
      <returns>Значение <see langword="true" />, если был вызван метод <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />, а метод <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> не вызывался; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException">Свойство <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> имеет значение <see langword="false" />.</exception>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary>Происходит при изменениях в списке или при изменении элемента списка.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Удаляет дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> из индексов, используемых для поиска.</summary>
      <param name="property">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, удаляемый из индексов, используемых для поиска.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary>Удаляет любую сортировку, выполненную с использованием метода <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> — <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary>Возвращает направление сортировки.</summary>
      <returns>Одно из значений перечисления <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
      <exception cref="T:System.NotSupportedException">Свойство <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> имеет значение <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary>Возвращает дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, используемый для сортировки.</summary>
      <returns>Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, используемый для сортировки.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> — <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary>Возвращает значение, показывающее, происходит ли событие <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> при изменениях в списке или при изменении элемента списка.</summary>
      <returns>Значение <see langword="true" />, если при изменениях в списке или при изменении элемента списка вызывается событие <see cref="E:System.ComponentModel.IBindingList.ListChanged" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary>Возвращает значение, показывающее, поддерживает ли список поиск с использованием метода <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />.</summary>
      <returns>Значение <see langword="true" />, если список поддерживает поиск с использованием метода <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary>Возвращает значение, показывающее, поддерживает ли список сортировку.</summary>
      <returns>Значение <see langword="true" />, если список поддерживает сортировку; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary>Расширяет интерфейс <see cref="T:System.ComponentModel.IBindingList" />, предоставляя дополнительные возможности сортировки и фильтрации.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>Сортирует источник данных, используя заданную коллекцию <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</summary>
      <param name="sorts">Коллекция <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />, содержащая условия сортировки, применяемые к источнику данных.</param>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary>Возвращает или задает фильтр, используемый для исключения элементов из коллекции элементов, возвращенных источником данных.</summary>
      <returns>Строка, используемая для фильтрации элементов из коллекции элементов, возвращенной источником данных.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary>Возвращает текущий фильтр, примененный к источнику данных.</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary>Возвращает коллекцию описаний сортировки, применяемых в данный момент к источнику данных.</summary>
      <returns>Коллекция <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />, применяемая в данный момент к источнику данных.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary>Возвращает значение, показывающее, поддерживает ли источник данных дополнительные возможности сортировки.</summary>
      <returns>Значение <see langword="true" />, если источник данных поддерживает дополнительные возможности сортировки; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary>Возвращает значение, указывающее, поддерживает ли источник данных фильтрацию.</summary>
      <returns>Значение <see langword="true" />, если источник данных поддерживает фильтрацию; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary>Добавляет поддержку транзакций при добавлении нового элемента в коллекцию.</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary>Удаляет незафиксированный новый элемент из коллекции.</summary>
      <param name="itemIndex">Индекс элемента, который был ранее добавлен в коллекцию.</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary>Фиксирует незафиксированный новый элемент в коллекции.</summary>
      <param name="itemIndex">Индекс элемента, который был ранее добавлен в коллекцию.</param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary>Предоставляет уровень сопоставления верхнего уровня между COM-объектом и объектом <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary>Получает атрибуты для заданного компонента.</summary>
      <param name="component">Компонент, для которого необходимо получить атрибуты.</param>
      <returns>Коллекция атрибутов для компонента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary>Получает имя класса для указанного компонента.</summary>
      <param name="component">Компонент, для которого необходимо получить имя класса.</param>
      <returns>Имя класса, соответствующего компоненту <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary>Получает преобразователь типов для заданного компонента.</summary>
      <param name="component">Компонент, для которого необходимо получить преобразователь <see cref="T:System.ComponentModel.TypeConverter" />.</param>
      <returns>Объект макета <see cref="T:System.ComponentModel.TypeConverter" /> декоративного элемента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary>Получает событие по умолчанию для заданного компонента.</summary>
      <param name="component">Компонент, для которого необходимо получить событие по умолчанию.</param>
      <returns>Объект <see cref="T:System.ComponentModel.EventDescriptor" />, представляющий событие по умолчанию для компонента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary>Получает свойство по умолчанию для указанного компонента.</summary>
      <param name="component">Компонент, для которого нужно получить свойство по умолчанию.</param>
      <returns>Объект <see cref="T:System.ComponentModel.PropertyDescriptor" />, представляющий свойство по умолчанию для компонента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary>Получает редактор для заданного компонента.</summary>
      <param name="component">Компонент, для которого нужно получить редактор.</param>
      <param name="baseEditorType">Базовый тип редактора для компонента <paramref name="component" />.</param>
      <returns>Редактор для компонента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary>Получает события для заданного компонента.</summary>
      <param name="component">Компонент, для которого необходимо получить события.</param>
      <returns>Коллекция дескрипторов событий для компонента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary>Получает события с указанными атрибутами для заданного компонента.</summary>
      <param name="component">Компонент, для которого необходимо получить события.</param>
      <param name="attributes">Атрибуты, используемые для фильтрации событий.</param>
      <returns>Коллекция дескрипторов событий для компонента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary>Получает имя указанного компонента.</summary>
      <param name="component">Компонент, имя которого необходимо получить.</param>
      <returns>Имя компонента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary>Получает свойства с указанными атрибутами для заданного компонента.</summary>
      <param name="component">Компонент, для которого необходимо получить события.</param>
      <param name="attributes">Атрибуты, используемые для фильтрации свойств.</param>
      <returns>Коллекция дескрипторов свойств для компонента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary>Получает значение свойства с заданным идентификатором диспетчеризации.</summary>
      <param name="component">Объект, которому принадлежит это свойство.</param>
      <param name="dispid">Идентификатор диспетчеризации.</param>
      <param name="success">Значение типа <see cref="T:System.Boolean" />, передаваемое по ссылке и показывающее, было ли возвращено свойство.</param>
      <returns>Значение свойства с заданным идентификатором диспетчеризации.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary>Получает значение свойства с заданным именем.</summary>
      <param name="component">Объект, которому принадлежит это свойство.</param>
      <param name="propertyName">Имя свойства.</param>
      <param name="success">Значение типа <see cref="T:System.Boolean" />, передаваемое по ссылке и показывающее, было ли возвращено свойство.</param>
      <returns>Значение свойства с заданным именем.</returns>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary>Предоставляет интерфейс, с помощью которого предоставляются динамические сведения о пользовательских типах объектов.</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary>Возвращает коллекцию настраиваемых атрибутов для этого экземпляра компонента.</summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" />, содержащий атрибуты для этого объекта.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary>Возвращает имя класса для этого экземпляра компонента.</summary>
      <returns>Имя класса объекта или <see langword="null" />, если класс не имеет имени.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary>Возвращает имя этого экземпляра компонента.</summary>
      <returns>Имя объекта или <see langword="null" />, если объект не имеет имени.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary>Возвращает преобразователь типов для этого экземпляра компонента.</summary>
      <returns>Объект <see cref="T:System.ComponentModel.TypeConverter" />, который является преобразователем для данного объекта, или значение <see langword="null" /> в случае отсутствия <see cref="T:System.ComponentModel.TypeConverter" /> для данного объекта.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary>Возвращает событие по умолчанию для этого экземпляра компонента.</summary>
      <returns>Значение <see cref="T:System.ComponentModel.EventDescriptor" /> , представляющее событие по умолчанию для этого объекта, или <see langword="null" /> , если этот объект не имеет событий.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary>Возвращает свойство по умолчанию для этого экземпляра компонента.</summary>
      <returns>Значение <see cref="T:System.ComponentModel.PropertyDescriptor" />, представляющее свойство по умолчанию для данного объекта, или <see langword="null" />, если этот объект не имеет свойств.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary>Возвращает редактор заданного типа для этого экземпляра компонента.</summary>
      <param name="editorBaseType">Объект <see cref="T:System.Type" />, который представляет редактор для этого объекта.</param>
      <returns>Объект <see cref="T:System.Object" /> заданного типа, являющийся редактором для этого объекта, или <see langword="null" />, если редактор не найден.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary>Возвращает события для этого экземпляра компонента.</summary>
      <returns>Объект <see cref="T:System.ComponentModel.EventDescriptorCollection" />, представляющий события для этого экземпляра компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>Возвращает события для этого экземпляра компонента, используя заданный массив атрибутов в качестве фильтра.</summary>
      <param name="attributes">Массив типа <see cref="T:System.Attribute" />, используемый в качестве фильтра.</param>
      <returns>Объект <see cref="T:System.ComponentModel.EventDescriptorCollection" />, представляющий отфильтрованные события для этого экземпляра компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary>Возвращает свойства для этого экземпляра компонента.</summary>
      <returns>Объект <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, представляющий свойства для этого экземпляра компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>Возвращает свойства для этого экземпляра компонента, используя массив атрибутов в качестве фильтра.</summary>
      <param name="attributes">Массив типа <see cref="T:System.Attribute" />, используемый в качестве фильтра.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, представляющая отфильтрованные свойства для этого экземпляра компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Возвращает объект, содержащий свойство, описываемое заданным дескриптором свойства.</summary>
      <param name="pd">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, представляющий свойство, владельца которого требуется найти.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий владельца заданного свойства.</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary>Обеспечивает функциональные возможности предоставления сведений об настраиваемых ошибках, которые могут быть связаны с пользовательским интерфейсом.</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary>Возвращает сообщение об ошибке, показывающее причину отказа в данном объекте.</summary>
      <returns>Сообщение об ошибке, показывающее причину отказа в данном объекте. Значение по умолчанию — пустая строка ("").</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary>Возвращает сообщение об ошибке для свойства с заданным именем.</summary>
      <param name="columnName">Имя свойства, для которого возвращается сообщение об ошибке.</param>
      <returns>Сообщение об ошибке для свойства. Значение по умолчанию — пустая строка ("").</returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary>Определяет интерфейс для расширения свойств других компонентов в контейнере.</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary>Определяет, может ли этот объект предоставить имеющиеся у него свойства средств расширения указанному объекту.</summary>
      <param name="extendee">Объект <see cref="T:System.Object" />, получающий свойства средства расширения.</param>
      <returns>Значение <see langword="true" />, если этот объект может предоставлять свойства средства расширения указанному объекту. В противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary>Обеспечивает интерфейс для упрощения возвращения имени сборщика и отображения сборщика.</summary>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary>Возвращает локализованное имя.</summary>
      <returns>Локализованное имя.</returns>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary>Показывает сборщик.</summary>
      <param name="language">Служба языка, вызывающая сборщика.</param>
      <param name="value">Редактируемое выражение.</param>
      <param name="newValue">Новое значение.</param>
      <returns>Значение <see langword="true" />, если значение должно быть заменено параметром <paramref name="newValue" />; в противном случае — значение <see langword="false" /> (например при отмене пользователем).</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary>Предоставляет объекту функциональные возможности, позволяющие возвратить список, который может быть связан с источником данных.</summary>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary>Возвращает значение, показывающее, является ли данная коллекция коллекцией объектов <see cref="T:System.Collections.IList" />.</summary>
      <returns>Значение <see langword="true" />, если коллекция является коллекцией объектов <see cref="T:System.Collections.IList" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary>Возвращает объект <see cref="T:System.Collections.IList" />, который может быть связан с источником данных из объекта, самостоятельно не реализующего интерфейс <see cref="T:System.Collections.IList" />.</summary>
      <returns>Объект <see cref="T:System.Collections.IList" />, который можно привязать к источнику данных из объекта.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary>Обеспечивает функциональные возможности для вложенных контейнеров, логически содержащих ноль или более компонентов и принадлежащих родительскому компоненту.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary>Возвращает компонент-владелец для вложенного контейнера.</summary>
      <returns>Компонент <see cref="T:System.ComponentModel.IComponent" />, являющийся владельцем вложенного контейнера.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary>Предоставляет возможность получить полное иерархическое имя компонента.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary>Возвращает полное имя компонента в этом узле.</summary>
      <returns>Полное имя компонента в этом узле.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary>Указывает, является ли компонент, связанный с этим атрибутом, унаследованным от базового класса. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.InheritanceAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.InheritanceAttribute" />, используя указанный уровень наследования.</summary>
      <param name="inheritanceLevel">Объект <see cref="T:System.ComponentModel.InheritanceLevel" />, показывающий уровень наследования, который устанавливается для этого атрибута.</param>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary>Указывает, что значением по умолчанию для атрибута <see cref="T:System.ComponentModel.InheritanceAttribute" /> является <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" />. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary>Нужно переопределить для проверки равенства.</summary>
      <param name="value">Объект для тестирования.</param>
      <returns>Значение <see langword="true" /> если объекты совпадают; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary>Возвращает хэш-код для данного объекта.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.ComponentModel.InheritanceAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary>Получает или задает текущий уровень наследования, хранящийся в этом атрибуте.</summary>
      <returns>Уровень <see cref="T:System.ComponentModel.InheritanceLevel" />, хранящийся в этом атрибуте.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary>Указывает, что компонент является унаследованным. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary>Определяет, что компонент является унаследованным и доступен только для чтения. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary>Возвращает значение, показывающее, является ли текущее значение атрибута его значением по умолчанию.</summary>
      <returns>Значение <see langword="true" />, если текущим значением атрибута является значение по умолчанию; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary>Определяет, что компонент не является унаследованным. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary>Преобразует этот атрибут в строку.</summary>
      <returns>Строка, представляющая эту структуру <see cref="T:System.ComponentModel.InheritanceAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary>Определяет идентификаторы для типов уровней наследования.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary>Объект является унаследованным.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary>Объект является унаследованным, но доступен только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary>Объект не является унаследованным.</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary>Задает установщик для типа, устанавливающего компоненты.</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.InstallerTypeAttribute" />, используя имя типа установщика компонентов.</summary>
      <param name="typeName">Имя объекта <see cref="T:System.Type" />, представляющего установщик для компонента, с которым связан этот атрибут. Этот класс должен реализовывать интерфейс <see cref="T:System.ComponentModel.Design.IDesigner" />.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> для заданного типа <see cref="T:System.Type" />, представляющего установщик компонента.</summary>
      <param name="installerType">Объект <see cref="T:System.Type" />, представляющий установщик для компонента, с которым связан этот атрибут. Этот класс должен реализовывать интерфейс <see cref="T:System.ComponentModel.Design.IDesigner" />.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary>Возвращает значение, показывающее, равно ли значение данного объекта текущему атрибуту <see cref="T:System.ComponentModel.InstallerTypeAttribute" />.</summary>
      <param name="obj">Объект, проверяемый на равенство.</param>
      <returns>Значение <see langword="true" />, если значение данного объекта равно значению текущего; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary>Возвращает хэш-код для данного объекта.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.ComponentModel.InstallerTypeAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary>Возвращает тип установщика, связанного с этим атрибутом.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип установщика, связанного с этим атрибутом, или значение <see langword="null" />, если установщик не существует.</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary>Создает экземпляр конкретного типа свойства и раскрывающегося поля в таблице свойств <see cref="T:System.Windows.Forms.PropertyGrid" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.InstanceCreationEditor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Если экземпляр службы переопределен в производном классе, возвращает экземпляр заданного типа.</summary>
      <param name="context">Сведения о контексте.</param>
      <param name="instanceType">Заданный тип.</param>
      <returns>Экземпляр заданного типа или <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary>Возвращает заданный текст.</summary>
      <returns>Указанный текст.</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary>Предоставляет преобразователь типа для преобразования 16-разрядных целочисленных объектов со знаком в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Int16Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary>Предоставляет преобразователь типа для преобразования 32-разрядных целочисленных объектов со знаком в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Int32Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary>Предоставляет преобразователь типов для преобразования 64-разрядных целочисленных объектов со знаком в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Int64Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.InvalidAsynchronousStateException">
      <summary>Вызывается, когда поток, в котором должна выполняться операция, больше не существует или в нем отсутствует цикл обработки сообщений.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> с заданными объектами <see cref="T:System.Runtime.Serialization.SerializationInfo" /> и <see cref="T:System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="info">Метод <see cref="T:System.Runtime.Serialization.SerializationInfo" />, используемый для десериализации.</param>
      <param name="context">Объект назначения, используемый для десериализации.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" />, используя заданное подробное описание.</summary>
      <param name="message">Подробное описание ошибки.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> с указанным подробным описанием и указанным исключением.</summary>
      <param name="message">Подробное описание ошибки.</param>
      <param name="innerException">Ссылка на внутреннее исключение, которое является причиной этого исключения.</param>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary>Показывает, преобразует ли класс события изменения свойства в события <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary>Возвращает значение, показывающее, вызывает ли объект <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> события <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
      <returns>Значение <see langword="true" />, если объект <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> вызывает события <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> при изменении одного из значений его свойств; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary>Позволяет выполнить инициализацию компонента и его зависимых свойств.</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary>Возникает при завершении инициализации компонента.</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary>Возвращает значение, показывающее, инициализирован ли компонент.</summary>
      <returns>Значение <see langword="true" /> указывает, что компонент завершил инициализацию; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>Предоставляет контекстную информацию о компоненте, например, его контейнер и дескриптор свойства.</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>Возвращает контейнер, представляющий это запрос <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <returns>Контейнер <see cref="T:System.ComponentModel.IContainer" /> с набором объектов для этого дескриптора <see cref="T:System.ComponentModel.TypeDescriptor" />; в противном случае — значение <see langword="null" />, если контейнер отсутствует или если дескриптор <see cref="T:System.ComponentModel.TypeDescriptor" /> не использует внешних объектов.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>Возвращает объект, связанный с этим запросом дескриптора типа.</summary>
      <returns>Объект, вызывающий метод для дескриптора <see cref="T:System.ComponentModel.TypeDescriptor" />; в противном случае — значение <see langword="null" />, если ответственный за вызов объект отсутствует.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>Вызывает событие <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>Вызывает событие <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
      <returns>Значение <see langword="true" />, если объект может быть изменен; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>Возвращает <see cref="T:System.ComponentModel.PropertyDescriptor" />, связанный с заданным элементом контекста.</summary>
      <returns>Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, описывающий данный элемент контекста; в противном случае — значение <see langword="null" />, если отсутствует дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, ответственный за вызов.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary>Предоставляет функциональные возможности, необходимые для обнаружения схемы списка возможных связываний, в которой свойства доступные для связывания, отличаются от открытых свойств объекта связывания.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>Возвращает <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, представляющий свойства каждого элемента, используемого для привязки данных.</summary>
      <param name="listAccessors">Массив объектов <see cref="T:System.ComponentModel.PropertyDescriptor" />, которые ищутся в коллекции как пригодные для привязки. Это может быть <see langword="null" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, представляющий свойства каждого элемента, используемого для привязки данных.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>Возвращает имя списка.</summary>
      <param name="listAccessors">Массив объектов <see cref="T:System.ComponentModel.PropertyDescriptor" />, для которых возвращается имя списка. Это может быть <see langword="null" />.</param>
      <returns>Имя списка.</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary>Предоставляет абстрактный (<see langword="abstract" />) базовый класс для всех лицензий. Лицензия предоставляется конкретному экземпляру компонента.</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.License" />.</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary>При переопределении в производном классе уничтожает используемые лицензией ресурсы.</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary>При переопределении в производном классе возвращает ключ лицензии, предоставленной для этого компонента.</summary>
      <returns>Ключ лицензии, предоставленной для этого компонента.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary>Определяет, когда можно использовать лицензированный объект, и предоставляет способ получения дополнительных служб, необходимых для поддержки лицензий, выполняемых в границах своего домена.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseContext" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>При переопределении в производном классе возвращает из заданной сборки ресурсов сохраненный ключ лицензии для заданного типа.</summary>
      <param name="type">Объект <see cref="T:System.Type" />, представляющий тип компонента.</param>
      <param name="resourceAssembly">Объект <see cref="T:System.Reflection.Assembly" /> с ключом лицензии.</param>
      <returns>Свойство <see cref="P:System.ComponentModel.License.LicenseKey" /> для указанного типа. Этот метод, если он не переопределен, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary>Возвращает запрашиваемую службу, если она доступна.</summary>
      <param name="type">Тип извлекаемой службы.</param>
      <returns>Экземпляр службы или значение <see langword="null" />, если службу не удается обнаружить.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>При переопределении в производном классе задает ключ лицензии для указанного типа.</summary>
      <param name="type">Объект <see cref="T:System.Type" />, представляющий компонент, связанный с ключом лицензии.</param>
      <param name="key">Свойство <see cref="P:System.ComponentModel.License.LicenseKey" /> для сохранения типа компонента.</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary>При переопределении в производном классе возвращает значение, определяющее, когда можно использовать лицензию.</summary>
      <returns>Одно из значений объекта <see cref="T:System.ComponentModel.LicenseUsageMode" />, определяющее, когда можно использовать лицензию. Значение по умолчанию — <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary>Представляет исключение, возникающее, когда компоненту не может быть предоставлена лицензия.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseException" /> с заданными объектами <see cref="T:System.Runtime.Serialization.SerializationInfo" /> и <see cref="T:System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="info">Метод <see cref="T:System.Runtime.Serialization.SerializationInfo" />, используемый для десериализации.</param>
      <param name="context">Объект назначения, используемый для десериализации.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseException" /> для типа компонента, которому было отказано в лицензии.</summary>
      <param name="type">Объект <see cref="T:System.Type" />, представляющий тип компонента, которому не была предоставлена лицензия.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseException" /> для типа и экземпляра компонента, которому было отказано в лицензии.</summary>
      <param name="type">Объект <see cref="T:System.Type" />, представляющий тип компонента, которому не была предоставлена лицензия.</param>
      <param name="instance">Экземпляр компонента, которому не была предоставлена лицензия.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseException" /> для типа и экземпляра компонента, которому было отказано в лицензии, вместе с выводимым сообщением.</summary>
      <param name="type">Объект <see cref="T:System.Type" />, представляющий тип компонента, которому не была предоставлена лицензия.</param>
      <param name="instance">Экземпляр компонента, которому не была предоставлена лицензия.</param>
      <param name="message">Отображаемое сообщение исключения.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseException" /> для типа и экземпляра компонента, которому было отказано в лицензии, вместе с отображаемым сообщением и исходным вызываемым исключением.</summary>
      <param name="type">Объект <see cref="T:System.Type" />, представляющий тип компонента, которому не была предоставлена лицензия.</param>
      <param name="instance">Экземпляр компонента, которому не была предоставлена лицензия.</param>
      <param name="message">Отображаемое сообщение исключения.</param>
      <param name="innerException">Объект <see cref="T:System.Exception" />, представляющий исходное исключение.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> сведениями об исключении.</summary>
      <param name="info">Метод <see cref="T:System.Runtime.Serialization.SerializationInfo" />, используемый для десериализации.</param>
      <param name="context">Объект назначения, используемый для десериализации.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="info" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary>Возвращает тип компонента, которому не была предоставлена лицензия.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип компонента, которому не была предоставлена лицензия.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary>Предоставляет свойства и методы для добавления лицензии в компонент и для управления поставщиком <see cref="T:System.ComponentModel.LicenseProvider" />. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary>Создает экземпляр указанного типа, задавая контекст, в котором можно использовать лицензированный экземпляр.</summary>
      <param name="type">Объект <see cref="T:System.Type" />, представляющий создаваемый тип.</param>
      <param name="creationContext">Объект <see cref="T:System.ComponentModel.LicenseContext" />, определяющий, когда можно использовать лицензированный экземпляр.</param>
      <returns>Экземпляр указанного типа.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary>Создает экземпляр указанного типа с заданными аргументами, задавая контекст, в котором можно использовать лицензированный экземпляр.</summary>
      <param name="type">Объект <see cref="T:System.Type" />, представляющий создаваемый тип.</param>
      <param name="creationContext">Объект <see cref="T:System.ComponentModel.LicenseContext" />, определяющий, когда можно использовать лицензированный экземпляр.</param>
      <param name="args">Массив типа <see cref="T:System.Object" />, представляющий аргументы для типа.</param>
      <returns>Экземпляр указанного типа с заданным массивом аргументов.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary>Возвращает или задает текущий контекст <see cref="T:System.ComponentModel.LicenseContext" />, определяющий, когда можно использовать лицензированный объект.</summary>
      <returns>Объект <see cref="T:System.ComponentModel.LicenseContext" />, который указывает, когда можно использовать лицензированный объект.</returns>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> в данный момент блокировано и не может быть изменено.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary>Возвращает значение, показывающее, обладает ли данный тип действительной лицензией.</summary>
      <param name="type">Объект <see cref="T:System.Type" /> для поиска действительной лицензии.</param>
      <returns>Значение <see langword="true" />, если данный тип является лицензированным; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary>Определяет, может ли быть предоставлена действительная лицензия для указанного типа.</summary>
      <param name="type">Объект <see cref="T:System.Type" />, который представляет тип объекта, запрашивающего <see cref="T:System.ComponentModel.License" />.</param>
      <returns>Значение <see langword="true" />, если действительная лицензия может быть предоставлена; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary>Определяет, может ли быть предоставлена действительная лицензия для указанного экземпляра типа. Этот метод создает действительный объект <see cref="T:System.ComponentModel.License" />.</summary>
      <param name="type">Объект <see cref="T:System.Type" />, который представляет тип объекта, запрашивающего лицензию.</param>
      <param name="instance">Объект указанного типа или типа, производного от указанного типа.</param>
      <param name="license">Объект <see cref="T:System.ComponentModel.License" />, являющийся действительной лицензией или значением <see langword="null" />, если действительная лицензия не может быть предоставлена.</param>
      <returns>Значение <see langword="true" />, если может быть предоставлена действительная лицензия <see cref="T:System.ComponentModel.License" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary>Не допускает внесения изменений в текущий контекст <see cref="T:System.ComponentModel.LicenseContext" /> данного объекта.</summary>
      <param name="contextUser">Объект, текущий контекст которого нужно заблокировать.</param>
      <exception cref="T:System.InvalidOperationException">Контекст уже заблокирован.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary>Позволяет вносить изменения в текущий контекст <see cref="T:System.ComponentModel.LicenseContext" /> данного объекта.</summary>
      <param name="contextUser">Объект, текущий контекст которого нужно разблокировать.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="contextUser" /> представляет пользователя, отличающегося от заданного в предыдущем вызове метода <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary>Возвращает объект <see cref="T:System.ComponentModel.LicenseUsageMode" />, определяющий, когда можно использовать лицензированный объект для контекста <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</summary>
      <returns>Одно из значений <see cref="T:System.ComponentModel.LicenseUsageMode" />, как указано в свойстве <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary>Определяет, может ли быть предоставлена лицензия для указанного типа.</summary>
      <param name="type">Объект <see cref="T:System.Type" />, который представляет тип объекта, запрашивающего лицензию.</param>
      <exception cref="T:System.ComponentModel.LicenseException">Лицензия <see cref="T:System.ComponentModel.License" /> не может быть предоставлена.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary>Определяет, может ли быть предоставлена лицензия для экземпляра указанного типа.</summary>
      <param name="type">Объект <see cref="T:System.Type" />, который представляет тип объекта, запрашивающего лицензию.</param>
      <param name="instance">Объект <see cref="T:System.Object" /> указанного типа или типа, производного от указанного типа.</param>
      <returns>Допустимый класс <see cref="T:System.ComponentModel.License" />.</returns>
      <exception cref="T:System.ComponentModel.LicenseException">Тип лицензирован, но лицензия <see cref="T:System.ComponentModel.License" /> не может быть предоставлена.</exception>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary>Предоставляет абстрактный (<see langword="abstract" />) базовый класс для реализации поставщика лицензий.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>При переопределении в производном классе возвращает лицензию для экземпляра или типа компонента, когда задан контекст, а также приводит ли отказ в лицензии к исключению.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.LicenseContext" />, определяющий, где можно использовать лицензированный объект.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который представляет компонент, запрашивающий лицензию.</param>
      <param name="instance">Запрашивающий лицензию объект.</param>
      <param name="allowExceptions">Значение <see langword="true" />, если исключение <see cref="T:System.ComponentModel.LicenseException" /> должно быть вызвано в случае, когда компоненту не может быть предоставлена лицензия; в противном случае — значение <see langword="false" />.</param>
      <returns>Допустимый класс <see cref="T:System.ComponentModel.License" />.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary>Задает объект <see cref="T:System.ComponentModel.LicenseProvider" />, используемый вместе с классом. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> без поставщика лицензий.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> заданным типом.</summary>
      <param name="typeName">Полное имя класса поставщика лицензий.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseProviderAttribute" />, используя указанный тип поставщика лицензий.</summary>
      <param name="type">Тип <see cref="T:System.Type" />, представляющий тип класса поставщика лицензий.</param>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary>Определяет значение по умолчанию, не являющееся поставщиком. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary>Указывает, равен ли этот экземпляр заданному объекту.</summary>
      <param name="value">Другой объект, подлежащий сравнению.</param>
      <returns>Значение <see langword="true" />, если значение параметра <paramref name="value" /> равно данному экземпляру; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.ComponentModel.LicenseProviderAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary>Возвращает поставщик лицензий, который должен использоваться вместе со связанным классом.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип поставщика лицензий. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary>Указывает уникальный идентификатор для атрибута данного типа.</summary>
      <returns>Уникальный идентификатор для атрибута данного типа.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary>Указывает, когда может использоваться объект <see cref="T:System.ComponentModel.License" />.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary>Используется визуальным конструктором или компилятором во время разработки.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary>Используется во время выполнения.</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary>Обеспечивает реализацию поставщика <see cref="T:System.ComponentModel.LicenseProvider" />. Этот поставщик работает таким же образом, как и стандартный модуль лицензирования Microsoft .NET Framework.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicFileLicenseProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary>Возвращает ключ для указанного типа.</summary>
      <param name="type">Тип объекта для возвращения ключа.</param>
      <returns>Подтверждение лицензирования для параметра <paramref name="type" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>Возвращает лицензию для экземпляра компонента, если она доступна.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.LicenseContext" />, определяющий, где можно использовать лицензированный объект.</param>
      <param name="type">Объект <see cref="T:System.Type" />, представляющий компонент, запрашивающий лицензию <see cref="T:System.ComponentModel.License" />.</param>
      <param name="instance">Объект, запрашивающий лицензию <see cref="T:System.ComponentModel.License" />.</param>
      <param name="allowExceptions">Значение <see langword="true" />, если исключение <see cref="T:System.ComponentModel.LicenseException" /> должно вызываться, когда компоненту не может быть предоставлена лицензия; в противном случае — значение <see langword="false" />.</param>
      <returns>Допустимый объект <see cref="T:System.ComponentModel.License" />. Если этот метод не может найти действительную лицензию <see cref="T:System.ComponentModel.License" /> или действительный параметр <paramref name="context" />, возвращается значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary>Определяет, является ли для указанного типа действительным ключ, возвращаемый методом <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" />.</summary>
      <param name="key">Проверяемый элемент <see cref="P:System.ComponentModel.License.LicenseKey" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, представляющий компонент, запрашивающий лицензию <see cref="T:System.ComponentModel.License" />.</param>
      <returns>Значение <see langword="true" />, если ключ является действительным ключом лицензии <see cref="P:System.ComponentModel.License.LicenseKey" /> для заданного типа; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary>Указывает, что список может использоваться в качестве источника данных. Визуальный конструктор должен использовать этот атрибут, чтобы определить, отображается ли конкретный список в сборщике привязки данных. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ListBindableAttribute" />, используя значение, показывающее, поддерживает ли этот список возможности привязки.</summary>
      <param name="listBindable">Значение <see langword="true" />, если список поддерживает возможности привязки; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ListBindableAttribute" />, используя объект <see cref="T:System.ComponentModel.BindableSupport" />, показывающий, поддерживает ли список возможности привязки.</summary>
      <param name="flags">Объект <see cref="T:System.ComponentModel.BindableSupport" />, показывающий, поддерживает ли список возможности привязки.</param>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary>Представляет значение по умолчанию для объекта <see cref="T:System.ComponentModel.ListBindableAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary>Возвращает значение, показывающее, равен ли переданный объект этому атрибуту <see cref="T:System.ComponentModel.ListBindableAttribute" />.</summary>
      <param name="obj">Объект для проверки на равенство.</param>
      <returns>Значение <see langword="true" />, если переданный объект равен этому объекту <see cref="T:System.ComponentModel.ListBindableAttribute" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.ComponentModel.ListBindableAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary>Возвращает значение, показывающее, установлено ли для свойства <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> значение по умолчанию.</summary>
      <returns>Значение <see langword="true" />, если свойство <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> установлено равным значению по умолчанию; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary>Возвращает значение, показывающее, поддерживает ли список возможности привязки.</summary>
      <returns>Значение <see langword="true" />, если список поддерживает возможности привязки; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary>Определяет, что список не поддерживает возможности привязки. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary>Определяет, что список не поддерживает возможности привязки. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary>Предоставляет данные для события <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ListChangedEventArgs" />, используя заданный тип изменения и затрагиваемый дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
      <param name="listChangedType">Значение <see cref="T:System.ComponentModel.ListChangedType" />, показывающее тип изменения.</param>
      <param name="propDesc">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, который был добавлен, удален или изменен.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ListChangedEventArgs" />, используя заданный тип изменения и индекс изменяемого элемента.</summary>
      <param name="listChangedType">Значение <see cref="T:System.ComponentModel.ListChangedType" />, показывающее тип изменения.</param>
      <param name="newIndex">Индекс элемента, который был добавлен, изменен или удален.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ListChangedEventArgs" />, используя заданный тип изменения, индекс изменяемого элемента и дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, описывающий изменяемый элемент.</summary>
      <param name="listChangedType">Значение <see cref="T:System.ComponentModel.ListChangedType" />, показывающее тип изменения.</param>
      <param name="newIndex">Индекс элемента, который был добавлен или изменен.</param>
      <param name="propDesc">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, описывающий элемент.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ListChangedEventArgs" />, используя заданный тип изменения, а также старый и новый индексы перемещенного элемента.</summary>
      <param name="listChangedType">Значение <see cref="T:System.ComponentModel.ListChangedType" />, показывающее тип изменения.</param>
      <param name="newIndex">Новый индекс перемещенного элемента.</param>
      <param name="oldIndex">Старый индекс перемещенного элемента.</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary>Получение типа изменения.</summary>
      <returns>Значение <see cref="T:System.ComponentModel.ListChangedType" />, показывающее тип изменения.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary>Возвращает индекс элемента, затрагиваемого изменением.</summary>
      <returns>Индекс элемента, затрагиваемого изменением.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary>Возвращает старый индекс перемещенного элемента.</summary>
      <returns>Старый индекс перемещенного элемента.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary>Возвращает дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, который был добавлен, изменен или удален.</summary>
      <returns>Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, затрагиваемый изменением.</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary>Представляет метод, обрабатывающий событие <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> класса <see cref="T:System.ComponentModel.IBindingList" />.</summary>
      <param name="sender">Источник события.</param>
      <param name="e">Объект <see cref="T:System.ComponentModel.ListChangedEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary>Задает способ изменения списка.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary>Элемент, добавляемый в список. Свойство <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> содержит индекс элемента, который был добавлен.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary>Элемент, измененный в списке. Свойство <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> содержит индекс элемента, который был изменен.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary>Элемент, удаленный из списка. Свойство <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> содержит индекс элемента, который был удален.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary>Элемент, перемещенный внутри списка. Свойство <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> содержит предыдущий индекс элемента, а свойство <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> содержит новый индекс элемента.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary>Объект <see cref="T:System.ComponentModel.PropertyDescriptor" /> был добавлен, что привело к изменению схемы.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary>Объект <see cref="T:System.ComponentModel.PropertyDescriptor" /> был изменен, что привело к изменению схемы.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary>Объект <see cref="T:System.ComponentModel.PropertyDescriptor" /> был удален, что привело к изменению схемы.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary>В список внесены существенные изменения. Все отслеживающие элементы управления обновляют все свои данные из списка.</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary>Предоставляет описание операции сортировки, применяемой к источнику данных.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ListSortDescription" />, используя заданно описание свойства и направление.</summary>
      <param name="property">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, описывающий свойство, по которому сортируется источник данных.</param>
      <param name="direction">Одно из значений перечисления <see cref="T:System.ComponentModel.ListSortDescription" />.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary>Получает или задает абстрактное описание свойства класса, связанное с этим описанием <see cref="T:System.ComponentModel.ListSortDescription" /></summary>
      <returns>Рабочая область метаданных <see cref="T:System.ComponentModel.PropertyDescriptor" />, связанная с этим соединением <see cref="T:System.ComponentModel.ListSortDescription" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary>Возвращает или задает направление операции сортировки, связанное с этим описанием <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <returns>Одно из значений перечисления <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary>Инициализирует новый экземпляр коллекции <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> с помощью указанного массива объектов <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <param name="sorts">Массив объектов <see cref="T:System.ComponentModel.ListSortDescription" /> ,которые будет содержать коллекция.</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary>Определяет, содержит ли <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> указанное значение.</summary>
      <param name="value">Объект <see cref="T:System.Object" /> для поиска в коллекции.</param>
      <returns>Значение <see langword="true" />, если элемент <see cref="T:System.Object" /> найден в коллекции; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>Копирует содержимое коллекции в заданный массив, начиная с указанного индекса конечного массива.</summary>
      <param name="array">Конечный массив для копирования элементов коллекции.</param>
      <param name="index">Индекс конечного массива назначения, начиная с которого выполняется копирование.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary>Возвращает количество элементов в коллекции.</summary>
      <returns>Количество элементов в коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary>Возвращает индекс заданного элемента в коллекции.</summary>
      <param name="value">Объект <see cref="T:System.Object" /> для поиска в коллекции.</param>
      <returns>Индекс <paramref name="value" />, если он найден в списке; в противном случае — значение -1.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary>Получает или задает указанный объект <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <param name="index">Отсчитываемый с нуля индекс объекта <see cref="T:System.ComponentModel.ListSortDescription" /> в коллекции, который необходимо возвратить или установить.</param>
      <returns>Объект <see cref="T:System.ComponentModel.ListSortDescription" /> с заданным индексом.</returns>
      <exception cref="T:System.InvalidOperationException">Элемент устанавливается в коллекции <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />, доступной только для чтения.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Возвращает значение, показывающее, является ли доступ к коллекции потокобезопасным.</summary>
      <returns>Значение <see langword="true" /> во всех случаях.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>Получает текущий экземпляр, который можно использовать для синхронизации доступа к коллекции.</summary>
      <returns>Текущий экземпляр коллекции <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель <see cref="T:System.Collections.IEnumerator" />, который может использоваться для перебора коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации элементов коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>Добавляет элемент в коллекцию.</summary>
      <param name="value">Элемент для добавления в коллекцию.</param>
      <returns>Позиция, на которую вставлен новый элемент.</returns>
      <exception cref="T:System.InvalidOperationException">Во всех случаях.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary>Удаляет все элементы из коллекции.</summary>
      <exception cref="T:System.InvalidOperationException">Во всех случаях.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Вставляет элемент в коллекцию по указанному индексу.</summary>
      <param name="index">Отсчитываемый с нуля индекс объекта <see cref="T:System.ComponentModel.ListSortDescription" /> в коллекции, который необходимо задать или получить.</param>
      <param name="value">Элемент, вставляемый в коллекцию.</param>
      <exception cref="T:System.InvalidOperationException">Во всех случаях.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary>Возвращает значение, указывающее, имеет ли коллекция фиксированный размер.</summary>
      <returns>Значение <see langword="true" /> во всех случаях.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary>Возвращает значение, указывающее, является ли коллекция доступной только для чтения.</summary>
      <returns>Значение <see langword="true" /> во всех случаях.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Возвращает указанный объект <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <param name="index">Отсчитываемый с нуля индекс объекта <see cref="T:System.ComponentModel.ListSortDescription" />, возвращаемого из коллекции.</param>
      <returns>Объект <see cref="T:System.ComponentModel.ListSortDescription" /> с заданным индексом.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Удаляет первое вхождение элемента из коллекции.</summary>
      <param name="value">Элемент, который нужно удалить из коллекции.</param>
      <exception cref="T:System.InvalidOperationException">Во всех случаях.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Удаляет элемент из коллекции по указанному индексу.</summary>
      <param name="index">Отсчитываемый с нуля индекс объекта <see cref="T:System.ComponentModel.ListSortDescription" />, удаляемого из коллекции.</param>
      <exception cref="T:System.InvalidOperationException">Во всех случаях.</exception>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>Задает направление для операции сортировки.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>Выполняет сортировку в порядке возрастания.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>Выполняет сортировку в порядке убывания.</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary>Определяет свойства, поддерживающие привязку на основе поиска. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> без параметров.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <param name="dataSource">Имя свойства, используемого в качестве источника данных.</param>
      <param name="displayMember">Имя свойства, используемого для отображаемого имени.</param>
      <param name="valueMember">Имя свойства, используемого в качестве источника значений.</param>
      <param name="lookupMember">Имя свойства, используемого для поиска.</param>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary>Возвращает имя свойства источника данных для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <returns>Свойство источника данных для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary>Представляет значение по умолчанию для класса <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary>Возвращает свойство элемента отображения для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <returns>Имя свойства элемента отображения для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary>Определяет, равен ли указанный объект <see cref="T:System.Object" /> текущему экземпляру <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <param name="obj">Объект <see cref="T:System.Object" /> для сравнения с текущим экземпляром <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</param>
      <returns>Значение <see langword="true" />, если объект равен текущему экземпляру; в противном случае — значение <see langword="false" />, сообщающее о неравенстве.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary>Возвращает хэш-код для данного экземпляра.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary>Возвращает имя элемента поиска для компонента, к которому привязан этот атрибут.</summary>
      <returns>Имя свойства элемента поиска для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary>Возвращает имя свойства элемента значения для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <returns>Имя свойства элемента значения для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary>Реализует интерфейс <see cref="T:System.ComponentModel.IComponent" /> и предоставляет базовую реализацию для удаленных компонентов, которые маршалируются по значению (передается копия сериализованного объекта).</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MarshalByValueComponent" />.</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary>Возвращает контейнер для компонента.</summary>
      <returns>Объект, реализующий интерфейс <see cref="T:System.ComponentModel.IContainer" />, который представляет контейнер компонента, или значение <see langword="null" />, если у компонента отсутствует узел.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary>Возвращает значение, показывающее, находится ли компонент в настоящий момент в режиме разработки.</summary>
      <returns>Значение <see langword="true" />, если компонент находится в режиме разработки; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary>Освобождает все ресурсы, занятые модулем <see cref="T:System.ComponentModel.MarshalByValueComponent" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.ComponentModel.MarshalByValueComponent" />, а при необходимости освобождает также управляемые ресурсы.</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary>Добавляет обработчик событий, чтобы прослушивать событие <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> для компонента.</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary>Возвращает список обработчиков событий, которые прикреплены к этому компоненту.</summary>
      <returns>Экземпляр класса <see cref="T:System.ComponentModel.EventHandlerList" />, предоставляющий делегаты для этого компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary>Позволяет объекту попытаться освободить ресурсы и выполнить другие операции очистки, перед тем как объект будет утилизирован в процессе сборки мусора.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary>Возвращает средство реализации объекта <see cref="T:System.IServiceProvider" />.</summary>
      <param name="service">Объект <see cref="T:System.Type" />, представляющий нужный тип службы.</param>
      <returns>Объект <see cref="T:System.Object" />, который представляет средство реализации объекта <see cref="T:System.IServiceProvider" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary>Получает или задает узел компонента.</summary>
      <returns>Объект, реализующий интерфейс <see cref="T:System.ComponentModel.ISite" />, который представляет узел компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary>Возвращает объект <see cref="T:System.String" />, содержащий имя <see cref="T:System.ComponentModel.Component" />, если оно есть. Этот метод не следует переопределять.</summary>
      <returns>Строка <see cref="T:System.String" />, содержащая имя компонента <see cref="T:System.ComponentModel.Component" />, если у компонента есть имя.
Значение <see langword="null" />, если у компонента <see cref="T:System.ComponentModel.Component" /> нет имени.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary>Представляет службу разбора маски, которая может использоваться любым количеством элементов управления, поддерживающих маски, например элементом управления <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MaskedTextProvider" />, используя заданную маску.</summary>
      <param name="mask">Строка <see cref="T:System.String" />, представляющая маску ввода.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MaskedTextProvider" />, используя заданную маску и значение ограничения ASCII.</summary>
      <param name="mask">Строка <see cref="T:System.String" />, представляющая маску ввода.</param>
      <param name="restrictToAscii">Значение <see langword="true" />, чтобы ограничить ввод ASCII-совместимыми знаками; в противном случае — значение <see langword="false" />, чтобы разрешить использовать полный набор Юникод.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MaskedTextProvider" />, используя заданную маску, знак пароля и значение использования приглашения.</summary>
      <param name="mask">Строка <see cref="T:System.String" />, представляющая маску ввода.</param>
      <param name="passwordChar">Знак <see cref="T:System.Char" />, отображаемый при вводе знаков в строке пароля.</param>
      <param name="allowPromptAsInput">Значение <see langword="true" />, разрешающее использовать знак приглашения в качестве ввода, в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MaskedTextProvider" />, используя указанные маску и значения языка и региональных параметров.</summary>
      <param name="mask">Строка <see cref="T:System.String" />, представляющая маску ввода.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый для задания зависимых от региона символов разделения.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MaskedTextProvider" />, используя заданную маску, язык и региональные параметры, а также значение ограничения ASCII.</summary>
      <param name="mask">Строка <see cref="T:System.String" />, представляющая маску ввода.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый для задания зависимых от региона символов разделения.</param>
      <param name="restrictToAscii">Значение <see langword="true" />, чтобы ограничить ввод ASCII-совместимыми знаками; в противном случае — значение <see langword="false" />, чтобы разрешить использовать полный набор Юникод.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MaskedTextProvider" />, используя заданную маску, язык и региональные параметры, значение использования приглашения, символ приглашения, знак пароля и значение ограничения ASCII.</summary>
      <param name="mask">Строка <see cref="T:System.String" />, представляющая маску ввода.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый для задания зависимых от региона символов разделения.</param>
      <param name="allowPromptAsInput">Значение <see cref="T:System.Boolean" />, определяющее, следует ли разрешать использование символа приглашения в качестве символа ввода значения.</param>
      <param name="promptChar">Знак <see cref="T:System.Char" />, который будет отображаться в качестве местозаполнителя для пользовательского ввода.</param>
      <param name="passwordChar">Знак <see cref="T:System.Char" />, отображаемый при вводе знаков в строке пароля.</param>
      <param name="restrictToAscii">Значение <see langword="true" />, чтобы ограничить ввод ASCII-совместимыми знаками; в противном случае — значение <see langword="false" />, чтобы разрешить использовать полный набор Юникод.</param>
      <exception cref="T:System.ArgumentException">Параметр маски имеет значение <see langword="null" /> или равен <see cref="F:System.String.Empty" />.

или -
Маска содержит один или несколько непечатаемых символов.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MaskedTextProvider" />, используя заданную маску, язык и региональные параметры, знак пароля и значение использования приглашения.</summary>
      <param name="mask">Строка <see cref="T:System.String" />, представляющая маску ввода.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый для задания зависимых от региона символов разделения.</param>
      <param name="passwordChar">Знак <see cref="T:System.Char" />, отображаемый при вводе знаков в строке пароля.</param>
      <param name="allowPromptAsInput">Значение <see langword="true" />, разрешающее использовать знак приглашения в качестве ввода, в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary>Добавляет указанный введенный знак в конец форматируемой строки.</summary>
      <param name="input">Значение <see cref="T:System.Char" />, добавляемое в форматируемую строку.</param>
      <returns>Значение <see langword="true" />, если введенный знак был успешно добавлен, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Добавляет заданный введенный знак в конец форматируемой строки, а затем выводит позицию и описательные сведения.</summary>
      <param name="input">Значение <see cref="T:System.Char" />, добавляемое в форматируемую строку.</param>
      <param name="testPosition">Отсчитываемая от нуля позиция форматируемой строки, в которую была предпринята попытка добавить знак. Выходной параметр.</param>
      <param name="resultHint">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции. Выходной параметр.</param>
      <returns>Значение <see langword="true" />, если введенный знак был успешно добавлен, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary>Добавляет в конец форматируемой строки знаки заданной входной строки.</summary>
      <param name="input">Строка <see cref="T:System.String" />, содержащая значения знаков, добавляемых в форматируемую строку.</param>
      <returns>Значение <see langword="true" />, если все знаки входной строки были успешно добавлены; в противном случае — значение <see langword="false" />, показывающее, что никакие знаки не были добавлены.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="input" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Добавляет знаки заданной входной строки в конец форматируемой строки, а затем выводит позицию и описательные сведения.</summary>
      <param name="input">Строка <see cref="T:System.String" />, содержащая значения знаков, добавляемых в форматируемую строку.</param>
      <param name="testPosition">Отсчитываемая от нуля позиция форматируемой строки, в которую была предпринята попытка добавить знак. Выходной параметр.</param>
      <param name="resultHint">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции. Выходной параметр.</param>
      <returns>Значение <see langword="true" />, если все знаки входной строки были успешно добавлены; в противном случае — значение <see langword="false" />, показывающее, что никакие знаки не были добавлены.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary>Возвращает значение, показывающее, следует ли рассматривать символ приглашения как допустимый знак ввода или нет.</summary>
      <returns>Значение <see langword="true" />, если пользователь может ввести любой символ <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> в элемент управления; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary>Возвращает значение, показывающее, принимает ли маска знаки, не входящие в набор знаков ASCII.</summary>
      <returns>Значение <see langword="true" />, если допустимы только знаки ASCII; значение <see langword="false" />, если поставщик <see cref="T:System.ComponentModel.MaskedTextProvider" /> может принимать любой знак Юникода. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary>Возвращает количество позиций редактируемых знаков, которым было успешно назначено введенное значение.</summary>
      <returns>Значение <see cref="T:System.Int32" /> содержит количество редактируемых позиций знаков в маске ввода, которым значение в форматированной строке уже назначено.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary>Возвращает количество редактируемых позиций знаков в маске ввода, которым еще не назначено вводимое значение.</summary>
      <returns>Значение <see cref="T:System.Int32" />, содержащее количество позиций редактируемых знаков, которым еще не было назначено символьное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary>Удаляет все введенные редактируемые знаки из форматируемой строки, заменяя их знаками приглашения.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary>Удаляет все введенные редактируемые знаки из форматируемой строки, заменяя их знаками приглашения, а затем выводя описательные сведения.</summary>
      <param name="resultHint">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции. Выходной параметр.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary>Создает копию текущего поставщика <see cref="T:System.ComponentModel.MaskedTextProvider" />.</summary>
      <returns>Поставщик <see cref="T:System.ComponentModel.MaskedTextProvider" />, созданный данным методом, приводится к форме объекта.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary>Возвращает язык и региональные параметры, определяющие значения локализуемых разделителей в маске ввода.</summary>
      <returns>Объект <see cref="T:System.Globalization.CultureInfo" />, содержащий сведения о языке и региональных параметрах, связанных с маской ввода.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary>Возвращает знак пароля по умолчанию, используемый, чтобы сделать невидимым ввод пользователя.</summary>
      <returns>Знак <see cref="T:System.Char" />, представляющий знак пароля по умолчанию.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary>Возвращает количество редактируемых позиций в форматируемой строке.</summary>
      <returns>Значение <see cref="T:System.Int32" />, содержащее количество редактируемых позиций в форматируемой строке.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary>Возвращает вновь созданный перечислитель для редактируемых позиций в форматируемой строке.</summary>
      <returns>Перечислитель <see cref="T:System.Collections.IEnumerator" />, поддерживающий перечисление редактируемых позиций в форматируемой строке.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Возвращает позицию первой назначенной редактируемой позиции после заданной позиции, используя заданное направление поиска.</summary>
      <param name="position">Отсчитываемая от нуля позиция в форматируемой строке для начала поиска.</param>
      <param name="direction">Значение типа <see cref="T:System.Boolean" />, показывающее направление поиска: <see langword="true" /> для поиска в направлении вперед или <see langword="false" /> для поиска в направлении назад.</param>
      <returns>При успешном выполнении — значение <see cref="T:System.Int32" />, представляющее отсчитываемую от нуля позицию первой встреченной назначенной редактируемой позиции, в противном случае — значение <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Возвращает позицию первой назначенной редактируемой позиции между заданными позициями, используя заданное направление поиска.</summary>
      <param name="startPosition">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается поиск.</param>
      <param name="endPosition">Отсчитываемая от нуля позиция в форматируемой строке, в которой будет заканчиваться поиск.</param>
      <param name="direction">Значение типа <see cref="T:System.Boolean" />, показывающее направление поиска: <see langword="true" /> для поиска в направлении вперед или <see langword="false" /> для поиска в направлении назад.</param>
      <returns>При успешном выполнении — значение <see cref="T:System.Int32" />, представляющее отсчитываемую от нуля позицию первой встреченной назначенной редактируемой позиции, в противном случае — значение <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Возвращает позицию первой редактируемой позиции после заданной позиции, используя заданное направление поиска.</summary>
      <param name="position">Отсчитываемая от нуля позиция в форматируемой строке для начала поиска.</param>
      <param name="direction">Значение типа <see cref="T:System.Boolean" />, показывающее направление поиска: <see langword="true" /> для поиска в направлении вперед или <see langword="false" /> для поиска в направлении назад.</param>
      <returns>При успешном выполнении — значение <see cref="T:System.Int32" />, представляющее отсчитываемую от нуля позицию первой встреченной редактируемой позиции, в противном случае — значение <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Возвращает позицию первой редактируемой позиции между заданными позициями, используя заданное направление поиска.</summary>
      <param name="startPosition">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается поиск.</param>
      <param name="endPosition">Отсчитываемая от нуля позиция в форматируемой строке, в которой будет заканчиваться поиск.</param>
      <param name="direction">Значение типа <see cref="T:System.Boolean" />, показывающее направление поиска: <see langword="true" /> для поиска в направлении вперед или <see langword="false" /> для поиска в направлении назад.</param>
      <returns>При успешном выполнении — значение <see cref="T:System.Int32" />, представляющее отсчитываемую от нуля позицию первой встреченной редактируемой позиции, в противном случае — значение <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Возвращает позицию первой нередактируемой позиции после заданной позиции, используя заданное направление поиска.</summary>
      <param name="position">Отсчитываемая от нуля позиция в форматируемой строке для начала поиска.</param>
      <param name="direction">Значение типа <see cref="T:System.Boolean" />, показывающее направление поиска: <see langword="true" /> для поиска в направлении вперед или <see langword="false" /> для поиска в направлении назад.</param>
      <returns>При успешном выполнении — значение <see cref="T:System.Int32" />, представляющее отсчитываемую от нуля позицию первого встреченного литерала, в противном случае — значение <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Возвращает позицию первой нередактируемой позиции между заданными позициями, используя заданное направление поиска.</summary>
      <param name="startPosition">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается поиск.</param>
      <param name="endPosition">Отсчитываемая от нуля позиция в форматируемой строке, в которой будет заканчиваться поиск.</param>
      <param name="direction">Значение типа <see cref="T:System.Boolean" />, показывающее направление поиска: <see langword="true" /> для поиска в направлении вперед или <see langword="false" /> для поиска в направлении назад.</param>
      <returns>При успешном выполнении — значение <see cref="T:System.Int32" />, представляющее отсчитываемую от нуля позицию первого встреченного литерала, в противном случае — значение <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Возвращает позицию первой неназначенной редактируемой позиции после заданной позиции, используя заданное направление поиска.</summary>
      <param name="position">Отсчитываемая от нуля позиция в форматируемой строке для начала поиска.</param>
      <param name="direction">Значение типа <see cref="T:System.Boolean" />, показывающее направление поиска: <see langword="true" /> для поиска в направлении вперед или <see langword="false" /> для поиска в направлении назад.</param>
      <returns>При успешном выполнении — значение <see cref="T:System.Int32" />, представляющее отсчитываемую от нуля позицию первой встреченной неназначенной редактируемой позиции, в противном случае — значение <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Возвращает позицию первой неназначенной редактируемой позиции между заданными позициями, используя заданное направление поиска.</summary>
      <param name="startPosition">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается поиск.</param>
      <param name="endPosition">Отсчитываемая от нуля позиция в форматируемой строке, в которой будет заканчиваться поиск.</param>
      <param name="direction">Значение типа <see cref="T:System.Boolean" />, показывающее направление поиска: <see langword="true" /> для поиска в направлении вперед или <see langword="false" /> для поиска в направлении назад.</param>
      <returns>При успешном выполнении — значение <see cref="T:System.Int32" />, представляющее отсчитываемую от нуля позицию первой встреченной неназначенной редактируемой позиции, в противном случае — значение <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary>Определяет, указывает ли объект <see cref="T:System.ComponentModel.MaskedTextResultHint" /> на удачное или неудачное выполнение.</summary>
      <param name="hint">Значение <see cref="T:System.ComponentModel.MaskedTextResultHint" />, обычно получаемое как выходной параметр предыдущей операции.</param>
      <returns>Значение <see langword="true" />, если заданное значение <see cref="T:System.ComponentModel.MaskedTextResultHint" /> представляет успешное завершение; в противном случае — значение <see langword="false" />, если значение объекта сообщает о неудачном выполнении.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary>Получает или задает значение, показывающее, должны ли в форматируемую строку включаться литералы.</summary>
      <returns>Значение <see langword="true" />, если включаются литералы; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary>Получает или задает значение, показывающее, используется ли знак <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> для представления отсутствия пользовательского ввода при отображении форматируемой строки.</summary>
      <returns>Значение <see langword="true" />, если знак приглашения используется для представления позиций, в которых отсутствует пользовательский ввод; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary>Вставляет заданный знак в заданную позицию форматируемой строки.</summary>
      <param name="input">Вставляемый объект <see cref="T:System.Char" />.</param>
      <param name="position">Отсчитываемая от нуля позиция для вставки знака в форматируемую строку.</param>
      <returns>Значение <see langword="true" />, если вставка прошла успешно; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Вставляет заданный знак в заданную позицию форматируемой строки, возвращая последнюю позицию вставки и статус операции.</summary>
      <param name="input">Вставляемый объект <see cref="T:System.Char" />.</param>
      <param name="position">Отсчитываемая от нуля позиция для вставки знака в форматируемую строку.</param>
      <param name="testPosition">При успешном выполнении метода — последняя позиция, в которой был вставлен знак; в противном случае — первая позиция, вставка в которую закончилась неудачей. Выходной параметр.</param>
      <param name="resultHint">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции вставки. Выходной параметр.</param>
      <returns>Значение <see langword="true" />, если вставка прошла успешно; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary>Вставляет заданную строку в заданную позицию форматируемой строки.</summary>
      <param name="input">Вставляемый объект <see cref="T:System.String" />.</param>
      <param name="position">Отсчитываемая от нуля позиция для вставки входной строки в форматируемую строку.</param>
      <returns>Значение <see langword="true" />, если вставка прошла успешно; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="input" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Вставляет заданную строку в заданную позицию форматируемой строки, возвращая последнюю позицию вставки и статус операции.</summary>
      <param name="input">Вставляемый объект <see cref="T:System.String" />.</param>
      <param name="position">Отсчитываемая от нуля позиция для вставки входной строки в форматируемую строку.</param>
      <param name="testPosition">При успешном выполнении метода — последняя позиция, в которой был вставлен знак; в противном случае — первая позиция, вставка в которую закончилась неудачей. Выходной параметр.</param>
      <param name="resultHint">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции вставки. Выходной параметр.</param>
      <returns>Значение <see langword="true" />, если вставка прошла успешно; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="input" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary>Возвращает верхнюю границу диапазона неправильных индексов.</summary>
      <returns>Значение, представляющее максимальный неправильный индекс, определяемый реализацией поставщика. Например, если минимальный допустимый индекс равен 0, это свойство возвращает -1.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary>Определяет, доступна ли заданная позиция для назначения.</summary>
      <param name="position">Отсчитываемая от нуля проверяемая позиция в маске.</param>
      <returns>Значение <see langword="true" />, если заданная позиция форматируемой строки является редактируемой и ей еще не было назначено значение; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary>Определяет, является заданная позиция редактируемой.</summary>
      <param name="position">Отсчитываемая от нуля проверяемая позиция в маске.</param>
      <returns>Значение <see langword="true" />, если заданная позиция форматируемой строки является редактируемой; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary>Получает или задает значение, определяющее, должна ли к форматируемой строке применяться защита паролем.</summary>
      <returns>Значение <see langword="true" />, если входная строка должна рассматриваться как строка пароля, в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary>Определяет, является ли заданный знак допустимым для ввода знаком.</summary>
      <param name="c">Проверяемое значение <see cref="T:System.Char" />.</param>
      <returns>Значение <see langword="true" />, если заданный знак содержит допустимое для ввода значение; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary>Определяет, является ли заданный знак допустимым знаком маски.</summary>
      <param name="c">Проверяемое значение <see cref="T:System.Char" />.</param>
      <returns>Значение <see langword="true" />, если заданный знак содержит допустимое значение маски; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary>Определяет, является ли заданный знак допустимым знаком пароля.</summary>
      <param name="c">Проверяемое значение <see cref="T:System.Char" />.</param>
      <returns>Значение <see langword="true" />, если заданный знак содержит допустимое значение пароля; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary>Возвращает элемент в заданной позиции форматируемой строки.</summary>
      <param name="index">Отсчитываемый от нуля индекс извлекаемого элемента.</param>
      <returns>Знак <see cref="T:System.Char" /> в заданной позиции форматируемой строки.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Параметр <paramref name="index" /> меньше нуля либо больше или равен значению свойства <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> маски.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary>Возвращает индекс в маске для крайнего правого введенного знака, назначенного маске.</summary>
      <returns>Если хотя бы одни введенный знак назначен маске — значение <see cref="T:System.Int32" />, содержащее индекс в маске для крайней правой назначенной позиции знака; в противном случае, если позиция не назначена — свойство <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary>Возвращает длину маски, кроме знаков-модификаторов маски.</summary>
      <returns>Значение <see cref="T:System.Int32" />, содержащее количество позиций в маске за исключением знаков, изменяющих ввод для маски.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary>Возвращаем маску ввода.</summary>
      <returns>Строка <see cref="T:System.String" />, содержащая полную маску.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary>Возвращает значение, показывающее, были ли введены в форматируемую строку все необходимые знаки.</summary>
      <returns>Значение <see langword="true" />, если в маске ведены все необходимые знаки; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary>Возвращает значение, показывающее, были ли введены в форматируемую строку все обязательные и необязательные знаки.</summary>
      <returns>Значение <see langword="true" />, если были введены все обязательные необходимые и необязательные знаки; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary>Получает или задает знак, используемый для подстановки фактически введенных знаков.</summary>
      <returns>Значение <see cref="T:System.Char" />, используемое в качестве знака пароля.</returns>
      <exception cref="T:System.InvalidOperationException">Знак пароля, заданный при определении этого свойства, совпадает с текущим знаком приглашения, <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />. Эти два знака должны отличаться.</exception>
      <exception cref="T:System.ArgumentException">Знак, заданный при определении этого свойства, не является допустимым знаком пароля, определенным методом <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary>Получает или задает знак, используемый для представления отсутствия пользовательского ввода для всех доступных позиций редактирования.</summary>
      <returns>Знак, предлагающий пользователю ввести данные. По умолчанию это знак подчеркивания (_).</returns>
      <exception cref="T:System.InvalidOperationException">Знак приглашения, заданный при определении этого свойства, совпадает с текущим знаком пароля, <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />. Эти два знака должны отличаться.</exception>
      <exception cref="T:System.ArgumentException">Знак, заданный при определении этого свойства, не является допустимым знаком пароля, определенным методом <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary>Удаляет последний назначенный знак из форматируемой строки.</summary>
      <returns>Значение <see langword="true" />, если знак успешно удален, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Удаляет последний назначенный знак из форматируемой строки, а затем выводит позицию удаления и описательные сведения.</summary>
      <param name="testPosition">Отсчитываемая от нуля позиция в форматируемой строке, в которой был фактически удален знак. Выходной параметр.</param>
      <param name="resultHint">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции. Выходной параметр.</param>
      <returns>Значение <see langword="true" />, если знак успешно удален, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary>Удаляет назначенный знак в заданной позиции форматируемой строки.</summary>
      <param name="position">Отсчитываемая от нуля позиция удаляемого назначенного знака.</param>
      <returns>Значение <see langword="true" />, если знак успешно удален, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary>Удаляет назначенные знаки между заданными позициями форматируемой строки.</summary>
      <param name="startPosition">Отсчитываемый от нуля индекс первого удаляемого назначенного знака.</param>
      <param name="endPosition">Отсчитываемый от нуля индекс последнего удаляемого назначенного знака.</param>
      <returns>Значение <see langword="true" />, если знак успешно удален, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Удаляет назначенные знаки между заданными позициями форматируемой строки, а затем выводит позицию удаления и описательные сведения.</summary>
      <param name="startPosition">Отсчитываемый от нуля индекс первого удаляемого назначенного знака.</param>
      <param name="endPosition">Отсчитываемый от нуля индекс последнего удаляемого назначенного знака.</param>
      <param name="testPosition">При удачном удалении отсчитываемая от нуля позиция в форматируемой строке, в которой были удалены знаки; в противном случае — первая позиция, в которой выполнение операции закончилось неудачей. Выходной параметр.</param>
      <param name="resultHint">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции. Выходной параметр.</param>
      <returns>Значение <see langword="true" />, если знак успешно удален, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary>Заменяет один знак в заданной позиции или после нее на заданный знак.</summary>
      <param name="input">Значение <see cref="T:System.Char" />, заменяющее существующее значение.</param>
      <param name="position">Отсчитываемая от нуля позиция, с которой начинается поиск первого редактируемого знака для замены.</param>
      <returns>Значение <see langword="true" />, если знак успешно заменен, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Заменяет один знак, начиная между заданными начальной и конечной позициями, на заданный знак, а затем выводит позицию удаления и описательные сведения.</summary>
      <param name="input">Значение <see cref="T:System.Char" />, заменяющее существующее значение.</param>
      <param name="startPosition">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается замена.</param>
      <param name="endPosition">Отсчитываемая от нуля позиция в форматируемой строке, которой заканчивается замена.</param>
      <param name="testPosition">При удачном удалении отсчитываемая от нуля позиция в форматируемой строке, в которой был фактически заменен последний знак; в противном случае — первая позиция, в которой выполнение операции закончилось неудачей. Выходной параметр.</param>
      <param name="resultHint">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции замены. Выходной параметр.</param>
      <returns>Значение <see langword="true" />, если знак успешно заменен, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Заменяет один знак, начиная с заданной позиции, на заданный знак, а затем выводит позицию удаления и описательные сведения.</summary>
      <param name="input">Значение <see cref="T:System.Char" />, заменяющее существующее значение.</param>
      <param name="position">Отсчитываемая от нуля позиция, с которой начинается поиск первого редактируемого знака для замены.</param>
      <param name="testPosition">При удачном удалении отсчитываемая от нуля позиция в форматируемой строке, в которой был фактически заменен последний знак; в противном случае — первая позиция, в которой выполнение операции закончилось неудачей. Выходной параметр.</param>
      <param name="resultHint">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции замены. Выходной параметр.</param>
      <returns>Значение <see langword="true" />, если знак успешно заменен, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary>Заменяет диапазон редактируемых знаков, начиная с заданной позиции в заданной строке.</summary>
      <param name="input">Значение <see cref="T:System.String" />, используемое для замены существующих редактируемых знаков.</param>
      <param name="position">Отсчитываемая от нуля позиция, с которой начинается поиск первого редактируемого знака для замены.</param>
      <returns>Значение <see langword="true" /> при успешной замене всех знаков; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="input" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Заменяет диапазон редактируемых знаков между заданными начальной и конечной позициями на заданную строку, а затем выводит позицию удаления и описательные сведения.</summary>
      <param name="input">Значение <see cref="T:System.String" />, используемое для замены существующих редактируемых знаков.</param>
      <param name="startPosition">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается замена.</param>
      <param name="endPosition">Отсчитываемая от нуля позиция в форматируемой строке, которой заканчивается замена.</param>
      <param name="testPosition">При удачном удалении отсчитываемая от нуля позиция в форматируемой строке, в которой был фактически заменен последний знак; в противном случае — первая позиция, в которой выполнение операции закончилось неудачей. Выходной параметр.</param>
      <param name="resultHint">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции замены. Выходной параметр.</param>
      <returns>Значение <see langword="true" /> при успешной замене всех знаков; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Заменяет диапазон редактируемых знаков, начиная с заданной позиции, на заданную строку, а затем выводит позицию удаления и описательные сведения.</summary>
      <param name="input">Значение <see cref="T:System.String" />, используемое для замены существующих редактируемых знаков.</param>
      <param name="position">Отсчитываемая от нуля позиция, с которой начинается поиск первого редактируемого знака для замены.</param>
      <param name="testPosition">При удачном удалении отсчитываемая от нуля позиция в форматируемой строке, в которой был фактически заменен последний знак; в противном случае — первая позиция, в которой выполнение операции закончилось неудачей. Выходной параметр.</param>
      <param name="resultHint">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции замены. Выходной параметр.</param>
      <returns>Значение <see langword="true" /> при успешной замене всех знаков; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary>Возвращает или задает значение, определяющее способ обработки введенного символа, совпадающего с символом приглашения.</summary>
      <returns>Значение <see langword="true" />, если ввод знака приглашения вызывает сброс текущей редактируемой позиции в маске; в противном случае — значение <see langword="false" />, чтобы показать, что знак приглашения должен обрабатываться как обычный введенный знак. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary>Возвращает или задает значение, определяющее способ обработки введенного знака пробела.</summary>
      <returns>Значение <see langword="true" />, если введенный знак пробела вызывает сброс текущей редактируемой позиции в маске, в противном случае — значение <see langword="false" />, показывающее, что этот знак должен обрабатываться как обычный введенный знак. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary>Определяет форматируемую строку для заданной входной строки.</summary>
      <param name="input">Значение <see cref="T:System.String" />, используемое для задания форматируемой строки.</param>
      <returns>Значение <see langword="true" /> при успешной установке всех знаков; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="input" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Устанавливает форматируемую строку равной заданной входной строке, а затем выводит позицию удаления и описательные сведения.</summary>
      <param name="input">Значение <see cref="T:System.String" />, используемое для задания форматируемой строки.</param>
      <param name="testPosition">При удачном удалении отсчитываемая от нуля позиция в форматируемой строке, в которой был фактически установлен последний знак; в противном случае — первая позиция, в которой выполнение операции закончилось неудачей. Выходной параметр.</param>
      <param name="resultHint">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции установки. Выходной параметр.</param>
      <returns>Значение <see langword="true" /> при успешной установке всех знаков; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="input" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary>Получает или задает значение, показывающее можно ли использовать для переопределения позиций литералов те же самые буквенные значения.</summary>
      <returns>Значение <see langword="true" />, чтобы позволить добавлять литералы; в противном случае — значение <see langword="false" />, не позволяющее пользователю переопределять литералы. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary>Возвращает форматируемую строку в отображаемом виде.</summary>
      <returns>Форматируемая строка <see cref="T:System.String" />, содержащая приглашения и литералы маски.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary>Возвращает форматируемую строку, содержащую назначенные значения знаков.</summary>
      <returns>Форматируемая строка <see cref="T:System.String" />, содержащая все назначенные значения знаков.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary>Возвращает форматируемую строку, при необходимости содержащую знаки пароля.</summary>
      <param name="ignorePasswordChar">Значение <see langword="true" />, чтобы вернуть фактические редактируемые знаки; в противном случае — значение <see langword="false" />, показывающее, что должно учитываться свойство <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />.</param>
      <returns>Форматируемая строка <see cref="T:System.String" />, содержащая литералы, приглашения и, при необходимости, знаки пароля.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary>Возвращает форматируемую строку, при необходимости включая знаки приглашения и литералы.</summary>
      <param name="includePrompt">Значение <see langword="true" />, чтобы включить знаки приглашения в возвращаемую строку; в противном случае — значение <see langword="false" />.</param>
      <param name="includeLiterals">Значение <see langword="true" />, чтобы включить литералы в возвращаемую строку; в противном случае — значение <see langword="false" />.</param>
      <returns>Форматируемая строка <see cref="T:System.String" />, содержащая все назначенные значения знаков и, при необходимости, литералы и приглашения.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>Возвращает подстроку форматируемой строки, при необходимости включая знаки приглашения, литералы и знаки пароля.</summary>
      <param name="ignorePasswordChar">Значение <see langword="true" />, чтобы вернуть фактические редактируемые знаки; в противном случае — значение <see langword="false" />, показывающее, что должно учитываться свойство <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />.</param>
      <param name="includePrompt">Значение <see langword="true" />, чтобы включить знаки приглашения в возвращаемую строку; в противном случае — значение <see langword="false" />.</param>
      <param name="includeLiterals">Значение <see langword="true" />, чтобы возвратить литералы в возвращенной строке; в противном случае — значение <see langword="false" />.</param>
      <param name="startPosition">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается вывод.</param>
      <param name="length">Число возвращаемых знаков.</param>
      <returns>В случае успеха подстрока форматируемой строки <see cref="T:System.String" />, содержащая все назначенные значения знаков и, при необходимости, литералы, знаки приглашения и знаки пароля; в противном случае — строка <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>Возвращает подстроку форматируемой строки, при необходимости включая знаки приглашения и литералы.</summary>
      <param name="includePrompt">Значение <see langword="true" />, чтобы включить знаки приглашения в возвращаемую строку; в противном случае — значение <see langword="false" />.</param>
      <param name="includeLiterals">Значение <see langword="true" />, чтобы включить литералы в возвращаемую строку; в противном случае — значение <see langword="false" />.</param>
      <param name="startPosition">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается вывод.</param>
      <param name="length">Число возвращаемых знаков.</param>
      <returns>В случае успеха подстрока форматируемой строки <see cref="T:System.String" />, содержащая все назначенные значения знаков и, при необходимости, литералы и приглашения; в противном случае — строка <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary>Возвращает подстроку форматируемой строки, при необходимости содержащую знаки пароля.</summary>
      <param name="ignorePasswordChar">Значение <see langword="true" />, чтобы вернуть фактические редактируемые знаки; в противном случае — значение <see langword="false" />, показывающее, что должно учитываться свойство <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />.</param>
      <param name="startPosition">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается вывод.</param>
      <param name="length">Число возвращаемых знаков.</param>
      <returns>В случае успеха подстрока форматируемой строки <see cref="T:System.String" />, содержащая литералы, приглашения и, при необходимости, знаки пароля; в противном случае — строка <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary>Возвращает подстроку форматируемой строки.</summary>
      <param name="startPosition">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается вывод.</param>
      <param name="length">Число возвращаемых знаков.</param>
      <returns>В случае успеха подстрока форматируемой строки <see cref="T:System.String" />, содержащая все назначенные значения знаков; в противном случае — строка <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Проверяет, может ли заданный знак быть успешно установлен в заданной позиции.</summary>
      <param name="input">Проверяемое значение <see cref="T:System.Char" />.</param>
      <param name="position">Позиция в маске, для повторной проверки введенного знака.</param>
      <param name="hint">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции. Выходной параметр.</param>
      <returns>Значение <see langword="true" />, если заданный параметр допустим для заданной позиции, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary>Проверяет, будет ли заданный знак экранироваться в заданной позиции.</summary>
      <param name="input">Проверяемое значение <see cref="T:System.Char" />.</param>
      <param name="position">Позиция в маске, для повторной проверки введенного знака.</param>
      <returns>Значение <see langword="true" />, если заданный знак в заданной позиции будет экранирован, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary>Проверяет, может ли заданная строка быть успешно установлена.</summary>
      <param name="input">Проверяемое значение <see cref="T:System.String" />.</param>
      <returns>Значение <see langword="true" />, если заданная строка представляет допустимый ввод, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Проверяет, может ли заданная строка быть успешно установлена, а затем возвращает позицию и описательные сведения.</summary>
      <param name="input">Проверяемое значение <see cref="T:System.String" />.</param>
      <param name="testPosition">В случае успеха — отсчитываемая от нуля позиция последнего фактически проверенного знака; в противном случае — первая позиция, в которой проверка закончилась неудачей. Выходной параметр.</param>
      <param name="resultHint">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции проверки. Выходной параметр.</param>
      <returns>Значение <see langword="true" />, если заданная строка представляет допустимый ввод, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary>Определяет значения, которые кратко описывают результаты операции разбора текста с маской.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary>Не удалось выполнить операцию. Обнаружен введенный знак, не являющийся алфавитно-цифровым. .</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary>Не удалось выполнить операцию. Обнаружен введенный знак, не являющийся элементом набора знаков ASCII.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary>Выполнено. Операция завершилась успешно, так как экранированным знаком является знак литерала, приглашения или пробела. Дополнительные сведения об экранированных знаках см. в описании метода <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary>Не удалось выполнить операцию. Обнаружен введенный знак, не являющийся цифрой.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary>Не удалось выполнить операцию. Программа обнаружила недопустимый введенный символ. Дополнительные сведения о знаках ,не являющихся допустимыми, см. в описании метода <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary>Не удалось выполнить операцию. Обнаружен введенный знак, не являющийся буквой.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary>Выполнено. Основная операция не была выполнена, так как она не понадобилась, поэтому побочные эффекты отсутствуют.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary>Не удалось выполнить операцию. Текущая позиция в форматируемой строке является литералом.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary>Не удалось выполнить операцию. Заданная позиция находится вне диапазона конечной строки. Обычно это происходит, если это значение меньше нуля или больше длины конечной строки.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary>Не удалось выполнить операцию. Знак приглашения нельзя использовать для ввода, возможно, потому что свойство <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> равно <see langword="false" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary>Выполнено. Основная операция не была выполнена, так как она не понадобилась, но метод вызвал побочные эффекты. Например, метод <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> может удалить неназначенную редактируемую позицию, что приведет к сдвигу последующих знаков форматируемой строки влево.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary>Не удалось выполнить операцию. Обнаружен введенный знак, не являющийся цифрой со знаком.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary>Успех. Основная операция успешно завершена.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary>Не удалось выполнить операцию. Недостаточно редактируемых позиций для выполнения запроса.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary>Нет данных. Результат операции не удалось определить.</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary>Представляет член класса, например свойство или событие. Этот класс является абстрактным базовым классом.</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MemberDescriptor" /> указанным значением <see cref="T:System.ComponentModel.MemberDescriptor" />.</summary>
      <param name="descr">Объект <see cref="T:System.ComponentModel.MemberDescriptor" />, который содержит имя члена и его атрибуты.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MemberDescriptor" />, используя имя в заданном дескрипторе <see cref="T:System.ComponentModel.MemberDescriptor" /> и атрибуты как в старом дескрипторе <see cref="T:System.ComponentModel.MemberDescriptor" />, так и в массиве <see cref="T:System.Attribute" /> .</summary>
      <param name="oldMemberDescriptor">Объект <see cref="T:System.ComponentModel.MemberDescriptor" />, который содержит имя члена и его атрибуты.</param>
      <param name="newAttributes">Массив объектов <see cref="T:System.Attribute" /> с атрибутами, которые нужно добавить для члена.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MemberDescriptor" /> с указанным именем члена.</summary>
      <param name="name">Имя элемента.</param>
      <exception cref="T:System.ArgumentException">Имя представляет собой пустую строку ("") или <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MemberDescriptor" />, используя указанное имя члена и массив атрибутов.</summary>
      <param name="name">Имя элемента.</param>
      <param name="attributes">Массив типа <see cref="T:System.Attribute" />, который содержит атрибуты члена.</param>
      <exception cref="T:System.ArgumentException">Имя представляет собой пустую строку ("") или <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary>Получает или задает массив атрибутов.</summary>
      <returns>Массив типа <see cref="T:System.Attribute" />, который содержит атрибуты этого члена.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary>Возвращает коллекцию атрибутов для этого члена.</summary>
      <returns>Коллекция <see cref="T:System.ComponentModel.AttributeCollection" />, содержащая атрибуты этого члена, или пустая коллекция, если атрибуты в массиве <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> отсутствуют.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary>Возвращает имя категории, к которой принадлежит член, как это указано в объекте <see cref="T:System.ComponentModel.CategoryAttribute" />.</summary>
      <returns>Имя категории, к которой принадлежит член. Если атрибут <see cref="T:System.ComponentModel.CategoryAttribute" /> отсутствует, имя категории устанавливается в соответствии с категорией по умолчанию, <see langword="Misc" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary>Создает коллекцию атрибутов, используя массив атрибутов, переданный в конструктор.</summary>
      <returns>Новый объект <see cref="T:System.ComponentModel.AttributeCollection" />, содержащий атрибуты <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /></returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary>Возвращает описание члена, как указано атрибутом <see cref="T:System.ComponentModel.DescriptionAttribute" />.</summary>
      <returns>Описание члена. Если атрибут <see cref="T:System.ComponentModel.DescriptionAttribute" /> отсутствует, для свойства устанавливается значение по умолчанию, равное пустой строке ("").</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary>Возвращает значение, показывающее, должен ли этот член устанавливаться только во время разработки, как указано атрибутом <see cref="T:System.ComponentModel.DesignOnlyAttribute" />.</summary>
      <returns>Значение <see langword="true" />, если член должен устанавливаться только во время разработки; значение <see langword="false" />, если возможна установка члена во время выполнения.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary>Возвращает имя, которое может быть отражено в окне, например в окне "Свойства".</summary>
      <returns>Имя, отображаемое для члена.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary>Сравнивает этот экземпляр с заданным объектом, проверяя, являются ли они эквивалентными.</summary>
      <param name="obj">Объект, сравниваемый с текущим экземпляром.</param>
      <returns>Значение <see langword="true" />, если объекты эквивалентны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary>При переопределении в производном классе добавляет атрибуты наследуемого класса к указанному списку атрибутов в родительском классе.</summary>
      <param name="attributeList">Интерфейс <see cref="T:System.Collections.IList" />, содержащий список атрибутов в родительском классе. Первоначально он пуст.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary>Находит данный метод, используя отражение, выполняя поиск только для открытых методов.</summary>
      <param name="componentClass">Компонент, содержащий метод.</param>
      <param name="name">Имя искомого метода.</param>
      <param name="args">Массив параметров для метода, используемый для выбора между перегруженными методами.</param>
      <param name="returnType">Тип, возвращаемый для метода.</param>
      <returns>Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод, или <see langword="null" />, если метод не найден.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary>Находит данный метод, используя отражение, с возможностью поиска только открытых методов.</summary>
      <param name="componentClass">Компонент, содержащий метод.</param>
      <param name="name">Имя искомого метода.</param>
      <param name="args">Массив параметров для метода, используемый для выбора между перегруженными методами.</param>
      <param name="returnType">Тип, возвращаемый для метода.</param>
      <param name="publicOnly">Указывает, ограничен ли поиск только открытыми методами.</param>
      <returns>Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод, или <see langword="null" />, если метод не найден.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.ComponentModel.MemberDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>Возвращает объект, который должен использоваться при вызове членов.</summary>
      <param name="type">Тип <see cref="T:System.Type" /> адресата вызова.</param>
      <param name="instance">Возможный адресат вызова.</param>
      <returns>Объект, используемый при вызове членов.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="type" /> или <paramref name="instance" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary>Возвращает компонент, для которого вызывается метод.</summary>
      <param name="componentClass">Объект <see cref="T:System.Type" />, представляющий тип компонента, с которым связан этот дескриптор <see cref="T:System.ComponentModel.MemberDescriptor" />. Например, если этот дескриптор <see cref="T:System.ComponentModel.MemberDescriptor" /> описывает свойство, данный параметр должен быть классом, для которого объявлено это свойство.</param>
      <param name="component">Экземпляр вызываемого объекта.</param>
      <returns>Экземпляр вызываемого компонента. Этот метод возвращает визуальный конструктор, если свойство связано с визуальным конструктором.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="componentClass" /> или <paramref name="component" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary>Возвращает узел компонента для заданного компонента.</summary>
      <param name="component">Компонент, узел для которого нужно найти.</param>
      <returns>узел компонента или значение <see langword="null" />, если узел не существует.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary>Возвращает значение, указывающее, является ли член отображаемым в обозревателе, как определено в атрибуте <see cref="T:System.ComponentModel.BrowsableAttribute" />.</summary>
      <returns>Значение <see langword="true" />, если член является отображаемым; в противном случае — значение <see langword="false" />. Если объект <see cref="T:System.ComponentModel.BrowsableAttribute" /> отсутствует, устанавливается значение свойства по умолчанию, равное <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary>Возвращает имя члена.</summary>
      <returns>Имя элемента.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary>Возвращает хэш-код для имени члена, как определено в методе <see cref="M:System.String.GetHashCode" />.</summary>
      <returns>Хэш-код для имени члена.</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary>Предоставляет преобразователь типов для выполнения многострочных строк в простую строку.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MultilineStringConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует данный объект значения в указанный тип, используя заданные сведения о контексте, а также о языке и региональных параметрах.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />. Если передано значение <see langword="null" />, используются текущие настройки языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType">Тип <see cref="T:System.Type" />, в который преобразуется параметр значения.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> — <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Возвращает коллекцию свойств для типа массива, заданного параметром <paramref name="value" />, используя заданные контекст и атрибуты.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value">Объект класса <see cref="T:System.Object" /> , задающий тип массива, для которого нужно получить свойства.</param>
      <param name="attributes">Массив типа <see cref="T:System.Attribute" />, используемый в качестве фильтра.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, доступными для этого типа данных, или <see langword="null" />, если свойства отсутствуют.</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, поддерживаются ли свойства этим объектом, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, если для поиска свойств этого объекта следует вызвать метод <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" />, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary>Предоставляет базовую реализацию интерфейса <see cref="T:System.ComponentModel.INestedContainer" />, позволяющую использовать компонент-владелец для контейнеров.</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.NestedContainer" />.</summary>
      <param name="owner">Интерфейс <see cref="T:System.ComponentModel.IComponent" />, являющийся владельцем этого вложенного контейнера.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="owner" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>Создает внутри контейнера узел для компонента.</summary>
      <param name="component">Компонент <see cref="T:System.ComponentModel.IComponent" />, для которого создается узел.</param>
      <param name="name">Имя, которое нужно присвоить параметру <paramref name="component" />, или <see langword="null" />, чтобы опустить назначение имени.</param>
      <returns>Вновь созданный <see cref="T:System.ComponentModel.ISite" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="component" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary>Освобождает ресурсы, используемые вложенным контейнером.</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить управляемые и неуправляемые ресурсы; значение <see langword="false" /> позволяет освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary>Возвращает объект службы указанного типа, если он доступен.</summary>
      <param name="service">
        <see cref="T:System.Type" /> искомой службы.</param>
      <returns>Объект <see cref="T:System.Object" />, реализующий запрошенную службу, или значение <see langword="null" />, если служба не может быть разрешена.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary>Возвращает компонент-владелец для этого вложенного контейнера.</summary>
      <returns>Интерфейс <see cref="T:System.ComponentModel.IComponent" />, являющийся владельцем этого вложенного контейнера.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary>Возвращает имя компонента-владельца.</summary>
      <returns>Имя компонента-владельца.</returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary>Обеспечивает автоматическое преобразование между типом, допускающим значение null, и его базовым типом-примитивом.</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.NullableConverter" />.</summary>
      <param name="type">Заданный обнуляемый тип.</param>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="type" /> не является обнуляемым типом.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Используя заданный контекст, возвращает значение, показывающее, может ли этот преобразователь преобразовать объект данного типа в тип этого преобразователя.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType">Объект <see cref="T:System.Type" />, представляющий тип, из которого требуется выполнить преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Используя заданный контекст, возвращает значение, указывающее, может ли этот преобразователь преобразовать объект к указанному типу.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType">Объект <see cref="T:System.Type" />, представляющий тип, в который требуется сделать преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует заданный объект в тип этого преобразователя, используя заданный контекст и информацию о языке и региональных параметрах.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый в качестве текущего языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует данный объект значения в указанный тип, используя заданные сведения о контексте, а также о языке и региональных параметрах.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый в качестве текущего языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType">Тип <see cref="T:System.Type" />, в который преобразуется параметр значения.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Создает экземпляр типа, с которым связан этот преобразователь <see cref="T:System.ComponentModel.TypeConverter" />, используя заданный контекст и переданный набор значений свойств для этого объекта.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="propertyValues">
        <see cref="T:System.Collections.IDictionary" /> новых значений свойства.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий данный <see cref="T:System.Collections.IDictionary" />, или <see langword="null" />, если объект не может быть создан. Этот метод всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, требуется ли при изменении значения этого объекта вызывать метод <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />, чтобы создать новое значение, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, если для изменения свойства в этом объекте требуется вызов <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />, чтобы создать новое значение; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Возвращает коллекцию свойств для типа массива, заданного параметром, используя заданный контекст и атрибуты.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value">Объект класса <see cref="T:System.Object" /> , задающий тип массива, для которого нужно получить свойства.</param>
      <param name="attributes">Массив типа <see cref="T:System.Attribute" />, используемый в качестве фильтра.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, доступными для этого типа данных, или <see langword="null" />, если свойства отсутствуют.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, поддерживаются ли свойства этим объектом, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Имеет значение <see langword="true" />, если для поиска свойств этого объекта следует вызвать метод <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>При предоставлении с контекстом формата возвращает коллекцию стандартных значений типа данных, для которого предназначен этот преобразователь типов.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, содержащий контекст формата, который может быть использован для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Этот параметр или свойства этого параметра могут иметь значение <see langword="null" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, содержащий стандартный набор допустимых значений, или <see langword="null" />, если этот тип данных не поддерживает стандартный набор значений.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Используя заданный контекст, возвращает значение, показывающее, является ли исчерпывающим списком возможных значений коллекция стандартных значений, возвращаемая методом <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" />.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Имеет значение <see langword="true" />, если объект класса <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, возвращенный методом <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />, является исчерпывающим списком возможных значений, значение <see langword="false" />, если возможны другие значения.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Получает значение, показывающее, поддерживает ли этот объект стандартный набор значений, которые можно выбрать из списка, используя заданную контекстную информацию.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, если метод <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> должен быть вызван для поиска общего набора значений, поддерживаемых объектом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Возвращает значение, показывающее, допустимо ли данное значение для этого типа и для заданного контекста.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value">Объект <see cref="T:System.Object" />, допустимость которого требуется проверить.</param>
      <returns>Значение <see langword="true" />, если заданное значение допустимо для этого объекта; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary>Возвращает обнуляемый тип.</summary>
      <returns>Тип <see cref="T:System.Type" />, представляющий обнуляемый тип.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary>Возвращает базовый тип.</summary>
      <returns>Тип <see cref="T:System.Type" />, представляющий базовый тип.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary>Возвращает преобразователь базового типа.</summary>
      <returns>Преобразователь <see cref="T:System.ComponentModel.TypeConverter" />, представляющий преобразователь базового типа.</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary>Указывает, что текстовое представление объекта скрыто символами, например звездочками. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />, при необходимости показывая текст пароля.</summary>
      <param name="password">Значение <see langword="true" />, показывающее, что свойство должно показываться как текст пароля; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary>Определяет значение по умолчанию для атрибута <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary>Определяет, равны ли два экземпляра <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
      <param name="o">Объект <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />, с которым сравнивается текущий объект <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</param>
      <returns>Значение <see langword="true" />, если указанный объект <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> равен текущему объекту <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary>Возвращает признак, показывающий, является ли этот экземпляр значением по умолчанию.</summary>
      <returns>Значение <see langword="true" />, если этот экземпляр является атрибутом по умолчанию для класса; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary>Определяет, что текстовое свойство не используется в качестве пароля. Это статическое (<see langword="static" />, а в Visual Basic <see langword="Shared" />) поле доступно только для чтения.</summary>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary>Возвращает значение, показывающее, должно ли свойство, для которого определен атрибут <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />, показываться как текст пароля.</summary>
      <returns>Значение <see langword="true" />, если свойство должно показываться как текст пароля; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary>Определяет, что текстовое свойство используется в качестве пароля. Это статическое (<see langword="static" />, а в Visual Basic <see langword="Shared" />) поле доступно только для чтения.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>Предоставляет краткое описание свойства в классе.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyDescriptor" />, используя имя и атрибуты заданного объекта <see cref="T:System.ComponentModel.MemberDescriptor" />.</summary>
      <param name="descr">Дескриптор <see cref="T:System.ComponentModel.MemberDescriptor" />, содержащий имя свойства и его атрибуты.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyDescriptor" />, используя имя в заданном дескрипторе <see cref="T:System.ComponentModel.MemberDescriptor" /> и атрибуты как в дескрипторе <see cref="T:System.ComponentModel.MemberDescriptor" />, так и в массиве <see cref="T:System.Attribute" />.</summary>
      <param name="descr">Класс <see cref="T:System.ComponentModel.MemberDescriptor" />, содержащий имя члена и его атрибуты.</param>
      <param name="attrs">Массив <see cref="T:System.Attribute" />, содержащий атрибуты, которые нужно связать со свойством.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyDescriptor" />, используя заданные имя и атрибуты.</summary>
      <param name="name">Имя свойства.</param>
      <param name="attrs">Массив типа <see cref="T:System.Attribute" />, содержащий атрибуты свойства.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>Позволяет уведомить другие объекты об изменении этого свойства.</summary>
      <param name="component">Компонент, для которого нужно добавить обработчик.</param>
      <param name="handler">Делегат, добавляемый в качестве прослушивателя.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="component" /> или <paramref name="handler" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary>При переопределении в производном классе возвращает значение, показывающее, изменяется ли значение объекта при его сбросе.</summary>
      <param name="component">Компонент для проверки на возможность сброса.</param>
      <returns>Значение <see langword="true" />, если сброс компонента изменяет его значение; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary>При переопределении в производном классе возвращает тип компонента, с которым связано это свойство.</summary>
      <returns>Объект <see cref="T:System.Type" /> представляющий тип компонента, с которым связано это свойство. При вызове методов <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> или <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> заданный объект может быть экземпляром этого типа.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary>Возвращает преобразователь типов для этого свойства.</summary>
      <returns>Преобразователь <see cref="T:System.ComponentModel.TypeConverter" />, используемый для преобразования типа <see cref="T:System.Type" /> этого свойства.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary>Создает экземпляр заданного типа.</summary>
      <param name="type">Объект <see cref="T:System.Type" />, представляющий создаваемый тип.</param>
      <returns>Новый экземпляр типа.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary>Сравнивает данный объект с другим, проверяя их эквивалентность.</summary>
      <param name="obj">Объект, который требуется сравнить с данным объектом <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
      <returns>Значение <see langword="true" />, если значения эквивалентны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary>Добавляет атрибуты дескриптора <see cref="T:System.ComponentModel.PropertyDescriptor" /> в заданный список атрибутов родительского класса.</summary>
      <param name="attributeList">Интерфейс <see cref="T:System.Collections.IList" />, содержащий список атрибутов в родительском классе. Первоначально он пуст.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary>По умолчанию возвращается значение <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</summary>
      <returns>Коллекция дескриптора свойств.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary>Возвращает <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, используя заданный массив атрибутов как фильтр.</summary>
      <param name="filter">Массив типа <see cref="T:System.Attribute" />, используемый как фильтр.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, соответствующими заданным атрибутам.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary>Возвращает <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> для данного объекта.</summary>
      <param name="instance">Компонент, для которого требуется получить свойства.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами данного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>Возвращает коллекцию <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> для данного объекта, используя заданный массив атрибутов как фильтр.</summary>
      <param name="instance">Компонент, для которого требуется получить свойства.</param>
      <param name="filter">Массив типа <see cref="T:System.Attribute" />, используемый как фильтр.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, соответствующими заданным атрибутам для заданного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary>Возвращает редактор заданного типа.</summary>
      <param name="editorBaseType">Базовый тип редактора, применяемый, чтобы различать многочисленные редакторы, которые поддерживает свойство.</param>
      <returns>Экземпляр запрошенного типа редактора или <see langword="null" />, если редактор не найден.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary>Возвращает хэш-код для этого объекта.</summary>
      <returns>Хэш-код этого объекта.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>Этот метод возвращает объект, которой должен использоваться при вызове членов.</summary>
      <param name="type">Тип <see cref="T:System.Type" /> адресата вызова.</param>
      <param name="instance">Возможный адресат вызова.</param>
      <returns>Объект <see cref="T:System.Object" />, который должен использоваться при вызове членов.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary>Возвращает тип, используя его имя.</summary>
      <param name="typeName">Имя возвращаемого типа с указанием сборки.</param>
      <returns>Тип <see cref="T:System.Type" />, совпадающий с данным именем типа, или <see langword="null" />, если совпадение не найдено.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary>В случае переопределения в производном классе, возвращает текущее значение свойства компонента.</summary>
      <param name="component">Компонент с свойством, для которого нужно получить значение.</param>
      <returns>Значение свойства для данного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary>Возвращает текущий набор обработчиков событий <c>ValueChanged</c> для конкретного компонента.</summary>
      <param name="component">Компонент, для которого возвращаются обработчики событий.</param>
      <returns>Объединенный многоадресный обработчик событий, или значение <see langword="null" />, если для компонента <paramref name="component" /> в данный момент не назначено ни одного обработчика событий.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary>Возвращает значение, показывающее, должно ли быть локализовано это свойство (в соответствии с атрибутом <see cref="T:System.ComponentModel.LocalizableAttribute" />).</summary>
      <returns>Значение <see langword="true" />, если член помечен атрибутом <see cref="T:System.ComponentModel.LocalizableAttribute" />, равным <see langword="true" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary>При переопределении в производном классе возвращает значение, показывающее, доступно ли свойство только для чтения.</summary>
      <returns>Значение <see langword="true" />, если свойство доступно только для чтения, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary>Вызывает реализованное вами событие <c>ValueChanged</c>.</summary>
      <param name="component">Объект, вызывающий событие.</param>
      <param name="e">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary>При переопределении в производном классе возвращает тип свойства.</summary>
      <returns>Тип <see cref="T:System.Type" />, представляющий тип свойства.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>Позволяет уведомить другие объекты об изменении этого свойства.</summary>
      <param name="component">Компонент, для которого нужно удалить обработчик.</param>
      <param name="handler">Делегат, удаляемый как прослушиватель.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="component" /> или <paramref name="handler" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary>В случае переопределения в производном классе, сбрасывает значение для этого свойства компонента в значение по умолчанию.</summary>
      <param name="component">Компонент со значением свойства, которое нужно сбросить в значение по умолчанию.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary>Возвращает значение, показывающее, должно ли это свойство быть сериализируемым (в соответствии с атрибутом <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" />).</summary>
      <returns>Одно из значений перечисления <see cref="T:System.ComponentModel.DesignerSerializationVisibility" />, определяющее, должно ли это свойство быть сериализируемым.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>При переопределении в производном классе устанавливает другое значение для компонента.</summary>
      <param name="component">Компонент со значением свойства, которое нужно установить.</param>
      <param name="value">Новое значение.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>При переопределении в производном классе определяет значение, показывающее, нужно ли сохранить данное значение свойства.</summary>
      <param name="component">Компонент со свойством, возможность сохранения которого нужно проверить.</param>
      <returns>Значение <see langword="true" />, если свойство следует сохранить; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary>Возвращает значение, показывающее, могут ли уведомления об изменении значения инициироваться не из дескриптора свойств.</summary>
      <returns>Значение <see langword="true" />, если уведомления об изменении значений могут инициироваться вне дескриптора свойств; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</summary>
      <param name="properties">Массив типа <see cref="T:System.ComponentModel.PropertyDescriptor" />, предоставляющий свойства для данной коллекции.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, который может быть экземпляром только для чтения.</summary>
      <param name="properties">Массив типа <see cref="T:System.ComponentModel.PropertyDescriptor" />, предоставляющий свойства для данной коллекции.</param>
      <param name="readOnly">Значение <see langword="true" /> определяет, что эта коллекция не может быть изменена.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary>Добавляет указанный параметр <see cref="T:System.ComponentModel.PropertyDescriptor" /> в коллекцию.</summary>
      <param name="value">Параметр <see cref="T:System.ComponentModel.PropertyDescriptor" /> для добавления в коллекцию.</param>
      <returns>Индекс объекта <see cref="T:System.ComponentModel.PropertyDescriptor" />, который был добавлен к коллекции.</returns>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary>Удаляет все объекты <see cref="T:System.ComponentModel.PropertyDescriptor" /> из коллекции.</summary>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary>Возвращает значение, показывающее, содержит ли коллекция данный дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> .</summary>
      <param name="value">Объект <see cref="T:System.ComponentModel.PropertyDescriptor" />, который нужно найти в коллекции.</param>
      <returns>Значение <see langword="true" />, если коллекция содержит данный дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary>Копирует всю коллекцию в массив, начиная с заданного индекса.</summary>
      <param name="array">Массив объектов <see cref="T:System.ComponentModel.PropertyDescriptor" />, в которые нужно занести элементы коллекции.</param>
      <param name="index">Индекс в параметре <paramref name="array" />, с которого начинается копирование.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary>Возвращает количество дескрипторов свойств в коллекции.</summary>
      <returns>Количество дескрипторов свойств в коллекции.</returns>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary>Задает пустую коллекцию, которую можно использовать вместо создания ново коллекции без элементов. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>Возвращает объект <see cref="T:System.ComponentModel.PropertyDescriptor" /> с заданным именем, используя логическое значение, чтобы показать, игнорируется ли регистр знаков.</summary>
      <param name="name">Имя объекта <see cref="T:System.ComponentModel.PropertyDescriptor" />, которое нужно возвратить из коллекции.</param>
      <param name="ignoreCase">Значение <see langword="true" />, если регистр в имени свойства не нужно учитывать, в противном случае — значение <see langword="false" />.</param>
      <returns>Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> с заданным именем или <see langword="null" />, если свойство не существует.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary>Возвращает перечислитель для этого класса.</summary>
      <returns>Перечислитель типа <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary>Возвращает индекс данного дескриптора <see cref="T:System.ComponentModel.PropertyDescriptor" /> .</summary>
      <param name="value">Объект <see cref="T:System.ComponentModel.PropertyDescriptor" />, для которого возвращается индекс.</param>
      <returns>Индекс заданного объекта <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>Добавляет в коллекцию дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> в позицию с заданным индексом.</summary>
      <param name="index">Индекс в коллекции, в позицию которого нужно добавить параметр <paramref name="value" /> .</param>
      <param name="value">Параметр <see cref="T:System.ComponentModel.PropertyDescriptor" /> для добавления в коллекцию.</param>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>Сортирует члены данной коллекции, используя заданный интерфейс <see cref="T:System.Collections.IComparer" /> .</summary>
      <param name="sorter">Средство сравнения, которое нужно использовать для сортировки объектов <see cref="T:System.ComponentModel.PropertyDescriptor" /> в данной коллекции.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary>Сортирует членов коллекции. Сначала выполняется сортировка в указанном порядке, затем используется порядок сортировки по умолчанию, обычно являющийся алфавитным,.</summary>
      <param name="names">Массив строк, описывающий порядок сортировки для объектов <see cref="T:System.ComponentModel.PropertyDescriptor" /> в этой коллекции.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary>Получает или задает дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> с заданным индексом.</summary>
      <param name="index">Индекс (с нуля) возвращаемого или задаваемого <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
      <returns>Объект <see cref="T:System.ComponentModel.PropertyDescriptor" /> с заданным индексом.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Параметр <paramref name="index" /> является недопустимым индексом <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" /> .</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary>Возвращает или задает объект <see cref="T:System.ComponentModel.PropertyDescriptor" /> с заданным именем.</summary>
      <param name="name">Имя дескриптора <see cref="T:System.ComponentModel.PropertyDescriptor" />, который нужно получить из коллекции.</param>
      <returns>Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> с заданным именем или <see langword="null" />, если свойство не существует.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary>Удаляет указанный объект <see cref="T:System.ComponentModel.PropertyDescriptor" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.ComponentModel.PropertyDescriptor" />, который требуется удалить из коллекции.</param>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary>Удаляет из коллекции дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> с заданным индексом.</summary>
      <param name="index">Индекс дескриптора <see cref="T:System.ComponentModel.PropertyDescriptor" />, который нужно удалить из коллекции.</param>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary>Сортирует члены данной коллекции, используя порядок сортировки, установленный по умолчанию для этой коллекции, являющийся обычно порядком сортировки по алфавиту.</summary>
      <returns>Новая коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая отсортированные объекты <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>Сортирует члены данной коллекции, используя заданный интерфейс <see cref="T:System.Collections.IComparer" /> .</summary>
      <param name="comparer">Средство сравнения, которое нужно использовать для сортировки объектов <see cref="T:System.ComponentModel.PropertyDescriptor" /> в данной коллекции.</param>
      <returns>Новая коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая отсортированные объекты <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary>Сортирует членов коллекции. Сначала выполняется сортировка в указанном порядке, затем используется порядок сортировки по умолчанию, обычно являющийся алфавитным,.</summary>
      <param name="names">Массив строк, описывающий порядок сортировки для объектов <see cref="T:System.ComponentModel.PropertyDescriptor" /> в этой коллекции.</param>
      <returns>Новая коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая отсортированные объекты <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>Сортирует членов коллекции. Вслед за выполнением сортировки в указанном порядке производится сортировка с использованием средства <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="names">Массив строк, описывающий порядок сортировки для объектов <see cref="T:System.ComponentModel.PropertyDescriptor" /> в этой коллекции.</param>
      <param name="comparer">Средство сравнения, которое нужно использовать для сортировки объектов <see cref="T:System.ComponentModel.PropertyDescriptor" /> в данной коллекции.</param>
      <returns>Новая коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая отсортированные объекты <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary>Возвращает количество элементов, содержащихся в коллекции.</summary>
      <returns>Количество элементов в коллекции.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Возвращает значение, указывающее, является ли доступ к коллекции синхронизированным (потокобезопасным).</summary>
      <returns>Значение <see langword="true" />, если доступ к коллекции является синхронизированным (потокобезопасным); в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>Возвращает объект, который можно использовать для синхронизации доступа к коллекции.</summary>
      <returns>Объект, который можно использовать для синхронизации доступа к коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Добавляет элемент с указанными ключом и значением в объект <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">Объект <see cref="T:System.Object" /> используется в качестве ключа добавляемого элемента.</param>
      <param name="value">Объект <see cref="T:System.Object" /> используется в качестве значения добавляемого элемента.</param>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
      <exception cref="T:System.ArgumentException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary>Удаляет из коллекции <see cref="T:System.Collections.IDictionary" /> все элементы.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Определяет, содержится ли элемент с указанным ключом в <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">Ключ, который требуется найти в <see cref="T:System.Collections.IDictionary" />.</param>
      <returns>Значение <see langword="true" />, если в <see cref="T:System.Collections.IDictionary" /> содержится элемент с данным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary>Возвращает перечислитель для этого класса.</summary>
      <returns>Перечислитель типа <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary>Получает значение, указывающее, имеет ли список <see cref="T:System.Collections.IDictionary" /> фиксированный размер.</summary>
      <returns>Значение <see langword="true" />, если словарь <see cref="T:System.Collections.IDictionary" /> имеет фиксированный размер; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary>Получает значение, указывающее, является ли объект <see cref="T:System.Collections.IDictionary" /> доступным только для чтения.</summary>
      <returns>Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.IDictionary" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary>Возвращает или задает элемент с указанным ключом.</summary>
      <param name="key">Ключ элемента, который требуется получить или задать.</param>
      <returns>Элемент с указанным ключом.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary>Возвращает интерфейс <see cref="T:System.Collections.ICollection" />, содержащий ключи <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Коллекция <see cref="T:System.Collections.ICollection" />, содержащая ключи из словаря <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Удаляет элемент с указанным ключом из объекта <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">Ключ элемента, который требуется удалить.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary>Возвращает интерфейс <see cref="T:System.Collections.ICollection" />, содержащий значения из <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Коллекция <see cref="T:System.Collections.ICollection" />, содержащая значения из словаря <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает объект <see cref="T:System.Collections.IEnumerator" /> для <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IEnumerator" /> для <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>Добавляет элемент в коллекцию <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Элемент для добавления в коллекцию.</param>
      <returns>Позиция, на которую вставлен новый элемент.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary>Удаляет все элементы из коллекции.</summary>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Определяет, содержит ли коллекция указанное значение.</summary>
      <param name="value">Элемент, помещаемый в эту коллекцию.</param>
      <returns>Значение <see langword="true" />, если элемент найден в коллекции; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Определяет индекс указанного элемента коллекции.</summary>
      <param name="value">Элемент, помещаемый в эту коллекцию.</param>
      <returns>Индекс параметра <paramref name="value" />, если он найден в списке; в противном случае -1.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Вставляет элемент в коллекцию по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="value" />.</param>
      <param name="value">Элемент, вставляемый в коллекцию.</param>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>Возвращает значение, указывающее, имеет ли коллекция фиксированный размер.</summary>
      <returns>Значение <see langword="true" />, если коллекция имеет фиксированный размер; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>Возвращает значение, указывающее, является ли коллекция доступной только для чтения.</summary>
      <returns>Значение <see langword="true" />, если коллекция доступна только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Возвращает или задает элемент, расположенный в коллекции по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс получаемого или задаваемого элемента.</param>
      <returns>Элемент, расположенный по указанному индексу.</returns>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> не является объектом <see cref="T:System.ComponentModel.PropertyDescriptor" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Значение параметра <paramref name="index" /> меньше 0.

или -
Значение параметра <paramref name="index" /> больше или равно значению свойства <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Удаляет первое вхождение указанного значения из коллекции.</summary>
      <param name="value">Элемент, который нужно удалить из коллекции.</param>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Удаляет элемент с указанным индексом.</summary>
      <param name="index">Отсчитываемый от нуля индекс удаляемого элемента.</param>
      <exception cref="T:System.NotSupportedException">Коллекция только для чтения.</exception>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary>Определяет вкладку свойств или вкладки, которые нужно отобразить для заданного класса или классов.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyTabAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyTabAttribute" />, используя заданное имя класса вкладок.</summary>
      <param name="tabClassName">Полное имя сборки для типа создаваемой вкладки. Пример применения этого формата см. в разделе <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyTabAttribute" />, используя заданные имя класса вкладок и область видимости вкладки.</summary>
      <param name="tabClassName">Полное имя сборки для типа создаваемой вкладки. Пример применения этого формата см. в разделе <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
      <param name="tabScope">Объект <see cref="T:System.ComponentModel.PropertyTabScope" />, показывающий область видимости вкладки. Если областью является <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, то она показывается только для компонентов с соответствующим атрибутом <see cref="T:System.ComponentModel.PropertyTabAttribute" />. Если областью видимости является <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, то вкладка видима для всех компонентов документа.</param>
      <exception cref="T:System.ArgumentException">Свойству <paramref name="tabScope" /> задано значение, отличное от <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> или <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyTabAttribute" />, используя указанный тип вкладки.</summary>
      <param name="tabClass">Тип создаваемой вкладки.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyTabAttribute" />, используя заданные тип и область видимости вкладки.</summary>
      <param name="tabClass">Тип создаваемой вкладки.</param>
      <param name="tabScope">Объект <see cref="T:System.ComponentModel.PropertyTabScope" />, показывающий область видимости вкладки. Если областью является <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, то она показывается только для компонентов с соответствующим атрибутом <see cref="T:System.ComponentModel.PropertyTabAttribute" />. Если областью видимости является <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, то вкладка видима для всех компонентов документа.</param>
      <exception cref="T:System.ArgumentException">Свойству <paramref name="tabScope" /> задано значение, отличное от <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> или <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary>Возвращает значение, показывающее, равен ли данный экземпляр заданному атрибуту.</summary>
      <param name="other">Атрибут <see cref="T:System.ComponentModel.PropertyTabAttribute" />, сравниваемый с данным экземпляром, или <see langword="null" />.</param>
      <returns>Значение <see langword="true" />, если экземпляры <see cref="T:System.ComponentModel.PropertyTabAttribute" /> равны; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.TypeLoadException">Невозможно найти типы, заданные свойством <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> параметра <paramref name="other" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary>Возвращает значение, показывающее, равен ли данный экземпляр заданному объекту.</summary>
      <param name="other">Объект, сравниваемый с этим экземпляром, или <see langword="null" />.</param>
      <returns>Значение <see langword="true" />, если параметр <paramref name="other" /> ссылается на тот же экземпляр <see cref="T:System.ComponentModel.PropertyTabAttribute" />; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.TypeLoadException">Не удалось найти типы, заданные свойством <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> параметра <paramref name="other" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary>Получает хэш-код для этого объекта.</summary>
      <returns>Хэш-код для объекта, которому принадлежит данный атрибут.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary>Инициализирует данный атрибут, используя заданные имена классов вкладок и массив областей видимости вкладок.</summary>
      <param name="tabClassNames">Массив полных имен типов, создаваемых для вкладок в окне "Свойства".</param>
      <param name="tabScopes">Область видимости каждой вкладки. Если областью является <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, то она показывается только для компонентов с соответствующим атрибутом <see cref="T:System.ComponentModel.PropertyTabAttribute" />. Если областью видимости является <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, то вкладка видима для всех компонентов документа.</param>
      <exception cref="T:System.ArgumentException">Одно или несколько значений в параметре <paramref name="tabScopes" /> не равно <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> или <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.

или -
Длины массивов <paramref name="tabClassNames" /> и <paramref name="tabScopes" /> не совпадают.

или -
Параметр <paramref name="tabClassNames" /> или <paramref name="tabScopes" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary>Инициализирует данный атрибут, используя заданные имена классов вкладок и массив областей видимости вкладок.</summary>
      <param name="tabClasses">Типы создаваемых вкладок.</param>
      <param name="tabScopes">Область видимости каждой вкладки. Если областью является <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, то она показывается только для компонентов с соответствующим атрибутом <see cref="T:System.ComponentModel.PropertyTabAttribute" />. Если областью видимости является <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, то вкладка видима для всех компонентов документа.</param>
      <exception cref="T:System.ArgumentException">Одно или несколько значений в параметре <paramref name="tabScopes" /> не равно <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> или <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.
-или-
Длины массивов <paramref name="tabClassNames" /> и <paramref name="tabScopes" /> не совпадают.

или -
Значение параметра <paramref name="tabClassNames" /> или <paramref name="tabScopes" /> — <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary>Возвращает типы вкладок, используемые данным атрибутом.</summary>
      <returns>Массив типов, показывающий типы вкладок, используемые данным атрибутом.</returns>
      <exception cref="T:System.TypeLoadException">Не удалось найти типы, заданные свойством <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary>Возвращает имена классов вкладок, используемые данным атрибутом.</summary>
      <returns>Имена классов вкладок, используемые данным атрибутом.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary>Возвращает массив областей видимости для каждой вкладки из класса <see cref="T:System.ComponentModel.PropertyTabAttribute" />.</summary>
      <returns>Массив объектов <see cref="T:System.ComponentModel.PropertyTabScope" />, который показывает области видимости вкладок.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary>Определяет идентификаторы, которые указывают неизменяемую область видимости вкладки в окне "Свойства".</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary>Эта вкладка зависит от текущего компонента. Эта вкладка добавляется в окно "Свойства" только для текущего компонента и удаляется, когда компонент перестает быть выделенным.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary>Эта вкладка зависит от текущего документа. Эта вкладка добавляется в окно "Свойства" и удаляется, когда выделенный в данный момент документ изменяется.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary>Эта вкладка добавляется в окно "Свойства" и может быть только явно удалена родительским компонентом.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary>Эта вкладка добавляется в окно "Свойства" и не может быть удалена.</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary>Определяет имя свойства, которое средство реализации <see cref="T:System.ComponentModel.IExtenderProvider" /> предоставляет другим компонентам. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />, используя данное имя свойства и тип его получателя.</summary>
      <param name="propertyName">Имя свойства, распространяющегося на объект заданного типа.</param>
      <param name="receiverTypeName">Имя типа данных, на который может распространяться это свойство.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />, используя имя свойства и его тип <see cref="T:System.Type" />.</summary>
      <param name="propertyName">Имя свойства, распространяющегося на объект заданного типа.</param>
      <param name="receiverType">Тип <see cref="T:System.Type" /> данных объекта, который может получить данное свойство.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary>Возвращает значение, показывающее, равно ли значение данного объекта текущему атрибуту <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />.</summary>
      <param name="obj">Объект, проверяемый на равенство.</param>
      <returns>Значение <see langword="true" />, если значение данного объекта равно значению текущего; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary>Возвращает имя свойства, предоставляемого данным классом.</summary>
      <returns>Имя свойства, предоставляемого данным классом.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary>Возвращает имя типа данных, на который может распространяться это свойство.</summary>
      <returns>Имя типа данных, на который может распространяться это свойство.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary>Возвращает уникальный идентификатор для этого атрибута.</summary>
      <returns>Объект <see cref="T:System.Object" />, являющийся уникальным идентификатором атрибута.</returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary>Указывает, что это свойство может быть использовано в качестве параметра приложения.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />.</summary>
      <param name="recommendedAsConfigurable">Значение <see langword="true" />, если свойство, с которым связан этот атрибут, может быть использовано в качестве параметра приложения; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary>Задает значение по умолчанию для атрибута <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />, равное <see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary>Указывает, равен ли этот экземпляр заданному объекту.</summary>
      <param name="obj">Другой объект, подлежащий сравнению.</param>
      <returns>Значение <see langword="true" />, если значение параметра <paramref name="obj" /> равно данному экземпляру; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary>Показывает, является ли значение этого экземпляра значением по умолчанию для класса.</summary>
      <returns>Значение <see langword="true" />, если этот экземпляр является атрибутом по умолчанию для класса; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary>Определяет, что свойство не может быть использовано в качестве параметра приложения. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary>Возвращает значение, показывающее, может ли свойство, с которым связан этот атрибут, быть использовано в качестве параметра приложения.</summary>
      <returns>Значение <see langword="true" />, если свойство, с которым связан этот атрибут, может быть использовано в качестве параметра приложения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary>Определяет, что свойство может использоваться в качестве параметра приложения. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary>Предоставляет преобразователь типа для преобразования ссылок объектов в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ReferenceConverter" />.</summary>
      <param name="type">Тип <see cref="T:System.Type" />, представляющий тип для связи с этим преобразователем ссылок.</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в объект ссылки, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType">Тип <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns>
        <see langword="true" />, если этот объект может выполнить преобразование; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Приводит заданный объект к ссылочному типу.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, задающий язык и региональные параметры, используемые для представления шрифта.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует указанное значение объекта с помощью указанного контекста и аргументов в ссылочный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, задающий язык и региональные параметры, используемые для представления шрифта.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType">Тип, в который требуется преобразовать объект.</param>
      <returns>Преобразованный объект.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> — <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает коллекцию стандартных значений для ссылочного типа данных.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, содержащий стандартный набор допустимых значений, или <see langword="null" />, если этот тип данных не поддерживает стандартный набор значений.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, является ли список стандартных значений, возвращенных из <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />, исчерпывающим.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, так как коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, возвращенная методом <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />, является исчерпывающим списком возможных значений. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Получает значение, показывающее, поддерживает ли этот объект стандартный набор значений, которые можно выбрать из списка.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, так как для поиска общего набора значений, поддерживаемых объектом, можно вызвать метод <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Возвращает значение, показывающее, может ли конкретное значение быть добавлено в коллекцию стандартных значений.</summary>
      <param name="context">Контекст <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, содержащий дополнительную контекстную информацию.</param>
      <param name="value">Проверяемое значение.</param>
      <returns>Значение <see langword="true" />, если значение допустимо и может быть добавлено в коллекцию стандартных значений, значение <see langword="false" />, если значение не может быть добавлено в коллекцию стандартных значений.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary>Предоставляет данные для события <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" />.</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.RefreshEventArgs" />, используя измененный компонент.</summary>
      <param name="componentChanged">Измененный компонент.</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.RefreshEventArgs" />, используя измененный тип компонента.</summary>
      <param name="typeChanged">Измененный тип <see cref="T:System.Type" />.</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary>Возвращает компонент, у которого изменились свойства, события или средства расширения.</summary>
      <returns>Компонент, у которого изменились свойства, события или средства расширения, или <see langword="null" />, если изменения произошли во всех компонентах данного типа.</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary>Возвращает тип <see cref="T:System.Type" />, у которого изменились свойства или события.</summary>
      <returns>Тип <see cref="T:System.Type" />, у которого изменились свойства или события.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary>Представляет метод, обрабатывающий событие <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" />, возникающее при изменении типа <see cref="T:System.Type" /> или компонента во время разработки.</summary>
      <param name="e">Класс <see cref="T:System.ComponentModel.RefreshEventArgs" />, содержащий измененный компонент или тип <see cref="T:System.Type" />.</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary>Указывает, следует ли при установке сборки вызывать установщик пользовательских действий Visual Studio или программу Installutil.exe (средство установки).</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.RunInstallerAttribute" />.</summary>
      <param name="runInstaller">Значение <see langword="true" />, если во время установки сборки следует вызвать установщик, в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary>Определяет видимость по умолчанию, которая равна <see cref="F:System.ComponentModel.RunInstallerAttribute.No" />. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary>Определяет, эквивалентно ли значение заданного атрибута <see cref="T:System.ComponentModel.RunInstallerAttribute" /> текущему атрибуту <see cref="T:System.ComponentModel.RunInstallerAttribute" />.</summary>
      <param name="obj">Объект для сравнения.</param>
      <returns>Значение <see langword="true" />, если указанный объект <see cref="T:System.ComponentModel.RunInstallerAttribute" /> равен текущему объекту <see cref="T:System.ComponentModel.RunInstallerAttribute" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary>Создает хэш-код для текущего атрибута <see cref="T:System.ComponentModel.RunInstallerAttribute" />.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.ComponentModel.RunInstallerAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary>Определяет, является ли этот атрибут используемым по умолчанию.</summary>
      <returns>Значение <see langword="true" />, если атрибут является значением по умолчанию для данного класса атрибутов; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary>Указывает, что при установке сборки не следует вызывать установщик пользовательских действий Visual Studio или программу Installutil.exe (средство установки). Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary>Возвращает значение, показывающее, следует ли вызывать установщик во время установки сборки.</summary>
      <returns>Значение <see langword="true" />, если во время установки сборки следует вызвать установщик, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary>Указывает, что при установке сборки следует вызвать установщик пользовательских действий Visual Studio или программу Installutil.exe (средство установки). Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary>Предоставляет преобразователь типов для преобразования 8-разрядных целых чисел без знака в строку и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.SByteConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary>Определяет, когда свойство компонента может быть связано с параметром приложения.</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.SettingsBindableAttribute" />.</summary>
      <param name="bindable">Значение <see langword="true" />, определяющее, что свойство подходит для привязки к нему параметров; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary>Возвращает значение, показывающее, можно ли привязать к свойству параметры.</summary>
      <returns>Значение <see langword="true" />, если свойство подходит для привязки к нему параметров; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли этот экземпляр указанному объекту.</summary>
      <param name="obj">Объект <see cref="T:System.Object" /> для сравнения с этим экземпляром или пустая ссылка (<see langword="Nothing" /> в Visual Basic).</param>
      <returns>
        <see langword="true" />, если объект <paramref name="obj" /> типу и значению данного экземпляра; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary>Определяет, что это свойство не следует использовать для привязки данных.</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary>Определяет, что это свойство можно использовать для привязки данных.</summary>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary>Предоставляет преобразователь типов для преобразования объектов, являющихся числами с плавающей запятой с одинарной точностью, в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.SingleConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary>Предоставляет преобразователь типов для преобразования строковых объектов в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.StringConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в строку, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType">Тип <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует указанный объект значения в объект <see cref="T:System.String" />.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Используемый <see cref="T:System.Globalization.CultureInfo" />.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.NotSupportedException">Не удалось выполнить преобразование.</exception>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary>Предоставляет методы проверки соответствия имени компьютера и пути конкретному синтаксису. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary>Проверяет синтаксис имени компьютера, подтверждая отсутствие символа "\".</summary>
      <param name="value">Строка, содержащая проверяемое имя компьютера.</param>
      <returns>Значение <see langword="true" />, если параметр <paramref name="value" /> соответствует правильному имени компьютера; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary>Проверяет синтаксис пути, подтверждая, что путь начинается с "\\".</summary>
      <param name="value">Строка, содержащая проверяемый путь.</param>
      <returns>Значение <see langword="true" />, если параметр <paramref name="value" /> соответствует правильному формату пути; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary>Проверяет синтаксис пути, определяя, начинается ли он с символа "\" или буквы диска "C:".</summary>
      <param name="value">Строка, содержащая проверяемый путь.</param>
      <returns>Значение <see langword="true" />, если параметр <paramref name="value" /> соответствует правильному формату пути; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary>Предоставляет преобразователь типа для преобразования объектов <see cref="T:System.TimeSpan" /> в другие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TimeSpanConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в <see cref="T:System.TimeSpan" />, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType">Тип <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Получает значение, показывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType">Объект <see cref="T:System.Type" />, представляющий тип, в который необходимо выполнить преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">Значение <paramref name="value" /> не является допустимым значением для конечного типа.</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует данный объект в объект <see cref="T:System.TimeSpan" />.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Необязательный объект <see cref="T:System.Globalization.CultureInfo" />. Если не предоставляются, предполагается использование текущего языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
      <exception cref="T:System.FormatException">Значение <paramref name="value" /> не является допустимым значением для конечного типа.</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует указанный объект в другой тип.</summary>
      <param name="context">Контекст модуля форматирования.</param>
      <param name="culture">Язык и региональные параметры, в которые будет выполнено преобразование <paramref name="value" />.</param>
      <param name="value">Преобразуемый объект.</param>
      <param name="destinationType">Тип, в который требуется преобразовать объект.</param>
      <returns>Преобразованный объект.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary>Представляет атрибут элемента панели инструментов.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> и указывает, следует ли использовать заданные по умолчанию значения для инициализации.</summary>
      <param name="defaultType">Значение <see langword="true" />, чтобы создать атрибут панели инструментов для типа по умолчанию, значение <see langword="false" />, чтобы не связывать с этим атрибутом поддержку элементов панели инструментов, установленных по умолчанию.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ToolboxItemAttribute" />, используя заданное имя типа.</summary>
      <param name="toolboxItemTypeName">Имена типа элемента панели управления и сборки, содержащей данный тип.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ToolboxItemAttribute" />, используя заданный тип элемента панели инструментов.</summary>
      <param name="toolboxItemType">Тип элемента панели инструментов.</param>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> и устанавливает для типа значение по умолчанию <see cref="T:System.Drawing.Design.ToolboxItem" />. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли этот экземпляр указанному объекту.</summary>
      <param name="obj">Объект <see cref="T:System.Object" /> для сравнения с этим экземпляром или пустая ссылка (<see langword="Nothing" /> в Visual Basic).</param>
      <returns>
        <see langword="true" />, если объект <paramref name="obj" /> типу и значению данного экземпляра; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary>Возвращает значение, показывающее, является ли текущее значение атрибута его значением по умолчанию.</summary>
      <returns>Значение <see langword="true" />, если текущим значением атрибута является значение по умолчанию; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> и устанавливает тип в <see langword="null" />. Это поле доступно только для чтения.</summary>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary>Получает или задает тип элемента панели инструментов.</summary>
      <returns>Тип элемента панели инструментов.</returns>
      <exception cref="T:System.ArgumentException">Тип найти не удалось.</exception>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary>Получает или задает имя типа текущего элемента <see cref="T:System.Drawing.Design.ToolboxItem" /> .</summary>
      <returns>Полное имя типа текущего элемента панели инструментов.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary>Задает строку фильтра и тип фильтра для использования в качестве элемента панели инструментов.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />, используя заданную строку фильтра.</summary>
      <param name="filterString">Строка фильтра для элемента панели инструментов.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />, используя заданные строку фильтра и тип фильтра.</summary>
      <param name="filterString">Строка фильтра для элемента панели инструментов.</param>
      <param name="filterType">Объект <see cref="T:System.ComponentModel.ToolboxItemFilterType" />, указывающий тип фильтра.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли этот экземпляр указанному объекту.</summary>
      <param name="obj">Объект <see cref="T:System.Object" /> для сравнения с этим экземпляром или пустая ссылка (<see langword="Nothing" /> в Visual Basic).</param>
      <returns>
        <see langword="true" />, если значение параметра <paramref name="obj" /> равно типу и значению данного экземпляра; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary>Возвращает строку фильтра для элемента панели инструментов.</summary>
      <returns>Строка фильтра для элемента панели инструментов.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary>Возвращает тип фильтра.</summary>
      <returns>Объект <see cref="T:System.ComponentModel.ToolboxItemFilterType" />, указывающий тип фильтра.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary>Показывает, содержит ли заданный объект соответствующую строку фильтра.</summary>
      <param name="obj">Объект, в котором проверяется соответствующая строка фильтра.</param>
      <returns>Значение <see langword="true" />, если заданный объект содержит соответствующую строку фильтра; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary>Возвращает идентификатор типа для этого атрибута.</summary>
      <returns>Идентификатор типа для этого атрибута. Для всех объектом <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> с одинаковыми строками фильтра возвращаются одинаковые идентификаторы типа</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary>Определяет идентификаторы, используемые для указания типа фильтра, используемого атрибутом <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary>Показывает, что использование строки фильтра элемента панели инструментов разрешено, но не является обязательным.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary>Показывает необходимость дополнительных действий, чтобы определить, использовать ли строку фильтра элемента панели инструментов. Обычно он задается в классе конструктора верхнего уровня, чтобы показать, что конструктор хочет принять или отклонить элемент панели элементов с помощью кода. Этот конструктор должен реализовывать метод <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" /> интерфейса <see cref="T:System.Drawing.Design.IToolboxUser" />.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary>Показывает, что использование строки фильтра элемента панели инструментов не разрешено. Если как конструктор, так и класс компонента имеют строку фильтра и ее значение равно <c>ToolboxItemFilterType.Prevent</c>, элемент панели элементов будет недоступен.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary>Показывает необходимость строки фильтра элемента панели инструментов, чтобы элемент панели инструментов был доступен.  Для элемента панели элементов с типом фильтра <c>Require</c>, который требуется включить, конструктор и класс компонента должны иметь соответствующую строку фильтра. Кроме того, ни конструктор, ни класс компонента не могут иметь тип фильтра <c>Prevent</c> для элемента панели элементов, который требуется включить.</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>Предоставляет унифицированный способ преобразования типов значений в другие типы, а также позволяет осуществить доступ к стандартным значениям и вложенным свойствам.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Используя заданный контекст, возвращает значение, показывающее, может ли этот преобразователь преобразовать объект данного типа в тип этого преобразователя.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType">Объект <see cref="T:System.Type" />, представляющий тип, из которого требуется выполнить преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>Возвращает значение, указывающее, может ли этот преобразователь преобразовать объект заданного типа к типу этого преобразователя.</summary>
      <param name="sourceType">Объект <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Используя заданный контекст, возвращает значение, указывающее, может ли этот преобразователь преобразовать объект к указанному типу.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType">Объект <see cref="T:System.Type" />, представляющий тип, в который требуется сделать преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>Возвращает значение, указывающее, может ли этот преобразователь выполнить преобразование данного объекта к заданному типу.</summary>
      <param name="destinationType">Класс <see cref="T:System.Type" />, представляющий тип, в который нужно выполнить преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует заданный объект в тип этого преобразователя, используя заданный контекст и информацию о языке и региональных параметрах.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый в качестве текущего языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>Приводит заданное значение к типу этого преобразователя.</summary>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>Преобразует заданную строку к типу этого преобразователя, используя нейтральные язык и региональные параметры вместе с заданным контекстом.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="text">Преобразуемый объект <see cref="T:System.String" />.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий преобразованный текст.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary>Преобразует заданную строку к типу этого преобразователя, используя нейтральные язык и региональные параметры.</summary>
      <param name="text">Преобразуемый объект <see cref="T:System.String" />.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий преобразованный текст.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary>Преобразует заданный текст в объект, используя заданный контекст и сведения о языке и региональных параметрах.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />. Если передано значение <see langword="null" />, используются текущие настройки языка и региональных параметров.</param>
      <param name="text">Преобразуемый объект <see cref="T:System.String" />.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий преобразованный текст.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>Преобразует заданный текст в объект, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="text">Преобразуемый объект <see cref="T:System.String" />.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий преобразованный текст.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>Преобразует заданный текст в объект.</summary>
      <param name="text">Текстовое представление преобразуемого объекта.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий преобразованный текст.</returns>
      <exception cref="T:System.NotSupportedException">Данная строка не может быть преобразована в соответствующий объект.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует данное значение в указанный тип, используя заданные сведения о контексте, а также о языке и региональных параметрах.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />. Если передано значение <see langword="null" />, используются текущие настройки языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType">
        <see cref="T:System.Type" />, к которому преобразуется параметр <paramref name="value" />.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>Преобразует данное значение в указанный тип, используя заданные аргументы.</summary>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType">
        <see cref="T:System.Type" />, к которому преобразуется параметр <paramref name="value" />.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Преобразует указанное значение в строковое представление для нейтральных языка и региональных параметров.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>Объект <see cref="T:System.String" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary>Преобразует указанное значение в строковое представление для нейтральных языка и региональных параметров.</summary>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>Объект <see cref="T:System.String" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует данное значение в заданный тип, используя заданный контекст и сведения о языке и региональных параметрах.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />. Если передано значение <see langword="null" />, используются текущие настройки языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Преобразует данное значение в строку, используя данный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>Преобразует указанное значение в строковое представление.</summary>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary>Повторно создает объект <see cref="T:System.Object" />, задающий набор значений свойств для объекта.</summary>
      <param name="propertyValues">Интерфейс <see cref="T:System.Collections.IDictionary" />, представляющий словарь новых значений свойства.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий данный <see cref="T:System.Collections.IDictionary" />, или <see langword="null" />, если объект не может быть создан. Этот метод всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Создает экземпляр типа, с которым связан этот преобразователь <see cref="T:System.ComponentModel.TypeConverter" />, используя заданный контекст и переданный набор значений свойств для этого объекта.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="propertyValues">
        <see cref="T:System.Collections.IDictionary" /> новых значений свойства.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий данный <see cref="T:System.Collections.IDictionary" />, или <see langword="null" />, если объект не может быть создан. Этот метод всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary>Возвращает исключение, возникающее, если преобразование не может быть выполнено.</summary>
      <param name="value">Объект <see cref="T:System.Object" /> для преобразования или <see langword="null" />, если объект отсутствует.</param>
      <returns>Объект <see cref="T:System.Exception" />, представляющий исключение, возникающее, если преобразование не может быть выполнено.</returns>
      <exception cref="T:System.NotSupportedException">Автоматически вызывается этим методом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary>Возвращает исключение, возникающее, если преобразование не может быть выполнено.</summary>
      <param name="value">Объект <see cref="T:System.Object" /> для преобразования или <see langword="null" />, если объект отсутствует.</param>
      <param name="destinationType">Объект <see cref="T:System.Type" />, представляющий тип, в который осуществлялось преобразование.</param>
      <returns>Объект <see cref="T:System.Exception" />, представляющий исключение, возникающее, если преобразование не может быть выполнено.</returns>
      <exception cref="T:System.NotSupportedException">Автоматически вызывается этим методом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary>Возвращает значение, показывающее, требуется ли при изменении значения этого объекта вызывать метод <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />, чтобы создать новое значение.</summary>
      <returns>Значение <see langword="true" />, если при изменении значения этого объекта требуется вызывать метод <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> для создания нового значения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, требуется ли при изменении значения этого объекта вызывать метод <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />, чтобы создать новое значение, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, если при изменении значения этого объекта требуется вызывать метод <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> для создания нового значения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Возвращает коллекцию свойств для типа массива, заданного параметром, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value">Объект <see cref="T:System.Object" />, задающий тип массива, для которого нужно получить свойства.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, доступными для этого типа данных, или <see langword="null" />, если свойства отсутствуют.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Возвращает коллекцию свойств для типа массива, заданного параметром, используя заданный контекст и атрибуты.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value">Объект класса <see cref="T:System.Object" /> , задающий тип массива, для которого нужно получить свойства.</param>
      <param name="attributes">Массив типа <see cref="T:System.Attribute" />, используемый в качестве фильтра.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, доступными для этого типа данных, или <see langword="null" />, если свойства отсутствуют.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary>Возвращает коллекцию свойств для типа массива, заданного параметром значения.</summary>
      <param name="value">Объект <see cref="T:System.Object" />, задающий тип массива, для которого нужно получить свойства.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, доступными для этого типа данных, или <see langword="null" />, если свойства отсутствуют.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary>Возвращает значение, показывающее, поддерживаются ли свойства этим объектом.</summary>
      <returns>Значение <see langword="true" />, если для поиска свойств этого объекта следует вызвать метод <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, поддерживаются ли свойства этим объектом, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, если для поиска свойств этого объекта следует вызвать метод <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary>Возвращает коллекцию стандартных значений из контекста по умолчанию для типа данных, для которого предназначен этот преобразователь типов.</summary>
      <returns>Коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, содержащая стандартный набор допустимых значений, или <see langword="null" />, если этот тип данных не поддерживает стандартный набор значений.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>При предоставлении с контекстом формата возвращает коллекцию стандартных значений типа данных, для которого предназначен этот преобразователь типов.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, содержащий контекст формата, который может быть использован для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Этот параметр или свойства этого параметра могут иметь значение <see langword="null" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, содержащий стандартный набор допустимых значений, или <see langword="null" />, если этот тип данных не поддерживает стандартный набор значений.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary>Возвращает значение, показывающее, является ли исчерпывающим списком коллекция стандартных значений, возвращаемая методом <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />.</summary>
      <returns>Значение <see langword="true" />, если коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, возвращенная методом <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />, является исчерпывающим списком возможных значений; значение <see langword="false" />, если возможны другие значения.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Используя заданный контекст, возвращает значение, показывающее, является ли исчерпывающим списком возможных значений коллекция стандартных значений, возвращаемая методом <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, если коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, возвращенная методом <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />, является исчерпывающим списком возможных значений; значение <see langword="false" />, если возможны другие значения.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary>Возвращает значение, показывающее, поддерживает ли объект стандартный набор значений, которые можно выбрать из списка.</summary>
      <returns>Значение <see langword="true" />, если метод <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> должен быть вызван для поиска общего набора значений, поддерживаемых объектом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Получает значение, показывающее, поддерживает ли этот объект стандартный набор значений, которые можно выбрать из списка, используя заданную контекстную информацию.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, если метод <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> должен быть вызван для поиска общего набора значений, поддерживаемых объектом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Возвращает значение, показывающее, допустимо ли данное значение для этого типа и для заданного контекста.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value">Объект <see cref="T:System.Object" />, допустимость которого требуется проверить.</param>
      <returns>Значение <see langword="true" />, если заданное значение допустимо для этого объекта; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary>Возвращает значение, показывающее, допустим ли для этого типа данный объект значения.</summary>
      <param name="value">Объект, допустимость которого требуется проверить.</param>
      <returns>Значение <see langword="true" />, если заданное значение допустимо для этого объекта; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary>Представляет класс <see langword="abstract" />, предоставляющий свойства для объектов, у которых нет свойств.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />.</summary>
      <param name="componentType">Тип <see cref="T:System.Type" />, представляющий тип компонента, с которым связывается дескриптор этого свойства.</param>
      <param name="name">Имя свойства.</param>
      <param name="propertyType">Тип <see cref="T:System.Type" />, представляющий тип данных для этого свойства.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />.</summary>
      <param name="componentType">Тип <see cref="T:System.Type" />, представляющий тип компонента, с которым связывается дескриптор этого свойства.</param>
      <param name="name">Имя свойства.</param>
      <param name="propertyType">Тип <see cref="T:System.Type" />, представляющий тип данных для этого свойства.</param>
      <param name="attributes">Массив <see cref="T:System.Attribute" />, содержащий атрибуты, связываемые со свойством.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary>Возвращает значение, показывающее, изменяет ли сброс компонента значение компонента.</summary>
      <param name="component">Компонент для проверки на возможность сброса.</param>
      <returns>Значение <see langword="true" />, если сброс компонента изменяет значение компонента; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary>Возвращает тип компонента, к которому привязывается дескриптор этого свойства.</summary>
      <returns>Тип <see cref="T:System.Type" />, представляющий тип компонента, с которым связывается это свойство.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary>Возвращает значение, показывающее, является ли это свойство доступным только для чтения.</summary>
      <returns>Значение <see langword="true" />, если это свойство доступно только для чтения; значение <see langword="false" />, если это свойство доступно и для чтения, и для записи.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary>Возвращает тип свойства.</summary>
      <returns>Тип <see cref="T:System.Type" />, представляющий тип свойства.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary>Сбрасывает данное значение этого свойства компонента.</summary>
      <param name="component">Компонент со значением свойства, которое нужно сбросить.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>Возвращает значение, показывающее, может ли значение этого свойства быть сохранено.</summary>
      <param name="component">Компонент со свойством, для которого нужно проверить сохраняемость.</param>
      <returns>Значение <see langword="true" />, если значение свойства может быть сохранено; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary>Сортирует коллекцию свойств.</summary>
      <param name="props">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая свойства для сортировки.</param>
      <param name="names">Массив имен в том порядке, в котором нужно представить свойства в коллекции.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая отсортированные свойства.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary>Представляет коллекцию значений.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />.</summary>
      <param name="values">Объект <see cref="T:System.Collections.ICollection" />, представляющий объекты, которые должны войти в коллекцию.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary>Копирует содержимое коллекции в массив.</summary>
      <param name="array">Объект <see cref="T:System.Array" />, представляющий массив, в который будет производиться копирование.</param>
      <param name="index">Начальный индекс.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary>Получает количество объектов в коллекции.</summary>
      <returns>Количество объектов в коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary>Возвращает перечислитель для этой коллекции.</summary>
      <returns>Перечислитель типа <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary>Возвращает объект с заданным индексом.</summary>
      <param name="index">Индекс объекта (отсчитываемый с нуля) <see cref="T:System.Object" />, возвращаемого из коллекции.</param>
      <returns>Объект <see cref="T:System.Object" /> с заданным индексом.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Описание этого члена см. в разделе <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>Значение <see langword="false" /> во всех случаях.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary>Описание этого члена см. в разделе <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>Значение <see langword="null" /> во всех случаях.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>Указывает, какой тип использовать в качестве преобразователя для объекта, с которым связан этот атрибут.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeConverterAttribute" />, используя заданный по умолчанию преобразователь типов, представляющий собой пустую строку ("").</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeConverterAttribute" />, используя заданное имя типа в качестве преобразователя данных для объекта, с которым связан этот атрибут.</summary>
      <param name="typeName">Полное имя класса, который будет использован в качестве преобразователя данных для объекта, с которым связан этот атрибут.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeConverterAttribute" />, используя заданный тип в качестве преобразователя данных для объекта, с которым связан этот атрибут.</summary>
      <param name="type">Тип <see cref="T:System.Type" />, представляющий тип класса преобразователя, используемого с целью преобразования данных для объекта, с которым связан этот атрибут.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>Возвращает полное имя типа <see cref="T:System.Type" />, используемого в качестве преобразователя для объекта, с которым связан этот атрибут.</summary>
      <returns>Полное имя типа <see cref="T:System.Type" />, используемого в качестве преобразователя для объекта, с которым связан этот атрибут, или пустая строка (""), если этот тип не существует. Значением по умолчанию является пустая строка ("").</returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary>Определяет, какой тип использовать в качестве преобразователя для объекта, с которым связан этот атрибут.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>Возвращает значение, показывающее, равно ли значение данного объекта текущему атрибуту <see cref="T:System.ComponentModel.TypeConverterAttribute" />.</summary>
      <param name="obj">Объект, проверяемый на равенство.</param>
      <returns>Значение <see langword="true" />, если значение данного объекта равно значению текущего атрибута <see cref="T:System.ComponentModel.TypeConverterAttribute" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.ComponentModel.TypeConverterAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary>Предоставляет дополнительные метаданные для <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, используя поставщика описания родительского типа.</summary>
      <param name="parent">Поставщик описания родительского типа.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>Создает объект, которым можно заменить другой тип данных.</summary>
      <param name="provider">Необязательный поставщик услуги.</param>
      <param name="objectType">Тип создаваемого объекта. Значением этого параметра никогда не может быть <see langword="null" />.</param>
      <param name="argTypes">Необязательный массив типов, представляющих типы параметров, передаваемые конструктору объекта. Этот массив может быть представлять собой значение <see langword="null" /> или его длина может быть нулевой.</param>
      <param name="args">Необязательный массив значений параметров для передачи в конструктор объекта.</param>
      <returns>Объект <see cref="T:System.Object" /> для подстановки</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary>Возвращает кэш на пообъектной основе, доступный как пары "ключ-значение" <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="instance">Объект, для которого возвращается кэш.</param>
      <returns>Интерфейс <see cref="T:System.Collections.IDictionary" />, если предоставленный объект поддерживает кэширование; в противном случае — значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary>Возвращает расширенный настраиваемый дескриптор типа для данного объекта.</summary>
      <param name="instance">Объект, для которого возвращается расширенный дескриптор типа.</param>
      <returns>Интерфейс <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />, который может предоставить расширенные метаданные для этого объекта.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary>Получает поставщики расширителей для заданного объекта.</summary>
      <param name="instance">Объект, для которого необходимо получить поставщики расширителей.</param>
      <returns>Массив поставщиков расширителей для параметра <paramref name="instance" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary>Возвращает имя заданного компонента или <see langword="null" />, если у компонента нет имени.</summary>
      <param name="component">Заданный компонент.</param>
      <returns>Имя заданного компонента.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="component" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary>Выполняет обычное отражение для данного объекта.</summary>
      <param name="instance">Экземпляр типа (не должен быть значением <see langword="null" />).</param>
      <returns>Тип отражения для этого объекта <paramref name="instance" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="instance" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary>Выполняет обычное отражение для типа.</summary>
      <param name="objectType">Тип объекта, для которого возвращается интерфейс <see cref="T:System.Reflection.IReflect" />.</param>
      <returns>Тип отражения для этого объекта <paramref name="objectType" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="objectType" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary>Выполняет обычное отражение для заданного объекта с заданным типом.</summary>
      <param name="objectType">Тип объекта, для которого возвращается интерфейс <see cref="T:System.Reflection.IReflect" />.</param>
      <param name="instance">Экземпляр типа. Может иметь значение <see langword="null" />.</param>
      <returns>Тип отражения для этого объекта <paramref name="objectType" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary>Преобразует тип отражения в тип среды выполнения.</summary>
      <param name="reflectionType">Тип, который нужно преобразовать в соответствующий эквивалент среды выполнения.</param>
      <returns>Тип <see cref="T:System.Type" />, представляющий эквивалент среды выполнения для типа <paramref name="reflectionType" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="reflectionType" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary>Возвращает настраиваемый дескриптор типа для заданного объекта.</summary>
      <param name="instance">Экземпляр типа. Может быть значением <see langword="null" />, если в дескриптор <see cref="T:System.ComponentModel.TypeDescriptor" /> не передан никакой экземпляр.</param>
      <returns>Дескриптор <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />, который может предоставить метаданные для этого типа.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="instance" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary>Возвращает настраиваемый дескриптор типа для заданного типа.</summary>
      <param name="objectType">Тип объекта, для которого возвращается дескриптор типа.</param>
      <returns>Дескриптор <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />, который может предоставить метаданные для этого типа.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>Возвращает настраиваемый дескриптор типа для заданного типа и объекта.</summary>
      <param name="objectType">Тип объекта, для которого возвращается дескриптор типа.</param>
      <param name="instance">Экземпляр типа. Может быть значением <see langword="null" />, если в дескриптор <see cref="T:System.ComponentModel.TypeDescriptor" /> не передан никакой экземпляр.</param>
      <returns>Дескриптор <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />, который может предоставить метаданные для этого типа.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary>Получает значение, указывающее, совместим ли заданный тип с описанием типа и его цепочкой поставщиков описаний типов.</summary>
      <param name="type">Тип для проверки на совместимость.</param>
      <returns>Значение <see langword="true" />, если тип <paramref name="type" /> совместим с описанием типа и его цепочкой поставщиков описаний типов; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="type" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary>Определяет настраиваемый поставщик описания типа для класса. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" />, используя указанное имя типа.</summary>
      <param name="typeName">Полное имя типа.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="typeName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" />, используя указанный тип.</summary>
      <param name="type">Тип, сохраняемый в атрибуте.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="type" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary>Возвращает имя типа для поставщика описания типа.</summary>
      <returns>Строка <see cref="T:System.String" />, содержащая полное имя поставщика <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary>Предоставляет сведения о характеристиках компонента, таких как его атрибуты, свойства и события. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary>Добавляет атрибуты уровня класса в экземпляр целевого компонента.</summary>
      <param name="instance">Экземпляр целевого компонента.</param>
      <param name="attributes">Массив объектов <see cref="T:System.Attribute" />, добавляемых в класс компонента.</param>
      <returns>Только что созданный поставщик <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, использовавшийся для добавления заданных атрибутов.</returns>
      <exception cref="T:System.ArgumentNullException">Значением одного или обоих параметров является <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary>Добавляет атрибуты уровня класса к типу целевого компонента.</summary>
      <param name="type">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <param name="attributes">Массив объектов <see cref="T:System.Attribute" />, добавляемых в класс компонента.</param>
      <returns>Только что созданный поставщик <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, использовавшийся для добавления заданных атрибутов.</returns>
      <exception cref="T:System.ArgumentNullException">Значением одного или обоих параметров является <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary>Добавляет таблицу редактора для данного базового типа редактора.</summary>
      <param name="editorBaseType">Базовый тип редактора для добавления таблицы редактора. Если таблица уже существует для этого типа, этот метод не выполняет никаких действий.</param>
      <param name="table">Добавляемый объект <see cref="T:System.Collections.Hashtable" />.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Добавляет поставщик описания типа для одного экземпляра компонента.</summary>
      <param name="provider">Добавляемый объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</param>
      <param name="instance">Экземпляр целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException">Хотя бы один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Добавляет поставщика описания типа для класса компонента.</summary>
      <param name="provider">Добавляемый объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</param>
      <param name="type">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException">Хотя бы один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Добавляет поставщик описания типа для одного экземпляра компонента.</summary>
      <param name="provider">Добавляемый объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</param>
      <param name="instance">Экземпляр целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException">Хотя бы один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Добавляет поставщика описания типа для класса компонента.</summary>
      <param name="provider">Добавляемый объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</param>
      <param name="type">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException">Хотя бы один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary>Получает или задает поставщик сведений о типе COM для целевого компонента.</summary>
      <returns>Экземпляр <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" />, представляющий поставщик сведений о типе COM.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary>Получает тип COM-объекта, представленный целевым компонентом.</summary>
      <returns>Тип <see cref="T:System.Type" /> COM-объекта, представленного этим компонентом, или <see langword="null" /> для объектов, не являющихся COM-объектами.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary>Создает связь "основной — дополнительный" между двумя объектами.</summary>
      <param name="primary">Основной <see cref="T:System.Object" />.</param>
      <param name="secondary">Дополнительный <see cref="T:System.Object" />.</param>
      <exception cref="T:System.ArgumentNullException">Хотя бы один параметр имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="primary" /> равно <paramref name="secondary" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary>Создает экземпляр конструктора, связанный с указанным компонентом указанного типа конструктора.</summary>
      <param name="component">Интерфейс <see cref="T:System.ComponentModel.IComponent" />, указывающий компонент, который нужно связать с конструктором.</param>
      <param name="designerBaseType">Объект <see cref="T:System.Type" />, представляющий тип создаваемого конструктора.</param>
      <returns>Объект <see cref="T:System.ComponentModel.Design.IDesigner" />, являющийся экземпляром конструктора для компонента, или <see langword="null" />, если конструктор не удается найти.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary>Создает новый дескриптор события, идентичный существующему дескриптору события, при передаче существующего <see cref="T:System.ComponentModel.EventDescriptor" />.</summary>
      <param name="componentType">Тип компонента, для которого создается новое событие.</param>
      <param name="oldEventDescriptor">Сведения о существующем событии.</param>
      <param name="attributes">Новые атрибуты.</param>
      <returns>Новый объект <see cref="T:System.ComponentModel.EventDescriptor" />, который объединил указанные атрибуты метаданных с существующими атрибутами метаданных.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>Создает новый дескриптор события, идентичный существующему, путем динамического создания сведений о дескрипторе на основе указанного события для типа.</summary>
      <param name="componentType">Тип компонента, содержащего событие.</param>
      <param name="name">Имя события.</param>
      <param name="type">Тип делегата, который обрабатывает событие.</param>
      <param name="attributes">Атрибуты для этого события.</param>
      <returns>Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" />, который привязан к типу.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>Создает объект, которым можно заменить другой тип данных.</summary>
      <param name="provider">Поставщик служб, предоставляющий службу <see cref="T:System.ComponentModel.TypeDescriptionProvider" />. Этот параметр может иметь значение <see langword="null" />.</param>
      <param name="objectType">Тип <see cref="T:System.Type" /> создаваемого объекта.</param>
      <param name="argTypes">Необязательный массив типов параметров для передачи в конструктор объекта. Этот параметр может иметь значение <see langword="null" /> или быть массивом нулевой длины.</param>
      <param name="args">Необязательный массив значений параметров для передачи в конструктор объекта. Если не <see langword="null" />, число элементов должно быть таким же, как <paramref name="argTypes" />.</param>
      <returns>Экземпляр подставляемого типа данных, если найден связанный поставщик <see cref="T:System.ComponentModel.TypeDescriptionProvider" />; в противном случае — значение <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="objectType" /> имеет значение <see langword="null" />, или параметр <paramref name="args" /> имеет значение <see langword="null" />, если значением параметра <paramref name="argTypes" /> не является <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Параметры <paramref name="argTypes" /> и <paramref name="args" /> содержат различное количество элементов.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>Создает новый дескриптор свойства из существующего свойства компонента, используя заданный существующий дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> и массив атрибутов.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> компонента, членом которого является свойство.</param>
      <param name="oldPropertyDescriptor">Существующий дескриптор свойства.</param>
      <param name="attributes">Новые атрибуты этого свойства.</param>
      <returns>Новый дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, объединивший заданные атрибуты метаданных с существующими атрибутами метаданных.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>Создает и динамически связывает дескриптор свойства с типом, используя указанное имя свойства, тип и массив атрибутов.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> компонента, членом которого является свойство.</param>
      <param name="name">Имя свойства.</param>
      <param name="type">
        <see cref="T:System.Type" /> свойства.</param>
      <param name="attributes">Новые атрибуты этого свойства.</param>
      <returns>Объект <see cref="T:System.ComponentModel.PropertyDescriptor" />, связанный с указанным типом и имеющий заданные атрибуты метаданных, объединенные с существующими атрибутами метаданных.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary>Возвращает экземпляр типа, связанный с заданным основным объектом.</summary>
      <param name="type">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <param name="primary">Основной объект связи.</param>
      <returns>Экземпляр подчиненного типа, связанный с основным объектом, если связь существует; в противном случае — параметр <paramref name="primary" />, если заданная связь отсутствует.</returns>
      <exception cref="T:System.ArgumentNullException">Хотя бы один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary>Возвращает коллекцию атрибутов для указанного компонента.</summary>
      <param name="component">Компонент, для которого требуется получить атрибуты.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.AttributeCollection" />, содержащая атрибуты для этого компонента. Если параметр <paramref name="component" /> имеет значение <see langword="null" />, этот метод возвращает пустую коллекцию.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary>Возвращает коллекцию атрибутов для указанного компонента и логическое значение, указывающее, что был создан настраиваемый дескриптор типа.</summary>
      <param name="component">Компонент, для которого требуется получить атрибуты.</param>
      <param name="noCustomTypeDesc">Значение <see langword="true" />, чтобы использовать базовый набор атрибутов из настраиваемого дескриптора типа, если <paramref name="component" /> имеет тип <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />; в противном случае — значение <see langword="false" />.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.AttributeCollection" />, содержащая атрибуты для данного компонента. Если компонент — <see langword="null" />, этот метод возвращает пустую коллекцию.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary>Возвращает коллекцию атрибутов для указанного типа компонента.</summary>
      <param name="componentType">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.AttributeCollection" />, содержащая атрибуты для данного типа компонента. Если компонент — <see langword="null" />, этот метод возвращает пустую коллекцию.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary>Возвращает имя класса для указанного компонента, используя дескриптор типа по умолчанию.</summary>
      <param name="component">Объект <see cref="T:System.Object" />, для которого требуется получить имя класса.</param>
      <returns>Объект <see cref="T:System.String" />, содержащий имя класса для заданного компонента.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="component" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary>Возвращает имя класса для указанного компонента, используя дескриптор пользовательского типа.</summary>
      <param name="component">Объект <see cref="T:System.Object" />, для которого требуется получить имя класса.</param>
      <param name="noCustomTypeDesc">Значение <see langword="true" /> для учета настраиваемых сведений описания типа; в противном случае — значение <see langword="false" />.</param>
      <returns>Объект <see cref="T:System.String" />, содержащий имя класса для заданного компонента.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary>Возвращает имя класса для указанного типа.</summary>
      <param name="componentType">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <returns>Объект <see cref="T:System.String" />, содержащий имя класса для заданного типа.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="componentType" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary>Возвращает имя указанного компонента, используя дескриптор типа по умолчанию.</summary>
      <param name="component">Объект <see cref="T:System.Object" />, для которого требуется получить имя класса.</param>
      <returns>Строка <see cref="T:System.String" />, содержащая имя заданного компонента, или <see langword="null" />, если имя компонента отсутствует.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary>Возвращает имя указанного компонента, используя дескриптор пользовательского типа.</summary>
      <param name="component">Объект <see cref="T:System.Object" />, для которого требуется получить имя класса.</param>
      <param name="noCustomTypeDesc">Значение <see langword="true" /> для учета настраиваемых сведений описания типа; в противном случае — значение <see langword="false" />.</param>
      <returns>Имя класса для заданного компонента или <see langword="null" />, если имя компонента отсутствует.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary>Возвращает преобразователь типов для типа указанного компонента.</summary>
      <param name="component">Компонент для получения преобразователя.</param>
      <returns>Преобразователь <see cref="T:System.ComponentModel.TypeConverter" /> для заданного компонента.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary>Возвращает преобразователь типов для типа указанного компонента с настраиваемым дескриптором типа.</summary>
      <param name="component">Компонент для получения преобразователя.</param>
      <param name="noCustomTypeDesc">Значение <see langword="true" /> для учета настраиваемых сведений описания типа; в противном случае — значение <see langword="false" />.</param>
      <returns>Преобразователь <see cref="T:System.ComponentModel.TypeConverter" /> для заданного компонента.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary>Возвращает преобразователь типов для указанного типа.</summary>
      <param name="type">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> для заданного типа.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="type" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary>Возвращает событие по умолчанию для указанного компонента.</summary>
      <param name="component">Компонент, для которого нужно получить событие.</param>
      <returns>Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> с событием по умолчанию или <see langword="null" /> при отсутствии событий.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary>Возвращает событие по умолчанию для компонента с настраиваемым дескриптором типа.</summary>
      <param name="component">Компонент, для которого нужно получить событие.</param>
      <param name="noCustomTypeDesc">Значение <see langword="true" /> для учета настраиваемых сведений описания типа; в противном случае — значение <see langword="false" />.</param>
      <returns>Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> с событием по умолчанию или <see langword="null" /> при отсутствии событий.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary>Возвращает событие по умолчанию для указанного типа компонента.</summary>
      <param name="componentType">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <returns>Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> с событием по умолчанию или <see langword="null" /> при отсутствии событий.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="componentType" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary>Возвращает свойство по умолчанию для указанного компонента.</summary>
      <param name="component">Компонент, для которого требуется получить свойство по умолчанию.</param>
      <returns>Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> со свойством по умолчанию или <see langword="null" /> при отсутствии свойств.</returns>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary>Возвращает свойство по умолчанию для указанного компонента с настраиваемым дескриптором типа.</summary>
      <param name="component">Компонент, для которого требуется получить свойство по умолчанию.</param>
      <param name="noCustomTypeDesc">Значение <see langword="true" /> для учета настраиваемых сведений описания типа; в противном случае — значение <see langword="false" />.</param>
      <returns>Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> со свойством по умолчанию или <see langword="null" /> при отсутствии свойств.</returns>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary>Возвращает свойство по умолчанию для указанного типа компонента.</summary>
      <param name="componentType">Тип <see cref="T:System.Type" />, представляющий класс, для которого нужно получить свойство.</param>
      <returns>Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> со свойством по умолчанию или <see langword="null" /> при отсутствии свойств.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary>Получает редактор с заданным базовым типом для указанного компонента.</summary>
      <param name="component">Компонент, для которого нужно получить редактор.</param>
      <param name="editorBaseType">Тип <see cref="T:System.Type" />, представляющий базовый тип искомого редактора.</param>
      <returns>Экземпляр редактора, который может быть приведен к заданному типу редактора, или <see langword="null" />, если не удается найти редактор запрошенного типа.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="component" /> или <paramref name="editorBaseType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary>Возвращает редактор с заданным базовым типом и настраиваемым дескриптором типа для указанного компонента.</summary>
      <param name="component">Компонент, для которого нужно получить редактор.</param>
      <param name="editorBaseType">Тип <see cref="T:System.Type" />, представляющий базовый тип искомого редактора.</param>
      <param name="noCustomTypeDesc">Флаг, указывающий, следует ли учитывать сведения настраиваемого описания типа.</param>
      <returns>Экземпляр редактора, который может быть приведен к заданному типу редактора, или <see langword="null" />, если не удается найти редактор запрошенного типа.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="component" /> или <paramref name="editorBaseType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary>Получает редактор с заданным базовым типом для указанного компонента.</summary>
      <param name="type">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <param name="editorBaseType">Тип <see cref="T:System.Type" />, представляющий базовый тип искомого редактора.</param>
      <returns>Экземпляр объекта редактора, который может быть приведен к заданному базовому типу, или <see langword="null" />, если не удается найти редактор запрошенного типа.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="type" /> или <paramref name="editorBaseType" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary>Возвращает коллекцию событий для указанного компонента.</summary>
      <param name="component">Компонент, для которого извлекаются события.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.EventDescriptorCollection" /> с событиями для данного компонента.</returns>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary>Возвращает коллекцию событий для указанного компонента, используя заданный массив атрибутов в качестве фильтра.</summary>
      <param name="component">Компонент, для которого извлекаются события.</param>
      <param name="attributes">Массив типа <see cref="T:System.Attribute" />, который можно использовать в качестве фильтра.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.EventDescriptorCollection" />, содержащая события, соответствующие заданным атрибутам для этого компонента.</returns>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary>Возвращает коллекцию событий для указанного компонента, используя заданный массив атрибутов в качестве фильтра и используя пользовательский дескриптор типа.</summary>
      <param name="component">Компонент, для которого извлекаются события.</param>
      <param name="attributes">Массив типа <see cref="T:System.Attribute" />, используемый как фильтр.</param>
      <param name="noCustomTypeDesc">Значение <see langword="true" /> для учета настраиваемых сведений описания типа; в противном случае — значение <see langword="false" />.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.EventDescriptorCollection" />, содержащая события, соответствующие заданным атрибутам для этого компонента.</returns>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary>Возвращает коллекцию событий для указанного компонента с дескриптором пользовательского типа.</summary>
      <param name="component">Компонент, для которого извлекаются события.</param>
      <param name="noCustomTypeDesc">Значение <see langword="true" /> для учета настраиваемых сведений описания типа; в противном случае — значение <see langword="false" />.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.EventDescriptorCollection" /> с событиями для данного компонента.</returns>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary>Возвращает коллекцию событий для указанного типа компонента.</summary>
      <param name="componentType">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.EventDescriptorCollection" /> с событиями для данного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary>Возвращает коллекцию событий для указанного типа компонента, используя заданный массив атрибутов в качестве фильтра.</summary>
      <param name="componentType">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <param name="attributes">Массив типа <see cref="T:System.Attribute" />, который можно использовать в качестве фильтра.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.EventDescriptorCollection" />, содержащая события, соответствующие заданным атрибутам для этого компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary>Возвращает полное имя компонента.</summary>
      <param name="component">Компонент <see cref="T:System.ComponentModel.Component" />, имя которого нужно найти.</param>
      <returns>Полное имя заданного компонента, или <see langword="null" />, если у компонента нет имени.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="component" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary>Возвращает коллекцию свойств для указанного компонента.</summary>
      <param name="component">Компонент, для которого требуется получить свойства.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами данного компонента.</returns>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary>Возвращает коллекцию свойств для указанного компонента, используя заданный массив атрибутов в качестве фильтра.</summary>
      <param name="component">Компонент, для которого требуется получить свойства.</param>
      <param name="attributes">Массив типа <see cref="T:System.Attribute" />, используемый как фильтр.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, соответствующими заданным атрибутам для заданного компонента.</returns>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary>Возвращает коллекцию свойств для указанного компонента, используя заданный массив атрибутов в качестве фильтра и пользовательский дескриптор типа.</summary>
      <param name="component">Компонент, для которого требуется получить свойства.</param>
      <param name="attributes">Массив типа <see cref="T:System.Attribute" />, используемый как фильтр.</param>
      <param name="noCustomTypeDesc">Значение <see langword="true" /> для учета настраиваемых сведений описания типа; в противном случае — значение <see langword="false" />.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> с событиями, совпадающими с указанными атрибутами для заданного компонента.</returns>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary>Возвращает коллекцию свойств для указанного компонента, используя дескриптор типа по умолчанию.</summary>
      <param name="component">Компонент, для которого требуется получить свойства.</param>
      <param name="noCustomTypeDesc">Значение <see langword="true" />, чтобы настраиваемые сведения описания типа не учитывались; в противном случае — значение <see langword="false" />.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами заданного компонента.</returns>
      <exception cref="T:System.NotSupportedException">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary>Возвращает коллекцию свойств для указанного типа компонента.</summary>
      <param name="componentType">Тип <see cref="T:System.Type" />, представляющий компонент, свойства для которого нужно получить.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая свойства для заданного типа компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary>Возвращает коллекцию свойств для указанного типа компонента, используя заданный массив атрибутов в качестве фильтра.</summary>
      <param name="componentType">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <param name="attributes">Массив типа <see cref="T:System.Attribute" />, используемый как фильтр.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, соответствующими заданным атрибутам для данного типа компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary>Возвращает поставщик описания типа для указанного компонента.</summary>
      <param name="instance">Экземпляр целевого компонента.</param>
      <returns>Поставщик <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, связанный с заданным компонентом.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="instance" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary>Возвращает поставщик описания типа для указанного типа.</summary>
      <param name="type">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <returns>Поставщик <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, связанный с указанным типом.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="type" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary>Возвращает тип <see cref="T:System.Type" />, который может использоваться для выполнения отражения, используя объект.</summary>
      <param name="instance">Экземпляр целевого компонента.</param>
      <returns>Тип <see cref="T:System.Type" /> для заданного объекта.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="instance" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary>Возвращает тип <see cref="T:System.Type" />, который может использоваться для выполнения отражения, используя тип класса.</summary>
      <param name="type">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <returns>Тип <see cref="T:System.Type" /> заданного класса.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="type" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary>Получает тип, представляющий поставщика описаний типов для всех типов интерфейса.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий настраиваемый поставщик описания типа для всех типов интерфейсов.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary>Удаляет свойства и события для указанного компонента из кэша.</summary>
      <param name="component">Компонент, для которого были изменены свойства или события.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary>Удаляет свойства и события для указанной сборки из кэша.</summary>
      <param name="assembly">Объект <see cref="T:System.Reflection.Assembly" />, представляющий обновляемую сборку. Каждый тип <see cref="T:System.Type" /> в этой сборке будет обновлен.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary>Удаляет свойства и события для указанного модуля из кэша.</summary>
      <param name="module">Объект <see cref="T:System.Reflection.Module" />, представляющий обновляемый модуль. Каждый тип <see cref="T:System.Type" /> в этом модуле будет обновлен.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary>Удаляет свойства и события для указанного типа компонента из кэша.</summary>
      <param name="type">Тип <see cref="T:System.Type" /> целевого компонента.</param>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary>Возникает при очистке кэша для компонента.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary>Удаляет ассоциацию между двумя объектами.</summary>
      <param name="primary">Основной <see cref="T:System.Object" />.</param>
      <param name="secondary">Дополнительный <see cref="T:System.Object" />.</param>
      <exception cref="T:System.ArgumentNullException">Хотя бы один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary>Удаляет все ассоциации для основного объекта.</summary>
      <param name="primary">Главный объект <see cref="T:System.Object" /> в связи.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="primary" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Удаляет ранее добавленный поставщик описания типа, связанный с указанным объектом.</summary>
      <param name="provider">Объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> для удаления.</param>
      <param name="instance">Экземпляр целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException">Хотя бы один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Удаляет ранее добавленный поставщик описания типа, связанный с указанным типом.</summary>
      <param name="provider">Объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> для удаления.</param>
      <param name="type">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException">Хотя бы один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Удаляет ранее добавленный поставщик описания типа, связанный с указанным объектом.</summary>
      <param name="provider">Объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> для удаления.</param>
      <param name="instance">Экземпляр целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException">Хотя бы один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Удаляет ранее добавленный поставщик описания типа, связанный с указанным типом.</summary>
      <param name="provider">Объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> для удаления.</param>
      <param name="type">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException">Хотя бы один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary>Сортирует дескрипторы по их именам.</summary>
      <param name="infos">Список <see cref="T:System.Collections.IList" />, содержащий сортируемые дескрипторы.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="infos" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary>Предоставляет преобразователь типов, который может быть использован для заполнения поля списка доступными типами.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeListConverter" />, используя в качестве доступных типов массив типов.</summary>
      <param name="types">Массив типов <see cref="T:System.Type" />, используемый в качестве доступных типов.</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование заданного типа в <see cref="T:System.Type" /> исходного объекта, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType">Тип <see cref="T:System.Type" /> исходного объекта.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Получает значение, показывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType">Объект <see cref="T:System.Type" />, представляющий тип, в который необходимо выполнить преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует указанный объект в собственный тип преобразователя.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, задающий язык и региональные параметры, используемые для представления шрифта.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразовывает указанное значение объекта в указанный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Необязательный объект <see cref="T:System.Globalization.CultureInfo" />. Если не предоставляются, предполагается использование текущего языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType">Тип <see cref="T:System.Type" />, к которому следует привести значение.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Получает коллекцию стандартных значений для того типа данных, для которого предназначен данный проверяющий элемент управления.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Класс <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, содержащий стандартный набор допустимых значений или значение <see langword="null" />, если этот тип данных не поддерживает стандартный набор значений.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, является ли список стандартных значений, возвращенных методом <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />, исчерпывающим.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, так как коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, возвращенная методом <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />, является исчерпывающим списком возможных значений. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, поддерживает ли этот объект стандартный набор значений, которые можно выбрать из списка, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="true" />, поскольку для поиска набора значений, поддерживаемых объектом, необходимо вызвать метод <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary>Предоставляет преобразователь типов для преобразования 16-разрядных целочисленных объектов без знака в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.UInt16Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary>Предоставляет преобразователь типов для преобразования 32-разрядных целых объектов в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.UInt32Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary>Предоставляет преобразователь типов для преобразования 64-разрядных целочисленных объектов без знака в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.UInt64Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.VersionConverter">
      <summary>Предоставляет преобразователь типов для преобразования объектов <see cref="T:System.Version" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.VersionConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, показывающее, может ли этот преобразователь преобразовать объект заданного исходного типа в <see cref="T:System.Version" />.</summary>
      <param name="context">Объект, предоставляющий контекстную информацию.</param>
      <param name="sourceType">Тип преобразуемого объекта.</param>
      <returns>Значение <see langword="true" />, если этот преобразователь может преобразовать sourceType в <see cref="T:System.Version" />; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, указывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context">Объект, предоставляющий контекстную информацию.</param>
      <param name="destinationType">Тип целевого объекта для преобразования.</param>
      <returns>Значение <see langword="true" />, если преобразователь может преобразовать объект в заданный конечный тип; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует указанный объект в <see cref="T:System.Version" />.</summary>
      <param name="context">Объект, предоставляющий контекстную информацию.</param>
      <param name="culture">Язык и региональные параметры, используемые для преобразования.</param>
      <param name="value">Значение, которое необходимо преобразовать в тип <see cref="T:System.Version" />.</param>
      <returns>Значение <paramref name="value" />, преобразованное в <see cref="T:System.Version" />.</returns>
      <exception cref="T:System.FormatException">Параметр <paramref name="value" /> не является допустимой строкой <see cref="T:System.Version" />.</exception>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует указанное значение в конечный тип с использованием заданного контекста и аргументов.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Язык и региональные параметры, которые предоставляют сведения о форматировании для преобразования.</param>
      <param name="value">Преобразуемое значение.</param>
      <param name="destinationType">Тип, в который преобразуется параметр значения.</param>
      <returns>Объект, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Возвращает значение, показывающее, допустимо ли данное значение для этого типа и для заданного контекста.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value">Объект, допустимость которого требуется проверить.</param>
      <returns>Значение <see langword="true" />, если указанное значение является допустимым для данного объекта; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary>Задает исключение, которое будет обрабатываться как предупреждение, а не как ошибка.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.WarningException" />.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.WarningException" />, используя заданные данные сериализации и контекст.</summary>
      <param name="info">Метод <see cref="T:System.Runtime.Serialization.SerializationInfo" />, используемый для десериализации.</param>
      <param name="context">Объект назначения, используемый для десериализации.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.WarningException" />, используя указанное сообщение, но без файла справки.</summary>
      <param name="message">Сообщение, которое будет отображаться для конечного пользователя.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.WarningException" /> с указанным подробным описанием и указанным исключением.</summary>
      <param name="message">Подробное описание ошибки.</param>
      <param name="innerException">Ссылка на внутреннее исключение, которое является причиной этого исключения.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.WarningException" />, используя заданное сообщение и доступ к указанному файлу справки.</summary>
      <param name="message">Сообщение, которое будет отображаться для конечного пользователя.</param>
      <param name="helpUrl">Файл справки, отображаемый, если пользователь запросит справку.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.WarningException" />, используя заданное сообщение и доступ к указанным файлу и разделу справки.</summary>
      <param name="message">Сообщение, которое будет отображаться для конечного пользователя.</param>
      <param name="helpUrl">Файл справки, отображаемый, если пользователь запросит справку.</param>
      <param name="helpTopic">Раздел справки, отображаемый, если пользователь запросит справку.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Устанавливает для объекта <see cref="T:System.Runtime.Serialization.SerializationInfo" /> имя параметра и дополнительные сведения об исключении.</summary>
      <param name="info">Хранит данные, использовавшиеся при сериализации (десериализации) объекта с помощью класса <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />.</param>
      <param name="context">Описывает источник и место назначения потока, создающего исключение, а также служит для сохранения этого контекста и дополнительного контекста, определяемого вызывающим в процессе сериализации.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="info" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary>Возвращает раздел справки, связанный с данным предупреждением.</summary>
      <returns>Раздел справки, связанный с данным предупреждением.</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary>Возвращает файл справки, связанный с данным предупреждением.</summary>
      <returns>Файл справки, связанный с данным предупреждением.</returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary>Преобразует цвета одного типа данных в другой. Доступ к данному классу осуществляется с помощью объекта <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Drawing.ColorConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Определяет, может ли данный преобразователь преобразовывать объект заданного типа источника в собственный тип преобразователя.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата. Этот объект можно использовать для получения дополнительных сведений о среде, из которой вызывается данный преобразователь.</param>
      <param name="sourceType">Тип, из которого нужно выполнить преобразование.</param>
      <returns>
        <see langword="true" />, если этот объект может выполнить преобразование; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, показывающее, может ли данный преобразователь преобразовать объект с помощью контекста в конечный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> представляет нужный результат конвертирования.</param>
      <returns>Значение <see langword="true" />, если данный преобразователь может выполнить операцию, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует указанный объект в тип, используемый преобразователем.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" />, представляющий контекст формата. Этот объект можно использовать для получения дополнительных сведений о среде, из которой вызывается данный преобразователь.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, определяющий язык и региональные параметры для представления цвета.</param>
      <param name="value">Преобразуемый объект.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий конвертируемое значение.</returns>
      <exception cref="T:System.ArgumentException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует указанный объект в другой тип.</summary>
      <param name="context">Контекст модуля форматирования. Используйте этот объект для получения дополнительных сведений о среде, из которой вызывается данный преобразователь. Всегда проверяйте, не равно ли данное значение значению <see langword="null" />. Свойства объекта контекста могут также возвращать значение <see langword="null" />.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, определяющий язык и региональные параметры для представления цвета.</param>
      <param name="value">Преобразуемый объект.</param>
      <param name="destinationType">Тип, в который требуется преобразовать объект.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий конвертируемое значение.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationtype" /> — <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Извлекает коллекцию, содержащую набор стандартных значений типов данных, для которых предназначен данный проверяющий элемент управления. Если тип данных не поддерживает стандартный набор значений, будет возвращено значение <see langword="null" />,.</summary>
      <param name="context">Контекст модуля форматирования. Используйте этот объект для получения дополнительных сведений о среде, из которой вызывается данный преобразователь. Всегда проверяйте, не равно ли данное значение значению <see langword="null" />. Свойства объекта контекста могут также возвращать значение <see langword="null" />.</param>
      <returns>Коллекция, содержащая значение <see langword="null" /> или стандартный набор допустимых значений. Реализация по умолчанию всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Определяет, поддерживает ли объект стандартный набор значений, которые можно выбрать в списке.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.TypeDescriptor" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <returns>Значение <see langword="true" />, если метод <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" /> должен быть вызван для поиска набора значений, поддерживаемых объектом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary>Преобразует объект <see cref="T:System.Drawing.Point" /> из одного типа данных в другой.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Drawing.PointConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Определяет, может ли данный преобразователь преобразовывать объект заданного типа источника в собственный тип преобразователя.</summary>
      <param name="context">Контекст модуля форматирования. Данный объект может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="sourceType">Тип, из которого нужно выполнить преобразование.</param>
      <returns>
        <see langword="true" />, если этот объект может выполнить преобразование; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, указывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType">Объект <see cref="T:System.Type" />, представляющий тип, в который происходит преобразование.</param>
      <returns>Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразовывает указанный объект в объект <see cref="T:System.Drawing.Point" />.</summary>
      <param name="context">Контекст модуля форматирования. Данный объект может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="culture">Объект, содержащий конкретные сведения о языке и региональных параметрах, например языке, календаре и культурном контексте определенной культуры. Он основан на стандарте RFC 1766.</param>
      <param name="value">Преобразуемый объект.</param>
      <returns>Преобразованный объект.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует указанный объект в заданный тип.</summary>
      <param name="context">Контекст модуля форматирования. Данный объект может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="culture">Объект, содержащий конкретные сведения о языке и региональных параметрах, например языке, календаре и культурном контексте определенной культуры. Он основан на стандарте RFC 1766.</param>
      <param name="value">Преобразуемый объект.</param>
      <param name="destinationType">Тип, в который требуется преобразовать объект.</param>
      <returns>Преобразованный объект.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Создает экземпляр этого типа, задавая набор значений свойств для объекта.</summary>
      <param name="context">Дескриптор типа, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="propertyValues">Словарь новых значений свойств. Словарь содержит ряд пар "имя-значение", по одной для каждого свойства, возвращенного из метода <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns>Вновь созданный объект или <see langword="null" />, если объект не был создан. Реализация по умолчанию возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Определяет, требуется ли вызов <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> для создания нового значения при изменении значения объекта.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.TypeDescriptor" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <returns>Значение <see langword="true" />, если метод <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> необходимо вызвать при изменении одного или нескольких свойств данного объекта. В противном случае возвращается значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Извлекает набор свойств для данного типа. По умолчанию тип не возвращает свойства.</summary>
      <param name="context">Дескриптор типа, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="value">Значение объекта, для которого извлекаются свойства.</param>
      <param name="attributes">Массив объектов <see cref="T:System.Attribute" />, описывающих свойства.</param>
      <returns>Набор свойств, представленных для этого типа данных. Если для этого типа свойств не представлено, метод может вернуть <see langword="null" />. Реализация по умолчанию всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Определяет, поддерживает ли объект свойства. По умолчанию используется значение <see langword="false" />.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.TypeDescriptor" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <returns>Значение <see langword="true" />, если для поиска свойств этого объекта следует вызвать метод <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary>Преобразует прямоугольники из одного типа данных в другой. Доступ к данному классу осуществляется с помощью объекта <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Drawing.RectangleConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Определяет, может ли данный преобразователь преобразовывать объект заданного типа источника в собственный тип преобразователя.</summary>
      <param name="context">Контекст модуля форматирования. Данный объект может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="sourceType">Тип, из которого нужно выполнить преобразование.</param>
      <returns>Этот метод возвращает <see langword="true" />, если данный объект может выполнить преобразование; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, указывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста могут также возвращать значение <see langword="null" />.</param>
      <param name="destinationType">Объект <see cref="T:System.Type" />, представляющий тип, в который происходит преобразование.</param>
      <returns>Данный метод возвращает значение <see langword="true" />, если объект может выполнить преобразование; в противном случае возвращается значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует данный объект в объект <see cref="T:System.Drawing.Rectangle" />.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, который может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, содержащий сведения о культурной среде, например язык, календарь и культурные соглашения, связанные с конкретным языком и региональными параметрами. Он основан на стандарте RFC 1766.</param>
      <param name="value">Преобразуемый объект.</param>
      <returns>Преобразованный объект.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует указанный объект в заданный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, который может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, содержащий сведения о культурной среде, например язык, календарь и культурные соглашения, связанные с конкретным языком и региональными параметрами. Он основан на стандарте RFC 1766.</param>
      <param name="value">Преобразуемый объект.</param>
      <param name="destinationType">Тип, в который требуется преобразовать объект.</param>
      <returns>Преобразованный объект.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Создает экземпляр этого типа, задавая набор значений свойств для объекта. Это полезно для объектов, которые доступны только для чтения, но для которых нужно обеспечить возможность изменения свойств.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="propertyValues">Словарь новых значений свойств. Словарь содержит ряд пар "имя-значение", по одной на каждое свойство, возвращенное вызовом метода <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns>Вновь созданный объект или <see langword="null" />, если объект не был создан. Реализация по умолчанию возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Определяет, требуется ли вызов <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> для создания нового значения при изменении значения объекта.</summary>
      <param name="context">Дескриптор типа, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <returns>Данный метод возвращает значение <see langword="true" />, если метод <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> необходимо вызвать при изменении одного или нескольких свойств данного объекта. В противном случае возвращается значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Извлекает набор свойств для данного типа. По умолчанию тип не возвращает свойства.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="value">Значение объекта, для которого извлекаются свойства.</param>
      <param name="attributes">Массив объектов <see cref="T:System.Attribute" />, описывающих свойства.</param>
      <returns>Набор свойств, который должен быть представлен для этого типа данных. Если представление свойств не требуется, может возвращаться значение <see langword="null" />. Реализация по умолчанию всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Определяет, поддерживает ли объект свойства. По умолчанию используется значение <see langword="false" />.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <returns>Данный метод возвращает значение <see langword="true" />, если для поиска свойств объекта следует вызывать метод <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />; в противном случае возвращается значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary>Класс <see cref="T:System.Drawing.SizeConverter" /> используется для преобразования одного типа данных в другой. Доступ к данному классу осуществляется с помощью объекта <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary>Инициализирует новый объект <see cref="T:System.Drawing.SizeConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Определяет, может ли этот преобразователь преобразовывать объект заданного исходного типа в собственный тип преобразователя.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, который может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="sourceType">Тип, из которого нужно выполнить преобразование.</param>
      <returns>Данный метод возвращает значение <see langword="true" />, если объект может выполнить преобразование.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, указывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, который может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Это может быть значение <see langword="null" />, поэтому следует всегда выполнять проверку. Свойства объекта контекста могут также возвращать значение <see langword="null" />.</param>
      <param name="destinationType">Класс <see cref="T:System.Type" />, представляющий тип, в который нужно выполнить преобразование.</param>
      <returns>Данный метод возвращает значение <see langword="true" />, если объект может выполнить преобразование; в противном случае возвращается значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует указанный объект в собственный тип преобразователя.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, который может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, содержащий конкретные сведения о языке и региональных параметрах, например языке, календаре и культурном контексте определенной культуры. Он основан на стандарте RFC 1766.</param>
      <param name="value">Преобразуемый объект.</param>
      <returns>Преобразованный объект.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует указанный объект в заданный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, который может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, содержащий конкретные сведения о языке и региональных параметрах, например языке, календаре и культурном контексте определенной культуры. Он основан на стандарте RFC 1766.</param>
      <param name="value">Преобразуемый объект.</param>
      <param name="destinationType">Тип, в который требуется преобразовать объект.</param>
      <returns>Преобразованный объект.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Создает объект данного типа, используя указанный набор значений свойств для объекта. Это облегчает создание неизменяемых объектов с изменяемыми свойствами.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.TypeDescriptor" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="propertyValues">Словарь новых значений свойств. Словарь содержит ряд пар имя-значение, по одной для каждого свойства, возвращенного из метода <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns>Вновь созданный объект или <see langword="null" />, если объект не был создан. Реализация по умолчанию возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Определяет, необходимо ли при изменении значения данного объекта вызывать метод <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />, чтобы создать новое значение.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.TypeDescriptor" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <returns>Значение <see langword="true" />, если объект <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> должен вызываться при внесении изменений в одно или несколько свойств данного объекта.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Извлекает набор свойств для данного типа. По умолчанию тип не обладает свойствами, которые необходимо возвращать.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.TypeDescriptor" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="value">Значение объекта, для которого извлекаются свойства.</param>
      <param name="attributes">Массив объектов <see cref="T:System.Attribute" />, описывающих свойства.</param>
      <returns>Набор свойств, который должен быть представлен для этого типа данных. Если представление свойств не требуется, может возвращаться значение <see langword="null" />. Реализация по умолчанию всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Определяет, поддерживаются ли свойства этим объектом. По умолчанию используется значение <see langword="false" />.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.TypeDescriptor" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <returns>Значение <see langword="true" />, если метод <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> должен вызываться для поиска свойств данного объекта.</returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary>Преобразует объекты <see cref="T:System.Drawing.SizeF" /> из одного типа в другой.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Drawing.SizeFConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, показывающее, может ли преобразователь преобразовывать из заданного типа в тип <see cref="T:System.Drawing.SizeF" /> с помощью заданного контекста.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="sourceType">Объект <see cref="T:System.Type" />, представляющий тип, из которого необходимо выполнить преобразование.</param>
      <returns>Значение <see langword="true" />, показывающее, что преобразование может быть выполнено; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, указывающее, может ли преобразователь <see cref="T:System.Drawing.SizeFConverter" /> выполнить преобразование <see cref="T:System.Drawing.SizeF" /> в заданный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="destinationType">Объект <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns>Значение <see langword="true" />, если преобразователь может выполнить преобразование; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует заданный объект в тип этого преобразователя, используя заданный контекст и информацию о языке и региональных параметрах.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый в качестве текущего языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует данный объект значения в указанный тип, используя заданные сведения о контексте, а также о языке и региональных параметрах.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />. Если передано значение null, используются текущие настройки языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType">Тип <see cref="T:System.Type" />, в который преобразуется параметр значения.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Создает экземпляр <see cref="T:System.Drawing.SizeF" /> с заданными значениями свойств, используя заданный контекст.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="propertyValues">Объект <see cref="T:System.Collections.IDictionary" />, содержащий имена и значения свойств.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий новый объект <see cref="T:System.Drawing.SizeF" /> или <see langword="null" />, если объект не может быть создан.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, указывающее, требует ли изменение значения этого объекта вызова метода <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" />, чтобы создать новое значение.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата. Это может быть значение <see langword="null" />.</param>
      <returns>Всегда возвращает значение <see langword="true" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Получает набор свойств для типа <see cref="T:System.Drawing.SizeF" />, используя заданный контекст и атрибуты.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="value">Объект <see cref="T:System.Object" />, свойства которого возвращаются.</param>
      <param name="attributes">Массив объектов <see cref="T:System.Attribute" />, описывающих свойства.</param>
      <returns>Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, которая содержит свойства.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, указывающее, поддерживает ли тип <see cref="T:System.Drawing.SizeF" /> свойства.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <returns>Всегда возвращает значение <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary>Класс <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> представляет преобразователь типов для расширенной политики защиты, используемой сервером для проверки входящих соединений от клиентов.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" />.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, указывающее, может ли этот преобразователь выполнить преобразование данного объекта к заданному типу.</summary>
      <param name="context">Преобразуемый объект.</param>
      <param name="destinationType">Класс <see cref="T:System.Type" />, представляющий тип, в который нужно выполнить преобразование.</param>
      <returns>Значение <see langword="true" />, если данный преобразователь может выполнить преобразование; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразуйте объект в указанный тип.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />. Если передано значение <see langword="null" />, используется текущая установка языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />. Это должен быть объект <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />.</param>
      <param name="destinationType">Тип <see cref="T:System.Type" />, в который преобразуется параметр значения.</param>
      <returns>Объект <see cref="T:System.Object" />, представляющий преобразуемый параметр <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Не удалось выполнить преобразование.</exception>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary>Предоставляет данные для события <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary>Получает дату и время возникновения события <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <returns>Время возникновения события <see cref="E:System.Timers.Timer.Elapsed" />.</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary>Представляет метод, обрабатывающий событие <see cref="E:System.Timers.Timer.Elapsed" /> объекта <see cref="T:System.Timers.Timer" />.</summary>
      <param name="sender">Источник события.</param>
      <param name="e">Объект <see cref="T:System.Timers.ElapsedEventArgs" />, содержащий данные о событии.</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary>Создает событие после заданного интервала с возможностью создания повторяющихся событий.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Timers.Timer" /> и задает всем свойствам начальные значения.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Timers.Timer" /> и задает свойству <see cref="P:System.Timers.Timer.Interval" /> указанное значение в миллисекундах.</summary>
      <param name="interval">Время между событиями в миллисекундах. Значение должно быть больше нуля и меньше или равно <see cref="F:System.Int32.MaxValue" />.</param>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="interval" /> меньше или равно нулю, или больше <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary>Возвращает или задает логическое значение, определяющее, должен ли объект <see cref="T:System.Timers.Timer" /> вызывать событие <see cref="E:System.Timers.Timer.Elapsed" /> один раз (<see langword="false" />) или неоднократно (<see langword="true" />).</summary>
      <returns>Значение <see langword="true" />, если объект <see cref="T:System.Timers.Timer" /> должен вызывать событие <see cref="E:System.Timers.Timer.Elapsed" /> каждый раз по истечении интервала времени; <see langword="false" />, если событие <see cref="E:System.Timers.Timer.Elapsed" /> следует вызвать только один раз, когда пройдет указанное время. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary>Начинает во время выполнения инициализацию класса <see cref="T:System.Timers.Timer" />, используемого в форме или другим компонентом.</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary>Освобождает ресурсы, используемые объектом <see cref="T:System.Timers.Timer" />.</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary>Освобождает все ресурсы, используемые текущим объектом <see cref="T:System.Timers.Timer" />.</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить управляемые и неуправляемые ресурсы; значение <see langword="false" /> позволяет освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary>Происходит по истечении интервала времени.</summary>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary>Возвращает или задает значение, определяющее, должен ли объект <see cref="T:System.Timers.Timer" /> вызывать событие <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <returns>Значение <see langword="true" />, если объект <see cref="T:System.Timers.Timer" /> должен вызывать событие <see cref="E:System.Timers.Timer.Elapsed" />; в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">Данное свойство задать нельзя, так как таймер удален.</exception>
      <exception cref="T:System.ArgumentException">Перед включением таймера свойству <see cref="P:System.Timers.Timer.Interval" /> задано значение больше <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary>Заканчивает во время выполнения инициализацию класса <see cref="T:System.Timers.Timer" />, используемого в форме или другим компонентом.</summary>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary>Возвращает или задает интервал в миллисекундах, по истечении которого возникает событие <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <returns>Время между событиями <see cref="E:System.Timers.Timer.Elapsed" /> в миллисекундах. Значение должно быть больше нуля и меньше или равно <see cref="F:System.Int32.MaxValue" />. Значение по умолчанию — 100 миллисекунд.</returns>
      <exception cref="T:System.ArgumentException">Интервал меньше или равен нулю.

или -
Интервал больше, чем <see cref="F:System.Int32.MaxValue" />, а таймер в настоящий момент включен. (Если таймер в данный момент выключен, исключение не генерируется до его включения.)</exception>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary>Возвращает или задает сайт, который привязывает <see cref="T:System.Timers.Timer" /> к его контейнеру в режиме конструктора.</summary>
      <returns>Интерфейс <see cref="T:System.ComponentModel.ISite" />, представляющий сайт, который привязывает объект <see cref="T:System.Timers.Timer" /> к его контейнеру.</returns>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary>Начинает вызывать событие <see cref="E:System.Timers.Timer.Elapsed" />, задавая для свойства <see cref="P:System.Timers.Timer.Enabled" /> значение <see langword="true" />.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="T:System.Timers.Timer" /> создается с интервалом не меньше <see cref="F:System.Int32.MaxValue" />+1, либо задается интервал меньше нуля.</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary>Прекращает вызывать событие <see cref="E:System.Timers.Timer.Elapsed" />, задавая для свойства <see cref="P:System.Timers.Timer.Enabled" /> значение <see langword="false" />.</summary>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary>Получает или задает объект, используемый для маршалирования вызовов обработчика событий, осуществленных после истечения интервала времени.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, представляющий объект, используемый для маршалинга вызовов обработчика событий, осуществленных после истечения интервала времени. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary>Задает описание, которое могут отображать визуальные конструкторы при обращении к событию, средству расширения или свойству.</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Timers.TimersDescriptionAttribute" />.</summary>
      <param name="description">Описание, которое следует использовать.</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary>Возвращает описание, которое могут отображать визуальные конструкторы при обращении к событию, средству расширения или свойству.</summary>
      <returns>Описание для события, средства расширения или свойства.</returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>Преобразует значение типа <see cref="T:System.String" /> к типу <see cref="T:System.Uri" /> и наоборот.</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.UriTypeConverter" />.</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, указывающее, может ли этот преобразователь преобразовать объект заданного типа к типу этого преобразователя.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType">Тип <see cref="T:System.Type" />, представляющий тип, от которого требуется выполнить преобразование.</param>
      <returns>
        <see langword="true" />, если <paramref name="sourceType" /> является типом <see cref="T:System.String" /> либо или к типу <see cref="T:System.Uri" /> может быть преобразовано значение типа <paramref name="sourceType" />; в противном случае — <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="sourceType" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Возвращает значение, показывающее, может ли этот преобразователь преобразовать объект в заданный тип с помощью указанного контекста.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType">Тип <see cref="T:System.Type" />, представляющий тип, к которому требуется выполнить преобразование.</param>
      <returns>
        <see langword="true" />, если <paramref name="destinationType" /> является типом <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, <see cref="T:System.String" /> или <see cref="T:System.Uri" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Преобразует заданный объект в тип этого преобразователя, используя заданный контекст и информацию о языке и региональных параметрах.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый в качестве текущего языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Преобразует заданное значение объектного типа к заданному типу, используя заданные сведения о контексте и языке и региональных параметрах.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />. Если передано значение <see langword="null" />, используются текущие настройки языка и региональных параметров.</param>
      <param name="value">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType">
        <see cref="T:System.Type" />, к которому преобразуется параметр <paramref name="value" />.</param>
      <returns>
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Преобразование не может быть выполнено.</exception>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Возвращает значение, указывающее, является ли заданное значение объектного типа объектом <see cref="T:System.Uri" /> либо можно ли создать на основе этого значения объект <see cref="T:System.Uri" />.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value">Объект <see cref="T:System.Object" />, допустимость которого требуется проверить.</param>
      <returns>
        <see langword="true" />, если <paramref name="value" /> является значением типа <see cref="T:System.Uri" /> или значением типа <see cref="T:System.String" />, которое может быть преобразовано к типу <see cref="T:System.Uri" />; в противном случае — <see langword="false" />.</returns>
    </member>
  </members>
</doc>
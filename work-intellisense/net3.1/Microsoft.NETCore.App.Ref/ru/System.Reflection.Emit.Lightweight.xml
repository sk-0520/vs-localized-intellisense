<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit.Lightweight</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.DynamicILInfo">
      <summary vsli:raw="Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.">Обеспечивает поддержку альтернативных методов создания MSIL и метаданных для динамического метода, включая методы создания токенов и вставки кода, обработки исключений и больших двоичных объектов подписи локальных переменных.</summary>
    </member>
    <member name="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
      <summary vsli:raw="Gets the dynamic method whose body is generated by the current instance.">Возвращает динамический метод, основной текст которого создан текущим экземпляром.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt; object representing the dynamic method for which the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object is generating code.">Объект <see cref="T:System.Reflection.Emit.DynamicMethod" />, представляющий динамический метод, для которого текущий объект <see cref="T:System.Reflection.Emit.DynamicILInfo" /> создает код.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing the signature for the associated dynamic method.">Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего подпись для связанного динамического метода.</summary>
      <param name="signature" vsli:raw="An array that contains the signature.">Массив, содержащий сигнатуру.</param>
      <returns vsli:raw="A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.">токен, который может быть внедрен в метаданные и поток MSIL для связанного динамического метода.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a dynamic method to be called from the associated method.">Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего динамический метод, который должен быть вызван из связанного метода.</summary>
      <param name="method" vsli:raw="The dynamic method to call.">Вызываемый динамический метод.</param>
      <returns vsli:raw="A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.">токен, который может быть встроен в поток MSIL для связанного динамического метода в качестве назначения инструкции MSIL.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a field to be accessed from the associated dynamic method.">Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего поле, к которому должен быть предоставлен доступ из связанного динамического метода.</summary>
      <param name="field" vsli:raw="The field to be accessed.">Поле для доступа.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">токен, который может быть использован в качестве операнда инструкции MSIL, получающей доступ к полям, в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.">Получает токен, допустимый в области текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего поле, к которому должен быть предоставлен доступ из связанного динамического метода; поле относится к указанному универсальному типу.</summary>
      <param name="field" vsli:raw="The field to be accessed.">Поле для доступа.</param>
      <param name="contextType" vsli:raw="The generic type the field belongs to.">Универсальный тип, к которому относится поле.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">Токен, который может быть использован в качестве операнда инструкции MSIL, получающей доступ к полям в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a method to be accessed from the associated dynamic method.">Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего метод, к которому должен быть предоставлен доступ из связанного динамического метода.</summary>
      <param name="method" vsli:raw="The method to be accessed.">Метод для доступа.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that accesses methods, such as &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Call&quot; /&gt; or &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Ldtoken&quot; /&gt;, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">токен, который может быть использован в качестве операнда инструкции MSIL, получающей доступ к методам, таким как <see cref="F:System.Reflection.Emit.OpCodes.Call" /> или <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a method on a generic type.">Возвращает токен, допустимый в области действия текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего метод в универсальном типе.</summary>
      <param name="method" vsli:raw="The method.">Метод.</param>
      <param name="contextType" vsli:raw="The generic type the method belongs to.">Универсальный тип, к которому принадлежит метод.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that accesses methods, such as &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Call&quot; /&gt; or &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Ldtoken&quot; /&gt;, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">токен, который может быть использован в качестве операнда инструкции MSIL, получающей доступ к методам, таким как <see cref="F:System.Reflection.Emit.OpCodes.Call" /> или <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a type to be used in the associated dynamic method.">Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего тип, который будет использоваться в связанном динамическом методе.</summary>
      <param name="type" vsli:raw="The type to be used.">Используемый тип.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">токен, который может быть использован в качестве операнда инструкции MSIL, нуждающейся в типе, в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a string literal to be used in the associated dynamic method.">Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего строковый литерал, который будет использоваться в связанном динамическом методе.</summary>
      <param name="literal" vsli:raw="The string to be used.">Используемая строка.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">токен, который может быть использован в качестве операнда инструкции MSIL, нуждающейся в строке, в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
      <summary vsli:raw="Sets the code body of the associated dynamic method.">Задает основной текст кода связанного динамического метода.</summary>
      <param name="code" vsli:raw="A pointer to a byte array containing the MSIL stream.">Указатель на массив байтов, в котором содержится поток MSIL.</param>
      <param name="codeSize" vsli:raw="The number of bytes in the MSIL stream.">Возвращает число байтов потока MSIL.</param>
      <param name="maxStackSize" vsli:raw="The maximum number of items on the operand stack when the method is executing.">Максимальное количество элементов в стеке операторов при выполнении метода.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;code&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;codeSize&quot; /&gt; is greater than 0.">
        <paramref name="code" /> равно <see langword="null" />, а <paramref name="codeSize" /> больше 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;codeSize&quot; /&gt; is less than 0.">Значение параметра <paramref name="codeSize" /> меньше 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
      <summary vsli:raw="Sets the code body of the associated dynamic method.">Задает основной текст кода связанного динамического метода.</summary>
      <param name="code" vsli:raw="An array that contains the MSIL stream.">Массив, который содержит поток MSIL.</param>
      <param name="maxStackSize" vsli:raw="The maximum number of items on the operand stack when the method is executing.">Максимальное количество элементов в стеке операторов при выполнении метода.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
      <summary vsli:raw="Sets the exception metadata for the associated dynamic method.">Задает метаданные исключения для связанного динамического метода.</summary>
      <param name="exceptions" vsli:raw="A pointer to a byte array containing the exception metadata.">Указатель на массив байтов, содержащий метаданные исключения.</param>
      <param name="exceptionsSize" vsli:raw="The number of bytes of exception metadata.">Количество байтов в метаданных исключения.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;exceptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;exceptionSize&quot; /&gt; is greater than 0.">
        <paramref name="exceptions" /> равно <see langword="null" />, а <paramref name="exceptionSize" /> больше 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;exceptionSize&quot; /&gt; is less than 0.">Значение параметра <paramref name="exceptionSize" /> меньше 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
      <summary vsli:raw="Sets the exception metadata for the associated dynamic method.">Задает метаданные исключения для связанного динамического метода.</summary>
      <param name="exceptions" vsli:raw="An array that contains the exception metadata.">Массив, в котором содержатся метаданные исключения.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
      <summary vsli:raw="Sets the local variable signature that describes the layout of local variables for the associated dynamic method.">Задает подпись локальной переменной, которая описывает структуру локальных переменных для связанного динамического метода.</summary>
      <param name="localSignature" vsli:raw="An array that contains the layout of local variables for the associated &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Массив, содержащий структуру локальных переменных для связанного метода <see cref="T:System.Reflection.Emit.DynamicMethod" />.</param>
      <param name="signatureSize" vsli:raw="The number of bytes in the signature.">Число байтов в подписи.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localSignature&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;signatureSize&quot; /&gt; is greater than 0.">
        <paramref name="localSignature" /> равно <see langword="null" />, а <paramref name="signatureSize" /> больше 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;signatureSize&quot; /&gt; is less than 0.">Значение параметра <paramref name="signatureSize" /> меньше 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
      <summary vsli:raw="Sets the local variable signature that describes the layout of local variables for the associated dynamic method.">Задает подпись локальной переменной, которая описывает структуру локальных переменных для связанного динамического метода.</summary>
      <param name="localSignature" vsli:raw="An array that contains the layout of local variables for the associated &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Массив, содержащий структуру локальных переменных для связанного метода <see cref="T:System.Reflection.Emit.DynamicMethod" />.</param>
    </member>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary vsli:raw="Defines and represents a dynamic method that can be compiled, executed, and discarded. Discarded methods are available for garbage collection.">Определяет и представляет динамический метод, который можно скомпилировать, выполнить и удалить. Удаленные методы доступны для сборки мусора.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary vsli:raw="Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">Создает динамический метод, который является глобальным для модуля, указывая имя метода, атрибуты, соглашение о вызовах, тип возвращаемого значения, типы параметров, модуль и необходимость пропуска проверки видимости JIT для типов и членов, к которым получает доступ промежуточный язык Майкрософт (MSIL) динамического метода.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">Имя динамического метода. Это может быть строка нулевой длины, но не <see langword="null" />.</param>
      <param name="attributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; values that specifies the attributes of the dynamic method. The only combination allowed is &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Public&quot; /&gt; and &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">Битовая комбинация значений <see cref="T:System.Reflection.MethodAttributes" />, определяющая атрибуты динамического метода. Разрешена только комбинация <see cref="F:System.Reflection.MethodAttributes.Public" /> и <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention" vsli:raw="The calling convention for the dynamic method. Must be &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.">Соглашение о вызовах для динамического метода. Должно иметь значение <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</param>
      <param name="m" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; representing the module with which the dynamic method is to be logically associated.">Объект <see cref="T:System.Reflection.Module" />, представляющий модуль, с которым должен быть логически связан динамический метод.</param>
      <param name="skipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is a module that provides anonymous hosting for dynamic methods.">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.
-или-
<paramref name="m" /> — это модуль, предоставляющий анонимное размещение для динамических методов.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Свойство <paramref name="name" /> имеет значение <see langword="null" />.
-или-
Свойство <paramref name="m" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;attributes&quot; /&gt; is a combination of flags other than &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Public&quot; /&gt; and &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;callingConvention&quot; /&gt; is not &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="attributes" /> представляет собой сочетание флагов, отличных от <see cref="F:System.Reflection.MethodAttributes.Public" /> и <see cref="F:System.Reflection.MethodAttributes.Static" />.
-или-
<paramref name="callingConvention" /> не является <see cref="F:System.Reflection.CallingConventions.Standard" />.
-или-
<paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary vsli:raw="Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">Создает динамический метод, указывая имя метода, атрибуты, соглашение о вызовах, тип возвращаемого значения, типы параметров, тип, с которым логически связан динамический метод, и необходимость пропуска проверки видимости JIT для типов и членов, к которым получает доступ промежуточный язык Майкрософт (MSIL) динамического метода.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">Имя динамического метода. Это может быть строка нулевой длины, но не <see langword="null" />.</param>
      <param name="attributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; values that specifies the attributes of the dynamic method. The only combination allowed is &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Public&quot; /&gt; and &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">Битовая комбинация значений <see cref="T:System.Reflection.MethodAttributes" />, определяющая атрибуты динамического метода. Разрешена только комбинация <see cref="F:System.Reflection.MethodAttributes.Public" /> и <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention" vsli:raw="The calling convention for the dynamic method. Must be &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.">Соглашение о вызовах для динамического метода. Должно иметь значение <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</param>
      <param name="owner" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; with which the dynamic method is logically associated. The dynamic method has access to all members of the type.">Тип <see cref="T:System.Type" />, с которым логически связан динамический метод. Динамический метод имеет доступ ко всем членам типа.</param>
      <param name="skipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is an interface, an array, an open generic type, or a type parameter of a generic type or method.">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.
-или-
<paramref name="owner" /> является интерфейсом, массивом, открытым универсальным типом или параметром универсального типа или метода.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Свойство <paramref name="name" /> имеет значение <see langword="null" />.
-или-
Свойство <paramref name="owner" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;attributes&quot; /&gt; is a combination of flags other than &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Public&quot; /&gt; and &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;callingConvention&quot; /&gt; is not &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="attributes" /> представляет собой сочетание флагов, отличных от <see cref="F:System.Reflection.MethodAttributes.Public" /> и <see cref="F:System.Reflection.MethodAttributes.Static" />.
-или-
<paramref name="callingConvention" /> не является <see cref="F:System.Reflection.CallingConventions.Standard" />.
-или-
<paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary vsli:raw="Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.">Инициализирует анонимно размещенный динамический метод, указывая имя метода, тип возвращаемого значения и типы параметров.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">Имя динамического метода. Это может быть строка нулевой длины, но не <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Свойство <paramref name="name" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary vsli:raw="Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">Инициализирует анонимно размещенный динамический метод, указывая имя метода, возвращаемый тип, типы параметров и необходимость пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">Имя динамического метода. Это может быть строка нулевой длины, но не <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</param>
      <param name="restrictedSkipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> — пропускает проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода, с таким ограничением: уровень доверия сборок, содержащих эти типы и члены, должен быть равен уровню доверия стека вызовов, создающего динамический метод, или меньше его. В противном случае — <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Свойство <paramref name="name" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary vsli:raw="Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.">Создает динамический метод, который является глобальным по отношению к модулю, используя имя метода, тип возвращаемого значения, типы параметров и модуль.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">Имя динамического метода. Это может быть строка нулевой длины, но не <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</param>
      <param name="m" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; representing the module with which the dynamic method is to be logically associated.">Объект <see cref="T:System.Reflection.Module" />, представляющий модуль, с которым должен быть логически связан динамический метод.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is a module that provides anonymous hosting for dynamic methods.">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.
-или-
<paramref name="m" /> — это модуль, предоставляющий анонимное размещение для динамических методов.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Свойство <paramref name="name" /> имеет значение <see langword="null" />.
-или-
Свойство <paramref name="m" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary vsli:raw="Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">Создает динамический метод, который является глобальным для модуля, указывая имя метода, возвращаемый тип, типы параметров, модуль и необходимость пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">Имя динамического метода. Это может быть строка нулевой длины, но не <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</param>
      <param name="m" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; representing the module with which the dynamic method is to be logically associated.">Объект <see cref="T:System.Reflection.Module" />, представляющий модуль, с которым должен быть логически связан динамический метод.</param>
      <param name="skipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.">Значение <see langword="true" /> для пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is a module that provides anonymous hosting for dynamic methods.">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.
-или-
<paramref name="m" /> — это модуль, предоставляющий анонимное размещение для динамических методов.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Свойство <paramref name="name" /> имеет значение <see langword="null" />.
-или-
Свойство <paramref name="m" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary vsli:raw="Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.">Создает динамический метод, указывая имя метода, возвращаемый тип, типы параметров и тип, с которым логически связан динамический метод.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">Имя динамического метода. Это может быть строка нулевой длины, но не <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</param>
      <param name="owner" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; with which the dynamic method is logically associated. The dynamic method has access to all members of the type.">Тип <see cref="T:System.Type" />, с которым логически связан динамический метод. Динамический метод имеет доступ ко всем членам типа.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is an interface, an array, an open generic type, or a type parameter of a generic type or method.">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.
-или-
<paramref name="owner" /> является интерфейсом, массивом, открытым универсальным типом или параметром универсального типа или метода.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Свойство <paramref name="name" /> имеет значение <see langword="null" />.
-или-
Свойство <paramref name="owner" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> имеет значение <see langword="null" /> или является типом, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary vsli:raw="Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">Создает динамический метод, указывая имя метода, тип возвращаемого значения, типы параметров, тип, с которым логически связан динамический метод, и необходимость пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">Имя динамического метода. Это может быть строка нулевой длины, но не <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</param>
      <param name="owner" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; with which the dynamic method is logically associated. The dynamic method has access to all members of the type.">Тип <see cref="T:System.Type" />, с которым логически связан динамический метод. Динамический метод имеет доступ ко всем членам типа.</param>
      <param name="skipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is an interface, an array, an open generic type, or a type parameter of a generic type or method.">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.
-или-
<paramref name="owner" /> является интерфейсом, массивом, открытым универсальным типом или параметром универсального типа или метода.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Свойство <paramref name="name" /> имеет значение <see langword="null" />.
-или-
Свойство <paramref name="owner" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> имеет значение <see langword="null" /> или является типом, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary vsli:raw="Gets the attributes specified when the dynamic method was created.">Возвращает атрибуты, указанные при создании динамического метода.</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; values representing the attributes for the method.">Побитовое сочетание значений <see cref="T:System.Reflection.MethodAttributes" />, представляющее атрибуты для метода.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary vsli:raw="Gets the calling convention specified when the dynamic method was created.">Получает соглашение о вызовах, указанное при создании динамического метода.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Reflection.CallingConventions&quot; /&gt; values that indicates the calling convention of the method.">Одно из значений <see cref="T:System.Reflection.CallingConventions" />, указывающее соглашение о вызовах метода.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary vsli:raw="Completes the dynamic method and creates a delegate that can be used to execute it.">Завершает динамический метод и создает делегата, который может использоваться для его выполнения.</summary>
      <param name="delegateType" vsli:raw="A delegate type whose signature matches that of the dynamic method.">Тип делегата, подпись которого совпадает с подписью динамического метода.</param>
      <returns vsli:raw="A delegate of the specified type, which can be used to execute the dynamic method.">Делегат указанного типа, который может использоваться для выполнения динамического метода.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method has no method body.">У динамического метода отсутствует тело метода.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;delegateType&quot; /&gt; has the wrong number of parameters or the wrong parameter types.">
        <paramref name="delegateType" /> имеет неверное число параметров или неправильные типы параметров.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary vsli:raw="Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.">Завершает динамический метод и создает делегат, который может использоваться для его выполнения, указывая тип делегата и объект, к которому привязан делегат.</summary>
      <param name="delegateType" vsli:raw="A delegate type whose signature matches that of the dynamic method, minus the first parameter.">Тип делегата, подпись которого совпадает с подписью динамического метода минус первый параметр.</param>
      <param name="target" vsli:raw="An object the delegate is bound to. Must be of the same type as the first parameter of the dynamic method.">Объект, к которому привязан делегат. Должен быть того же типа, что и первый параметр динамического метода.</param>
      <returns vsli:raw="A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.">Делегат указанного типа, который может использоваться для выполнения динамического метода с указанным целевым объектом.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method has no method body.">У динамического метода отсутствует тело метода.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is not the same type as the first parameter of the dynamic method, and is not assignable to that type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;delegateType&quot; /&gt; has the wrong number of parameters or the wrong parameter types.">
        <paramref name="target" /> не относится к тому же типу, что и первый параметр динамического метода, и не может быть назначен этому типу.
-или-
<paramref name="delegateType" /> имеет неверное число параметров или неправильные типы параметров.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary vsli:raw="Gets the type that declares the method, which is always &lt;see langword=&quot;null&quot; /&gt; for dynamic methods.">Возвращает тип, который объявляет метод, всегда являющийся <see langword="null" /> для динамических методов.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;null&quot; /&gt;.">Всегда <see langword="null" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary vsli:raw="Defines a parameter of the dynamic method.">Определяет параметр динамического метода.</summary>
      <param name="position" vsli:raw="The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.">Позиция параметра в списке параметров. Параметры индексируются, начиная с номера 1 для первого параметра.</param>
      <param name="attributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.ParameterAttributes&quot; /&gt; values that specifies the attributes of the parameter.">Битовая комбинация значений <see cref="T:System.Reflection.ParameterAttributes" />, определяющая атрибуты параметра.</param>
      <param name="parameterName" vsli:raw="The name of the parameter. The name can be a zero-length string.">Имя параметра. Имя может быть строкой нулевой длины.</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">Всегда возвращает значение <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The method has no parameters.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is greater than the number of the method's parameters.">Метод не имеет параметров.
-или-
Значение параметра <paramref name="position" /> меньше 0.
-или-
<paramref name="position" /> превышает число параметров метода.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
      <summary vsli:raw="Returns the base implementation for the method.">Возвращает базовую реализацию метода.</summary>
      <returns vsli:raw="The base implementation of the method.">Базовая реализация метода.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for the method.">Возвращает все настраиваемые атрибуты, определенные для метода.</summary>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search the method's inheritance chain to find the custom attributes; &lt;see langword=&quot;false&quot; /&gt; to check only the current method.">
        <see langword="true" /> для поиска цепочки наследования метода для обнаружения настраиваемых атрибутов; <see langword="false" /> для проверки только текущего метода.</param>
      <returns vsli:raw="An array of objects representing all the custom attributes of the method.">Массив объектов, представляющих все настраиваемые атрибуты метода.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes of the specified type that have been applied to the method.">Возвращает настраиваемые атрибуты заданного типа, которые были применены к методу.</summary>
      <param name="attributeType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of custom attribute to return.">
        <see cref="T:System.Type" />, представляющий тип возвращаемого настраиваемого атрибута.</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search the method's inheritance chain to find the custom attributes; &lt;see langword=&quot;false&quot; /&gt; to check only the current method.">
        <see langword="true" /> для поиска цепочки наследования метода для обнаружения настраиваемых атрибутов; <see langword="false" /> для проверки только текущего метода.</param>
      <returns vsli:raw="An array of objects representing the attributes of the method that are of type &lt;paramref name=&quot;attributeType&quot; /&gt; or derive from type &lt;paramref name=&quot;attributeType&quot; /&gt;.">Массив объектов, представляющих атрибуты метода, которые относятся к типу <paramref name="attributeType" /> или являются производными от типа <paramref name="attributeType" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Свойство <paramref name="attributeType" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.">Возвращает объект <see cref="T:System.Reflection.Emit.DynamicILInfo" />, который может использоваться для создания тела метода из маркеров метаданных, областей и потоков промежуточного языка Майкрософт (MSIL).</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.">Объект <see cref="T:System.Reflection.Emit.DynamicILInfo" />, который может использоваться для создания тела метода из маркеров метаданных, областей и потоков MSIL.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary vsli:raw="Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.">Возвращает генератор MSIL для этого метода с размером потока MSIL, по умолчанию равным 64 байтам.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object for the method.">Объект <see cref="T:System.Reflection.Emit.ILGenerator" /> для метода.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary vsli:raw="Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.">Возвращает генератор промежуточного языка Майкрософт (MSIL) для этого метода с указанным размером потока MSIL.</summary>
      <param name="streamSize" vsli:raw="The size of the MSIL stream, in bytes.">Размер потока MSIL (в байтах).</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object for the method, with the specified MSIL stream size.">Объект <see cref="T:System.Reflection.Emit.ILGenerator" /> для метода с указанным размером потока MSIL.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
      <summary vsli:raw="Returns the implementation flags for the method.">Возвращает флаги реализации для метода.</summary>
      <returns vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; values representing the implementation flags for the method.">Битовая комбинация значений <see cref="T:System.Reflection.MethodImplAttributes" />, представляющая флаги реализации для метода.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary vsli:raw="Returns the parameters of the dynamic method.">Возвращает параметры динамического метода.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.ParameterInfo&quot; /&gt; objects that represent the parameters of the dynamic method.">Массив объектов <see cref="T:System.Reflection.ParameterInfo" />, которые представляют параметры динамического метода.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary vsli:raw="Gets or sets a value indicating whether the local variables in the method are zero-initialized.">Возвращает или задает значение, указывающее, инициализированы ли локальные переменные в методе нулевым значением.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the local variables in the method are zero-initialized; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="true" />, если локальные переменные в методе инициализированы нулевым значением; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.">Вызывает динамический метод, используя указанные параметры и учитывая ограничения заданного модуля привязки и указанные сведения о языке и региональных параметрах.</summary>
      <param name="obj" vsli:raw="This parameter is ignored for dynamic methods, because they are static. Specify &lt;see langword=&quot;null&quot; /&gt;.">Эти параметры игнорируются для динамических методов, поскольку они являются статическими. Задайте имя <see langword="null" />.</param>
      <param name="invokeAttr" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; values.">Побитовое сочетание значений <see cref="T:System.Reflection.BindingFlags" />.</param>
      <param name="binder" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt; object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects through reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. For more details, see &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">Объект <see cref="T:System.Reflection.Binder" />, который допускает привязку, приведение типов аргументов, вызов элементов и извлечение объектов <see cref="T:System.Reflection.MemberInfo" /> путем отражения. Если значение параметра <paramref name="binder" /> равно <see langword="null" />, используется связыватель по умолчанию. Дополнительные сведения см. в разделе <see cref="T:System.Reflection.Binder" />.</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this parameter should be &lt;see langword=&quot;null&quot; /&gt;.">Список аргументов. Это массив аргументов с тем же числом, порядком и типом, что и параметры вызываемого метода. Если параметров нет, этот параметр должен иметь значение <see langword="null" />.</param>
      <param name="culture" vsli:raw="An instance of &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used. For example, this information is needed to correctly convert a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents 1000 to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value, because 1000 is represented differently by different cultures.">Экземпляр объекта <see cref="T:System.Globalization.CultureInfo" />, используемого для управления приведением типов. Если значение этого объекта — <see langword="null" />, для текущего потока используется <see cref="T:System.Globalization.CultureInfo" />. Например, эти сведения необходимы для правильного преобразовывая объекта <see cref="T:System.String" />, представляющего 1000, в значение <see cref="T:System.Double" />, поскольку в разных языках и региональных параметрах 1000 представляется по-разному.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Object&quot; /&gt; containing the return value of the invoked method.">Объект <see cref="T:System.Object" />, содержащий возвращаемое значение вызванного метода.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;F:System.Reflection.CallingConventions.VarArgs&quot; /&gt; calling convention is not supported.">Соглашение о вызовах <see cref="F:System.Reflection.CallingConventions.VarArgs" /> не поддерживается.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException" vsli:raw="The number of elements in &lt;paramref name=&quot;parameters&quot; /&gt; does not match the number of parameters in the dynamic method.">Число элементов в <paramref name="parameters" /> не соответствует числу параметров в динамическом методе.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The type of one or more elements of &lt;paramref name=&quot;parameters&quot; /&gt; does not match the type of the corresponding parameter of the dynamic method.">Тип одного или нескольких элементов <paramref name="parameters" /> не соответствует типу соответствующего параметра динамического метода.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="The dynamic method is associated with a module, is not anonymously hosted, and was constructed with &lt;paramref name=&quot;skipVisibility&quot; /&gt; set to &lt;see langword=&quot;false&quot; /&gt;, but the dynamic method accesses members that are not &lt;see langword=&quot;public&quot; /&gt; or &lt;see langword=&quot;internal&quot; /&gt; (&lt;see langword=&quot;Friend&quot; /&gt; in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The dynamic method is anonymously hosted and was constructed with &lt;paramref name=&quot;skipVisibility&quot; /&gt; set to &lt;see langword=&quot;false&quot; /&gt;, but it accesses members that are not &lt;see langword=&quot;public&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The dynamic method contains unverifiable code. See the &quot;Verification&quot; section in Remarks for &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Динамический метод связан с модулем, не размещен анонимно и был создан с параметром <paramref name="skipVisibility" />, для которого задано значение <see langword="false" />, однако он получает доступ к членам, которые не имеют тип <see langword="public" /> или <see langword="internal" /> (<see langword="Friend" /> в Visual Basic).
-или-
Динамический метод размещен анонимно и был создан с параметром <paramref name="skipVisibility" />, для которого задано значение <see langword="false" />, однако он получает доступ к членам, которые не имеют тип <see langword="public" />.
-или-
Динамический метод содержит непроверяемый код. См. подраздел "Проверка" в разделе примечаний для <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether the specified custom attribute type is defined.">Указывает, определен ли заданный тип настраиваемых атрибутов.</summary>
      <param name="attributeType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of custom attribute to search for.">
        <see cref="T:System.Type" />, представляющий тип искомого настраиваемого атрибута.</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search the method's inheritance chain to find the custom attributes; &lt;see langword=&quot;false&quot; /&gt; to check only the current method.">
        <see langword="true" /> для поиска цепочки наследования метода для обнаружения настраиваемых атрибутов; <see langword="false" /> для проверки только текущего метода.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified custom attribute type is defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если заданный тип настраиваемых атрибутов определен; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
      <summary vsli:raw="Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.">Получает значение, которое указывает, является ли текущий динамический метод критическим с точки зрения безопасности или надежным с точки зрения безопасности и, следовательно, может ли он выполнять важные операции.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current dynamic method is security-critical or security-safe-critical; &lt;see langword=&quot;false&quot; /&gt; if it is transparent.">Значение <see langword="true" />, если текущий динамический метод является критическим с точки зрения безопасности или надежным с точки зрения безопасности; значение <see langword="false" />, если он является прозрачным.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method doesn't have a method body.">В этом динамическом методе отсутствует тело метода.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
      <summary vsli:raw="Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.">Возвращает значение, которое указывает, является ли текущий динамический метод надежным с точки зрения безопасности на текущем уровне доверия и, следовательно, может ли он выполнять критически важные операции и предоставлять доступ прозрачному коду.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dynamic method is security-safe-critical at the current trust level; &lt;see langword=&quot;false&quot; /&gt; if it is security-critical or transparent.">Значение <see langword="true" />, если динамический метод надежен с точки зрения безопасности на текущем уровне доверия; значение <see langword="false" />, если он является критическим с точки зрения безопасности или прозрачным.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method doesn't have a method body.">В этом динамическом методе отсутствует тело метода.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
      <summary vsli:raw="Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.">Получает значение, которое указывает, является ли текущий динамический метод прозрачным на текущем уровне доверия и, следовательно, не может выполнять критические операции.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dynamic method is security-transparent at the current trust level; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если этот динамический метод является прозрачным на текущем уровне доверия; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method doesn't have a method body.">В этом динамическом методе отсутствует тело метода.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
      <summary vsli:raw="Not supported for dynamic methods.">Не поддерживается для динамических методов.</summary>
      <returns vsli:raw="Not supported for dynamic methods.">Не поддерживается для динамических методов.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Not allowed for dynamic methods.">Не разрешено для динамических методов.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Module">
      <summary vsli:raw="Gets the module with which the dynamic method is logically associated.">Возвращает модуль, с которым логически связан динамический метод.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; with which the current dynamic method is associated.">Модуль <see cref="T:System.Reflection.Module" />, с которым связан текущий динамический метод.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary vsli:raw="Gets the name of the dynamic method.">Получает имя динамического метода.</summary>
      <returns vsli:raw="The simple name of the method.">Простое имя метода.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
      <summary vsli:raw="Gets the class that was used in reflection to obtain the method.">Возвращает класс, который использовался в отражении для получения метода.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;null&quot; /&gt;.">Всегда <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary vsli:raw="Gets the return parameter of the dynamic method.">Возвращает выходной параметр динамического метода.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;null&quot; /&gt;.">Всегда <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary vsli:raw="Gets the type of return value for the dynamic method.">Получает тип возвращаемого значения для динамического метода.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of the return value of the current method; &lt;see cref=&quot;T:System.Void&quot; /&gt; if the method has no return type.">Объект <see cref="T:System.Type" />, представляющий тип возвращаемого значения текущего метода; значение <see cref="T:System.Void" />, если метод не имеет возвращаемого типа.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the return type for the dynamic method.">Получает настраиваемые атрибуты типа возвращаемого значения для динамического метода.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; representing the custom attributes of the return type for the dynamic method.">Объект <see cref="T:System.Reflection.ICustomAttributeProvider" />, представляющий настраиваемые атрибуты возвращаемого типа для динамического метода.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary vsli:raw="Returns the signature of the method, represented as a string.">Возвращает сигнатуру метода, представленную в виде строки.</summary>
      <returns vsli:raw="A string representing the method signature.">Строка, представляющая сигнатуру метода.</returns>
    </member>
  </members>
</doc>
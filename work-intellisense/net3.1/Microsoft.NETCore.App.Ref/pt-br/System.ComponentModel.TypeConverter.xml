<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">Fornece dados para o evento de <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using no parameters.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AddingNewEventArgs" /> não usando nenhum parâmetro.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using the specified object as the new item.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AddingNewEventArgs" /> usando o objeto especificado como o novo item.</summary>
      <param name="newObject" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the new item value.">Um <see cref="T:System.Object" /> a ser usado como o novo valor do item.</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary vsli:raw="Gets or sets the object to be added to the binding list.">Obtém ou define o objeto a ser adicionado à lista de associação.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to be added as a new item to the associated collection.">O <see cref="T:System.Object" /> a ser adicionado como um novo item à coleção associada.</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">Representa o método que manipulará o evento de <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> .</summary>
      <param name="sender" vsli:raw="The source of the event, typically a data container or data-bound collection.">A origem do evento, normalmente um contêiner de dados ou uma coleção associada a dados.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">Um <see cref="T:System.ComponentModel.AddingNewEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary vsli:raw="Specifies the value to pass to a property to cause the property to get its value from another source. This is known as ambience. This class cannot be inherited.">Especifica o valor a ser passado para uma propriedade para fazer com que a propriedade obtenha o seu valor de outra origem. Isso é conhecido como ambiente. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Boolean value for its value.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado um valor booliano de seu valor.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an 8-bit unsigned integer for its value.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado um inteiro sem sinal de 8 bits para seu valor.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Unicode character for its value.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado um caractere Unicode para seu valor.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a double-precision floating-point number for its value.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado um número de ponto flutuante de precisão dupla para seu valor.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 16-bit signed integer for its value.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado um inteiro com sinal de 16 bits para seu valor.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 32-bit signed integer for its value.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado um inteiro com sinal de 32 bits para seu valor.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 64-bit signed integer for its value.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado um inteiro com sinal de 64 bits para seu valor.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an object for its value.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, considerando um objeto para seu valor.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a single-precision floating point number for its value.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado um número de ponto flutuante de precisão simples para seu valor.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a string for its value.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, considerando uma cadeia de caracteres para seu valor.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given the value and its type.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado o valor e seu tipo.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">O <see cref="T:System.Type" /> do parâmetro <paramref name="value" />.</param>
      <param name="value" vsli:raw="The value for this attribute.">O valor para este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Determina se o <see cref="T:System.ComponentModel.AmbientValueAttribute" /> especificado é igual ao <see cref="T:System.ComponentModel.AmbientValueAttribute" /> atual.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">O <see cref="T:System.ComponentModel.AmbientValueAttribute" /> a ser comparado com o <see cref="T:System.ComponentModel.AmbientValueAttribute" /> atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.ComponentModel.AmbientValueAttribute" /> especificado for igual ao <see cref="T:System.ComponentModel.AmbientValueAttribute" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Um código hash do <see cref="T:System.ComponentModel.AmbientValueAttribute" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary vsli:raw="Gets the object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Obtém o objeto que é o valor deste <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</summary>
      <returns vsli:raw="The object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">O objeto que é o valor <see cref="T:System.ComponentModel.AmbientValueAttribute" />disso.</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Array&quot; /&gt; objects to and from various other representations.">Fornece um conversor de tipo para converter objetos <see cref="T:System.Array" /> para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ArrayConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ArrayConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Converte o objeto de valor especificado para o tipo de destino especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">A cultura na qual o <paramref name="value" /> será convertido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">O <see cref="T:System.Type" /> para o qual converter o valor.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter.">Obtém uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro de valor.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">Um <see cref="T:System.Object" /> que especifica o tipo de matriz para o qual obter as propriedades.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Uma matriz do tipo <see cref="T:System.Attribute" /> que será usada como um filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for an array, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades expostas para uma matriz ou <see langword="null" />, se não houver propriedades.</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties.">Obtém um valor que indica se esse objeto dá suporte a propriedades.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, porque <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> deve ser chamado para localizar as propriedades deste objeto. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary vsli:raw="Represents a collection of attributes.">Representa uma coleção de atributos.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection.">Uma matriz do tipo <see cref="T:System.Attribute" /> que fornece os atributos para essa coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributes" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary vsli:raw="Gets the attribute collection.">Obtém a coleção de atributos.</summary>
      <returns vsli:raw="The attribute collection.">A coleção de atributo.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary vsli:raw="Determines whether this collection of attributes has the specified attribute.">Determina se esta coleção de atributos tem o atributo especificado.</summary>
      <param name="attribute" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">Um <see cref="T:System.Attribute" /> a ser encontrado na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção contiver o atributo ou for o atributo padrão para o tipo de atributo. Caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary vsli:raw="Determines whether this attribute collection contains all the specified attributes in the attribute array.">Determina se essa coleção de atributos contém todos os atributos especificados na matriz de atributos.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">Uma matriz do tipo <see cref="T:System.Attribute" /> a localizar na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains all the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção contiver todos os atributos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the collection to an array, starting at the specified index.">Copia a coleção para uma matriz, começando no índice especificado.</summary>
      <param name="array" vsli:raw="The &lt;see cref=&quot;T:System.Array&quot; /&gt; to copy the collection to.">O <see cref="T:System.Array" /> para o qual copiar a coleção.</param>
      <param name="index" vsli:raw="The index to start from.">O índice a partir do qual iniciar.</param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary vsli:raw="Gets the number of attributes.">Obtém o número de atributos.</summary>
      <returns vsli:raw="The number of attributes.">O número de atributos.</returns>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use, rather than creating a new one. This field is read-only.">Especifica uma coleção vazia que você pode usar, em vez de criar uma nova. Este campo é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from an existing &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">Cria um novo <see cref="T:System.ComponentModel.AttributeCollection" /> de um <see cref="T:System.ComponentModel.AttributeCollection" /> existente.</summary>
      <param name="existing" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from which to create the copy.">O <see cref="T:System.ComponentModel.AttributeCollection" /> do qual criar a cópia.</param>
      <param name="newAttributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection. Can be &lt;see langword=&quot;null&quot; /&gt;.">Uma matriz do tipo <see cref="T:System.Attribute" /> que fornece os atributos para essa coleção. Pode ser <see langword="null" />.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that is a copy of &lt;paramref name=&quot;existing&quot; /&gt;.">Um novo <see cref="T:System.ComponentModel.AttributeCollection" /> que é uma cópia de <paramref name="existing" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;existing&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="existing" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Retorna o <see cref="T:System.Attribute" /> padrão de um determinado <see cref="T:System.Type" />.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the attribute to retrieve.">O <see cref="T:System.Type" /> do atributo a ser recuperado.</param>
      <returns vsli:raw="The default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;paramref name=&quot;attributeType&quot; /&gt;.">O <see cref="T:System.Attribute" /> padrão de um determinado <paramref name="attributeType" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this collection.">Obtém um enumerador para esta coleção.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Um enumerador do tipo <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the attribute with the specified index number.">Obtém o atributo com o número de índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">O índice baseado em zero do <see cref="T:System.ComponentModel.AttributeCollection" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified index number.">O <see cref="T:System.Attribute" /> com o número de índice especificado.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary vsli:raw="Gets the attribute with the specified type.">Obtém o atributo com o tipo especificado.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to get from the collection.">O <see cref="T:System.Type" /> do <see cref="T:System.Attribute" /> a obter da coleção.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified type or, if the attribute does not exist, the default value for the attribute type.">O <see cref="T:System.Attribute" /> com o tipo especificado ou, se o atributo não existir, o valor padrão para o tipo de atributo.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary vsli:raw="Determines whether a specified attribute is the same as an attribute in the collection.">Determina se um atributo especificado é o mesmo que um atributo na coleção.</summary>
      <param name="attribute" vsli:raw="An instance of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to compare with the attributes in this collection.">Uma instância de <see cref="T:System.Attribute" /> para comparar aos atributos nesta coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o atributo estiver contido na coleção e tiver o mesmo valor que o atributo na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary vsli:raw="Determines whether the attributes in the specified array are the same as the attributes in the collection.">Determina se os atributos na matriz especificada são os mesmos que os atributos na coleção.</summary>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.MemberAttributes&quot; /&gt; to compare with the attributes in this collection.">Uma matriz de <see cref="T:System.CodeDom.MemberAttributes" /> para comparar aos atributos nesta coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se todos os atributos na matriz estiverem contidos na coleção e tiverem os mesmos valores como os atributos na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Obtém o número de elementos contidos na coleção.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">O número de elementos contidos na coleção.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread-safe).">Obtém um valor que indica se o acesso à coleção é sincronizado (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o acesso à coleção for sincronizado (thread-safe); caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Obtém um objeto que pode ser usado para sincronizar o acesso à coleção.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Um objeto que pode ser usado para sincronizar o acesso à coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Retorna um <see cref="T:System.Collections.IEnumerator" /> para o <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Um <see cref="T:System.Collections.IEnumerator" /> para o <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary vsli:raw="Enables attribute redirection. This class cannot be inherited.">Habilita o redirecionamento de atributo. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> com o nome de tipo determinado.</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">O nome do tipo a especificar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name and property name.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> com o nome do tipo e o nome da propriedade especificados.</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">O nome do tipo a especificar.</param>
      <param name="propertyName" vsli:raw="The name of the property for which attributes will be retrieved.">O nome da propriedade para a qual os atributos serão recuperados.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> com o tipo determinado.</summary>
      <param name="type" vsli:raw="The type to specify.">O tipo a especificar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary vsli:raw="Gets the name of the property for which attributes will be retrieved.">Obtém o nome da propriedade para a qual os atributos serão recuperados.</summary>
      <returns vsli:raw="The name of the property for which attributes will be retrieved.">O nome da propriedade para a qual os atributos serão recuperados.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary vsli:raw="Gets the assembly qualified type name passed into the constructor.">Obtém o nome de tipo qualificado do assembly passado para o construtor.</summary>
      <returns vsli:raw="The assembly qualified name of the type specified in the constructor.">O nome qualificado do assembly do tipo especificado no construtor.</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary vsli:raw="Provides a base type converter for nonfloating-point numerical types.">Fornece um conversor de tipo base para tipos numéricos de ponto não flutuante.</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Determina se esse conversor pode converter um objeto no tipo de origem especificado para o tipo nativo do conversor.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type from which you want to convert.">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a operação, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">Retorna um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="t">Um <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a operação, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">Converte o objeto fornecido no tipo nativo do conversor.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">Um <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura na qual representar o número.</param>
      <param name="value" vsli:raw="The object to convert.">O objeto a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.Exception" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> não é um valor válido para o tipo de destino.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">Converte o objeto especificado em outro tipo.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">Um <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura na qual representar o número.</param>
      <param name="value" vsli:raw="The object to convert.">O objeto a ser convertido.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">O tipo no qual converter o objeto.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary vsli:raw="Specifies whether a member is typically used for binding. This class cannot be inherited.">Especifica se um membro é normalmente usado para associação. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with a Boolean value.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.BindableAttribute" /> com um valor booliano.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para usar a propriedade para associação; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para usar a propriedade para associação; caso contrário, <see langword="false" />.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">Um dos valores de <see cref="T:System.ComponentModel.BindingDirection" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with one of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.BindableAttribute" /> com um dos valores <see cref="T:System.ComponentModel.BindableSupport" />.</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">Um dos valores de <see cref="T:System.ComponentModel.BindableSupport" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">Um dos valores de <see cref="T:System.ComponentModel.BindableSupport" />.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">Um dos valores de <see cref="T:System.ComponentModel.BindingDirection" />.</param>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating that a property is typically used for binding.">Obtém um valor que indica que uma propriedade normalmente é usada para associação.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is typically used for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a propriedade normalmente for usada para associação; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.BindableAttribute.No&quot; /&gt;. This field is read-only.">Especifica o valor padrão para o <see cref="T:System.ComponentModel.BindableAttribute" />, que é <see cref="F:System.ComponentModel.BindableAttribute.No" />. Este campo é somente leitura.</summary>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary vsli:raw="Gets a value indicating the direction or directions of this property's data binding.">Obtém um valor que indica a direção da associação de dados desta propriedade.</summary>
      <returns vsli:raw="The direction of this property's data binding.">A direção da Associação de dados desta propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; objects are equal.">Determina se dois objetos <see cref="T:System.ComponentModel.BindableAttribute" /> são iguais.</summary>
      <param name="obj" vsli:raw="The object to compare.">O objeto a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if it is not equal.">
        <see langword="true" /> se o <see cref="T:System.ComponentModel.BindableAttribute" /> especificado for igual ao <see cref="T:System.ComponentModel.BindableAttribute" /> atual; <see langword="false" /> se não for igual.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary vsli:raw="Serves as a hash function for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">Serve como uma função hash para a classe <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;.">Um código hash do <see cref="T:System.ComponentModel.BindableAttribute" /> atual.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">Determina se este atributo é o padrão.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o atributo for o valor padrão para essa classe de atributos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not typically used for binding. This field is read-only.">Especifica que uma propriedade não é normalmente usada para associação. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is typically used for binding. This field is read-only.">Especifica que uma propriedade é normalmente usada para associação. Este campo é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary vsli:raw="Specifies values to indicate whether a property can be bound to a data element or another property.">Especifica valores para indicar se uma propriedade pode ser associada a um elemento de dados ou a outra propriedade.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary vsli:raw="The property is set to the default.">A propriedade é definida como o padrão.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary vsli:raw="The property is not bindable at design time.">A propriedade não é associável em tempo de design.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary vsli:raw="The property is bindable at design time.">A propriedade é associável em tempo de design.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary vsli:raw="Specifies whether the template can be bound one way or two ways.">Especifica se o modelo pode ser associado de uma maneira ou de duas.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary vsli:raw="The template can only accept property values. Used with a generic &lt;see cref=&quot;T:System.Web.UI.ITemplate&quot; /&gt;.">O modelo pode aceitar apenas valores da propriedade. Usado com um <see cref="T:System.Web.UI.ITemplate" /> genérico.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary vsli:raw="The template can accept and expose property values. Used with an &lt;see cref=&quot;T:System.Web.UI.IBindableTemplate&quot; /&gt;.">O modelo pode aceitar e expor valores da propriedade. Usado com um <see cref="T:System.Web.UI.IBindableTemplate" />.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary vsli:raw="Provides a generic collection that supports data binding.">Fornece uma coleção genérica que dá suporte à vinculação de dados.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">O tipo dos elementos na lista.</typeparam>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class using default values.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.BindingList`1" /> usando valores padrão.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class with the specified list.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.BindingList`1" /> com a lista especificada.</summary>
      <param name="list" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; of items to be contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">Um <see cref="T:System.Collections.Generic.IList`1" /> de itens a ser contido no <see cref="T:System.ComponentModel.BindingList`1" />.</param>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary vsli:raw="Occurs before an item is added to the list.">Ocorre antes que um item seja adicionado à lista.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary vsli:raw="Adds a new item to the collection.">Adiciona um novo item à coleção.</summary>
      <returns vsli:raw="The item added to the list.">O item adicionado à lista.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Forms.BindingSource.AllowNew&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A public parameterless constructor could not be found for the current item type.">A propriedade <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> é definida como <see langword="false" />.
- ou -
Um construtor público sem parâmetros não pôde ser encontrado no tipo de item atual.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary vsli:raw="Adds a new item to the end of the collection.">Adiciona um novo item ao final da coleção.</summary>
      <returns vsli:raw="The item that was added to the collection.">O item que foi adicionado à coleção.</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="The new item is not the same type as the objects contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">O novo item não é do mesmo tipo que os objetos contidos no <see cref="T:System.ComponentModel.BindingList`1" />.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary vsli:raw="Gets or sets a value indicating whether items in the list can be edited.">Obtém ou define um valor que indica se os itens da lista podem ser editados.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se os itens de lista puderem ser editados; caso contrário, <see langword="false" />. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary vsli:raw="Gets or sets a value indicating whether you can add items to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">Obtém ou define um valor que indica se é possível adicionar itens à lista usando o método <see cref="M:System.ComponentModel.BindingList`1.AddNew" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">
        <see langword="true" /> se for possível adicionar itens à lista com o método <see cref="M:System.ComponentModel.BindingList`1.AddNew" />; caso contrário, <see langword="false" />. O padrão depende do tipo subjacente contido na lista.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary vsli:raw="Gets or sets a value indicating whether you can remove items from the collection.">Obtém ou define um valor que indica se você pode remover itens da coleção.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />Se você puder remover itens da lista com o <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> método, caso contrário,. <see langword="false" /> O padrão é <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the items if overridden in a derived class; otherwise, throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Classifica os itens se substituído em uma classe derivada; caso contrário, lança um <see cref="T:System.NotSupportedException" />.</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that specifies the property to sort on.">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> que especifica a propriedade para a classificação.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Um dos valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">O método não é substituído em uma classe derivada.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item.">Descarta um novo item pendente.</summary>
      <param name="itemIndex" vsli:raw="The index of the of the new item to be added.">O índice do novo item a ser adicionado</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary vsli:raw="Removes all elements from the collection.">Remove todos os elementos da coleção.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">Confirma um novo item pendente para a coleção.</summary>
      <param name="itemIndex" vsli:raw="The index of the new item to be added.">O índice do novo item a ser adicionado.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Searches for the index of the item that has the specified property descriptor with the specified value, if searching is implemented in a derived class; otherwise, a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Procura o índice do item que tem o descritor de propriedade especificado com o valor indicado se a pesquisa for implementada em uma classe derivada; caso contrário, um <see cref="T:System.NotSupportedException" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search for.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser pesquisado.</param>
      <param name="key" vsli:raw="The value of &lt;paramref name=&quot;prop&quot; /&gt; to match.">O valor de <paramref name="prop" /> para correspondência.</param>
      <returns vsli:raw="The zero-based index of the item that matches the property descriptor and contains the specified value.">O índice de base zero do item que corresponde ao descritor de propriedade e contém o valor especificado.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; is not overridden in a derived class.">
        <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" /> não é substituído em uma classe derivada.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified item in the list at the specified index.">Insere o item especificado na lista no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index where the item is to be inserted.">O índice baseado em zero no qual o item deve ser inserido.</param>
      <param name="item" vsli:raw="The item to insert in the list.">O item a ser inserido na lista.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary vsli:raw="Gets a value indicating whether the list is sorted.">Obtém um valor que indica se a lista está classificada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is sorted; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a lista estiver classificada; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary vsli:raw="Occurs when the list or an item in the list changes.">Ocorre quando a lista ou um item na lista é alterado.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.AddingNew&quot; /&gt; event.">Aciona o evento <see cref="E:System.ComponentModel.BindingList`1.AddingNew" />.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">Um <see cref="T:System.ComponentModel.AddingNewEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event.">Aciona o evento <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">Um <see cref="T:System.ComponentModel.ListChangedEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary vsli:raw="Gets or sets a value indicating whether adding or removing items within the list raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events.">Obtém ou define um valor que indica se a adição ou remoção de itens na lista gera eventos <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if adding or removing items raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se a adição ou remoção de itens gera eventos <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />; caso contrário, <see langword="false" />. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Remove o item no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">O índice com base em zero do item a ser removido.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="You are removing a newly added item and &lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowRemove&quot; /&gt; is set to &lt;see langword=&quot;false&quot; /&gt;.">Você está removendo um item recém-adicionado e <see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> está definido como <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary vsli:raw="Removes any sort applied with &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; if sorting is implemented in a derived class; otherwise, raises &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Removerá qualquer classificação aplicada com <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> se a classificação for implementada em uma classe derivada; caso contrário, gerará <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">O método não é substituído em uma classe derivada.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.Reset&quot; /&gt;.">Aciona um evento <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> do tipo <see cref="F:System.ComponentModel.ListChangedType.Reset" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt; for the item at the specified position.">Gera um evento <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> do tipo <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> para o item na posição especificada.</summary>
      <param name="position" vsli:raw="A zero-based index of the item to be reset.">Um índice de base zero do item a ser reiniciado.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Substitui o item no índice especificado pelo item especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to replace.">O índice baseado em zero do item a ser substituído.</param>
      <param name="item" vsli:raw="The new value for the item at the specified index. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">O novo valor para o item no índice especificado. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.ObjectModel.Collection`1.Count&quot; /&gt;.">
        <paramref name="index" /> é menor que zero.
- ou -
<paramref name="index" /> é maior que <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary vsli:raw="Gets the direction the list is sorted.">Obtém a direção em que a lista é classificada.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.ComponentModel.ListSortDirection.Ascending&quot; /&gt;.">Um dos valores de <see cref="T:System.ComponentModel.ListSortDirection" />. O padrão é <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary vsli:raw="Gets the property descriptor that is used for sorting the list if sorting is implemented in a derived class; otherwise, returns &lt;see langword=&quot;null&quot; /&gt;.">Obterá o descritor de propriedade usado para classificar a lista se a classificação for implementada em uma classe derivada; caso contrário, retornará <see langword="null" />.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; used for sorting the list.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> usado para classificar a lista.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary vsli:raw="Gets a value indicating whether &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are enabled.">Obtém um valor que indica se os eventos <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> estão habilitados.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />Se <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> houver suporte para eventos; caso <see langword="false" />contrário,. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports searching.">Obtém um valor que indica se a lista dá suporte a pesquisa.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />se a lista der suporte à pesquisa; caso contrário <see langword="false" />,. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports sorting.">Obtém um valor que indica se a lista dá suporte à classificação.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a lista der suporte à classificação; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">Para obter uma descrição desse membro, consulte <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add as a search criteria.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser adicionado como um critério de pesquisa.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary vsli:raw="Adds a new item to the list. For more information, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">Adiciona um novo item à lista. Para obter mais informações, consulte <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
      <returns vsli:raw="The item added to the list.">O item adicionado à lista.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Não há suporte para o método.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary vsli:raw="Gets a value indicating whether items in the list can be edited.">Obtém um valor que indica se os itens na lista podem ser editados.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se os itens de lista puderem ser editados; caso contrário, <see langword="false" />. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary vsli:raw="Gets a value indicating whether new items can be added to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">Obtém ou define um valor que indica se novos itens podem ser adicionados à lista usando o método <see cref="M:System.ComponentModel.BindingList`1.AddNew" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">
        <see langword="true" /> se for possível adicionar itens à lista com o método <see cref="M:System.ComponentModel.BindingList`1.AddNew" />; caso contrário, <see langword="false" />. O padrão depende do tipo subjacente contido na lista.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary vsli:raw="Gets a value indicating whether items can be removed from the list.">Obtém um valor que indica se itens podem ser removidos da lista.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />Se você puder remover itens da lista com o <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> método; caso contrário,. <see langword="false" /> O padrão é <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;. For a complete description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">Classifica a lista com base em um <see cref="T:System.ComponentModel.PropertyDescriptor" /> e um <see cref="T:System.ComponentModel.ListSortDirection" />. Para obter uma descrição completa desse membro, consulte <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> pelo qual se classificar.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Um dos valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt;.">Para obter uma descrição desse membro, consulte <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> no qual pesquisar.</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;prop&quot; /&gt; parameter to search for.">O valor do parâmetro <paramref name="prop" /> a pesquisar.</param>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">O índice da linha que tem o <see cref="T:System.ComponentModel.PropertyDescriptor" /> determinado.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.IsSorted&quot; /&gt;.">Para obter uma descrição desse membro, consulte <see cref="P:System.ComponentModel.IBindingList.IsSorted" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" /> foi chamado e <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> não foi chamado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">Para obter uma descrição desse membro, consulte <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser removido dos índices usados para pesquisar.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt;.">Para obter uma descrição deste membro, consulte <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /></summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortDirection&quot; /&gt;.">Para obter uma descrição desse membro, consulte <see cref="P:System.ComponentModel.IBindingList.SortDirection" />.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Um dos valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortProperty&quot; /&gt;.">Para obter uma descrição desse membro, consulte <see cref="P:System.ComponentModel.IBindingList.SortProperty" />.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> que está sendo usado para classificação.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsChangeNotification&quot; /&gt;.">Para obter uma descrição desse membro, consulte <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> for acionado quando a lista ou um item for alterado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt;.">Para obter uma descrição desse membro, consulte <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />se a lista der suporte à pesquisa <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> usando o método; <see langword="false" />caso contrário,.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt;.">Para obter uma descrição desse membro, consulte <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a lista der suporte à classificação; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether item property value changes raise &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt;. This member cannot be overridden in a derived class.">Obtém um valor que indica se as alterações no valor da propriedade do item geram eventos <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> do tipo <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" />. Este membro não pode ser substituído em uma classe derivada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list type implements &lt;see cref=&quot;T:System.ComponentModel.INotifyPropertyChanged&quot; /&gt;, otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o tipo de lista <see cref="T:System.ComponentModel.INotifyPropertyChanged" />implementar, caso <see langword="false" />contrário,. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Boolean&quot; /&gt; objects to and from various other representations.">Fornece um conversor de tipo para converter objetos <see cref="T:System.Boolean" /> para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BooleanConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.BooleanConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Boolean object using the specified context.">Obtém um valor que indica se este conversor pode converter um objeto no tipo de origem especificado para um objeto booliano usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse objeto puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a Boolean object.">Converte o objeto de valor especificado para um objeto booliano.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">Uma <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura na qual converter.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> não é um valor válido para o tipo de destino.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the Boolean data type.">Obtém uma coleção de valores padrão para o tipo de dados booliano.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values.">Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contém um conjunto padrão de valores válidos.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">Obtém um valor que indica se a lista de valores padrão retornados do método <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> é uma lista exclusiva.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> porque a <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retornada de <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> é uma lista completa de valores possíveis. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">Obtém um valor que indica se esse objeto é compatível com um conjunto padrão de valores que podem ser escolhidos de uma lista.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> porque <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> pode ser chamado para localizar um conjunto comum de valores com os quais o objeto é compatível. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from various other representations.">Fornece um conversor de tipo para converter objetos de tipo inteiro sem sinal de 8 bits para e a partir de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ByteConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ByteConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary vsli:raw="Represents the method that handles a cancelable event.">Representa o método que manipula um evento cancelável.</summary>
      <param name="sender" vsli:raw="The source of the event.">A fonte do evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CancelEventArgs&quot; /&gt; that contains the event data.">Um <see cref="T:System.ComponentModel.CancelEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary vsli:raw="Provides a type converter to convert Unicode character objects to and from various other representations.">Fornece um conversor de tipo para converter objetos de caractere Unicode para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CharConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.CharConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Unicode character object using the specified context.">Obtém um valor que indica se este conversor pode converter um objeto no tipo de origem especificado para um objeto de caractere Unicode usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a Unicode character object.">Converte o objeto fornecido em um objeto de caractere Unicode.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">A cultura na qual o <paramref name="value" /> será convertido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> não é um valor válido para o tipo de destino.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a Unicode character object using the arguments.">Converte o objeto de valor especificado em um objeto de caractere Unicode, usando os argumentos.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">A cultura na qual o <paramref name="value" /> será convertido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">O <see cref="T:System.Type" /> para o qual converter o valor.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary vsli:raw="Specifies how the collection is changed.">Especifica como uma coleção é alterada.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary vsli:raw="Specifies that an element was added to the collection.">Especifica que um elemento foi adicionado à coleção.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary vsli:raw="Specifies that the entire collection has changed. This is caused by using methods that manipulate the entire collection, such as &lt;see cref=&quot;M:System.Collections.CollectionBase.Clear&quot; /&gt;.">Especifica que a coleção inteira foi alterada. Isso é causado pelo uso de métodos que manipulam toda a coleção, assim como <see cref="M:System.Collections.CollectionBase.Clear" />.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary vsli:raw="Specifies that an element was removed from the collection.">Especifica que um elemento foi removido da coleção.</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event.">Fornece dados para o evento de <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />.</summary>
      <param name="action" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values that specifies how the collection changed.">Um dos valores de <see cref="T:System.ComponentModel.CollectionChangeAction" /> que especifica como a coleção foi alterada.</param>
      <param name="element" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the instance of the collection where the change occurred.">Um <see cref="T:System.Object" /> que especifica a instância da coleção em que a alteração ocorreu.</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary vsli:raw="Gets an action that specifies how the collection changed.">Obtém uma ação que especifica como a coleção foi alterada.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values.">Um dos valores de <see cref="T:System.ComponentModel.CollectionChangeAction" />.</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary vsli:raw="Gets the instance of the collection with the change.">Obtém a instância da coleção com a alteração.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the instance of the collection with the change, or &lt;see langword=&quot;null&quot; /&gt; if you refresh the collection.">Um <see cref="T:System.Object" /> que representa a instância da coleção com a alteração, ou <see langword="null" /> se você atualizar a coleção.</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event raised when adding elements to or removing elements from a collection.">Representa o método que manipula o evento <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> acionado ao adicionar ou remover elementos da coleção.</summary>
      <param name="sender" vsli:raw="The source of the event.">A fonte do evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; that contains the event data.">Um <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary vsli:raw="Provides a type converter to convert collection objects to and from various other representations.">Fornece um conversor de tipo para converter objetos de coleção para e a partir de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.CollectionConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Converte o objeto de valor especificado para o tipo de destino especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="The culture to which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">A cultura em que o <paramref name="value" /> será convertido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This parameter must inherit from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">O <see cref="T:System.Object" /> a ser convertido. Este parâmetro deve ser usado com <see cref="T:System.Collections.ICollection" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">O <see cref="T:System.Type" /> no qual converter o valor.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter using the specified context and attributes.">Obtém uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro de valor usando o contexto e os atributos especificados.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">Um <see cref="T:System.Object" /> que especifica o tipo de matriz para o qual obter as propriedades.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Uma matriz do tipo <see cref="T:System.Attribute" /> que será usada como um filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que são expostas para esse tipo de dados ou <see langword="null" />, se não há nenhuma propriedade. Esse método sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém um valor que indica se esse objeto dá suporte a propriedades.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="false" /> porque <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> não deve ser chamado para localizar as propriedades desse objeto. Esse método nunca retorna <see langword="true" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the data source and data member properties for a component that supports complex data binding. This class cannot be inherited.">Especifica a fonte de dados e as propriedades de membro de dados para um componente que dá suporte à vinculação de dados complexos. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using no parameters.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> não usando nenhum parâmetro.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> usando a fonte de dados especificada.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">O nome da propriedade a ser usada como a fonte de dados.</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source and data member.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> usando a fonte de dados e o membro de dados especificados.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">O nome da propriedade a ser usada como a fonte de dados.</param>
      <param name="dataMember" vsli:raw="The name of the property to be used as the source for data.">O nome da propriedade a ser usada como a origem dos dados.</param>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary vsli:raw="Gets the name of the data member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Obtém o nome da propriedade do membro de dados para o componente ao qual o <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> está associado.</summary>
      <returns vsli:raw="The name of the data member property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">O nome da propriedade de membro de dados para o componente ao <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> qual está associado</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Obtém o nome da propriedade de fonte de dados para o componente ao qual o <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> está associado.</summary>
      <returns vsli:raw="The name of the data source property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">O nome da propriedade de fonte de dados do componente ao qual <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> está associado.</returns>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class.">Representa o valor padrão para a classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">Determina se o <see cref="T:System.Object" /> especificado é igual à instância de <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> atual.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">O <see cref="T:System.Object" /> a comparar com a instância de <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> atual</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">
        <see langword="true" /> se o objeto é igual à instância atual, caso contrário, <see langword="false" />, indicando que não são iguais.</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary vsli:raw="Provides a type converter to convert components to and from various other representations.">Fornece um conversor de tipo para converter componentes em várias outras representações e de várias outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ComponentConverter" />.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this component converter.">Um <see cref="T:System.Type" /> que representa o tipo a ser associado a este conversor de componente.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of component specified by the value parameter.">Obtém uma coleção de propriedades para o tipo de componente especificado pelo parâmetro de valor.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of component to get the properties for.">Um <see cref="T:System.Object" /> que especifica o tipo de componente para o qual obter as propriedades.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Uma matriz do tipo <see cref="T:System.Attribute" /> que será usada como um filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades expostas para o componente ou <see langword="null" />, se não houver nenhuma propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">Obtém um valor que indica se este objeto dá suporte às propriedades usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, porque <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> deve ser chamado para localizar as propriedades deste objeto. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary vsli:raw="Provides the base class for a custom component editor.">Fornece a classe base para um editor de componente personalizado.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentEditor&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ComponentEditor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified based upon a given context.">Edita o componente e retorna um valor que indica se o componente foi modificado com base em um contexto determinado.</summary>
      <param name="context" vsli:raw="An optional context object that can be used to obtain further information about the edit.">Um objeto de contexto opcional que pode ser usado para obter mais informações sobre a edição.</param>
      <param name="component" vsli:raw="The component to be edited.">O componente a ser editado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o componente tiver sido modificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified.">Edita o componente e retorna um valor que indica se o componente foi modificado.</summary>
      <param name="component" vsli:raw="The component to be edited.">O componente a ser editado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o componente tiver sido modificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary vsli:raw="Provides simple functionality for enumerating resources for a component or object. The &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class is a &lt;see cref=&quot;T:System.Resources.ResourceManager&quot; /&gt;.">Fornece uma funcionalidade simples para enumerar recursos para um componente ou objeto. A classe <see cref="T:System.ComponentModel.ComponentResourceManager" /> é um <see cref="T:System.Resources.ResourceManager" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class with default values.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ComponentResourceManager" /> com valores padrão.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; that looks up resources in satellite assemblies based on information from the specified &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Cria um <see cref="T:System.ComponentModel.ComponentResourceManager" /> que procura recursos em assemblies satélites com base nas informações do <see cref="T:System.Type" /> especificado.</summary>
      <param name="t" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; from which the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; derives all information for finding resource files.">Um <see cref="T:System.Type" /> do qual o <see cref="T:System.ComponentModel.ComponentResourceManager" /> deriva todas as informações para localizar arquivos de recurso.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">Aplica-se o valor de um recurso à propriedade correspondente do objeto.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">Um <see cref="T:System.Object" /> que contém o valor da propriedade a ser aplicado.</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">Um <see cref="T:System.String" /> que contém o nome do objeto a ser pesquisado nos recursos.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ou <paramref name="objectName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">Aplica-se o valor de um recurso à propriedade correspondente do objeto.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">Um <see cref="T:System.Object" /> que contém o valor da propriedade a ser aplicado.</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">Um <see cref="T:System.String" /> que contém o nome do objeto a ser pesquisado nos recursos.</param>
      <param name="culture" vsli:raw="The culture for which to apply resources.">A cultura para a qual aplicar recursos.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ou <paramref name="objectName" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary vsli:raw="Encapsulates zero or more components.">Encapsula zero ou mais componentes.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Container" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;. The component is unnamed.">Adiciona o <see cref="T:System.ComponentModel.Component" /> especificado ao <see cref="T:System.ComponentModel.Container" />. O componente não foi nomeado.</summary>
      <param name="component" vsli:raw="The component to add.">O componente a ser adicionado.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; and assigns it a name.">Adiciona o <see cref="T:System.ComponentModel.Component" /> especificado ao <see cref="T:System.ComponentModel.Container" /> e atribui a ele um nome.</summary>
      <param name="component" vsli:raw="The component to add.">O componente a ser adicionado.</param>
      <param name="name" vsli:raw="The unique, case-insensitive name to assign to the component.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt;, which leaves the component unnamed.">O nome exclusivo que não diferencia maiúsculas de minúsculas a ser atribuído ao componente.
- ou -
<see langword="null" />, que deixa o componente sem nome.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">
        <paramref name="name" /> não é exclusivo.</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary vsli:raw="Gets all the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Obtém todos os componentes do <see cref="T:System.ComponentModel.Container" />.</summary>
      <returns vsli:raw="A collection that contains the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Uma coleção que contém os componentes do <see cref="T:System.ComponentModel.Container" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; for the given &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and assigns the given name to the site.">Cria um site <see cref="T:System.ComponentModel.ISite" /> para o <see cref="T:System.ComponentModel.IComponent" /> determinado e atribui o nome determinado ao site.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">O <see cref="T:System.ComponentModel.IComponent" /> para o qual criar um site.</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">O nome a ser atribuído ao <paramref name="component" /> ou <see langword="null" /> para ignorar a atribuição de nomes.</param>
      <returns vsli:raw="The newly created site.">O site recém-criado.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Libera todos os recursos usados pelo <see cref="T:System.ComponentModel.Container" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;, and optionally releases the managed resources.">Libera os recursos não gerenciados usados pelo <see cref="T:System.ComponentModel.Container" /> e opcionalmente libera os recursos gerenciados.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary vsli:raw="Releases unmanaged resources and performs other cleanup operations before the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; is reclaimed by garbage collection.">Libera recursos não gerenciados e executa outras operações de limpeza antes que <see cref="T:System.ComponentModel.Container" /> seja recuperado pela coleta de lixo.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">Obtém o objeto de serviço do tipo especificado, se estiver disponível.</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">O <see cref="T:System.Type" /> do serviço a ser recuperado.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; implementing the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">Um <see cref="T:System.Object" /> que implementará o serviço solicitado ou <see langword="null" />, se o serviço não puder ser resolvido.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Remove um componente do <see cref="T:System.ComponentModel.Container" />.</summary>
      <param name="component" vsli:raw="The component to remove.">O componente a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; without setting &lt;see cref=&quot;P:System.ComponentModel.IComponent.Site&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;.">Remove um componente do <see cref="T:System.ComponentModel.Container" /> sem configurar <see cref="P:System.ComponentModel.IComponent.Site" /> como <see langword="null" />.</summary>
      <param name="component" vsli:raw="The component to remove.">O componente a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Determines whether the component name is unique for this container.">Determina se o nome do componente é exclusivo para este contêiner.</summary>
      <param name="component" vsli:raw="The named component.">O componente nomeado.</param>
      <param name="name" vsli:raw="The component name to validate.">O nome do componente a ser validado.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">
        <paramref name="name" /> não é exclusivo.</exception>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary vsli:raw="Provides a base class for the container filter service.">Fornece uma classe base para o serviço de filtro de contêiner.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ContainerFilterService&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ContainerFilterService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary vsli:raw="Filters the component collection.">Filtra a coleção de componentes.</summary>
      <param name="components" vsli:raw="The component collection to filter.">A coleção de componentes a ser filtrado.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ComponentCollection&quot; /&gt; that represents a modified collection.">Um <see cref="T:System.ComponentModel.ComponentCollection" /> que representa uma coleção modificada.</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; objects to and from various other representations.">Fornece um conversor de tipo para converter objetos <see cref="T:System.Globalization.CultureInfo" /> para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CultureInfoConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.CultureInfoConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; using the specified context.">Obtém um valor que indica se esse conversor pode converter um objeto do tipo de origem especificado em um <see cref="T:System.Globalization.CultureInfo" /> usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Um <see cref="T:System.Type" /> que representa o tipo no qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;.">Converte o objeto de valor especificado em um <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">Uma <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura na qual converter.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; specifies a culture that is not valid.">
        <paramref name="value" /> especifica uma cultura que não é válida.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Converte o objeto de valor especificado para o tipo de destino especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">Uma <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura na qual converter.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">O <see cref="T:System.Type" /> para o qual converter o valor.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary vsli:raw="Retrieves the name of the specified culture.">Recupera o nome da cultura especificada.</summary>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to get the name for.">Uma <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura para a qual obter o nome.</param>
      <returns vsli:raw="The name of the specified culture.">O nome da cultura especificada.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object using the specified context.">Obtém uma coleção de valores padrão para um objeto <see cref="T:System.Globalization.CultureInfo" /> usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contém um conjunto padrão de valores válidos ou <see langword="null" /> se o tipo de dados não der suporte a um conjunto padrão de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list.">Obtém um valor que indica se a lista de valores padrão retornada do <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> é uma lista completa.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is not an exhaustive list of possible values (that is, other values are possible). This method never returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="false" /> porque a <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retornada de <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> não é uma lista completa de valores possíveis (ou seja, outros valores são possíveis). Esse método nunca retorna <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">Obtém um valor que indica se esse objeto dá suporte a um conjunto padrão de valores que podem ser escolhidos em uma lista usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> porque <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> deve ser chamado para localizar um conjunto comum de valores aos quais o objeto dá suporte. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary vsli:raw="Provides a simple default implementation of the &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; interface.">Fornece uma implementação padrão simples da interface <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.CustomTypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class using a parent custom type descriptor.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> usando um descritor de tipo pai personalizado.</summary>
      <param name="parent" vsli:raw="The parent custom type descriptor.">O descritor de tipo personalizado pai.</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for the type represented by this type descriptor.">Retorna uma coleção de atributos personalizados para o tipo representado por esse descritor de tipo.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the type. The default is &lt;see cref=&quot;F:System.ComponentModel.AttributeCollection.Empty&quot; /&gt;.">Uma <see cref="T:System.ComponentModel.AttributeCollection" /> que contém os atributos do tipo. O padrão é <see cref="F:System.ComponentModel.AttributeCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the fully qualified name of the class represented by this type descriptor.">Retorna o nome totalmente qualificado da classe representada por esse descritor de tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the fully qualified class name of the type this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">Uma <see cref="T:System.String" /> que contém o nome de classe totalmente qualificado do tipo descrito por esse descritor de tipo. O padrão é <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of the class represented by this type descriptor.">Retorna o nome da classe representada por esse descritor de tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the component instance this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">Uma <see cref="T:System.String" /> que contém o nome da instância do componente descrita por esse descritor de tipo. O padrão é <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for the type represented by this type descriptor.">Retorna um conversor de tipo para o tipo representado por esse descritor de tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the type represented by this type descriptor. The default is a newly created &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt;.">Um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo representado por esse descritor de tipo. O padrão é um <see cref="T:System.ComponentModel.TypeConverter" /> recém-criado.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the event descriptor for the default event of the object represented by this type descriptor.">Retorna o descritor de evento para o evento padrão do objeto representado por esse descritor de tipo.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the default event on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">O <see cref="T:System.ComponentModel.EventDescriptor" /> para o evento padrão no objeto representado por esse descritor de tipo. O padrão é <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the property descriptor for the default property of the object represented by this type descriptor.">Retorna o descritor de propriedade para a propriedade padrão do objeto representado por esse descritor de tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; for the default property on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> para a propriedade padrão no objeto representado por esse descritor de tipo. O padrão é <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type that is to be associated with the class represented by this type descriptor.">Retorna um editor do tipo especificado que deve ser associado à classe representada por esse descritor de tipo.</summary>
      <param name="editorBaseType" vsli:raw="The base type of the editor to retrieve.">O tipo base do editor a ser recuperado.</param>
      <returns vsli:raw="An editor of the given type that is to be associated with the class represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">Um editor do tipo especificado que deve ser associado à classe representada por esse descritor de tipo. O padrão é <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns a collection of event descriptors for the object represented by this type descriptor.">Retorna uma coleção de descritores de evento para o objeto representado por esse descritor de tipo.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptors for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">Uma <see cref="T:System.ComponentModel.EventDescriptorCollection" /> que contém os descritores de evento para o objeto representado por esse descritor de tipo. O padrão é <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of event descriptors for the object represented by this type descriptor.">Retorna uma coleção filtrada de descritores de evento para o objeto representado por esse descritor de tipo.</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">Uma matriz de atributos a ser usada como um filtro. Ele pode ser <see langword="null" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">Uma <see cref="T:System.ComponentModel.EventDescriptorCollection" /> que contém as descrições de evento para o objeto representado por esse descritor de tipo. O padrão é <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns a collection of property descriptors for the object represented by this type descriptor.">Retorna uma coleção de descritores de propriedade para o objeto representado por esse descritor de tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">Uma <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém as descrições de propriedade para o objeto representado por esse descritor de tipo. O padrão é <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of property descriptors for the object represented by this type descriptor.">Retorna uma coleção filtrada de descritores de propriedade para o objeto representado por esse descritor de tipo.</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">Uma matriz de atributos a ser usada como um filtro. Ele pode ser <see langword="null" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">Uma <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém as descrições de propriedade para o objeto representado por esse descritor de tipo. O padrão é <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">Retorna um objeto que contém a propriedade descrita pelo descritor de propriedade especificado.</summary>
      <param name="pd" vsli:raw="The property descriptor for which to retrieve the owning object.">O descritor de propriedade para o qual recuperar o objeto proprietário.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that owns the given property specified by the type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.Object" /> que possui a propriedade fornecida especificada pelo descritor de tipo. O padrão é <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary vsli:raw="Identifies a type as an object suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object. This class cannot be inherited.">Identifica um tipo como um objeto adequado para ser associado a um objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DataObjectAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class and indicates whether an object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DataObjectAttribute" /> e indica se um objeto é adequado para associação a um objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</summary>
      <param name="isDataObject" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o objeto é adequado para associação a um objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary vsli:raw="Indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">Indica que a classe é adequada para associação a um objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> em tempo de design. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary vsli:raw="Represents the default value of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class, which indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">Representa o valor padrão da classe <see cref="T:System.ComponentModel.DataObjectAttribute" />, que indica se a classe é adequada para associação a um objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> em tempo de design. Este campo é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; fits the pattern of another object.">Determina se esta instância do <see cref="T:System.ComponentModel.DataObjectAttribute" /> se ajusta ao padrão de outro objeto.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt;.">Um objeto a ser comparado com essa instância do <see cref="T:System.ComponentModel.DataObjectAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esta instância for igual à instância especificada pelo parâmetro <paramref name="obj" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary vsli:raw="Gets a value indicating whether an object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time.">Obtém um valor que indica se um objeto deve ser considerado adequado para associação a um objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> em tempo de design.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o objeto deve ser considerado adequado para a associação a <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> um objeto; caso <see langword="false" />contrário,.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">Obtém um valor que indica se o valor atual do atributo é o valor padrão do atributo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor atual do atributo é o padrão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary vsli:raw="Indicates that the class is not suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">Indica que a classe não é adequada para associação a um objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> em tempo de design. Este campo é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary vsli:raw="Provides metadata for a property representing a data field. This class cannot be inherited.">Fornece metadados para uma propriedade representando um campo de dados. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> e indica se o campo é a chave primária para a linha de dados.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que o campo está na chave primária da linha de dados; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, and whether the field is a database identity field.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> e indica se o campo é a chave primária para a linha de dados e se o campo é um campo de identidade do banco de dados.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que o campo está na chave primária da linha de dados; caso contrário, <see langword="false" />.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que o campo é um campo de identidade que identifica de forma exclusiva a linha de dados; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether the field is a database identity field, and whether the field can be null.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> e indica se o campo é a chave primária para a linha de dados, se o campo é um campo de identidade do banco de dados e se o campo pode ser nulo.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que o campo está na chave primária da linha de dados; caso contrário, <see langword="false" />.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que o campo é um campo de identidade que identifica de forma exclusiva a linha de dados; caso contrário, <see langword="false" />.</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que o campo pode ser nulo no armazenamento de dados; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether it is a database identity field, and whether it can be null and sets the length of the field.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> e indica se o campo é a chave primária para a linha de dados, se é um campo de identidade do banco de dados e se pode ser nulo e define o tamanho do campo.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que o campo está na chave primária da linha de dados; caso contrário, <see langword="false" />.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que o campo é um campo de identidade que identifica de forma exclusiva a linha de dados; caso contrário, <see langword="false" />.</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que o campo pode ser nulo no armazenamento de dados; caso contrário, <see langword="false" />.</param>
      <param name="length" vsli:raw="The length of the field in bytes.">O tamanho do campo em bytes.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt;.">Um objeto a ser comparado com essa instância do <see cref="T:System.ComponentModel.DataObjectFieldAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esta instância for igual à instância especificada pelo parâmetro <paramref name="obj" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary vsli:raw="Gets a value indicating whether a property represents an identity field in the underlying data.">Obtém um valor que indica se uma propriedade representa um campo de identidade nos dados subjacentes.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents an identity field in the underlying data; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />se a propriedade representa um campo de identidade nos dados subjacentes; caso contrário <see langword="false" />,. O valor padrão é <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary vsli:raw="Gets a value indicating whether a property represents a field that can be null in the underlying data store.">Obtém um valor que indica se uma propriedade representa um campo que pode ser nulo no armazenamento de dados subjacente.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents a field that can be null in the underlying data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />se a propriedade representa um campo que pode ser nulo no armazenamento de dados subjacente; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary vsli:raw="Gets the length of the property in bytes.">Obtém o tamanho da propriedade em bytes.</summary>
      <returns vsli:raw="The length of the property in bytes, or -1 if not set.">O comprimento da propriedade em bytes, ou-1, se não estiver definido.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary vsli:raw="Gets a value indicating whether a property is in the primary key in the underlying data.">Obtém um valor que indica se uma propriedade está na chave primária nos dados subjacentes.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is in the primary key of the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />se a propriedade estiver na chave primária do repositório de dados; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary vsli:raw="Identifies a data operation method exposed by a type, what type of operation the method performs, and whether the method is the default data method. This class cannot be inherited.">Identifica um método de operação de dados exposto por um tipo, qual o tipo de operação que o método executa e se o método é o método de dados padrão. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class and identifies the type of data operation the method performs.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> e identifica o tipo de operação de dados executado pelo método.</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">Um dos valores <see cref="T:System.ComponentModel.DataObjectMethodType" /> que descreve a operação de dados executada pelo método.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class, identifies the type of data operation the method performs, and identifies whether the method is the default data method that the data object exposes.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />, identifica o tipo de operação de dados executado pelo método e identifica se o método é o método padrão de dados exposto pelo objeto de dados.</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">Um dos valores <see cref="T:System.ComponentModel.DataObjectMethodType" /> que descreve a operação de dados executada pelo método.</param>
      <param name="isDefault" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the method that the attribute is applied to is the default method of the data object for the specified &lt;paramref name=&quot;methodType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que o método ao qual o atributo é aplicado é o método padrão do objeto de dados para o <paramref name="methodType" /> especificado; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">Um objeto a ser comparado com essa instância do <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esta instância for igual à instância especificada pelo parâmetro <paramref name="obj" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary vsli:raw="Gets a value indicating whether the method that the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied to is the default data method exposed by the data object for a specific method type.">Obtém um valor que indica se o método ao qual o <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> é aplicado é o método de dados padrão exposto pelo objeto de dados para um tipo de método específico.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is the default method exposed by the object for a method type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o método for o método padrão exposto pelo objeto para um tipo de método; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary vsli:raw="Gets a value indicating whether this instance shares a common pattern with a specified attribute.">Obtém um valor que indica se essa instância compartilha um padrão comum com um atributo especificado.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">Um objeto a ser comparado com essa instância do <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esta instância for igual à instância especificada pelo parâmetro <paramref name="obj" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; value indicating the type of data operation the method performs.">Obtém um valor <see cref="T:System.ComponentModel.DataObjectMethodType" /> que indica o tipo de operação de dados executado pelo método.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that identifies the type of data operation performed by the method to which the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied.">Um dos <see cref="T:System.ComponentModel.DataObjectMethodType" /> valores que identifica o tipo de operação de dados executada pelo método ao qual o <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> é aplicado.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary vsli:raw="Identifies the type of data operation performed by a method, as specified by the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; applied to the method.">Identifica o tipo de operação de dados executado por um método, conforme especificado pelo <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> aplicados ao método.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary vsli:raw="Indicates that a method is used for a data operation that deletes data.">Indica que um método é usado para uma operação de dados que exclui dados.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary vsli:raw="Indicates that a method is used for a data operation that fills a &lt;see cref=&quot;T:System.Data.DataSet&quot; /&gt; object.">Indica que um método é usado para uma operação de dados que preenche um objeto <see cref="T:System.Data.DataSet" />.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary vsli:raw="Indicates that a method is used for a data operation that inserts data.">Indica que um método é usado para uma operação de dados que insere dados.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary vsli:raw="Indicates that a method is used for a data operation that retrieves data.">Indica que um método é usado para uma operação de dados que recupera dados.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary vsli:raw="Indicates that a method is used for a data operation that updates data.">Indica que um método é usado para uma operação de dados que atualiza dados.</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTime&quot; /&gt; objects to and from various other representations.">Fornece um conversor de tipo para converter objetos <see cref="T:System.DateTime" /> para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DateTimeConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the specified context.">Obtém um valor que indica se esse conversor pode converter um objeto do tipo de origem especificado em um <see cref="T:System.DateTime" /> usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse objeto puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Um <see cref="T:System.Type" /> que representa o tipo no qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Converte o objeto de valor especificado para um <see cref="T:System.DateTime" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Um <see cref="T:System.Globalization.CultureInfo" /> opcional. Se não for fornecido, a cultura atual será assumida.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> não é um valor válido para o tipo de destino.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the arguments.">Converte o objeto de valor especificado para um <see cref="T:System.DateTime" /> usando os argumentos.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Um <see cref="T:System.Globalization.CultureInfo" /> opcional. Se não for fornecido, a cultura atual será assumida.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">O <see cref="T:System.Type" /> para o qual converter o valor.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; structures to and from various other representations.">Fornece um conversor de tipo para converter estruturas <see cref="T:System.DateTimeOffset" /> de e para diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeOffsetConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DateTimeOffsetConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether an object of the specified source type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Retorna um valor que indica se um objeto do tipo de origem especificado pode ser convertido em um <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="context" vsli:raw="The date format context.">O contexto de formato de data.</param>
      <param name="sourceType" vsli:raw="The source type to check.">O tipo de origem a ser verificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se for possível converter o tipo especificado em um <see cref="T:System.DateTimeOffset" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to an object of the specified type.">Retorna um valor que indica se um <see cref="T:System.DateTimeOffset" /> pode ser convertido em um objeto do tipo especificado.</summary>
      <param name="context" vsli:raw="The date format context.">O contexto de formato de data.</param>
      <param name="destinationType" vsli:raw="The destination type to check.">O tipo de destino a ser verificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se for possível converter um <see cref="T:System.DateTimeOffset" /> no tipo especificado, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Converte o objeto especificado em um <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="context" vsli:raw="The date format context.">O contexto de formato de data.</param>
      <param name="culture" vsli:raw="The date culture.">A cultura da data.</param>
      <param name="value" vsli:raw="The object to be converted.">O objeto a ser convertido.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; that represents the specified object.">Um <see cref="T:System.DateTimeOffset" /> que representa o objeto especificado.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to an object of the specified type.">Converte um <see cref="T:System.DateTimeOffset" /> em um objeto do tipo especificado.</summary>
      <param name="context" vsli:raw="The date format context.">O contexto de formato de data.</param>
      <param name="culture" vsli:raw="The date culture.">A cultura da data.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to be converted.">O <see cref="T:System.DateTimeOffset" /> a ser convertido.</param>
      <param name="destinationType" vsli:raw="The type to convert to.">O tipo para o qual converter.</param>
      <returns vsli:raw="An object of the specified type that represents the &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Um objeto do tipo especificado que representa o <see cref="T:System.DateTimeOffset" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Decimal&quot; /&gt; objects to and from various other representations.">Fornece um conversor de tipo para converter objetos <see cref="T:System.Decimal" /> para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DecimalConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DecimalConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Um <see cref="T:System.Type" /> que representa o tipo no qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; using the arguments.">Converte o objeto de valor especificado para um <see cref="T:System.Decimal" /> usando os argumentos.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Um <see cref="T:System.Globalization.CultureInfo" /> opcional. Se não for fornecido, a cultura atual será assumida.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">O <see cref="T:System.Type" /> para o qual converter o valor.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">O <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary vsli:raw="Specifies the default binding property for a component. This class cannot be inherited.">Especifica a propriedade de associação padrão de um componente. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using no parameters.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> não usando nenhum parâmetro.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using the specified property name.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> usando o nome da propriedade especificado.</summary>
      <param name="name" vsli:raw="The name of the default binding property.">O nome da propriedade de associação padrão.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class.">Representa o valor padrão para a classe <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">Determina se o <see cref="T:System.Object" /> especificado é igual à instância de <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> atual.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">O <see cref="T:System.Object" /> a comparar com a instância de <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> atual</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">
        <see langword="true" /> se o objeto é igual à instância atual, caso contrário, <see langword="false" />, indicando que não são iguais.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">Obtém o nome da propriedade de associação padrão para o componente ao qual o <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> está associado.</summary>
      <returns vsli:raw="The name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">O nome da propriedade de associação padrão para o componente ao qual o <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> está associado.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary vsli:raw="Specifies the default event for a component.">Especifica o evento padrão de um componente.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DefaultEventAttribute" />.</summary>
      <param name="name" vsli:raw="The name of the default event for the component this attribute is bound to.">O nome do evento padrão para o componente ao qual esse atributo é associado.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Especifica o valor padrão para o <see cref="T:System.ComponentModel.DefaultEventAttribute" />, que é <see langword="null" />. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;.">Retorna se o valor do objeto especificado é igual ao <see cref="T:System.ComponentModel.DefaultEventAttribute" /> atual.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">O objeto cuja igualdade de valor deve ser testada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do objeto especificado for igual do atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary vsli:raw="Gets the name of the default event for the component this attribute is bound to.">Obtém o nome do evento padrão para o componente ao qual esse atributo é associado.</summary>
      <returns vsli:raw="The name of the default event for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">O nome do evento padrão para o componente ao qual esse atributo é associado. O valor padrão é <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary vsli:raw="Specifies the default property for a component.">Especifica a propriedade padrão de um componente.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />.</summary>
      <param name="name" vsli:raw="The name of the default property for the component this attribute is bound to.">O nome da propriedade padrão para o componente ao qual esse atributo é associado.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Especifica o valor padrão para o <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />, que é <see langword="null" />. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;.">Retorna se o valor do objeto especificado é igual ao <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> atual.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">O objeto cuja igualdade de valor deve ser testada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do objeto especificado for igual do atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default property for the component this attribute is bound to.">Obtém o nome da propriedade padrão para o componente ao qual esse atributo é associado.</summary>
      <returns vsli:raw="The name of the default property for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">O nome da propriedade padrão para o componente ao qual esse atributo é associado. O valor padrão é <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner&quot; /&gt; event.">Fornece dados para o evento de <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />.</summary>
      <param name="oldDesigner" vsli:raw="The document that is losing activation.">O documento que está perdendo a ativação.</param>
      <param name="newDesigner" vsli:raw="The document that is gaining activation.">O documento que está ganhando a ativação.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary vsli:raw="Gets the document that is gaining activation.">Obtém o documento que está ganhando a ativação.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document gaining activation.">Um <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que representa o documento que obtém a ativação.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary vsli:raw="Gets the document that is losing activation.">Obtém o documento que está perdendo a ativação.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document losing activation.">Um <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que representa o documento que está perdendo a ativação.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged&quot; /&gt; event.">Representa o método que manipulará o evento de <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" /> .</summary>
      <param name="sender" vsli:raw="The source of the event.">A fonte do evento.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; that contains the event data.">Um <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary vsli:raw="The exception that is thrown when an attempt to check out a file that is checked into a source code management program is canceled or fails.">A exceção gerada quando uma tentativa de fazer check-out de um arquivo que é verificado em um programa de gerenciamento do código-fonte é cancelada ou falha.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with no associated message or error code.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> sem nenhuma mensagem nem código de erro associados.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class using the specified serialization data and context.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> usando o contexto e os dados de serialização especificados.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">O <see cref="T:System.Runtime.Serialization.SerializationInfo" /> a ser usado para desserialização.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">O destino a ser usado para desserialização.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> com a mensagem especificada.</summary>
      <param name="message" vsli:raw="A message describing the exception.">Uma mensagem que descreve a exceção.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified detailed description and the specified exception.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> com a descrição detalhada e a exceção especificadas.</summary>
      <param name="message" vsli:raw="A detailed description of the error.">Uma descrição detalhada do erro.</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">Uma referência à exceção interna que é a causa dessa exceção.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message and error code.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> com a mensagem e o código de erro especificados.</summary>
      <param name="message" vsli:raw="A message describing the exception.">Uma mensagem que descreve a exceção.</param>
      <param name="errorCode" vsli:raw="The error code to pass.">O código de erro para passar.</param>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class that specifies that the check out was canceled. This field is read-only.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> que especifica que o check-out foi cancelado. Este campo é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary vsli:raw="Represents a unique command identifier that consists of a numeric command ID and a GUID menu group identifier.">Representa um identificador de comando exclusivo que consiste em uma ID de comando numérica e em um identificador de grupo de menus do GUID.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; class using the specified menu group GUID and command ID number.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.CommandID" /> usando o GUID do grupo de menu e o número da ID de comando especificados.</summary>
      <param name="menuGroup" vsli:raw="The GUID of the group that this menu command belongs to.">O GUID do grupo ao qual este comando de menu pertence.</param>
      <param name="commandID" vsli:raw="The numeric identifier of this menu command.">O identificador numérico deste comando de menu.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; instances are equal.">Determina se duas instâncias <see cref="T:System.ComponentModel.Design.CommandID" /> são iguais.</summary>
      <param name="obj" vsli:raw="The object to compare.">O objeto a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is equivalent to this one; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o objeto especificado for equivalente a esse; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary vsli:raw="Serves as a hash function for a particular type.">Serve como uma função de hash para um tipo específico.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Um código hash do <see cref="T:System.Object" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary vsli:raw="Gets the GUID of the menu group that the menu command identified by this &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; belongs to.">Obtém o GUID do grupo de menu ao qual o comando de menu identificado por este <see cref="T:System.ComponentModel.Design.CommandID" /> pertence.</summary>
      <returns vsli:raw="The GUID of the command group for this command.">O GUID do grupo de comandos para este comando.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary vsli:raw="Gets the numeric command ID.">Obtém a ID de comando numérico.</summary>
      <returns vsli:raw="The command ID number.">O número de ID do comando.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current object.">Retorna um <see cref="T:System.String" /> que representa o objeto atual.</summary>
      <returns vsli:raw="A string that contains the command ID information, both the GUID and integer identifier.">Uma cadeia de caracteres que contém as informações de ID de comando, tanto o GUID quanto o identificador de inteiro.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event. This class cannot be inherited.">Fornece dados para o evento de <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> . Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />.</summary>
      <param name="component" vsli:raw="The component that was changed.">O componente que foi alterado.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that represents the member that was changed.">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que representa o membro que foi alterado.</param>
      <param name="oldValue" vsli:raw="The old value of the changed member.">O valor antigo do membro alterado.</param>
      <param name="newValue" vsli:raw="The new value of the changed member.">O novo valor do membro alterado.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary vsli:raw="Gets the component that was modified.">Obtém o componente que foi modificado.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the component that was modified.">Um <see cref="T:System.Object" /> que representa o componente que foi modificado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary vsli:raw="Gets the member that has been changed.">Obtém o membro que foi alterado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that indicates the member that has been changed.">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que indica o membro que foi alterado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary vsli:raw="Gets the new value of the changed member.">Obtém o novo valor do membro alterado.</summary>
      <returns vsli:raw="The new value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">O novo valor do membro alterado. Essa propriedade pode ser <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary vsli:raw="Gets the old value of the changed member.">Obtém o valor antigo do membro alterado.</summary>
      <returns vsli:raw="The old value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">O valor antigo do membro alterado. Essa propriedade pode ser <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">Representa o método que irá manipular um evento de <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> .</summary>
      <param name="sender" vsli:raw="The source of the event.">A fonte do evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; that contains the event data.">Um <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event. This class cannot be inherited.">Fornece dados para o evento de <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> . Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" />.</summary>
      <param name="component" vsli:raw="The component that is about to be changed.">O componente que está prestes a ser alterado.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member of the component that is about to be changed.">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que indica o membro do componente que está prestes a ser alterado.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary vsli:raw="Gets the component that is about to be changed or the component that is the parent container of the member that is about to be changed.">Obtém o componente que está prestes a ser alterado ou o componente que é o contêiner pai do membro que está prestes a ser alterado.</summary>
      <returns vsli:raw="The component that is about to have a member changed.">O componente que está prestes a ter um membro foi alterado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary vsli:raw="Gets the member that is about to be changed.">Obtém o membro que está prestes a ser alterado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member that is about to be changed, if known, or &lt;see langword=&quot;null&quot; /&gt; otherwise.">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que indica o membro que está prestes a ser alterado, se conhecido ou <see langword="null" /> de outra forma.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">Representa o método que irá manipular um evento de <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> .</summary>
      <param name="sender" vsli:raw="The source of the event.">A fonte do evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; event that contains the event data.">Um evento <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt; events.">Fornece dados para os eventos <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> e <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />.</summary>
      <param name="component" vsli:raw="The component that is the source of the event.">O componente que é a origem do evento.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary vsli:raw="Gets the component associated with the event.">Obtém o componente associado ao evento.</summary>
      <returns vsli:raw="The component associated with the event.">O componente associado ao evento.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt; events raised for component-level events.">Representa o método que manipulará os eventos <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> e <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> gerados para eventos de nível de componente.</summary>
      <param name="sender" vsli:raw="The source of the event.">A fonte do evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; that contains the event data.">Um <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">Fornece dados para o evento de <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />.</summary>
      <param name="component" vsli:raw="The component to be renamed.">O componente a ser renomeado.</param>
      <param name="oldName" vsli:raw="The old name of the component.">O nome antigo do componente.</param>
      <param name="newName" vsli:raw="The new name of the component.">O novo nome do componente.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary vsli:raw="Gets the component that is being renamed.">Obtém o componente que está sendo renomeado.</summary>
      <returns vsli:raw="The component that is being renamed.">O componente que está sendo renomeado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary vsli:raw="Gets the name of the component after the rename event.">Obtém o nome do componente após o evento de renomeação.</summary>
      <returns vsli:raw="The name of the component after the rename event.">O nome do componente após o evento de renomeação.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary vsli:raw="Gets the name of the component before the rename event.">Obtém o nome do componente antes o evento de renomeação.</summary>
      <returns vsli:raw="The previous name of the component.">O nome anterior do componente.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">Representa o método que irá manipular um evento de <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> .</summary>
      <param name="sender" vsli:raw="The source of the event.">A fonte do evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; that contains the event data.">Um <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary vsli:raw="Represents a collection of designers.">Representa uma coleção de designers.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified set of designers.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerCollection" /> que contém o conjunto de designers especificado.</summary>
      <param name="designers" vsli:raw="A list that contains the collection of designers to add.">Uma lista que contém a coleção de designers a serem adicionados.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified designers.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerCollection" /> que contém os designers especificados.</summary>
      <param name="designers" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; objects to store.">Uma matriz de objetos <see cref="T:System.ComponentModel.Design.IDesignerHost" /> a ser armazenada.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary vsli:raw="Gets the number of designers in the collection.">Obtém o número de designers na coleção.</summary>
      <returns vsli:raw="The number of designers in the collection.">O número de designers na coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">Obtém um novo enumerador para esta coleção.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">Um <see cref="T:System.Collections.IEnumerator" /> que enumera a coleção.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the designer at the specified index.">Obtém o designer no índice especificado.</summary>
      <param name="index" vsli:raw="The index of the designer to return.">O índice do designer a ser retornado.</param>
      <returns vsli:raw="The designer at the specified index.">O designer no índice especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia os elementos da coleção para um <see cref="T:System.Array" />, começando em um índice <see cref="T:System.Array" /> específico.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados da coleção. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Obtém o número de elementos contidos na coleção.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">O número de elementos contidos na coleção.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Obtém um objeto que pode ser usado para sincronizar o acesso à coleção.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Um objeto que pode ser usado para sincronizar o acesso à coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">Obtém um novo enumerador para esta coleção.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">Um <see cref="T:System.Collections.IEnumerator" /> que enumera a coleção.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events.">Fornece dados para os eventos de <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> e de <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />.</summary>
      <param name="host" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">O <see cref="T:System.ComponentModel.Design.IDesignerHost" /> do documento.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary vsli:raw="Gets the host of the document.">Obtém o host do documento.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">O <see cref="T:System.ComponentModel.Design.IDesignerHost" /> do documento.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events that are raised when a document is created or disposed of.">Representa o método que manipulará os eventos <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> e <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> que são gerados quando um documento é criado ou descartado.</summary>
      <param name="sender" vsli:raw="The source of the event.">A fonte do evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; that contains the event data.">Um <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary vsli:raw="Provides a base class for getting and setting option values for a designer.">Fornece uma classe base para obter e configurar valores de opção para um designer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerOptionService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name and adds it to the given parent.">Cria uma nova <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> com o nome fornecido e adiciona-a ao pai especificado.</summary>
      <param name="parent" vsli:raw="The parent designer option collection. All collections have a parent except the root object collection.">A coleção de opções de designer pai. Todas as coleções tem um pai, exceto a coleção de objetos raiz.</param>
      <param name="name" vsli:raw="The name of this collection.">O nome desta coleção.</param>
      <param name="value" vsli:raw="The object providing properties for this collection. Can be &lt;see langword=&quot;null&quot; /&gt; if the collection should not provide any properties.">O objeto que fornece propriedades para esta coleção. Pode ser <see langword="null" /> se a coleção não deve fornecer nenhuma propriedade.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name.">Uma nova <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> com o nome fornecido.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;parent&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="parent" /> ou <paramref name="name" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is an empty string.">
        <paramref name="name" /> é uma cadeia de caracteres vazia.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary vsli:raw="Contains a collection of designer options. This class cannot be inherited.">Contém uma coleção de opções de designer. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to a compatible one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified index of the target array.">Copia toda a coleção para uma <see cref="T:System.Array" /> unidimensional compatível, começando no índice especificado da matriz de destino.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the collection. The &lt;paramref name=&quot;array&quot; /&gt; must have zero-based indexing.">A <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados da coleção. O <paramref name="array" /> deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary vsli:raw="Gets the number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">Obtém o número de coleções de opção filho contidas por este <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns vsli:raw="The number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">O número de coleções de opções filho <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> que isso contém.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">Retorna um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar por essa coleção.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar por essa coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Returns the index of the first occurrence of a given value in a range of this collection.">Retorna o índice da primeira ocorrência de um valor fornecido em um intervalo desta coleção.</summary>
      <param name="value" vsli:raw="The object to locate in the collection.">O objeto a ser localizado na coleção.</param>
      <returns vsli:raw="The index of the first occurrence of value within the entire collection, if found; otherwise, the lower bound of the collection minus 1.">O índice da primeira ocorrência do valor em toda a coleção, se encontrado; caso contrário, o limite inferior da coleção menos 1.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the child collection at the given index.">Obtém a coleção filho no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the child collection to get.">O índice baseado em zero da coleção filho a ser obtida.</param>
      <returns vsli:raw="The child collection at the specified index.">A coleção filho no índice especificado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary vsli:raw="Gets the child collection at the given name.">Obtém a coleção filho no nome especificado.</summary>
      <param name="name" vsli:raw="The name of the child collection.">O nome da coleção filho.</param>
      <returns vsli:raw="The child collection with the name specified by the &lt;paramref name=&quot;name&quot; /&gt; parameter, or &lt;see langword=&quot;null&quot; /&gt; if the name is not found.">A coleção filho com o nome especificado pelo <paramref name="name" /> parâmetro ou <see langword="null" /> se o nome não for encontrado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary vsli:raw="Gets the name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Obtém o nome deste <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns vsli:raw="The name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">O nome deste <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary vsli:raw="Gets the parent collection object.">Obtém o objeto de coleção pai.</summary>
      <returns vsli:raw="The parent collection object, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">O objeto da coleção pai ou <see langword="null" /> , se não houver nenhum pai.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary vsli:raw="Gets the collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">Obtém a coleção de propriedades oferecidas por este <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, juntamente com todos os seus filhos.</summary>
      <returns vsli:raw="The collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">A coleção de propriedades oferecida por <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />isso, junto com todos os seus filhos.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary vsli:raw="Displays a dialog box user interface (UI) with which the user can configure the options in this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Exibe uma IU (interface do usuário) de caixa de diálogo com a qual o usuário pode configurar as opções neste <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box can be displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a caixa de diálogo pode ser exibida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized and, therefore, thread safe.">Obtém um valor que indica se o acesso à coleção é sincronizado e, portanto, thread-safe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o acesso à coleção for sincronizado; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Obtém um objeto que pode ser usado para sincronizar o acesso à coleção.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Um objeto que pode ser usado para sincronizar o acesso à coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Adiciona um item ao <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">O <see cref="T:System.Object" /> para adicionar ao <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="The position into which the new element was inserted.">A posição na qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">Remove todos os itens da coleção.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">Determina se a coleção contém um valor específico.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">O <see cref="T:System.Object" /> a ser localizado na coleção</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Object" /> for encontrado na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">Determina o índice de um item específico na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">O <see cref="T:System.Object" /> a ser localizado na coleção.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">O índice de <paramref name="value" /> se encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at the specified index.">Insere um item na coleção no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">O índice de base zero no qual o <paramref name="value" /> deve ser inserido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">O <see cref="T:System.Object" /> a ser inserido na coleção.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Obtém um valor que indica se a coleção tem um tamanho fixo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />se a coleção tiver um tamanho fixo; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Obtém um valor que indica se a coleção é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Obtém ou define o elemento no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">O índice com base em zero do elemento a ser obtido ou definido.</param>
      <returns vsli:raw="The element at the specified index.">O elemento no índice especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">Remove a primeira ocorrência de um objeto específico da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">O <see cref="T:System.Object" /> a ser removido da coleção.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the collection item at the specified index.">Remove o item da coleção no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">O índice com base em zero do item a ser removido.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary vsli:raw="Gets the options collection for this service.">Obtém a coleção de opções para este serviço.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; populated with available designer options.">Um <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> populado com opções de designer disponíveis.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Populates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Popula uma <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <param name="options" vsli:raw="The collection to populate.">A coleção a ser populada.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary vsli:raw="Shows the options dialog box for the given object.">Mostra a caixa de diálogo de opções para o objeto fornecido.</summary>
      <param name="options" vsli:raw="The options collection containing the object to be invoked.">A coleção de opções que contém o objeto a ser invocado.</param>
      <param name="optionObject" vsli:raw="The actual options object.">O objeto de opções propriamente dito.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box is shown; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a caixa de diálogo for exibida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of an option defined in this package.">Obtém o valor de uma opção definida neste pacote.</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">A página à qual a opção está associada.</param>
      <param name="valueName" vsli:raw="The name of the option value.">O nome do valor de opção.</param>
      <returns vsli:raw="The value of the option named &lt;paramref name=&quot;valueName&quot; /&gt;.">O valor da opção nomeada <paramref name="valueName" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="pageName" /> ou <paramref name="valueName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of an option defined in this package.">Define o valor de uma opção definida neste pacote.</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">A página à qual a opção está associada</param>
      <param name="valueName" vsli:raw="The name of the option value.">O nome do valor de opção.</param>
      <param name="value" vsli:raw="The value of the option.">O valor da opção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="pageName" /> ou <paramref name="valueName" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary vsli:raw="Provides a way to group a series of design-time actions to improve performance and enable most types of changes to be undone.">Fornece uma maneira de agrupar uma série de ações de tempo de design para melhorar o desempenho e habilitar a maioria dos tipos de alterações a serem desfeitas.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class with no description.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> sem nenhuma descrição.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class using the specified transaction description.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> usando a descrição de transação especificada.</summary>
      <param name="description" vsli:raw="A description for this transaction.">Uma descrição para esta transação.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary vsli:raw="Cancels the transaction and attempts to roll back the changes made by the events of the transaction.">Cancela a transação e tenta reverter as alterações feitas pelos eventos da transação.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary vsli:raw="Gets a value indicating whether the transaction was canceled.">Obtém um valor que indica se a transação foi cancelada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was canceled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a transação foi cancelada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary vsli:raw="Commits this transaction.">Confirma a transação.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary vsli:raw="Gets a value indicating whether the transaction was committed.">Obtém um valor que indica se a transação foi confirmada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was committed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a transação foi confirmada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary vsli:raw="Gets a description for the transaction.">Obtém uma descrição para a transação.</summary>
      <returns vsli:raw="A description for the transaction.">Uma descrição para a transação.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; and optionally releases the managed resources.">Libera os recursos não gerenciados usados pelo <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> e opcionalmente libera os recursos gerenciados.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary vsli:raw="Releases the resources associated with this object. This override commits this transaction if it was not already committed.">Libera todos os recursos do sistema operacional associados a este objeto. Esta substituição confirma esta transação se ela ainda não foi confirmada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Cancel&quot; /&gt; event.">Aciona o evento <see langword="Cancel" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary vsli:raw="Performs the actual work of committing a transaction.">Realiza o real trabalho de confirmar uma transação.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;.">Libera todos os recursos usados pelo <see cref="T:System.ComponentModel.Design.DesignerTransaction" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events.">Fornece dados para os eventos de <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> e de <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class, using the specified value that indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> usando o valor especificado que indica se o designer chamou <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> na transação.</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">Um valor que indica se a transação foi confirmada.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />.</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">Um valor que indica se a transação foi confirmada.</param>
      <param name="lastTransaction" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esta for a última transação a fechar; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary vsli:raw="Gets a value indicating whether this is the last transaction to close.">Obtém um valor que indica se esta é a última transação a ser fechada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, se esta for a última transação a ser fechada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary vsli:raw="Indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">Indica se o designer chamou <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> na transação.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o designer chamou <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> na transação; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events of a designer.">Representa o método que manipula os eventos <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> e <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> de um designer.</summary>
      <param name="sender" vsli:raw="The source of the event.">A fonte do evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; that contains the event data.">Um <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary vsli:raw="Represents a verb that can be invoked from a designer.">Representa um verbo que pode ser invocado por meio de um designer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">O texto do comando de menu que é mostrado ao usuário.</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">O manipulador de eventos que executa as ações do verbo.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">O texto do comando de menu que é mostrado ao usuário.</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">O manipulador de eventos que executa as ações do verbo.</param>
      <param name="startCommandID" vsli:raw="The starting command ID for this verb. By default, the designer architecture sets aside a range of command IDs for verbs. You can override this by providing a custom command ID.">A ID de comando inicial para esse verbo. Por padrão, a arquitetura de designer reserva um intervalo de IDs de comando para verbos. Você pode substituir isso fornecendo uma ID de comando personalizada.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary vsli:raw="Gets or sets the description of the menu item for the verb.">Obtém ou define a descrição do item de menu para o verbo.</summary>
      <returns vsli:raw="A string describing the menu item.">Uma cadeia de caracteres que descreve o item de menu.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary vsli:raw="Gets the text description for the verb command on the menu.">Obtém a descrição de texto para o comando verbo no menu.</summary>
      <returns vsli:raw="A description for the verb command.">Uma descrição para o comando de verbo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary vsli:raw="Overrides &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt;.">Substitui <see cref="M:System.Object.ToString" />.</summary>
      <returns vsli:raw="The verb's text, or an empty string (&quot;&quot;) if the text field is empty.">O texto do verbo ou uma cadeia de caracteres vazia ("") se o campo de texto está vazio.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.ComponentModel.Design.DesignerVerb" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class using the specified array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> usando a matriz de objetos <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array that indicates the verbs to contain within the collection.">Uma matriz <see cref="T:System.ComponentModel.Design.DesignerVerb" /> que indica os verbos a serem contidos dentro da coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to the collection.">Adiciona o <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificado à coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add to the collection.">O <see cref="T:System.ComponentModel.Design.DesignerVerb" /> a adicionar à coleção.</param>
      <returns vsli:raw="The index in the collection at which the verb was added.">O índice na coleção no qual o verbo foi adicionado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Adds the specified set of designer verbs to the collection.">Adiciona o conjunto especificado de verbos do designer à coleção.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects to add to the collection.">Uma matriz de objetos <see cref="T:System.ComponentModel.Design.DesignerVerb" /> a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary vsli:raw="Adds the specified collection of designer verbs to the collection.">Adiciona a coleção especificada de verbos do designer à coleção.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; to add to the collection.">Um <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> a ser adicionado à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets a value indicating whether the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; exists in the collection.">Obtém um valor que indica se o <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificado existe na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to search for in the collection.">O <see cref="T:System.ComponentModel.Design.DesignerVerb" /> a ser pesquisado na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object exists in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o objeto especificado existe na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary vsli:raw="Copies the collection members to the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array beginning at the specified destination index.">Copia os membros da coleção para a matriz <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificada, começando no índice de destino especificado.</summary>
      <param name="array" vsli:raw="The array to copy collection members to.">A matriz para a qual copiar membros da coleção.</param>
      <param name="index" vsli:raw="The destination index to begin copying to.">O índice de destino no qual iniciar a cópia.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">Obtém o índice do <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; whose index to get in the collection.">O <see cref="T:System.ComponentModel.Design.DesignerVerb" /> cujo índice obter na coleção.</param>
      <returns vsli:raw="The index of the specified object if it is found in the list; otherwise, -1.">O índice do objeto especificado, se encontrado, na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">Insere o <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificado no índice especificado.</summary>
      <param name="index" vsli:raw="The index in the collection at which to insert the verb.">O índice na coleção no qual inserir o verbo.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to insert in the collection.">O <see cref="T:System.ComponentModel.Design.DesignerVerb" /> a ser inserido na coleção.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">Obtém ou define o <see cref="T:System.ComponentModel.Design.DesignerVerb" /> no índice especificado.</summary>
      <param name="index" vsli:raw="The index at which to get or set the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">O índice no qual obter ou definir o <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at each valid index in the collection.">A <see cref="T:System.ComponentModel.Design.DesignerVerb" /> em cada índice válido na coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>Aciona o evento <see langword="Clear" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>Aciona o evento <see langword="Insert" />.</summary>
      <param name="index">O índice no qual inserir um item.</param>
      <param name="value">O objeto a ser inserido.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>Aciona o evento <see langword="Remove" />.</summary>
      <param name="index">O índice no qual remover o item.</param>
      <param name="value">O objeto a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Aciona o evento <see langword="Set" />.</summary>
      <param name="index">O índice no qual definir o item.</param>
      <param name="oldValue">O objeto antigo.</param>
      <param name="newValue">O novo objeto.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Validate&quot; /&gt; event.">Aciona o evento <see langword="Validate" />.</summary>
      <param name="value" vsli:raw="The object to validate.">O objeto a ser validado.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; from the collection.">Remove o <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificado da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove from the collection.">O <see cref="T:System.ComponentModel.Design.DesignerVerb" /> a ser removido da coleção.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary vsli:raw="Represents a design-time license context that can support a license provider at design time.">Representa um contexto de licença de tempo de design que pode dar suporte a um provedor de licença em tempo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="Gets a saved license key.">Obtém uma chave de licença salva.</summary>
      <param name="type" vsli:raw="The type of the license key.">O tipo da chave de licença.</param>
      <param name="resourceAssembly" vsli:raw="The assembly to get the key from.">O assembly do qual obter a chave.</param>
      <returns vsli:raw="The saved license key that matches the specified type.">A chave de licença salva que corresponde ao tipo especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="Sets a saved license key.">Define uma chave de licença salva.</summary>
      <param name="type" vsli:raw="The type of the license key.">O tipo da chave de licença.</param>
      <param name="key" vsli:raw="The license key.">A chave de licença.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary vsli:raw="Gets the license usage mode.">Obtém o modo de uso da licença.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; indicating the licensing mode for the context.">Um <see cref="T:System.ComponentModel.LicenseUsageMode" /> que indica o modo de licenciamento para o contexto.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary vsli:raw="Provides support for design-time license context serialization.">Fornece suporte para serialização de contexto de licença de tempo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary vsli:raw="Serializes the licenses within the specified design-time license context using the specified key and output stream.">Serializa as licenças de dentro do contexto de licença de tempo de design especificado usando a chave e o fluxo de saída especificados.</summary>
      <param name="o" vsli:raw="The stream to output to.">O fluxo para o qual gerar saída.</param>
      <param name="cryptoKey" vsli:raw="The key to use for encryption.">A chave a ser usada para criptografia.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; indicating the license context.">Um <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> indicando o contexto da licença.</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary vsli:raw="Defines identifiers that indicate information about the context in which a request for Help information originated.">Define os identificadores de indicam informações sobre o contexto no qual uma solicitação para obter Informações da Ajuda foi originada.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary vsli:raw="A general context.">Um contexto geral.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary vsli:raw="A selection.">Uma seleção.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary vsli:raw="A tool window selection.">Uma seleção de janela de ferramentas.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary vsli:raw="A window.">Uma janela.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary vsli:raw="Specifies the context keyword for a class or member. This class cannot be inherited.">Especifica a palavra-chave de contexto de uma classe ou membro. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
      <param name="keyword" vsli:raw="The Help keyword value.">O valor da palavra-chave Ajuda.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;keyword&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyword" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class from the given type.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> do tipo fornecido.</summary>
      <param name="t" vsli:raw="The type from which the Help keyword will be taken.">O tipo do qual a palavra-chave Ajuda será obtida.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> é <see langword="null" />.</exception>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;. This field is read-only.">Representa o valor padrão para <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />. Este campo é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; instances are equal.">Determina se duas instâncias <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> são iguais.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">O <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> a ser comparado com o <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> especificado for igual ao <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">Um código hash do <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary vsli:raw="Gets the Help keyword supplied by this attribute.">Obtém a palavra-chave Ajuda fornecida por este atributo.</summary>
      <returns vsli:raw="The Help keyword supplied by this attribute.">A palavra-chave Help fornecida por este atributo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines whether the Help keyword is &lt;see langword=&quot;null&quot; /&gt;.">Determina se a palavra-chave da Ajuda é <see langword="null" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the Help keyword is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a palavra-chave Ajuda for <see langword="null" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary vsli:raw="Defines identifiers that indicate the type of a Help keyword.">Define os identificadores que indicam o tipo de uma palavra-chave de ajuda.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary vsli:raw="A keyword that F1 was pressed to request help about.">Uma palavra-chave sobre a qual solicitou-se ajuda pressionando a tecla F1.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary vsli:raw="A filter keyword.">Uma palavra-chave de filtro.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary vsli:raw="A general keyword.">Uma palavra-chave geral.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary vsli:raw="Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; or &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">Fornece uma interface para adicionar e remover os manipuladores de eventos para eventos que adicionam, alteram, removem ou renomeiam componentes e fornecem métodos para gerar um evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> ou <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary vsli:raw="Occurs when a component has been added.">Ocorre quando um componente foi adicionado.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary vsli:raw="Occurs when a component is in the process of being added.">Ocorre quando um componente está no processo de ser adicionado.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary vsli:raw="Occurs when a component has been changed.">Ocorre quando um componente foi alterado.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary vsli:raw="Occurs when a component is in the process of being changed.">Ocorre quando um componente está no processo de ser alterado.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary vsli:raw="Occurs when a component has been removed.">Ocorre quando um componente foi removido.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary vsli:raw="Occurs when a component is in the process of being removed.">Ocorre quando um componente está no processo de ser removido.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary vsli:raw="Occurs when a component is renamed.">Ocorre quando um componente é renomeado.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Announces to the component change service that a particular component has changed.">Anuncia ao serviço de alteração de componente que um componente específico foi alterado.</summary>
      <param name="component" vsli:raw="The component that has changed.">O componente que mudou.</param>
      <param name="member" vsli:raw="The member that has changed. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">O membro que foi alterado. Isso será <see langword="null" /> se essa alteração não estiver relacionada a um membro único.</param>
      <param name="oldValue" vsli:raw="The old value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">O valor antigo do membro. Isso será válido somente se o membro não for <see langword="null" />.</param>
      <param name="newValue" vsli:raw="The new value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">O novo valor do membro. Isso será válido somente se o membro não for <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Announces to the component change service that a particular component is changing.">Anuncia ao serviço de alteração de componente que um componente específico está sendo alterado.</summary>
      <param name="component" vsli:raw="The component that is about to change.">O componente que está prestes a mudar.</param>
      <param name="member" vsli:raw="The member that is changing. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">O membro que está sendo alterado. Isso será <see langword="null" /> se essa alteração não estiver relacionada a um membro único.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary vsli:raw="Enables enumeration of components at design time.">Habilita a enumeração de componentes em tempo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary vsli:raw="Gets the list of available component types.">Obtém a lista de tipos de componentes disponíveis.</summary>
      <param name="designerHost" vsli:raw="The designer host providing design-time services. Can be &lt;see langword=&quot;null&quot; /&gt;.">O host de designer que fornece serviços de tempo de design. Pode ser <see langword="null" />.</param>
      <param name="baseType" vsli:raw="The base type specifying the components to retrieve. Can be &lt;see langword=&quot;null&quot; /&gt;.">O tipo base especificando os componentes a serem recuperados. Pode ser <see langword="null" />.</param>
      <returns vsli:raw="The list of available component types.">A lista de tipos de componentes disponíveis.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary vsli:raw="Provides a set of recommended default values during component creation.">Fornece um conjunto de valores padrão recomendados durante a criação do componente.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Restores an instance of a component to its default state.">Restaura uma instância de um componente para seu estado padrão.</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to reset the component's state.">Um dicionário de valores de propriedade padrão, que são pares nome/valor, com os quais redefinir o estado do componente.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Initializes a new component using a set of recommended values.">Inicializa um novo componente usando um conjunto de valores recomendados.</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to initialize the component's state.">Um dicionário de valores de propriedade padrão, que são pares nome/valor, com os quais inicializar o estado do componente.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary vsli:raw="Provides the basic framework for building a custom designer.">Fornece a estrutura básica para a criação de um designer personalizado.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary vsli:raw="Gets the base component that this designer is designing.">Obtém o componente de base que este designer está criando.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; indicating the base component that this designer is designing.">Um <see cref="T:System.ComponentModel.IComponent" /> que indica o componente base que este designer está criando.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary vsli:raw="Performs the default action for this designer.">Executa a ação padrão para este designer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes the designer with the specified component.">Inicializa o designer com o componente especificado.</summary>
      <param name="component" vsli:raw="The component to associate with this designer.">O componente a associar a este designer.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary vsli:raw="Gets a collection of the design-time verbs supported by the designer.">Obtém uma coleção dos verbos em tempo de design compatíveis com o designer.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the verbs supported by the designer, or &lt;see langword=&quot;null&quot; /&gt; if the component has no verbs.">Um <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> que contém os verbos com suporte do designer ou <see langword="null" /> se o componente não tem verbos.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary vsli:raw="Provides event notifications when root designers are added and removed, when a selected component changes, and when the current root designer changes.">Fornece notificações de eventos quando os designers raiz são adicionados e removidos, quando um componente selecionado muda e quando o designer raiz atual muda.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary vsli:raw="Gets the root designer for the currently active document.">Obtém o designer raiz para o documento ativo no momento.</summary>
      <returns vsli:raw="The currently active document, or &lt;see langword=&quot;null&quot; /&gt; if there is no active document.">O documento ativo no momento ou <see langword="null" /> se não houver nenhum documento ativo.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary vsli:raw="Occurs when the current root designer changes.">Ocorre quando o designer raiz atual é alterado.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary vsli:raw="Occurs when a root designer is created.">Ocorre quando um designer raiz é criado.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary vsli:raw="Occurs when a root designer for a document is disposed.">Ocorre quando um designer raiz para um documento é descartado.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary vsli:raw="Gets a collection of root designers for design documents that are currently active in the development environment.">Obtém uma coleção de designers de raiz para documentos de design que estão atualmente ativos no ambiente de desenvolvimento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; containing the root designers that have been created and not yet disposed.">Um <see cref="T:System.ComponentModel.Design.DesignerCollection" /> que contém os designers raiz que foram criados e ainda não foram descartados.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary vsli:raw="Occurs when the current design-view selection changes.">Ocorre quando a seleção de exibição de design atual é alterada.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary vsli:raw="Provides an interface that enables a designer to access and filter the dictionaries of a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that stores the property, attribute, and event descriptors that a component designer can expose to the design-time environment.">Fornece uma interface que permite que um designer acesse e filtre os dicionários de um <see cref="T:System.ComponentModel.TypeDescriptor" /> que armazena os descritores de evento, atributo e propriedade que um componente de designer pode expor para o ambiente em tempo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Quando substituído em uma classe derivada, permite que um designer altere ou remova itens do conjunto de atributos que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">Os objetos <see cref="T:System.Attribute" /> para a classe do componente. As chaves no dicionário de atributos são os valores <see cref="P:System.Attribute.TypeId" /> dos atributos.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Quando substituído em uma classe derivada, permite que um designer altere ou remova itens do conjunto de eventos que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">Os objetos <see cref="T:System.ComponentModel.EventDescriptor" /> que representam os eventos da classe do componente. As chaves no dicionário de eventos são nomes de evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Quando substituído em uma classe derivada, permite que um designer altere ou remova itens do conjunto de propriedades que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">Os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representam as propriedades da classe do componente. As chaves no dicionário de propriedades são nomes de propriedade.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Quando substituído em uma classe derivada, permite que um designer adicione itens ao conjunto de atributos que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">Os objetos <see cref="T:System.Attribute" /> para a classe do componente. As chaves no dicionário de atributos são os valores <see cref="P:System.Attribute.TypeId" /> dos atributos.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Quando substituído em uma classe derivada, permite que um designer adicione itens ao conjunto de eventos que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">Os objetos <see cref="T:System.ComponentModel.EventDescriptor" /> que representam os eventos da classe do componente. As chaves no dicionário de eventos são nomes de evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Quando substituído em uma classe derivada, permite que um designer adicione itens ao conjunto de propriedades que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">Os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representam as propriedades da classe do componente. As chaves no dicionário de propriedades são nomes de propriedade.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary vsli:raw="Provides an interface for managing designer transactions and components.">Fornece uma interface para gerenciar componentes e transações de designer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary vsli:raw="Activates the designer that this host is hosting.">Ativa o designer que este host está hospedando.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary vsli:raw="Occurs when this designer is activated.">Ocorre quando esse designer é ativado.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary vsli:raw="Gets the container for this designer host.">Obtém o contêiner para este host de designer.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; for this host.">O <see cref="T:System.ComponentModel.IContainer" /> para este host.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary vsli:raw="Creates a component of the specified type and adds it to the design document.">Cria um componente do tipo especificado e o adiciona ao documento de design.</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">O tipo do componente a ser criado.</param>
      <returns vsli:raw="The newly created component.">O componente recém-criado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary vsli:raw="Creates a component of the specified type and name, and adds it to the design document.">Cria um componente do tipo e nome especificados e o adiciona ao documento de design.</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">O tipo do componente a ser criado.</param>
      <param name="name" vsli:raw="The name for the component.">O nome do componente.</param>
      <returns vsli:raw="The newly created component.">O componente recém-criado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality.">Cria um <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> que pode encapsular sequências de eventos para melhorar o desempenho e habilitar desfazer e refazer a funcionalidade de suporte.</summary>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you complete the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">Uma nova instância de <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. Quando você concluir as etapas na sua transação, deverá chamar <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> neste objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality, using the specified transaction description.">Cria um <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> que pode encapsular sequências de eventos para melhorar o desempenho e habilitar a funcionalidade de suporte de desfazer e refazer, usando a descrição da transação especificada.</summary>
      <param name="description" vsli:raw="A title or description for the newly created transaction.">Um título ou uma descrição para a transação recém-criada.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you have completed the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">Um novo <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. Quando você tiver concluído as etapas na sua transação, deverá chamar <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> neste objeto.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary vsli:raw="Occurs when this designer is deactivated.">Ocorre quando esse designer é desativado.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary vsli:raw="Destroys the specified component and removes it from the designer container.">Destrói o componente especificado e remove-o do contêiner de designer.</summary>
      <param name="component" vsli:raw="The component to destroy.">O componente a destruir.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the designer instance that contains the specified component.">Obtém a instância do designer que contém o componente especificado.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to retrieve the designer for.">O <see cref="T:System.ComponentModel.IComponent" /> para o qual recuperar o designer.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if there is no designer for the specified component.">Um <see cref="T:System.ComponentModel.Design.IDesigner" /> ou <see langword="null" /> se não houver nenhum designer para o componente especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary vsli:raw="Gets an instance of the specified, fully qualified type name.">Obtém uma instância do nome do tipo totalmente qualificado especificado.</summary>
      <param name="typeName" vsli:raw="The name of the type to load.">O nome do tipo a ser carregado.</param>
      <returns vsli:raw="The type object for the specified type name, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be found.">O objeto de tipo para o nome do tipo especificado ou <see langword="null" />, se não for possível localizar o tipo.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently in a transaction.">Obtém um valor que indica se o host do designer está atualmente em uma transação.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a transaction is in progress; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />se uma transação estiver em andamento; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary vsli:raw="Occurs when this designer completes loading its document.">Ocorre quando este designer termina de carregar seu documento.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently loading the document.">Obtém um valor que indica se o host de designer está carregando o documento no momento.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer host is currently loading the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o host do designer estiver carregando o documento no momento; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary vsli:raw="Gets the instance of the base class used as the root component for the current design.">Obtém a instância da classe base usada como o componente raiz para o design atual.</summary>
      <returns vsli:raw="The instance of the root component class.">A instância da classe de componente raiz.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary vsli:raw="Gets the fully qualified name of the class being designed.">Obtém o nome totalmente qualificado da classe que está sendo criada.</summary>
      <returns vsli:raw="The fully qualified name of the base component class.">O nome totalmente qualificado da classe de componente base.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; event.">Adiciona um manipulador de eventos para o evento <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; event.">Adiciona um manipulador de eventos para o evento <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary vsli:raw="Gets the description of the current transaction.">Obtém a descrição da transação atual.</summary>
      <returns vsli:raw="A description of the current transaction.">Uma descrição da transação atual.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpened&quot; /&gt; event.">Adiciona um manipulador de eventos para o evento <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpening&quot; /&gt; event.">Adiciona um manipulador de eventos para o evento <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary vsli:raw="Specifies methods for the designer host to report on the state of transactions.">Especifica os métodos para o host de designer relatar o estado de transações.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is closing a transaction.">Obtém um valor que indica se o host do designer está encerrando uma transação.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is closing a transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o designer estiver fechando uma transação; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary vsli:raw="Provides access to the designer options located on the Tools menu under the Options command in the Visual Studio development environment.">Fornece acesso às opções de designer localizadas no menu Ferramentas no comando Opções no ambiente de desenvolvimento do Visual Studio.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of the specified Windows Forms Designer option.">Obtém o valor da opção de Designer de Formulários do Windows especificada.</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">O nome da página que define a opção.</param>
      <param name="valueName" vsli:raw="The name of the option property.">O nome da propriedade de opção.</param>
      <returns vsli:raw="The value of the specified option.">O valor da opção especificada.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of the specified Windows Forms Designer option.">Define o valor da opção do Designer de Formulários do Windows especificada.</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">O nome da página que define a opção.</param>
      <param name="valueName" vsli:raw="The name of the option property.">O nome da propriedade de opção.</param>
      <param name="value" vsli:raw="The new value.">O novo valor.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary vsli:raw="Provides a basic, component site-specific, key-value pair dictionary through a service that a designer can use to store user-defined data.">Fornece um dicionário básico de par chave-valor específico do site do componente por meio de um serviço que um designer pode usar para armazenar os dados definidos pelo usuário.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary vsli:raw="Gets the key corresponding to the specified value.">Obtém a chave correspondente ao valor especificado.</summary>
      <param name="value" vsli:raw="The value to look up in the dictionary.">O valor a pesquisar no dicionário.</param>
      <returns vsli:raw="The associated key, or &lt;see langword=&quot;null&quot; /&gt; if no key exists.">A chave associada ou <see langword="null" />, se não existir nenhuma chave.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary vsli:raw="Gets the value corresponding to the specified key.">Obtém o valor correspondente à chave especificada.</summary>
      <param name="key" vsli:raw="The key to look up the value for.">A chave para a qual pesquisar o valor.</param>
      <returns vsli:raw="The associated value, or &lt;see langword=&quot;null&quot; /&gt; if no value exists.">O valor associado ou <see langword="null" />, se não existir nenhum valor.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary vsli:raw="Sets the specified key-value pair.">Define o par chave-valor especificado.</summary>
      <param name="key" vsli:raw="An object to use as the key to associate the value with.">Um objeto a ser usado como a chave à qual associar o valor.</param>
      <param name="value" vsli:raw="The value to store.">O valor a ser armazenado.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary vsli:raw="Provides a service for registering event handlers for component events.">Fornece um serviço para o registro de manipuladores de eventos para eventos do componente.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Creates a unique name for an event-handler method for the specified component and event.">Cria um nome exclusivo para um método do manipulador de eventos para o componente e o evento especificados.</summary>
      <param name="component" vsli:raw="The component instance the event is connected to.">A instância do componente à qual o evento está conectado.</param>
      <param name="e" vsli:raw="The event to create a name for.">O evento para o qual um nome será criado.</param>
      <returns vsli:raw="The recommended name for the event-handler method for this event.">O nome recomendado para o método de manipulador de eventos para esse evento.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Gets a collection of event-handler methods that have a method signature compatible with the specified event.">Obtém uma coleção de métodos de manipulador de eventos que têm uma assinatura de método compatível com o evento especificado.</summary>
      <param name="e" vsli:raw="The event to get the compatible event-handler methods for.">O evento para o qual obter os métodos do manipulador de eventos compatível.</param>
      <returns vsli:raw="A collection of strings.">Uma coleção de cadeias de caracteres.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the specified property descriptor represents, if it represents an event.">Obtém um <see cref="T:System.ComponentModel.EventDescriptor" /> para o evento que o descritor de propriedade especificado representa, se ele representar um evento.</summary>
      <param name="property" vsli:raw="The property that represents an event.">A propriedade que representa um evento.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the property represents, or &lt;see langword=&quot;null&quot; /&gt; if the property does not represent an event.">Um <see cref="T:System.ComponentModel.EventDescriptor" /> para o evento que a propriedade representa ou <see langword="null" /> se a propriedade não representa um evento.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary vsli:raw="Converts a set of event descriptors to a set of property descriptors.">Converte um conjunto de descritores de eventos em um conjunto de descritores de propriedades.</summary>
      <param name="events" vsli:raw="The events to convert to properties.">Os eventos a serem convertidos em propriedades.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that describe the event set.">Uma matriz de objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> que descreve o conjunto de eventos.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Converts a single event descriptor to a property descriptor.">Converte um único descritor de eventos em um descritor de propriedades.</summary>
      <param name="e" vsli:raw="The event to convert.">O evento a ser convertido.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the event.">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> que descreve o evento.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary vsli:raw="Displays the user code for the designer.">Exibe o código do usuário para o designer.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o código for exibido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Displays the user code for the specified event.">Exibe o código do usuário para o evento especificado.</summary>
      <param name="component" vsli:raw="The component that the event is connected to.">O componente ao qual o evento está conectado.</param>
      <param name="e" vsli:raw="The event to display.">O evento a ser exibido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o código for exibido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary vsli:raw="Displays the user code for the designer at the specified line.">Exibe o código do usuário para o designer na linha especificada.</summary>
      <param name="lineNumber" vsli:raw="The line number to place the caret on.">O número de linha na qual colocar o cursor.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o código for exibido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary vsli:raw="Provides an interface that can list extender providers.">Fornece uma interface que pode listar provedores de extensor.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary vsli:raw="Gets the set of extender providers for the component.">Obtém o conjunto de provedores de extensor para o componente.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that lists the active extender providers. If there are no providers, an empty array is returned.">Uma matriz do tipo <see cref="T:System.ComponentModel.IExtenderProvider" /> que lista os provedores de extensor ativos. Se não houver provedores, uma matriz vazia será retornada.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary vsli:raw="Provides an interface for adding and removing extender providers at design time.">Fornece uma interface para adicionar e remover provedores de extensor em tempo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Adds the specified extender provider.">Adiciona o provedor do extensor especificado.</summary>
      <param name="provider" vsli:raw="The extender provider to add.">O provedor de extensor a ser adicionado.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Removes the specified extender provider.">Remove o provedor do extensor especificado.</summary>
      <param name="provider" vsli:raw="The extender provider to remove.">O provedor de extensor a ser removido.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary vsli:raw="Provides methods for showing Help topics and adding and removing Help keywords at design time.">Fornece métodos para mostrar os tópicos da Ajuda e adicionar e remover palavras-chave de Ajuda em tempo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary vsli:raw="Adds a context attribute to the document.">Adiciona um atributo de contexto ao documento.</summary>
      <param name="name" vsli:raw="The name of the attribute to add.">O nome do atributo a ser adicionado.</param>
      <param name="value" vsli:raw="The value of the attribute.">O valor do atributo.</param>
      <param name="keywordType" vsli:raw="The type of the keyword, from the enumeration &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordType&quot; /&gt;.">O tipo de palavra-chave, da enumeração <see cref="T:System.ComponentModel.Design.HelpKeywordType" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary vsli:raw="Removes all existing context attributes from the document.">Remove todos os atributos de contexto existentes do documento.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary vsli:raw="Creates a local &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to manage subcontexts.">Cria um <see cref="T:System.ComponentModel.Design.IHelpService" /> local para gerenciar subcontextos.</summary>
      <param name="contextType" vsli:raw="The priority type of the subcontext to add.">O tipo de prioridade de subcontexto a adicionar.</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt;.">O <see cref="T:System.ComponentModel.Design.IHelpService" /> recém-criado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary vsli:raw="Removes a previously added context attribute.">Remove um atributo de contexto adicionado anteriormente.</summary>
      <param name="name" vsli:raw="The name of the attribute to remove.">O nome do atributo a ser removido.</param>
      <param name="value" vsli:raw="The value of the attribute to remove.">O valor do atributo a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary vsli:raw="Removes a context created with &lt;see cref=&quot;M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)&quot; /&gt;.">Remove um contexto criado com <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" />.</summary>
      <param name="localContext" vsli:raw="The local context &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to remove.">O <see cref="T:System.ComponentModel.Design.IHelpService" /> de contexto local a remover.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified keyword.">Exibe o tópico de Ajuda que corresponde à palavra-chave especificada.</summary>
      <param name="helpKeyword" vsli:raw="The keyword of the Help topic to display.">A palavra-chave do tópico da Ajuda a exibir.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified URL.">Exibe o tópico de Ajuda que corresponde à URL especificada.</summary>
      <param name="helpUrl" vsli:raw="The URL of the Help topic to display.">A URL do tópico de Ajuda a exibir.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary vsli:raw="Provides methods for identifying the components of a component.">Fornece métodos para identificar os componentes de um componente.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary vsli:raw="Searches the specified component for fields that implement the &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; interface and adds each to the specified container, storing the inheritance level of each which can be retrieved using the &lt;see cref=&quot;M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)&quot; /&gt; method.">Pesquisa o componente especificado para os campos que implementam a interface de <see cref="T:System.ComponentModel.IComponent" /> e adiciona cada um ao contêiner especificado, armazenando o nível de herança de cada um, que pode ser recuperado usando o método <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" />.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to search. Searching begins with this component.">O <see cref="T:System.ComponentModel.IComponent" /> a pesquisar. A pesquisa começa com este componente.</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to add components to.">O <see cref="T:System.ComponentModel.IContainer" /> ao qual adicionar componentes.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the inheritance attribute for the specified component.">Obtém o atributo de herança para o componente especificado.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for which to retrieve the inheritance attribute.">O <see cref="T:System.ComponentModel.IComponent" /> para o qual recuperar o atributo de herança.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; that describes the level of inheritance of the specified component.">Uma instância de <see cref="T:System.ComponentModel.InheritanceAttribute" /> que descreve o nível de herança do componente especificado.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary vsli:raw="Provides methods to manage the global designer verbs and menu commands available in design mode, and to show some types of shortcut menus.">Fornece métodos para gerenciar os comandos de menu e os verbos de designer globais disponíveis no modo de design e para exibir alguns tipos de menu de atalho.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Adds the specified standard menu command to the menu.">Adiciona o comando de menu padrão especificado ao menu.</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to add.">O <see cref="T:System.ComponentModel.Design.MenuCommand" /> a ser adicionado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; is already present on a menu.">O <see cref="T:System.ComponentModel.Design.CommandID" /> do <see cref="T:System.ComponentModel.Design.MenuCommand" /> especificado já está presente em um menu.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified designer verb to the set of global designer verbs.">Adiciona o verbo do designer especificado ao conjunto de verbos do designer global.</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add.">O <see cref="T:System.ComponentModel.Design.DesignerVerb" /> a ser adicionado.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Searches for the specified command ID and returns the menu command associated with it.">Pesquisa a ID de comando especificada e retorna o comando de menu associado a ela.</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; to search for.">O <see cref="T:System.ComponentModel.Design.CommandID" /> a ser pesquisado.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; associated with the command ID, or &lt;see langword=&quot;null&quot; /&gt; if no command is found.">O <see cref="T:System.ComponentModel.Design.MenuCommand" /> associado à ID de comando ou <see langword="null" />, se nenhum comando for encontrado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Invokes a menu or designer verb command matching the specified command ID.">Invoca um comando de verbo de designer ou menu correspondendo à ID de comando especificada.</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the command to search for and execute.">O <see cref="T:System.ComponentModel.Design.CommandID" /> do comando a pesquisar e executar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the command was found and invoked successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o comando tiver sido encontrado e invocado com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Removes the specified standard menu command from the menu.">Remove o comando de menu padrão especificado no menu.</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to remove.">O <see cref="T:System.ComponentModel.Design.MenuCommand" /> a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified designer verb from the collection of global designer verbs.">Remove o verbo do designer especificado da coleção de verbos do designer globais.</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove.">O <see cref="T:System.ComponentModel.Design.DesignerVerb" /> a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary vsli:raw="Shows the specified shortcut menu at the specified location.">Mostra o menu de atalho especificado no local especificado.</summary>
      <param name="menuID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the shortcut menu to show.">O <see cref="T:System.ComponentModel.Design.CommandID" /> para o menu de atalho a mostrar.</param>
      <param name="x" vsli:raw="The x-coordinate at which to display the menu, in screen coordinates.">A coordenada x na qual exibir o menu, em coordenadas da tela.</param>
      <param name="y" vsli:raw="The y-coordinate at which to display the menu, in screen coordinates.">A coordenada y na qual exibir o menu, em coordenadas da tela.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary vsli:raw="Gets a collection of the designer verbs that are currently available.">Obtém uma coleção dos verbos do designer que estão disponíveis no momento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the designer verbs that are currently available.">Um <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> que contém os verbos do designer que estão disponíveis no momento.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary vsli:raw="Provides an interface for obtaining references to objects within a project by name or type, obtaining the name of a specified object, and for locating the parent of a specified object within a designer project.">Fornece uma interface para obter referências a objetos em um projeto por nome ou tipo, para obter o nome de um objeto especificado e para localizar o pai de um objeto especificado em um projeto do designer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary vsli:raw="Gets the component that contains the specified component.">Obtém o componente que contém o componente especificado.</summary>
      <param name="reference" vsli:raw="The object to retrieve the parent component for.">O objeto para o qual recuperar o componente pai.</param>
      <returns vsli:raw="The base &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that contains the specified object, or &lt;see langword=&quot;null&quot; /&gt; if no parent component exists.">A <see cref="T:System.ComponentModel.IComponent" /> base que contém o objeto especificado ou <see langword="null" />, não se houver componente pai.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">Obtém o nome do componente especificado.</summary>
      <param name="reference" vsli:raw="The object to return the name of.">O objeto do qual retornar o nome.</param>
      <returns vsli:raw="The name of the object referenced, or &lt;see langword=&quot;null&quot; /&gt; if the object reference is not valid.">O nome do objeto referenciado ou <see langword="null" />, se a referência do objeto não for válida.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary vsli:raw="Gets a reference to the component whose name matches the specified name.">Obtém uma referência para o componente cujo nome corresponda ao nome especificado.</summary>
      <param name="name" vsli:raw="The name of the component to return a reference to.">O nome do componente para o qual retornar uma referência.</param>
      <returns vsli:raw="An object the specified name refers to, or &lt;see langword=&quot;null&quot; /&gt; if no reference is found.">Um objeto ao qual o nome especificado se refere ou <see langword="null" />, se nenhuma referência for encontrada.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary vsli:raw="Gets all available references to project components.">Obtém todas as referências disponíveis para os componentes do projeto.</summary>
      <returns vsli:raw="An array of all objects with references available to the &lt;see cref=&quot;T:System.ComponentModel.Design.IReferenceService&quot; /&gt;.">Uma matriz de todos os objetos com referências disponíveis para o <see cref="T:System.ComponentModel.Design.IReferenceService" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary vsli:raw="Gets all available references to components of the specified type.">Obtém todas as referências disponíveis para componentes do tipo especificado.</summary>
      <param name="baseType" vsli:raw="The type of object to return references to instances of.">O tipo de objeto do qual retornar referências para as instâncias.</param>
      <returns vsli:raw="An array of all available objects of the specified type.">Uma matriz de todos os objetos disponíveis do tipo especificado.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary vsli:raw="Provides an interface for designers to access resource readers and writers for specific &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; resource types.">Fornece uma interface para que designers acessem leitores e gravadores de recursos para tipos de recursos de <see cref="T:System.Globalization.CultureInfo" /> específicos.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource reader for the specified culture and returns it.">Localiza o leitor de recursos para a cultura especificada e o retorna.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to retrieve a resource reader.">O <see cref="T:System.Globalization.CultureInfo" /> do recurso para o qual recuperar um leitor de recursos.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceReader&quot; /&gt; interface that contains the resources for the culture, or &lt;see langword=&quot;null&quot; /&gt; if no resources for the culture exist.">Uma interface <see cref="T:System.Resources.IResourceReader" /> que contém os recursos para a cultura ou <see langword="null" />, se não houver recursos para a cultura.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource writer for the specified culture and returns it.">Localiza o gravador de recursos para a cultura especificada e o retorna.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to create a resource writer.">O <see cref="T:System.Globalization.CultureInfo" /> do recurso para o qual criar um gravador de recursos.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceWriter&quot; /&gt; interface for the specified culture.">Uma interface <see cref="T:System.Resources.IResourceWriter" /> para a cultura especificada.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary vsli:raw="Provides support for root-level designer view technologies.">Oferece suporte a tecnologias de exibição de designer do nível raiz.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary vsli:raw="Gets a view object for the specified view technology.">Obtém um objeto de exibição para a tecnologia de exibição especificada.</summary>
      <param name="technology" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; that indicates a particular view technology.">Um <see cref="T:System.ComponentModel.Design.ViewTechnology" /> que indica uma tecnologia de exibição específica.</param>
      <returns vsli:raw="An object that represents the view for this designer.">Um objeto que representa a exibição para este designer.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified view technology is not supported or does not exist.">A tecnologia de exibição especificada não é compatível ou não existe.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary vsli:raw="Gets the set of technologies that this designer can support for its display.">Obtém o conjunto de tecnologias que podem ser compatíveis com esse designer para a exibição.</summary>
      <returns vsli:raw="An array of supported &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; values.">Uma matriz de valores <see cref="T:System.ComponentModel.Design.ViewTechnology" /> com suporte.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary vsli:raw="Provides an interface for a designer to select components.">Fornece uma interface para que um designer selecione componentes.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary vsli:raw="Gets a value indicating whether the specified component is currently selected.">Obtém um valor que indica se o componente especificado está atualmente selecionado.</summary>
      <param name="component" vsli:raw="The component to test.">O componente a ser testado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is part of the user's current selection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o componente faz parte da seleção atual do usuário; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary vsli:raw="Gets a collection of components that are currently selected.">Obtém uma coleção de componentes que estão selecionados no momento.</summary>
      <returns vsli:raw="A collection that represents the current set of components that are selected.">Uma coleção que representa o conjunto atual de componentes que estão selecionados.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary vsli:raw="Gets the object that is currently the primary selected object.">Obtém o objeto que é o principal objeto selecionado no momento.</summary>
      <returns vsli:raw="The object that is currently the primary selected object.">O objeto que é o objeto primário selecionado no momento.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary vsli:raw="Occurs when the current selection changes.">Ocorre quando a seleção atual é alterada.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary vsli:raw="Occurs when the current selection is about to change.">Ocorre quando a seleção atual está prestes a ser alterada.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary vsli:raw="Gets the count of selected objects.">Obtém a contagem de objetos selecionados.</summary>
      <returns vsli:raw="The number of selected objects.">O número de objetos selecionados.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary vsli:raw="Selects the specified collection of components.">Seleciona a coleção de componentes especificada.</summary>
      <param name="components" vsli:raw="The collection of components to select.">A coleção de componentes a ser selecionada.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary vsli:raw="Selects the components from within the specified collection of components that match the specified selection type.">Seleciona os componentes de dentro da coleção de componentes especificada que correspondem ao tipo de seleção especificado.</summary>
      <param name="components" vsli:raw="The collection of components to select.">A coleção de componentes a ser selecionada.</param>
      <param name="selectionType" vsli:raw="A value from the &lt;see cref=&quot;T:System.ComponentModel.Design.SelectionTypes&quot; /&gt; enumeration. The default is &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;.">Um valor da enumeração <see cref="T:System.ComponentModel.Design.SelectionTypes" />. O padrão é <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary vsli:raw="Provides a container for services.">Fornece um contêiner para serviços.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">Adiciona o serviço especificado ao contêiner de serviço.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">O tipo de serviço a ser adicionado.</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">Um objeto de retorno de chamada que é usado para criar o serviço. Isso permite que um serviço seja declarado como disponível, mas atrasa a criação do objeto até que o serviço seja solicitado.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to parent service containers.">Adiciona o serviço especificado ao contêiner de serviço e, opcionalmente, promove o serviço a contêineres de serviço pai.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">O tipo de serviço a ser adicionado.</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">Um objeto de retorno de chamada que é usado para criar o serviço. Isso permite que um serviço seja declarado como disponível, mas atrasa a criação do objeto até que o serviço seja solicitado.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para promover esta solicitação para qualquer contêiner de serviço pai; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">Adiciona o serviço especificado ao contêiner de serviço.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">O tipo de serviço a ser adicionado.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Uma instância do tipo de serviço a ser adicionado. Esse objeto deve implementar ou herdar do tipo indicado pelo parâmetro <paramref name="serviceType" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to any parent service containers.">Adiciona o serviço especificado ao contêiner de serviço e, opcionalmente, promove o serviço a qualquer contêiner de serviço pai.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">O tipo de serviço a ser adicionado.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Uma instância do tipo de serviço a ser adicionado. Esse objeto deve implementar ou herdar do tipo indicado pelo parâmetro <paramref name="serviceType" />.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para promover esta solicitação para qualquer contêiner de serviço pai; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">Remove o tipo de serviço especificado do contêiner de serviço.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">O tipo de serviço a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container, and optionally promotes the service to parent service containers.">Remove o tipo de serviço especificado do contêiner de serviço e, opcionalmente, promove o serviço a contêineres de serviço pai.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">O tipo de serviço a ser removido.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para promover esta solicitação para qualquer contêiner de serviço pai; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary vsli:raw="Provides support for building a set of related custom designers.">Fornece suporte para a criação de um conjunto de designers personalizados relacionados.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary vsli:raw="Gets a collection of child designers.">Obtém uma coleção de designers filho.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;, containing the collection of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; child objects of the current designer.">Um <see cref="T:System.Collections.ICollection" />, que contém a coleção <see cref="T:System.ComponentModel.Design.IDesigner" /> de objetos filho do designer atual.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary vsli:raw="Gets the parent designer.">Obtém o designer pai.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; representing the parent designer, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">Um <see cref="T:System.ComponentModel.Design.IDesigner" /> que representa o designer pai ou <see langword="null" /> , se não houver nenhum pai.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary vsli:raw="Provides an interface to modify the set of member descriptors for a component in design mode.">Fornece uma interface para modificar o conjunto de descritores de membro de um componente no modo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the attributes that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Filtra os atributos que um componente expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component" vsli:raw="The component to filter the attributes of.">O componente cujos atributos devem ser filtrados.</param>
      <param name="attributes" vsli:raw="A dictionary of attributes that can be modified.">Um dicionário de atributos que pode ser modificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered attributes is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">
        <see langword="true" /> se o conjunto de atributos filtrados deve ser armazenado em cache; <see langword="false" /> se o serviço de filtro deve consultar novamente.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the events that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Filtra os eventos que um componente expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component" vsli:raw="The component to filter events for.">O componente para o qual filtrar os eventos.</param>
      <param name="events" vsli:raw="A dictionary of events that can be modified.">Um dicionário de eventos que pode ser modificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered events is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">
        <see langword="true" /> se o conjunto de eventos filtrados deve ser armazenado em cache; <see langword="false" /> se o serviço de filtro deve consultar novamente.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the properties that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Filtra as propriedades que um componente expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component" vsli:raw="The component to filter properties for.">O componente para o qual filtrar as propriedades.</param>
      <param name="properties" vsli:raw="A dictionary of properties that can be modified.">Um dicionário de propriedades que pode ser modificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered properties is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">
        <see langword="true" /> se o conjunto de propriedades filtradas deve ser armazenado em cache; <see langword="false" /> se o serviço de filtro deve consultar novamente.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary vsli:raw="Discovers available types at design time.">Descobre tipos disponíveis em tempo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary vsli:raw="Retrieves the list of available types.">Recupera a lista de tipos disponíveis.</summary>
      <param name="baseType" vsli:raw="The base type to match. Can be &lt;see langword=&quot;null&quot; /&gt;.">O tipo base para corresponder. Pode ser <see langword="null" />.</param>
      <param name="excludeGlobalTypes" vsli:raw="Indicates whether types from all referenced assemblies should be checked.">Indica se os tipos de todos os assemblies referenciados devem ser verificados.</param>
      <returns vsli:raw="A collection of types that match the criteria specified by &lt;paramref name=&quot;baseType&quot; /&gt; and &lt;paramref name=&quot;excludeGlobalTypes&quot; /&gt;.">Uma coleção de tipos que correspondem aos critérios especificados por <paramref name="baseType" /> e <paramref name="excludeGlobalTypes" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary vsli:raw="Provides an interface to retrieve an assembly or type by name.">Fornece uma interface para recuperar um tipo ou assembly por nome.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the requested assembly.">Obtém o assembly solicitado.</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">O nome do assembly a ser recuperado.</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">Uma instância do assembly solicitado ou <see langword="null" /> se nenhum assembly puder ser localizado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary vsli:raw="Gets the requested assembly.">Obtém o assembly solicitado.</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">O nome do assembly a ser recuperado.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">
        <see langword="true" /> se esse método deverá lançar uma exceção se o assembly não puder ser localizado; do contrário, <see langword="false" /> e esse método retornará <see langword="null" /> se o assembly não puder ser localizado.</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">Uma instância do assembly solicitado ou <see langword="null" /> se nenhum assembly puder ser localizado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the path to the file from which the assembly was loaded.">Obtém o caminho para o arquivo do qual o assembly foi carregado.</summary>
      <param name="name" vsli:raw="The name of the assembly.">O nome do assembly.</param>
      <returns vsli:raw="The path to the file from which the assembly was loaded.">O caminho para o arquivo do qual o assembly foi carregado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary vsli:raw="Loads a type with the specified name.">Carrega um tipo com o nome especificado.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">O nome do tipo. Se o nome do tipo não for um nome totalmente qualificado que indica um assembly, esse serviço pesquisará seu conjunto interno de assemblies referenciados.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">Uma instância de <see cref="T:System.Type" /> que corresponderá ao nome especificado ou <see langword="null" />, se nenhum tipo puder ser encontrado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">Carrega um tipo com o nome especificado.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">O nome do tipo. Se o nome do tipo não for um nome totalmente qualificado que indica um assembly, esse serviço pesquisará seu conjunto interno de assemblies referenciados.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">
        <see langword="true" /> se esse método deverá lançar uma exceção se o assembly não puder ser localizado; do contrário, <see langword="false" /> e esse método retornará <see langword="null" /> se o assembly não puder ser localizado.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">Uma instância de <see cref="T:System.Type" /> que corresponderá ao nome especificado ou <see langword="null" />, se nenhum tipo puder ser encontrado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">Carrega um tipo com o nome especificado.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">O nome do tipo. Se o nome do tipo não for um nome totalmente qualificado que indica um assembly, esse serviço pesquisará seu conjunto interno de assemblies referenciados.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">
        <see langword="true" /> se esse método deverá lançar uma exceção se o assembly não puder ser localizado; do contrário, <see langword="false" /> e esse método retornará <see langword="null" /> se o assembly não puder ser localizado.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore case when searching for types; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para ignorar maiúsculas e minúsculas durante a pesquisa de tipos; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">Uma instância de <see cref="T:System.Type" /> que corresponderá ao nome especificado ou <see langword="null" />, se nenhum tipo puder ser encontrado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Adds a reference to the specified assembly.">Adiciona uma referência ao assembly especificado.</summary>
      <param name="name" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; that indicates the assembly to reference.">Um <see cref="T:System.Reflection.AssemblyName" /> que indica que o assembly para referenciar.</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary vsli:raw="Represents a Windows menu or toolbar command item.">Representa um item de comando de menu ou barra de ferramentas do Windows.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.MenuCommand" />.</summary>
      <param name="handler" vsli:raw="The event to raise when the user selects the menu item or toolbar button.">O evento a ser gerado quando o usuário seleciona o botão de barra de ferramentas ou item de menu.</param>
      <param name="command" vsli:raw="The unique command ID that links this menu command to the environment's menu.">A ID exclusiva do comando que vincula esse comando de menu ao menu do ambiente.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is checked.">Obtém ou define um valor que indica se esse item de menu está marcado.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is checked; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o item está marcado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary vsli:raw="Occurs when the menu command changes.">Ocorre quando o comando de menu muda.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with this menu command.">Obtém o <see cref="T:System.ComponentModel.Design.CommandID" /> associado a esse comando de menu.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with the menu command.">O <see cref="T:System.ComponentModel.Design.CommandID" /> associado ao comando de menu.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary vsli:raw="Gets a value indicating whether this menu item is available.">Obtém um valor que indica se este item de menu está disponível.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o item estiver habilitado; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary vsli:raw="Invokes the command.">Invoca o comando.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary vsli:raw="Invokes the command with the given parameter.">Invoca o comando com o parâmetro especificado.</summary>
      <param name="arg" vsli:raw="An optional argument for use by the command.">Um argumento opcional para uso pelo comando.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary vsli:raw="Gets the OLE command status code for this menu item.">Obtém o código de status do comando OLE para este item de menu.</summary>
      <returns vsli:raw="An integer containing a mixture of status flags that reflect the state of this menu item.">Um inteiro que contém uma mistura de sinalizadores de status que refletem o estado desse item de menu.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.MenuCommand.CommandChanged&quot; /&gt; event.">Aciona o evento <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" />.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">Um <see cref="T:System.EventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary vsli:raw="Gets the public properties associated with the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">Obtém as propriedades públicas associadas ao <see cref="T:System.ComponentModel.Design.MenuCommand" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing the public properties of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">Um <see cref="T:System.Collections.IDictionary" /> que contém as propriedades públicas <see cref="T:System.ComponentModel.Design.MenuCommand" />do.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is supported.">Obtém ou define um valor que indica se esse item de menu é compatível.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is supported, which is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o item tiver suporte, que é o padrão; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary vsli:raw="Returns a string representation of this menu command.">Retorna uma representação de cadeia de caracteres desse comando de menu.</summary>
      <returns vsli:raw="A string containing the value of the &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.CommandID&quot; /&gt; property appended with the names of any flags that are set, separated by pipe bars (|). These flag properties include &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Checked&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Enabled&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Supported&quot; /&gt;, and &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Visible&quot; /&gt;.">Uma cadeia de caracteres que contém o valor da propriedade <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> anexada com os nomes de quaisquer sinalizadores definidos, separados por barras verticais (|). Essas propriedades de sinalizador incluem <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /> e <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is visible.">Obtém ou define um valor que indica se esse item de menu está visível.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is visible; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o item estiver visível; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary vsli:raw="Defines identifiers that indicate the type of a selection.">Define os identificadores que indicam o tipo de uma seleção.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary vsli:raw="Represents an add selection that adds the selected components to the current selection, maintaining the current set of selected components.">Representa uma seleção de adição que adiciona os componentes selecionados à seleção atual, mantendo o conjunto atual de componentes selecionados.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">Representa uma seleção regular. O serviço de seleção responde às teclas CTRL e SHIFT para dar suporte à adição/remoção de componentes à/da seleção.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary vsli:raw="Represents a selection that occurs when a user clicks a component. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">Representa uma seleção que ocorre quando um usuário clica em um componente. Se o componente recém-selecionado já estiver selecionado, ele será promovido para ser o componente primário selecionado, em vez de ser cancelado.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary vsli:raw="Represents a selection that occurs when the user presses on the mouse button while the mouse pointer is over a component. If the component under the pointer is already selected, it is promoted to become the primary selected component rather than being canceled.">Representa uma seleção que ocorre quando o usuário pressiona o botão do mouse enquanto o ponteiro do mouse está sobre um componente. Se o componente sob o ponteiro ainda estiver selecionado, ele será promovido para tornar-se o componente selecionado primário, em vez de ser cancelado.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary vsli:raw="Represents a selection that occurs when the user releases the mouse button immediately after a component has been selected. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">Representa uma seleção que ocorre quando o usuário libera o botão do mouse imediatamente depois que um componente foi selecionado. Se o componente recém-selecionado já estiver selecionado, ele será promovido para ser o componente primário selecionado, em vez de ser cancelado.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">Representa uma seleção regular. O serviço de seleção responde às teclas CTRL e SHIFT para dar suporte à adição/remoção de componentes à/da seleção.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary vsli:raw="Represents a primary selection that occurs when a user clicks on a component. If a component in the selection list is already selected, the component is promoted to be the primary selection.">Representa uma seleção primária que ocorre quando um usuário clica em um componente. Se um componente na lista de seleção já estiver selecionado, o componente será promovido para a seleção primária.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary vsli:raw="Represents a remove selection that removes the selected components from the current selection, maintaining the current set of selected components.">Representa uma seleção de remoção que remove os componentes selecionados da seleção atual, mantendo o conjunto atual de componentes selecionados.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary vsli:raw="Represents a selection that occurs when the content of a selection is replaced. The selection service replaces the current selection with the replacement.">Representa uma seleção que ocorre quando o conteúdo de uma seleção é substituído. O serviço de seleção substitui a seleção atual pela substituição.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary vsli:raw="Represents a toggle selection that switches between the current selection and the provided selection. If a component is already selected and is passed into &lt;see cref=&quot;Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents&quot; /&gt; with a selection type of &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Toggle&quot; /&gt;, the component selection will be canceled.">Representa uma seleção de alternância que alterna entre a seleção atual e a seleção fornecida. Se um componente já estiver selecionado e for passado para <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> com um tipo de seleção de <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" />, a seleção do componente será cancelada.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary vsli:raw="Identifies the valid selection types as &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Replace&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseDown&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseUp&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Click&quot; /&gt;.">Identifica os tipos de seleção válidos como <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" /> ou <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary vsli:raw="Provides the base class for serializing a set of components or serializable objects into a serialization store.">Fornece a classe base para serializar um conjunto de componentes ou objetos serializáveis em um repositório de serialização.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">Cria um novo <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
      <returns vsli:raw="A new created serialization store.">Um novo repositório de serialização criado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary vsli:raw="Deserializes the given store to produce a collection of objects.">Desserializa o repositório indicado para produzir uma coleção de objetos.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> a ser desserializado.</param>
      <returns vsli:raw="A collection of objects created according to the stored state.">Uma coleção de objetos criada de acordo com o estado armazenado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> não contém dados em um formato que o contêiner de serialização possa processar.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given store and populates the given &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with deserialized &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects.">Desserializa o repositório fornecido e popula o <see cref="T:System.ComponentModel.IContainer" /> fornecido com objetos <see cref="T:System.ComponentModel.IComponent" /> desserializados.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> a ser desserializado.</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">O <see cref="T:System.ComponentModel.IContainer" /> ao qual os objetos <see cref="T:System.ComponentModel.IComponent" /> serão adicionados.</param>
      <returns vsli:raw="A collection of objects created according to the stored state.">Uma coleção de objetos criada de acordo com o estado armazenado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> ou <paramref name="container" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> não contém dados em um formato que o contêiner de serialização possa processar.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container.">Desserializa o <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> determinado ao contêiner determinado.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> a ser desserializado.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">O contêiner ao qual os objetos <see cref="T:System.ComponentModel.IComponent" /> serão adicionados.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> ou <paramref name="container" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> não contém dados em um formato que o contêiner de serialização possa processar.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally validating recycled types.">Desserializa o <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> determinado para o contêiner determinado, validando, opcionalmente, tipos reciclados.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> a ser desserializado.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">O contêiner ao qual os objetos <see cref="T:System.ComponentModel.IComponent" /> serão adicionados.</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">
        <see langword="true" /> para garantir que a desserialização só funcionará se aplicada a um objeto do mesmo tipo.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> ou <paramref name="container" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> não contém dados em um formato que o contêiner de serialização possa processar.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally applying default property values.">Desserializa o <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> fornecido para o contêiner fornecido aplicando, opcionalmente, valores de propriedade padrão.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> a ser desserializado.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">O contêiner ao qual os objetos <see cref="T:System.ComponentModel.IComponent" /> serão adicionados.</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">
        <see langword="true" /> para garantir que a desserialização só funcionará se aplicada a um objeto do mesmo tipo.</param>
      <param name="applyDefaults" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the default property values should be applied.">
        <see langword="true" /> para indicar que os valores de propriedade padrão devem ser aplicados.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> ou <paramref name="container" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> não contém dados em um formato que o contêiner de serialização possa processar.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary vsli:raw="Loads a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; from a stream.">Carrega um <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> de um fluxo.</summary>
      <param name="stream" vsli:raw="The &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; from which the store will be loaded.">O <see cref="T:System.IO.Stream" /> do qual o repositório será carregado.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; instance.">Uma nova instância de <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; does not contain data saved by a previous call to &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)&quot; /&gt;.">
        <paramref name="stream" /> não contém dados salvos por uma chamada anterior para <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object to the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">Serializa o objeto fornecido para o <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> fornecido.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be written.">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> no qual o estado do <paramref name="value" /> será gravado.</param>
      <param name="value" vsli:raw="The object to serialize.">O objeto a ser serializado.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> ou <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> está fechado ou <paramref name="store" /> não é um tipo de repositório de serialização compatível. Use um repositório retornado por <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object, accounting for default property values.">Serializa o objeto fornecido, considerando valores de propriedade padrão.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be serialized.">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> no qual o estado do <paramref name="value" /> será serializado.</param>
      <param name="value" vsli:raw="The object to serialize.">O objeto a ser serializado.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> ou <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> está fechado ou <paramref name="store" /> não é um tipo de repositório de serialização compatível. Use um repositório retornado por <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object.">Serializa o membro fornecido no objeto especificado.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> no qual o estado do <paramref name="member" /> será serializado.</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">O objeto ao qual é <paramref name="member" /> anexado.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; specifying the member to serialize.">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que especifica o membro a ser serializado.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> ou <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> está fechado ou <paramref name="store" /> não é um tipo de repositório de serialização compatível. Use um repositório retornado por <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object, accounting for the default property value.">Serializa o membro determinado no objeto determinado, considerando o valor da propriedade padrão.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> no qual o estado do <paramref name="member" /> será serializado.</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">O objeto ao qual é <paramref name="member" /> anexado.</param>
      <param name="member" vsli:raw="The member to serialize.">O nome do membro a serializar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> ou <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> está fechado ou <paramref name="store" /> não é um tipo de repositório de serialização compatível. Use um repositório retornado por <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary vsli:raw="Provides a stack object that can be used by a serializer to make information available to nested serializers.">Fornece um objeto de pilha que pode ser usado por um serializador para disponibilizar informações para serializadores aninhados.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary vsli:raw="Appends an object to the end of the stack, rather than pushing it onto the top of the stack.">Acrescenta um objeto ao fim da pilha em vez de efetuar push do objeto para o topo da pilha.</summary>
      <param name="context" vsli:raw="A context object to append to the stack.">Um objeto de contexto a ser acrescentado à pilha.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary vsli:raw="Gets the current object on the stack.">Obtém o objeto atual na pilha.</summary>
      <returns vsli:raw="The current object on the stack, or &lt;see langword=&quot;null&quot; /&gt; if no objects were pushed.">O objeto atual na pilha ou <see langword="null" /> se nenhum objeto foi enviado por push.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary vsli:raw="Gets the object on the stack at the specified level.">Obtém o objeto na pilha no nível especificado.</summary>
      <param name="level" vsli:raw="The level of the object to retrieve on the stack. Level 0 is the top of the stack, level 1 is the next down, and so on. This level must be 0 or greater. If level is greater than the number of levels on the stack, it returns &lt;see langword=&quot;null&quot; /&gt;.">O nível do objeto a ser recuperado na pilha. O nível 0 é o topo da pilha, o nível 1 vem logo abaixo e assim por diante. Este nível deve ser igual ou maior que 0. Se o nível for maior que o número de níveis na pilha, <see langword="null" /> será retornado.</param>
      <returns vsli:raw="The object on the stack at the specified level, or &lt;see langword=&quot;null&quot; /&gt; if no object exists at that level.">O objeto na pilha no nível especificado ou <see langword="null" /> se nenhum objeto existir nesse nível.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;level&quot; /&gt; is less than 0.">
        <paramref name="level" /> é menor que 0.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary vsli:raw="Gets the first object on the stack that inherits from or implements the specified type.">Obtém o primeiro objeto na pilha que herda do tipo especificado ou o implementa.</summary>
      <param name="type" vsli:raw="A type to retrieve from the context stack.">Um tipo a ser recuperado da pilha de contextos.</param>
      <returns vsli:raw="The first object on the stack that inherits from or implements the specified type, or &lt;see langword=&quot;null&quot; /&gt; if no object on the stack implements the type.">O primeiro objeto na pilha que herda de ou implementa o tipo especificado, ou <see langword="null" /> se nenhum objeto na pilha implementa o tipo.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary vsli:raw="Removes the current object off of the stack, returning its value.">Remove o objeto atual da pilha, retornando seu valor.</summary>
      <returns vsli:raw="The object removed from the stack; &lt;see langword=&quot;null&quot; /&gt; if no objects are on the stack.">O objeto removido da pilha; <see langword="null" /> se não houver objetos na pilha.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary vsli:raw="Pushes, or places, the specified object onto the stack.">Efetua push ou coloca o objeto especificado na pilha.</summary>
      <param name="context" vsli:raw="The context object to push onto the stack.">O objeto de contexto a ser enviado por push para a pilha.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; attribute is placed on a serializer to indicate the class to use as a default provider of that type of serializer.">O atributo <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> é colocado em um serializador para indicar a classe a ser usada como um provedor padrão desse tipo de serializador.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the named provider type.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> com o tipo de provedor nomeado.</summary>
      <param name="providerTypeName" vsli:raw="The name of the serialization provider type.">O nome do tipo de provedor de serialização.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerTypeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerTypeName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the given provider type.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> com o tipo de provedor fornecido.</summary>
      <param name="providerType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the serialization provider.">O <see cref="T:System.Type" /> do provedor de serialização.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerType" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary vsli:raw="Gets the type name of the serialization provider.">Obtém nome de tipo do provedor de serialização.</summary>
      <returns vsli:raw="A string containing the name of the provider.">Uma cadeia de caracteres que contém o nome do provedor.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary vsli:raw="Provides a basic designer loader interface that can be used to implement a custom designer loader.">Fornece uma interface de carregador de designer básica que pode ser usada para implementar um carregador de designer personalizado.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary vsli:raw="Begins loading a designer.">Começa a carregar um designer.</summary>
      <param name="host" vsli:raw="The loader host through which this loader loads components.">O host do carregador por meio do qual esse carregador carrega componentes.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt;.">Libera todos os recursos usados pelo <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary vsli:raw="Writes cached changes to the location that the designer was loaded from.">Grava as alterações em cache no local do qual o designer foi carregado.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary vsli:raw="Gets a value indicating whether the loader is currently loading a document.">Obtém um valor que indica se carregador está carregando um documento atualmente.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the loader is currently loading a document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o carregador estiver carregando um documento no momento; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>Indica um serializador para o gerenciador de serialização a ser usado para serializar os valores do tipo ao qual esse atributo é aplicado. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerTypeName">O nome totalmente qualificado do tipo de dados do serializador.</param>
      <param name="baseSerializerTypeName">O nome totalmente qualificado do tipo de dados base do serializador. Vários serializadores podem ser fornecidos para uma classe, desde que os serializadores tenham diferentes tipos base.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerTypeName">O nome totalmente qualificado do tipo de dados do serializador.</param>
      <param name="baseSerializerType">O tipo de dados base do serializador. Vários serializadores podem ser fornecidos para uma classe, desde que os serializadores tenham diferentes tipos base.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerType">O tipo de dados do serializador.</param>
      <param name="baseSerializerType">O tipo de dados base do serializador. Vários serializadores podem ser fornecidos para uma classe, desde que os serializadores tenham diferentes tipos base.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>Obtém o nome totalmente qualificado do tipo base do serializador.</summary>
      <returns>O nome do tipo totalmente qualificado do tipo base do serializador.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>Obtém o nome totalmente qualificado do tipo do serializador.</summary>
      <returns>O nome do tipo totalmente qualificado do serializador.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId">
      <summary>Indica uma ID exclusiva para este tipo de atributo.</summary>
      <returns>Uma ID exclusiva para esse tipo de atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary vsli:raw="Provides an interface that can extend a designer host to support loading from a serialized state.">Fornece uma interface que pode estender um host de designer para dar suporte a carregamento de um estado serializado.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Ends the designer loading operation.">Encerra a operação de carregamento do designer.</summary>
      <param name="baseClassName" vsli:raw="The fully qualified name of the base class of the document that this designer is designing.">O nome totalmente qualificado da classe base do documento que este designer está criando.</param>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is successfully loaded; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o designer for carregado com sucesso; caso contrário, <see langword="false" />.</param>
      <param name="errorCollection" vsli:raw="A collection containing the errors encountered during load, if any. If no errors were encountered, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">Uma coleção que contém os erros encontrados durante o carregamento, se houver. Se nenhum erro tiver sido encontrado, passe uma coleção vazia ou <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary vsli:raw="Reloads the design document.">Recarrega o documento de design.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary vsli:raw="Provides an interface that extends &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&quot; /&gt; to specify whether errors are tolerated while loading a design document.">Fornece uma interface que estende <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> para especificar se erros são tolerados ao carregar um documento de design.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary vsli:raw="Gets or sets a value indicating whether it is possible to reload with errors.">Obtém ou define um valor que indica se é possível recarregar com erros.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader can reload the design document when errors are detected; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o carregador do designer puder recarregar o documento de design quando forem detectados erros; caso contrário <see langword="false" />,. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary vsli:raw="Gets or sets a value indicating whether errors should be ignored when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload&quot; /&gt; is called.">Obtém ou define um valor que indica se os erros devem ser ignorados quando <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" /> é chamado.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader will ignore errors when it reloads; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o carregador do designer ignorar erros ao recarregar; caso contrário <see langword="false" />,. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary vsli:raw="Provides an interface that can extend a designer loader to support asynchronous loading of external components.">Fornece uma interface que pode estender um carregador de designer para dar suporte a carregamento assíncrono de componentes externos.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary vsli:raw="Registers an external component as part of the load process managed by this interface.">Registra um componente externo como parte do processo de carregamento gerenciado por essa interface.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Signals that a dependent load has finished.">Assinala que um carregamento dependente foi concluído.</summary>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the load of the designer is successful; &lt;see langword=&quot;false&quot; /&gt; if errors prevented the load from finishing.">
        <see langword="true" /> se a carga do designer for bem-sucedida; <see langword="false" /> se erros tiverem impedido a conclusão do carregamento.</param>
      <param name="errorCollection" vsli:raw="A collection of errors that occurred during the load, if any. If no errors occurred, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">Uma coleção de erros que ocorreram durante o carregamento, se houver. Se não tiverem ocorrido erros, passe uma coleção vazia ou <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary vsli:raw="Reloads the design document.">Recarrega o documento de design.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reload request is accepted, or &lt;see langword=&quot;false&quot; /&gt; if the loader does not allow the reload.">
        <see langword="true" /> se a solicitação de recarregamento for aceita ou <see langword="false" /> se o carregador não permitir o recarregamento.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary vsli:raw="Provides an interface that can manage design-time serialization.">Fornece uma interface que pode gerenciar a serialização no tempo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Adds the specified serialization provider to the serialization manager.">Adiciona o provedor de serialização especificado ao gerenciador de serialização.</summary>
      <param name="provider" vsli:raw="The serialization provider to add.">O provedor de serialização a ser adicionado.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary vsli:raw="Gets a stack-based, user-defined storage area that is useful for communication between serializers.">Obtém uma área de armazenamento baseada em pilha e definida pelo usuário que é útil para a comunicação entre os serializadores.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; that stores data.">Um <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> que armazena dados.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary vsli:raw="Creates an instance of the specified type and adds it to a collection of named instances.">Cria uma instância do tipo especificado e adiciona-a a uma coleção de instâncias nomeadas.</summary>
      <param name="type" vsli:raw="The data type to create.">O tipo de dados a ser criado.</param>
      <param name="arguments" vsli:raw="The arguments to pass to the constructor for this type.">Os argumentos a serem passados ao construtor desse tipo.</param>
      <param name="name" vsli:raw="The name of the object. This name can be used to access the object later through &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the object is still created but cannot be accessed by name.">O nome do objeto. Esse nome pode ser usado para acessar o objeto posteriormente por meio de <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />. Se <see langword="null" /> for passado, o objeto ainda assim será criado, mas não poderá ser acessado por nome.</param>
      <param name="addToContainer" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, this object is added to the design container. The object must implement &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for this to have any effect.">Se <see langword="true" />, esse objeto será adicionado ao contêiner de design. O objeto deve implementar <see cref="T:System.ComponentModel.IComponent" /> para que isso tenha algum efeito.</param>
      <returns vsli:raw="The newly created object instance.">A instância de objeto recém-criada.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary vsli:raw="Gets an instance of a created object of the specified name, or &lt;see langword=&quot;null&quot; /&gt; if that object does not exist.">Obtém uma instância de um objeto criado do nome especificado ou <see langword="null" />, se esse objeto não existir.</summary>
      <param name="name" vsli:raw="The name of the object to retrieve.">O nome do objeto a ser recuperado.</param>
      <returns vsli:raw="An instance of the object with the given name, or &lt;see langword=&quot;null&quot; /&gt; if no object by that name can be found.">Uma instância do objeto com o nome fornecido ou <see langword="null" />, se nenhum objeto com esse nome pode ser encontrado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified object, or &lt;see langword=&quot;null&quot; /&gt; if the object has no name.">Obtém o nome do objeto especificado ou <see langword="null" /> se o objeto não tiver nome.</summary>
      <param name="value" vsli:raw="The object to retrieve the name for.">O objeto para o qual recuperar o nome.</param>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object is unnamed.">O nome do objeto ou <see langword="null" /> se o objeto não tiver um nome.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer of the requested type for the specified object type.">Obtém um serializador do tipo solicitado para o tipo de objeto especificado.</summary>
      <param name="objectType" vsli:raw="The type of the object to get the serializer for.">O tipo do objeto para o qual obter o serializador.</param>
      <param name="serializerType" vsli:raw="The type of the serializer to retrieve.">O tipo do serializador a ser recuperado.</param>
      <returns vsli:raw="An instance of the requested serializer, or &lt;see langword=&quot;null&quot; /&gt; if no appropriate serializer can be located.">Uma instância do serializador solicitado ou <see langword="null" /> se nenhum serializador adequado pode ser localizado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary vsli:raw="Gets a type of the specified name.">Obtém um tipo do nome especificado.</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the type to load.">O nome totalmente qualificado do tipo a ser carregado.</param>
      <returns vsli:raw="An instance of the type, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be loaded.">Uma instância do tipo ou <see langword="null" /> se o tipo não pode ser carregado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary vsli:raw="Indicates custom properties that can be serializable with available serializers.">Indica as propriedades personalizadas que podem ser serializáveis com serializadores disponíveis.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties to be serialized.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém as propriedades a serem serializadas.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Removes a custom serialization provider from the serialization manager.">Remove um provedor de serialização personalizado do gerenciador de serialização.</summary>
      <param name="provider" vsli:raw="The provider to remove. This object must have been added using &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)&quot; /&gt;.">O provedor a ser removido. Esse objeto deverá ter sido adicionado usando <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary vsli:raw="Reports an error in serialization.">Relata um erro na serialização.</summary>
      <param name="errorInformation" vsli:raw="The error to report. This information object can be of any object type. If it is an exception, the message of the exception is extracted and reported to the user. If it is any other type, &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt; is called to display the information to the user.">O erro a ser relatado. Este objeto de informações pode ser de qualquer tipo de objeto. Se for uma exceção, a mensagem da exceção será extraída e relatada ao usuário. Se for qualquer outro tipo, <see cref="M:System.Object.ToString" /> será chamado para exibir as informações para o usuário.</param>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary vsli:raw="Occurs when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)&quot; /&gt; cannot locate the specified name in the serialization manager's name table.">Ocorre quando <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> não consegue localizar o nome especificado na tabela de nomes do gerenciador de serialização.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary vsli:raw="Occurs when serialization is complete.">Ocorre quando a serialização é concluída.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary vsli:raw="Sets the name of the specified existing object.">Define o nome do objeto especificado existente.</summary>
      <param name="instance" vsli:raw="The object instance to name.">A instância do objeto a nomear.</param>
      <param name="name" vsli:raw="The name to give the instance.">O nome a ser atribuído à instância.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary vsli:raw="Provides an interface that enables access to a serializer.">Fornece uma interface que permite o acesso a um serializador.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer using the specified attributes.">Obtém um serializador usando os atributos especificados.</summary>
      <param name="manager" vsli:raw="The serialization manager requesting the serializer.">O gerenciador de serialização solicitando o serializador.</param>
      <param name="currentSerializer" vsli:raw="An instance of the current serializer of the specified type. This can be &lt;see langword=&quot;null&quot; /&gt; if no serializer of the specified type exists.">Uma instância do serializador atual do tipo especificado. Isso pode ser <see langword="null" /> se nenhum serializador do tipo especificado existe.</param>
      <param name="objectType" vsli:raw="The data type of the object to serialize.">O tipo de dados do objeto a ser serializado.</param>
      <param name="serializerType" vsli:raw="The data type of the serializer to create.">O tipo de dados do serializador a ser criado.</param>
      <returns vsli:raw="An instance of a serializer of the type requested, or &lt;see langword=&quot;null&quot; /&gt; if the request cannot be satisfied.">Uma instância de um serializador do tipo solicitado ou <see langword="null" />, se a solicitação não pode ser atendida.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary vsli:raw="Provides an interface that can invoke serialization and deserialization.">Fornece uma interface que pode invocar a serialização e a desserialização.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary vsli:raw="Deserializes the specified serialization data object and returns a collection of objects represented by that data.">Desserializa o objeto de dados de serialização especificado e retorna uma coleção de objetos representados por esses dados.</summary>
      <param name="serializationData" vsli:raw="An object consisting of serialized data.">Um objeto que consiste de dados serializados.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of objects rebuilt from the specified serialization data object.">Um <see cref="T:System.Collections.ICollection" /> de objetos recompilados do objeto de dados de serialização especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary vsli:raw="Serializes the specified collection of objects and stores them in a serialization data object.">Serializa a coleção de objetos especificada e os armazena em um objeto de dados de serialização.</summary>
      <param name="objects" vsli:raw="A collection of objects to serialize.">Uma coleção de objetos a serem serializados.</param>
      <returns vsli:raw="An object that contains the serialized state of the specified collection of objects.">Um objeto que contém o estado serializado da coleção de objetos especificada.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary vsli:raw="Provides a service that can generate unique names for objects.">Fornece um serviço que pode gerar nomes exclusivos para objetos.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary vsli:raw="Creates a new name that is unique to all components in the specified container.">Cria um novo nome exclusivo para todos os componentes no contêiner especificado.</summary>
      <param name="container" vsli:raw="The container where the new object is added.">O contêiner em que o novo objeto é adicionado.</param>
      <param name="dataType" vsli:raw="The data type of the object that receives the name.">O tipo de dados do objeto que recebe o nome.</param>
      <returns vsli:raw="A unique name for the data type.">Um nome exclusivo para o tipo de dados.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">Obtém um valor que indica se o nome especificado é válido.</summary>
      <param name="name" vsli:raw="The name to validate.">O nome a ser validado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name is valid; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o nome for válido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">Obtém um valor que indica se o nome especificado é válido.</summary>
      <param name="name" vsli:raw="The name to validate.">O nome a ser validado.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary vsli:raw="Provides the information necessary to create an instance of an object. This class cannot be inherited.">Fornece as informações necessárias para criar uma instância de um objeto. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information and arguments.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> usando os argumentos e as informações do membro especificados.</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">As informações de membro para o descritor. Pode ser <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou <see cref="T:System.Reflection.PropertyInfo" />. Se for <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou <see cref="T:System.Reflection.PropertyInfo" />, deverá representar um membro <see langword="static" />.</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">A coleção de argumentos a passar para o membro. Esse parâmetro poderá ser <see langword="null" /> ou uma coleção vazia, se não houver nenhum argumento. A coleção também pode consistir em outras instâncias do <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">
        <paramref name="member" /> é do tipo <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou <see cref="T:System.Reflection.PropertyInfo" /> e não representa um membro <see langword="static" />.
- ou -
<paramref name="member" /> é do tipo <see cref="T:System.Reflection.PropertyInfo" /> e não é legível.
- ou -
<paramref name="member" /> é do tipo <see cref="T:System.Reflection.MethodInfo" /> ou <see cref="T:System.Reflection.ConstructorInfo" /> e o número de argumentos em <paramref name="arguments" /> não coincide com a assinatura de <paramref name="member" />.
- ou -
<paramref name="member" /> é do tipo <see cref="T:System.Reflection.ConstructorInfo" /> e representa um membro <see langword="static" />.
- ou -
<paramref name="member" /> é do tipo <see cref="T:System.Reflection.FieldInfo" /> e o número de argumentos em <paramref name="arguments" /> não é zero.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information, arguments, and value indicating whether the specified information completely describes the instance.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> usando informações do membro, argumentos e valor especificados indicando se as informações especificadas descrevem completamente a instância.</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">As informações de membro para o descritor. Pode ser <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou <see cref="T:System.Reflection.PropertyInfo" />. Se for <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou <see cref="T:System.Reflection.PropertyInfo" />, deverá representar um membro <see langword="static" />.</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">A coleção de argumentos a passar para o membro. Esse parâmetro poderá ser <see langword="null" /> ou uma coleção vazia, se não houver nenhum argumento. A coleção também pode consistir em outras instâncias do <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
      <param name="isComplete" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified information completely describes the instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se as informações especificadas descrevem completamente a instância; caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">
        <paramref name="member" /> é do tipo <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou <see cref="T:System.Reflection.PropertyInfo" /> e não representa um membro <see langword="static" /><paramref name="member" /> é do tipo <see cref="T:System.Reflection.PropertyInfo" /> e não é legível.
<paramref name="member" /> é do tipo <see cref="T:System.Reflection.MethodInfo" /> ou <see cref="T:System.Reflection.ConstructorInfo" /> e o número de argumentos em <paramref name="arguments" /> não coincide com a assinatura de <paramref name="member" />.
<paramref name="member" /> é do tipo <see cref="T:System.Reflection.ConstructorInfo" /> e representa um membro <see langword="static" /><paramref name="member" /> é do tipo <see cref="T:System.Reflection.FieldInfo" /> e o número de argumentos em <paramref name="arguments" /> não é zero.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary vsli:raw="Gets the collection of arguments that can be used to reconstruct an instance of the object that this instance descriptor represents.">Obtém a coleção de argumentos que podem ser usados para reconstruir uma instância do objeto que esse descritor de instância representa.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of arguments that can be used to create the object.">Um <see cref="T:System.Collections.ICollection" /> dos argumentos que podem ser usados para criar o objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary vsli:raw="Invokes this instance descriptor and returns the object the descriptor describes.">Invoca esse descritor de instância e retorna o objeto que o descritor descreve.</summary>
      <returns vsli:raw="The object this instance descriptor describes.">O objeto que esse descritor de instância descreve.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary vsli:raw="Gets a value indicating whether the contents of this &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; completely identify the instance.">Obtém um valor que indica se o conteúdo desse <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> identificam completamente a instância.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance is completely described; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />se a instância for completamente descrita; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary vsli:raw="Gets the member information that describes the instance this descriptor is associated with.">Obtém as informações de membro que descrevem a instância à qual esse descritor está associado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that describes the instance that this object is associated with.">Um <see cref="T:System.Reflection.MemberInfo" /> que descreve a instância à qual esse objeto está associado.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary vsli:raw="Represents a single relationship between an object and a member.">Representa uma única relação entre um objeto e um membro.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</summary>
      <param name="owner" vsli:raw="The object that owns &lt;paramref name=&quot;member&quot; /&gt;.">O objeto que tem <paramref name="member" />.</param>
      <param name="member" vsli:raw="The member which is to be related to &lt;paramref name=&quot;owner&quot; /&gt;.">O membro que deve ser relacionado ao <paramref name="owner" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; or &lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="owner" /> ou <paramref name="member" /> é <see langword="null" />.</exception>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary vsli:raw="Represents the empty member relationship. This field is read-only.">Representa a relação de membro vazio. Este campo é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance is equal to the specified object representing a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance.">Determina se duas instâncias <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> são iguais.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">O <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> a ser comparado com o <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance and is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> especificado for igual ao <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">Um código hash do <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship.">Obtém um valor que indica se essa relação é igual à relação <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se essa relação for igual à <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> relação; caso contrário,. <see langword="false" /></returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary vsli:raw="Gets the related member.">Obtém o membro relacionado.</summary>
      <returns vsli:raw="The member that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">O membro que é passado para o <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equivalent.">Testa se duas estruturas <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> especificadas são equivalentes.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the equality operator.">A estrutura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> que está à esquerda do operador de igualdade.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the equality operator.">A estrutura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> que está à direita do operador de igualdade.</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Esse operador retornará <see langword="true" /> se as duas estruturas <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different.">Testa se duas estruturas <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> especificadas são diferentes.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the inequality operator.">A estrutura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> está à esquerda do operador de desigualdade.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the inequality operator.">A estrutura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> está à direita do operador de desigualdade.</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Esse operador retornará <see langword="true" /> se as duas estruturas <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> forem diferentes; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary vsli:raw="Gets the owning object.">Obtém o objeto proprietário.</summary>
      <returns vsli:raw="The owning object that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">O objeto de propriedade que é passado para o <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary vsli:raw="Provides the base class for relating one member to another.">Fornece a classe base para relacionar um membro a outro.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationshipService&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a relationship to the given source relationship.">Obtém uma relação para a relação de origem especificada.</summary>
      <param name="source" vsli:raw="The source relationship.">A relação de origem.</param>
      <returns vsli:raw="A relationship to &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if no relationship exists.">Uma relação com <paramref name="source" /> ou <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />, se não houver uma relação.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">Estabelece uma relação entre um objeto de origem e de destino.</summary>
      <param name="source" vsli:raw="The source relationship. This is the left-hand side of a relationship assignment.">A relação de origem. Este é o lado esquerdo de uma atribuição de relacionamento.</param>
      <returns vsli:raw="The current relationship associated with &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if there is no relationship.">A relação atual associada <paramref name="source" />a, ou <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> se não houver nenhuma relação.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is empty, or the relationship is not supported by the service.">
        <paramref name="source" /> está vazio ou a relação não é compatível com o serviço.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">Estabelece uma relação entre um objeto de origem e de destino.</summary>
      <param name="sourceOwner" vsli:raw="The owner of a source relationship.">O proprietário de uma relação de origem.</param>
      <param name="sourceMember" vsli:raw="The member of a source relationship.">O membro de uma relação de origem.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure encapsulating the relationship between a source and target object, or &lt;see langword=&quot;null&quot; /&gt; if there is no relationship.">Uma <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> estrutura que encapsula a relação entre um objeto de origem e de destino <see langword="null" /> ou se não há nenhuma relação.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="sourceOwner" /> ou <paramref name="sourceMember" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is empty, or the relationship is not supported by the service.">
        <paramref name="sourceOwner" /> ou <paramref name="sourceMember" /> está vazio ou a relação não é compatível com o serviço.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Creates a relationship between the source object and target relationship.">Cria uma relação entre a relação de destino e o objeto de origem.</summary>
      <param name="source" vsli:raw="The source relationship.">A relação de origem.</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">A relação a ser definida na origem.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The relationship is not supported by the service.">A relação não é compatível com o serviço.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a value indicating whether the given relationship is supported.">Obtém um valor que indica se há suporte para a relação informada.</summary>
      <param name="source" vsli:raw="The source relationship.">A relação de origem.</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">A relação a ser definida na origem.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a relationship between the given two objects is supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se houver compatibilidade com uma relação entre os dois objetos determinados; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event.">Fornece dados para o evento de <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />.</summary>
      <param name="name" vsli:raw="The name to resolve.">O nome a ser resolvido.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary vsli:raw="Gets the name of the object to resolve.">Obtém o nome do objeto a ser resolvido.</summary>
      <returns vsli:raw="The name of the object to resolve.">O nome do objeto a ser resolvido.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary vsli:raw="Gets or sets the object that matches the name.">Obtém ou define o objeto que corresponde ao nome.</summary>
      <returns vsli:raw="The object that the name is associated with.">O objeto ao qual o nome está associado.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event of a serialization manager.">Representa o método que manipula o evento <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> de um gerenciador de serialização.</summary>
      <param name="sender" vsli:raw="The source of the event.">A fonte do evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; that contains the event data.">Um <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary vsli:raw="Indicates the base serializer to use for a root designer object. This class cannot be inherited.">Indica o serializador base a ser usado para um objeto de designer raiz. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> usando os atributos especificados.</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">O nome totalmente qualificado do tipo de dados do serializador.</param>
      <param name="baseSerializerTypeName" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers as they all have different base types.">O nome do tipo base do serializador. Uma classe pode incluir vários serializadores, já que todos eles têm tipos base diferentes.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se este serializador dá suporte a recarregamento dinâmico do documento; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> usando os atributos especificados.</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">O nome totalmente qualificado do tipo de dados do serializador.</param>
      <param name="baseSerializerType" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers, as they all have different base types.">O nome do tipo base do serializador. Uma classe pode incluir vários serializadores, já que todos eles têm tipos base diferentes.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se este serializador dá suporte a recarregamento dinâmico do documento; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> usando os atributos especificados.</summary>
      <param name="serializerType" vsli:raw="The data type of the serializer.">O tipo de dados do serializador.</param>
      <param name="baseSerializerType" vsli:raw="The base type of the serializer. A class can include multiple serializers as they all have different base types.">O tipo base do serializador. Uma classe pode incluir vários serializadores, já que todos eles têm tipos base diferentes.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se este serializador dá suporte a recarregamento dinâmico do documento; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary vsli:raw="Gets a value indicating whether the root serializer supports reloading of the design document without first disposing the designer host.">Obtém um valor que indica se o serializador raiz dá suporte ao recarregamento do documento de design sem descartar primeiro o host de designer.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the root serializer supports reloading; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o serializador raiz der suporte ao recarregamento; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the base type of the serializer.">Obtém o nome totalmente qualificado do tipo base do serializador.</summary>
      <returns vsli:raw="The name of the base type of the serializer.">O nome do tipo base do serializador.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the serializer.">Obtém o nome totalmente qualificado do serializador.</summary>
      <returns vsli:raw="The name of the type of the serializer.">O nome do tipo do serializador.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary vsli:raw="Gets a unique ID for this attribute type.">Obtém uma ID exclusiva para este tipo de atributo.</summary>
      <returns vsli:raw="An object containing a unique ID for this attribute type.">Um objeto que contém uma ID exclusiva para esse tipo de atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary vsli:raw="Provides the base class for storing serialization data for the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt;.">Fornece a classe base para armazenar dados de serialização para o <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary vsli:raw="Closes the serialization store.">Fecha o repositório de serialização.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; and optionally releases the managed resources.">Libera os recursos não gerenciados usados pelo <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> e opcionalmente libera os recursos gerenciados.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary vsli:raw="Gets a collection of errors that occurred during serialization or deserialization.">Obtém uma coleção de erros que ocorreram durante a serialização ou desserialização.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that contains errors that occurred during serialization or deserialization.">Um <see cref="T:System.Collections.ICollection" /> que contém erros ocorridos durante a serialização ou desserialização.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary vsli:raw="Saves the store to the given stream.">Salva o repositório para o fluxo fornecido.</summary>
      <param name="stream" vsli:raw="The stream to which the store will be serialized.">O fluxo para o qual o repositório será serializado.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">Libera todos os recursos usados pelo <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary vsli:raw="Provides a simple implementation of the &lt;see cref=&quot;T:System.ComponentModel.Design.IServiceContainer&quot; /&gt; interface. This class cannot be inherited.">Fornece uma implementação simples da interface <see cref="T:System.ComponentModel.Design.IServiceContainer" />. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class using the specified parent service provider.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.ServiceContainer" /> usando o provedor de serviço pai especificado.</summary>
      <param name="parentProvider" vsli:raw="A parent service provider.">Um provedor de serviço pai.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">Adiciona o serviço especificado ao contêiner de serviço.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">O tipo de serviço a ser adicionado.</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">Um objeto de retorno de chamada que pode criar o serviço. Isso permite que um serviço seja declarado como disponíveis, mas atrasa a criação do objeto até que o serviço seja solicitado.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> ou <paramref name="callback" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">Já existe um serviço do tipo <paramref name="serviceType" /> no contêiner.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">Adiciona o serviço especificado ao contêiner de serviço.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">O tipo de serviço a ser adicionado.</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">Um objeto de retorno de chamada que pode criar o serviço. Isso permite que um serviço seja declarado como disponíveis, mas atrasa a criação do objeto até que o serviço seja solicitado.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse serviço precisar ser adicionado a quaisquer contêineres de serviço pai; caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> ou <paramref name="callback" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">Já existe um serviço do tipo <paramref name="serviceType" /> no contêiner.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">Adiciona o serviço especificado ao contêiner de serviço.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">O tipo de serviço a ser adicionado.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Uma instância do serviço a ser adicionado. Esse objeto deve implementar ou herdar do tipo indicado pelo parâmetro <paramref name="serviceType" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> ou <paramref name="serviceInstance" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">Já existe um serviço do tipo <paramref name="serviceType" /> no contêiner.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">Adiciona o serviço especificado ao contêiner de serviço.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">O tipo de serviço a ser adicionado.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Uma instância do tipo de serviço a ser adicionado. Esse objeto deve implementar ou herdar do tipo indicado pelo parâmetro <paramref name="serviceType" />.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse serviço precisar ser adicionado a quaisquer contêineres de serviço pai; caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> ou <paramref name="serviceInstance" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">Já existe um serviço do tipo <paramref name="serviceType" /> no contêiner.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary vsli:raw="Gets the default services implemented directly by &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt;.">Obtém os serviços padrão implementados diretamente pelo <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</summary>
      <returns vsli:raw="The default services.">Os serviços padrão.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary vsli:raw="Disposes this service container.">Descarta este contêiner de serviço.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Disposes this service container.">Descarta este contêiner de serviço.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; is in the process of being disposed of; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.ComponentModel.Design.ServiceContainer" /> estiver no processo de ser descartado; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service.">Obtém o serviço solicitado.</summary>
      <param name="serviceType" vsli:raw="The type of service to retrieve.">O tipo de serviço a ser recuperado.</param>
      <returns vsli:raw="An instance of the service if it could be found, or &lt;see langword=&quot;null&quot; /&gt; if it could not be found.">Uma instância do serviço, se puder ser encontrada; <see langword="null" /> se ele não puder ser encontrada.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">Remove o tipo de serviço especificado do contêiner de serviço.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">O tipo de serviço a ser removido.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container.">Remove o tipo de serviço especificado do contêiner de serviço.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">O tipo de serviço a ser removido.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be removed from any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse serviço precisar ser removido de quaisquer contêineres de serviço pai; caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary vsli:raw="Provides a callback mechanism that can create an instance of a service on demand.">Fornece um mecanismo de retorno de chamada que pode criar uma instância de um serviço sob demanda.</summary>
      <param name="container" vsli:raw="The service container that requested the creation of the service.">O contêiner de serviço que solicitou a criação do serviço.</param>
      <param name="serviceType" vsli:raw="The type of service to create.">O tipo do serviço a ser criado.</param>
      <returns vsli:raw="The service specified by &lt;paramref name=&quot;serviceType&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the service could not be created.">O serviço especificado por <paramref name="serviceType" /> ou então <see langword="null" />, se o serviço não pôde ser criado.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary vsli:raw="Defines identifiers for the standard set of commands that are available to most applications.">Define os identificadores para o conjunto padrão de comandos disponíveis para a maioria dos aplicativos.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardCommands&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.StandardCommands" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignBottom command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando AlignBottom. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignHorizontalCenters command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando AlignHorizontalCenters. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignLeft command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando AlignLeft. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignRight command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando AlignRight. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignToGrid command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando AlignToGrid. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignTop command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando AlignTop. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignVerticalCenters command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando AlignVerticalCenters. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeBottom command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando ArrangeBottom. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeIcons command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando ArrangeIcons. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeRight command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando ArrangeRight. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringForward command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando BringForward. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringToFront command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando BringToFront. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterHorizontally command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando CenterHorizontally. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterVertically command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando CenterVertically. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Copy command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Copy. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Cut command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Cut. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Delete command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Delete. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Document Outline command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Document Outline. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the F1Help command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando F1Help. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Group command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Group. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceConcatenate command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando HorizSpaceConcatenate. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceDecrease command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando HorizSpaceDecrease. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceIncrease command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando HorizSpaceIncrease. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceMakeEqual command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando HorizSpaceMakeEqual. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LineupIcons command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando LineupIcons. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LockControls command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando LockControls. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelRedo command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando MultiLevelRedo. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelUndo command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando MultiLevelUndo. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Paste command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Paste. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Properties command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Properties. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the PropertiesWindow command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando PropertiesWindow. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Redo command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Redo. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Replace command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Replace. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SelectAll command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SelectAll. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendBackward command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SendBackward. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendToBack command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SendToBack. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowGrid command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando ShowGrid. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowLargeIcons command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando ShowLargeIcons. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControl command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SizeToControl. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlHeight command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SizeToControlHeight. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlWidth command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SizeToControlWidth. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToFit command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SizeToFit. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToGrid command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SizeToGrid. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SnapToGrid command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SnapToGrid. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the TabOrder command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando TabOrder. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Undo command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Undo. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Ungroup command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Ungroup. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary vsli:raw="Gets the first of a set of verbs. This field is read-only.">Obtém o primeiro de um conjunto de verbos. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary vsli:raw="Gets the last of a set of verbs. This field is read-only.">Obtém o último de um conjunto de verbos. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceConcatenate command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando VertSpaceConcatenate. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceDecrease command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando VertSpaceDecrease. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceIncrease command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando VertSpaceIncrease. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceMakeEqual command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando VertSpaceMakeEqual. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewCode command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando ViewCode. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewGrid command. This field is read-only.">Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando ViewGrid. Este campo é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary vsli:raw="Defines GUID identifiers that correspond to the standard set of tool windows that are available in the design environment.">Define os identificadores GUID que correspondem ao conjunto padrão de janelas de ferramentas disponíveis no ambiente de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardToolWindows&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.StandardToolWindows" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary vsli:raw="Gets the GUID for the object browser. This field is read-only.">Obtém o GUID do pesquisador de objetos. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary vsli:raw="Gets the GUID for the output window. This field is read-only.">Obtém o GUID da janela de saída. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary vsli:raw="Gets the GUID for the solution explorer. This field is read-only.">Obtém o GUID do gerenciador de soluções. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary vsli:raw="Gets the GUID for the Properties window. This field is read-only.">Obtém o GUID da janela Propriedades. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary vsli:raw="Gets the GUID for the related links frame. This field is read-only.">Obtém o GUID do quadro de links relacionados. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary vsli:raw="Gets the GUID for the server explorer. This field is read-only.">Obtém o GUID do gerenciador de servidores. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary vsli:raw="Gets the GUID for the task list. This field is read-only.">Obtém o GUID da lista de tarefas. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary vsli:raw="Gets the GUID for the Toolbox. This field is read-only.">Obtém o GUID da caixa de ferramentas. Este campo é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary vsli:raw="Provides a type description provider for a specified type.">Fornece um provedor de descrição de tipo para um tipo especificado.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.TypeDescriptionProviderService&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary vsli:raw="Gets a type description provider for the specified object.">Obtém um provedor de descrição de tipo para o objeto especificado.</summary>
      <param name="instance" vsli:raw="The object to get a type description provider for.">O objeto para obter um provedor de descrição de tipo para.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;instance&quot; /&gt;.">Um <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> que corresponde à <paramref name="instance" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary vsli:raw="Gets a type description provider for the specified type.">Obtém um provedor de descrição de tipo para o tipo especificado.</summary>
      <param name="type" vsli:raw="The type to get a type description provider for.">O tipo para obter um provedor de descrição de tipo para.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;type&quot; /&gt;.">Um <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> que corresponde à <paramref name="type" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary vsli:raw="Defines identifiers for a set of technologies that designer hosts support.">Define os identificadores de um conjunto de tecnologias compatíveis com hosts de designer.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary vsli:raw="Specifies the default view technology support.&#xA;        &#xA;The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host. Hosting environments such as Visual Studio provide a way to plug in new view technology adapters. The default view object for the Windows Forms designer is a &lt;see cref=&quot;T:System.Windows.Forms.Control&quot; /&gt; instance.">Especifica o suporte de tecnologia de exibição padrão.
O designer raiz pode retornar qualquer tipo de objeto, mas o objeto deve ser compatível com um adaptador para a tecnologia do host. Ambientes de hospedagem, como o Visual Studio, fornecem uma maneira de conectar novos adaptadores de tecnologia de exibição. O objeto de exibição padrão para o designer do Windows Forms é uma instância de <see cref="T:System.Windows.Forms.Control" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary vsli:raw="Represents a mode in which the view object is passed directly to the development environment.&#xA;        &#xA;The view object must implement any interfaces the development environment requires. The Visual Studio development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through the Visual Studio VSI (Visual Studio Integration) program. The Visual Studio development environment provides support for this view technology. Support for this view technology is not necessarily available in all development environments.">Representa um modo no qual o objeto de exibição é passado diretamente para o ambiente de desenvolvimento.
O objeto de exibição deve implementar qualquer interface exigida pelo ambiente de desenvolvimento. O ambiente de desenvolvimento do Visual Studio dá suporte a objetos de exibição que são um controle ActiveX, um documento ativo ou um objeto que implementa a interface IVsWindowPane disponível por meio do programa VSI (Visual Studio Integration) do Visual Studio. O ambiente de desenvolvimento do Visual Studio dá suporte a esta tecnologia de exibição. Suporte para esta tecnologia de exibição não está necessariamente disponível em todos os ambientes de desenvolvimento.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary vsli:raw="Represents a mode in which a Windows Forms control object provides the display for the root designer. The designer host fills the development environment document window with the Windows Forms control.">Representa um modo no qual um objeto de controle do Windows Forms fornece a exibição para o designer raiz. O host do designer preenche a janela do documento do ambiente de desenvolvimento com o controle do Windows Forms.</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>Especifica a classe usada para implementar os serviços de tempo de design para um componente.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DesignerAttribute" /> usando o nome do tipo que fornece serviços de tempo de design.</summary>
      <param name="designerTypeName">A concatenação do nome totalmente qualificado do tipo que fornece serviços de tempo de design para o componente ao qual este atributo está associado e do nome do assembly no qual esse tipo reside.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DesignerAttribute" /> usando o tipo de designer e a classe base para o designer.</summary>
      <param name="designerTypeName">A concatenação do nome totalmente qualificado do tipo que fornece serviços de tempo de design para o componente ao qual este atributo está associado e do nome do assembly no qual esse tipo reside.</param>
      <param name="designerBaseTypeName">O nome totalmente qualificado da classe base a ser associada com a classe do designer.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DesignerAttribute" /> usando o nome da classe de designer e a classe base para o designer.</summary>
      <param name="designerTypeName">A concatenação do nome totalmente qualificado do tipo que fornece serviços de tempo de design para o componente ao qual este atributo está associado e do nome do assembly no qual esse tipo reside.</param>
      <param name="designerBaseType">Um <see cref="T:System.Type" /> que representa a classe base a ser associada ao <paramref name="designerTypeName" />.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DesignerAttribute" /> usando o tipo que fornece serviços de tempo de design.</summary>
      <param name="designerType">Um <see cref="T:System.Type" /> que representa a classe que fornece serviços de tempo de design para o componente ao qual este atributo está associado.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DesignerAttribute" /> usando os tipos do designer e a classe base do designer.</summary>
      <param name="designerType">Um <see cref="T:System.Type" /> que representa a classe que fornece serviços de tempo de design para o componente ao qual este atributo está associado.</param>
      <param name="designerBaseType">Um <see cref="T:System.Type" /> que representa a classe base a ser associada ao <paramref name="designerType" />.</param>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>Obtém o nome do tipo base deste designer.</summary>
      <returns>O nome do tipo base deste designer.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>Obtém o nome do tipo de designer associado a este atributo do designer.</summary>
      <returns>O nome do tipo de designer associado a este atributo de designer.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.Equals(System.Object)">
      <summary>Retorna se o valor do objeto especificado é igual ao <see cref="T:System.ComponentModel.DesignerAttribute" /> atual.</summary>
      <param name="obj">O objeto cuja igualdade de valor deve ser testada.</param>
      <returns>
        <see langword="true" /> se o valor do objeto especificado for igual do atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.TypeId">
      <summary>Obtém uma ID exclusiva para este tipo de atributo.</summary>
      <returns>Uma ID exclusiva para esse tipo de atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary vsli:raw="&lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; marks a component's visibility. If &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Yes&quot; /&gt; is present, a visual designer can show this component on a designer.">
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> marca a visibilidade de um componente. Se <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" /> estiver presente, um designer visual poderá mostrar esse componente em um designer.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; set to the default value of &lt;see langword=&quot;false&quot; /&gt;.">Cria um novo <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> definido para o valor padrão de <see langword="false" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; with the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property set to the given value in &lt;paramref name=&quot;visible&quot; /&gt;.">Cria um novo <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> com a propriedade <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> definida para o valor especificado em <paramref name="visible" />.</summary>
      <param name="visible" vsli:raw="The value that the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property will be set against.">O valor segundo o qual a propriedade <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> será definida.</param>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary vsli:raw="The default visibility which is &lt;see langword=&quot;Yes&quot; /&gt;.">A visibilidade padrão, que é <see langword="Yes" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="obj" vsli:raw="An Object to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Um Object a ser comparado a esta instância ou a uma referência nula (<see langword="Nothing" /> no Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> for igual ao tipo e ao valor dessa instância, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value.">Obtém um valor indicando se esta instância é igual ao valor de <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se está instância é igual ao valor de <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary vsli:raw="Marks a component as not visible in a visual designer.">Marca um componente como não visível em um designer visual.</summary>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary vsli:raw="Gets or sets whether the component should be shown at design time.">Obtém ou define se o componente deve ser mostrado em tempo de design.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this component should be shown at design time, or &lt;see langword=&quot;false&quot; /&gt; if it shouldn't.">
        <see langword="true" />Se esse componente deve ser mostrado em tempo de design ou <see langword="false" /> se não deveria.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary vsli:raw="Marks a component as visible in a visual designer.">Marca um componente como visível em um designer visual.</summary>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary vsli:raw="Provides a type converter to convert double-precision, floating point number objects to and from various other representations.">Fornece um conversor de tipo para converter objetos de número de ponto flutuante de precisão dupla de e para várias outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DoubleConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DoubleConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>Especifica o editor que deve ser usado para alterar uma propriedade. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EditorAttribute" /> com o editor padrão, que não é nenhum editor.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EditorAttribute" /> com o nome do tipo e o nome do tipo base do editor.</summary>
      <param name="typeName">O nome de tipo totalmente qualificado do editor.</param>
      <param name="baseTypeName">O tipo totalmente qualificado da classe base ou a interface a ser usada como uma chave de pesquisa para o editor. Essa classe deve ser ou deve ser derivada de <see cref="T:System.Drawing.Design.UITypeEditor" />.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EditorAttribute" /> com o nome do topo e o tipo base.</summary>
      <param name="typeName">O nome de tipo totalmente qualificado do editor.</param>
      <param name="baseType">O <see cref="T:System.Type" /> da classe base ou a interface a ser usado como uma chave de pesquisa para o editor. Essa classe deve ser ou deve ser derivada de <see cref="T:System.Drawing.Design.UITypeEditor" />.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EditorAttribute" /> com o tipo e tipo base.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo do editor.</param>
      <param name="baseType">O <see cref="T:System.Type" /> da classe base ou a interface a ser usado como uma chave de pesquisa para o editor. Essa classe deve ser ou deve ser derivada de <see cref="T:System.Drawing.Design.UITypeEditor" />.</param>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>Obtém o nome da classe base ou interface que serve como uma chave de pesquisa para este editor.</summary>
      <returns>O nome da classe base ou interface que serve como uma chave de pesquisa para esse editor.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>Obtém o nome da classe no editor no formato <see cref="P:System.Type.AssemblyQualifiedName" />.</summary>
      <returns>O nome da classe do editor no <see cref="P:System.Type.AssemblyQualifiedName" /> formato.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.Equals(System.Object)">
      <summary>Retorna se o valor do objeto especificado é igual ao <see cref="T:System.ComponentModel.EditorAttribute" /> atual.</summary>
      <param name="obj">O objeto cuja igualdade de valor deve ser testada.</param>
      <returns>
        <see langword="true" /> se o valor do objeto especificado for igual do objeto atual, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.TypeId">
      <summary>Obtém uma ID exclusiva para este tipo de atributo.</summary>
      <returns>Uma ID exclusiva para esse tipo de atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Enum&quot; /&gt; objects to and from various other representations.">Fornece um conversor de tipo para converter objetos <see cref="T:System.Enum" /> para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EnumConverter&quot; /&gt; class for the given type.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EnumConverter" /> para o caminho fornecido.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of enumeration to associate with this enumeration converter.">Um <see cref="T:System.Type" /> que representa o tipo de enumeração a ser associado a este conversor de enumeração.</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to an enumeration object using the specified context.">Obtém um valor que indica se este conversor pode converter um objeto no tipo de origem especificado para um objeto de enumeração usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Um <see cref="T:System.Type" /> que representa o tipo no qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; that can be used to sort the values of the enumeration.">Obtém um <see cref="T:System.Collections.IComparer" /> que pode ser usado para classificar os valores da enumeração.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; for sorting the enumeration values.">Um <see cref="T:System.Collections.IComparer" /> para classificar os valores de enumeração.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to an enumeration object.">Converte o objeto de valor especificado em um objeto de enumeração.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Um <see cref="T:System.Globalization.CultureInfo" /> opcional. Se não for fornecido, a cultura atual será assumida.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> não é um valor válido para o tipo de destino.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Converte o objeto de valor especificado para o tipo de destino especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Um <see cref="T:System.Globalization.CultureInfo" /> opcional. Se não for fornecido, a cultura atual será assumida.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">O <see cref="T:System.Type" /> para o qual converter o valor.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the enumeration.">
        <paramref name="value" /> não é um valor válido para a enumeração.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary vsli:raw="Specifies the type of the enumerator this converter is associated with.">Especifica o tipo de enumerador ao qual esse conversor está associado.</summary>
      <returns vsli:raw="The type of the enumerator this converter is associated with.">O tipo do enumerador ao qual este conversor está associado.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">Obtém uma coleção de valores padrão para o tipo de dados para o qual este validador é projetado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contém um conjunto padrão de valores válidos ou <see langword="null" />, se o tipo de dados não der suporte a um conjunto padrão de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list using the specified context.">Obtém um valor que indica se a lista de valores padrão retornados do método <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> é uma lista exclusiva usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" /> se o <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retornado de <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> for uma lista completa de valores possíveis, <see langword="false" /> se houver outros valores possíveis.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">Obtém um valor que indica se esse objeto dá suporte a um conjunto padrão de valores que podem ser escolhidos em uma lista usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> porque <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> deve ser chamado para localizar um conjunto comum de valores aos quais o objeto dá suporte. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Gets a value indicating whether the given object value is valid for this type.">Obtém um valor que indica se o valor de objeto fornecido é válido para este tipo.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test.">O <see cref="T:System.Object" /> a ser testado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor especificado for válido para esse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary vsli:raw="Gets or sets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">Obtém ou define um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que especifica os valores possíveis para a enumeração.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> valor que especifica os valores possíveis para a enumeração.</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary vsli:raw="Provides information about an event.">Fornece informações sobre um evento.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EventDescriptor" /> com o nome e os atributos no <see cref="T:System.ComponentModel.MemberDescriptor" /> especificado.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the event and its attributes.">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que contém o nome do evento e seus atributos.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EventDescriptor" /> com o nome no <see cref="T:System.ComponentModel.MemberDescriptor" /> especificado e os atributos tanto no <see cref="T:System.ComponentModel.MemberDescriptor" /> quanto na matriz <see cref="T:System.Attribute" />.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que tem o nome do membro e seus atributos.</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes you want to add to this event description.">Uma matriz <see cref="T:System.Attribute" /> com os atributos que você deseja adicionar a esta descrição do evento.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the specified name and attribute array.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EventDescriptor" /> com o nome e a matriz de atributo especificados.</summary>
      <param name="name" vsli:raw="The name of the event.">O nome do evento.</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the event attributes.">Uma matriz do tipo <see cref="T:System.Attribute" /> que contém os atributos de evento.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, binds the event to the component.">Quando substituído em uma classe derivada, associa o evento ao componente.</summary>
      <param name="component" vsli:raw="A component that provides events to the delegate.">Um componente que fornece eventos para o delegado.</param>
      <param name="value" vsli:raw="A delegate that represents the method that handles the event.">Um delegado que representa o método que manipula o evento.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of component this event is bound to.">Quando substituído em uma classe derivada, obtém o tipo de componente ao qual esse evento está associado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component the event is bound to.">Um <see cref="T:System.Type" /> que representa o tipo de componente ao qual o evento está associado.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary vsli:raw="When overridden in a derived class, gets the type of delegate for the event.">Quando substituído em uma classe derivada, obtém o tipo de delegado do evento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of delegate for the event.">Um <see cref="T:System.Type" /> que representa o tipo de delegado para o evento.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the event delegate is a multicast delegate.">Quando substituído em uma classe derivada, obtém um valor que indica se o delegado do evento é um delegado multicast.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event delegate is multicast; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o representante do evento for multicast; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, unbinds the delegate from the component so that the delegate will no longer receive events from the component.">Quando substituído em uma classe derivada, desassocia o delegado do componente de forma que o delegado não receberá mais eventos do componente.</summary>
      <param name="component" vsli:raw="The component that the delegate is bound to.">O componente ao qual o delegado está associado.</param>
      <param name="value" vsli:raw="The delegate to unbind from the component.">O delegado a ser desassociado da lista.</param>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.ComponentModel.EventDescriptor" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EventDescriptorCollection" /> com a matriz determinada de objetos <see cref="T:System.ComponentModel.EventDescriptor" />.</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">Uma matriz do tipo <see cref="T:System.ComponentModel.EventDescriptor" /> que fornece os eventos para essa coleção.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects. The collection is optionally read-only.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EventDescriptorCollection" /> com a matriz determinada de objetos <see cref="T:System.ComponentModel.EventDescriptor" />. Opcionalmente, a coleção é somente leitura.</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">Uma matriz do tipo <see cref="T:System.ComponentModel.EventDescriptor" /> que fornece os eventos para essa coleção.</param>
      <param name="readOnly" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify a read-only collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para especificar uma coleção somente leitura; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Adds an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the end of the collection.">Adiciona um <see cref="T:System.ComponentModel.EventDescriptor" /> ao fim da coleção.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to add to the collection.">O <see cref="T:System.ComponentModel.EventDescriptor" /> a ser adicionado à coleção.</param>
      <returns vsli:raw="The position of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">A posição do <see cref="T:System.ComponentModel.EventDescriptor" /> dentro da coleção.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary vsli:raw="Removes all objects from the collection.">Remove todos os objetos da coleção.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">Retorna se a coleção contém o <see cref="T:System.ComponentModel.EventDescriptor" /> fornecido.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">O <see cref="T:System.ComponentModel.EventDescriptor" /> a ser localizado dentro da coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the &lt;paramref name=&quot;value&quot; /&gt; parameter given; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção contiver o parâmetro <paramref name="value" /> fornecido, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of event descriptors in the collection.">Obtém o número de descritores de evento na coleção.</summary>
      <returns vsli:raw="The number of event descriptors in the collection.">O número de descritores de eventos na coleção.</returns>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection to use, rather than creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Especifica uma coleção vazia a ser usada, em vez de criar uma nova sem nenhum item. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Gets the description of the event with the specified name in the collection.">Obtém a descrição do evento com o nome especificado na coleção.</summary>
      <param name="name" vsli:raw="The name of the event to get from the collection.">O nome do evento a ser obtido da coleção.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the event; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se você deseja ignorar a diferenciação entre minúsculas e maiúsculas no evento; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">O <see cref="T:System.ComponentModel.EventDescriptor" /> com o nome especificado ou <see langword="null" />, se o evento não existir.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Obtém um enumerador para este <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</summary>
      <returns vsli:raw="An enumerator that implements &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Um enumerador que implementa <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">Retorna o índice do <see cref="T:System.ComponentModel.EventDescriptor" /> fornecido.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">O <see cref="T:System.ComponentModel.EventDescriptor" /> a ser localizado dentro da coleção.</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">O índice do <see cref="T:System.ComponentModel.EventDescriptor" /> fornecido dentro da coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Inserts an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the collection at a specified index.">Insere um <see cref="T:System.ComponentModel.EventDescriptor" /> na coleção em um índice especificado.</summary>
      <param name="index" vsli:raw="The index within the collection in which to insert the &lt;paramref name=&quot;value&quot; /&gt; parameter.">O índice dentro da coleção na qual inserir o parâmetro <paramref name="value" />.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to insert into the collection.">O <see cref="T:System.ComponentModel.EventDescriptor" /> a ser inserido na coleção.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Classifica os membros deste <see cref="T:System.ComponentModel.EventDescriptorCollection" /> usando o <see cref="T:System.Collections.IComparer" />especificado.</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Um comparador a ser usado para classificar os objetos <see cref="T:System.ComponentModel.EventDescriptor" /> nesta coleção.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">Classifica os membros deste <see cref="T:System.ComponentModel.EventDescriptorCollection" />. A ordem especificada é aplicada primeiro, seguida pela classificação padrão para esta coleção, que é geralmente em ordem alfabética.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Uma matriz de cadeias de caracteres que descreve a ordem de classificação dos objetos <see cref="T:System.ComponentModel.EventDescriptor" /> nesta coleção.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the event with the specified index number.">Obtém ou define o evento com o número de índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index number of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">O número do índice de base zero do <see cref="T:System.ComponentModel.EventDescriptor" /> a ser obtido ou definido.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified index number.">O <see cref="T:System.ComponentModel.EventDescriptor" /> com o número de índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)&quot; /&gt;.">
        <paramref name="index" /> não é um índice válido para <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the event with the specified name.">Obtém ou define o evento com o nome especificado.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">O nome do <see cref="T:System.ComponentModel.EventDescriptor" /> a ser obtido ou definido.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">O <see cref="T:System.ComponentModel.EventDescriptor" /> com o nome especificado ou <see langword="null" />, se o evento não existir.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; from the collection.">Remove o <see cref="T:System.ComponentModel.EventDescriptor" /> especificado da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove from the collection.">O <see cref="T:System.ComponentModel.EventDescriptor" /> a ser removido da coleção.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; at the specified index from the collection.">Remove o <see cref="T:System.ComponentModel.EventDescriptor" /> no índice especificado da coleção.</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove.">O índice do <see cref="T:System.ComponentModel.EventDescriptor" /> a ser removido.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the default sort for this collection, which is usually alphabetical.">Classifica os membros deste <see cref="T:System.ComponentModel.EventDescriptorCollection" />, usando a classificação padrão para esta coleção, que é geralmente em ordem alfabética.</summary>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">O novo <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Classifica os membros deste <see cref="T:System.ComponentModel.EventDescriptorCollection" /> usando o <see cref="T:System.Collections.IComparer" />especificado.</summary>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Um <see cref="T:System.Collections.IComparer" /> a ser usado para classificar objetos <see cref="T:System.ComponentModel.EventDescriptor" /> nesta coleção.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">O novo <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order.">Classifica os membros deste <see cref="T:System.ComponentModel.EventDescriptorCollection" />, dada uma ordem de classificação especificada.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">Uma matriz de cadeias de caracteres que descreve a ordem de classificação dos objetos <see cref="T:System.ComponentModel.EventDescriptor" /> na coleção.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">O novo <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order and an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Classifica os membros deste <see cref="T:System.ComponentModel.EventDescriptorCollection" />, dada uma ordem de classificação especificada e um <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">Uma matriz de cadeias de caracteres que descreve a ordem de classificação dos objetos <see cref="T:System.ComponentModel.EventDescriptor" /> na coleção.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Um <see cref="T:System.Collections.IComparer" /> a ser usado para classificar objetos <see cref="T:System.ComponentModel.EventDescriptor" /> nesta coleção.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">O novo <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia os elementos da coleção para um <see cref="T:System.Array" />, começando em um índice <see cref="T:System.Array" /> específico.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados da coleção. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Obtém o número de elementos contidos na coleção.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">O número de elementos contidos na coleção.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized.">Obtém um valor que indica se o acesso à coleção é sincronizado.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o acesso à coleção for sincronizado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Obtém um objeto que pode ser usado para sincronizar o acesso à coleção.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Um objeto que pode ser usado para sincronizar o acesso à coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retorna um enumerador que itera em uma coleção.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">Adiciona um item à coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the collection.">O <see cref="T:System.Object" /> a adicionar à coleção.</param>
      <returns vsli:raw="The position into which the new element was inserted.">A posição na qual o novo elemento foi inserido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all the items from the collection.">Remove todos os itens da coleção.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">Determina se a coleção contém um valor específico.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">O <see cref="T:System.Object" /> a ser localizado na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Object" /> for encontrado na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">Determina o índice de um item específico na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">O <see cref="T:System.Object" /> a ser localizado na coleção.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">O índice de <paramref name="value" /> se encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the collection at the specified index.">Insere um item na coleção no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">O índice de base zero no qual o <paramref name="value" /> deve ser inserido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">O <see cref="T:System.Object" /> a ser inserido na coleção.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Obtém um valor que indica se a coleção tem um tamanho fixo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção tiver um tamanho fixo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Obtém um valor que indica se a coleção é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Obtém ou define o elemento no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">O índice com base em zero do elemento a ser obtido ou definido.</param>
      <returns vsli:raw="The element at the specified index.">O elemento no índice especificado.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">
        <paramref name="index" /> é menor que 0.
-ou-
<paramref name="index" /> é igual a ou maior que <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">Remove a primeira ocorrência de um objeto específico da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">O <see cref="T:System.Object" /> a ser removido da coleção.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Remove o item no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">O índice com base em zero do item a ser removido.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary vsli:raw="Provides a type converter to convert expandable objects to and from various other representations.">Fornece um conversor de tipo para converter objetos expansíveis de e para diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExpandableObjectConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ExpandableObjectConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of object specified by the value parameter.">Obtém uma coleção de propriedades para o tipo de objeto especificado pelo parâmetro de valor.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of object to get the properties for.">Um <see cref="T:System.Object" /> que especifica o tipo de objeto o qual obter as propriedades.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Uma matriz do tipo <see cref="T:System.Attribute" /> que será usada como um filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades expostas para o componente ou <see langword="null" />, se não houver nenhuma propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">Obtém um valor que indica se este objeto dá suporte às propriedades usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, porque <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> deve ser chamado para localizar as propriedades deste objeto. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary vsli:raw="Specifies a property that is offered by an extender provider. This class cannot be inherited.">Especifica uma propriedade que é oferecida por um provedor do extensor. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExtenderProvidedPropertyAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Um <see cref="T:System.Object" /> a ser comparado a esta instância ou a uma referência nula (<see langword="Nothing" /> no Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> for igual ao tipo e ao valor dessa instância, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary vsli:raw="Gets the property that is being provided.">Obtém a propriedade que está sendo fornecida.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; encapsulating the property that is being provided.">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> encapsulamento da propriedade que está sendo fornecida.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary vsli:raw="Provides an indication whether the value of this instance is the default value for the derived class.">Fornece uma indicação se o valor dessa instância for o valor padrão para a classe derivada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a instância for o atributo padrão para a classe; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary vsli:raw="Gets the extender provider that is providing the property.">Obtém o provedor do extensor que está fornecendo a propriedade.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that is providing the property.">O <see cref="T:System.ComponentModel.IExtenderProvider" /> que está fornecendo a propriedade.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary vsli:raw="Gets the type of object that can receive the property.">Obtém o tipo de objeto que pode receber a propriedade.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; describing the type of object that can receive the property.">Um <see cref="T:System.Type" /> que descreve o tipo de objeto que pode receber a propriedade.</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Guid&quot; /&gt; objects to and from various other representations.">Fornece um conversor de tipo para converter objetos <see cref="T:System.Guid" /> para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.GuidConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.GuidConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a GUID object using the context.">Obtém um valor que indica se esse conversor pode converter um objeto do tipo de origem fornecido em um objeto GUID usando o contexto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Um <see cref="T:System.Type" /> que representa o tipo no qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a GUID object.">Converte o objeto fornecido em um objeto GUID.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Um <see cref="T:System.Globalization.CultureInfo" /> opcional. Se não for fornecido, a cultura atual será assumida.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">Converte o objeto especificado em outro tipo.</summary>
      <param name="context" vsli:raw="A formatter context.">Um contexto do formatador.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">A cultura na qual o <paramref name="value" /> será convertido.</param>
      <param name="value" vsli:raw="The object to convert.">O objeto a ser convertido.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">O tipo no qual converter o objeto.</param>
      <returns vsli:raw="The converted object.">O objeto convertido.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary vsli:raw="Provides data for events that can be handled completely in an event handler.">Fornece dados de eventos que podem ser manipulados completamente em um manipulador de eventos.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with a default &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property value of &lt;see langword=&quot;false&quot; /&gt;.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.HandledEventArgs" /> com um valor da propriedade <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> padrão de <see langword="false" />.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with the specified default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.HandledEventArgs" /> com o valor padrão especificado para a propriedade <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />.</summary>
      <param name="defaultHandledValue" vsli:raw="The default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">O valor padrão para a propriedade <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />.</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary vsli:raw="Gets or sets a value that indicates whether the event handler has completely handled the event or whether the system should continue its own processing.">Obtém ou define um valor que indica se o manipulador de eventos tratou completamente o evento ou se o sistema deve continuar seu próprio processamento.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been completely handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o evento foi completamente manipulado; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary vsli:raw="Represents a method that can handle events which may or may not require further processing after the event handler has returned.">Representa um método que pode manipular eventos que podem ou não exigir processamento adicional depois que o manipulador de eventos é retornado.</summary>
      <param name="sender" vsli:raw="The source of the event.">A fonte do evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; that contains the event data.">Um <see cref="T:System.ComponentModel.HandledEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary vsli:raw="Provides the features required to support both complex and simple scenarios when binding to a data source.">Fornece os recursos necessários para dar suporte a cenários complexos e simples durante a associação de uma fonte de dados.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the indexes used for searching.">Adiciona o <see cref="T:System.ComponentModel.PropertyDescriptor" /> aos índices usados para pesquisa.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the indexes used for searching.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser adicionado aos índices usados para pesquisa.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary vsli:raw="Adds a new item to the list.">Adiciona um novo item à lista.</summary>
      <returns vsli:raw="The item added to the list.">O item adicionado à lista.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowNew&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> é <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary vsli:raw="Gets whether you can update items in the list.">Obtém se você pode atualizar itens na lista.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can update the items in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se você puder atualizar os itens na lista; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary vsli:raw="Gets whether you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">Especifica se é possível adicionar itens à lista usando <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se for possível adicionar itens à lista usando <see cref="M:System.ComponentModel.IBindingList.AddNew" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary vsli:raw="Gets whether you can remove items from the list, using &lt;see cref=&quot;M:System.Collections.IList.Remove(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.Collections.IList.RemoveAt(System.Int32)&quot; /&gt;.">Obtém se você pode remover os itens da lista, usando <see cref="M:System.Collections.IList.Remove(System.Object)" /> ou <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se você puder remover itens da lista; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;.">Classifica a lista com base em um <see cref="T:System.ComponentModel.PropertyDescriptor" /> e um <see cref="T:System.ComponentModel.ListSortDirection" />.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> pelo qual se classificar.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Um dos valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> é <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Returns the index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Retorna o índice da linha que tem o <see cref="T:System.ComponentModel.PropertyDescriptor" /> determinado.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> no qual pesquisar.</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;property&quot; /&gt; parameter to search for.">O valor do parâmetro <paramref name="property" /> a pesquisar.</param>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">O índice da linha que tem o <see cref="T:System.ComponentModel.PropertyDescriptor" /> determinado.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> é <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary vsli:raw="Gets whether the items in the list are sorted.">Especifica se os itens na lista são classificados.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> foi chamado e <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> não foi chamado; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> é <see langword="false" />.</exception>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary vsli:raw="Occurs when the list changes or an item in the list changes.">Ocorre quando a lista ou um item na lista é alterado.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the indexes used for searching.">Remove o <see cref="T:System.ComponentModel.PropertyDescriptor" /> dos índices usados para pesquisa.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> para remover os índices usados para pesquisa.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary vsli:raw="Removes any sort applied using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">Remove qualquer classificação aplicada usando <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> é <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary vsli:raw="Gets the direction of the sort.">Obtém a direção da classificação.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Um dos valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> é <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">Obtém o <see cref="T:System.ComponentModel.PropertyDescriptor" /> que está sendo usado para classificação.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> que está sendo usado para classificação.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> é <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary vsli:raw="Gets whether a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or an item in the list changes.">Especifica se um evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> é acionado quando a lista ou um item na lista é alterado.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> for acionado quando a lista ou um item for alterado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary vsli:raw="Gets whether the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method.">Obtém se a lista é compatível com pesquisa usando o método <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />se a lista der suporte à pesquisa <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> usando o método; <see langword="false" />caso contrário,.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary vsli:raw="Gets whether the list supports sorting.">Obtém se a lista é compatível com classificação.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a lista der suporte à classificação; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary vsli:raw="Extends the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; interface by providing advanced sorting and filtering capabilities.">Estende a interface de <see cref="T:System.ComponentModel.IBindingList" /> fornecendo recursos avançados de classificação e filtragem.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary vsli:raw="Sorts the data source based on the given &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">Classifica a fonte de dados com base no <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> determinado.</summary>
      <param name="sorts" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; containing the sorts to apply to the data source.">O <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> que contém as classificações a aplicar à fonte de dados.</param>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary vsli:raw="Gets or sets the filter to be used to exclude items from the collection of items returned by the data source.">Obtém ou define o filtro a ser usado para excluir itens da coleção de itens retornados pela fonte de dados.</summary>
      <returns vsli:raw="The string used to filter items out in the item collection returned by the data source.">A cadeia de caracteres usada para filtrar itens na coleção de itens retornados pela fonte de dados.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary vsli:raw="Removes the current filter applied to the data source.">Remove o filtro atual aplicado à fonte de dados.</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary vsli:raw="Gets the collection of sort descriptions currently applied to the data source.">Obtém a coleção de descrições de classificação atualmente aplicadas à fonte de dados.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; currently applied to the data source.">O <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> atualmente aplicado à fonte de dados.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary vsli:raw="Gets a value indicating whether the data source supports advanced sorting.">Obtém um valor que indica se a fonte de dados é compatível com classificação avançada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports advanced sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a fonte de dados der suporte à classificação avançada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary vsli:raw="Gets a value indicating whether the data source supports filtering.">Obtém um valor que indica se a fonte de dados dá suporte à filtragem.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports filtering; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a fonte de dados oferecer suporte à filtragem; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary vsli:raw="Adds transactional capability when adding a new item to a collection.">Adiciona a funcionalidade transacional durante a adição de um novo item a uma coleção.</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item from the collection.">Descarta um novo item pendente da coleção.</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">O índice do item que foi adicionado anteriormente à coleção.</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">Confirma um novo item pendente para a coleção.</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">O índice do item que foi adicionado anteriormente à coleção.</param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary vsli:raw="Provides a top-level mapping layer between a COM object and a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Fornece uma camada de mapeamento de nível superior entre um objeto COM e um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary vsli:raw="Gets the attributes for the specified component.">Obtém os atributos para o componente especificado.</summary>
      <param name="component" vsli:raw="The component to get attributes for.">O componente para o qual obter os atributos.</param>
      <returns vsli:raw="A collection of attributes for &lt;paramref name=&quot;component&quot; /&gt;.">Uma coleção de atributos para <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary vsli:raw="Gets the class name for the specified component.">Obtém o nome de classe para o componente especificado.</summary>
      <param name="component" vsli:raw="The component to get the class name for.">O componente para o qual obter o nome de classe.</param>
      <returns vsli:raw="The name of the class that corresponds with &lt;paramref name=&quot;component&quot; /&gt;.">O nome da classe que corresponde a <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary vsli:raw="Gets the type converter for the specified component.">Obtém o conversor de tipo para o componente especificado.</summary>
      <param name="component" vsli:raw="The component to get the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for.">O componente para o qual obter <see cref="T:System.ComponentModel.TypeConverter" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for &lt;paramref name=&quot;component&quot; /&gt;.">O <see cref="T:System.ComponentModel.TypeConverter" /> para <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Gets the default event for the specified component.">Obtém o evento padrão para o componente especificado.</summary>
      <param name="component" vsli:raw="The component to get the default event for.">O componente para o qual obter o evento padrão.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default event.">Um <see cref="T:System.ComponentModel.EventDescriptor" /> que representa o evento padrão de <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Gets the default property for the specified component.">Obtém a propriedade padrão para o componente especificado.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">O componente para o qual obter a propriedade padrão.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default property.">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representa a propriedade padrão de <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets the editor for the specified component.">Obtém o editor para o componente especificado.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">O componente para o qual obter o editor.</param>
      <param name="baseEditorType" vsli:raw="The base type of the editor for &lt;paramref name=&quot;component&quot; /&gt;.">O tipo base do editor para <paramref name="component" />.</param>
      <returns vsli:raw="The editor for &lt;paramref name=&quot;component&quot; /&gt;.">O editor para <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary vsli:raw="Gets the events for the specified component.">Obtém os eventos para o componente especificado.</summary>
      <param name="component" vsli:raw="The component to get events for.">O componente para o qual obter eventos.</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">Uma coleção de descritores de eventos para <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the events with the specified attributes for the specified component.">Obtém os eventos com os atributos especificados para o componente especificado.</summary>
      <param name="component" vsli:raw="The component to get events for.">O componente para o qual obter eventos.</param>
      <param name="attributes" vsli:raw="The attributes used to filter events.">Os atributos usados para filtrar os eventos.</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">Uma coleção de descritores de eventos para <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">Obtém o nome do componente especificado.</summary>
      <param name="component" vsli:raw="The component to get the name of.">O componente do qual obter o nome.</param>
      <returns vsli:raw="The name of &lt;paramref name=&quot;component&quot; /&gt;.">O nome de <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the properties with the specified attributes for the specified component.">Obtém as propriedades com os atributos especificados para o componente especificado.</summary>
      <param name="component" vsli:raw="The component to get events for.">O componente para o qual obter eventos.</param>
      <param name="attributes" vsli:raw="The attributes used to filter properties.">Os atributos usados para filtrar propriedades.</param>
      <returns vsli:raw="A collection of property descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">Uma coleção de descritores de propriedade para <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified dispatch identifier.">Obtém o valor da propriedade que tem o identificador de expedição especificado.</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">O objeto ao qual a propriedade pertence.</param>
      <param name="dispid" vsli:raw="The dispatch identifier.">O identificador de expedição.</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">Um <see cref="T:System.Boolean" />, passado por referência, que indica se a propriedade foi recuperada.</param>
      <returns vsli:raw="The value of the property that has the specified dispatch identifier.">O valor da propriedade que tem o identificador de expedição especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified name.">Obtém o valor da propriedade que tem o nome especificado.</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">O objeto ao qual a propriedade pertence.</param>
      <param name="propertyName" vsli:raw="The name of the property.">O nome da propriedade.</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">Um <see cref="T:System.Boolean" />, passado por referência, que indica se a propriedade foi recuperada.</param>
      <returns vsli:raw="The value of the property that has the specified name.">O valor da propriedade que tem o nome especificado.</returns>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary vsli:raw="Provides an interface that supplies dynamic custom type information for an object.">Fornece uma interface que concede informações de tipo personalizado dinâmico para um objeto.</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for this instance of a component.">Retorna uma coleção de atributos personalizados para esta instância de um componente.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for this object.">Um <see cref="T:System.ComponentModel.AttributeCollection" /> que contém os atributos para esse objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the class name of this instance of a component.">Retorna o nome de classe desta instância de um componente.</summary>
      <returns vsli:raw="The class name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the class does not have a name.">O nome de classe do objeto ou <see langword="null" /> se a classe não tiver um nome.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of this instance of a component.">Retorna o nome desta instância de um componente.</summary>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object does not have a name.">O nome do objeto ou <see langword="null" /> se o objeto não tiver um nome.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for this instance of a component.">Retorna um conversor de tipo para esta instância de um componente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is the converter for this object, or &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for this object.">Um <see cref="T:System.ComponentModel.TypeConverter" /> que é o conversor para esse objeto ou <see langword="null" />, se não houver nenhum <see cref="T:System.ComponentModel.TypeConverter" /> para este objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the default event for this instance of a component.">Retorna o evento padrão para esta instância de um componente.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents the default event for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have events.">Um <see cref="T:System.ComponentModel.EventDescriptor" /> que representa o evento padrão para esse objeto ou <see langword="null" />, se este objeto não tiver eventos.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the default property for this instance of a component.">Retorna a propriedade padrão para esta instância de um componente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the default property for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have properties.">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representa a propriedade padrão para esse objeto ou <see langword="null" />, se este objeto não tiver propriedades.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type for this instance of a component.">Retorna um editor do tipo especificado para esta instância de um componente.</summary>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the editor for this object.">Um <see cref="T:System.Type" /> que representa o editor para esse objeto.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type that is the editor for this object, or &lt;see langword=&quot;null&quot; /&gt; if the editor cannot be found.">Um <see cref="T:System.Object" /> do tipo especificado que é o editor para esse objeto ou <see langword="null" />, se não for possível encontrar o editor.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns the events for this instance of a component.">Retorna os eventos desta instância de um componente.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the events for this component instance.">Um <see cref="T:System.ComponentModel.EventDescriptorCollection" /> que representa os eventos da instância deste componente.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns the events for this instance of a component using the specified attribute array as a filter.">Retorna os eventos desta instância de um componente usando a matriz de atributos especificada como um filtro.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Uma matriz do tipo <see cref="T:System.Attribute" /> que é usada como um filtro.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the filtered events for this component instance.">Um <see cref="T:System.ComponentModel.EventDescriptorCollection" /> que representa os eventos filtrados da instância deste componente.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns the properties for this instance of a component.">Retorna as propriedades desta instância de um componente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties for this component instance.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que representa as propriedades da instância deste componente.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns the properties for this instance of a component using the attribute array as a filter.">Retorna as propriedades desta instância de um componente usando a matriz de atributos como um filtro.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Uma matriz do tipo <see cref="T:System.Attribute" /> que é usada como um filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the filtered properties for this component instance.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que representa as propriedades filtradas da instância deste componente.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">Retorna um objeto que contém a propriedade descrita pelo descritor de propriedade especificado.</summary>
      <param name="pd" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the property whose owner is to be found.">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representa a propriedade cujo proprietário deve ser encontrado.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the owner of the specified property.">Um <see cref="T:System.Object" /> que representa o proprietário da propriedade especificada.</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary vsli:raw="Provides the functionality to offer custom error information that a user interface can bind to.">Fornece a funcionalidade para oferecer informações de erro personalizadas as quais uma interface do usuário pode se associar.</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary vsli:raw="Gets an error message indicating what is wrong with this object.">Obtém uma mensagem de erro que indica o que há de errado com esse objeto.</summary>
      <returns vsli:raw="An error message indicating what is wrong with this object. The default is an empty string (&quot;&quot;).">Uma mensagem de erro que indica o que há de errado com esse objeto. O padrão é uma cadeia de caracteres vazia ("").</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary vsli:raw="Gets the error message for the property with the given name.">Obtém a mensagem de erro da propriedade com o nome fornecido.</summary>
      <param name="columnName" vsli:raw="The name of the property whose error message to get.">O nome da propriedade cuja mensagem de erro será obtida.</param>
      <returns vsli:raw="The error message for the property. The default is an empty string (&quot;&quot;).">A mensagem de erro da propriedade. O padrão é uma cadeia de caracteres vazia ("").</returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary vsli:raw="Defines the interface for extending properties to other components in a container.">Define a interface para estender propriedades para outros componentes em um contêiner.</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary vsli:raw="Specifies whether this object can provide its extender properties to the specified object.">Especifica se este objeto pode fornecer suas propriedades estendidas ao objeto especificado.</summary>
      <param name="extendee" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to receive the extender properties.">O <see cref="T:System.Object" /> para receber as propriedades de extensão.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can provide extender properties to the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se este objeto puder fornecer propriedades de extensão ao objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary vsli:raw="Provides an interface to facilitate the retrieval of the builder's name and to display the builder.">Fornece uma interface para facilitar a recuperação do nome do construtor e exibir o construtor.</summary>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary vsli:raw="Gets a localized name.">Obtém um nome localizado.</summary>
      <returns vsli:raw="A localized name.">Um nome localizado.</returns>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary vsli:raw="Shows the builder.">Mostra o construtor.</summary>
      <param name="language" vsli:raw="The language service that is calling the builder.">O serviço de linguagem que está chamando o construtor.</param>
      <param name="value" vsli:raw="The expression being edited.">A expressão que está sendo editada.</param>
      <param name="newValue" vsli:raw="The new value.">O novo valor.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value should be replaced with &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt; (if the user cancels, for example).">
        <see langword="true" /> se o valor precisar ser substituído por <paramref name="newValue" />; caso contrário, <see langword="false" /> (se o usuário cancelar, por exemplo).</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary vsli:raw="Provides functionality to an object to return a list that can be bound to a data source.">Fornece funcionalidade para um objeto retornar uma lista que pode ser associada a uma fonte de dados.</summary>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary vsli:raw="Gets a value indicating whether the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects.">Obtém um valor que indica se a coleção é uma coleção de objetos <see cref="T:System.Collections.IList" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção for uma coleção de objetos <see cref="T:System.Collections.IList" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from an object that does not implement an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; itself.">Retorna um <see cref="T:System.Collections.IList" /> que pode ser associado a uma fonte de dados de um objeto que não implementa um <see cref="T:System.Collections.IList" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from the object.">Um <see cref="T:System.Collections.IList" /> que pode ser associado a uma fonte de dados de objeto.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary vsli:raw="Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.">Fornece funcionalidade para contêineres aninhados, que logicamente contêm zero ou mais outros componentes e pertencem a um componente pai.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for the nested container.">Obtém o componente proprietário do contêiner aninhado.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns the nested container.">O <see cref="T:System.ComponentModel.IComponent" /> que possui o contêiner aninhado.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary vsli:raw="Provides the ability to retrieve the full nested name of a component.">Fornece a capacidade de recuperar o nome completo aninhado de um componente.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary vsli:raw="Gets the full name of the component in this site.">Obtém o nome completo do componente neste site.</summary>
      <returns vsli:raw="The full name of the component in this site.">O nome completo do componente neste site.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary vsli:raw="Indicates whether the component associated with this attribute has been inherited from a base class. This class cannot be inherited.">Indica se o componente associado a esse atributo foi herdado de uma classe base. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InheritanceAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class with the specified inheritance level.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InheritanceAttribute" /> com o nível de herança especificado.</summary>
      <param name="inheritanceLevel" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; that indicates the level of inheritance to set this attribute to.">Um <see cref="T:System.ComponentModel.InheritanceLevel" /> que indica o nível de herança para o qual definir esse atributo.</param>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary vsli:raw="Specifies that the default value for &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; is &lt;see cref=&quot;F:System.ComponentModel.InheritanceAttribute.NotInherited&quot; /&gt;. This field is read-only.">Especifica o valor padrão para <see cref="T:System.ComponentModel.InheritanceAttribute" /> é <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" />. Este campo é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary vsli:raw="Override to test for equality.">Substituição para testar a igualdade.</summary>
      <param name="value" vsli:raw="The object to test.">O objeto a ser testado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is the same; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o objeto for o mesmo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">Retorna o código hash para esse objeto.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">Um código hash do <see cref="T:System.ComponentModel.InheritanceAttribute" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary vsli:raw="Gets or sets the current inheritance level stored in this attribute.">Obtém ou define o nível atual de herança armazenado nesse atributo.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; stored in this attribute.">O <see cref="T:System.ComponentModel.InheritanceLevel" /> armazenado nesse atributo.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary vsli:raw="Specifies that the component is inherited. This field is read-only.">Especifica que o componente é herdado. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary vsli:raw="Specifies that the component is inherited and is read-only. This field is read-only.">Especifica que o componente é herdado e somente leitura. Este campo é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">Obtém um valor que indica se o valor atual do atributo é o valor padrão do atributo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor atual do atributo é o padrão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary vsli:raw="Specifies that the component is not inherited. This field is read-only.">Especifica que o componente não é herdado. Este campo é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary vsli:raw="Converts this attribute to a string.">Converte este atributo em uma cadeia de caracteres.</summary>
      <returns vsli:raw="A string that represents this &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">Uma cadeia de caracteres que representa este <see cref="T:System.ComponentModel.InheritanceAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary vsli:raw="Defines identifiers for types of inheritance levels.">Define os identificadores de tipos de níveis de herança.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary vsli:raw="The object is inherited.">O objeto é herdado.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary vsli:raw="The object is inherited, but has read-only access.">O objeto é herdado, mas tem acesso somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary vsli:raw="The object is not inherited.">O objeto não é herdado.</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary vsli:raw="Specifies the installer for a type that installs components.">Especifica o instalador para um tipo que instala os componentes.</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class with the name of the component's installer type.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> com o nome do tipo de instalador do componente.</summary>
      <param name="typeName" vsli:raw="The name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">O nome de um <see cref="T:System.Type" /> que representa o instalador para o componente ao qual esse atributo está associado. Essa classe deve implementar <see cref="T:System.ComponentModel.Design.IDesigner" />.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class, when given a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for a component.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> quando é fornecido um <see cref="T:System.Type" /> que representa o instalador para um componente.</summary>
      <param name="installerType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">Um <see cref="T:System.Type" /> que representa o instalador para o componente ao qual esse atributo está associado. Essa classe deve implementar <see cref="T:System.ComponentModel.Design.IDesigner" />.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">Retorna se o valor do objeto especificado é igual ao <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> atual.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">O objeto cuja igualdade de valor deve ser testada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do objeto especificado for igual do atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">Retorna o código hash para esse objeto.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">Um código hash do <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary vsli:raw="Gets the type of installer associated with this attribute.">Obtém o tipo de instalador associado a este atributo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of installer associated with this attribute, or &lt;see langword=&quot;null&quot; /&gt; if an installer does not exist.">Um <see cref="T:System.Type" /> que representa o tipo de instalador associado a este atributo ou <see langword="null" /> se um instalador não existir.</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary vsli:raw="Creates an instance of a particular type of property from a drop-down box within the &lt;see cref=&quot;T:System.Windows.Forms.PropertyGrid&quot; /&gt;.">Cria uma instância de um determinado tipo de propriedade de uma caixa suspensa dentro de <see cref="T:System.Windows.Forms.PropertyGrid" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstanceCreationEditor&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InstanceCreationEditor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="When overridden in a derived class, returns an instance of the specified type.">Quando substituído em uma classe derivada, retorna uma instância do tipo especificado.</summary>
      <param name="context" vsli:raw="The context information.">As informações de contexto.</param>
      <param name="instanceType" vsli:raw="The specified type.">O tipo especificado.</param>
      <returns vsli:raw="An instance of the specified type or &lt;see langword=&quot;null&quot; /&gt;.">Uma instância do tipo <see langword="null" /> especificado.</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary vsli:raw="Gets the specified text.">Obtém o texto especificado.</summary>
      <returns vsli:raw="The specified text.">O texto especificado.</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit signed integer objects to and from other representations.">Fornece um conversor de tipo para converter objetos de tipo inteiro com sinal de 16 bits para e de outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int16Converter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Int16Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit signed integer objects to and from other representations.">Fornece um conversor de tipo para converter objetos de tipo inteiro com sinal de 32 bits para e a partir de outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int32Converter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Int32Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit signed integer objects to and from various other representations.">Fornece um conversor de tipo para converter objetos de tipo inteiro com sinal de 64 bits para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int64Converter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Int64Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.InvalidAsynchronousStateException">
      <summary>Acionada quando um thread no qual uma operação que deva ser executada não existe mais ou não tem nenhum loop de mensagem.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> com o <see cref="T:System.Runtime.Serialization.SerializationInfo" /> e o <see cref="T:System.Runtime.Serialization.StreamingContext" /> fornecidos.</summary>
      <param name="info">O <see cref="T:System.Runtime.Serialization.SerializationInfo" /> a ser usado para desserialização.</param>
      <param name="context">O destino a ser usado para desserialização.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> com a descrição detalhada especificada.</summary>
      <param name="message">Uma descrição detalhada do erro.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> com a descrição detalhada e a exceção especificadas.</summary>
      <param name="message">Uma descrição detalhada do erro.</param>
      <param name="innerException">Uma referência à exceção interna que é a causa dessa exceção.</param>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary vsli:raw="Indicates whether a class converts property change events to &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">Indica se uma classe converte eventos de alteração de propriedade para eventos <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">Obtém um valor que indica se o objeto <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> gera eventos <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events when one of its property values changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> objeto gerar <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> eventos quando um de seus valores de propriedade for alterado; <see langword="false" />caso contrário,.</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary vsli:raw="Allows coordination of initialization for a component and its dependent properties.">Permite a coordenação da inicialização para um componente e suas propriedades dependentes.</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary vsli:raw="Occurs when initialization of the component is completed.">Ocorre quando a inicialização do componente é concluída.</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary vsli:raw="Gets a value indicating whether the component is initialized.">Obtém um valor que indica se o componente é inicializado.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the component has completed initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />para indicar que o componente concluiu a inicialização; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary vsli:raw="Provides contextual information about a component, such as its container and property descriptor.">Fornece informações contextuais sobre um componente, como seu descritor de propriedade e contêiner.</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary vsli:raw="Gets the container representing this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; request.">Obtém o contêiner que representa esta solicitação <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with the set of objects for this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no container or if the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; does not use outside objects.">Um <see cref="T:System.ComponentModel.IContainer" /> com o conjunto de objetos para isso <see cref="T:System.ComponentModel.TypeDescriptor" />; caso contrário <see langword="null" /> , se não houver nenhum contêiner ou se <see cref="T:System.ComponentModel.TypeDescriptor" /> o não usar objetos externos.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary vsli:raw="Gets the object that is connected with this type descriptor request.">Obtém o objeto conectado a essa solicitação de descritor de tipo.</summary>
      <returns vsli:raw="The object that invokes the method on the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no object responsible for the call.">O objeto que invoca o método no <see cref="T:System.ComponentModel.TypeDescriptor" />; caso contrário, <see langword="null" /> se não houver nenhum objeto responsável pela chamada.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">Aciona o evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">Aciona o evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can be changed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse objeto pode ser alterado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is associated with the given context item.">Obtém o <see cref="T:System.ComponentModel.PropertyDescriptor" /> associado ao item de contexto fornecido.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the given context item; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; responsible for the call.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> que descreve o item de contexto fornecido; caso <see langword="null" /> contrário, se não <see cref="T:System.ComponentModel.PropertyDescriptor" /> houver nenhum responsável pela chamada.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary vsli:raw="Provides functionality to discover the schema for a bindable list, where the properties available for binding differ from the public properties of the object to bind to.">Oferece funcionalidades para descobrir o esquema da lista vinculável, em que as propriedades disponíveis para associação são diferentes das propriedades públicas aos quais o objeto será associado.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">Retorna o <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que representa as propriedades em cada item usado para associar os dados.</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to find in the collection as bindable. This can be &lt;see langword=&quot;null&quot; /&gt;.">Uma matriz de objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> a serem encontrados na coleção como associáveis. Ele pode ser <see langword="null" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">O <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que representa as propriedades em cada item usado para associar os dados.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the name of the list.">Retorna o nome da lista.</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects, for which the list name is returned. This can be &lt;see langword=&quot;null&quot; /&gt;.">Uma matriz de objetos <see cref="T:System.ComponentModel.PropertyDescriptor" />, para a qual o nome da lista é retornado. Ele pode ser <see langword="null" />.</param>
      <returns vsli:raw="The name of the list.">O nome da lista.</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for all licenses. A license is granted to a specific instance of a component.">Fornece a classe base <see langword="abstract" /> para todas as licenças. Uma licença é concedida a uma instância específica de um componente.</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.License" />.</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary vsli:raw="When overridden in a derived class, disposes of the resources used by the license.">Quando substituído em uma classe derivada, libera os recursos usados pela licença.</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary vsli:raw="When overridden in a derived class, gets the license key granted to this component.">Quando substituído em uma classe derivada, obtém a chave de licença concedida a esse componente.</summary>
      <returns vsli:raw="A license key granted to this component.">Uma chave de licença concedida a esse componente.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary vsli:raw="Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.">Especifica quando você pode usar um objeto licenciado e oferece uma maneira de obter os serviços adicionais necessários para dar suporte a licenças em execução em seu domínio.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseContext" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.">Quando substituído em uma classe derivada, retorna uma chave de licença salva para o tipo especificado do assembly de recurso especificado.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component.">Um <see cref="T:System.Type" /> que representa o tipo de componente.</param>
      <param name="resourceAssembly" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; with the license key.">Um <see cref="T:System.Reflection.Assembly" /> com a chave de licença.</param>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type. This method returns &lt;see langword=&quot;null&quot; /&gt; unless you override it.">O <see cref="P:System.ComponentModel.License.LicenseKey" /> para o tipo especificado. Este método retornará <see langword="null" />, a menos que você o substitua.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service, if it is available.">Obtém o serviço solicitado, se ele está disponível.</summary>
      <param name="type" vsli:raw="The type of service to retrieve.">O tipo de serviço a ser recuperado.</param>
      <returns vsli:raw="An instance of the service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be found.">Uma instância do serviço ou <see langword="null" /> se o serviço não puder ser localizado.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="When overridden in a derived class, sets a license key for the specified type.">Quando substituído em uma classe derivada, define uma chave de licença para o tipo especificado.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component associated with the license key.">Um <see cref="T:System.Type" /> que representa o componente associado à chave de licença.</param>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to save for the type of component.">O <see cref="P:System.ComponentModel.License.LicenseKey" /> a salvar para o tipo de componente.</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary vsli:raw="When overridden in a derived class, gets a value that specifies when you can use a license.">Quando substituído em uma classe derivada, obtém um valor que especifica quando você pode usar uma licença.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values that specifies when you can use a license. The default is &lt;see cref=&quot;F:System.ComponentModel.LicenseUsageMode.Runtime&quot; /&gt;.">Um dos <see cref="T:System.ComponentModel.LicenseUsageMode" /> valores que especifica quando você pode usar uma licença. O padrão é <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary vsli:raw="Represents the exception thrown when a component cannot be granted a license.">Representa a exceção lançada quando um componente não pode receber uma licença.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class with the given &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseException" /> com o <see cref="T:System.Runtime.Serialization.SerializationInfo" /> e o <see cref="T:System.Runtime.Serialization.StreamingContext" /> fornecidos.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">O <see cref="T:System.Runtime.Serialization.SerializationInfo" /> a ser usado para desserialização.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">O destino a ser usado para desserialização.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type of component that was denied a license.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseException" /> para o tipo de componente ao qual foi negada uma licença.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Um <see cref="T:System.Type" /> que representa o tipo de componente que não recebeu uma licença.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseException" /> para o tipo e a instância do componente que teve uma licença negada.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Um <see cref="T:System.Type" /> que representa o tipo de componente que não recebeu uma licença.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">A instância do componente que não recebeu uma licença.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseException" /> para o tipo e a instância do componente que teve uma licença negada, juntamente com uma mensagem a ser exibida.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Um <see cref="T:System.Type" /> que representa o tipo de componente que não recebeu uma licença.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">A instância do componente que não recebeu uma licença.</param>
      <param name="message" vsli:raw="The exception message to display.">A mensagem de exceção a ser exibida.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display and the original exception thrown.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseException" /> para o tipo e a instância do componente que teve uma licença negada, juntamente com uma mensagem a ser exibida e a exceção original gerada.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Um <see cref="T:System.Type" /> que representa o tipo de componente que não recebeu uma licença.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">A instância do componente que não recebeu uma licença.</param>
      <param name="message" vsli:raw="The exception message to display.">A mensagem de exceção a ser exibida.</param>
      <param name="innerException" vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the original exception.">Um <see cref="T:System.Exception" /> que representa a exceção original.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">Define o <see cref="T:System.Runtime.Serialization.SerializationInfo" /> com informações sobre a exceção.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">O <see cref="T:System.Runtime.Serialization.SerializationInfo" /> a ser usado para desserialização.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">O destino a ser usado para desserialização.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary vsli:raw="Gets the type of the component that was not granted a license.">Obtém o tipo de componente que não recebeu uma licença.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Um <see cref="T:System.Type" /> que representa o tipo de componente que não recebeu uma licença.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary vsli:raw="Provides properties and methods to add a license to a component and to manage a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. This class cannot be inherited.">Fornece propriedades e métodos para adicionar uma licença a um componente e gerenciar um <see cref="T:System.ComponentModel.LicenseProvider" />. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary vsli:raw="Creates an instance of the specified type, given a context in which you can use the licensed instance.">Cria uma instância do tipo especificado, dado um contexto no qual você pode usar a instância licenciada.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">Um <see cref="T:System.Type" /> que representa o tipo a ser criado.</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">Um <see cref="T:System.ComponentModel.LicenseContext" /> que especifica quando você pode usar a instância licenciada.</param>
      <returns vsli:raw="An instance of the specified type.">Uma instância do tipo especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary vsli:raw="Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.">Cria uma instância do tipo especificado com os argumentos especificados, dado um contexto no qual você pode usar a instância licenciada.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">Um <see cref="T:System.Type" /> que representa o tipo a ser criado.</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">Um <see cref="T:System.ComponentModel.LicenseContext" /> que especifica quando você pode usar a instância licenciada.</param>
      <param name="args" vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the arguments for the type.">Uma matriz do tipo <see cref="T:System.Object" /> que representa os argumentos do tipo.</param>
      <returns vsli:raw="An instance of the specified type with the given array of arguments.">Uma instância do tipo especificado com a matriz de argumentos fornecida.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary vsli:raw="Gets or sets the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt;, which specifies when you can use the licensed object.">Obtém ou define o <see cref="T:System.ComponentModel.LicenseContext" /> atual, que especifica quando você pode usar o objeto licenciado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed object.">Um <see cref="T:System.ComponentModel.LicenseContext" /> que especifica quando você pode usar o objeto licenciado.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property is currently locked and cannot be changed.">A propriedade <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> está bloqueada e não pode ser alterada.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary vsli:raw="Returns whether the given type has a valid license.">Retorna se o tipo fornecido tem uma licença válida.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to find a valid license for.">O <see cref="T:System.Type" /> para o qual uma licença válida deve ser encontrada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given type is licensed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o tipo fornecido for licenciado, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified type.">Determina se é possível conceder uma licença válida para o tipo especificado.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Um <see cref="T:System.Type" /> que representa o tipo de objeto que solicita a <see cref="T:System.ComponentModel.License" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid license can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se uma licença válida puder ser concedida, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Determina se é possível conceder uma licença válida para a instância especificada do tipo. Esse método cria uma <see cref="T:System.ComponentModel.License" /> válida.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">Um <see cref="T:System.Type" /> que representa o tipo de objeto que solicita a licença.</param>
      <param name="instance" vsli:raw="An object of the specified type or a type derived from the specified type.">Um objeto do tipo especificado ou um tipo derivado do tipo especificado.</param>
      <param name="license" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; that is a valid license, or &lt;see langword=&quot;null&quot; /&gt; if a valid license cannot be granted.">Uma <see cref="T:System.ComponentModel.License" /> que é uma licença válida ou <see langword="null" /> se não for possível conceder uma licença válida.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se uma <see cref="T:System.ComponentModel.License" /> válida puder ser concedida, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary vsli:raw="Prevents changes being made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">Impede que alterações sejam feitas no <see cref="T:System.ComponentModel.LicenseContext" /> atual do objeto especificado.</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to lock.">O objeto cujo contexto atual você deseja bloquear.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The context is already locked.">O contexto já está bloqueado.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary vsli:raw="Allows changes to be made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">Permite que alterações sejam feitas no <see cref="T:System.ComponentModel.LicenseContext" /> atual do objeto especificado.</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to unlock.">O objeto cujo contexto atual você deseja desbloquear.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;contextUser&quot; /&gt; represents a different user than the one specified in a previous call to &lt;see cref=&quot;M:System.ComponentModel.LicenseManager.LockContext(System.Object)&quot; /&gt;.">
        <paramref name="contextUser" /> representa um usuário diferente daquele especificado em uma chamada anterior para <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; which specifies when you can use the licensed object for the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt;.">Obtém o <see cref="T:System.ComponentModel.LicenseUsageMode" /> que especifica quando você pode usar o objeto licenciado para o <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values, as specified in the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property.">Um dos valores <see cref="T:System.ComponentModel.LicenseUsageMode" />, conforme especificado na propriedade <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary vsli:raw="Determines whether a license can be granted for the specified type.">Determina se é possível conceder uma licença para o tipo especificado.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">Um <see cref="T:System.Type" /> que representa o tipo de objeto que solicita a licença.</param>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">Uma <see cref="T:System.ComponentModel.License" /> não pode ser concedida.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary vsli:raw="Determines whether a license can be granted for the instance of the specified type.">Determina se é possível conceder uma licença para a instância do tipo especificado.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">Um <see cref="T:System.Type" /> que representa o tipo de objeto que solicita a licença.</param>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type or a type derived from the specified type.">Um <see cref="T:System.Object" /> do tipo especificado ou um tipo derivado do tipo especificado.</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Uma <see cref="T:System.ComponentModel.License" /> válida.</returns>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="The type is licensed, but a &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">O tipo é licenciado, mas uma <see cref="T:System.ComponentModel.License" /> não pode ser concedida.</exception>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for implementing a license provider.">Fornece a classe base <see langword="abstract" /> para implementar um provedor de licença.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.">Quando substituído em uma classe derivada, obtém uma licença para uma instância ou um tipo de componente, quando é fornecido um contexto e se a negação de uma licença gera uma exceção.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">Um <see cref="T:System.ComponentModel.LicenseContext" /> que especifica em que local você pode usar o objeto licenciado.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the license.">Um <see cref="T:System.Type" /> que representa o componente solicitando a licença.</param>
      <param name="instance" vsli:raw="An object that is requesting the license.">Um objeto que está solicitando a licença.</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when the component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um <see cref="T:System.ComponentModel.LicenseException" /> precisar ser gerado quando o componente não puder receber uma licença; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Uma <see cref="T:System.ComponentModel.License" /> válida.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary vsli:raw="Specifies the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; to use with a class. This class cannot be inherited.">Especifica o <see cref="T:System.ComponentModel.LicenseProvider" /> a usar com uma classe. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class without a license provider.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> sem um provedor de licença.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> com o tipo especificado.</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the license provider class.">O nome totalmente qualificado da classe do provedor de licença.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type of license provider.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> com o tipo de provedor de licença especificado.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider class.">Um <see cref="T:System.Type" /> que representa o tipo da classe do provedor de licença.</param>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary vsli:raw="Specifies the default value, which is no provider. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Especifica o valor padrão, que é nenhum provedor. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">Indica se essa instância e um objeto especificado são iguais.</summary>
      <param name="value" vsli:raw="Another object to compare to.">Outro objeto com o qual ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="value" /> for igual a essa instância; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt;.">Um código hash do <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary vsli:raw="Gets the license provider that must be used with the associated class.">Obtém o provedor de licença que deve ser usado com a classe associada.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider. The default value is &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.Type" /> que representa o tipo do provedor de licença. O valor padrão é <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary vsli:raw="Indicates a unique ID for this attribute type.">Indica uma ID exclusiva para este tipo de atributo.</summary>
      <returns vsli:raw="A unique ID for this attribute type.">Uma ID exclusiva para esse tipo de atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary vsli:raw="Specifies when the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be used.">Especifica quando o <see cref="T:System.ComponentModel.License" /> pode ser usado.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary vsli:raw="Used during design time by a visual designer or the compiler.">Usado durante o tempo de design por um designer visual ou o compilador.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary vsli:raw="Used during runtime.">Usado durante o tempo de execução.</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary vsli:raw="Provides an implementation of a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.">Fornece uma implementação de um <see cref="T:System.ComponentModel.LicenseProvider" />. O provedor funciona de maneira semelhante ao modelo de licenciamento padrão do Microsoft .NET Framework.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicFileLicenseProvider&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicFileLicenseProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary vsli:raw="Returns a key for the specified type.">Retorna uma chave para o tipo especificado.</summary>
      <param name="type" vsli:raw="The object type to return the key.">O tipo de objeto para retornar a chave.</param>
      <returns vsli:raw="A confirmation that the &lt;paramref name=&quot;type&quot; /&gt; parameter is licensed.">Uma confirmação de que o parâmetro <paramref name="type" /> é licenciado.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Returns a license for the instance of the component, if one is available.">Retornará uma licença para a instância do componente, se houver uma disponível.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">Um <see cref="T:System.ComponentModel.LicenseContext" /> que especifica em que local você pode usar o objeto licenciado.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Um <see cref="T:System.Type" /> que representa o componente solicitando o <see cref="T:System.ComponentModel.License" />.</param>
      <param name="instance" vsli:raw="An object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Um objeto que solicita o <see cref="T:System.ComponentModel.License" />.</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when a component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um <see cref="T:System.ComponentModel.LicenseException" /> precisar ser gerado quando um componente não puder receber uma licença; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;. If this method cannot find a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; or a valid &lt;paramref name=&quot;context&quot; /&gt; parameter, it returns &lt;see langword=&quot;null&quot; /&gt;.">Uma <see cref="T:System.ComponentModel.License" /> válida. Se esse método não puder localizar um <see cref="T:System.ComponentModel.License" /> válido ou um parâmetro <paramref name="context" /> válido, ele retornará <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary vsli:raw="Determines whether the key that the &lt;see cref=&quot;M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)&quot; /&gt; method retrieves is valid for the specified type.">Determina se a chave que o método <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> recupera é válida para o tipo especificado.</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to check.">O <see cref="P:System.ComponentModel.License.LicenseKey" /> a ser verificado.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Um <see cref="T:System.Type" /> que representa o componente solicitando o <see cref="T:System.ComponentModel.License" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is a valid &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a chave for um <see cref="P:System.ComponentModel.License.LicenseKey" /> válido para o tipo especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary vsli:raw="Specifies that a list can be used as a data source. A visual designer should use this attribute to determine whether to display a particular list in a data-binding picker. This class cannot be inherited.">Especifica que uma lista pode ser usada como uma fonte de dados. Um designer visual deve usar esse atributo para determinar se deve exibir uma lista específica em um seletor de associação de dados. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using a value to indicate whether the list is bindable.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListBindableAttribute" /> usando um valor para indicar se a lista é associável.</summary>
      <param name="listBindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a lista for associável; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; to indicate whether the list is bindable.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListBindableAttribute" /> usando <see cref="T:System.ComponentModel.BindableSupport" /> para indicar se a lista é associável.</summary>
      <param name="flags" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; that indicates whether the list is bindable.">Um <see cref="T:System.ComponentModel.BindableSupport" /> que indica se a lista é associável.</param>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">Representa o valor padrão para <see cref="T:System.ComponentModel.ListBindableAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">Retorna se o objeto passado é igual a este <see cref="T:System.ComponentModel.ListBindableAttribute" />.</summary>
      <param name="obj" vsli:raw="The object to test equality with.">O objeto com o qual testar a igualdade.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o objeto passado for igual a este <see cref="T:System.ComponentModel.ListBindableAttribute" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">Um código hash do <see cref="T:System.ComponentModel.ListBindableAttribute" /> atual.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns whether &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value.">Retorna se <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> é definido como o valor padrão.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> for definido como o valor padrão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary vsli:raw="Gets whether the list is bindable.">Obtém se a lista é associável.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a lista for associável; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary vsli:raw="Specifies that the list is not bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Especifica que a lista não é associável. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary vsli:raw="Specifies that the list is bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Especifica que a lista é associável. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event.">Fornece dados para o evento de <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> considerando o tipo de alteração e o <see cref="T:System.ComponentModel.PropertyDescriptor" /> afetado.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Um valor <see cref="T:System.ComponentModel.ListChangedType" /> que indica o tipo de alteração.</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, removed, or changed.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> que foi adicionado, removido ou alterado.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the index of the affected item.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> considerando o tipo de alteração e o índice do item afetado.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Um valor <see cref="T:System.ComponentModel.ListChangedType" /> que indica o tipo de alteração.</param>
      <param name="newIndex" vsli:raw="The index of the item that was added, changed, or removed.">O índice do item que foi adicionado, alterado ou removido.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change, the index of the affected item, and a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the affected item.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> considerando o tipo de alteração, o índice do item afetado e um <see cref="T:System.ComponentModel.PropertyDescriptor" /> que descreve o item afetado.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Um valor <see cref="T:System.ComponentModel.ListChangedType" /> que indica o tipo de alteração.</param>
      <param name="newIndex" vsli:raw="The index of the item that was added or changed.">O índice do item que foi adicionado ou alterado.</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the item.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> que descreve o item.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the old and new index of the item that was moved.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> considerando o tipo de alteração e os índices antigo e novo do item que foi movido.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Um valor <see cref="T:System.ComponentModel.ListChangedType" /> que indica o tipo de alteração.</param>
      <param name="newIndex" vsli:raw="The new index of the item that was moved.">O novo índice do item que foi movido.</param>
      <param name="oldIndex" vsli:raw="The old index of the item that was moved.">O antigo índice do item que foi movido.</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary vsli:raw="Gets the type of change.">Obtém o tipo de alteração.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Um valor <see cref="T:System.ComponentModel.ListChangedType" /> que indica o tipo de alteração.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary vsli:raw="Gets the index of the item affected by the change.">Obtém o índice do item afetado pela alteração.</summary>
      <returns vsli:raw="The index of the affected by the change.">O índice dos afetados pela alteração.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary vsli:raw="Gets the old index of an item that has been moved.">Obtém o índice antigo de um item que foi movido.</summary>
      <returns vsli:raw="The old index of the moved item.">O índice antigo do item movido.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, changed, or deleted.">Obtém o <see cref="T:System.ComponentModel.PropertyDescriptor" /> que foi adicionado, alterado ou excluído.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected by the change.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> afetado pela alteração.</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event of the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; class.">Representa o método que manipulará o evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> da classe <see cref="T:System.ComponentModel.IBindingList" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">A fonte do evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">Um <see cref="T:System.ComponentModel.ListChangedEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary vsli:raw="Specifies how the list changed.">Especifica como a lista foi alterada.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary vsli:raw="An item added to the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was added.">Um item adicionado à lista. O <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contém o índice do item que foi adicionado.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary vsli:raw="An item changed in the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was changed.">Um item alterado na lista. O <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contém o índice do item que foi alterado.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary vsli:raw="An item deleted from the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was deleted.">Um item excluído da lista. O <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contém o índice do item que foi excluído.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary vsli:raw="An item moved within the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.OldIndex&quot; /&gt; contains the previous index for the item, whereas &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the new index for the item.">Um item movido dentro da lista. <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> contém o índice anterior para o item, enquanto <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contém o novo índice do item.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was added, which changed the schema.">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> foi adicionado, o que alterou o esquema.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was changed, which changed the schema.">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> foi alterado, o que alterou o esquema.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was deleted, which changed the schema.">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> foi excluído, o que alterou o esquema.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary vsli:raw="Much of the list has changed. Any listening controls should refresh all their data from the list.">Grande parte da lista foi alterada. Os controles de escuta devem atualizar todos os seus dados da lista.</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary vsli:raw="Provides a description of the sort operation applied to a data source.">Fornece uma descrição da operação de classificação aplicada a uma fonte de dados.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; class with the specified property description and direction.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListSortDescription" /> com a direção e a descrição da propriedade especificadas.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the property by which the data source is sorted.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> que descreve a propriedade pela qual a fonte de dados é classificada.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; values.">Um dos valores de <see cref="T:System.ComponentModel.ListSortDescription" />.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary vsli:raw="Gets or sets the abstract description of a class property associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Obtém ou define a descrição abstrata de uma propriedade de classe associada a este <see cref="T:System.ComponentModel.ListSortDescription" /></summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> associado a este <see cref="T:System.ComponentModel.ListSortDescription" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary vsli:raw="Gets or sets the direction of the sort operation associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Obtém ou define a direção da operação de classificação associada a este <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Um dos valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.ComponentModel.ListSortDescription" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class with the specified array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> com a matriz especificada de objetos <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <param name="sorts" vsli:raw="The array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects to be contained in the collection.">A matriz dos objetos <see cref="T:System.ComponentModel.ListSortDescription" /> a ser contida na coleção.</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary vsli:raw="Determines if the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; contains a specific value.">Determina se o <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> contém um valor específico.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">O <see cref="T:System.Object" /> a ser localizado na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Object" /> for encontrado na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of the collection to the specified array, starting at the specified destination array index.">Copia o conteúdo da coleção para a matriz especificada, começando no índice de matriz de destino especificado.</summary>
      <param name="array" vsli:raw="The destination array for the items copied from the collection.">A matriz de destino para os itens copiados da coleção.</param>
      <param name="index" vsli:raw="The index of the destination array at which copying begins.">O índice da matriz de destino na qual a cópia é iniciada.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary vsli:raw="Gets the number of items in the collection.">Obtém o número de itens na coleção.</summary>
      <returns vsli:raw="The number of items in the collection.">Número de itens na coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary vsli:raw="Returns the index of the specified item in the collection.">Retorna o índice do item especificado na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">O <see cref="T:System.Object" /> a ser localizado na coleção.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">O índice de <paramref name="value" /> se encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Obtém ou define o <see cref="T:System.ComponentModel.ListSortDescription" /> especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">O índice baseado em zero da <see cref="T:System.ComponentModel.ListSortDescription" /> a ser obtida ou definida na coleção.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">O objeto <see cref="T:System.ComponentModel.ListSortDescription" /> com o índice especificado.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An item is set in the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;, which is read-only.">Um item é definido em <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />, que é somente leitura.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is thread safe.">Obtém um valor que indica se o acesso à coleção é thread-safe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> em todos os casos.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the current instance that can be used to synchronize access to the collection.">Obtém a instância atual que pode ser usada para sincronizar o acesso à coleção.</summary>
      <returns vsli:raw="The current instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">A instância atual do <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Obtém um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado iterar pela coleção.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">Adiciona um item à coleção.</summary>
      <param name="value" vsli:raw="The item to add to the collection.">O item a ser adicionado à coleção.</param>
      <returns vsli:raw="The position into which the new element was inserted.">A posição na qual o novo elemento foi inserido.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Em todos os casos.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">Remove todos os itens da coleção.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Em todos os casos.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">Insere um item na coleção em um índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">O índice baseado em zero da <see cref="T:System.ComponentModel.ListSortDescription" /> a ser obtida ou definida na coleção</param>
      <param name="value" vsli:raw="The item to insert into the collection.">O item a ser inserido na coleção.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Em todos os casos.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Obtém um valor que indica se a coleção tem um tamanho fixo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> em todos os casos.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Obtém um valor que indica se a coleção é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> em todos os casos.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Obtém o <see cref="T:System.ComponentModel.ListSortDescription" /> especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get in the collection.">O índice baseado em zero da <see cref="T:System.ComponentModel.ListSortDescription" /> a ser obtida na coleção</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">O objeto <see cref="T:System.ComponentModel.ListSortDescription" /> com o índice especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of an item from the collection.">Remove a primeira ocorrência de um item da coleção.</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">O item a ser removido da coleção.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Em todos os casos.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes an item from the collection at a specified index.">Remove um item da coleção em um índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to remove from the collection.">O índice baseado em zero do <see cref="T:System.ComponentModel.ListSortDescription" /> a ser removido da coleção</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Em todos os casos.</exception>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary vsli:raw="Specifies the direction of a sort operation.">Especifica a direção de uma operação de classificação.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary vsli:raw="Sorts in ascending order.">Classifica em ordem crescente.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary vsli:raw="Sorts in descending order.">Classifica em ordem decrescente.</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the properties that support lookup-based binding. This class cannot be inherited.">Especifica as propriedades que dão suporte à associação baseada em pesquisa. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class using no parameters.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> não usando nenhum parâmetro.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">O nome da propriedade a ser usada como a fonte de dados.</param>
      <param name="displayMember" vsli:raw="The name of the property to be used for the display name.">O nome da propriedade a ser usada para o nome de exibição.</param>
      <param name="valueMember" vsli:raw="The name of the property to be used as the source for values.">O nome da propriedade a ser usada como a origem dos valores.</param>
      <param name="lookupMember" vsli:raw="The name of the property to be used for lookups.">O nome da propriedade a ser usada para pesquisas.</param>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Obtém o nome da propriedade de fonte de dados para o componente ao qual o <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> está associado.</summary>
      <returns vsli:raw="The data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">A propriedade da fonte de dados para o componente ao <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> qual o está associado.</returns>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">Representa o valor padrão para a classe <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary vsli:raw="Gets the name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Obtém o nome da propriedade do membro de exibição para o componente ao qual o <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> está associado.</summary>
      <returns vsli:raw="The name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">O nome da Propriedade do membro de exibição para o componente ao qual <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> o está associado.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">Determina se o <see cref="T:System.Object" /> especificado é igual à instância de <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> atual.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">O <see cref="T:System.Object" /> a comparar com a instância de <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> atual</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">
        <see langword="true" /> se o objeto é igual à instância atual, caso contrário, <see langword="false" />, indicando que não são iguais.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt;.">Um código hash do <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary vsli:raw="Gets the name of the lookup member for the component to which this attribute is bound.">Obtém o nome do membro de pesquisa para o componente ao qual este atributo está associado.</summary>
      <returns vsli:raw="The name of the lookup member for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">O nome do membro de pesquisa para o componente ao qual o <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> está associado.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary vsli:raw="Gets the name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Obtém o nome da propriedade do membro de valor para o componente ao qual o <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> está associado.</summary>
      <returns vsli:raw="The name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">O nome da propriedade de membro de valor para o componente ao qual <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> o está associado.</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary vsli:raw="Implements &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and provides the base implementation for remotable components that are marshaled by value (a copy of the serialized object is passed).">Implementa <see cref="T:System.ComponentModel.IComponent" /> e fornece a implementação base para componentes remotos que sofrem marshaling por valor (uma cópia do objeto serializado é passada).</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MarshalByValueComponent" />.</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary vsli:raw="Gets the container for the component.">Obtém o contêiner para o componente.</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; interface that represents the component's container, or &lt;see langword=&quot;null&quot; /&gt; if the component does not have a site.">Um objeto que implementa a interface <see cref="T:System.ComponentModel.IContainer" /> que representa o contêiner do componente ou <see langword="null" /> se o componente não tiver um site.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary vsli:raw="Gets a value indicating whether the component is currently in design mode.">Obtém um valor que indica se o componente está atualmente no modo de design.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is in design mode; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o componente estiver em modo de design; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt;.">Libera todos os recursos usados pelo <see cref="T:System.ComponentModel.MarshalByValueComponent" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; and optionally releases the managed resources.">Libera os recursos não gerenciados usados pelo <see cref="T:System.ComponentModel.MarshalByValueComponent" /> e opcionalmente libera os recursos gerenciados.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary vsli:raw="Adds an event handler to listen to the &lt;see cref=&quot;E:System.ComponentModel.MarshalByValueComponent.Disposed&quot; /&gt; event on the component.">Adiciona um manipulador de eventos para escutar o evento <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> no componente.</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary vsli:raw="Gets the list of event handlers that are attached to this component.">Obtém a lista de manipuladores de eventos que estão anexados a este componente.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventHandlerList&quot; /&gt; that provides the delegates for this component.">Um <see cref="T:System.ComponentModel.EventHandlerList" /> que fornece os delegados para este componente.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary vsli:raw="Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.">Permite que um objeto tente liberar recursos e executar outras operações de limpeza antes de ser recuperado pela coleta de lixo.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary vsli:raw="Gets the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">Obtém o implementador do <see cref="T:System.IServiceProvider" />.</summary>
      <param name="service" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of service you want.">Um <see cref="T:System.Type" /> que representa o tipo de serviço que você deseja.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">Um <see cref="T:System.Object" /> que representa o implementador do <see cref="T:System.IServiceProvider" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary vsli:raw="Gets or sets the site of the component.">Obtém ou define o site do componente.</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface that represents the site of the component.">Um objeto que implementa <see cref="T:System.ComponentModel.ISite" /> a interface que representa o site do componente.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any. This method should not be overridden.">Retorna um <see cref="T:System.String" /> que contém o nome do <see cref="T:System.ComponentModel.Component" />, se houver. Esse método não deve ser substituído.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any.  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; is unnamed.">Um <see cref="T:System.String" /> que contém o nome do <see cref="T:System.ComponentModel.Component" />, se houver.
<see langword="null" /> se o <see cref="T:System.ComponentModel.Component" /> for sem nome.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary vsli:raw="Represents a mask-parsing service that can be used by any number of controls that support masking, such as the &lt;see cref=&quot;T:System.Windows.Forms.MaskedTextBox&quot; /&gt; control.">Representa um serviço de análise da máscara que pode ser usado por qualquer número de controles que dão suporte a máscara, como o controle <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> usando a máscara especificada.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Uma <see cref="T:System.String" /> que representa a máscara de entrada.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and ASCII restriction value.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> usando a máscara e o valor de restrição de ASCII especificados.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Uma <see cref="T:System.String" /> que representa a máscara de entrada.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">
        <see langword="true" /> para restringir a entrada a caracteres compatíveis com ASCII; caso contrário, <see langword="false" /> para permitir todo o conjunto de Unicode.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, password character, and prompt usage value.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> usando a máscara, o caractere de senha e o valor de uso do prompt especificados.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Uma <see cref="T:System.String" /> que representa a máscara de entrada.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">Um <see cref="T:System.Char" /> que será exibido para caracteres digitados em uma cadeia de caracteres de senha.</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para permitir o caractere de prompt como entrada; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and culture.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> usando a máscara e a cultura especificadas.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Uma <see cref="T:System.String" /> que representa a máscara de entrada.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">Um <see cref="T:System.Globalization.CultureInfo" /> que é usado para definir caracteres separadores sensíveis à região.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, and ASCII restriction value.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> usando a máscara, a cultura e o valor de restrição de ASCII especificados.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Uma <see cref="T:System.String" /> que representa a máscara de entrada.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">Um <see cref="T:System.Globalization.CultureInfo" /> que é usado para definir caracteres separadores sensíveis à região.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">
        <see langword="true" /> para restringir a entrada a caracteres compatíveis com ASCII; caso contrário, <see langword="false" /> para permitir todo o conjunto de Unicode.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, prompt usage value, prompt character, password character, and ASCII restriction value.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> usando a máscara, a cultura, o valor de uso do prompt, o caractere de prompt, o caractere de senha e o valor de restrição de ASCII especificados.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Uma <see cref="T:System.String" /> que representa a máscara de entrada.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">Um <see cref="T:System.Globalization.CultureInfo" /> que é usado para definir caracteres separadores sensíveis à região.</param>
      <param name="allowPromptAsInput" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value that specifies whether the prompt character should be allowed as a valid input character.">Um valor <see cref="T:System.Boolean" /> que especifica se o caractere de prompt deve ser permitido como um caractere de entrada válido.</param>
      <param name="promptChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed as a placeholder for user input.">Um <see cref="T:System.Char" /> que será exibido como um espaço reservado para a entrada do usuário.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">Um <see cref="T:System.Char" /> que será exibido para caracteres digitados em uma cadeia de caracteres de senha.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">
        <see langword="true" /> para restringir a entrada a caracteres compatíveis com ASCII; caso contrário, <see langword="false" /> para permitir todo o conjunto de Unicode.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The mask parameter is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The mask contains one or more non-printable characters.">O parâmetro de máscara é <see langword="null" /> ou <see cref="F:System.String.Empty" />.
- ou -
A máscara contém um ou mais caracteres não imprimíveis.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, password character, and prompt usage value.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> usando a máscara, a cultura, o caractere de senha e o valor de uso do prompt especificados.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Uma <see cref="T:System.String" /> que representa a máscara de entrada.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">Um <see cref="T:System.Globalization.CultureInfo" /> que é usado para definir caracteres separadores sensíveis à região.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">Um <see cref="T:System.Char" /> que será exibido para caracteres digitados em uma cadeia de caracteres de senha.</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para permitir o caractere de prompt como entrada; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string.">Adiciona o caractere de entrada especificado ao final da cadeia de caracteres formatada.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">Um valor <see cref="T:System.Char" /> a ser acrescentado à cadeia de caracteres formatada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o caractere de entrada foi adicionado com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string, and then outputs position and descriptive information.">Adiciona o caractere de entrada especificado ao final da cadeia de caracteres formatada e, em seguida, gera a posição e as informações descritivas.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">Um valor <see cref="T:System.Char" /> a ser acrescentado à cadeia de caracteres formatada.</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">A posição baseada em zero, na cadeia de caracteres formatada, em que foi feita a tentativa de adicionar o caractere. Um parâmetro de saída.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação. Um parâmetro de saída.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o caractere de entrada foi adicionado com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string.">Adiciona os caracteres da cadeia de caracteres de entrada especificada, ao final da cadeia de caracteres formatada.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">Uma <see cref="T:System.String" /> que contém valores de caractere a serem acrescentados à cadeia de caracteres formatada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">
        <see langword="true" /> se todos os caracteres da cadeia de caracteres de entrada foram adicionados com êxito; caso contrário, <see langword="false" /> para indicar que nenhum caractere foi adicionado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="input" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string, and then outputs position and descriptive information.">Adiciona os caracteres da cadeia de caracteres de entrada especificada ao final da cadeia de caracteres formatada e, em seguida, gera a posição e as informações descritivas.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">Uma <see cref="T:System.String" /> que contém valores de caractere a serem acrescentados à cadeia de caracteres formatada.</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">A posição baseada em zero, na cadeia de caracteres formatada, em que foi feita a tentativa de adicionar o caractere. Um parâmetro de saída.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação. Um parâmetro de saída.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">
        <see langword="true" /> se todos os caracteres da cadeia de caracteres de entrada foram adicionados com êxito; caso contrário, <see langword="false" /> para indicar que nenhum caractere foi adicionado.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary vsli:raw="Gets a value indicating whether the prompt character should be treated as a valid input character or not.">Obtém um valor que indica se o caractere de prompt deve ser tratado como um caractere de entrada válido ou não.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the user can enter &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt; into the control; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se o usuário pode inserir <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> no controle; caso contrário, <see langword="false" />. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary vsli:raw="Gets a value indicating whether the mask accepts characters outside of the ASCII character set.">Obtém um valor que indica se a máscara aceita caracteres fora do conjunto de caracteres ASCII.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if only ASCII is accepted; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; can accept any arbitrary Unicode character. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se apenas ASCII for aceito; <see langword="false" /> se <see cref="T:System.ComponentModel.MaskedTextProvider" /> pode aceitar qualquer caractere Unicode arbitrário. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions that have already been successfully assigned an input value.">Obtém o número de posições de caractere editável às quais já foi atribuído um valor de entrada com êxito.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions in the input mask that have already been assigned a character value in the formatted string.">Um <see cref="T:System.Int32" /> que contém o número de posições de caracteres editáveis na máscara de entrada que já foram atribuídas a um valor de caractere na cadeia de caracteres formatada.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions in the input mask that have not yet been assigned an input value.">Obtém o número de posições de caractere editável da máscara de entrada às quais ainda não tenha sido atribuído um valor de entrada.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions that not yet been assigned a character value.">Um <see cref="T:System.Int32" /> que contém o número de posições de caracteres editáveis que ainda não foram atribuídas a um valor de caractere.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters.">Limpa todos os caracteres de entrada editáveis da cadeia de caracteres formatada, substituindo-os por caracteres de prompt.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters, and then outputs descriptive information.">Limpa todos os caracteres de entrada editáveis da cadeia de caracteres formatada, substituindo-os por caracteres de prompt e, em seguida, gera informações descritivas.</summary>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação. Um parâmetro de saída.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary vsli:raw="Creates a copy of the current &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt;.">Cria uma cópia das <see cref="T:System.ComponentModel.MaskedTextProvider" /> atuais.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; object this method creates, cast as an object.">O objeto <see cref="T:System.ComponentModel.MaskedTextProvider" /> que esse método cria, convertido como um objeto.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary vsli:raw="Gets the culture that determines the value of the localizable separators and placeholders in the input mask.">Obtém a cultura que determina o valor dos separadores e espaços reservados localizáveis na máscara de entrada.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; containing the culture information associated with the input mask.">Um <see cref="T:System.Globalization.CultureInfo" /> que contém as informações de cultura associadas à máscara de entrada.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary vsli:raw="Gets the default password character used obscure user input.">Obtém o caractere de senha padrão usado para obscurecer a entrada do usuário.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that represents the default password character.">Um <see cref="T:System.Char" /> que representa o caractere de senha padrão.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary vsli:raw="Gets the number of editable positions in the formatted string.">Obtém o número de posições editáveis na cadeia de caracteres formatada.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable positions in the formatted string.">Um <see cref="T:System.Int32" /> que contém o número de posições editáveis na cadeia de caracteres formatada.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary vsli:raw="Gets a newly created enumerator for the editable positions in the formatted string.">Obtém um enumerador recém-criado para as posições editáveis na cadeia de caracteres formatada.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that supports enumeration over the editable positions in the formatted string.">Um <see cref="T:System.Collections.IEnumerator" /> que dá suporte à enumeração nas posições editáveis na cadeia de caracteres formatada.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position after the specified position using the specified search direction.">Retorna a posição da primeira posição editável atribuída após a posição especificada, usando a direção de pesquisa especificada.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">A posição baseada em zero, na cadeia de caracteres formatada, para iniciar a pesquisa.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Um <see cref="T:System.Boolean" /> indicando a direção da pesquisa; <see langword="true" /> para pesquisar para frente ou <see langword="false" /> para pesquisar para trás.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Se for bem-sucedida, um <see cref="T:System.Int32" /> representando a posição baseada em zero da primeira posição editável atribuída encontrada; caso contrário, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position between the specified positions using the specified search direction.">Retorna a posição da primeira posição editável atribuída entre as posições especificadas, usando a direção de pesquisa especificada.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">A posição baseada em zero na cadeia de caracteres formatada na qual começa a pesquisa.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">A posição baseada em zero na cadeia de caracteres formatada na qual termina a pesquisa.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Um <see cref="T:System.Boolean" /> indicando a direção da pesquisa; <see langword="true" /> para pesquisar para frente ou <see langword="false" /> para pesquisar para trás.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Se for bem-sucedida, um <see cref="T:System.Int32" /> representando a posição baseada em zero da primeira posição editável atribuída encontrada; caso contrário, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position after the specified position using the specified search direction.">Retorna a posição da primeira posição editável após a posição especificada, usando a direção de pesquisa especificada.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">A posição baseada em zero, na cadeia de caracteres formatada, para iniciar a pesquisa.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Um <see cref="T:System.Boolean" /> indicando a direção da pesquisa; <see langword="true" /> para pesquisar para frente ou <see langword="false" /> para pesquisar para trás.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Se for bem-sucedida, um <see cref="T:System.Int32" /> representando a posição baseada em zero da primeira posição editável encontrada; caso contrário, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position between the specified positions using the specified search direction.">Retorna a posição da primeira posição editável entre as posições especificadas, usando a direção de pesquisa especificada.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">A posição baseada em zero na cadeia de caracteres formatada na qual começa a pesquisa.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">A posição baseada em zero na cadeia de caracteres formatada na qual termina a pesquisa.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Um <see cref="T:System.Boolean" /> indicando a direção da pesquisa; <see langword="true" /> para pesquisar para frente ou <see langword="false" /> para pesquisar para trás.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Se for bem-sucedida, um <see cref="T:System.Int32" /> representando a posição baseada em zero da primeira posição editável encontrada; caso contrário, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position after the specified position using the specified search direction.">Retorna a posição da primeira posição não editável após a posição especificada, usando a direção de pesquisa especificada.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">A posição baseada em zero, na cadeia de caracteres formatada, para iniciar a pesquisa.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Um <see cref="T:System.Boolean" /> indicando a direção da pesquisa; <see langword="true" /> para pesquisar para frente ou <see langword="false" /> para pesquisar para trás.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Se for bem-sucedida, um <see cref="T:System.Int32" /> representando a posição baseada em zero da primeira posição literal encontrada; caso contrário, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position between the specified positions using the specified search direction.">Retorna a posição da primeira posição não editável entre as posições especificadas, usando a direção de pesquisa especificada.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">A posição baseada em zero na cadeia de caracteres formatada na qual começa a pesquisa.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">A posição baseada em zero na cadeia de caracteres formatada na qual termina a pesquisa.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Um <see cref="T:System.Boolean" /> indicando a direção da pesquisa; <see langword="true" /> para pesquisar para frente ou <see langword="false" /> para pesquisar para trás.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Se for bem-sucedida, um <see cref="T:System.Int32" /> representando a posição baseada em zero da primeira posição literal encontrada; caso contrário, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position after the specified position using the specified search direction.">Retorna a posição da primeira posição editável não atribuída após a posição especificada, usando a direção de pesquisa especificada.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">A posição baseada em zero, na cadeia de caracteres formatada, para iniciar a pesquisa.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Um <see cref="T:System.Boolean" /> indicando a direção da pesquisa; <see langword="true" /> para pesquisar para frente ou <see langword="false" /> para pesquisar para trás.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Se for bem-sucedida, um <see cref="T:System.Int32" /> representando a posição baseada em zero da primeira posição editável não atribuída encontrada; caso contrário, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position between the specified positions using the specified search direction.">Retorna a posição da primeira posição editável não atribuída entre as posições especificadas, usando a direção de pesquisa especificada.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">A posição baseada em zero na cadeia de caracteres formatada na qual começa a pesquisa.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">A posição baseada em zero na cadeia de caracteres formatada na qual termina a pesquisa.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Um <see cref="T:System.Boolean" /> indicando a direção da pesquisa; <see langword="true" /> para pesquisar para frente ou <see langword="false" /> para pesquisar para trás.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Se for bem-sucedida, um <see cref="T:System.Int32" /> representando a posição baseada em zero da primeira posição editável não atribuída encontrada; caso contrário, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; denotes success or failure.">Determina se o <see cref="T:System.ComponentModel.MaskedTextResultHint" /> especificado indica êxito ou falha.</summary>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value typically obtained as an output parameter from a previous operation.">Um valor <see cref="T:System.ComponentModel.MaskedTextResultHint" />, normalmente obtido como um parâmetro de saída de uma operação anterior.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value represents a success; otherwise, &lt;see langword=&quot;false&quot; /&gt; if it represents failure.">
        <see langword="true" /> se o valor <see cref="T:System.ComponentModel.MaskedTextResultHint" /> especificado representa um êxito; <see langword="false" />, se ele representa falha.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary vsli:raw="Gets or sets a value that indicates whether literal characters in the input mask should be included in the formatted string.">Obtém ou define um valor que indica se os caracteres literais da máscara de entrada devem ser incluídos na cadeia de caracteres formatada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if literals are included; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se os literais estão incluídos; caso contrário, <see langword="false" />. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary vsli:raw="Gets or sets a value indicating whether &lt;see cref=&quot;P:System.Windows.Forms.MaskedTextBox.PromptChar&quot; /&gt; is used to represent the absence of user input when displaying the formatted string.">Obtém ou define um valor que indica se <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> é usado para representar a ausência de entrada do usuário ao exibir a cadeia de caracteres formatada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character is used to represent the positions where no user input was provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se o caractere de prompt é usado para representar as posições em que nenhuma entrada do usuário foi fornecida; caso contrário, <see langword="false" />. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string.">Insere o caractere especificado na posição especificada na cadeia de caracteres formatada.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">O <see cref="T:System.Char" /> a ser inserido.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">A posição baseada em zero, na cadeia de caracteres formatada, para inserir o caractere.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a inserção foi bem-sucedida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string, returning the last insertion position and the status of the operation.">Insere o caractere especificado na posição especificada na cadeia de caracteres formatada, retornando a última posição de inserção e o status da operação.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">O <see cref="T:System.Char" /> a ser inserido.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">A posição baseada em zero, na cadeia de caracteres formatada, para inserir o caractere.</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">Se o método for bem-sucedido, a última posição em que foi inserido um caractere; caso contrário, a primeira posição em que a inserção falhou. Um parâmetro de saída.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação de inserção. Um parâmetro de saída.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a inserção foi bem-sucedida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string.">Insere a cadeia de caracteres especificada em uma posição especificada na cadeia de caracteres formatada.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">O <see cref="T:System.String" /> a ser inserido.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">A posição baseada em zero, na cadeia de caracteres formatada, para inserir a cadeia de caracteres de entrada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a inserção foi bem-sucedida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="input" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string, returning the last insertion position and the status of the operation.">Insere a cadeia de caracteres especificada em uma posição especificada na cadeia de caracteres formatada, retornando a última posição de inserção e o status da operação.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">O <see cref="T:System.String" /> a ser inserido.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">A posição baseada em zero, na cadeia de caracteres formatada, para inserir a cadeia de caracteres de entrada.</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">Se o método for bem-sucedido, a última posição em que foi inserido um caractere; caso contrário, a primeira posição em que a inserção falhou. Um parâmetro de saída.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação de inserção. Um parâmetro de saída.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a inserção foi bem-sucedida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="input" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary vsli:raw="Gets the upper bound of the range of invalid indexes.">Obtém o limite superior do intervalo de índices inválidos.</summary>
      <returns vsli:raw="A value representing the largest invalid index, as determined by the provider implementation. For example, if the lowest valid index is 0, this property will return -1.">Um valor que representa o maior índice inválido, conforme determinado pela implementação do provedor. Por exemplo, se o menor índice válido for 0, essa propriedade retornará-1.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is available for assignment.">Determina se a posição especificada está disponível para atribuição.</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">A posição baseada em zero na máscara a ser testada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable and has not been assigned to yet; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a posição especificada na cadeia de caracteres formatada é editável e ainda não houve nada atribuído a ela; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is editable.">Determina se a posição especificada é editável.</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">A posição baseada em zero na máscara a ser testada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a posição especificada na cadeia de caracteres formatada é editável; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary vsli:raw="Gets or sets a value that determines whether password protection should be applied to the formatted string.">Obtém ou define um valor que determina se a proteção por senha deve ser aplicada à cadeia de caracteres formatada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input string is to be treated as a password string; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a cadeia de caracteres de entrada deve ser tratada como uma cadeia de caracteres de senha; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid input character.">Determina se o caractere especificado é um caractere de entrada válido.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">O valor <see cref="T:System.Char" /> para testar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid input value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o caractere especificado contém um valor de entrada válido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid mask character.">Determina se o caractere especificado é um caractere de máscara válido.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">O valor <see cref="T:System.Char" /> para testar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid mask value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o caractere especificado contém um valor de máscara válido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid password character.">Determina se o caractere especificado é um caractere de senha válido.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">O valor <see cref="T:System.Char" /> para testar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid password value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o caractere especificado contém um valor de senha válido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified position in the formatted string.">Obtém o elemento na posição especificada na cadeia de caracteres formatada.</summary>
      <param name="index" vsli:raw="A zero-based index of the element to retrieve.">Um índice baseado em zero do elemento a ser recuperado.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; at the specified position in the formatted string.">O <see cref="T:System.Char" /> na posição especificada na cadeia de caracteres formatada.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero or greater than or equal to the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.Length&quot; /&gt; of the mask.">
        <paramref name="index" /> é menor que zero ou maior ou igual ao <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> da máscara.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary vsli:raw="Gets the index in the mask of the rightmost input character that has been assigned to the mask.">Obtém o índice na máscara do caractere de entrada mais à direita que foi atribuído à máscara.</summary>
      <returns vsli:raw="If at least one input character has been assigned to the mask, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the index of rightmost assigned position; otherwise, if no position has been assigned, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Se pelo menos um caractere de entrada tiver sido atribuído à máscara, um <see cref="T:System.Int32" /> que contenha o índice da posição atribuída na extrema direita; caso contrário, se nenhuma posição tiver sido atribuída, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary vsli:raw="Gets the length of the mask, absent any mask modifier characters.">Obtém o comprimento da máscara, excluindo todos os caracteres modificadores de máscara.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of positions in the mask, excluding characters that modify mask input.">Um <see cref="T:System.Int32" /> que contém o número de posições na máscara, excluindo caracteres que modificam a entrada de máscara.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary vsli:raw="Gets the input mask.">Obtém a máscara de entrada.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the full mask.">Um <see cref="T:System.String" /> que contém a máscara completa.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary vsli:raw="Gets a value indicating whether all required inputs have been entered into the formatted string.">Obtém um valor que indica se todas as entradas necessárias foram inseridas na cadeia de caracteres formatada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required input has been entered into the mask; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se todas as entradas necessárias foram inseridas na máscara; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary vsli:raw="Gets a value indicating whether all required and optional inputs have been entered into the formatted string.">Obtém um valor que indica se todas as entradas necessárias e opcionais foram inseridas na cadeia de caracteres formatada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required and optional inputs have been entered; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se todas as entradas obrigatórias e opcionais tiverem sido inseridas; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary vsli:raw="Gets or sets the character to be substituted for the actual input characters.">Obtém ou define o caractere a ser substituído pelos caracteres de entrada reais.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value used as the password character.">O valor <see cref="T:System.Char" /> usado como o caractere de senha.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The password character specified when setting this property is the same as the current prompt character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt;. The two are required to be different.">O caractere de senha especificado ao definir essa propriedade é o mesmo que o caractere de prompt atual, <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />. Os dois devem ser diferentes.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">O caractere especificado ao definir essa propriedade não é um caractere de senha válido, conforme determinado pelo método <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary vsli:raw="Gets or sets the character used to represent the absence of user input for all available edit positions.">Obtém ou define o caractere usado para representar a ausência de entrada do usuário para todas as posições de edição disponíveis.</summary>
      <returns vsli:raw="The character used to prompt the user for input. The default is an underscore (_).">O caractere usado para solicitar a entrada do usuário. O padrão é um sublinhado (_).</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The prompt character specified when setting this property is the same as the current password character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt;. The two are required to be different.">O caractere de prompt especificado ao definir essa propriedade é o mesmo que o caractere de senha atual, <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />. Os dois devem ser diferentes.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">O caractere especificado ao definir essa propriedade não é um caractere de senha válido, conforme determinado pelo método <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary vsli:raw="Removes the last assigned character from the formatted string.">Remove o último caractere atribuído da cadeia de caracteres formatada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o caractere foi removido com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the last assigned character from the formatted string, and then outputs the removal position and descriptive information.">Remove o último caractere atribuído da cadeia de caracteres formatada e, em seguida, gera a posição da remoção e as informações descritivas.</summary>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the character was actually removed. An output parameter.">A posição baseada em zero, na cadeia de caracteres formatada, em que o caractere foi realmente removido. Um parâmetro de saída.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação. Um parâmetro de saída.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o caractere foi removido com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the assigned character at the specified position from the formatted string.">Remove o caractere atribuído na posição especificada da cadeia de caracteres formatada.</summary>
      <param name="position" vsli:raw="The zero-based position of the assigned character to remove.">A posição baseada em zero do caractere atribuído a ser removido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o caractere foi removido com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string.">Remove o caractere atribuído entre as posições especificadas da cadeia de caracteres formatada.</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">O índice baseado em zero do primeiro caractere atribuído a ser removido.</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">O índice baseado em zero do último caractere atribuído a ser removido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o caractere foi removido com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string, and then outputs the removal position and descriptive information.">Remove os caracteres atribuídos entre as posições especificadas da cadeia de caracteres formatada e, em seguida, gera a posição da remoção e as informações descritivas.</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">O índice baseado em zero do primeiro caractere atribuído a ser removido.</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">O índice baseado em zero do último caractere atribuído a ser removido.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string of where the characters were actually removed; otherwise, the first position where the operation failed. An output parameter.">Se tiver êxito, a posição baseada em zero na cadeia de caracteres formatada em que os caracteres foram realmente removidos; caso contrário, a primeira posição em que a operação falhou. Um parâmetro de saída.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação. Um parâmetro de saída.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o caractere foi removido com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value.">Substitui um único caractere na posição especificada ou além dela, pelo valor do caractere especificado.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">O valor <see cref="T:System.Char" /> que substitui o valor existente.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">A posição baseada em zero para pesquisar o primeiro caractere editável a ser substituído.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o caractere foi substituído com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character between the specified starting and ending positions with the specified character value, and then outputs the removal position and descriptive information.">Substitui um único caractere, entre a posição final e inicial especificadas, pelo valor do caractere especificado e, em seguida, gera a posição de remoção e as informações descritivas.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">O valor <see cref="T:System.Char" /> que substitui o valor existente.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">A posição baseada em zero na cadeia de caracteres formatada na qual começa a substituição.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">A posição baseada em zero na cadeia de caracteres formatada na qual termina a substituição.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">Se tiver êxito, a posição baseada em zero na cadeia de caracteres formatada em que o último caractere foi, na verdade, substituído; caso contrário, a primeira posição em que a operação falhou. Um parâmetro de saída.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação de substituição. Um parâmetro de saída.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o caractere foi substituído com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value, and then outputs the removal position and descriptive information.">Substitui um único caractere na posição especificada ou além dela, pelo valor do caractere especificado e, em seguida, gera a posição de remoção e as informações descritivas.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">O valor <see cref="T:System.Char" /> que substitui o valor existente.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">A posição baseada em zero para pesquisar o primeiro caractere editável a ser substituído.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">Se tiver êxito, a posição baseada em zero na cadeia de caracteres formatada em que o último caractere foi, na verdade, substituído; caso contrário, a primeira posição em que a operação falhou. Um parâmetro de saída.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação de substituição. Um parâmetro de saída.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o caractere foi substituído com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string.">Substitui um intervalo de caracteres editáveis, começando na posição especificada com a cadeia de caracteres especificada.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">O valor <see cref="T:System.String" /> usado para substituir os caracteres editáveis existentes.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">A posição baseada em zero para pesquisar o primeiro caractere editável a ser substituído.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se todos os caracteres foram substituídos com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="input" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters between the specified starting and ending positions with the specified string, and then outputs the removal position and descriptive information.">Substitui um intervalo de caracteres editáveis entre as posições inicial e final especificadas com a cadeia de caracteres especificada e, então, gera a posição de remoção e informações descritivas.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">O valor <see cref="T:System.String" /> usado para substituir os caracteres editáveis existentes.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">A posição baseada em zero na cadeia de caracteres formatada na qual começa a substituição.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">A posição baseada em zero na cadeia de caracteres formatada na qual termina a substituição.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">Se tiver êxito, a posição baseada em zero na cadeia de caracteres formatada em que o último caractere foi, na verdade, substituído; caso contrário, a primeira posição em que a operação falhou. Um parâmetro de saída.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação de substituição. Um parâmetro de saída.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se todos os caracteres foram substituídos com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string, and then outputs the removal position and descriptive information.">Substitui um intervalo de caracteres editáveis começando pela posição especificada com a cadeia de caracteres especificada e, em seguida, gera a posição de remoção e as informações descritivas.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">O valor <see cref="T:System.String" /> usado para substituir os caracteres editáveis existentes.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">A posição baseada em zero para pesquisar o primeiro caractere editável a ser substituído.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">Se tiver êxito, a posição baseada em zero na cadeia de caracteres formatada em que o último caractere foi, na verdade, substituído; caso contrário, a primeira posição em que a operação falhou. Um parâmetro de saída.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação de substituição. Um parâmetro de saída.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se todos os caracteres foram substituídos com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary vsli:raw="Gets or sets a value that determines how an input character that matches the prompt character should be handled.">Obtém ou define um valor que determina como um caractere de entrada que corresponde ao caractere do prompt deve ser tratado.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character entered as input causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the prompt character is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se o caractere de prompt inserido como entrada fizer com que a posição editável atual na máscara seja redefinida, caso contrário, <see langword="false" /> para indicar que ele deverá ser processado como um caractere de entrada normal. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary vsli:raw="Gets or sets a value that determines how a space input character should be handled.">Obtém ou define um valor que determina como um caractere de entrada de espaço deve ser tratado.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the space input character causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that it is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se o caractere de entrada de espaço fizer com que a posição editável atual na máscara seja redefinida; caso contrário, <see langword="false" /> para indicar que ele deve ser processado como um caractere de entrada normal. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary vsli:raw="Sets the formatted string to the specified input string.">Define a cadeia de caracteres formatada como a cadeia de caracteres de entrada especificada.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">O valor <see cref="T:System.String" /> usado para definir a cadeia de caracteres formatada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se todos os caracteres foram definidos com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="input" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Sets the formatted string to the specified input string, and then outputs the removal position and descriptive information.">Define a cadeia de caracteres formatada como a cadeia de caracteres de entrada especificada e, em seguida, gera a posição de remoção e as informações descritivas.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">O valor <see cref="T:System.String" /> usado para definir a cadeia de caracteres formatada.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually set; otherwise, the first position where the operation failed. An output parameter.">Se tiver êxito, a posição baseada em zero na cadeia de caracteres formatada em que o último caractere foi realmente definido; caso contrário, a primeira posição em que a operação falhou. Um parâmetro de saída.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the set operation. An output parameter.">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação de definição. Um parâmetro de saída.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se todos os caracteres foram definidos com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="input" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary vsli:raw="Gets or sets a value indicating whether literal character positions in the mask can be overwritten by their same values.">Obtém ou define um valor que indica se as posições de caractere literal na máscara podem ser substituídas por seus mesmos valores.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow literals to be added back; otherwise, &lt;see langword=&quot;false&quot; /&gt; to not allow the user to overwrite literal characters. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> permitir que os literais sejam adicionados de volta; caso contrário, <see langword="false" /> não permitir que o usuário substitua os caracteres literais. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary vsli:raw="Returns the formatted string in a displayable form.">Retorna a cadeia de caracteres formatada em um formato que pode ser exibido.</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes prompts and mask literals.">A <see cref="T:System.String" /> formatada que inclui prompts e literais de máscara.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary vsli:raw="Returns the formatted string that includes all the assigned character values.">Retorna a cadeia de caracteres formatada que inclui todos os valores de caractere atribuídos.</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values.">A <see cref="T:System.String" /> formatada que inclui todos os valores de caractere atribuídos.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including password characters.">Retorna a cadeia de caracteres formatada, incluindo caracteres de senha, opcionalmente.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">
        <see langword="true" /> para retornar os caracteres editáveis reais; caso contrário, <see langword="false" /> para indicar que a propriedade <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> deve ser respeitada.</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes literals, prompts, and optionally password characters.">A <see cref="T:System.String" /> formatada que inclui literais, prompts e, opcionalmente, caracteres de senha.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including prompt and literal characters.">Retorna a cadeia de caracteres formatada, incluindo, opcionalmente, caracteres de prompt e literais.</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para incluir caracteres de prompt na cadeia de caracteres de retorno; caso contrário, <see langword="false" />.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para incluir caracteres literais na cadeia de caracteres de retorno; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values and optionally includes literals and prompts.">A <see cref="T:System.String" /> formatada que inclui todos os valores de caractere atribuídos e, opcionalmente, inclui literais e prompts.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt, literal, and password characters.">Retorna uma subcadeia da cadeia de caracteres formatada, incluindo, opcionalmente, caracteres de prompt, de literais e de senha.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">
        <see langword="true" /> para retornar os caracteres editáveis reais; caso contrário, <see langword="false" /> para indicar que a propriedade <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> deve ser respeitada.</param>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para incluir caracteres de prompt na cadeia de caracteres de retorno; caso contrário, <see langword="false" />.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para retornar caracteres literais na cadeia de caracteres de retorno; caso contrário, <see langword="false" />.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">A posição baseada em zero na cadeia de caracteres formatada na qual começa a saída.</param>
      <param name="length" vsli:raw="The number of characters to return.">O número de caracteres a ser retornado.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals, prompts, and password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">Se for bem-sucedido, uma subcadeia da <see cref="T:System.String" /> formatada, que inclui todos os valores de caractere atribuídos e, opcionalmente, inclui literais, prompts e caracteres de senha; caso contrário, a cadeia de caracteres <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt and literal characters.">Retorna uma subcadeia da cadeia de caracteres formatada, incluindo, opcionalmente, caracteres de prompt e literais.</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para incluir caracteres de prompt na cadeia de caracteres de retorno; caso contrário, <see langword="false" />.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para incluir caracteres literais na cadeia de caracteres de retorno; caso contrário, <see langword="false" />.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">A posição baseada em zero na cadeia de caracteres formatada na qual começa a saída.</param>
      <param name="length" vsli:raw="The number of characters to return.">O número de caracteres a ser retornado.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals and prompts; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">Se for bem-sucedido, uma subcadeia da <see cref="T:System.String" /> formatada, que inclui todos os valores de caractere atribuídos e, opcionalmente, inclui literais e prompts; caso contrário, a cadeia de caracteres <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including password characters.">Retorna uma subcadeia da cadeia de caracteres formatada, incluindo, opcionalmente, caracteres de senha.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">
        <see langword="true" /> para retornar os caracteres editáveis reais; caso contrário, <see langword="false" /> para indicar que a propriedade <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> deve ser respeitada.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">A posição baseada em zero na cadeia de caracteres formatada na qual começa a saída.</param>
      <param name="length" vsli:raw="The number of characters to return.">O número de caracteres a ser retornado.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes literals, prompts, and optionally password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">Se for bem-sucedido, uma subcadeia da <see cref="T:System.String" /> formatada, que inclui literais, prompts e, opcionalmente, caracteres de senha; caso contrário, a cadeia de caracteres <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string.">Retorna uma subcadeia da cadeia de caracteres formatada.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">A posição baseada em zero na cadeia de caracteres formatada na qual começa a saída.</param>
      <param name="length" vsli:raw="The number of characters to return.">O número de caracteres a ser retornado.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">Se for bem-sucedido, uma subcadeia da <see cref="T:System.String" /> formatada, que inclui todos os valores de caractere atribuídos; caso contrário, a cadeia de caracteres <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified character could be set successfully at the specified position.">Testa se o caractere especificado pode ser definido na posição especificada com êxito.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">O valor <see cref="T:System.Char" /> para testar.</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">A posição na máscara na qual testar o caractere de entrada.</param>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação. Um parâmetro de saída.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character is valid for the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o caractere especificado for válido para a posição especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary vsli:raw="Tests whether the specified character would be escaped at the specified position.">Testa se o caractere especificado seria escapado na posição especificada.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">O valor <see cref="T:System.Char" /> para testar.</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">A posição na máscara na qual testar o caractere de entrada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character would be escaped at the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o caractere especificado seria escapado na posição especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary vsli:raw="Tests whether the specified string could be set successfully.">Testa se a cadeia de caracteres especificada pode ser definida com êxito.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">O valor <see cref="T:System.String" /> para testar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a cadeia de caracteres especificada representa uma entrada válida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified string could be set successfully, and then outputs position and descriptive information.">Testa se a cadeia de caracteres especificada pode ser definida com êxito e, em seguida, gera a posição e informações descritivas.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">O valor <see cref="T:System.String" /> para testar.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position of the last character actually tested; otherwise, the first position where the test failed. An output parameter.">Se for bem-sucedido, a posição baseada em zero do último caractere realmente testado; caso contrário, a primeira posição em que o teste falhou. Um parâmetro de saída.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the test operation. An output parameter.">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação de teste. Um parâmetro de saída.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a cadeia de caracteres especificada representa uma entrada válida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary vsli:raw="Specifies values that succinctly describe the results of a masked text parsing operation.">Especifica valores que descrevem sucintamente os resultados de um operação de análise de texto mascarado.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not alphanumeric. .">A operação não foi bem-sucedida. Foi encontrado um caractere de entrada que não era alfanumérico. .</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not a member of the ASCII character set.">A operação não foi bem-sucedida. Foi encontrado um caractere de entrada que não era um membro do conjunto de caracteres ASCII.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary vsli:raw="Success. The operation succeeded because a literal, prompt or space character was an escaped character. For more information about escaped characters, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)&quot; /&gt; method.">Êxito. A operação foi bem-sucedida porque um literal, prompt ou caractere de espaço era caractere de escape. Para obter mais informações sobre caracteres de escape, consulte o método <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a digit.">A operação não foi bem-sucedida. Foi encontrado um caractere de entrada que não era um dígito.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary vsli:raw="Operation did not succeed. The program encountered an input character that was not valid. For more information about characters that are not valid, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)&quot; /&gt; method.">A operação não foi bem-sucedida. O programa encontrou um caractere de entrada que não era válido. Para obter mais informações sobre caracteres que não são válidos, consulte o método <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a letter.">A operação não foi bem-sucedida. Foi encontrado um caractere de entrada que não era uma letra.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed; therefore, no side effect was produced.">Êxito. A operação primária não foi executada porque não foi necessária. portanto, nenhum efeito colateral foi produzido.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary vsli:raw="Operation did not succeed. The current position in the formatted string is a literal character.">A operação não foi bem-sucedida. A posição atual na cadeia de caracteres formatada é um caractere literal.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary vsli:raw="Operation did not succeed. The specified position is not in the range of the target string; typically it is either less than zero or greater then the length of the target string.">A operação não foi bem-sucedida. A posição especificada não está no intervalo da cadeia de caracteres de destino; normalmente, é menor que zero ou maior que o comprimento da cadeia de caracteres de destino.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary vsli:raw="Operation did not succeed. The prompt character is not valid at input, perhaps because the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.">A operação não foi bem-sucedida. O caractere de prompt não é válido na entrada, talvez porque o <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> está definido como <see langword="false" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed, but the method produced a side effect. For example, the &lt;see cref=&quot;Overload:System.ComponentModel.MaskedTextProvider.RemoveAt&quot; /&gt; method can delete an unassigned edit position, which causes left-shifting of subsequent characters in the formatted string.">Êxito. A operação principal não foi executada porque não foi necessária, mas o método produziu um efeito colateral. Por exemplo, o método <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> pode excluir uma posição de edição não atribuída, o que causa o deslocamento à esquerda de caracteres subsequentes na cadeia de caracteres formatada.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a signed digit.">A operação não foi bem-sucedida. Foi encontrado um caractere de entrada que não era um dígito com sinal.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary vsli:raw="Success. The primary operation succeeded.">Êxito. A operação primária foi bem-sucedida.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary vsli:raw="Operation did not succeed. There were not enough edit positions available to fulfill the request.">A operação não foi bem-sucedida. Não havia posições de edição suficientes disponíveis para atender à solicitação.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary vsli:raw="Unknown. The result of the operation could not be determined.">Desconhecido. O resultado da operação não pôde ser determinado.</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary vsli:raw="Represents a class member, such as a property or event. This is an abstract base class.">Representa um membro de classe, como uma propriedade ou evento. Esta é uma classe base abstrata.</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MemberDescriptor" /> com o <see cref="T:System.ComponentModel.MemberDescriptor" /> especificado.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the member and its attributes.">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que contém o nome do membro e seus atributos.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the old &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MemberDescriptor" /> com o nome no <see cref="T:System.ComponentModel.MemberDescriptor" /> especificado e os atributos tanto no <see cref="T:System.ComponentModel.MemberDescriptor" /> antigo quanto na matriz <see cref="T:System.Attribute" />.</summary>
      <param name="oldMemberDescriptor" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que tem o nome do membro e seus atributos.</param>
      <param name="newAttributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects with the attributes you want to add to the member.">Uma matriz de objetos <see cref="T:System.Attribute" /> com os atributos que você deseja adicionar ao membro.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MemberDescriptor" /> com o nome especificado do membro.</summary>
      <param name="name" vsli:raw="The name of the member.">O nome do membro.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">O nome é uma cadeia de caracteres vazia ("") ou <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member and an array of attributes.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MemberDescriptor" /> com o nome especificado do membro e uma matriz de atributos.</summary>
      <param name="name" vsli:raw="The name of the member.">O nome do membro.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the member attributes.">Uma matriz do tipo <see cref="T:System.Attribute" /> que contém os atributos de membro.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">O nome é uma cadeia de caracteres vazia ("") ou <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary vsli:raw="Gets or sets an array of attributes.">Obtém ou define uma matriz de atributos.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the attributes of this member.">Uma matriz do tipo <see cref="T:System.Attribute" /> que contém os atributos deste membro.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary vsli:raw="Gets the collection of attributes for this member.">Obtém a coleção de atributos para este membro.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that provides the attributes for this member, or an empty collection if there are no attributes in the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt;.">Um <see cref="T:System.ComponentModel.AttributeCollection" /> que fornece os atributos para esse membro ou uma coleção vazia se não houver nenhum atributo na <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary vsli:raw="Gets the name of the category to which the member belongs, as specified in the &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;.">Obtém o nome da categoria à qual o membro pertence, conforme especificado no <see cref="T:System.ComponentModel.CategoryAttribute" />.</summary>
      <returns vsli:raw="The name of the category to which the member belongs. If there is no &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;, the category name is set to the default category, &lt;see langword=&quot;Misc&quot; /&gt;.">O nome da categoria à qual o membro pertence. Se não houver <see cref="T:System.ComponentModel.CategoryAttribute" />, o nome da categoria será definido como a categoria padrão, <see langword="Misc" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary vsli:raw="Creates a collection of attributes using the array of attributes passed to the constructor.">Cria uma coleção de atributos usando a matriz de atributos passada para o construtor.</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that contains the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt; attributes.">Um novo <see cref="T:System.ComponentModel.AttributeCollection" /> que contém os atributos <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary vsli:raw="Gets the description of the member, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;.">Obtém a descrição do membro, conforme especificado no <see cref="T:System.ComponentModel.DescriptionAttribute" />.</summary>
      <returns vsli:raw="The description of the member. If there is no &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;, the property value is set to the default, which is an empty string (&quot;&quot;).">A descrição do membro. Se não houver nenhum <see cref="T:System.ComponentModel.DescriptionAttribute" />, o valor da propriedade será definido como o padrão, que é uma cadeia de caracteres vazia ("").</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary vsli:raw="Gets whether this member should be set only at design time, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignOnlyAttribute&quot; /&gt;.">Obtém a informação de se este membro deve ou não ser definido apenas em tempo de design, conforme especificado no <see cref="T:System.ComponentModel.DesignOnlyAttribute" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this member should be set only at design time; &lt;see langword=&quot;false&quot; /&gt; if the member can be set during run time.">
        <see langword="true" /> se esse membro deve ser definido somente no momento do design; <see langword="false" /> se o membro pode ser definido durante o tempo de execução.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary vsli:raw="Gets the name that can be displayed in a window, such as a Properties window.">Obtém o nome que pode ser exibido em uma janela, tal como uma janela Propriedades.</summary>
      <returns vsli:raw="The name to display for the member.">O nome a ser exibido para o membro.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this instance to the given object to see if they are equivalent.">Compara essa instância ao objeto fornecido para verificar se eles são equivalentes.</summary>
      <param name="obj" vsli:raw="The object to compare to the current instance.">O objeto a ser comparado com a instância atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se forem equivalentes; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="When overridden in a derived class, adds the attributes of the inheriting class to the specified list of attributes in the parent class.">Quando substituído em uma classe derivada, adiciona os atributos da classe de herança à lista de atributos na classe pai especificada.</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">Um <see cref="T:System.Collections.IList" /> que lista os atributos na classe pai. Inicialmente, está vazio.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary vsli:raw="Finds the given method through reflection, searching only for public methods.">Localiza o método fornecido por meio de reflexão, pesquisando somente métodos públicos.</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">O componente que contém o método.</param>
      <param name="name" vsli:raw="The name of the method to find.">O nome do método a ser localizado.</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">Uma matriz de parâmetros do método, usada para escolher entre os métodos sobrecarregados.</param>
      <param name="returnType" vsli:raw="The type to return for the method.">O tipo a ser retornado pelo método.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">Um <see cref="T:System.Reflection.MethodInfo" /> que representará o método ou <see langword="null" /> se o método não for localizado.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary vsli:raw="Finds the given method through reflection, with an option to search only public methods.">Localiza o método fornecido por meio de reflexão, com uma opção para pesquisar somente os métodos públicos.</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">O componente que contém o método.</param>
      <param name="name" vsli:raw="The name of the method to find.">O nome do método a ser localizado.</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">Uma matriz de parâmetros do método, usada para escolher entre os métodos sobrecarregados.</param>
      <param name="returnType" vsli:raw="The type to return for the method.">O tipo a ser retornado pelo método.</param>
      <param name="publicOnly" vsli:raw="Whether to restrict search to public methods.">Se é necessário restringir a pesquisa à métodos públicos.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">Um <see cref="T:System.Reflection.MethodInfo" /> que representará o método ou <see langword="null" /> se o método não for localizado.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Um código hash do <see cref="T:System.ComponentModel.MemberDescriptor" /> atual.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="Retrieves the object that should be used during invocation of members.">Recupera o objeto que deve ser usado durante a invocação de membros.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">O <see cref="T:System.Type" /> do destino da invocação.</param>
      <param name="instance" vsli:raw="The potential invocation target.">O destino da invocação potencial.</param>
      <returns vsli:raw="The object to be used during member invocations.">O objeto a ser usado durante as invocações de membro.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> ou <paramref name="instance" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary vsli:raw="Gets the component on which to invoke a method.">Obtém o componente em que se invoca um método.</summary>
      <param name="componentClass" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of component this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; is bound to. For example, if this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; describes a property, this parameter should be the class that the property is declared on.">Um <see cref="T:System.Type" /> que representa o tipo de componente aos quais esse <see cref="T:System.ComponentModel.MemberDescriptor" /> está associado. Por exemplo, se esse <see cref="T:System.ComponentModel.MemberDescriptor" /> descreve uma propriedade, esse parâmetro deve ser a classe em que a propriedade é declarada.</param>
      <param name="component" vsli:raw="An instance of the object to call.">Uma instância do objeto a ser chamado.</param>
      <returns vsli:raw="An instance of the component to invoke. This method returns a visual designer when the property is attached to a visual designer.">Uma instância do componente a ser invocado. Esse método retorna um designer visual quando a propriedade é anexada a um designer visual.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentClass&quot; /&gt; or &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentClass" /> ou <paramref name="component" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary vsli:raw="Gets a component site for the given component.">Obtém um site do componente para o componente fornecido.</summary>
      <param name="component" vsli:raw="The component for which you want to find a site.">O componente para o qual você deseja encontrar um site.</param>
      <returns vsli:raw="The site of the component, or &lt;see langword=&quot;null&quot; /&gt; if a site does not exist.">O site do componente ou <see langword="null" /> se um site não existir.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary vsli:raw="Gets a value indicating whether the member is browsable, as specified in the &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;.">Obtém um valor que indica se o membro é navegável, conforme especificado no <see cref="T:System.ComponentModel.BrowsableAttribute" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is browsable; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If there is no &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;, the property value is set to the default, which is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se o membro for navegável; caso contrário, <see langword="false" />. Se não houver <see cref="T:System.ComponentModel.BrowsableAttribute" />, o valor da propriedade será definido como o padrão, que é <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary vsli:raw="Gets the name of the member.">Obtém o nome do membro.</summary>
      <returns vsli:raw="The name of the member.">O nome do membro.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary vsli:raw="Gets the hash code for the name of the member, as specified in &lt;see cref=&quot;M:System.String.GetHashCode&quot; /&gt;.">Obtém o código hash do nome do membro, como especificado em <see cref="M:System.String.GetHashCode" />.</summary>
      <returns vsli:raw="The hash code for the name of the member.">O código de hash para o nome do membro.</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary vsli:raw="Provides a type converter to convert multiline strings to a simple string.">Fornece um conversor de tipo para converter cadeias de caracteres de várias linhas em uma cadeia de caracteres simples.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MultilineStringConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MultilineStringConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Converte o objeto de valor determinado para o tipo especificado, usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Um <see cref="T:System.Globalization.CultureInfo" />. Se <see langword="null" /> for passado, a cultura atual será considerada.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">O <see cref="T:System.Type" /> para o qual o parâmetro value será convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the &lt;paramref name=&quot;value&quot; /&gt; parameter, using the specified context and attributes.">Retorna uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro <paramref name="value" /> usando o contexto e os atributos especificados.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Um <see cref="T:System.Object" /> que especifica o tipo de matriz para o qual obter as propriedades.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Uma matriz do tipo <see cref="T:System.Attribute" /> que é usada como um filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que são expostas para esse tipo de dados ou <see langword="null" />, se não há nenhuma propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">Retorna se este objeto é compatível com as propriedades, usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.ComponentModel.MultilineStringConverter.GetProperties&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" /> deva ser chamado para localizar as propriedades desse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary vsli:raw="Provides the base implementation for the &lt;see cref=&quot;T:System.ComponentModel.INestedContainer&quot; /&gt; interface, which enables containers to have an owning component.">Fornece a implementação de base para a interface <see cref="T:System.ComponentModel.INestedContainer" />, que permite que os contêineres tenham um componente de propriedade.</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NestedContainer&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.NestedContainer" />.</summary>
      <param name="owner" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">O <see cref="T:System.ComponentModel.IComponent" /> que detém esse contêiner aninhado.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="owner" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site for the component within the container.">Cria um site para o componente dentro do contêiner.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">O <see cref="T:System.ComponentModel.IComponent" /> para o qual criar um site.</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">O nome a ser atribuído ao <paramref name="component" /> ou <see langword="null" /> para ignorar a atribuição de nomes.</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt;.">O <see cref="T:System.ComponentModel.ISite" /> recém-criado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the resources used by the nested container.">Libera os recursos usados pelo contêiner aninhado.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">Obtém o objeto de serviço do tipo especificado, se estiver disponível.</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">O <see cref="T:System.Type" /> do serviço a ser recuperado.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that implements the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">Um <see cref="T:System.Object" /> que implementa o serviço solicitado ou <see langword="null" />, se o serviço não puder ser resolvido.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for this nested container.">Obtém o componente proprietário para esse contêiner aninhado.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">O <see cref="T:System.ComponentModel.IComponent" /> que detém esse contêiner aninhado.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary vsli:raw="Gets the name of the owning component.">Obtém o nome do componente proprietário.</summary>
      <returns vsli:raw="The name of the owning component.">O nome do componente de propriedade.</returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary vsli:raw="Provides automatic conversion between a nullable type and its underlying primitive type.">Fornece conversão automática entre um tipo anulável e seu tipo primitivo subjacente.</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NullableConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.NullableConverter" />.</summary>
      <param name="type" vsli:raw="The specified nullable type.">O tipo que permite valor nulo especificado.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is not a nullable type.">
        <paramref name="type" /> não é um tipo que permite valor nulo.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">Retorna se esse conversor pode converter um objeto do tipo especificado no tipo desse conversor, usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">Retorna se esse conversor pode converter o objeto para o tipo especificado, usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Um <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Converte o objeto determinado para o tipo deste conversor, usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">A <see cref="T:System.Globalization.CultureInfo" /> para ser usada como a cultura atual.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Converte o objeto de valor determinado para o tipo especificado, usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">A <see cref="T:System.Globalization.CultureInfo" /> para ser usada como a cultura atual.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">O <see cref="T:System.Type" /> para o qual o parâmetro value será convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">Cria uma instância do tipo ao qual esse <see cref="T:System.ComponentModel.TypeConverter" /> está associado, usando o contexto especificado, dado um conjunto de valores de propriedade para o objeto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">Um <see cref="T:System.Collections.IDictionary" /> de novos valores de propriedade.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.Object" /> que representa o <see cref="T:System.Collections.IDictionary" /> fornecido ou <see langword="null" /> se o objeto não puder ser criado. Esse método sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">Retorna se a alteração de um valor neste objeto requer uma chamada para <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para criar um novo valor, usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a alteração de uma propriedade neste objeto requer uma chamada para <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para criar um novo valor, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">Retorna uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro de valor, usando o contexto e os atributos especificados.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Um <see cref="T:System.Object" /> que especifica o tipo de matriz para o qual obter as propriedades.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Uma matriz do tipo <see cref="T:System.Attribute" /> que é usada como um filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que são expostas para esse tipo de dados ou <see langword="null" />, se não há nenhuma propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">Retorna se este objeto é compatível com as propriedades, usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> deva ser chamado para localizar as propriedades desse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">Retorna uma coleção de valores padrão para o tipo de dados para o qual esse conversor de tipo foi criado quando fornecido com um contexto de formato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato que pode ser usado para extrair informações adicionais sobre o ambiente do qual este conversor é invocado. Esse parâmetro ou as propriedades desse parâmetro podem ser <see langword="null" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contém um conjunto padrão de valores válidos ou <see langword="null" />, se o tipo de dados não der suporte a um conjunto padrão de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;Overload:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">Retorna se a coleção de valores padrão retornada de <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" /> é uma lista exclusiva de valores possíveis, usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" /> se o <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retornado de <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> for uma lista completa de valores possíveis, <see langword="false" /> se houver outros valores possíveis.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">Retorna se este objeto é compatível com um conjunto padrão de valores que podem ser escolhidos em uma lista, usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> deve ser chamado para localizar um conjunto comum de valores aos quais o objeto dá suporte; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">Retorna se o objeto de valor fornecido é válido para esse tipo e para o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">O <see cref="T:System.Object" /> para testar a validade.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor especificado for válido para esse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary vsli:raw="Gets the nullable type.">Obtém o tipo que permite valor nulo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the nullable type.">Um <see cref="T:System.Type" /> valor que representa o tipo anulável.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary vsli:raw="Gets the underlying type.">Obtém o tipo subjacente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the underlying type.">Um <see cref="T:System.Type" /> que representa o tipo subjacente.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary vsli:raw="Gets the underlying type converter.">Obtém o conversor de tipo subjacente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that represents the underlying type converter.">Um <see cref="T:System.ComponentModel.TypeConverter" /> que representa o conversor de tipo subjacente.</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary vsli:raw="Indicates that an object's text representation is obscured by characters such as asterisks. This class cannot be inherited.">Indica que a representação de texto de um objeto é obscurecida por caracteres como asteriscos. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class, optionally showing password text.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />, especificando opcionalmente o texto da senha.</summary>
      <param name="password" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que a propriedade deve ser mostrada como texto de senha; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">Especifica o valor padrão para o <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; instances are equal.">Determina se duas instâncias <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> são iguais.</summary>
      <param name="o" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">O <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> a ser comparado com o <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> especificado for igual ao <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">Um código hash do <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> atual.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns an indication whether the value of this instance is the default value.">Retorna uma indicação se o valor desta instância é o valor padrão.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a instância for o atributo padrão para a classe; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary vsli:raw="Specifies that a text property is not used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">Especifica que uma propriedade de texto não é usada como uma senha. Este campo <see langword="static" /> (<see langword="Shared" /> no Visual Basic) é somente leitura.</summary>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary vsli:raw="Gets a value indicating if the property for which the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is defined should be shown as password text.">Obtém um valor que indica se a propriedade para a qual o <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> é definido deve ser mostrada como texto de senha.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />se a propriedade deve ser mostrada como texto de senha; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary vsli:raw="Specifies that a text property is used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">Especifica que uma propriedade de texto é usada como uma senha. Este campo <see langword="static" /> (<see langword="Shared" /> no Visual Basic) é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary vsli:raw="Provides an abstraction of a property on a class.">Fornece uma abstração de uma propriedade em uma classe.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> com o nome e os atributos no <see cref="T:System.ComponentModel.MemberDescriptor" /> especificado.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the property and its attributes.">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que contém o nome da propriedade e seus atributos.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> com o nome no <see cref="T:System.ComponentModel.MemberDescriptor" /> especificado e os atributos tanto no <see cref="T:System.ComponentModel.MemberDescriptor" /> quanto na matriz <see cref="T:System.Attribute" />.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; containing the name of the member and its attributes.">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que contém o nome do membro e seus atributos.</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array containing the attributes you want to associate with the property.">Uma matriz <see cref="T:System.Attribute" /> que contém os atributos que você deseja associar à propriedade.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the specified name and attributes.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> com o nome e os atributos especificados.</summary>
      <param name="name" vsli:raw="The name of the property.">O nome da propriedade.</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the property attributes.">Uma matriz do tipo <see cref="T:System.Attribute" /> que contém os atributos da propriedade.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">Permite que outros objetos sejam notificados quando essa propriedade muda.</summary>
      <param name="component" vsli:raw="The component to add the handler for.">O componente ao qual adicionar o manipulador.</param>
      <param name="handler" vsli:raw="The delegate to add as a listener.">O delegado a ser adicionado como um ouvinte.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ou <paramref name="handler" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, returns whether resetting an object changes its value.">Quando substituído em uma classe derivada, retorna se a redefinição de um objeto altera ou não seu valor.</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">O componente a ser testado quanto à capacidade de redefinição.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes its value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a redefinição do componente altera seu valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the component this property is bound to.">Quando substituído em uma classe derivada, obtém o tipo de componente ao qual essa propriedade está associada.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component this property is bound to. When the &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)&quot; /&gt; methods are invoked, the object specified might be an instance of this type.">Um <see cref="T:System.Type" /> que representa o tipo de componente ao qual esta propriedade está associada. Quando os métodos <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> ou <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> são invocados, o objeto especificado pode ser uma instância desse tipo.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary vsli:raw="Gets the type converter for this property.">Obtém o conversor de tipo dessa propriedade.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is used to convert the &lt;see cref=&quot;T:System.Type&quot; /&gt; of this property.">Um <see cref="T:System.ComponentModel.TypeConverter" /> que é usado para converter o <see cref="T:System.Type" /> dessa propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary vsli:raw="Creates an instance of the specified type.">Cria uma instância do tipo especificado.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">Um <see cref="T:System.Type" /> que representa o tipo a ser criado.</param>
      <returns vsli:raw="A new instance of the type.">Uma nova instância do tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this to another object to see if they are equivalent.">Compara este a outro objeto para ver se eles são equivalentes.</summary>
      <param name="obj" vsli:raw="The object to compare to this &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">O objeto a comparar a este <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se os valores forem equivalentes; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="Adds the attributes of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the specified list of attributes in the parent class.">Adiciona os atributos do <see cref="T:System.ComponentModel.PropertyDescriptor" /> à lista especificada de atributos na classe pai.</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">Um <see cref="T:System.Collections.IList" /> que lista os atributos na classe pai. Inicialmente, está vazio.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt;.">Retorna o <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> padrão.</summary>
      <returns vsli:raw="A collection of property descriptor.">Uma coleção do descritor de propriedades.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; using a specified array of attributes as a filter.">Retorna um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> usando uma matriz especificada de atributos como filtro.</summary>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Uma matriz do tipo <see cref="T:System.Attribute" /> a ser usada como um filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que correspondem aos atributos especificados.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object.">Retorna um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> para um determinado objeto.</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">Um componente cujas propriedades serão obtidas.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">Uma <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades do componente especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object using a specified array of attributes as a filter.">Retorna um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> para um determinado objeto usando uma matriz especificada de atributos como filtro.</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">Um componente cujas propriedades serão obtidas.</param>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Uma matriz do tipo <see cref="T:System.Attribute" /> a ser usada como um filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que correspondem aos atributos especificados para o componente especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Gets an editor of the specified type.">Obtém um editor do tipo especificado.</summary>
      <param name="editorBaseType" vsli:raw="The base type of editor, which is used to differentiate between multiple editors that a property supports.">O tipo base do editor, que é usado para diferenciar entre os vários editores que dão suporte a uma propriedade.</param>
      <returns vsli:raw="An instance of the requested editor type, or &lt;see langword=&quot;null&quot; /&gt; if an editor cannot be found.">Uma instância do tipo de editor solicitado ou <see langword="null" /> se um editor não puder ser encontrado.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">Retorna o código hash para esse objeto.</summary>
      <returns vsli:raw="The hash code for this object.">O código hash desse objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="This method returns the object that should be used during invocation of members.">Esse método retorna o objeto que deve ser usado durante a invocação de membros.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">O <see cref="T:System.Type" /> do destino da invocação.</param>
      <param name="instance" vsli:raw="The potential invocation target.">O destino da invocação potencial.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; that should be used during invocation of members.">O <see cref="T:System.Object" /> que deve ser usado durante a invocação de membros.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary vsli:raw="Returns a type using its name.">Retorna um tipo usando seu nome.</summary>
      <param name="typeName" vsli:raw="The assembly-qualified name of the type to retrieve.">O nome qualificado pelo assembly do tipo a ser recuperado.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that matches the given type name, or &lt;see langword=&quot;null&quot; /&gt; if a match cannot be found.">Um <see cref="T:System.Type" /> que corresponde ao nome de tipo em questão ou <see langword="null" /> se não for encontrada uma correspondência.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, gets the current value of the property on a component.">Quando substituído em uma classe derivada, obtém o valor atual da propriedade em um componente.</summary>
      <param name="component" vsli:raw="The component with the property for which to retrieve the value.">O componente com a propriedade cujo valor deve ser recuperado.</param>
      <returns vsli:raw="The value of a property for a given component.">O valor de uma propriedade para um determinado componente.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary vsli:raw="Retrieves the current set of &lt;c&gt;ValueChanged&lt;/c&gt; event handlers for a specific component.">Recupera o conjunto atual de manipuladores de eventos <c>ValueChanged</c> para um componente específico.</summary>
      <param name="component" vsli:raw="The component for which to retrieve event handlers.">O componente para o qual recuperar manipuladores de eventos.</param>
      <returns vsli:raw="A combined multicast event handler, or &lt;see langword=&quot;null&quot; /&gt; if no event handlers are currently assigned to &lt;paramref name=&quot;component&quot; /&gt;.">Um manipulador de eventos multicast combinado ou <see langword="null" /> se nenhum manipulador de eventos estiver atribuído ao <paramref name="component" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary vsli:raw="Gets a value indicating whether this property should be localized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt;.">Obtém um valor que indica se esta propriedade deve ser localizada, conforme especificado no <see cref="T:System.ComponentModel.LocalizableAttribute" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is marked with the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt; set to &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o membro estiver marcado com o <see cref="T:System.ComponentModel.LocalizableAttribute" /> definido como <see langword="true" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether this property is read-only.">Quando substituído em uma classe derivada, obtém um valor que indica se a propriedade é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a propriedade for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary vsli:raw="Raises the &lt;c&gt;ValueChanged&lt;/c&gt; event that you implemented.">Gera o evento <c>ValueChanged</c> que foi implementado.</summary>
      <param name="component" vsli:raw="The object that raises the event.">O objeto que gera o evento.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">Um <see cref="T:System.EventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the property.">Quando substituído em uma classe derivada, obtém o tipo da propriedade.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">Um <see cref="T:System.Type" /> que representa o tipo da propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">Permite que outros objetos sejam notificados quando essa propriedade muda.</summary>
      <param name="component" vsli:raw="The component to remove the handler for.">O componente do qual remover o manipulador.</param>
      <param name="handler" vsli:raw="The delegate to remove as a listener.">O delegado a ser removido como ouvinte.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ou <paramref name="handler" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, resets the value for this property of the component to the default value.">Quando substituído em uma classe derivada, redefine o valor dessa propriedade do componente para o valor padrão.</summary>
      <param name="component" vsli:raw="The component with the property value that is to be reset to the default value.">O componente com o valor da propriedade que deve ser redefinido para o valor padrão.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary vsli:raw="Gets a value indicating whether this property should be serialized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibilityAttribute&quot; /&gt;.">Obtém um valor que indica se esta propriedade deve ser serializada, conforme especificado no <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" />.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibility&quot; /&gt; enumeration values that specifies whether this property should be serialized.">Um dos valores de enumeração <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> que especifica se essa propriedade deve ser serializada.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary vsli:raw="When overridden in a derived class, sets the value of the component to a different value.">Quando substituído em uma classe derivada, define o valor do componente para um valor diferente.</summary>
      <param name="component" vsli:raw="The component with the property value that is to be set.">O componente com o valor da propriedade que deve ser definida.</param>
      <param name="value" vsli:raw="The new value.">O novo valor.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.">Quando substituído em uma classe derivada, determina um valor que indica se o valor dessa propriedade deve ser persistente.</summary>
      <param name="component" vsli:raw="The component with the property to be examined for persistence.">O componente com a propriedade a ser examinada quanto à persistência.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be persisted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a propriedade deve ser persistida, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary vsli:raw="Gets a value indicating whether value change notifications for this property may originate from outside the property descriptor.">Obtém um valor que indica se as notificações de alteração de valor para essa propriedade podem ser obtidas de fora do descritor da propriedade.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if value change notifications may originate from outside the property descriptor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se as notificações de alteração de valor puderem ser originadas de fora do descritor de propriedade; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">Uma matriz do tipo <see cref="T:System.ComponentModel.PropertyDescriptor" /> que fornece as propriedades para esta coleção.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class, which is optionally read-only.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, que pode ser somente leitura.</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">Uma matriz do tipo <see cref="T:System.ComponentModel.PropertyDescriptor" /> que fornece as propriedades para esta coleção.</param>
      <param name="readOnly" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, specifies that the collection cannot be modified.">Se <see langword="true" />, especifica que a coleção não pode ser modificada.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection.">Adiciona o <see cref="T:System.ComponentModel.PropertyDescriptor" /> especificado à coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> a adicionar à coleção.</param>
      <returns vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added to the collection.">O índice do <see cref="T:System.ComponentModel.PropertyDescriptor" /> que foi adicionado à coleção.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary vsli:raw="Removes all &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects from the collection.">Remove todos os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> da coleção.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Retorna se a coleção contém o <see cref="T:System.ComponentModel.PropertyDescriptor" /> fornecido.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to find in the collection.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser localizado na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção contiver o <see cref="T:System.ComponentModel.PropertyDescriptor" /> fornecido, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to an array, starting at the specified index number.">Copia toda a coleção para uma matriz, começando no número de índice especificado.</summary>
      <param name="array" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to copy elements of the collection to.">Uma matriz de objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> na qual os elementos da coleção serão copiados.</param>
      <param name="index" vsli:raw="The index of the &lt;paramref name=&quot;array&quot; /&gt; parameter at which copying begins.">O índice do parâmetro <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of property descriptors in the collection.">Obtém o número de descritores de propriedade na coleção.</summary>
      <returns vsli:raw="The number of property descriptors in the collection.">O número de descritores de propriedade na coleção.</returns>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use instead of creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Especifica uma coleção vazia que você pode usar em vez de criar uma nova sem nenhum item. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, using a Boolean to indicate whether to ignore case.">Retorna o <see cref="T:System.ComponentModel.PropertyDescriptor" /> com o nome especificado, usando um booliano para indicar se você deseja ignorar a diferenciação de maiúsculas e minúsculas.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return from the collection.">O nome do <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser retornado da coleção.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the property name; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se você quiser ignorar a diferenciação de maiúsculas e minúsculas no nome da propriedade, caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> com o nome especificado ou <see langword="null" /> se a propriedade não existir.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">Retorna um enumerador para esta classe.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Um enumerador do tipo <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Retorna o índice do <see cref="T:System.ComponentModel.PropertyDescriptor" /> fornecido.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return the index of.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> para o qual o índice será retornado.</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">O índice do <see cref="T:System.ComponentModel.PropertyDescriptor" /> fornecido.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection at the specified index number.">Adiciona o <see cref="T:System.ComponentModel.PropertyDescriptor" /> à coleção no número de índice especificado.</summary>
      <param name="index" vsli:raw="The index at which to add the &lt;paramref name=&quot;value&quot; /&gt; parameter to the collection.">O índice no qual o parâmetro <paramref name="value" /> será adicionado à coleção.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> a adicionar à coleção.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Classifica os membros desta coleção usando o <see cref="T:System.Collections.IComparer" /> especificado.</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Um comparador a ser usado para classificar os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> nesta coleção.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">Classifica os membros desta coleção. A ordem especificada é aplicada primeiro, seguida pela classificação padrão para esta coleção, que é geralmente em ordem alfabética.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Uma matriz de cadeias de caracteres que descreve a ordem de classificação dos objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> nesta coleção.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index number.">Obtém ou define o <see cref="T:System.ComponentModel.PropertyDescriptor" /> no número de índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get or set.">O índice de base zero do <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser obtido ou definido.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified index number.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> com o número de índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)&quot; /&gt;.">O parâmetro <paramref name="index" /> não é um índice válido para <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name.">Obtém ou define o <see cref="T:System.ComponentModel.PropertyDescriptor" /> com o nome especificado.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get from the collection.">O nome do <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser obtido da coleção.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> com o nome especificado ou <see langword="null" /> se a propriedade não existir.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the collection.">Remove o <see cref="T:System.ComponentModel.PropertyDescriptor" /> especificado da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser removido da coleção.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index from the collection.">Remove o <see cref="T:System.ComponentModel.PropertyDescriptor" /> no índice especificado da coleção.</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">O índice do <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser removido da coleção.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this collection, using the default sort for this collection, which is usually alphabetical.">Classifica os membros desta coleção usando a classificação padrão desta coleção, que, geralmente, é em ordem alfabética.</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Uma nova <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> classificados.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Classifica os membros desta coleção usando o <see cref="T:System.Collections.IComparer" /> especificado.</summary>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Um comparador a ser usado para classificar os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> nesta coleção.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Uma nova <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> classificados.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">Classifica os membros desta coleção. A ordem especificada é aplicada primeiro, seguida pela classificação padrão para esta coleção, que é geralmente em ordem alfabética.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Uma matriz de cadeias de caracteres que descreve a ordem de classificação dos objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> nesta coleção.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Uma nova <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> classificados.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the sort using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Classifica os membros desta coleção. A ordem especificada é aplicada primeiro, seguida pela classificação usando o <see cref="T:System.Collections.IComparer" /> especificado.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Uma matriz de cadeias de caracteres que descreve a ordem de classificação dos objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> nesta coleção.</param>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Um comparador a ser usado para classificar os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> nesta coleção.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Uma nova <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> classificados.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Obtém o número de elementos contidos na coleção.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">O número de elementos contidos na coleção.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread safe).">Obtém um valor que indica se o acesso à coleção é sincronizado (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o acesso à coleção for sincronizado (thread-safe); caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Obtém um objeto que pode ser usado para sincronizar o acesso à coleção.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Um objeto que pode ser usado para sincronizar o acesso à coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Adiciona um elemento com a chave fornecida e o valor para o <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the key of the element to add.">O <see cref="T:System.Object" /> a ser usado como chave do elemento a ser adicionado.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the value of the element to add.">O <see cref="T:System.Object" /> a ser usado como valor do elemento a ser adicionado.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Remove todos os elementos do <see cref="T:System.Collections.IDictionary" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">Determina se o <see cref="T:System.Collections.IDictionary" /> contém um elemento com a chave especificada.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">A chave a ser localizada no <see cref="T:System.Collections.IDictionary" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.IDictionary" /> contiver um elemento com a chave; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">Retorna um enumerador para esta classe.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Um enumerador do tipo <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">Obtém um valor que indica se o <see cref="T:System.Collections.IDictionary" /> tem um tamanho fixo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.IDictionary" /> tiver um valor fixo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">Obtém um valor que indica se o <see cref="T:System.Collections.IDictionary" /> é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.IDictionary" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtém ou define o elemento com a chave especificada.</summary>
      <param name="key" vsli:raw="The key of the element to get or set.">A chave do elemento a ser obtida ou adicionada.</param>
      <returns vsli:raw="The element with the specified key.">O elemento com a chave especificada.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Obtém um <see cref="T:System.Collections.ICollection" /> que contém as chaves do <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Um <see cref="T:System.Collections.ICollection" /> que contém as chaves do <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Remove o elemento com a chave especificada do <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">A chave do elemento a ser removido.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Obtém um <see cref="T:System.Collections.ICollection" /> que contém os valores no <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Um <see cref="T:System.Collections.ICollection" /> que contém os valores de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Retorna um <see cref="T:System.Collections.IEnumerator" /> para o <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Um <see cref="T:System.Collections.IEnumerator" /> para o <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Adiciona um item ao <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The item to add to the collection.">O item a adicionar à coleção.</param>
      <returns vsli:raw="The position into which the new element was inserted.">A posição na qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">Remove todos os itens da coleção.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">Determina se a coleção contém um valor específico.</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">O item a ser localizado na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o item for encontrado na coleção, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specified item in the collection.">Determina o índice de um item especificado na coleção.</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">O item a ser localizado na coleção.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list, otherwise -1.">O índice do <paramref name="value" /> se for encontrado na lista, caso contrário -1.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">Insere um item na coleção em um índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">O índice de base zero no qual o <paramref name="value" /> deve ser inserido.</param>
      <param name="value" vsli:raw="The item to insert into the collection.">O item a ser inserido na coleção.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Obtém um valor que indica se a coleção tem um tamanho fixo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção tiver um tamanho fixo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Obtém um valor que indica se a coleção é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets an item from the collection at a specified index.">Obtém ou define um item da coleção em um índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to get or set.">O índice com base em zero do item a ser obtido ou definido.</param>
      <returns vsli:raw="The element at the specified index.">O elemento no índice especificado.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">
        <paramref name="value" /> não é um <see cref="T:System.ComponentModel.PropertyDescriptor" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">
        <paramref name="index" /> é menor que 0.
-ou-
<paramref name="index" /> é igual a ou maior que <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specified value from the collection.">Remove a primeira ocorrência de um valor especificado da coleção.</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">O item a ser removido da coleção.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Remove o item no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">O índice com base em zero do item a ser removido.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">A coleção é somente leitura.</exception>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary vsli:raw="Identifies the property tab or tabs to display for the specified class or classes.">Identifica a guia ou as guias de propriedade a serem exibidas para a classe ou as classes especificadas.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyTabAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> usando o nome de classe de guia especificado.</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">O nome qualificado do assembly do tipo de guia a ser criado. Para obter um exemplo dessa convenção de formato, consulte <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name and tab scope.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> usando o nome de classe da guia e o escopo da guia especificados.</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">O nome qualificado do assembly do tipo de guia a ser criado. Para obter um exemplo dessa convenção de formato, consulte <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">Um <see cref="T:System.ComponentModel.PropertyTabScope" /> que indica o escopo dessa guia. Se o escopo for <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, ele será mostrado apenas para os componentes com o <see cref="T:System.ComponentModel.PropertyTabAttribute" /> correspondente. Se for <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ele será exibido para todos os componentes no documento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">
        <paramref name="tabScope" /> não é <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> ou <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> usando o tipo de guia especificado.</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">O tipo de guia a ser criado.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab and tab scope.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> usando o tipo de guia e o escopo da guia especificados.</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">O tipo de guia a ser criado.</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">Um <see cref="T:System.ComponentModel.PropertyTabScope" /> que indica o escopo dessa guia. Se o escopo for <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, ele será mostrado apenas para os componentes com o <see cref="T:System.ComponentModel.PropertyTabAttribute" /> correspondente. Se for <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ele será exibido para todos os componentes no documento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">
        <paramref name="tabScope" /> não é <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> ou <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified attribute.">Retorna um valor que indica se esta instância é igual a um atributo especificado.</summary>
      <param name="other" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.ComponentModel.PropertyTabAttribute" /> a ser comparado com esta instância ou <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se as instâncias do <see cref="T:System.ComponentModel.PropertyTabAttribute" /> forem iguais, caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter cannot be found.">Os tipos especificados pela propriedade <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> do parâmetro <paramref name="other" /> não podem ser encontrados.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="other" vsli:raw="An object to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">Um objeto a ser comparado com essa instância ou <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; refers to the same &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="other" /> se referir à mesma instância de <see cref="T:System.ComponentModel.PropertyTabAttribute" />, caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter could not be found.">Os tipos especificados pela propriedade <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> do parâmetro <paramref name="other" /> não puderam ser encontrados.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary vsli:raw="Gets the hash code for this object.">Obtém o código hash deste objeto.</summary>
      <returns vsli:raw="The hash code for the object the attribute belongs to.">O código hash do objeto ao qual o atributo pertence.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">Inicializa o atributo usando os nomes especificados das classes de guia e a matriz de escopos de guia.</summary>
      <param name="tabClassNames" vsli:raw="An array of fully qualified type names of the types to create for tabs on the Properties window.">Uma matriz de nomes de tipo totalmente qualificados para os tipos de guias a serem criados na janela Propriedades.</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">O escopo de cada guia. Se o escopo for <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, ele será mostrado apenas para os componentes com o <see cref="T:System.ComponentModel.PropertyTabAttribute" /> correspondente. Se for <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ele será exibido para todos os componentes no documento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Um ou mais dos valores em <paramref name="tabScopes" /> não é <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> nem <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.
- ou -
O comprimento das matrizes de <paramref name="tabClassNames" /> e de <paramref name="tabScopes" /> não correspondem.
- ou -
<paramref name="tabClassNames" /> ou <paramref name="tabScopes" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">Inicializa o atributo usando os nomes especificados das classes de guia e a matriz de escopos de guia.</summary>
      <param name="tabClasses" vsli:raw="The types of tabs to create.">Os tipos de guias a serem criados.</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">O escopo de cada guia. Se o escopo for <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, ele será mostrado apenas para os componentes com o <see cref="T:System.ComponentModel.PropertyTabAttribute" /> correspondente. Se for <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ele será exibido para todos os componentes no documento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Um ou mais dos valores em <paramref name="tabScopes" /> não é <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> nem <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.
- ou -
O comprimento das matrizes de <paramref name="tabClassNames" /> e de <paramref name="tabScopes" /> não correspondem.
- ou -
<paramref name="tabClassNames" /> ou <paramref name="tabScopes" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary vsli:raw="Gets the types of tabs that this attribute uses.">Obtém os tipos de guias que esse atributo usa.</summary>
      <returns vsli:raw="An array of types indicating the types of tabs that this attribute uses.">Uma matriz de tipos que indica os tipos de guias que esse atributo usa.</returns>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property could not be found.">Os tipos especificados pela propriedade <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> não puderam ser localizados.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary vsli:raw="Gets the names of the tab classes that this attribute uses.">Obtém os nomes das classes de guia que esse atributo usa.</summary>
      <returns vsli:raw="The names of the tab classes that this attribute uses.">Os nomes das classes de guia que esse atributo usa.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary vsli:raw="Gets an array of tab scopes of each tab of this &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;.">Obtém uma matriz de escopos de guia de cada guia deste <see cref="T:System.ComponentModel.PropertyTabAttribute" />.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; objects that indicate the scopes of the tabs.">Uma matriz de <see cref="T:System.ComponentModel.PropertyTabScope" /> objetos que indicam os escopos das guias.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary vsli:raw="Defines identifiers that indicate the persistence scope of a tab in the Properties window.">Define identificadores que indicam o escopo de persistência de uma guia na janela Propriedades.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary vsli:raw="This tab is specific to the current component. This tab is added to the Properties window for the current component only and is removed when the component is no longer selected.">Essa guia é específica do componente atual. Essa guia é adicionada à janela Propriedades do componente atual e é removida quando o componente não está mais selecionado.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary vsli:raw="This tab is specific to the current document. This tab is added to the Properties window and is removed when the currently selected document changes.">Essa guia é específica do documento atual. Essa guia é adicionada à janela Propriedades e será removida quando o documento atualmente selecionado é alterado.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary vsli:raw="This tab is added to the Properties window and can only be removed explicitly by a parent component.">Essa guia é adicionada à janela Propriedades e só pode ser removida explicitamente por um componente pai.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary vsli:raw="This tab is added to the Properties window and cannot be removed.">Essa guia é adicionada à janela Propriedades e não pode ser removida.</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary vsli:raw="Specifies the name of the property that an implementer of &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; offers to other components. This class cannot be inherited.">Especifica o nome da propriedade que um implementador de <see cref="T:System.ComponentModel.IExtenderProvider" /> oferece a outros componentes. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and the type of its receiver.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> com o nome da propriedade e o tipo do seu receptor.</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">O nome da propriedade se estendendo a um objeto do tipo especificado.</param>
      <param name="receiverTypeName" vsli:raw="The name of the data type this property can extend.">O nome do tipo de dados que essa propriedade pode estender.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and its &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> com o nome da propriedade e seu <see cref="T:System.Type" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">O nome da propriedade se estendendo a um objeto do tipo especificado.</param>
      <param name="receiverType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the data type of the object that can receive the property.">O <see cref="T:System.Type" /> do tipo de dados do objeto que pode receber a propriedade.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">Retorna se o valor do objeto especificado é igual ao <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> atual.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">O objeto cuja igualdade de valor deve ser testada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do objeto especificado for igual do atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">Um código hash do <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary vsli:raw="Gets the name of a property that this class provides.">Obtém o nome de uma propriedade que essa classe fornece.</summary>
      <returns vsli:raw="The name of a property that this class provides.">O nome de uma propriedade que essa classe fornece.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary vsli:raw="Gets the name of the data type this property can extend.">Obtém o nome do tipo de dados que essa propriedade pode estender.</summary>
      <returns vsli:raw="The name of the data type this property can extend.">O nome do tipo de dados que essa propriedade pode estender.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary vsli:raw="Gets a unique identifier for this attribute.">Obtém um identificador exclusivo para este atributo.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that is a unique identifier for the attribute.">Um <see cref="T:System.Object" /> que é um identificador exclusivo do atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary vsli:raw="Specifies that the property can be used as an application setting.">Especifica que a propriedade pode ser usada como uma configuração de aplicativo.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />.</summary>
      <param name="recommendedAsConfigurable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a propriedade à qual esse atributo é associado pode ser usada como uma configuração de aplicativo; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.RecommendedAsConfigurableAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Especifica o valor padrão para o <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />, que é <see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">Indica se essa instância e um objeto especificado são iguais.</summary>
      <param name="obj" vsli:raw="Another object to compare to.">Outro objeto com o qual ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> for igual a essa instância; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;.">Um código hash do <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> atual.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Indicates whether the value of this instance is the default value for the class.">Indica se o valor desta instância é o valor padrão da classe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a instância for o atributo padrão para a classe; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary vsli:raw="Specifies that a property cannot be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Especifica que uma propriedade não pode ser usada como uma configuração de aplicativo. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary vsli:raw="Gets a value indicating whether the property this attribute is bound to can be used as an application setting.">Obtém um valor que indica se a propriedade à qual esse atributo é associado pode ou não ser usada como uma configuração de aplicativo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a propriedade à qual esse atributo é associado pode ser usada como uma configuração de aplicativo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary vsli:raw="Specifies that a property can be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Especifica que uma propriedade pode ser usada como uma configuração de aplicativo. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary vsli:raw="Provides a type converter to convert object references to and from other representations.">Fornece um conversor de tipo para converter referências de objetos de e para outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ReferenceConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ReferenceConverter" />.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this reference converter.">Um <see cref="T:System.Type" /> que representa o tipo a ser associado a este conversor de referência.</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a reference object using the specified context.">Obtém um valor que indica se este conversor pode converter um objeto no tipo de origem especificado para um objeto de referência usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse objeto puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the reference type.">Converte o objeto fornecido no tipo de referência.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">Um <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura usada para representar a fonte.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the reference type using the specified context and arguments.">Converte o objeto de valor especificado no tipo de referência usando o contexto e os argumentos especificados.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">Um <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura usada para representar a fonte.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">O tipo no qual converter o objeto.</param>
      <returns vsli:raw="The converted object.">O objeto convertido.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the reference data type.">Obtém uma coleção de valores padrão para o tipo de dados de referência.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contém um conjunto padrão de valores válidos ou <see langword="null" />, se o tipo de dados não der suporte a um conjunto padrão de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exclusive list.">Obtém um valor que indica se a lista de valores padrão retornada do <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> é uma lista exclusiva.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> porque a <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retornada de <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> é uma lista completa de valores possíveis. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">Obtém um valor que indica se esse objeto é compatível com um conjunto padrão de valores que podem ser escolhidos de uma lista.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> porque <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> pode ser chamado para localizar um conjunto comum de valores com os quais o objeto é compatível. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value indicating whether a particular value can be added to the standard values collection.">Retorna um valor que indica se um valor específico pode ser adicionado à coleção de valores padrão.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides an additional context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto adicional.</param>
      <param name="value" vsli:raw="The value to check.">O valor a ser verificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is allowed and can be added to the standard values collection; &lt;see langword=&quot;false&quot; /&gt; if the value cannot be added to the standard values collection.">
        <see langword="true" /> se o valor for permitido e puder ser adicionado à coleção de valores padrão; <see langword="false" /> se o valor não puder ser adicionado à coleção de valores padrão.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event.">Fornece dados para o evento de <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the component that has changed.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.RefreshEventArgs" /> com o componente que foi alterado.</summary>
      <param name="componentChanged" vsli:raw="The component that changed.">O componente que foi alterado.</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the type of component that has changed.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.RefreshEventArgs" /> com o tipo do componente que foi alterado.</summary>
      <param name="typeChanged" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">O <see cref="T:System.Type" /> que foi alterado.</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary vsli:raw="Gets the component that changed its properties, events, or extenders.">Obtém o componente que alterou suas propriedades, eventos ou extensores.</summary>
      <returns vsli:raw="The component that changed its properties, events, or extenders, or &lt;see langword=&quot;null&quot; /&gt; if all components of the same type have changed.">O componente que alterou suas propriedades, eventos ou extensores, ou <see langword="null" /> se todos os componentes do mesmo tipo foram alterados.</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">Obtém o <see cref="T:System.Type" /> que alterou suas propriedades ou eventos.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">O <see cref="T:System.Type" /> que alterou suas propriedades ou eventos.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event raised when a &lt;see cref=&quot;T:System.Type&quot; /&gt; or component is changed during design time.">Representa o método que manipula o evento <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> gerado quando um <see cref="T:System.Type" /> ou componente é alterado durante o tempo de design.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; that contains the component or &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">Um <see cref="T:System.ComponentModel.RefreshEventArgs" /> que contém o componente ou <see cref="T:System.Type" /> que foi alterado.</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary vsli:raw="Specifies whether the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed.">Especifica se o Instalador de Ação Personalizada do Visual Studio ou o Installutil.exe (Ferramenta de Instalação) deve ser invocado quando o assembly é instalado.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.RunInstallerAttribute" />.</summary>
      <param name="runInstaller" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um instalador deve ser invocado durante a instalação de um assembly; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary vsli:raw="Specifies the default visibility, which is &lt;see cref=&quot;F:System.ComponentModel.RunInstallerAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Especifica a visibilidade padrão, que é <see cref="F:System.ComponentModel.RunInstallerAttribute.No" />. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the value of the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equivalent to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">Determina se o valor do <see cref="T:System.ComponentModel.RunInstallerAttribute" /> especificado é equivalente ao <see cref="T:System.ComponentModel.RunInstallerAttribute" /> atual.</summary>
      <param name="obj" vsli:raw="The object to compare.">O objeto a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.ComponentModel.RunInstallerAttribute" /> especificado for igual ao <see cref="T:System.ComponentModel.RunInstallerAttribute" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary vsli:raw="Generates a hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">Gera um código hash para o <see cref="T:System.ComponentModel.RunInstallerAttribute" /> atual.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">Um código hash do <see cref="T:System.ComponentModel.RunInstallerAttribute" /> atual.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">Determina se este atributo é o padrão.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o atributo for o valor padrão para essa classe de atributos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should not be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Especifica que o Instalador de Ação Personalizada do Visual Studio ou o Installutil.exe (Ferramenta de Instalação) não deve ser invocado quando o assembly é instalado. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary vsli:raw="Gets a value indicating whether an installer should be invoked during installation of an assembly.">Obtém um valor que indica se um instalador deve ser invocado durante a instalação de um assembly.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um instalador deve ser invocado durante a instalação de um assembly; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Especifica que o Instalador de Ação Personalizada do Visual Studio ou o Installutil.exe (Ferramenta de Instalação) deve ser invocado quando o assembly é instalado. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from a string.">Fornece um conversor de tipo para converter objetos de tipo inteiro sem sinal de 8 bits para e de uma cadeia de caracteres.</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SByteConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.SByteConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary vsli:raw="Specifies when a component property can be bound to an application setting.">Especifica quando uma propriedade do componente pode ser associada a uma configuração de aplicativo.</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SettingsBindableAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.SettingsBindableAttribute" />.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that a property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para especificar que uma propriedade é apropriada para que configurações sejam associadas a ela; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating whether a property is appropriate to bind settings to.">Obtém um valor que indica se uma propriedade é apropriada para que configurações sejam associadas a ela.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />se a propriedade for apropriada para associar configurações a; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Um <see cref="T:System.Object" /> a ser comparado a esta instância ou a uma referência nula (<see langword="Nothing" /> no Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> for igual ao tipo e ao valor dessa instância, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not appropriate to bind settings to.">Especifica que uma propriedade não é apropriada para que configurações sejam associadas a ela.</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is appropriate to bind settings to.">Especifica que uma propriedade é apropriada para que configurações sejam associadas a ela.</summary>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary vsli:raw="Provides a type converter to convert single-precision, floating point number objects to and from various other representations.">Fornece um conversor de tipo para converter objetos numéricos de ponto flutuante e precisão simples para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SingleConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.SingleConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary vsli:raw="Provides a type converter to convert string objects to and from other representations.">Fornece um conversor de tipo para converter objetos de cadeia de caracteres para e a partir de outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.StringConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.StringConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a string using the specified context.">Obtém um valor que indica se esse conversor pode converter um objeto do tipo de origem especificado em uma cadeia de caracteres usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">Converte o objeto de valor especificado em um objeto <see cref="T:System.String" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use.">O <see cref="T:System.Globalization.CultureInfo" /> a ser usado.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">A conversão não pôde ser executada.</exception>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary vsli:raw="Provides methods to verify the machine name and path conform to a specific syntax. This class cannot be inherited.">Fornece métodos para verificar se o nome e o caminho do computador estão em conformidade com uma sintaxe específica. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary vsli:raw="Checks the syntax of the machine name to confirm that it does not contain &quot;\&quot;.">Verifica a sintaxe do nome do computador para confirmar que ele não contém "\".</summary>
      <param name="value" vsli:raw="A string containing the machine name to check.">Uma cadeia de caracteres que contém o nome do computador a ser verificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper machine name format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="value" /> corresponder ao formato de nome do computador adequado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see whether it starts with &quot;\\&quot;.">Verifica a sintaxe do caminho para ver se começa com "\\".</summary>
      <param name="value" vsli:raw="A string containing the path to check.">Uma cadeia de caracteres que contém o caminho a ser verificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="value" /> corresponder ao formato de caminho adequado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see if it starts with &quot;\&quot; or drive letter &quot;C:&quot;.">Verifica a sintaxe do caminho para ver se ele começa com "\" ou com a letra da unidade "C".</summary>
      <param name="value" vsli:raw="A string containing the path to check.">Uma cadeia de caracteres que contém o caminho a ser verificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="value" /> corresponder ao formato de caminho adequado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; objects to and from other representations.">Fornece um conversor de tipo para converter objetos <see cref="T:System.TimeSpan" /> para e de outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TimeSpanConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TimeSpanConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; using the specified context.">Obtém um valor que indica se esse conversor pode converter um objeto do tipo de origem especificado em um <see cref="T:System.TimeSpan" /> usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Um <see cref="T:System.Type" /> que representa o tipo no qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> não é um valor válido para o tipo de destino.</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;.">Converte o objeto determinado em um <see cref="T:System.TimeSpan" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Um <see cref="T:System.Globalization.CultureInfo" /> opcional. Se não for fornecido, a cultura atual será assumida.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> não é um valor válido para o tipo de destino.</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">Converte o objeto especificado em outro tipo.</summary>
      <param name="context" vsli:raw="A formatter context.">Um contexto do formatador.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">A cultura na qual o <paramref name="value" /> será convertido.</param>
      <param name="value" vsli:raw="The object to convert.">O objeto a ser convertido.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">O tipo no qual converter o objeto.</param>
      <returns vsli:raw="The converted object.">O objeto convertido.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary vsli:raw="Represents an attribute of a toolbox item.">Representa um atributo de um item de caixa de ferramentas.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and specifies whether to use default initialization values.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> e especifica se valores de inicialização padrão devem ser usados.</summary>
      <param name="defaultType" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to create a toolbox item attribute for a default type; &lt;see langword=&quot;false&quot; /&gt; to associate no default toolbox item support for this attribute.">
        <see langword="true" /> para criar um atributo de item da caixa de ferramentas para um tipo de padrão; <see langword="false" /> para não associar nenhum suporte de item de caixa de ferramentas padrão para esse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified name of the type.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> usando o nome especificado do tipo.</summary>
      <param name="toolboxItemTypeName" vsli:raw="The names of the type of the toolbox item and of the assembly that contains the type.">Os nomes do tipo do item da caixa de ferramentas e do assembly que contém o tipo.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified type of the toolbox item.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> usando o tipo especificado do item da caixa de ferramentas.</summary>
      <param name="toolboxItemType" vsli:raw="The type of the toolbox item.">O tipo do item da caixa de ferramentas.</param>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to the default, &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;. This field is read-only.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> e define o tipo como o padrão, <see cref="T:System.Drawing.Design.ToolboxItem" />. Este campo é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Um <see cref="T:System.Object" /> a ser comparado a esta instância ou a uma referência nula (<see langword="Nothing" /> no Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> for igual ao tipo e ao valor dessa instância, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">Obtém um valor que indica se o valor atual do atributo é o valor padrão do atributo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor atual do atributo é o padrão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to &lt;see langword=&quot;null&quot; /&gt;. This field is read-only.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> e define o tipo como <see langword="null" />. Este campo é somente leitura.</summary>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary vsli:raw="Gets or sets the type of the toolbox item.">Obtém ou define o tipo do item da caixa de ferramentas.</summary>
      <returns vsli:raw="The type of the toolbox item.">O tipo do item da caixa de ferramentas.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The type cannot be found.">O tipo não pode ser encontrado.</exception>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary vsli:raw="Gets or sets the name of the type of the current &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;.">Obtém ou define o nome do tipo do <see cref="T:System.Drawing.Design.ToolboxItem" /> atual.</summary>
      <returns vsli:raw="The fully qualified type name of the current toolbox item.">O nome do tipo totalmente qualificado do item da caixa de ferramentas atual.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary vsli:raw="Specifies the filter string and filter type to use for a toolbox item.">Especifica a cadeia de caracteres de filtro e o tipo de filtro para um item de caixa de ferramentas.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> usando a cadeia de caracteres de filtro especificada.</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">A cadeia de caracteres de filtro para o item de caixa de ferramentas.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string and type.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> usando a cadeia de caracteres de filtro e o tipo especificados.</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">A cadeia de caracteres de filtro para o item de caixa de ferramentas.</param>
      <param name="filterType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; indicating the type of the filter.">Um <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> que indica o tipo do filtro.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Um <see cref="T:System.Object" /> a ser comparado a esta instância ou a uma referência nula (<see langword="Nothing" /> no Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> for igual ao tipo e ao valor dessa instância, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary vsli:raw="Gets the filter string for the toolbox item.">Obtém a cadeia de caracteres de filtro para o item de caixa de ferramentas.</summary>
      <returns vsli:raw="The filter string for the toolbox item.">A cadeia de caracteres de filtro para o item de caixa de ferramentas.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary vsli:raw="Gets the type of the filter.">Obtém o tipo do filtro.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; that indicates the type of the filter.">Um <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> que indica o tipo do filtro.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retorna o código hash para essa instância.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary vsli:raw="Indicates whether the specified object has a matching filter string.">Indica se o objeto especificado tem uma cadeia de caracteres de filtro correspondente.</summary>
      <param name="obj" vsli:raw="The object to test for a matching filter string.">O objeto a ser testado para uma cadeia de caracteres de filtro correspondente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object has a matching filter string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o objeto especificado tem uma cadeia de caracteres de filtro correspondente; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary vsli:raw="Returns a string that represents the current object.">Retorna uma cadeia de caracteres que representa o objeto atual.</summary>
      <returns vsli:raw="A string that represents the current object.">Uma cadeia de caracteres que representa o objeto atual.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary vsli:raw="Gets the type ID for the attribute.">Obtém a ID de tipo do atributo.</summary>
      <returns vsli:raw="The type ID for this attribute. All &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; objects with the same filter string return the same type ID.">A ID de tipo para este atributo. Todos <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> os objetos com a mesma cadeia de caracteres de filtro retornam a mesma ID de tipo.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary vsli:raw="Defines identifiers used to indicate the type of filter that a &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; uses.">Define os identificadores usados para indicar o tipo de filtro que um <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> usa.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary vsli:raw="Indicates that a toolbox item filter string is allowed, but not required.">Indica que uma cadeia de caracteres de filtro de item de caixa de ferramentas é permitida, mas não é necessário.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary vsli:raw="Indicates that custom processing is required to determine whether to use a toolbox item filter string. It is typically specified on a root designer class to indicate that the designer wishes to accept or reject a toolbox item through code. The designer must implement the &lt;see cref=&quot;M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)&quot; /&gt; method of the &lt;see cref=&quot;T:System.Drawing.Design.IToolboxUser&quot; /&gt; interface.">Indica que o processamento personalizado é necessário para determinar se deve usar uma cadeia de caracteres de filtro de item de caixa de ferramentas. Normalmente, ele é especificado em uma classe do designer raiz para indicar que o designer deseja aceitar ou rejeitar um item de caixa de ferramentas usando código. O designer deve implementar o método <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" /> da interface <see cref="T:System.Drawing.Design.IToolboxUser" />.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary vsli:raw="Indicates that a toolbox item filter string is not allowed. If a designer and a component class both have a filter string and the value of one is &lt;c&gt;ToolboxItemFilterType.Prevent&lt;/c&gt;, the toolbox item will not be available.">Indica que uma cadeia de caracteres de filtro de item de caixa de ferramentas não é permitida. Se um designer e uma classe de componente tiverem uma cadeia de caracteres de filtro e o valor de um deles for <c>ToolboxItemFilterType.Prevent</c>, o item de caixa de ferramentas não estará disponível.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary vsli:raw="Indicates that a toolbox item filter string must be present for a toolbox item to be enabled.  For a toolbox item with a filter type of &lt;c&gt;Require&lt;/c&gt; to be enabled, the designer and the component class must have a matching filter string. Additionally, neither the designer or component class can have a filter type of &lt;c&gt;Prevent&lt;/c&gt; for the toolbox item to be enabled.">Indica que uma cadeia de caracteres de filtro de item de caixa de ferramentas deve estar presente para um item de caixa de ferramentas a ser habilitado.  Para um item de caixa de ferramentas com o tipo de filtro <c>Exigir</c> estar habilitado, o designer e a classe de componente deverão um filtro de cadeia de caracteres correspondente. Além disso, nem o designer nem a classe do componente podem ter o tipo de filtro <c>Impedir</c> para que o item de caixa de ferramentas seja habilitado.</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary vsli:raw="Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.">Fornece uma maneira unificada de converter tipos de valores em outros tipos, bem como acessar valores padrão e subpropriedades.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">Retorna se esse conversor pode converter um objeto do tipo especificado no tipo desse conversor, usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">Retorna se este conversor pode converter um objeto do tipo indicado para o tipo deste conversor.</summary>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">Retorna se esse conversor pode converter o objeto para o tipo especificado, usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Um <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">Retorna se esse conversor pode converter o objeto para o tipo especificado.</summary>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Um <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Converte o objeto determinado para o tipo deste conversor, usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">A <see cref="T:System.Globalization.CultureInfo" /> para ser usada como a cultura atual.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary vsli:raw="Converts the given value to the type of this converter.">Converte o valor fornecido noo tipo deste conversor.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture and the specified context.">Converte a cadeia de caracteres fornecida para o tipo deste conversor usando a cultura invariável e o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">O <see cref="T:System.String" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Um <see cref="T:System.Object" /> que representa o texto convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture.">Converte a cadeia de caracteres fornecida para o tipo deste conversor usando a cultura invariável.</summary>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">O <see cref="T:System.String" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Um <see cref="T:System.Object" /> que representa o texto convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context and culture information.">Converte o texto fornecido em um objeto, usando o contexto e a informação de cultura especificados.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Um <see cref="T:System.Globalization.CultureInfo" />. Se <see langword="null" /> for passado, a cultura atual será considerada.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">O <see cref="T:System.String" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Um <see cref="T:System.Object" /> que representa o texto convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context.">Converte o texto fornecido em um objeto, usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">O <see cref="T:System.String" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Um <see cref="T:System.Object" /> que representa o texto convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary vsli:raw="Converts the specified text to an object.">Converte o texto especificado em um objeto.</summary>
      <param name="text" vsli:raw="The text representation of the object to convert.">A representação de texto do objeto a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Um <see cref="T:System.Object" /> que representa o texto convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The string cannot be converted into the appropriate object.">A cadeia de caracteres não pode ser convertida em objeto apropriado.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Converte o objeto de valor determinado para o tipo especificado, usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Um <see cref="T:System.Globalization.CultureInfo" />. Se <see langword="null" /> for passado, a cultura atual será considerada.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">O <see cref="T:System.Type" /> para converter o parâmetro <paramref name="value" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the arguments.">Converte o objeto de valor especificado para o tipo especificado, usando os argumentos.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">O <see cref="T:System.Type" /> para converter o parâmetro <paramref name="value" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation, using the specified context.">Converte o valor especificado em uma representação de cadeia de caracteres que não varia de acordo com a cultura, usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">Um <see cref="T:System.String" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation.">Converte o valor especificado em uma representação de cadeia de caracteres invariável da cultura.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">Um <see cref="T:System.String" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the specified context and culture information.">Converte o valor especificado em uma representação de cadeia de caracteres, usando as informações de contexto e cultura especificadas.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Um <see cref="T:System.Globalization.CultureInfo" />. Se <see langword="null" /> for passado, a cultura atual será considerada.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the given context.">Converte o valor especificado em uma representação de cadeia de caracteres, usando o contexto fornecido.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary vsli:raw="Converts the specified value to a string representation.">Converte o valor especificado em uma representação de cadeia de caracteres.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary vsli:raw="Re-creates an &lt;see cref=&quot;T:System.Object&quot; /&gt; given a set of property values for the object.">Recria um <see cref="T:System.Object" /> dado um conjunto de valores de propriedade do objeto.</summary>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; that represents a dictionary of new property values.">Um <see cref="T:System.Collections.IDictionary" /> que representa um dicionário de novos valores de propriedade.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.Object" /> que representa o <see cref="T:System.Collections.IDictionary" /> fornecido ou <see langword="null" /> se o objeto não puder ser criado. Esse método sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">Cria uma instância do tipo ao qual esse <see cref="T:System.ComponentModel.TypeConverter" /> está associado, usando o contexto especificado, dado um conjunto de valores de propriedade para o objeto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">Um <see cref="T:System.Collections.IDictionary" /> de novos valores de propriedade.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.Object" /> que representa o <see cref="T:System.Collections.IDictionary" /> fornecido ou <see langword="null" /> se o objeto não puder ser criado. Esse método sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">Retorna uma exceção a ser gerada quando uma conversão não puder ser executada.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">O <see cref="T:System.Object" /> a ser convertido ou <see langword="null" /> se o objeto não estiver disponível.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">Uma <see cref="T:System.Exception" /> que representa a exceção a ser gerada quando uma conversão não puder ser executada.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">Gerada automaticamente por este método.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">Retorna uma exceção a ser gerada quando uma conversão não puder ser executada.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">O <see cref="T:System.Object" /> a ser convertido ou <see langword="null" /> se o objeto não estiver disponível.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type the conversion was trying to convert to.">Um <see cref="T:System.Type" /> que representa o tipo no qual a conversão estava tentando converter.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">Uma <see cref="T:System.Exception" /> que representa a exceção a ser gerada quando uma conversão não puder ser executada.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">Gerada automaticamente por este método.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to the &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; method to create a new value.">Retorna se a alteração de um valor neste objeto requer uma chamada ao método <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para criar um novo valor.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a alteração de uma propriedade neste objeto requer uma chamada para <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para criar um novo valor, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">Retorna se a alteração de um valor neste objeto requer uma chamada para <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para criar um novo valor, usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a alteração de uma propriedade neste objeto requer uma chamada para <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para criar um novo valor, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context.">Retorna uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro de valor, usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Um <see cref="T:System.Object" /> que especifica o tipo de matriz para o qual obter as propriedades.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que são expostas para esse tipo de dados ou <see langword="null" />, se não há nenhuma propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">Retorna uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro de valor, usando o contexto e os atributos especificados.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Um <see cref="T:System.Object" /> que especifica o tipo de matriz para o qual obter as propriedades.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Uma matriz do tipo <see cref="T:System.Attribute" /> que é usada como um filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que são expostas para esse tipo de dados ou <see langword="null" />, se não há nenhuma propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter.">Retorna uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro de valor.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Um <see cref="T:System.Object" /> que especifica o tipo de matriz para o qual obter as propriedades.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que são expostas para esse tipo de dados ou <see langword="null" />, se não há nenhuma propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary vsli:raw="Returns whether this object supports properties.">Retorna se este objeto dá suporte a propriedades.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> deva ser chamado para localizar as propriedades desse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">Retorna se este objeto é compatível com as propriedades, usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> deva ser chamado para localizar as propriedades desse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary vsli:raw="Returns a collection of standard values from the default context for the data type this type converter is designed for.">Retorna uma coleção de valores padrão do contexto padrão para o tipo de dados para o qual esse conversor de tipo foi criado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contém um conjunto padrão de valores válidos ou <see langword="null" /> se o tipo de dados não der suporte a um conjunto padrão de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">Retorna uma coleção de valores padrão para o tipo de dados para o qual esse conversor de tipo foi criado quando fornecido com um contexto de formato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato que pode ser usado para extrair informações adicionais sobre o ambiente do qual este conversor é invocado. Esse parâmetro ou as propriedades desse parâmetro podem ser <see langword="null" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contém um conjunto padrão de valores válidos ou <see langword="null" />, se o tipo de dados não der suporte a um conjunto padrão de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list.">Retorna se a coleção de valores padrão retornada de <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> é uma lista exclusiva.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" /> se o <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retornado de <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> for uma lista completa de valores possíveis, <see langword="false" /> se houver outros valores possíveis.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">Retorna se a coleção de valores padrão retornada de <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> é uma lista exclusiva de valores possíveis, usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" /> se o <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retornado de <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> for uma lista completa de valores possíveis, <see langword="false" /> se houver outros valores possíveis.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list.">Retorna se este objeto dá suporte a um conjunto padrão de valores que podem ser escolhidos em uma lista.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> deve ser chamado para localizar um conjunto comum de valores aos quais o objeto dá suporte; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">Retorna se este objeto é compatível com um conjunto padrão de valores que podem ser escolhidos em uma lista, usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> deve ser chamado para localizar um conjunto comum de valores aos quais o objeto dá suporte; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">Retorna se o objeto de valor fornecido é válido para esse tipo e para o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">O <see cref="T:System.Object" /> para testar a validade.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor especificado for válido para esse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type.">Retorna se o objeto de valor especificado é válido para esse tipo.</summary>
      <param name="value" vsli:raw="The object to test for validity.">O objeto a ser testado quanto à validade.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor especificado for válido para esse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary vsli:raw="Represents an &lt;see langword=&quot;abstract&quot; /&gt; class that provides properties for objects that do not have properties.">Representa uma classe <see langword="abstract" /> que fornece propriedades para objetos que não têm propriedades.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">Um <see cref="T:System.Type" /> que representa o tipo de componente ao qual esse descritor de propriedade se associa.</param>
      <param name="name" vsli:raw="The name of the property.">O nome da propriedade.</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">Um <see cref="T:System.Type" /> que representa o tipo de dados para essa propriedade.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">Um <see cref="T:System.Type" /> que representa o tipo de componente ao qual esse descritor de propriedade se associa.</param>
      <param name="name" vsli:raw="The name of the property.">O nome da propriedade.</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">Um <see cref="T:System.Type" /> que representa o tipo de dados para essa propriedade.</param>
      <param name="attributes" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes to associate with the property.">Uma matriz <see cref="T:System.Attribute" /> com os atributos a associar à propriedade.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="Returns whether resetting the component changes the value of the component.">Retorna se a redefinição do componente mudar o valor do componente.</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">O componente a ser testado quanto à capacidade de redefinição.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes the value of the component; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a redefinição do componente mudar o valor do componente; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary vsli:raw="Gets the type of component to which this property description binds.">Obtém o tipo de componente ao qual essa descrição de propriedade se associa.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property binds.">Um <see cref="T:System.Type" /> que representa o tipo de componente ao qual essa propriedade é vinculada.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this property is read-only.">Obtém um valor que indica essa propriedade é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; &lt;see langword=&quot;false&quot; /&gt; if the property is read/write.">
        <see langword="true" /> se a propriedade for somente leitura; <see langword="false" /> se a propriedade for de leitura/gravação.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary vsli:raw="Gets the type of the property.">Obtém tipo da propriedade.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">Um <see cref="T:System.Type" /> que representa o tipo da propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="Resets the value for this property of the component.">Redefine o valor para essa propriedade do componente.</summary>
      <param name="component" vsli:raw="The component with the property value to be reset.">O componente com o valor da propriedade a ser redefinido.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="Returns whether the value of this property can persist.">Retorna se o valor dessa propriedade pode persistir.</summary>
      <param name="component" vsli:raw="The component with the property that is to be examined for persistence.">O componente com a propriedade que deve ser examinada quanto à persistência.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the property can persist; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor da propriedade puder persistir; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary vsli:raw="Sorts a collection of properties.">Classifica uma coleção de propriedades.</summary>
      <param name="props" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that has the properties to sort.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que tem as propriedades a serem classificadas.</param>
      <param name="names" vsli:raw="An array of names in the order you want the properties to appear in the collection.">Uma matriz de nomes na ordem em que você deseja que as propriedades apareçam na coleção.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted properties.">Uma <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém as propriedades classificadas.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary vsli:raw="Represents a collection of values.">Representa uma coleção de valores.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />.</summary>
      <param name="values" vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that represents the objects to put into the collection.">Um <see cref="T:System.Collections.ICollection" /> que representa os objetos a serem colocados na coleção.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of this collection to an array.">Copia o conteúdo desta coleção para uma matriz.</summary>
      <param name="array" vsli:raw="An &lt;see cref=&quot;T:System.Array&quot; /&gt; that represents the array to copy to.">Um <see cref="T:System.Array" /> que representa a matriz na qual copiar.</param>
      <param name="index" vsli:raw="The index to start from.">O índice a partir do qual iniciar.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary vsli:raw="Gets the number of objects in the collection.">Obtém o número de objetos na coleção.</summary>
      <returns vsli:raw="The number of objects in the collection.">O número de objetos na coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this collection.">Retorna um enumerador para esta coleção.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Um enumerador do tipo <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the object at the specified index number.">Obtém o objeto o número de índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.Object&quot; /&gt; to get from the collection.">O índice de base zero de <see cref="T:System.Object" /> obter da coleção.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; with the specified index.">O objeto <see cref="T:System.Object" /> com o índice especificado.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.IsSynchronized&quot; /&gt;.">Para obter uma descrição desse membro, consulte <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">
        <see langword="false" /> em todos os casos.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.SyncRoot&quot; /&gt;.">Para obter uma descrição desse membro, consulte <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;null&quot; /&gt; in all cases.">
        <see langword="null" /> em todos os casos.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>Especifica o tipo a ser usado como um conversor para o objeto ao qual este atributo está associado.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> com o conversor de tipo padrão, que é uma cadeia de caracteres vazia ("").</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> usando o nome de tipo especificado como o conversor de dados do objeto ao qual esse atributo está associado.</summary>
      <param name="typeName">O nome totalmente qualificado da classe a ser usada para conversão de dados do objeto ao qual esse atributo está associado.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> usando o tipo especificado como o conversor de dados do objeto ao qual esse atributo está associado.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo da classe de conversão a ser usada para conversão de dados do objeto ao qual esse atributo está associado.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>Obtém o nome de tipo totalmente qualificado da <see cref="T:System.Type" /> a ser usada como conversor do objeto ao qual esse atributo está associado.</summary>
      <returns>O nome de tipo totalmente qualificado do <see cref="T:System.Type" /> a ser usado como um conversor para o objeto ao qual este atributo está associado ou uma cadeia de caracteres vazia (""), se não houver nenhum. O valor padrão é uma cadeia de caracteres vazia ("").</returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary>Especifica o tipo a ser usado como um conversor para o objeto ao qual este atributo está associado.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>Retorna se o valor do objeto especificado é igual ao <see cref="T:System.ComponentModel.TypeConverterAttribute" /> atual.</summary>
      <param name="obj">O objeto cuja igualdade de valor deve ser testada.</param>
      <returns>
        <see langword="true" /> se o valor do objeto fornecido for igual ao do <see cref="T:System.ComponentModel.TypeConverterAttribute" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código hash do <see cref="T:System.ComponentModel.TypeConverterAttribute" /> atual.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary vsli:raw="Provides supplemental metadata to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Fornece metadados suplementares ao <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class using a parent type description provider.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> usando um provedor de descrição de tipo pai.</summary>
      <param name="parent" vsli:raw="The parent type description provider.">O provedor de descrição de tipo pai.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">Cria um objeto que pode ser substituído em outro tipo de dados.</summary>
      <param name="provider" vsli:raw="An optional service provider.">Um provedor de serviços opcional.</param>
      <param name="objectType" vsli:raw="The type of object to create. This parameter is never &lt;see langword=&quot;null&quot; /&gt;.">O tipo de objeto a ser criado. Este parâmetro nunca é <see langword="null" />.</param>
      <param name="argTypes" vsli:raw="An optional array of types that represent the parameter types to be passed to the object's constructor. This array can be &lt;see langword=&quot;null&quot; /&gt; or of zero length.">Uma matriz opcional de tipos que representam os tipos de parâmetro a serem passados para o construtor do objeto. Esta matriz pode ser <see langword="null" /> ou de comprimento zero.</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor.">Uma matriz opcional de valores de parâmetro a serem passados para o construtor do objeto.</param>
      <returns vsli:raw="The substitute &lt;see cref=&quot;T:System.Object&quot; /&gt;.">O <see cref="T:System.Object" /> substituto.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary vsli:raw="Gets a per-object cache, accessed as an &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of key/value pairs.">Obtém um cache por objeto, acessado como um <see cref="T:System.Collections.IDictionary" /> de pares chave-valor.</summary>
      <param name="instance" vsli:raw="The object for which to get the cache.">O objeto para o qual o cache deve ser obtido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; if the provided object supports caching; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.Collections.IDictionary" /> se o objeto fornecido for compatível com armazenamento em cache, caso contrário, <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets an extended custom type descriptor for the given object.">Obtém um descritor de tipo personalizado estendido para o objeto fornecido.</summary>
      <param name="instance" vsli:raw="The object for which to get the extended type descriptor.">O objeto para o qual o descritor de tipo estendido deve ser obtido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide extended metadata for the object.">Um <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> que pode fornecer metadados estendidos para o objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary vsli:raw="Gets the extender providers for the specified object.">Obtém os provedores de controle do extensor para o objeto especificado.</summary>
      <param name="instance" vsli:raw="The object to get extender providers for.">O objeto para o qual os provedores de controle do extensor devem ser obtidos.</param>
      <returns vsli:raw="An array of extender providers for &lt;paramref name=&quot;instance&quot; /&gt;.">Uma matriz de provedores de controle do extensor para <paramref name="instance" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">Obtém o nome do componente especificado ou <see langword="null" /> quando o componente não tem nome.</summary>
      <param name="component" vsli:raw="The specified component.">O componente especificado.</param>
      <returns vsli:raw="The name of the specified component.">O nome do componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object.">Executa a reflexão normal no objeto fornecido.</summary>
      <param name="instance" vsli:raw="An instance of the type (should not be &lt;see langword=&quot;null&quot; /&gt;).">Uma instância do tipo (não deve ser <see langword="null" />).</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;instance&quot; /&gt;.">O tipo de reflexão para este <paramref name="instance" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary vsli:raw="Performs normal reflection against a type.">Executa a reflexão normal em relação a um tipo.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">O tipo de objeto para o qual o <see cref="T:System.Reflection.IReflect" /> deve ser recuperado.</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">O tipo de reflexão para este <paramref name="objectType" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="objectType" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object with the given type.">Executa a reflexão normal no objeto fornecido com o tipo fornecido.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">O tipo de objeto para o qual o <see cref="T:System.Reflection.IReflect" /> deve ser recuperado.</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt;.">Uma instância do tipo. Pode ser <see langword="null" />.</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">O tipo de reflexão para este <paramref name="objectType" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary vsli:raw="Converts a reflection type into a runtime type.">Converte um tipo de reflexão em um tipo de tempo de execução.</summary>
      <param name="reflectionType" vsli:raw="The type to convert to its runtime equivalent.">O tipo a ser convertido em seu equivalente de tempo de execução.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the runtime equivalent of &lt;paramref name=&quot;reflectionType&quot; /&gt;.">Um <see cref="T:System.Type" /> que representa o equivalente de tempo de execução de <paramref name="reflectionType" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reflectionType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reflectionType" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given object.">Obtém um descritor de tipo personalizado para o objeto fornecido.</summary>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Uma instância do tipo. Poderá ser <see langword="null" /> se nenhuma instância for passada para o <see cref="T:System.ComponentModel.TypeDescriptor" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">Um <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> que pode fornecer metadados para o tipo.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary vsli:raw="Gets a custom type descriptor for the given type.">Obtém um descritor de tipo personalizado para o tipo fornecido.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">O tipo de objeto para o qual o descritor de tipo deve ser recuperado.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">Um <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> que pode fornecer metadados para o tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given type and object.">Obtém um descritor de tipo personalizado para o tipo e o objeto fornecidos.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">O tipo de objeto para o qual o descritor de tipo deve ser recuperado.</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Uma instância do tipo. Poderá ser <see langword="null" /> se nenhuma instância for passada para o <see cref="T:System.ComponentModel.TypeDescriptor" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">Um <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> que pode fornecer metadados para o tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary vsli:raw="Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers.">Obtém um valor que indica se o tipo especificado é compatível com a descrição do tipo e sua cadeia de provedores de descrição de tipo.</summary>
      <param name="type" vsli:raw="The type to test for compatibility.">O tipo cuja compatibilidade será testada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;type&quot; /&gt; is compatible with the type description and its chain of type description providers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="type" /> for compatível com a descrição do tipo e sua cadeia de provedores de descrição de tipo, caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary>Especifica o provedor de descrição de tipo personalizado para uma classe. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> usando o nome do tipo especificado.</summary>
      <param name="typeName">O nome qualificado do tipo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> usando o tipo especificado.</summary>
      <param name="type">O tipo a ser armazenado no atributo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary>Obtém o nome de tipo do provedor de descrição de tipo.</summary>
      <returns>Um <see cref="T:System.String" /> valor que contém o nome do tipo <see cref="T:System.ComponentModel.TypeDescriptionProvider" />qualificado para.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary vsli:raw="Provides information about the characteristics for a component, such as its attributes, properties, and events. This class cannot be inherited.">Fornece informações sobre as características de um componente, como atributos, propriedades e eventos. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component instance.">Adiciona os atributos de nível de classe à instância de componente de destino.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">Uma instância do componente de destino.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">Uma matriz de objetos <see cref="T:System.Attribute" /> a serem adicionados à classe do componente.</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> recém-criado que foi usado para adicionar os atributos especificados.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component type.">Adiciona atributos de nível de classe ao tipo de componente de destino.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">O <see cref="T:System.Type" /> do componente de destino.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">Uma matriz de objetos <see cref="T:System.Attribute" /> a serem adicionados à classe do componente.</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> recém-criado que foi usado para adicionar os atributos especificados.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary vsli:raw="Adds an editor table for the given editor base type.">Adiciona uma tabela de editor para o tipo base do editor especificado.</summary>
      <param name="editorBaseType" vsli:raw="The editor base type to add the editor table for. If a table already exists for this type, this method will do nothing.">O tipo base do editor para o qual adicionar a tabela de editor. Se já existe uma tabela para este tipo, esse método não fará nada.</param>
      <param name="table" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Hashtable&quot; /&gt; to add.">O <see cref="T:System.Collections.Hashtable" /> a ser adicionado.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">Adiciona um provedor de descrição de tipo para uma única instância de um componente.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> a ser adicionado.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Uma instância do componente de destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">Adiciona um provedor de descrição de tipo de uma classe de componente.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> a ser adicionado.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">O <see cref="T:System.Type" /> do componente de destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">Adiciona um provedor de descrição de tipo para uma única instância de um componente.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> a ser adicionado.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Uma instância do componente de destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">Adiciona um provedor de descrição de tipo de uma classe de componente.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> a ser adicionado.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">O <see cref="T:System.Type" /> do componente de destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary vsli:raw="Gets or sets the provider for the Component Object Model (COM) type information for the target component.">Obtém ou define o provedor para as informações de tipo do COM (Component Object Model) do componente de destino.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComNativeDescriptorHandler&quot; /&gt; instance representing the COM type information provider.">Uma instância de <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" /> que representa o provedor de informações de tipo COM.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary vsli:raw="Gets the type of the Component Object Model (COM) object represented by the target component.">Obtém o tipo do objeto COM (Component Object Model) representado pelo componente de destino.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the COM object represented by this component, or &lt;see langword=&quot;null&quot; /&gt; for non-COM objects.">A <see cref="T:System.Type" /> do objeto COM representado por este componente ou <see langword="null" /> para objetos não-COM.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary vsli:raw="Creates a primary-secondary association between two objects.">Cria uma associação primária-secundária entre dois objetos.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">O <see cref="T:System.Object" /> primário.</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">O <see cref="T:System.Object" /> secundário.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Um ou ambos os parâmetros são <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is equal to &lt;paramref name=&quot;secondary&quot; /&gt;.">
        <paramref name="primary" /> é igual a <paramref name="secondary" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary vsli:raw="Creates an instance of the designer associated with the specified component and of the specified type of designer.">Cria uma instância do designer associada ao componente especificado e do tipo de designer especificado.</summary>
      <param name="component" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that specifies the component to associate with the designer.">Um <see cref="T:System.ComponentModel.IComponent" /> que especifica o componente a ser associado com o designer.</param>
      <param name="designerBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of designer to create.">Um <see cref="T:System.Type" /> que representa o tipo de designer a ser criado.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; that is an instance of the designer for the component, or &lt;see langword=&quot;null&quot; /&gt; if no designer can be found.">Um <see cref="T:System.ComponentModel.Design.IDesigner" /> que é uma instância do designer para o componente ou <see langword="null" /> se nenhum designer puder ser encontrado.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor, when passed the existing &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">Cria um novo descritor de evento que é idêntico a um descritor de eventos existente, ao passar pelo <see cref="T:System.ComponentModel.EventDescriptor" /> existente.</summary>
      <param name="componentType" vsli:raw="The type of the component for which to create the new event.">O tipo do componente para o qual criar o novo evento.</param>
      <param name="oldEventDescriptor" vsli:raw="The existing event information.">As informações de evento existentes.</param>
      <param name="attributes" vsli:raw="The new attributes.">Os novos atributos.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that has merged the specified metadata attributes with the existing metadata attributes.">Um novo <see cref="T:System.ComponentModel.EventDescriptor" /> que mesclou os atributos de metadados especificados com os atributos de metadados existentes.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor by dynamically generating descriptor information from a specified event on a type.">Cria um novo descritor de evento que é idêntico a um descritor de evento existente através da geração dinâmica de informações de descritor de um evento específico em um tipo.</summary>
      <param name="componentType" vsli:raw="The type of the component the event lives on.">O tipo do componente no qual o evento reside.</param>
      <param name="name" vsli:raw="The name of the event.">O nome do evento.</param>
      <param name="type" vsli:raw="The type of the delegate that handles the event.">O tipo do delegado que manipula o evento.</param>
      <param name="attributes" vsli:raw="The attributes for this event.">Os atributos desse evento.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that is bound to a type.">Um <see cref="T:System.ComponentModel.EventDescriptor" /> que está associado a um tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">Cria um objeto que pode ser substituído em outro tipo de dados.</summary>
      <param name="provider" vsli:raw="The service provider that provides a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; service. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">O provedor de serviços que fornece um serviço <see cref="T:System.ComponentModel.TypeDescriptionProvider" />. Esse parâmetro pode ser <see langword="null" />.</param>
      <param name="objectType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of object to create.">O <see cref="T:System.Type" /> do objeto a ser criado.</param>
      <param name="argTypes" vsli:raw="An optional array of parameter types to be passed to the object's constructor. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an array of zero length.">Uma matriz opcional de tipos de parâmetro a serem passados para o construtor do objeto. Esse parâmetro pode ser <see langword="null" /> ou uma matriz de tamanho zero.</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor. If not &lt;see langword=&quot;null&quot; /&gt;, the number of elements must be the same as &lt;paramref name=&quot;argTypes&quot; /&gt;.">Uma matriz opcional de valores de parâmetro a serem passados para o construtor do objeto. Se não for <see langword="null" />, o número de elementos deverá ser igual a <paramref name="argTypes" />.</param>
      <returns vsli:raw="An instance of the substitute data type if an associated &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; is found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Uma instância do tipo de dados substituto se um <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> associado for encontrado; caso contrário, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or &lt;paramref name=&quot;args&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; when &lt;paramref name=&quot;argTypes&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="objectType" /> é <see langword="null" /> ou <paramref name="args" /> é <see langword="null" /> quando <paramref name="argTypes" /> não é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;argTypes&quot; /&gt; and &lt;paramref name=&quot;args&quot; /&gt; have different number of elements.">
        <paramref name="argTypes" /> e <paramref name="args" /> têm quantidades diferentes de elementos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new property descriptor from an existing property descriptor, using the specified existing &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and attribute array.">Cria um novo descritor de propriedade com base em um descritor de propriedade existente, usando o <see cref="T:System.ComponentModel.PropertyDescriptor" /> existente especificado e matriz de atributos.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">O <see cref="T:System.Type" /> do componente do qual a propriedade é um membro.</param>
      <param name="oldPropertyDescriptor" vsli:raw="The existing property descriptor.">O descritor de propriedade existente.</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">Os novos atributos desta propriedade.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that has the specified metadata attributes merged with the existing metadata attributes.">Um novo <see cref="T:System.ComponentModel.PropertyDescriptor" /> que tem os atributos de metadados especificados mesclados com os atributos de metadados existentes.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates and dynamically binds a property descriptor to a type, using the specified property name, type, and attribute array.">Cria e associa dinamicamente um descritor de propriedade a um tipo, usando o nome, o tipo e a matriz de atributos da propriedade especificada.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">O <see cref="T:System.Type" /> do componente do qual a propriedade é um membro.</param>
      <param name="name" vsli:raw="The name of the property.">O nome da propriedade.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the property.">O <see cref="T:System.Type" /> da propriedade.</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">Os novos atributos desta propriedade.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is bound to the specified type and that has the specified metadata attributes merged with the existing metadata attributes.">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> que está associado ao tipo especificado e que tem os atributos de metadados especificados mesclados com os atributos de metadados existentes.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary vsli:raw="Returns an instance of the type associated with the specified primary object.">Retorna uma instância do tipo associado com objeto primário especificado.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">O <see cref="T:System.Type" /> do componente de destino.</param>
      <param name="primary" vsli:raw="The primary object of the association.">O objeto primário da associação.</param>
      <returns vsli:raw="An instance of the secondary type that has been associated with the primary object if an association exists; otherwise, &lt;paramref name=&quot;primary&quot; /&gt; if no specified association exists.">Uma instância do tipo secundário que foi associado com o objeto primário, se existir uma associação; caso contrário, <paramref name="primary" /> se não existir nenhuma associação especificada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary vsli:raw="Returns the collection of attributes for the specified component.">Retorna a coleção de atributos para o componente especificado.</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">O componente para o qual você deseja obter atributos.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the component. If &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">Um <see cref="T:System.ComponentModel.AttributeCollection" /> que contém os atributos do componente. Se <paramref name="component" /> for <see langword="null" />, esse método retornará uma coleção vazia.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a collection of attributes for the specified component and a Boolean indicating that a custom type descriptor has been created.">Retorna uma coleção de atributos para o componente especificado e um valor booliano que indica que um descritor de tipo personalizado foi criado.</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">O componente para o qual você deseja obter atributos.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use a baseline set of attributes from the custom type descriptor if &lt;paramref name=&quot;component&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para usar um conjunto de linha de base de atributos do descritor de tipo personalizado se o <paramref name="component" /> for do tipo <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">Um <see cref="T:System.ComponentModel.AttributeCollection" /> com os atributos para o componente. Se o componente for <see langword="null" />, esse método retornará uma coleção vazia.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary vsli:raw="Returns a collection of attributes for the specified type of component.">Retorna uma coleção de atributos para o tipo de componente especificado.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">O <see cref="T:System.Type" /> do componente de destino.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the type of the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">Um <see cref="T:System.ComponentModel.AttributeCollection" /> com os atributos do tipo de componente. Se o componente for <see langword="null" />, esse método retornará uma coleção vazia.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary vsli:raw="Returns the name of the class for the specified component using the default type descriptor.">Retorna o nome da classe para o componente especificado usando o descritor de tipo padrão.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">O <see cref="T:System.Object" /> para o qual você deseja o nome de classe.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">Um <see cref="T:System.String" /> que contém o nome da classe para o componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the class for the specified component using a custom type descriptor.">Retorna o nome da classe para o componente especificado usando um descritor de tipo personalizado.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">O <see cref="T:System.Object" /> para o qual você deseja o nome de classe.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para considerar as informações da descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">Um <see cref="T:System.String" /> que contém o nome da classe para o componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary vsli:raw="Returns the name of the class for the specified type.">Retorna o nome da classe para o tipo especificado.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">O <see cref="T:System.Type" /> do componente de destino.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component type.">Uma <see cref="T:System.String" /> que contém o nome da classe para o tipo de componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary vsli:raw="Returns the name of the specified component using the default type descriptor.">Retorna o nome do componente especificado usando o descritor de tipo padrão.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">O <see cref="T:System.Object" /> para o qual você deseja o nome de classe.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">Um <see cref="T:System.String" /> que contém o nome do componente especificado ou <see langword="null" /> se não houver nenhum nome de componente.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the specified component using a custom type descriptor.">Retorna o nome do componente especificado usando um descritor de tipo personalizado.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">O <see cref="T:System.Object" /> para o qual você deseja o nome de classe.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para considerar as informações da descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="The name of the class for the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">O nome da classe para o componente especificado ou <see langword="null" /> se não houver nenhum nome de componente.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary vsli:raw="Returns a type converter for the type of the specified component.">Retorna um conversor de tipo para o tipo do componente especificado.</summary>
      <param name="component" vsli:raw="A component to get the converter for.">Um componente para o qual obter o conversor.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">Um <see cref="T:System.ComponentModel.TypeConverter" /> para o componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a type converter for the type of the specified component with a custom type descriptor.">Retorna um conversor de tipo para o tipo do componente especificado com um descritor de tipo personalizado.</summary>
      <param name="component" vsli:raw="A component to get the converter for.">Um componente para o qual obter o conversor.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para considerar as informações da descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">Um <see cref="T:System.ComponentModel.TypeConverter" /> para o componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary vsli:raw="Returns a type converter for the specified type.">Retorna um conversor de tipo para o tipo especificado.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">O <see cref="T:System.Type" /> do componente de destino.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">Um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo especificado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Returns the default event for the specified component.">Retorna o evento padrão para o componente especificado.</summary>
      <param name="component" vsli:raw="The component to get the event for.">O componente para o qual obter o evento.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">Um <see cref="T:System.ComponentModel.EventDescriptor" /> com o evento padrão ou <see langword="null" /> se não houver eventos.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default event for a component with a custom type descriptor.">Retorna o evento padrão para um componente com um descritor de tipo personalizado.</summary>
      <param name="component" vsli:raw="The component to get the event for.">O componente para o qual obter o evento.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para considerar as informações da descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">Um <see cref="T:System.ComponentModel.EventDescriptor" /> com o evento padrão ou <see langword="null" /> se não houver eventos.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary vsli:raw="Returns the default event for the specified type of component.">Retorna o evento padrão para o tipo de componente especificado.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">O <see cref="T:System.Type" /> do componente de destino.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">Um <see cref="T:System.ComponentModel.EventDescriptor" /> com o evento padrão ou <see langword="null" /> se não houver eventos.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Returns the default property for the specified component.">Retorna a propriedade padrão para o componente especificado.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">O componente para o qual obter a propriedade padrão.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> com a propriedade padrão ou <see langword="null" /> se não houver propriedades.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default property for the specified component with a custom type descriptor.">Retorna a propriedade padrão para o componente especificado com um descritor de tipo personalizado.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">O componente para o qual obter a propriedade padrão.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para considerar as informações da descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> com a propriedade padrão ou <see langword="null" /> se não houver propriedades.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary vsli:raw="Returns the default property for the specified type of component.">Retorna a propriedade padrão para o tipo de componente especificado.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the class to get the property for.">Um <see cref="T:System.Type" /> que representa a classe para a qual obter a propriedade.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> com a propriedade padrão ou <see langword="null" /> se não houver propriedades.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets an editor with the specified base type for the specified component.">Obtém um editor com o tipo base especificado para o componente especificado.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">O componente para o qual obter o editor.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">Um <see cref="T:System.Type" /> que representa o tipo base do editor que você deseja localizar.</param>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">Uma instância do editor que pode ser transmitida para o tipo de editor especificado ou <see langword="null" /> se nenhum editor do tipo solicitado for encontrado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ou <paramref name="editorBaseType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary vsli:raw="Returns an editor with the specified base type and with a custom type descriptor for the specified component.">Retorna um editor com o tipo base especificado e com um descritor de tipo personalizado para o componente especificado.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">O componente para o qual obter o editor.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">Um <see cref="T:System.Type" /> que representa o tipo base do editor que você deseja localizar.</param>
      <param name="noCustomTypeDesc" vsli:raw="A flag indicating whether custom type description information should be considered.">Um sinalizador que indica se as informações de descrição do tipo personalizado devem ser consideradas.</param>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">Uma instância do editor que pode ser transmitida para o tipo de editor especificado ou <see langword="null" /> se nenhum editor do tipo solicitado for encontrado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ou <paramref name="editorBaseType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary vsli:raw="Returns an editor with the specified base type for the specified type.">Retorna um editor com o tipo base especificado para o tipo especificado.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">O <see cref="T:System.Type" /> do componente de destino.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you are trying to find.">Um <see cref="T:System.Type" /> que representa o tipo base do editor que você está tentando localizar.</param>
      <returns vsli:raw="An instance of the editor object that can be cast to the given base type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">Uma instância do objeto de editor que pode ser convertida para o tipo base especificado ou <see langword="null" /> se nenhum editor do tipo solicitado puder ser encontrado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> ou <paramref name="editorBaseType" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary vsli:raw="Returns the collection of events for the specified component.">Retorna a coleção de eventos para o componente especificado.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Um componente para o qual obter os eventos.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">Um <see cref="T:System.ComponentModel.EventDescriptorCollection" /> com os eventos para este componente.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter.">Retorna a coleção de eventos para um componente especificado usando uma matriz especificada de atributos como um filtro.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Um componente para o qual obter os eventos.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">Uma matriz do tipo <see cref="T:System.Attribute" /> que você pode usar como um filtro.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">Um <see cref="T:System.ComponentModel.EventDescriptorCollection" /> com os eventos que correspondem aos atributos especificados para esse componente.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">Retorna a coleção de eventos para um componente especificado usando uma matriz especificada de atributos como um filtro e usando um descritor de tipo personalizado.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Um componente para o qual obter os eventos.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Uma matriz do tipo <see cref="T:System.Attribute" /> a ser usada como um filtro.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para considerar as informações da descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">Um <see cref="T:System.ComponentModel.EventDescriptorCollection" /> com os eventos que correspondem aos atributos especificados para esse componente.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component with a custom type descriptor.">Retorna a coleção de eventos para um componente especificado com um descritor de tipo personalizado.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Um componente para o qual obter os eventos.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para considerar as informações da descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">Um <see cref="T:System.ComponentModel.EventDescriptorCollection" /> com os eventos para este componente.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary vsli:raw="Returns the collection of events for a specified type of component.">Retorna a coleção de eventos para um tipo de componente especificado.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">O <see cref="T:System.Type" /> do componente de destino.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">Um <see cref="T:System.ComponentModel.EventDescriptorCollection" /> com os eventos para este componente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified type of component using a specified array of attributes as a filter.">Retorna a coleção de eventos para um tipo de componente especificado usando uma matriz especificada de atributos como um filtro.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">O <see cref="T:System.Type" /> do componente de destino.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">Uma matriz do tipo <see cref="T:System.Attribute" /> que você pode usar como um filtro.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">Um <see cref="T:System.ComponentModel.EventDescriptorCollection" /> com os eventos que correspondem aos atributos especificados para esse componente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary vsli:raw="Returns the fully qualified name of the component.">Retorna o nome totalmente qualificado do componente.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to find the name for.">O <see cref="T:System.ComponentModel.Component" /> para o qual localizar o nome.</param>
      <returns vsli:raw="The fully qualified name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">O nome totalmente qualificado do componente especificado ou <see langword="null" /> se o componente não tem nome.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary vsli:raw="Returns the collection of properties for a specified component.">Retorna a coleção de propriedades de um componente especificado.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Um componente cujas propriedades serão obtidas.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">Uma <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades do componente especificado.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter.">Retorna a coleção de propriedades de um componente especificado usando uma matriz de atributos especificada como um filtro.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Um componente cujas propriedades serão obtidas.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Uma matriz do tipo <see cref="T:System.Attribute" /> a ser usada como um filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que correspondem aos atributos especificados para o componente especificado.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">Retorna a coleção de propriedades para um componente especificado usando uma matriz especificada de atributos como um filtro e usando um descritor de tipo personalizado.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Um componente cujas propriedades serão obtidas.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Uma matriz do tipo <see cref="T:System.Attribute" /> a ser usada como um filtro.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para considerar as informações da descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the events that match the specified attributes for the specified component.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com os eventos que correspondem aos atributos especificados para o componente especificado.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using the default type descriptor.">Retorna a coleção de propriedades para um componente especificado usando o descritor de tipo padrão.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Um componente cujas propriedades serão obtidas.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para não considerar as informações de descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified component.">Uma <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades para um componente especificado.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary vsli:raw="Returns the collection of properties for a specified type of component.">Retorna a coleção de propriedades de um tipo de componente especificado.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component to get properties for.">Um <see cref="T:System.Type" /> que representa o componente para o qual obter as propriedades.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified type of component.">Uma <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades de um tipo de componente especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified type of component using a specified array of attributes as a filter.">Retorna a coleção de propriedades de um tipo de componente especificado usando uma matriz especificada de atributos como um filtro.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">O <see cref="T:System.Type" /> do componente de destino.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Uma matriz do tipo <see cref="T:System.Attribute" /> a ser usada como um filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for this type of component.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que correspondem aos atributos especificados para esse tipo de componente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary vsli:raw="Returns the type description provider for the specified component.">Retorna o provedor de descrição de tipo para o componente especificado.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">Uma instância do componente de destino.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified component.">Um <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> associado com o componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary vsli:raw="Returns the type description provider for the specified type.">Retorna o provedor de descrição de tipo para o tipo especificado.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">O <see cref="T:System.Type" /> do componente de destino.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified type.">Um <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> associado ao tipo especificado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given an object.">Retorna um <see cref="T:System.Type" /> que pode ser usado para executar a reflexão, considerando um objeto.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">Uma instância do componente de destino.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; for the specified object.">Um <see cref="T:System.Type" /> para o objeto especificado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given a class type.">Retorna um <see cref="T:System.Type" /> que pode ser usado para executar a reflexão, considerando um tipo de classe.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">O <see cref="T:System.Type" /> do componente de destino.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; of the specified class.">Um <see cref="T:System.Type" /> da classe especificada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary vsli:raw="Gets a type that represents a type description provider for all interface types.">Obtém um tipo que representa um provedor de descrição de tipo para todos os tipos de interface.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents a custom type description provider for all interface types.">Um <see cref="T:System.Type" /> que representa um provedor de descrição de tipo personalizado para todos os tipos de interface.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary vsli:raw="Clears the properties and events for the specified component from the cache.">Limpa do cache as propriedades e eventos do componente especificado.</summary>
      <param name="component" vsli:raw="A component for which the properties or events have changed.">Um componente para o qual as propriedades ou os eventos foram alterados.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary vsli:raw="Clears the properties and events for the specified assembly from the cache.">Limpa do cache as propriedades e eventos do assembly especificado.</summary>
      <param name="assembly" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; that represents the assembly to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this assembly will be refreshed.">O <see cref="T:System.Reflection.Assembly" /> que representa o assembly a ser atualizado. Cada <see cref="T:System.Type" /> neste assembly será atualizado.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary vsli:raw="Clears the properties and events for the specified module from the cache.">Limpa do cache as propriedades e eventos do módulo especificado.</summary>
      <param name="module" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; that represents the module to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this module will be refreshed.">O <see cref="T:System.Reflection.Module" /> que representa o módulo a ser atualizado. Cada <see cref="T:System.Type" /> neste módulo será atualizado.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary vsli:raw="Clears the properties and events for the specified type of component from the cache.">Limpa do cache as propriedades e eventos do tipo de componente especificado.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">O <see cref="T:System.Type" /> do componente de destino.</param>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary vsli:raw="Occurs when the cache for a component is cleared.">Ocorre quando o cache de um componente é limpo.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary vsli:raw="Removes an association between two objects.">Remove uma associação entre dois objetos.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">O <see cref="T:System.Object" /> primário.</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">O <see cref="T:System.Object" /> secundário.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary vsli:raw="Removes all associations for a primary object.">Remove todas as associações de um objeto primário.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt; in an association.">O <see cref="T:System.Object" /> primário em uma associação.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="primary" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">Remove um provedor de descrição de tipo adicionado anteriormente, que esteja associado com o objeto especificado.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> a ser removido.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Uma instância do componente de destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">Remove um provedor de descrição de tipo adicionado anteriormente, que esteja associado com o tipo especificado.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> a ser removido.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">O <see cref="T:System.Type" /> do componente de destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">Remove um provedor de descrição de tipo adicionado anteriormente, que esteja associado com o objeto especificado.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> a ser removido.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Uma instância do componente de destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">Remove um provedor de descrição de tipo adicionado anteriormente, que esteja associado com o tipo especificado.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> a ser removido.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">O <see cref="T:System.Type" /> do componente de destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary vsli:raw="Sorts descriptors using the name of the descriptor.">Classifica os descritores usando o nome do descritor.</summary>
      <param name="infos" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that contains the descriptors to sort.">Um <see cref="T:System.Collections.IList" /> que contém os descritores a serem classificados.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;infos&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="infos" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary vsli:raw="Provides a type converter that can be used to populate a list box with available types.">Fornece um conversor de tipo que pode ser usado para preencher uma caixa de listagem com os tipos disponíveis.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeListConverter&quot; /&gt; class using the type array as the available types.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeListConverter" /> usando a matriz de tipo como os tipos disponíveis.</summary>
      <param name="types" vsli:raw="The array of type &lt;see cref=&quot;T:System.Type&quot; /&gt; to use as the available types.">A matriz do tipo <see cref="T:System.Type" /> a ser usada como os tipos disponíveis.</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert the specified &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object using the given context.">Obtém um valor que indica se esse conversor pode converter o <see cref="T:System.Type" /> especificado do objeto de origem usando o contexto fornecido.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object.">O <see cref="T:System.Type" /> do objeto de origem.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Um <see cref="T:System.Type" /> que representa o tipo no qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the native type of the converter.">Converte o objeto especificado para o tipo nativo do conversor.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">Um <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura usada para representar a fonte.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Converte o objeto de valor especificado para o tipo de destino especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Um <see cref="T:System.Globalization.CultureInfo" /> opcional. Se não for fornecido, a cultura atual será assumida.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">O <see cref="T:System.Type" /> para o qual converter o valor.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">Obtém uma coleção de valores padrão para o tipo de dados para o qual este validador é projetado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contém um conjunto padrão de valores válidos ou <see langword="null" />, se o tipo de dados não der suporte a um conjunto padrão de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">Obtém um valor que indica se a lista de valores padrão retornados do método <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> é uma lista exclusiva.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> porque a <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retornada de <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> é uma lista completa de valores possíveis. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">Obtém um valor que indica se esse objeto dá suporte a um conjunto padrão de valores que podem ser escolhidos em uma lista usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> porque <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> deve ser chamado para localizar um conjunto comum de valores aos quais o objeto dá suporte. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit unsigned integer objects to and from other representations.">Fornece um conversor de tipo para converter objetos de tipo inteiro sem sinal de 16 bits para e de outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt16Converter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.UInt16Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit unsigned integer objects to and from various other representations.">Fornece um conversor de tipo para converter objetos de tipo inteiro sem sinal de 32 bits para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt32Converter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.UInt32Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit unsigned integer objects to and from other representations.">Fornece um conversor de tipo para converter objetos de tipo inteiro sem sinal de 64 bits para e de outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt64Converter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.UInt64Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.VersionConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Version&quot; /&gt; objects to and from various other representations.">Fornece um conversor de tipo para converter objetos <see cref="T:System.Version" /> para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.VersionConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.VersionConverter" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">Obtém um valor que indica se esse conversor pode converter um objeto do tipo de origem especificado em um <see cref="T:System.Version" />.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">Um objeto que fornece informações contextuais.</param>
      <param name="sourceType" vsli:raw="The type of the object to be converted.">O tipo do objeto a ser convertido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can convert sourceType to a &lt;see cref=&quot;T:System.Version&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder converter sourceType em um <see cref="T:System.Version" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">Um objeto que fornece informações contextuais.</param>
      <param name="destinationType" vsli:raw="The target type for the conversion.">O tipo de destino da conversão.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the converter can convert an object to the given destination type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conversor puder converter um objeto no tipo de destino fornecido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">Converte o objeto especificado em um <see cref="T:System.Version" />.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">Um objeto que fornece informações contextuais.</param>
      <param name="culture" vsli:raw="The culture to use for the conversion.">A cultura a ser usada para a conversão.</param>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">O valor a ser convertido para um <see cref="T:System.Version" />.</param>
      <returns vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; converted to a &lt;see cref=&quot;T:System.Version&quot; /&gt; value.">
        <paramref name="value" /> convertido em um valor <see cref="T:System.Version" />.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Version&quot; /&gt; string.">
        <paramref name="value" /> não é uma cadeia de caracteres <see cref="T:System.Version" /> válida.</exception>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified value to the specified destination type using the specified context and arguments.">Converte o valor especificado no tipo de destino especificado usando o contexto e os argumentos especificados.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="The culture that supplies formatting information for the conversion.">A cultura que fornece informações de formatação para a conversão.</param>
      <param name="value" vsli:raw="The value to be converted.">O valor a ser convertido.</param>
      <param name="destinationType" vsli:raw="The type to convert the value parameter to.">O tipo para o qual o parâmetro value será convertido.</param>
      <returns vsli:raw="An object that represents the converted value.">Um objeto que representa o valor convertido.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the given value object is valid for this type and for the specified context.">Retorna um valor que indica se o objeto de valor fornecido é válido para esse tipo e para o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value" vsli:raw="The object to test for validity.">O objeto a ser testado quanto à validade.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor especificado é válido para este objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary vsli:raw="Specifies an exception that is handled as a warning instead of an error.">Especifica uma exceção tratada como um aviso em vez de um erro.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.WarningException" />.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class using the specified serialization data and context.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.WarningException" /> usando o contexto e os dados de serialização especificados.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">O <see cref="T:System.Runtime.Serialization.SerializationInfo" /> a ser usado para desserialização.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">O destino a ser usado para desserialização.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message and no Help file.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.WarningException" /> com a mensagem especificada e sem nenhum arquivo de Ajuda.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">A mensagem a ser exibida ao usuário final.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified detailed description and the specified exception.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.WarningException" /> com a descrição detalhada e a exceção especificadas.</summary>
      <param name="message" vsli:raw="A detailed description of the error.">Uma descrição detalhada do erro.</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">Uma referência à exceção interna que é a causa dessa exceção.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.WarningException" /> com a mensagem especificada e com acesso ao arquivo de Ajuda especificado.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">A mensagem a ser exibida ao usuário final.</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">O arquivo de Ajuda a ser exibido se o usuário solicitar ajuda.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file and topic.">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.WarningException" /> com a mensagem especificada e com acesso ao arquivo e ao tópico de Ajuda especificados.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">A mensagem a ser exibida ao usuário final.</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">O arquivo de Ajuda a ser exibido se o usuário solicitar ajuda.</param>
      <param name="helpTopic" vsli:raw="The Help topic to display if the user requests help.">O tópico de Ajuda a ser exibido se o usuário solicitar ajuda.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with the parameter name and additional exception information.">Define a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> com o nome de parâmetro e informações adicionais de exceção.</summary>
      <param name="info" vsli:raw="Stores the data that was being used to serialize or deserialize the object that the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.CodeDomSerializer&quot; /&gt; was serializing or deserializing.">Armazena os dados que estavam sendo usados para serializar ou desserializar o objeto que o <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> estava serializando ou desserializando.</param>
      <param name="context" vsli:raw="Describes the source and destination of the stream that generated the exception, as well as a means for serialization to retain that context and an additional caller-defined context.">Descreve a origem e o destino do fluxo que gerou a exceção, além de um meio para que a serialização retenha esse contexto e um contexto adicional definido pelo chamador.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary vsli:raw="Gets the Help topic associated with the warning.">Obtém o tópico de Ajuda associado ao aviso.</summary>
      <returns vsli:raw="The Help topic associated with the warning.">O tópico da ajuda associado ao aviso.</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary vsli:raw="Gets the Help file associated with the warning.">Obtém o arquivo de Ajuda associado ao aviso.</summary>
      <returns vsli:raw="The Help file associated with the warning.">O arquivo de ajuda associado ao aviso.</returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary vsli:raw="Converts colors from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Converte cores de um tipo de dados para outro. Acesse esta classe por meio do <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.ColorConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Drawing.ColorConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Determina se esse conversor pode converter um objeto no tipo de origem especificado para o tipo nativo do conversor.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato. É possível usar esse objeto para obter mais informações sobre o ambiente do qual o conversor está sendo invocado.</param>
      <param name="sourceType" vsli:raw="The type from which you want to convert.">O tipo do qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse objeto puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">Retorna um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to which you want to convert.">Um <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a operação, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">Converte o objeto fornecido no tipo nativo do conversor.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">Um <see cref="T:System.ComponentModel.TypeDescriptor" /> que fornece um contexto de formato. É possível usar esse objeto para obter mais informações sobre o ambiente do qual o conversor está sendo invocado.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">Um <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura na qual representar o cor.</param>
      <param name="value" vsli:raw="The object to convert.">O objeto a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">Converte o objeto especificado em outro tipo.</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">Um contexto do formatador. Use esse objeto para extrair mais informações sobre o ambiente do qual o conversor está sendo invocado. Sempre verifique se esse valor é <see langword="null" />. Além disso, as propriedades no objeto de contexto podem retornar <see langword="null" />.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">Um <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura na qual representar o cor.</param>
      <param name="value" vsli:raw="The object to convert.">O objeto a ser convertido.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">O tipo no qual converter o objeto.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationtype&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationtype" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Retrieves a collection containing a set of standard values for the data type for which this validator is designed. This will return &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Recupera uma coleção que contém um conjunto de valores padrão para o tipo de dados para o qual o validador foi criado. Retornará <see langword="null" /> se o tipo de dados não der suporte a um conjunto padrão de valores.</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">Um contexto do formatador. Use esse objeto para extrair mais informações sobre o ambiente do qual o conversor está sendo invocado. Sempre verifique se esse valor é <see langword="null" />. Além disso, as propriedades no objeto de contexto podem retornar <see langword="null" />.</param>
      <returns vsli:raw="A collection containing &lt;see langword=&quot;null&quot; /&gt; or a standard set of valid values. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Uma coleção que contém <see langword="null" /> ou um conjunto padrão de valores válidos. A implementação padrão sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports a standard set of values that can be chosen from a list.">Determina se esse objeto dá suporte a um conjunto padrão de valores que podem ser escolhidos em uma lista.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Um <see cref="T:System.ComponentModel.TypeDescriptor" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.Drawing.ColorConverter.GetStandardValues&quot; /&gt; must be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" /> precisar ser chamado para localizar um conjunto comum de valores aos quais o objeto dá suporte; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object from one data type to another.">Converte um objeto <see cref="T:System.Drawing.Point" /> de um tipo de dados em outro.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.PointConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Drawing.PointConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Determina se esse conversor pode converter um objeto no tipo de origem especificado para o tipo nativo do conversor.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Um contexto do formatador. Esse objeto pode ser usado para obter mais informações sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">O tipo do qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse objeto puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context.">Um objeto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">Um objeto <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object.">Converte o objeto especificado em um objeto <see cref="T:System.Drawing.Point" />.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Um contexto do formatador. Esse objeto pode ser usado para obter mais informações sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Um objeto que contém informações específicas da cultura, como o idioma, calendário e convenções culturais associadas a uma cultura específica. Ele é baseado no padrão RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">O objeto a ser convertido.</param>
      <returns vsli:raw="The converted object.">O objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Não foi possível concluir a conversão.</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">Converte o objeto especificado no tipo especificado.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Um contexto do formatador. Esse objeto pode ser usado para obter mais informações sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Um objeto que contém informações específicas da cultura, como o idioma, calendário e convenções culturais associadas a uma cultura específica. Ele é baseado no padrão RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">O objeto a ser convertido.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">O tipo no qual converter o objeto.</param>
      <returns vsli:raw="The converted object.">O objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Não foi possível concluir a conversão.</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object.">Cria uma instância desse tipo fornecido um conjunto de valores de propriedade para o objeto.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">Um descritor de tipo por meio do qual o contexto adicional pode ser fornecido.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt;.">Um dicionário de novos valores da propriedade. O dicionário contém uma série de pares nome-valor, um para cada propriedade retornada de <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">O objeto recém-criado ou <see langword="null" />, se o objeto não puder ser criado. A implementação padrão retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">Determina se a alteração de um valor neste objeto deve exigir que uma chamada a <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> crie um novo valor.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Um <see cref="T:System.ComponentModel.TypeDescriptor" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso o método <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> deva ser chamado quando uma alteração for feita a uma ou mais propriedades do objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">Recupera o conjunto de propriedades para este tipo. Por padrão, um tipo não retorna nenhuma propriedade.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">Um descritor de tipo por meio do qual o contexto adicional pode ser fornecido.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">O valor do objeto para o qual obter as propriedades.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Uma matriz de objetos <see cref="T:System.Attribute" /> que descrevem as propriedades.</param>
      <returns vsli:raw="The set of properties that are exposed for this data type. If no properties are exposed, this method might return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">O conjunto de propriedades que são expostas para esse tipo de dados. Se não houver propriedades expostas, esse método poderá retornar <see langword="null" />. A implementação padrão sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">Determina se esse objeto dá suporte às propriedades. Por padrão, é <see langword="false" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Um <see cref="T:System.ComponentModel.TypeDescriptor" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> deva ser chamado para localizar as propriedades desse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary vsli:raw="Converts rectangles from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Converte retângulos de um tipo de dados em outro. Acesse esta classe por meio do <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.RectangleConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Drawing.RectangleConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Determina se esse conversor pode converter um objeto no tipo de origem especificado para o tipo nativo do conversor.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Um contexto do formatador. Esse objeto pode ser usado para obter mais informações sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">O tipo do qual você deseja converter.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Este método retornará <see langword="true" /> se este objeto puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context. This can be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object can also return &lt;see langword=&quot;null&quot; /&gt;.">Um objeto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">Um objeto <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Este método retornará <see langword="true" /> se este conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.Drawing.Rectangle&quot; /&gt; object.">Converte o objeto fornecido em um objeto <see cref="T:System.Drawing.Rectangle" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que pode ser usado para obter informações adicionais sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Um <see cref="T:System.Globalization.CultureInfo" /> que contém informações específicas da cultura, como o idioma, calendário e convenções culturais associadas a uma cultura específica. Ele é baseado no padrão RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">O objeto a ser convertido.</param>
      <returns vsli:raw="The converted object.">O objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Não foi possível concluir a conversão.</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">Converte o objeto especificado no tipo especificado.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que pode ser usado para obter informações adicionais sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Um <see cref="T:System.Globalization.CultureInfo" /> que contém informações específicas da cultura, como o idioma, calendário e convenções culturais associadas a uma cultura específica. Ele é baseado no padrão RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">O objeto a ser convertido.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">O tipo no qual converter o objeto.</param>
      <returns vsli:raw="The converted object.">O objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Não foi possível concluir a conversão.</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object. This is useful for objects that are immutable but still want to provide changeable properties.">Cria uma instância desse tipo fornecido um conjunto de valores de propriedade para o objeto. Isso é útil para objetos imutáveis, mas ainda desejam fornecer propriedades mutáveis.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from a call to the &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">Um dicionário de novos valores da propriedade. O dicionário contém uma série de pares nome-valor, um para cada propriedade retornada de uma chamada ao método <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">O objeto recém-criado ou <see langword="null" />, se o objeto não puder ser criado. A implementação padrão retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">Determina se a alteração de um valor neste objeto deve exigir que uma chamada a <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> crie um novo valor.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">Um descritor de tipo por meio do qual o contexto adicional pode ser fornecido.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Este método retornará <see langword="true" /> se <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> dever ser chamado quando uma alteração for feita em uma ou mais propriedades deste objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">Recupera o conjunto de propriedades para este tipo. Por padrão, um tipo não retorna nenhuma propriedade.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">O valor do objeto para o qual obter as propriedades.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Uma matriz de objetos <see cref="T:System.Attribute" /> que descrevem as propriedades.</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">O conjunto de propriedades que devem ser expostas para este tipo de dados. Se nenhuma propriedade deve ser exposta, isso pode retornar <see langword="null" />. A implementação padrão sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">Determina se esse objeto dá suporte às propriedades. Por padrão, é <see langword="false" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Este método retornará <see langword="true" /> se <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> dever ser chamado para encontrar as propriedades deste objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; class is used to convert from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; object.">A classe <see cref="T:System.Drawing.SizeConverter" /> é usada para converter de um tipo de dados em outro. Acesse essa classe por meio do objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; object.">Inicializa um novo objeto <see cref="T:System.Drawing.SizeConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether this converter can convert an object in the specified source type to the native type of the converter.">Determina se esse conversor pode converter um objeto no tipo de origem especificado no tipo nativo do conversor.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que pode ser usado para obter informações adicionais sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">O tipo do qual você deseja converter.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion.">Este método retornará <see langword="true" /> se este objeto puder realizar a conversão.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This can be &lt;see langword=&quot;null&quot; /&gt;, so always check. Also, properties on the context object can return &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que pode ser usado para obter informações adicionais sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />. Portanto, sempre verifique. Além disso, as propriedades no objeto de contexto podem retornar <see langword="null" />.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Um <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Este método retornará <see langword="true" /> se este conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the converter's native type.">Converte o objeto especificado no tipo nativo do conversor.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que pode ser usado para obter informações adicionais sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Um objeto <see cref="T:System.Globalization.CultureInfo" /> que contém informações específicas da cultura, como o idioma, calendário e convenções culturais associadas a uma cultura específica. Ele é baseado no padrão RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">O objeto a ser convertido.</param>
      <returns vsli:raw="The converted object.">O objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Não foi possível concluir a conversão.</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">Converte o objeto especificado no tipo especificado.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que pode ser usado para obter informações adicionais sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Um objeto <see cref="T:System.Globalization.CultureInfo" /> que contém informações específicas da cultura, como o idioma, calendário e convenções culturais associadas a uma cultura específica. Ele é baseado no padrão RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">O objeto a ser convertido.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">O tipo no qual converter o objeto.</param>
      <returns vsli:raw="The converted object.">O objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Não foi possível concluir a conversão.</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an object of this type by using a specified set of property values for the object. This is useful for creating non-changeable objects that have changeable properties.">Cria um objeto desse tipo por meio de um conjunto especificado de valores da propriedade para o objeto. Isso é útil para criar objetos imutáveis que têm propriedades mutáveis.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Um <see cref="T:System.ComponentModel.TypeDescriptor" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">Um dicionário de novos valores da propriedade. O dicionário contém uma série de pares nome-valor, um para cada propriedade retornada de uma chamada ao método <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">O objeto recém-criado ou <see langword="null" />, se o objeto não puder ser criado. A implementação padrão retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether changing a value on this object should require a call to the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method to create a new value.">Determina se a alteração de um valor neste objeto deve exigir que uma chamada ao método <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> crie um novo valor.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Um <see cref="T:System.ComponentModel.TypeDescriptor" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; object should be called when a change is made to one or more properties of this object.">
        <see langword="true" /> se o objeto <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> dever ser chamado quando uma alteração for feita em uma ou mais propriedades deste objeto.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not have any properties to return.">Recupera o conjunto de propriedades para este tipo. Por padrão, um tipo não tem nenhuma propriedade a retornar.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Um <see cref="T:System.ComponentModel.TypeDescriptor" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">O valor do objeto para o qual obter as propriedades.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Uma matriz de objetos <see cref="T:System.Attribute" /> que descrevem as propriedades.</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">O conjunto de propriedades que devem ser expostas para este tipo de dados. Se nenhuma propriedade deve ser exposta, isso pode retornar <see langword="null" />. A implementação padrão sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">Determina se este objeto dá suporte a propriedades. Por padrão, é <see langword="false" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Um <see cref="T:System.ComponentModel.TypeDescriptor" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method should be called to find the properties of this object.">
        <see langword="true" /> se o método <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> dever ser chamado para localizar as propriedades desse objeto.</returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary vsli:raw="Converts &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; objects from one type to another.">Converte objetos <see cref="T:System.Drawing.SizeF" /> de um tipo em outro.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Drawing.SizeFConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the converter can convert from the type specified to the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type, using the specified context.">Retorna um valor que indica se o conversor pode converter do tipo especificado para o tipo <see cref="T:System.Drawing.SizeF" /> usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> por meio do qual o contexto adicional pode ser fornecidos.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; the represents the type you wish to convert from.">Um <see cref="T:System.Type" /> que representa o tipo a ser convertido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the conversion can be performed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que a conversão pode ser executada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; can convert a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; to the specified type.">Retorna um valor que indica se o <see cref="T:System.Drawing.SizeFConverter" /> pode converter um <see cref="T:System.Drawing.SizeF" /> para o tipo especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> por meio do qual o contexto adicional pode ser fornecidos.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Converte o objeto determinado para o tipo deste conversor, usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">A <see cref="T:System.Globalization.CultureInfo" /> para ser usada como a cultura atual.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Converte o objeto de valor determinado para o tipo especificado, usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If null is passed, the current culture is assumed.">Um <see cref="T:System.Globalization.CultureInfo" />. Se null for passado, a cultura atual será assumida.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">O <see cref="T:System.Type" /> para o qual o parâmetro value será convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; with the specified property values using the specified context.">Cria uma instância de um <see cref="T:System.Drawing.SizeF" /> com os valores de propriedade especificados usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> por meio do qual o contexto adicional pode ser fornecidos.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing property names and values.">Um <see cref="T:System.Collections.IDictionary" /> que contêm valores e nomes de propriedade.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the new &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created.">Um <see cref="T:System.Object" /> que representa o novo <see cref="T:System.Drawing.SizeF" /> ou <see langword="null" /> se o objeto não puder ser criado.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a value indicating whether changing a value on this object requires a call to the &lt;see cref=&quot;Overload:System.Drawing.SizeFConverter.CreateInstance&quot; /&gt; method to create a new value.">Retorna um valor que indica se a alteração de um valor nesse objeto requer uma chamada para o método <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" /> para criar um novo valor.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. This may be &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato. Isso pode ser <see langword="null" />.</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">Sempre retorna <see langword="true" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves a set of properties for the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type using the specified context and attributes.">Recupera um conjunto de propriedades para o tipo <see cref="T:System.Drawing.SizeF" /> usando o contexto especificado e os atributos.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> por meio do qual o contexto adicional pode ser fornecidos.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to return properties for.">O <see cref="T:System.Object" /> ao qual as propriedades serão retornadas.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Uma matriz de objetos <see cref="T:System.Attribute" /> que descrevem as propriedades.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties.">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém as propriedades.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type supports properties.">Retorna se o tipo <see cref="T:System.Drawing.SizeF" /> der suporte a propriedades.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> por meio do qual o contexto adicional pode ser fornecidos.</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">Sempre retorna <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class represents the type converter for extended protection policy used by the server to validate incoming client connections.">A classe <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> representa o conversor de tipo da política de proteção estendida usada pelo servidor para validar as conexões de entrada do cliente.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" />.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">Retorna se esse conversor pode converter o objeto para o tipo especificado.</summary>
      <param name="context" vsli:raw="The object to convert.">O objeto a ser convertido.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Um <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Convert the object to the specified type.">Converter o objeto no tipo especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Um objeto <see cref="T:System.Globalization.CultureInfo" />. Se <see langword="null" /> for passado, a cultura atual será assumida.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This should be a &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot; /&gt; object.">O <see cref="T:System.Object" /> a ser convertido. Isso deve ser um objeto <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">O <see cref="T:System.Type" /> para o qual o parâmetro value será convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um <see cref="T:System.Object" /> que representa o parâmetro <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">A conversão não pôde ser executada.</exception>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">Fornece dados para o evento de <see cref="E:System.Timers.Timer.Elapsed" /> .</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary vsli:raw="Gets the date/time when the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">Obtém a data/hora quando o <see cref="E:System.Timers.Timer.Elapsed" /> evento foi gerado.</summary>
      <returns vsli:raw="The time the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">A hora que o <see cref="E:System.Timers.Timer.Elapsed" /> evento foi gerado.</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">Representa o método que manipulará o evento de <see cref="E:System.Timers.Timer.Elapsed" /> de <see cref="T:System.Timers.Timer" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">A fonte do evento.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.Timers.ElapsedEventArgs&quot; /&gt; object that contains the event data.">Um objeto <see cref="T:System.Timers.ElapsedEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary vsli:raw="Generates an event after a set interval, with an option to generate recurring events.">Gera um evento após um intervalo definido, a opção de gerar eventos recorrentes.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets all the properties to their initial values.">Inicializa uma nova instância da classe <see cref="T:System.Timers.Timer" /> e define todas as propriedades para seus valores iniciais.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets the &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property to the specified number of milliseconds.">Inicializa uma nova instância da classe <see cref="T:System.Timers.Timer" /> e define a propriedade <see cref="P:System.Timers.Timer.Interval" /> como o número especificado de milissegundos.</summary>
      <param name="interval" vsli:raw="The time, in milliseconds, between events. The value must be greater than zero and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">O tempo, em milissegundos, entre eventos. O valor deve ser maior que zero e menor ou igual a <see cref="F:System.Int32.MaxValue" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The value of the &lt;paramref name=&quot;interval&quot; /&gt; parameter is less than or equal to zero, or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">O valor do parâmetro <paramref name="interval" /> é menor ou igual a zero ou maior que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary vsli:raw="Gets or sets a Boolean indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once (&lt;see langword=&quot;false&quot; /&gt;) or repeatedly (&lt;see langword=&quot;true&quot; /&gt;).">Obtém ou define um valor booliano que indica se <see cref="T:System.Timers.Timer" /> deve acionar o evento <see cref="E:System.Timers.Timer.Elapsed" /> apenas uma vez (<see langword="false" />) ou repetidamente (<see langword="true" />).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event each time the interval elapses; &lt;see langword=&quot;false&quot; /&gt; if it should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once, after the first time the interval elapses. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> para que o <see cref="T:System.Timers.Timer" /> acione o evento <see cref="E:System.Timers.Timer.Elapsed" /> cada vez que o intervalo expirar; <see langword="false" /> para que acione o evento <see cref="E:System.Timers.Timer.Elapsed" /> somente uma vez, após a primeira vez que o intervalo expirar. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary vsli:raw="Begins the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">Começa a inicialização do tempo de execução de um <see cref="T:System.Timers.Timer" /> que é usado em um formulário ou por outro componente.</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary vsli:raw="Releases the resources used by the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">Libera os recursos usados pelo <see cref="T:System.Timers.Timer" />.</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases all resources used by the current &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">Libera todos os recursos usados pelo <see cref="T:System.Timers.Timer" /> atual.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary vsli:raw="Occurs when the interval elapses.">Ocorre quando o intervalo termina.</summary>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">Obtém ou define um valor que indica se o <see cref="T:System.Timers.Timer" /> deve acionar o evento <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso o <see cref="T:System.Timers.Timer" /> deva acionar o evento <see cref="E:System.Timers.Timer.Elapsed" />; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This property cannot be set because the timer has been disposed.">Essa propriedade não pode ser definida porque o temporizador foi descartado.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property was set to a value greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; before the timer was enabled.">A propriedade <see cref="P:System.Timers.Timer.Interval" /> foi definida como um valor maior que <see cref="F:System.Int32.MaxValue" /> antes de o temporizador ser habilitado.</exception>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary vsli:raw="Ends the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">Termina a inicialização do tempo de execução de um <see cref="T:System.Timers.Timer" /> que é usado em um formulário ou por outro componente.</summary>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary vsli:raw="Gets or sets the interval, expressed in milliseconds, at which to raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">Obtém ou define o intervalo, expressado em milissegundos, no qual gerar o evento <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <returns vsli:raw="The time, in milliseconds, between &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; events. The value must be greater than zero, and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;. The default is 100 milliseconds.">O tempo, em milissegundos, entre eventos <see cref="E:System.Timers.Timer.Elapsed" />. O valor deve ser maior que zero e menor ou igual a <see cref="F:System.Int32.MaxValue" />. O padrão é de 100 milissegundos.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The interval is less than or equal to zero.&#xA;&#xA; -or-&#xA;&#xA; The interval is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;, and the timer is currently enabled. (If the timer is not currently enabled, no exception is thrown until it becomes enabled.)">O intervalo é menor ou igual a zero.
- ou -
O intervalo é maior que <see cref="F:System.Int32.MaxValue" /> e o timer está habilitado no momento. (Se o timer não estiver habilitado no momento, nenhuma exceção será lançada até que ele seja habilitado.)</exception>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary vsli:raw="Gets or sets the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; to its container in design mode.">Obtém ou define o site que associa o <see cref="T:System.Timers.Timer" /> ao respectivo contêiner no modo de design.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface representing the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; object to its container.">Uma interface <see cref="T:System.ComponentModel.ISite" /> que representa o site que associa o objeto <see cref="T:System.Timers.Timer" /> ao respectivo contêiner.</returns>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary vsli:raw="Starts raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;.">Começa a acionar o evento <see cref="E:System.Timers.Timer.Elapsed" /> definindo <see cref="P:System.Timers.Timer.Enabled" /> como <see langword="true" />.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; is created with an interval equal to or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; + 1, or set to an interval less than zero.">O <see cref="T:System.Timers.Timer" /> é criado com um intervalo maior ou igual a <see cref="F:System.Int32.MaxValue" /> + 1 ou definido como um intervalo menor que zero.</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary vsli:raw="Stops raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">Para de acionar o evento <see cref="E:System.Timers.Timer.Elapsed" /> definindo <see cref="P:System.Timers.Timer.Enabled" /> como <see langword="false" />.</summary>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary vsli:raw="Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.">Obtém ou define o objeto usado para realizar marshaling das chamadas do manipulador de eventos emitidas ao término de um intervalo.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ISynchronizeInvoke&quot; /&gt; representing the object used to marshal the event-handler calls that are issued when an interval has elapsed. The default is &lt;see langword=&quot;null&quot; /&gt;.">O <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> que representa o objeto usado para realizar marshaling das chamadas do manipulador de eventos emitidas ao término de um intervalo. O padrão é <see langword="null" />.</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary vsli:raw="Sets the description that visual designers can display when referencing an event, extender, or property.">Define a descrição que os designers visuais podem exibir ao referenciar um evento, um extensor ou uma propriedade.</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.TimersDescriptionAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Timers.TimersDescriptionAttribute" />.</summary>
      <param name="description" vsli:raw="The description to use.">A descrição a usar.</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary vsli:raw="Gets the description that visual designers can display when referencing an event, extender, or property.">Define a descrição que os designers visuais podem exibir ao referenciar um evento, um extensor ou uma propriedade.</summary>
      <returns vsli:raw="The description for the event, extender, or property.">A descrição do evento, do extensor ou da propriedade.</returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; type to a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type, and vice versa.">Converte um tipo <see cref="T:System.String" /> para um tipo <see cref="T:System.Uri" /> e vice-versa.</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.UriTypeConverter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.UriTypeConverter" />.</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">Retorna se este conversor pode converter um objeto do tipo indicado para o tipo deste conversor.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert from.">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;sourceType&quot; /&gt; is a &lt;see cref=&quot;T:System.String&quot; /&gt; type or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type can be assigned from &lt;paramref name=&quot;sourceType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="sourceType" /> for um tipo <see cref="T:System.String" /> ou um tipo <see cref="T:System.Uri" /> puder ser atribuído de <paramref name="sourceType" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;sourceType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="sourceType" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">Retorna se esse conversor pode converter o objeto para o tipo especificado, usando o contexto especificado.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert to.">Um <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;destinationType&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Uri&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="destinationType" /> for do tipo <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, <see cref="T:System.String" /> ou <see cref="T:System.Uri" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Converte o objeto determinado para o tipo deste conversor, usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">A <see cref="T:System.Globalization.CultureInfo" /> para ser usada como a cultura atual.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a given value object to the specified type, using the specified context and culture information.">Converte um objeto de valor determinado no tipo especificado usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Um <see cref="T:System.Globalization.CultureInfo" />. Se <see langword="null" /> for passado, a cultura atual será considerada.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">O <see cref="T:System.Type" /> para converter o parâmetro <paramref name="value" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created from it.">Retorna se o objeto de valor especificado é um <see cref="T:System.Uri" /> ou um <see cref="T:System.Uri" /> pode ser criado com base nele.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">O <see cref="T:System.Object" /> para testar a validade.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.String&quot; /&gt; from which a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="value" /> for um <see cref="T:System.Uri" /> ou um <see cref="T:System.String" /> do qual um <see cref="T:System.Uri" /> pode ser criado; caso contrário, <see langword="false" />.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.ThreadPool</name>
  </assembly>
  <members>
    <member name="T:System.Threading.IThreadPoolWorkItem">
      <summary>Representa um item de trabalho que pode ser executado pelo <see cref="T:System.Threading.ThreadPool" />.</summary>
    </member>
    <member name="M:System.Threading.IThreadPoolWorkItem.Execute">
      <summary>Executa o item de trabalho no pool de threads.</summary>
    </member>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary>Representa um identificador que foi registrado ao chamar <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary>Cancela uma operação de espera registrada emitida pelo método <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />.</summary>
      <param name="waitObject">O <see cref="T:System.Threading.WaitHandle" /> a ser sinalizado.</param>
      <returns>
        <see langword="true" /> se a função for bem-sucedida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary>Fornece um pool de threads que podem ser usados para executar tarefas, postar os itens de trabalho, processar E/S assíncrona, aguardar em nome de outros threads e processar temporizadores.</summary>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
      <summary>Associa um identificador de sistema operacional ao <see cref="T:System.Threading.ThreadPool" />.</summary>
      <param name="osHandle">Um <see cref="T:System.IntPtr" /> que contém o identificador. O identificador deve ter sido aberto para o E/S sobreposto no lado não gerenciado.</param>
      <returns>
        <see langword="true" /> se o identificador estiver associado; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
      <summary>Associa um identificador de sistema operacional ao <see cref="T:System.Threading.ThreadPool" />.</summary>
      <param name="osHandle">Um <see cref="T:System.Runtime.InteropServices.SafeHandle" /> que contém o identificador do sistema operacional. O identificador deve ter sido aberto para o E/S sobreposto no lado não gerenciado.</param>
      <returns>
        <see langword="true" /> se o identificador estiver associado; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="osHandle" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Threading.ThreadPool.CompletedWorkItemCount">
      <summary>Obtém o número de itens de trabalho que foram processados até agora.</summary>
      <returns>O número de itens de trabalho que foram processados até agora.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
      <summary>Recupera a diferença entre o número máximo de threads do pool de threads retornados pelo método <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> e o número de ativos no momento.</summary>
      <param name="workerThreads">O número de threads de trabalho disponíveis.</param>
      <param name="completionPortThreads">O número de threads de E/S assíncronos disponíveis.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
      <summary>Recupera o número de solicitações para o pool de threads que podem estar ativas simultaneamente. Todas as solicitações acima desse número permanecem na fila até que os threads do pool de threads se tornem disponíveis.</summary>
      <param name="workerThreads">O número máximo de threads de trabalho no pool de threads.</param>
      <param name="completionPortThreads">O número máximo de threads de E/S assíncronas no pool de threads.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
      <summary>Recupera o número mínimo de threads que o pool de threads cria sob demanda à medida que novas solicitações são feitas, antes de mudar para um algoritmo a fim de gerenciar a criação e a destruição de thread.</summary>
      <param name="workerThreads">Quando este método retorna, ele contém o número mínimo de threads de trabalho que o pool de threads cria sob demanda.</param>
      <param name="completionPortThreads">Quando este método retorna, ele contém o número mínimo de threads de E/S assíncronas que o pool de threads cria sob demanda.</param>
    </member>
    <member name="P:System.Threading.ThreadPool.PendingWorkItemCount">
      <summary>Obtém o número de itens de trabalho que estão enfileirados, no momento, para serem processados.</summary>
      <returns>O número de itens de trabalho que estão enfileirados para serem processados no momento.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary>Enfileira um método para execução. O método é executado quando um thread de pool de threads se torna disponível.</summary>
      <param name="callBack">Um <see cref="T:System.Threading.WaitCallback" /> que representa o método a ser executado.</param>
      <returns>
        <see langword="true" /> se o método for colocado na fila com êxito; <see cref="T:System.NotSupportedException" /> será gerado se o item de trabalho não puder ser colocado na fila.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">O CLR (Common Language Runtime) está hospedado e o host não dá suporte a essa ação.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>Enfileira um método para execução e especifica um objeto que contém dados a serem usados pelo método. O método é executado quando um thread de pool de threads se torna disponível.</summary>
      <param name="callBack">Um <see cref="T:System.Threading.WaitCallback" /> que representa o método a ser executado.</param>
      <param name="state">Um objeto que contém dados a serem usados pelo método.</param>
      <returns>
        <see langword="true" /> se o método for colocado na fila com êxito; <see cref="T:System.NotSupportedException" /> será gerado se o item de trabalho não puder ser colocado na fila.</returns>
      <exception cref="T:System.NotSupportedException">O CLR (Common Language Runtime) está hospedado e o host não dá suporte a essa ação.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary>Enfileira um método especificado por um delegado de <see cref="T:System.Action`1" /> para execução e fornece os dados a serem usados pelo método. O método é executado quando um thread de pool de threads se torna disponível.</summary>
      <param name="callBack">Um <see cref="T:System.Action`1" /> que representa o método a ser executado.</param>
      <param name="state">Um objeto que contém dados a serem usados pelo método.</param>
      <param name="preferLocal">
        <see langword="true" /> para indicar a preferência por colocar o item de trabalho em uma fila próximo ao thread atual; <see langword="false" /> para indicar a preferência por colocar o item de trabalho na fila compartilhada do pool de threads.</param>
      <typeparam name="TState">O tipo dos elementos de <paramref name="state" />.</typeparam>
      <returns>
        <see langword="true" /> se o método for colocado na fila com êxito; <see cref="T:System.NotSupportedException" /> será gerado se o item de trabalho não puder ser colocado na fila.
.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>Registra um delegado para esperar um <see cref="T:System.Threading.WaitHandle" />, especificando um inteiro com sinal de 32 bits para o tempo limite em milissegundos.</summary>
      <param name="waitObject">O <see cref="T:System.Threading.WaitHandle" /> a ser registrado. Use um <see cref="T:System.Threading.WaitHandle" /> diferente do <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">O delegado <see cref="T:System.Threading.WaitOrTimerCallback" /> para chamar quando o parâmetro <paramref name="waitObject" /> for sinalizado.</param>
      <param name="state">O objeto que é passado para o delegado.</param>
      <param name="millisecondsTimeOutInterval">O tempo limite em milissegundos. Se o parâmetro <paramref name="millisecondsTimeOutInterval" /> for 0 (zero), a função testará o estado do objeto e será imediatamente retornada. Se <paramref name="millisecondsTimeOutInterval" /> for -1, o intervalo de tempo limite da função nunca expirará.</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> para indicar que o thread não esperará o parâmetro <paramref name="waitObject" /> depois que o delegado for chamado; <see langword="false" /> para indicar que o temporizador será reiniciado sempre que a operação de espera for concluída até que o registro da espera seja cancelado.</param>
      <returns>O <see cref="T:System.Threading.RegisteredWaitHandle" /> que encapsula o identificador nativo.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="millisecondsTimeOutInterval" /> é menor que -1.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>Registra um delegado para esperar um <see cref="T:System.Threading.WaitHandle" />, especificando um inteiro com sinal de 64 bits para o tempo limite em milissegundos.</summary>
      <param name="waitObject">O <see cref="T:System.Threading.WaitHandle" /> a ser registrado. Use um <see cref="T:System.Threading.WaitHandle" /> diferente do <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">O delegado <see cref="T:System.Threading.WaitOrTimerCallback" /> a ser chamado quando o parâmetro <paramref name="waitObject" /> é sinalizado.</param>
      <param name="state">O objeto passado ao delegado.</param>
      <param name="millisecondsTimeOutInterval">O tempo limite em milissegundos. Se o parâmetro <paramref name="millisecondsTimeOutInterval" /> for 0 (zero), a função testará o estado do objeto e será imediatamente retornada. Se <paramref name="millisecondsTimeOutInterval" /> for -1, o intervalo de tempo limite da função nunca expirará.</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> para indicar que o thread não esperará o parâmetro <paramref name="waitObject" /> depois que o delegado for chamado; <see langword="false" /> para indicar que o temporizador será reiniciado sempre que a operação de espera for concluída até que o registro da espera seja cancelado.</param>
      <returns>O <see cref="T:System.Threading.RegisteredWaitHandle" /> que encapsula o identificador nativo.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="millisecondsTimeOutInterval" /> é menor que -1.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>Registra um delegado para aguardar um <see cref="T:System.Threading.WaitHandle" />, especificando um valor <see cref="T:System.TimeSpan" /> para o tempo limite.</summary>
      <param name="waitObject">O <see cref="T:System.Threading.WaitHandle" /> a ser registrado. Use um <see cref="T:System.Threading.WaitHandle" /> diferente do <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">O delegado <see cref="T:System.Threading.WaitOrTimerCallback" /> a ser chamado quando o parâmetro <paramref name="waitObject" /> é sinalizado.</param>
      <param name="state">O objeto passado ao delegado.</param>
      <param name="timeout">O tempo limite representado por um <see cref="T:System.TimeSpan" />. Se <paramref name="timeout" /> for 0 (zero), a função testará o estado do objeto e será retornada imediatamente. Se <paramref name="timeout" /> for -1, o intervalo de tempo limite da função nunca expirará.</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> para indicar que o thread não esperará o parâmetro <paramref name="waitObject" /> depois que o delegado for chamado; <see langword="false" /> para indicar que o temporizador será reiniciado sempre que a operação de espera for concluída até que o registro da espera seja cancelado.</param>
      <returns>O <see cref="T:System.Threading.RegisteredWaitHandle" /> que encapsula o identificador nativo.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="timeout" /> é menor que -1.</exception>
      <exception cref="T:System.NotSupportedException">O parâmetro <paramref name="timeout" /> é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>Registra um delegado para aguardar um <see cref="T:System.Threading.WaitHandle" />, especificando um inteiro sem sinal de 32 bits para o tempo limite em milissegundos.</summary>
      <param name="waitObject">O <see cref="T:System.Threading.WaitHandle" /> a ser registrado. Use um <see cref="T:System.Threading.WaitHandle" /> diferente do <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">O delegado <see cref="T:System.Threading.WaitOrTimerCallback" /> a ser chamado quando o parâmetro <paramref name="waitObject" /> é sinalizado.</param>
      <param name="state">O objeto passado ao delegado.</param>
      <param name="millisecondsTimeOutInterval">O tempo limite em milissegundos. Se o parâmetro <paramref name="millisecondsTimeOutInterval" /> for 0 (zero), a função testará o estado do objeto e será imediatamente retornada. Se <paramref name="millisecondsTimeOutInterval" /> for -1, o intervalo de tempo limite da função nunca expirará.</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> para indicar que o thread não esperará o parâmetro <paramref name="waitObject" /> depois que o delegado for chamado; <see langword="false" /> para indicar que o temporizador será reiniciado sempre que a operação de espera for concluída até que o registro da espera seja cancelado.</param>
      <returns>O <see cref="T:System.Threading.RegisteredWaitHandle" /> que pode ser usado para cancelar a operação de espera registrada.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="millisecondsTimeOutInterval" /> é menor que -1.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
      <summary>Define o número de solicitações para o pool de threads que podem estar ativas simultaneamente. Todas as solicitações acima desse número permanecem na fila até que os threads do pool de threads se tornem disponíveis.</summary>
      <param name="workerThreads">O número máximo de threads de trabalho no pool de threads.</param>
      <param name="completionPortThreads">O número máximo de threads de E/S assíncronas no pool de threads.</param>
      <returns>
        <see langword="true" /> se a alteração for bem-sucedida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
      <summary>Define o número mínimo de threads que o pool de threads cria sob demanda à medida que novas solicitações são feitas, antes de mudar para um algoritmo a fim de gerenciar a criação e a destruição de thread.</summary>
      <param name="workerThreads">O número mínimo de threads de trabalho que o pool de threads cria sob demanda.</param>
      <param name="completionPortThreads">O número mínimo de threads de E/S assíncronos que o pool de threads cria sob demanda.</param>
      <returns>
        <see langword="true" /> se a alteração for bem-sucedida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.ThreadCount">
      <summary>Obtém o número de threads do pool de threads que existem no momento.</summary>
      <returns>O número de threads do pool de threads que existem atualmente.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
      <summary>Enfileira uma operação de E/S sobreposta para a execução.</summary>
      <param name="overlapped">A estrutura <see cref="T:System.Threading.NativeOverlapped" /> a ser colocada em fila.</param>
      <returns>
        <see langword="true" /> se a operação foi enfileirada com êxito para uma porta de conclusão de E/S; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.IThreadPoolWorkItem,System.Boolean)">
      <summary>Coloca o objeto de item de trabalho especificado na fila do pool de threads.</summary>
      <param name="callBack">O item de trabalho a ser invocado quando um thread do pool de threads seleciona o item de trabalho.</param>
      <param name="preferLocal">
        <see langword="true" /> para indicar a preferência por colocar o item de trabalho em uma fila próximo ao thread atual; <see langword="false" /> para indicar a preferência por colocar o item de trabalho na fila compartilhada do pool de threads.</param>
      <returns>
        <see langword="true" /> se o método tiver êxito; <see cref="T:System.OutOfMemoryException" /> será gerado se não for possível colocar o item de trabalho na fila.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O item de trabalho é uma <see cref="T:System.Threading.Tasks.Task" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Não foi possível colocar o item de trabalho na fila.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>Enfileira o delegado especificado no pool de threads, mas não propagar a pilha de chamadas para o thread de trabalho.</summary>
      <param name="callBack">Um <see cref="T:System.Threading.WaitCallback" /> que retrata o delegado a ser invocado quando um thread no pool de threads coleta o item de trabalho.</param>
      <param name="state">O objeto que é passado para o representante quando este recebe manutenção do pool de threads.</param>
      <returns>
        <see langword="true" /> se o método tiver êxito; <see cref="T:System.OutOfMemoryException" /> será gerado se não for possível colocar o item de trabalho na fila.</returns>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária.</exception>
      <exception cref="T:System.ApplicationException">Uma condição de memória insuficiente foi encontrada.</exception>
      <exception cref="T:System.OutOfMemoryException">Não foi possível enfileirar o item de trabalho.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary>Enfileira um método especificado por um delegado de <see cref="T:System.Action`1" /> para execução e especifica um objeto que contém os dados a serem usados pelo método. O método é executado quando um thread de pool de threads se torna disponível.</summary>
      <param name="callBack">Um delegado que representa o método a ser executado.</param>
      <param name="state">Um objeto que contém dados a serem usados pelo método.</param>
      <param name="preferLocal">
        <see langword="true" /> para indicar a preferência por colocar o item de trabalho em uma fila próximo ao thread atual; <see langword="false" /> para indicar a preferência por colocar o item de trabalho na fila compartilhada do pool de threads.</param>
      <typeparam name="TState">O tipo dos elementos de <paramref name="state" />.</typeparam>
      <returns>
        <see langword="true" /> se o método for colocado na fila com êxito; <see cref="T:System.NotSupportedException" /> será gerado se o item de trabalho não puder ser colocado na fila.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Não foi possível colocar o item de trabalho na fila.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>Registra um representante para aguardar um <see cref="T:System.Threading.WaitHandle" />, usando um inteiro com sinal de 32 bits para o tempo limite em milissegundos. Esse método não propaga a pilha de chamadas para o thread de trabalho.</summary>
      <param name="waitObject">O <see cref="T:System.Threading.WaitHandle" /> a ser registrado. Use um <see cref="T:System.Threading.WaitHandle" /> diferente do <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">O delegado a ser chamado quando o parâmetro <paramref name="waitObject" /> é sinalizado.</param>
      <param name="state">O objeto que é passado para o delegado.</param>
      <param name="millisecondsTimeOutInterval">O tempo limite em milissegundos. Se o parâmetro <paramref name="millisecondsTimeOutInterval" /> for 0 (zero), a função testará o estado do objeto e será imediatamente retornada. Se <paramref name="millisecondsTimeOutInterval" /> for -1, o intervalo de tempo limite da função nunca expirará.</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> para indicar que o thread não esperará o parâmetro <paramref name="waitObject" /> depois que o delegado for chamado; <see langword="false" /> para indicar que o temporizador será reiniciado sempre que a operação de espera for concluída até que o registro da espera seja cancelado.</param>
      <returns>O objeto <see cref="T:System.Threading.RegisteredWaitHandle" /> que pode ser usado para cancelar a operação de espera registrada.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="millisecondsTimeOutInterval" /> é menor que -1.</exception>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>Registra um delegado para esperar um <see cref="T:System.Threading.WaitHandle" />, especificando um inteiro com sinal de 64 bits para o tempo limite em milissegundos. Esse método não propaga a pilha de chamadas para o thread de trabalho.</summary>
      <param name="waitObject">O <see cref="T:System.Threading.WaitHandle" /> a ser registrado. Use um <see cref="T:System.Threading.WaitHandle" /> diferente do <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">O delegado a ser chamado quando o parâmetro <paramref name="waitObject" /> é sinalizado.</param>
      <param name="state">O objeto que é passado para o delegado.</param>
      <param name="millisecondsTimeOutInterval">O tempo limite em milissegundos. Se o parâmetro <paramref name="millisecondsTimeOutInterval" /> for 0 (zero), a função testará o estado do objeto e será imediatamente retornada. Se <paramref name="millisecondsTimeOutInterval" /> for -1, o intervalo de tempo limite da função nunca expirará.</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> para indicar que o thread não esperará o parâmetro <paramref name="waitObject" /> depois que o delegado for chamado; <see langword="false" /> para indicar que o temporizador será reiniciado sempre que a operação de espera for concluída até que o registro da espera seja cancelado.</param>
      <returns>O objeto <see cref="T:System.Threading.RegisteredWaitHandle" /> que pode ser usado para cancelar a operação de espera registrada.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="millisecondsTimeOutInterval" /> é menor que -1.</exception>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>Registra um delegado para aguardar um <see cref="T:System.Threading.WaitHandle" />, especificando um valor <see cref="T:System.TimeSpan" /> para o tempo limite. Esse método não propaga a pilha de chamadas para o thread de trabalho.</summary>
      <param name="waitObject">O <see cref="T:System.Threading.WaitHandle" /> a ser registrado. Use um <see cref="T:System.Threading.WaitHandle" /> diferente do <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">O delegado a ser chamado quando o parâmetro <paramref name="waitObject" /> é sinalizado.</param>
      <param name="state">O objeto que é passado para o delegado.</param>
      <param name="timeout">O tempo limite representado por um <see cref="T:System.TimeSpan" />. Se <paramref name="timeout" /> for 0 (zero), a função testará o estado do objeto e será retornada imediatamente. Se <paramref name="timeout" /> for -1, o intervalo de tempo limite da função nunca expirará.</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> para indicar que o thread não esperará o parâmetro <paramref name="waitObject" /> depois que o delegado for chamado; <see langword="false" /> para indicar que o temporizador será reiniciado sempre que a operação de espera for concluída até que o registro da espera seja cancelado.</param>
      <returns>O objeto <see cref="T:System.Threading.RegisteredWaitHandle" /> que pode ser usado para cancelar a operação de espera registrada.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="timeout" /> é menor que -1.</exception>
      <exception cref="T:System.NotSupportedException">O parâmetro <paramref name="timeout" /> é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>Registra um delegado para aguardar um <see cref="T:System.Threading.WaitHandle" />, especificando um inteiro sem sinal de 32 bits para o tempo limite em milissegundos. Esse método não propaga a pilha de chamadas para o thread de trabalho.</summary>
      <param name="waitObject">O <see cref="T:System.Threading.WaitHandle" /> a ser registrado. Use um <see cref="T:System.Threading.WaitHandle" /> diferente do <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">O delegado a ser chamado quando o parâmetro <paramref name="waitObject" /> é sinalizado.</param>
      <param name="state">O objeto que é passado para o delegado.</param>
      <param name="millisecondsTimeOutInterval">O tempo limite em milissegundos. Se o parâmetro <paramref name="millisecondsTimeOutInterval" /> for 0 (zero), a função testará o estado do objeto e será imediatamente retornada. Se <paramref name="millisecondsTimeOutInterval" /> for -1, o intervalo de tempo limite da função nunca expirará.</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> para indicar que o thread não esperará o parâmetro <paramref name="waitObject" /> depois que o delegado for chamado; <see langword="false" /> para indicar que o temporizador será reiniciado sempre que a operação de espera for concluída até que o registro da espera seja cancelado.</param>
      <returns>O objeto <see cref="T:System.Threading.RegisteredWaitHandle" /> que pode ser usado para cancelar a operação de espera registrada.</returns>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary>Representa um método de retorno de chamada a ser executado por um thread do pool de threads.</summary>
      <param name="state">Um objeto que contém informações a serem usadas pelo método de retorno de chamada.</param>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary>Representa um método a ser chamado quando um <see cref="T:System.Threading.WaitHandle" /> é sinalizado ou atinge o tempo limite.</summary>
      <param name="state">Um objeto que contém as informações a serem usadas pelo método de retorno de chamada sempre que ele for executado.</param>
      <param name="timedOut">
        <see langword="true" /> se o <see cref="T:System.Threading.WaitHandle" /> tiver atingido o tempo limite; <see langword="false" /> se ele tiver sido sinalizado.</param>
    </member>
  </members>
</doc>
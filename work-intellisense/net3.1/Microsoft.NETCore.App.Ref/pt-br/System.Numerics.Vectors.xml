<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Numerics.Vectors</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.Matrix3x2">
      <summary>Representa uma matriz 3 x 2.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Cria uma matriz 3x2 dos componentes especificados.</summary>
      <param name="m11">O valor a atribuir ao primeiro elemento na primeira linha.</param>
      <param name="m12">O valor a atribuir ao segundo elemento na primeira linha.</param>
      <param name="m21">O valor a atribuir ao primeiro elemento na segunda linha.</param>
      <param name="m22">O valor a atribuir ao segundo elemento na segunda linha.</param>
      <param name="m31">O valor a atribuir ao primeiro elemento na terceira linha.</param>
      <param name="m32">O valor a atribuir ao segundo elemento na terceira linha.</param>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Add(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Adiciona cada elemento em uma matriz com seu elemento correspondente em uma segunda matriz.</summary>
      <param name="value1">A primeira matriz.</param>
      <param name="value2">A segunda matriz.</param>
      <returns>A matriz que contém os valores somados de <paramref name="value1" /> e <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single)">
      <summary>Cria uma matriz de rotação usando a rotação determinada em radianos.</summary>
      <param name="radians">A quantidade de rotação, em radianos.</param>
      <returns>A matriz de rotação.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single,System.Numerics.Vector2)">
      <summary>Cria uma matriz de rotação usando a rotação especificada em radianos e um ponto central.</summary>
      <param name="radians">A quantidade de rotação, em radianos.</param>
      <param name="centerPoint">O ponto central.</param>
      <returns>A matriz de rotação.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2)">
      <summary>Cria uma matriz de colocação em escala da escala de vetor especificada.</summary>
      <param name="scales">A escala a ser usada.</param>
      <returns>A matriz de colocação em escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Cria uma matriz de colocação em escala da escala de vetor especificada com um deslocamento do ponto central especificado.</summary>
      <param name="scales">A escala a ser usada.</param>
      <param name="centerPoint">O deslocamento do centro.</param>
      <returns>A matriz de colocação em escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single)">
      <summary>Cria uma matriz de colocação em escala que dimensiona uniformemente com a escala fornecida.</summary>
      <param name="scale">A escala uniforme a usar.</param>
      <returns>A matriz de colocação em escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Numerics.Vector2)">
      <summary>Cria uma matriz de colocação em escala que dimensiona uniformemente com a escala especificada com um deslocamento do centro da especificado.</summary>
      <param name="scale">A escala uniforme a usar.</param>
      <param name="centerPoint">O deslocamento do centro.</param>
      <returns>A matriz de colocação em escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single)">
      <summary>Cria uma matriz de colocação em escala com base nos componentes X e Y especificados.</summary>
      <param name="xScale">O valor pelo qual escalar no eixo X.</param>
      <param name="yScale">O valor pelo qual escalar no eixo Y.</param>
      <returns>A matriz de colocação em escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>Cria uma matriz de colocação em escala que tem um deslocamento por um determinado ponto central.</summary>
      <param name="xScale">O valor pelo qual escalar no eixo X.</param>
      <param name="yScale">O valor pelo qual escalar no eixo Y.</param>
      <param name="centerPoint">O ponto central.</param>
      <returns>A matriz de colocação em escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single)">
      <summary>Cria uma matriz de distorção dos ângulos especificados em radianos.</summary>
      <param name="radiansX">O ângulo X, em radianos.</param>
      <param name="radiansY">O ângulo Y, em radianos.</param>
      <returns>A matriz de distorção.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>Cria uma matriz de distorção dos ângulos especificados em radianos e um ponto central.</summary>
      <param name="radiansX">O ângulo X, em radianos.</param>
      <param name="radiansY">O ângulo Y, em radianos.</param>
      <param name="centerPoint">O ponto central.</param>
      <returns>A matriz de distorção.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Numerics.Vector2)">
      <summary>Cria uma matriz de translação do vetor bidimensional especificado.</summary>
      <param name="position">A posição de translação.</param>
      <returns>A matriz de translação.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Single,System.Single)">
      <summary>Cria uma matriz de translação dos componentes X e Y especificados.</summary>
      <param name="xPosition">A posição X.</param>
      <param name="yPosition">A posição Y.</param>
      <returns>A matriz de translação.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Numerics.Matrix3x2)">
      <summary>Retorna um valor que indica se esta instância e outra matriz 3x2 são iguais.</summary>
      <param name="other">A outra matriz.</param>
      <returns>
        <see langword="true" /> se as duas matrizes forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa instância e um objeto especificado são iguais.</summary>
      <param name="obj">O objeto a ser comparado com a instância atual.</param>
      <returns>
        <see langword="true" /> se a instância atual e <paramref name="obj" /> forem iguais; caso contrário, <see langword="false" />. Se <paramref name="obj" /> for <see langword="null" />, o método retornará <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetDeterminant">
      <summary>Calcula o determinante para essa matriz.</summary>
      <returns>O determinante.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>O código hash.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Identity">
      <summary>Obtém a matriz de identidade multiplicativa.</summary>
      <returns>A matriz de identificação multiplicativa.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Invert(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2@)">
      <summary>Inverte a matriz especificada. O valor retornado indica se a operação foi bem-sucedida.</summary>
      <param name="matrix">A matriz a inverter.</param>
      <param name="result">Quando este método retornar, ele conterá a matriz invertida se a operação tiver sido bem-sucedida.</param>
      <returns>
        <see langword="true" /> se <paramref name="matrix" /> tiver sido convertido com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.IsIdentity">
      <summary>Indica se a matriz atual é a matriz de identidade.</summary>
      <returns>
        <see langword="true" /> se a matriz atual for a matriz de identidade; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Lerp(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2,System.Single)">
      <summary>Executa uma interpolação linear de uma matriz para uma segunda matriz com base em um valor que especifica a importância da segunda matriz.</summary>
      <param name="matrix1">A primeira matriz.</param>
      <param name="matrix2">A segunda matriz.</param>
      <param name="amount">A importância relativa da <paramref name="matrix2" />.</param>
      <returns>A matriz interpolada.</returns>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M11">
      <summary>O primeiro elemento da primeira linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M12">
      <summary>O segundo elemento da primeira linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M21">
      <summary>O primeiro elemento da segunda linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M22">
      <summary>O segundo elemento da segunda linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M31">
      <summary>O primeiro elemento da terceira linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M32">
      <summary>O segundo elemento da terceira linha.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Retorna a matriz que resulta da multiplicação de duas matrizes juntas.</summary>
      <param name="value1">A primeira matriz.</param>
      <param name="value2">A segunda matriz.</param>
      <returns>A matriz do produto.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>Retorna a matriz que resulta da colocação em escala de todos os elementos de uma matriz especificada por um fator escalar.</summary>
      <param name="value1">A matriz a escalar.</param>
      <param name="value2">O valor de colocação em escala a ser usado.</param>
      <returns>A matriz escalada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Negate(System.Numerics.Matrix3x2)">
      <summary>Nega a matriz especificada multiplicando todos os seus valores por -1.</summary>
      <param name="value">A matriz a negar.</param>
      <returns>A matriz negada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Addition(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Adiciona cada elemento em uma matriz com seu elemento correspondente em uma segunda matriz.</summary>
      <param name="value1">A primeira matriz.</param>
      <param name="value2">A segunda matriz.</param>
      <returns>A matriz que contém os valores somados.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Equality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Retorna um valor que indica se as matrizes especificadas são iguais.</summary>
      <param name="value1">A primeira matriz a comparar.</param>
      <param name="value2">A segunda matriz a ser comparada.</param>
      <returns>
        <see langword="true" /> se <paramref name="value1" /> e <paramref name="value2" /> forem iguais, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Inequality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Retorna um valor que indica se as matrizes especificadas não são iguais.</summary>
      <param name="value1">A primeira matriz a comparar.</param>
      <param name="value2">A segunda matriz a ser comparada.</param>
      <returns>
        <see langword="true" /> se <paramref name="value1" /> e <paramref name="value2" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Retorna a matriz que resulta da multiplicação de duas matrizes juntas.</summary>
      <param name="value1">A primeira matriz.</param>
      <param name="value2">A segunda matriz.</param>
      <returns>A matriz do produto.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>Retorna a matriz que resulta da colocação em escala de todos os elementos de uma matriz especificada por um fator escalar.</summary>
      <param name="value1">A matriz a escalar.</param>
      <param name="value2">O valor de colocação em escala a ser usado.</param>
      <returns>A matriz escalada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Subtraction(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Subtrai cada elemento em uma segunda matriz do seu elemento correspondente em uma primeira matriz.</summary>
      <param name="value1">A primeira matriz.</param>
      <param name="value2">A segunda matriz.</param>
      <returns>A matriz que contém os valores resultantes da subtração de cada elemento em <paramref name="value2" /> do elemento correspondente em <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_UnaryNegation(System.Numerics.Matrix3x2)">
      <summary>Nega a matriz especificada multiplicando todos os seus valores por -1.</summary>
      <param name="value">A matriz a negar.</param>
      <returns>A matriz negada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Subtract(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Subtrai cada elemento em uma segunda matriz do seu elemento correspondente em uma primeira matriz.</summary>
      <param name="value1">A primeira matriz.</param>
      <param name="value2">A segunda matriz.</param>
      <returns>A matriz que contém os valores resultantes da subtração de cada elemento em <paramref name="value2" /> do elemento correspondente em <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.ToString">
      <summary>Retorna uma cadeia de caracteres que representa essa matriz.</summary>
      <returns>A representação de cadeia de caracteres dessa matriz.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Translation">
      <summary>Obtém ou define o componente de translação dessa matriz.</summary>
      <returns>O componente de tradução da instância atual.</returns>
    </member>
    <member name="T:System.Numerics.Matrix4x4">
      <summary>Representa uma matriz 4 x 4.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Numerics.Matrix3x2)">
      <summary>Cria um objeto <see cref="T:System.Numerics.Matrix4x4" /> de um objeto <see cref="T:System.Numerics.Matrix3x2" />.</summary>
      <param name="value">Uma matriz 3x2.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Cria uma matriz 4x4 dos componentes especificados.</summary>
      <param name="m11">O valor a atribuir ao primeiro elemento na primeira linha.</param>
      <param name="m12">O valor a atribuir ao segundo elemento na primeira linha.</param>
      <param name="m33">O valor a ser atribuído ao terceiro elemento na terceira linha.</param>
      <param name="m34">O valor a ser atribuído ao quarto elemento na terceira linha.</param>
      <param name="m41">O valor a ser atribuído ao primeiro elemento na quarta linha.</param>
      <param name="m42">O valor a ser atribuído ao segundo elemento na quarta linha.</param>
      <param name="m43">O valor a ser atribuído ao terceiro elemento na quarta linha.</param>
      <param name="m44">O valor a ser atribuído ao quarto elemento na quarta linha.</param>
      <param name="m13">O valor a ser atribuído ao terceiro elemento na primeira linha.</param>
      <param name="m14">O valor a ser atribuído ao quarto elemento da primeira linha.</param>
      <param name="m21">O valor a atribuir ao primeiro elemento na segunda linha.</param>
      <param name="m22">O valor a atribuir ao segundo elemento na segunda linha.</param>
      <param name="m23">O valor a ser atribuído ao terceiro elemento na segunda linha.</param>
      <param name="m24">O valor a ser atribuído ao terceiro elemento na segunda linha.</param>
      <param name="m31">O valor a atribuir ao primeiro elemento na terceira linha.</param>
      <param name="m32">O valor a atribuir ao segundo elemento na terceira linha.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Add(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Adiciona cada elemento em uma matriz com seu elemento correspondente em uma segunda matriz.</summary>
      <param name="value1">A primeira matriz.</param>
      <param name="value2">A segunda matriz.</param>
      <returns>A matriz que contém os valores somados de <paramref name="value1" /> e <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Cria uma mensagem de instalação esférica que gira em torno da posição de um objeto especificado.</summary>
      <param name="objectPosition">A posição do objeto em torno do qual o mural girará.</param>
      <param name="cameraPosition">A posição da câmera.</param>
      <param name="cameraUpVector">O vetor de ascensão da câmera.</param>
      <param name="cameraForwardVector">O vetor de encaminhamento da câmera.</param>
      <returns>O mural criado.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateConstrainedBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Cria um mural cilíndrico que gira em torno de um eixo especificado.</summary>
      <param name="objectPosition">A posição do objeto em torno do qual o mural girará.</param>
      <param name="cameraPosition">A posição da câmera.</param>
      <param name="rotateAxis">O eixo em torno do qual girar o mural.</param>
      <param name="cameraForwardVector">O vetor de encaminhamento da câmera.</param>
      <param name="objectForwardVector">O vetor de avanço do objeto.</param>
      <returns>A matriz do mural.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>Cria uma matriz que gira em torno de um vetor arbitrário.</summary>
      <param name="axis">O eixo em torno do qual girar.</param>
      <param name="angle">O ângulo de rotação ao redor do <paramref name="axis" />, em radianos.</param>
      <returns>A matriz de rotação.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromQuaternion(System.Numerics.Quaternion)">
      <summary>Cria uma matriz de rotação com base no valor de rotação do Quaternion especificado.</summary>
      <param name="quaternion">O Quatérnio de origem.</param>
      <returns>A matriz de rotação.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Cria uma matriz de rotação para a rotação sobre o eixo y, a rotação sobre o eixo x e a rolagem especificadas.</summary>
      <param name="yaw">O ângulo de rotação, em radianos, ao redor do eixo Y.</param>
      <param name="pitch">O ângulo de rotação, em radianos, ao redor do eixo X.</param>
      <param name="roll">O ângulo de rotação, em radianos, ao redor do eixo Z.</param>
      <returns>A matriz de rotação.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateLookAt(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Cria uma matriz de exibição.</summary>
      <param name="cameraPosition">A posição da câmera.</param>
      <param name="cameraTarget">O destino para o qual a câmera está apontando.</param>
      <param name="cameraUpVector">A direção é "para cima" do ponto de vista da câmera.</param>
      <returns>A matriz de exibição.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
      <summary>Cria uma matriz de perspectiva ortográfica com base nas dimensões de volume de exibição determinadas.</summary>
      <param name="width">A largura do volume de exibição.</param>
      <param name="height">A altura do volume de exibição.</param>
      <param name="zNearPlane">O valor Z mínimo do volume de exibição.</param>
      <param name="zFarPlane">O valor Z máximo do volume de exibição.</param>
      <returns>A matriz de projeção ortográfica.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Cria uma matriz a projeção ortográfica personalizada.</summary>
      <param name="left">O valor X mínimo do volume de exibição.</param>
      <param name="right">O valor X máximo do volume de exibição.</param>
      <param name="bottom">O valor Y mínimo do volume de exibição.</param>
      <param name="top">O valor Y máximo do volume de exibição.</param>
      <param name="zNearPlane">O valor Z mínimo do volume de exibição.</param>
      <param name="zFarPlane">O valor Z máximo do volume de exibição.</param>
      <returns>A matriz de projeção ortográfica.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
      <summary>Cria uma matriz de projeção de perspectiva das dimensões de volume de exibição fornecidas.</summary>
      <param name="width">A largura do volume de exibição no plano de exibição próximo.</param>
      <param name="height">A altura do volume de exibição no plano de exibição próximo.</param>
      <param name="nearPlaneDistance">A distância ao plano de exibição próximo.</param>
      <param name="farPlaneDistance">A distância ao plano de exibição distante.</param>
      <returns>A matriz de projeção de perspectiva.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" /> é menor que ou igual a zero.
-ou-
<paramref name="farPlaneDistance" /> é menor que ou igual a zero.
-ou-
<paramref name="nearPlaneDistance" /> é maior ou igual a <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>Cria uma matriz de projeção de perspectiva com base em um campo de visão, taxa de proporção e distâncias do plano de exibição próximo e distante.</summary>
      <param name="fieldOfView">O campo de visão na direção y, em radianos.</param>
      <param name="aspectRatio">A taxa de proporção, definida como a largura do espaço de exibição dividida pela altura.</param>
      <param name="nearPlaneDistance">A distância ao plano de exibição próximo.</param>
      <param name="farPlaneDistance">A distância ao plano de exibição distante.</param>
      <returns>A matriz de projeção de perspectiva.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfView" /> é menor que ou igual a zero.
-ou-
<paramref name="fieldOfView" /> é maior ou igual a <see cref="F:System.Math.PI" />.
<paramref name="nearPlaneDistance" /> é menor que ou igual a zero.
-ou-
<paramref name="farPlaneDistance" /> é menor que ou igual a zero.
-ou-
<paramref name="nearPlaneDistance" /> é maior ou igual a <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Cria uma matriz de projeção de perspectiva personalizada.</summary>
      <param name="left">O valor x mínimo do volume de exibição no plano de exibição próximo.</param>
      <param name="right">O valor x máximo do volume de exibição no plano de exibição próximo.</param>
      <param name="bottom">O valor y mínimo do volume de exibição no plano de exibição próximo.</param>
      <param name="top">O valor y máximo do volume de exibição no plano de exibição próximo.</param>
      <param name="nearPlaneDistance">A distância ao plano de exibição próximo.</param>
      <param name="farPlaneDistance">A distância ao plano de exibição distante.</param>
      <returns>A matriz de projeção de perspectiva.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" /> é menor que ou igual a zero.
-ou-
<paramref name="farPlaneDistance" /> é menor que ou igual a zero.
-ou-
<paramref name="nearPlaneDistance" /> é maior ou igual a <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateReflection(System.Numerics.Plane)">
      <summary>Cria uma matriz que reflete o sistema de coordenadas sobre um plano especificado.</summary>
      <param name="value">O plano sobre o qual criar uma reflexão.</param>
      <returns>Uma nova matriz que expressa a reflexão.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single)">
      <summary>Cria uma matriz de pontos rotatórios em torno do eixo X.</summary>
      <param name="radians">A quantidade, em radianos, pela qual girar em torno do eixo X.</param>
      <returns>A matriz de rotação.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single,System.Numerics.Vector3)">
      <summary>Cria uma matriz de pontos de rotação ao redor do eixo X de um ponto central.</summary>
      <param name="radians">A quantidade, em radianos, pela qual girar em torno do eixo X.</param>
      <param name="centerPoint">O ponto central.</param>
      <returns>A matriz de rotação.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single)">
      <summary>Cria uma matriz de pontos rotatórios em torno do eixo Y.</summary>
      <param name="radians">A quantidade, em radianos, pela qual girar em torno do eixo Y.</param>
      <returns>A matriz de rotação.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single,System.Numerics.Vector3)">
      <summary>A quantidade, em radianos, pela qual girar em torno do eixo Y de um ponto central.</summary>
      <param name="radians">A quantidade, em radianos, pela qual girar em torno do eixo Y.</param>
      <param name="centerPoint">O ponto central.</param>
      <returns>A matriz de rotação.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single)">
      <summary>Cria uma matriz de pontos rotatórios em torno do eixo Z.</summary>
      <param name="radians">A quantidade, em radianos, pela qual girar em torno do eixo Z.</param>
      <returns>A matriz de rotação.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single,System.Numerics.Vector3)">
      <summary>Cria uma matriz de pontos de rotação ao redor do eixo Z de um ponto central.</summary>
      <param name="radians">A quantidade, em radianos, pela qual girar em torno do eixo Z.</param>
      <param name="centerPoint">O ponto central.</param>
      <returns>A matriz de rotação.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3)">
      <summary>Cria uma matriz de colocação em escala da escala de vetor especificada.</summary>
      <param name="scales">A escala a ser usada.</param>
      <returns>A matriz de colocação em escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Cria uma matriz de colocação em escala com um ponto central.</summary>
      <param name="scales">O vetor que contém a quantidade a escalar em cada eixo.</param>
      <param name="centerPoint">O ponto central.</param>
      <returns>A matriz de colocação em escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single)">
      <summary>Cria uma matriz de colocação em escala uniforme que coloca em escala cada eixo igualmente.</summary>
      <param name="scale">O fator de colocação em escala uniforme.</param>
      <returns>A matriz de colocação em escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Numerics.Vector3)">
      <summary>Cria uma matriz de colocação em escala uniforme que coloca em escala cada eixo igualmente com um ponto central.</summary>
      <param name="scale">O fator de colocação em escala uniforme.</param>
      <param name="centerPoint">O ponto central.</param>
      <returns>A matriz de colocação em escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single)">
      <summary>Cria uma matriz de colocação em escala com base nos componentes X, Y e Z especificados.</summary>
      <param name="xScale">O valor pelo qual escalar no eixo X.</param>
      <param name="yScale">O valor pelo qual escalar no eixo Y.</param>
      <param name="zScale">O valor para colocar em escala no eixo Z.</param>
      <returns>A matriz de colocação em escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,System.Numerics.Vector3)">
      <summary>Cria uma matriz de colocação em escala que tem um deslocamento por um determinado ponto central.</summary>
      <param name="xScale">O valor pelo qual escalar no eixo X.</param>
      <param name="yScale">O valor pelo qual escalar no eixo Y.</param>
      <param name="zScale">O valor para colocar em escala no eixo Z.</param>
      <param name="centerPoint">O ponto central.</param>
      <returns>A matriz de colocação em escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateShadow(System.Numerics.Vector3,System.Numerics.Plane)">
      <summary>Cria uma matriz que nivela a geometria em um plano especificado como se projetando uma sombra de uma fonte de luz especificada.</summary>
      <param name="lightDirection">A direção da qual a luz que projeta a sombra está vindo.</param>
      <param name="plane">O plano no qual a nova matriz deve nivelar a geometria para projetar uma sombra.</param>
      <returns>Uma nova matriz que pode ser usada para nivelar a geometria no plano especificado da direção especificada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Numerics.Vector3)">
      <summary>Cria uma matriz de translação do vetor tridimensional especificado.</summary>
      <param name="position">A quantidade de translação em cada eixo.</param>
      <returns>A matriz de translação.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Single,System.Single,System.Single)">
      <summary>Cria uma matriz de translação dos componentes X, Y e Z especificados.</summary>
      <param name="xPosition">O valor para fazer a translação no eixo X.</param>
      <param name="yPosition">O valor para fazer a translação no eixo Y.</param>
      <param name="zPosition">O valor para fazer a translação no eixo Z.</param>
      <returns>A matriz de translação.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateWorld(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Cria uma matriz mundial com os parâmetros especificados.</summary>
      <param name="position">A posição do objeto.</param>
      <param name="forward">A direção de avanço do objeto.</param>
      <param name="up">A direção para cima do objeto. Seu valor costuma ser <c>[0, 1, 0]</c>.</param>
      <returns>A matriz mundial.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Decompose(System.Numerics.Matrix4x4,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Numerics.Vector3@)">
      <summary>Tenta extrair os componentes de escala, translação e rotação da matriz de escala, rotação ou translação determinada. O valor retornado indica se a operação foi bem-sucedida.</summary>
      <param name="matrix">A matriz de origem.</param>
      <param name="scale">Quando este método retorna, conterá o componente de colocação em escala da matriz de transformação se a operação for bem-sucedida.</param>
      <param name="rotation">Quando este método retorna, conterá o componente de rotação da matriz de transformação se a operação for bem-sucedida.</param>
      <param name="translation">Quando o método retorna, conterá o componente de translação da matriz de transformação se a operação for bem-sucedida.</param>
      <returns>
        <see langword="true" /> se <paramref name="matrix" /> foi decomposto com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Numerics.Matrix4x4)">
      <summary>Retorna um valor que indica se esta instância e outra matriz 4x4 são iguais.</summary>
      <param name="other">A outra matriz.</param>
      <returns>
        <see langword="true" /> se as duas matrizes forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa instância e um objeto especificado são iguais.</summary>
      <param name="obj">O objeto a ser comparado com a instância atual.</param>
      <returns>
        <see langword="true" /> se a instância atual e <paramref name="obj" /> forem iguais; caso contrário, <see langword="false" />. Se <paramref name="obj" /> for <see langword="null" />, o método retornará <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetDeterminant">
      <summary>Calcula o determinante da matriz 4x4 atual.</summary>
      <returns>O determinante.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>O código hash.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Identity">
      <summary>Obtém a matriz de identidade multiplicativa.</summary>
      <returns>Obtém a matriz de identidade multiplicativa.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Invert(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4@)">
      <summary>Inverte a matriz especificada. O valor retornado indica se a operação foi bem-sucedida.</summary>
      <param name="matrix">A matriz a inverter.</param>
      <param name="result">Quando este método retornar, ele conterá a matriz invertida se a operação tiver sido bem-sucedida.</param>
      <returns>
        <see langword="true" /> se <paramref name="matrix" /> tiver sido convertido com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.IsIdentity">
      <summary>Indica se a matriz atual é a matriz de identidade.</summary>
      <returns>
        <see langword="true" /> se a matriz atual for a matriz de identidade; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Lerp(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Single)">
      <summary>Executa uma interpolação linear de uma matriz para uma segunda matriz com base em um valor que especifica a importância da segunda matriz.</summary>
      <param name="matrix1">A primeira matriz.</param>
      <param name="matrix2">A segunda matriz.</param>
      <param name="amount">A importância relativa da <paramref name="matrix2" />.</param>
      <returns>A matriz interpolada.</returns>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M11">
      <summary>O primeiro elemento da primeira linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M12">
      <summary>O segundo elemento da primeira linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M13">
      <summary>O terceiro elemento da primeira linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M14">
      <summary>O quarto elemento da primeira linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M21">
      <summary>O primeiro elemento da segunda linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M22">
      <summary>O segundo elemento da segunda linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M23">
      <summary>O terceiro elemento da segunda linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M24">
      <summary>O quarto elemento da segunda linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M31">
      <summary>O primeiro elemento da terceira linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M32">
      <summary>O segundo elemento da terceira linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M33">
      <summary>O terceiro elemento da terceira linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M34">
      <summary>O quarto elemento da terceira linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M41">
      <summary>O primeiro elemento da quarta linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M42">
      <summary>O segundo elemento da quarta linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M43">
      <summary>O terceiro elemento da quarta linha.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M44">
      <summary>O quarto elemento da quarta linha.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Retorna a matriz que resulta da multiplicação de duas matrizes juntas.</summary>
      <param name="value1">A primeira matriz.</param>
      <param name="value2">A segunda matriz.</param>
      <returns>A matriz do produto.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>Retorna a matriz que resulta da colocação em escala de todos os elementos de uma matriz especificada por um fator escalar.</summary>
      <param name="value1">A matriz a escalar.</param>
      <param name="value2">O valor de colocação em escala a ser usado.</param>
      <returns>A matriz escalada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Negate(System.Numerics.Matrix4x4)">
      <summary>Nega a matriz especificada multiplicando todos os seus valores por -1.</summary>
      <param name="value">A matriz a negar.</param>
      <returns>A matriz negada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Addition(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Adiciona cada elemento em uma matriz com seu elemento correspondente em uma segunda matriz.</summary>
      <param name="value1">A primeira matriz.</param>
      <param name="value2">A segunda matriz.</param>
      <returns>A matriz que contém os valores somados.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Equality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Retorna um valor que indica se as matrizes especificadas são iguais.</summary>
      <param name="value1">A primeira matriz a comparar.</param>
      <param name="value2">A segunda matriz a tratar</param>
      <returns>
        <see langword="true" /> se <paramref name="value1" /> e <paramref name="value2" /> forem iguais, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Inequality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Retorna um valor que indica se as matrizes especificadas não são iguais.</summary>
      <param name="value1">A primeira matriz a comparar.</param>
      <param name="value2">A segunda matriz a ser comparada.</param>
      <returns>
        <see langword="true" /> se <paramref name="value1" /> e <paramref name="value2" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Retorna a matriz que resulta da multiplicação de duas matrizes juntas.</summary>
      <param name="value1">A primeira matriz.</param>
      <param name="value2">A segunda matriz.</param>
      <returns>A matriz do produto.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>Retorna a matriz que resulta da colocação em escala de todos os elementos de uma matriz especificada por um fator escalar.</summary>
      <param name="value1">A matriz a escalar.</param>
      <param name="value2">O valor de colocação em escala a ser usado.</param>
      <returns>A matriz escalada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Subtraction(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Subtrai cada elemento em uma segunda matriz do seu elemento correspondente em uma primeira matriz.</summary>
      <param name="value1">A primeira matriz.</param>
      <param name="value2">A segunda matriz.</param>
      <returns>A matriz que contém os valores resultantes da subtração de cada elemento em <paramref name="value2" /> do elemento correspondente em <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_UnaryNegation(System.Numerics.Matrix4x4)">
      <summary>Nega a matriz especificada multiplicando todos os seus valores por -1.</summary>
      <param name="value">A matriz a negar.</param>
      <returns>A matriz negada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Subtract(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Subtrai cada elemento em uma segunda matriz do seu elemento correspondente em uma primeira matriz.</summary>
      <param name="value1">A primeira matriz.</param>
      <param name="value2">A segunda matriz.</param>
      <returns>A matriz que contém os valores resultantes da subtração de cada elemento em <paramref name="value2" /> do elemento correspondente em <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.ToString">
      <summary>Retorna uma cadeia de caracteres que representa essa matriz.</summary>
      <returns>A representação de cadeia de caracteres dessa matriz.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transform(System.Numerics.Matrix4x4,System.Numerics.Quaternion)">
      <summary>Transforma a matriz especificada aplicando a rotação Quaternion especificada.</summary>
      <param name="value">A matriz a transformar.</param>
      <param name="rotation">A rotação a aplicar.</param>
      <returns>A matriz transformada.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Translation">
      <summary>Obtém ou define o componente de translação dessa matriz.</summary>
      <returns>O componente de tradução da instância atual.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transpose(System.Numerics.Matrix4x4)">
      <summary>Transpõe as linhas e colunas de uma matriz.</summary>
      <param name="matrix">A matriz para transpor.</param>
      <returns>A matriz transposta.</returns>
    </member>
    <member name="T:System.Numerics.Plane">
      <summary>Representa um plano no espaço tridimensional.</summary>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Cria um objeto <see cref="T:System.Numerics.Plane" /> de um normal especificado e a distância ao longo de normal da origem.</summary>
      <param name="normal">O vetor normal do plano.</param>
      <param name="d">A distância do plano da origem ao longo dos seus vetores normais.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector4)">
      <summary>Cria um objeto <see cref="T:System.Numerics.Plane" /> usando um vetor de quatro dimensões especificado.</summary>
      <param name="value">Um vetor cujos três primeiros elementos descrevem o vetor normal e cujo <see cref="F:System.Numerics.Vector4.W" /> define a distância ao longo dessa normal da origem.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Cria um objeto <see cref="T:System.Numerics.Plane" /> dos componentes X, Y e Z da sua normal e sua distância da origem naquela normal.</summary>
      <param name="x">O componente X da normal.</param>
      <param name="y">O componente Y da normal.</param>
      <param name="z">O componente Z da normal.</param>
      <param name="d">A distância do plano ao longo da sua normal da origem.</param>
    </member>
    <member name="M:System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Cria um objeto <see cref="T:System.Numerics.Plane" /> que contém três pontos especificados.</summary>
      <param name="point1">O primeiro ponto que define o plano.</param>
      <param name="point2">O segundo ponto que define o plano.</param>
      <param name="point3">O terceiro ponto que define o plano.</param>
      <returns>O plano que contém os três pontos.</returns>
    </member>
    <member name="F:System.Numerics.Plane.D">
      <summary>A distância do plano ao longo da sua normal da origem.</summary>
    </member>
    <member name="M:System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)">
      <summary>Calcula o produto de ponto de um plano e um vetor de quatro dimensões.</summary>
      <param name="plane">O plano.</param>
      <param name="value">O vetor de quatro dimensões.</param>
      <returns>O produto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>Retorna o produto de ponto de um vetor tridimensional especificado e o vetor normal desse plano mais o valor de distância (<see cref="F:System.Numerics.Plane.D" />) do plano.</summary>
      <param name="plane">O plano.</param>
      <param name="value">O vetor de três dimensões.</param>
      <returns>O produto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>Retorna o produto de ponto um vetor tridimensional especificado e o vetor <see cref="F:System.Numerics.Plane.Normal" /> desse plano.</summary>
      <param name="plane">O plano.</param>
      <param name="value">O vetor tridimensional.</param>
      <returns>O produto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Numerics.Plane)">
      <summary>Retorna um valor que indica se esta instância e outro objeto de plano são iguais.</summary>
      <param name="other">O outro plano.</param>
      <returns>
        <see langword="true" /> se os dois planos forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa instância e um objeto especificado são iguais.</summary>
      <param name="obj">O objeto a ser comparado com a instância atual.</param>
      <returns>
        <see langword="true" /> se a instância atual e <paramref name="obj" /> forem iguais; caso contrário, <see langword="false" />. Se <paramref name="obj" /> for <see langword="null" />, o método retornará <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>O código hash.</returns>
    </member>
    <member name="F:System.Numerics.Plane.Normal">
      <summary>O vetor normal do plano.</summary>
    </member>
    <member name="M:System.Numerics.Plane.Normalize(System.Numerics.Plane)">
      <summary>Cria um novo objeto <see cref="T:System.Numerics.Plane" /> cujo vetor normal é o vetor normal do plano de origem normalizado.</summary>
      <param name="value">O plano de origem.</param>
      <returns>O plano normalizado.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>Retorna um valor que indica se dois planos são iguais.</summary>
      <param name="value1">O primeiro plano a comparar.</param>
      <param name="value2">Segundo plano a comparar.</param>
      <returns>
        <see langword="true" /> se <paramref name="value1" /> e <paramref name="value2" /> forem iguais, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>Retorna um valor que indica se dois planos não são iguais.</summary>
      <param name="value1">O primeiro plano a comparar.</param>
      <param name="value2">Segundo plano a comparar.</param>
      <returns>
        <see langword="true" /> se <paramref name="value1" /> e <paramref name="value2" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.ToString">
      <summary>Retorna a representação de cadeia de caracteres deste objeto de plano.</summary>
      <returns>Uma cadeia de caracteres que representa este objeto <see cref="T:System.Numerics.Plane" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)">
      <summary>Transforma um plano normalizado por uma matriz 4x4.</summary>
      <param name="plane">O plano normalizado a transformar.</param>
      <param name="matrix">A matriz de transformação a aplicar ao <paramref name="plane" />.</param>
      <returns>O plano transformado.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)">
      <summary>Transforma um plano normalizado por uma rotação Quaternion.</summary>
      <param name="plane">O plano normalizado a transformar.</param>
      <param name="rotation">A rotação Quaternion a aplicar ao plano.</param>
      <returns>Um novo plano que resulta da aplicação da rotação Quaternion.</returns>
    </member>
    <member name="T:System.Numerics.Quaternion">
      <summary>Representa um vetor que é usado para codificar rotações físicas tridimensionais.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Cria um quatérnio com base nas partes de vetor e de rotação especificadas.</summary>
      <param name="vectorPart">A parte de vetor do quatérnio.</param>
      <param name="scalarPart">A parte de rotação do quatérnio.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Constrói um quatérnio com base nos componentes especificados.</summary>
      <param name="x">O valor a ser atribuído ao componente X do quatérnio.</param>
      <param name="y">O valor a ser atribuído ao componente Y do quatérnio.</param>
      <param name="z">O valor a ser atribuído ao componente Z do quatérnio.</param>
      <param name="w">O valor a ser atribuído ao componente W do quatérnio.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Adiciona cada elemento em um quatérnio com seu elemento correspondente em um segundo quatérnio.</summary>
      <param name="value1">O primeiro quatérnio.</param>
      <param name="value2">O segundo quatérnio.</param>
      <returns>O quatérnio que contém os valores somados de <paramref name="value1" /> e <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Concatena dois quatérnios.</summary>
      <param name="value1">A primeira rotação do quatérnio na série.</param>
      <param name="value2">A segunda rotação do quatérnio na série.</param>
      <returns>Um novo quatérnio que representa a concatenação da rotação <paramref name="value1" /> seguido da rotação <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)">
      <summary>Retorna o conjugado do quatérnio especificado.</summary>
      <param name="value">O quatérnio.</param>
      <returns>Um novo quatérnio que é o conjugado de <see langword="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>Cria um quatérnion de uma unidade de vetor e um ângulo de rotação ao redor do vetor.</summary>
      <param name="axis">O vetor de unidade em torno do qual girar.</param>
      <param name="angle">O ângulo, em radianos, a ser girado em torno do vetor.</param>
      <returns>O quatérnio recém-criado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)">
      <summary>Cria um quatérnio com base na matriz de rotação especificada.</summary>
      <param name="matrix">A matriz de rotação.</param>
      <returns>O quatérnio recém-criado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Cria um novo quatérnio com base no desvio, inclinação e rolagem fornecidos.</summary>
      <param name="yaw">O ângulo de desvio, em radianos, em torno do eixo Y.</param>
      <param name="pitch">O ângulo de inclinação, em radianos, em torno do eixo X.</param>
      <param name="roll">O ângulo de rolagem, em radianos, em torno do eixo Z.</param>
      <returns>O quatérnio resultante.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Divide um quatérnio por um segundo quatérnio.</summary>
      <param name="value1">O dividendo.</param>
      <param name="value2">O divisor.</param>
      <returns>O quatérnio resultante da divisão de <paramref name="value1" /> por <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Calcula o produto escalar de dois quatérnios.</summary>
      <param name="quaternion1">O primeiro quatérnio.</param>
      <param name="quaternion2">O segundo quatérnio.</param>
      <returns>O produto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)">
      <summary>Retorna um valor que indica se a instância e outro quatérnio são iguais.</summary>
      <param name="other">O outro quatérnio.</param>
      <returns>
        <see langword="true" /> se dois quatérnios forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa instância e um objeto especificado são iguais.</summary>
      <param name="obj">O objeto a ser comparado com a instância atual.</param>
      <returns>
        <see langword="true" /> se a instância atual e <paramref name="obj" /> forem iguais; caso contrário, <see langword="false" />. Se <paramref name="obj" /> for <see langword="null" />, o método retornará <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>O código hash.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.Identity">
      <summary>Obtém um quatérnio que não representa nenhuma rotação.</summary>
      <returns>Um Quaternion cujos valores são <c>(0, 0, 0, 1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)">
      <summary>Retorna o inverso de um quatérnio.</summary>
      <param name="value">O quatérnio.</param>
      <returns>O quatérnio invertido.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.IsIdentity">
      <summary>Obtém um valor que indica se a instância atual é o quatérnio de identidade.</summary>
      <returns>
        <see langword="true" /> se a instância atual é a identidade Quaternion; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Length">
      <summary>Calcula o comprimento do quatérnio.</summary>
      <returns>O comprimento calculado do quatérnio.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.LengthSquared">
      <summary>Calcula o comprimento ao quadrado do quatérnio.</summary>
      <returns>O comprimento ao quadrado do quatérnio.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>Executa uma interpolação linear entre dois quatérnios com base em um valor que especifica a importância do segundo quatérnio.</summary>
      <param name="quaternion1">O primeiro quatérnio.</param>
      <param name="quaternion2">O segundo quatérnio.</param>
      <param name="amount">O peso relativo de <paramref name="quaternion2" /> na interpolação.</param>
      <returns>O quatérnio interpolado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Retorna o quatérnio resultante da multiplicação de dois quatérnios juntos.</summary>
      <param name="value1">O primeiro quatérnio.</param>
      <param name="value2">O segundo quatérnio.</param>
      <returns>O quatérnio do produto.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>Retorna o quatérnio resultante da colocação em escala de todos os componentes de um quatérnio especificado por um fator escalar.</summary>
      <param name="value1">O quatérnio de origem.</param>
      <param name="value2">O valor escalar.</param>
      <returns>O quatérnio dimensionado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)">
      <summary>Inverte o sinal de cada componente do quatérnio.</summary>
      <param name="value">O quatérnio a ser negado.</param>
      <returns>O quatérnio negado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)">
      <summary>Divide cada componente de um <see cref="T:System.Numerics.Quaternion" /> especificado por seu comprimento.</summary>
      <param name="value">O quatérnio a ser normalizado.</param>
      <returns>O quatérnio normalizado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Adiciona cada elemento em um quatérnio com seu elemento correspondente em um segundo quatérnio.</summary>
      <param name="value1">O primeiro quatérnio.</param>
      <param name="value2">O segundo quatérnio.</param>
      <returns>O quatérnio que contém os valores somados de <paramref name="value1" /> e <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Divide um quatérnio por um segundo quatérnio.</summary>
      <param name="value1">O dividendo.</param>
      <param name="value2">O divisor.</param>
      <returns>O quatérnio resultante da divisão de <paramref name="value1" /> por <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Retorna um valor que indica se dois quatérnios são iguais.</summary>
      <param name="value1">O primeiro quatérnio a ser comparado.</param>
      <param name="value2">O segundo quatérnio a ser comparado.</param>
      <returns>
        <see langword="true" /> se dois quatérnios forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Retorna um valor que indica se dois quatérnios não são iguais.</summary>
      <param name="value1">O primeiro quatérnio a ser comparado.</param>
      <param name="value2">O segundo quatérnio a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="value1" /> e <paramref name="value2" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Retorna o quatérnio resultante da multiplicação de dois quatérnios juntos.</summary>
      <param name="value1">O primeiro quatérnio.</param>
      <param name="value2">O segundo quatérnio.</param>
      <returns>O quatérnio do produto.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>Retorna o quatérnio resultante da colocação em escala de todos os componentes de um quatérnio especificado por um fator escalar.</summary>
      <param name="value1">O quatérnio de origem.</param>
      <param name="value2">O valor escalar.</param>
      <returns>O quatérnio dimensionado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Subtrai cada elemento em um segundo quatérnio de seu elemento correspondente em um primeiro quatérnio.</summary>
      <param name="value1">O primeiro quatérnio.</param>
      <param name="value2">O segundo quatérnio.</param>
      <returns>O quatérnio que contém os valores resultantes da subtração de cada elemento no <paramref name="value2" /> do elemento correspondente no <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)">
      <summary>Inverte o sinal de cada componente do quatérnio.</summary>
      <param name="value">O quatérnio a ser negado.</param>
      <returns>O quatérnio negado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>Interpola entre dois quatérnios usando interpolação linear esférica.</summary>
      <param name="quaternion1">O primeiro quatérnio.</param>
      <param name="quaternion2">O segundo quatérnio.</param>
      <param name="amount">O peso relativo do segundo quatérnio na interpolação.</param>
      <returns>O quatérnio interpolado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Subtrai cada elemento em um segundo quatérnio de seu elemento correspondente em um primeiro quatérnio.</summary>
      <param name="value1">O primeiro quatérnio.</param>
      <param name="value2">O segundo quatérnio.</param>
      <returns>O quatérnio que contém os valores resultantes da subtração de cada elemento no <paramref name="value2" /> do elemento correspondente no <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.ToString">
      <summary>Retorna uma cadeia de caracteres que representa este quatérnio.</summary>
      <returns>A representação de cadeia de caracteres deste quatérnio.</returns>
    </member>
    <member name="F:System.Numerics.Quaternion.W">
      <summary>O componente de rotação do quatérnio.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.X">
      <summary>O valor X do componente de vetor do quatérnio.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Y">
      <summary>O valor Y do componente de vetor do quatérnio.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Z">
      <summary>O valor Z do componente de vetor do quatérnio.</summary>
    </member>
    <member name="T:System.Numerics.Vector">
      <summary>Fornece uma coleção de métodos de conveniência estática para criar, manipular, combinar e converter vetores genéricos.</summary>
    </member>
    <member name="M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor cujos elementos são os valores absolutos dos elementos do vetor determinado.</summary>
      <param name="value">O vetor de origem.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O valor absoluto do vetor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor cujos valores são a soma de cada par de elementos de dois vetores determinados.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor somado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor executando uma operação bit a bit And Not em cada par de elementos correspondentes em dois vetores.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta os bits de um vetor especificado para os de um vetor de bytes sem sinal.</summary>
      <param name="value">O vetor de origem.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta os bits de um vetor especificado para os de um vetor de ponto flutuante de precisão dupla.</summary>
      <param name="value">O vetor de origem.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta os bits de um vetor especificado para os de um vetor de inteiros de 16 bits.</summary>
      <param name="value">O vetor de origem.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta os bits de um vetor especificado para os de um vetor de inteiros.</summary>
      <param name="value">O vetor de origem.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta os bits de um vetor especificado para os de um vetor de inteiros longos.</summary>
      <param name="value">O vetor de origem.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta os bits de um vetor especificado para os de um vetor de bytes com sinal.</summary>
      <param name="value">O vetor de origem.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta os bits de um vetor especificado para os de um vetor de ponto flutuante de precisão simples.</summary>
      <param name="value">O vetor de origem.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta os bits de um vetor especificado para os de um vetor de inteiros de 16 bits sem sinal.</summary>
      <param name="value">O vetor de origem.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta os bits de um vetor especificado para os de um vetor de inteiros sem sinal.</summary>
      <param name="value">O vetor de origem.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta os bits de um vetor especificado para os de um vetor de inteiros longos sem sinal.</summary>
      <param name="value">O vetor de origem.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor executando uma operação bit a bit <see langword="And" /> em cada par de elementos em dois vetores.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor executando uma operação bit a bit <see langword="Or" /> em cada par de elementos em dois vetores.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Cria um novo vetor de precisão simples com elementos selecionados entre dois vetores de origem de precisão simples especificados, com base em um vetor de máscara integral.</summary>
      <param name="condition">O vetor de máscara integral usado para seleção de unidade.</param>
      <param name="left">O primeiro vetor de origem.</param>
      <param name="right">O segundo vetor de origem.</param>
      <returns>O novo vetor com elementos selecionados com base na máscara.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Cria um novo vetor de precisão dupla com elementos selecionados entre dois vetores de origem de precisão dupla especificados, com base em um vetor de máscara integral.</summary>
      <param name="condition">O vetor de máscara integral usado para seleção de unidade.</param>
      <param name="left">O primeiro vetor de origem.</param>
      <param name="right">O segundo vetor de origem.</param>
      <returns>O novo vetor com elementos selecionados com base na máscara.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Cria um novo vetor de um tipo especificado com elementos selecionados entre dois vetores de origem especificados do mesmo tipo, com base em um vetor de máscara integral.</summary>
      <param name="condition">O vetor de máscara integral usado para seleção de unidade.</param>
      <param name="left">O primeiro vetor de origem.</param>
      <param name="right">O segundo vetor de origem.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O novo vetor com elementos selecionados com base na máscara.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})">
      <summary>Converte um <c>Vector&lt;Int64&gt;</c> em um <c>Vector&lt;Double&gt;</c>.</summary>
      <param name="value">O vetor de origem.</param>
      <returns>O vetor convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})">
      <summary>Converte um <c>Vector&lt;UInt64&gt;</c> em um <c>Vector&lt;Double&gt;</c>.</summary>
      <param name="value">O vetor de origem.</param>
      <returns>O vetor convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})">
      <summary>Converte um <c>Vector&lt;Single&gt;</c> em um <c>Vector&lt;Int32&gt;</c>.</summary>
      <param name="value">O vetor de origem.</param>
      <returns>O vetor convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})">
      <summary>Converte um <c>Vector&lt;Double&gt;</c> em um <c>Vector&lt;Int64&gt;</c>.</summary>
      <param name="value">O vetor de origem.</param>
      <returns>O vetor convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})">
      <summary>Converte um <c>Vector&lt;Int32&gt;</c> em um <c>Vector&lt;Single&gt;</c>.</summary>
      <param name="value">O vetor de origem.</param>
      <returns>O vetor convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})">
      <summary>Converte um <c>Vector&lt;UInt32&gt;</c> em um <c>Vector&lt;Single&gt;</c>.</summary>
      <param name="value">O vetor de origem.</param>
      <returns>O vetor convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})">
      <summary>Converte um <c>Vector&lt;Single&gt;</c> em um <c>Vector&lt;UInt32&gt;</c>.</summary>
      <param name="value">O vetor de origem.</param>
      <returns>O vetor convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})">
      <summary>Converte um <c>Vector&lt;Double&gt;</c> em um <c>Vector&lt;UInt64&gt;</c>.</summary>
      <param name="value">O vetor de origem.</param>
      <returns>O vetor convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor cujos valores são o resultado da divisão dos elementos do primeiro vetor pelos elementos correspondentes no segundo vetor.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor dividido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna o produto escalar de dois vetores.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O produto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Retorna um novo vetor integral cujos elementos sinalizam se os elementos em dois vetores de precisão dupla especificados são iguais.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor integral resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Retorna um novo vetor integral cujos elementos sinalizam se os elementos em dois vetores integrais especificados são iguais.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor integral resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Retorna um novo vetor cujos elementos sinalizam se os elementos em dois vetores de inteiro longo especificados são iguais.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor de inteiro longo resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Retorna um novo vetor integral cujos elementos sinalizam se os elementos em dois vetores de precisão simples especificados são iguais.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor integral resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um vetor novo de um tipo especificado cujos elementos sinalizam se os elementos em dois vetores especificados do mesmo tipo são iguais.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um valor que indica se cada par de elementos nos vetores determinados é igual.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se todos os elementos em <paramref name="left" /> e <paramref name="right" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um valor que indica se qualquer par único de elementos nos vetores determinados é igual.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se qualquer par de elementos em <paramref name="left" /> e <paramref name="right" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Retorna um novo vetor integral cujos elementos sinalizam se os elementos de um vetor de ponto flutuante de precisão dupla são maiores que seus elementos correspondentes em um segundo vetor de ponto flutuante de precisão dupla.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor integral resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Retorna um novo vetor integral cujos elementos sinalizam se os elementos de um vetor integral são maiores que seus elementos correspondentes em um segundo vetor integral.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor integral resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Retorna um novo vetor de inteiro longo cujos elementos sinalizam se os elementos de um vetor de inteiro longo são maiores que seus elementos correspondentes em um segundo vetor de inteiro longo.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor de inteiro longo resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Retorna um novo vetor integral cujos elementos sinalizam se os elementos de um vetor de ponto flutuante de precisão simples são maiores que seus elementos correspondentes em um segundo vetor de ponto flutuante de precisão simples.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor integral resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor cujos elementos sinalizam se os elementos de um vetor de um tipo especificado são maiores que seus elementos correspondentes em um segundo vetor do mesmo time.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um valor que indica se todos os elementos do primeiro vetor são maiores que os elementos correspondentes no segundo vetor.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se todos os elementos de <paramref name="left" /> forem maiores que os elementos correspondentes em <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um valor que indica se qualquer elemento no primeiro vetor é maior que o elemento correspondente no segundo vetor.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se qualquer elemento em <paramref name="left" /> for maior que o elemento correspondente em <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Retorna um novo vetor integral cujos elementos sinalizam se os elementos de um vetor são maiores ou iguais aos seus elementos correspondentes no segundo vetor de ponto flutuante de precisão dupla.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor integral resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Retorna um novo vetor integral cujos elementos sinalizam se os elementos em um vetor integral são maiores ou iguais aos seus elementos correspondentes no segundo vetor integral.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor integral resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Retorna um novo vetor de inteiro longo cujos elementos sinalizam se os elementos de um vetor de inteiro longo são maiores ou iguais aos seus elementos correspondentes no segundo vetor de inteiro longo.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor de inteiro longo resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Retorna um novo vetor integral cujos elementos sinalizam se os elementos de um vetor são maiores ou iguais aos seus elementos correspondentes no segundo vetor de ponto flutuante de precisão simples.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor integral resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor cujos elementos sinalizam se os elementos de um vetor de um tipo especificado são maiores ou iguais aos seus elementos correspondentes no segundo vetor do mesmo tipo.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um valor que indica se todos os elementos do primeiro vetor são maiores ou iguais a todos os elementos correspondentes no segundo vetor.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se todos os elementos em <paramref name="left" /> forem maiores ou iguais aos elementos correspondentes em <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um valor que indica se qualquer elemento no primeiro vetor é maior ou igual ao elemento correspondente no segundo vetor.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se qualquer elemento em <paramref name="left" /> for maior ou igual ao elemento correspondente em <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Vector.IsHardwareAccelerated">
      <summary>Obtém um valor que indica se as operações de vetor estão sujeitas à aceleração de hardware por meio do suporte intrínseco JIT.</summary>
      <returns>
        <see langword="true" /> se as operações de vetor estão sujeitas à aceleração de hardware; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Retorna um novo vetor integral cujos elementos sinalizam se os elementos de um vetor de ponto flutuante de precisão dupla são menores que seus elementos correspondentes em um segundo vetor de ponto flutuante de precisão dupla.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor integral resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Retorna um novo vetor integral cujos elementos sinalizam se os elementos de um vetor integral são menores que seus elementos correspondentes em um segundo vetor integral.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor integral resultante</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Retorna um novo vetor de inteiro longo cujos elementos sinalizam se os elementos de um vetor de inteiro longo são menores que seus elementos correspondentes em um segundo vetor de inteiro longo.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor de inteiro longo resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Retorna um novo vetor integral cujos elementos sinalizam se os elementos de um vetor de precisão simples são menores que seus elementos correspondentes em um segundo vetor de precisão simples.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor integral resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor de um tipo especificado cujos elementos sinalizam se os elementos de um vetor são menores que seus elementos correspondentes no segundo vetor.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um valor que indica se todos os elementos do primeiro vetor são menores que seus elementos correspondentes no segundo vetor.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se todos os elementos de <paramref name="left" /> forem menores que os elementos correspondentes em <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um valor que indica se qualquer elemento no primeiro vetor é menor que o elemento correspondente no segundo vetor.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se qualquer elemento em <paramref name="left" /> for menor que o elemento correspondente em <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Retorna um novo vetor integral cujos elementos sinalizam se os elementos de um vetor de ponto flutuante de precisão dupla são menores ou iguais aos seus elementos correspondentes em um segundo vetor de ponto flutuante de precisão dupla.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor integral resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Retorna um novo vetor integral cujos elementos sinalizam se os elementos de um vetor integral são menores ou iguais aos seus elementos correspondentes em um segundo vetor integral.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor integral resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Retorna um novo vetor de inteiro longo cujos elementos sinalizam se os elementos de um vetor de inteiro longo são menores ou iguais aos seus elementos correspondentes em um segundo vetor de inteiro longo.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor de inteiro longo resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Retorna um novo vetor integral cujos elementos sinalizam se os elementos de um vetor de ponto flutuante de precisão simples são menores ou iguais aos seus elementos correspondentes em um segundo vetor de ponto flutuante de precisão simples.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>O vetor integral resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor cujos elementos sinalizam se os elementos de um vetor são menores ou iguais aos seus elementos correspondentes no segundo vetor.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um valor que indica se todos os elementos do primeiro vetor são menores ou iguais aos seus elementos correspondentes no segundo vetor.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se todos os elementos em <paramref name="left" /> forem menores ou iguais aos elementos correspondentes em <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um valor que indica se qualquer elemento no primeiro vetor é menor ou igual ao elemento correspondente no segundo vetor.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se qualquer elemento em <paramref name="left" /> for menor ou igual ao elemento correspondente em <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor cujos elementos são o número máximo de cada par de elementos nos dois vetores determinados.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor máximo.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor cujos elementos são o número mínimo de cada par de elementos nos dois vetores determinados.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor mínimo.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor cujos valores são um valor escalar multiplicado por cada um dos valores de um vetor especificado.</summary>
      <param name="left">O valor escalar.</param>
      <param name="right">O vetor.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor em escala.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)">
      <summary>Retorna um novo vetor cujos valores são os valores de um vetor especificado, cada um multiplicado por um valor escalar.</summary>
      <param name="left">O vetor.</param>
      <param name="right">O valor escalar.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor em escala.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor cujos valores são o produto de cada par de elementos em dois vetores especificados.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor de produto elemento a elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Restringe duas instâncias <c>Vector&lt;Double&gt;</c> em uma <c>Vector&lt;Single&gt;</c>.</summary>
      <param name="source1">O primeiro vetor de origem, cujos elementos se tornam os elementos de índice inferior do valor retornado.</param>
      <param name="source2">O segundo vetor de origem, cujos elementos se tornam os elementos de índice superior do valor retornado.</param>
      <returns>Um <c>Vector&lt;Single&gt;</c> que contém elementos restringidos dos vetores de origem.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})">
      <summary>Restringe duas instâncias <c>Vector&lt;Int16&gt;</c> em uma <c>Vector&lt;SByte&gt;</c>.</summary>
      <param name="source1">O primeiro vetor de origem, cujos elementos se tornam os elementos de índice inferior do valor retornado.</param>
      <param name="source2">O segundo vetor de origem, cujos elementos se tornam os elementos de índice superior do valor retornado.</param>
      <returns>Um <c>Vector&lt;SByte&gt;</c> que contém elementos restringidos dos vetores de origem.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Restringe duas instâncias <c>Vector&lt;Int32&gt;</c> em uma <c>Vector&lt;Int16&gt;</c>.</summary>
      <param name="source1">O primeiro vetor de origem, cujos elementos se tornam os elementos de índice inferior do valor retornado.</param>
      <param name="source2">O segundo vetor de origem, cujos elementos se tornam os elementos de índice superior do valor retornado.</param>
      <returns>Um <c>Vector&lt;Int16&gt;</c> que contém elementos restringidos dos vetores de origem.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Restringe duas instâncias <c>Vector&lt;Int64&gt;</c> em uma <c>Vector&lt;Int32&gt;</c>.</summary>
      <param name="source1">O primeiro vetor de origem, cujos elementos se tornam os elementos de índice inferior do valor retornado.</param>
      <param name="source2">O segundo vetor de origem, cujos elementos se tornam os elementos de índice superior do valor retornado.</param>
      <returns>Um <c>Vector&lt;Int32&gt;</c> que contém elementos restringidos dos vetores de origem.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})">
      <summary>Restringe duas instâncias <c>Vector&lt;UInt16&gt;</c> em uma <c>Vector&lt;Byte&gt;</c>.</summary>
      <param name="source1">O primeiro vetor de origem, cujos elementos se tornam os elementos de índice inferior do valor retornado.</param>
      <param name="source2">O segundo vetor de origem, cujos elementos se tornam os elementos de índice superior do valor retornado.</param>
      <returns>Um <c>Vector&lt;Byte&gt;</c> que contém elementos restringidos dos vetores de origem.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})">
      <summary>Restringe duas instâncias <c>Vector&lt;UInt32&gt;</c> em uma <c>Vector&lt;UInt16&gt;</c>.</summary>
      <param name="source1">O primeiro vetor de origem, cujos elementos se tornam os elementos de índice inferior do valor retornado.</param>
      <param name="source2">O segundo vetor de origem, cujos elementos se tornam os elementos de índice superior do valor retornado.</param>
      <returns>Um <c>Vector&lt;UInt16&gt;</c> que contém elementos restringidos dos vetores de origem.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})">
      <summary>Restringe duas instâncias <c>Vector&lt;UInt64&gt;</c> em uma <c>Vector&lt;UInt32&gt;</c>.</summary>
      <param name="source1">O primeiro vetor de origem, cujos elementos se tornam os elementos de índice inferior do valor retornado.</param>
      <param name="source2">O segundo vetor de origem, cujos elementos se tornam os elementos de índice superior do valor retornado.</param>
      <returns>Um <c>Vector&lt;UInt32&gt;</c> que contém elementos restringidos dos vetores de origem.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor cujos elementos são a negação do elemento correspondente no vetor especificado.</summary>
      <param name="value">O vetor de origem.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor negado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor cujos elementos são obtidos retirando o complemento de um dos elementos de um vetor especificado.</summary>
      <param name="value">O vetor de origem.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor cujos elementos são as raízes quadradas dos elementos de um vetor especificado.</summary>
      <param name="value">O vetor de origem.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor de raiz quadrada.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor cujos valores são a diferença entre os elementos no segundo vetor e seus elementos correspondentes no primeiro vetor.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor de diferença.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)">
      <summary>Amplia um <c>Vector&lt;Byte&gt;</c> para duas instâncias <c>Vector&lt;UInt16&gt;</c>.</summary>
      <param name="source">O vetor de origem cujos elementos são ampliados para as saídas.</param>
      <param name="dest1">O primeiro vetor de saída, cujos elementos conterão os elementos ampliados de índices inferiores no vetor de origem.</param>
      <param name="dest2">O segundo vetor de saída, cujos elementos conterão os elementos ampliados de índices superiores no vetor de origem.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)">
      <summary>Amplia um <c>Vector&lt;Int16&gt;</c> para duas instâncias <c>Vector&lt;Int32&gt;</c>.</summary>
      <param name="source">O vetor de origem cujos elementos são ampliados para as saídas.</param>
      <param name="dest1">O primeiro vetor de saída, cujos elementos conterão os elementos ampliados de índices inferiores no vetor de origem.</param>
      <param name="dest2">O segundo vetor de saída, cujos elementos conterão os elementos ampliados de índices superiores no vetor de origem.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)">
      <summary>Amplia um <c>Vector&lt;Int32&gt;</c> para duas instâncias <c>Vector&lt;Int64&gt;</c>.</summary>
      <param name="source">O vetor de origem cujos elementos são ampliados para as saídas.</param>
      <param name="dest1">O primeiro vetor de saída, cujos elementos conterão os elementos ampliados de índices inferiores no vetor de origem.</param>
      <param name="dest2">O segundo vetor de saída, cujos elementos conterão os elementos ampliados de índices superiores no vetor de origem.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)">
      <summary>Amplia <c>Vector&lt;SByte&gt;</c> para duas instâncias <c>Vector&lt;Int16&gt;</c>.</summary>
      <param name="source">O vetor de origem cujos elementos são ampliados para as saídas.</param>
      <param name="dest1">O primeiro vetor de saída, cujos elementos conterão os elementos ampliados de índices inferiores no vetor de origem.</param>
      <param name="dest2">O segundo vetor de saída, cujos elementos conterão os elementos ampliados de índices superiores no vetor de origem.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)">
      <summary>Amplia um <c>Vector&lt;Single&gt;</c> para duas instâncias <c>Vector&lt;Double&gt;</c>.</summary>
      <param name="source">O vetor de origem cujos elementos são ampliados para as saídas.</param>
      <param name="dest1">O primeiro vetor de saída, cujos elementos conterão os elementos ampliados de índices inferiores no vetor de origem.</param>
      <param name="dest2">O segundo vetor de saída, cujos elementos conterão os elementos ampliados de índices superiores no vetor de origem.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)">
      <summary>Amplia um <c>Vector&lt;UInt16&gt;</c> para duas instâncias <c>Vector&lt;UInt32&gt;</c>.</summary>
      <param name="source">O vetor de origem cujos elementos são ampliados para as saídas.</param>
      <param name="dest1">O primeiro vetor de saída, cujos elementos conterão os elementos ampliados de índices inferiores no vetor de origem.</param>
      <param name="dest2">O segundo vetor de saída, cujos elementos conterão os elementos ampliados de índices superiores no vetor de origem.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)">
      <summary>Amplia um <c>Vector&lt;UInt32&gt;</c> para duas instâncias <c>Vector&lt;UInt64&gt;</c>.</summary>
      <param name="source">O vetor de origem cujos elementos são ampliados para as saídas.</param>
      <param name="dest1">O primeiro vetor de saída, cujos elementos conterão os elementos ampliados de índices inferiores no vetor de origem.</param>
      <param name="dest2">O segundo vetor de saída, cujos elementos conterão os elementos ampliados de índices superiores no vetor de origem.</param>
    </member>
    <member name="M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retorna um novo vetor executando uma operação bit a bit Or (<see langword="XOr" />) exclusiva em cada par de elementos em dois vetores.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
      <returns>O vetor resultante.</returns>
    </member>
    <member name="T:System.Numerics.Vector`1">
      <summary>Representa um vetor simples de um tipo numérico especificado que é adequado para a otimização de nível baixo de algoritmos paralelos.</summary>
      <typeparam name="T">O tipo de vetor. <c>T</c> pode ser qualquer tipo numérico primitivo.</typeparam>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0)">
      <summary>Cria um vetor cujos componentes são de um tipo especificado.</summary>
      <param name="value">O tipo numérico que define o tipo dos componentes do vetor.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[])">
      <summary>Cria um vetor de uma matriz especificada.</summary>
      <param name="values">Uma matriz numérica.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
      <summary>Cria um vetor de uma matriz especificada, começando em uma posição de índice especificada.</summary>
      <param name="values">Uma matriz numérica.</param>
      <param name="index">A posição de índice inicial da qual o vetor será criado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> é <see langword="null" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> é menor que zero.
-ou-
O comprimento de <paramref name="values" /> menos <paramref name="index" /> é menor que <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{`0})">
      <summary>Constrói um vetor com base no <see cref="T:System.ReadOnlySpan`1" /> especificado.</summary>
      <param name="values">Os valores a serem adicionados ao vetor, como um intervalo somente leitura de objetos do tipo T. O intervalo precisa conter, pelo menos, <see cref="P:System.Numerics.Vector`1.Count" /> elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>Constrói um vetor com base no intervalo de bytes somente leitura especificado.</summary>
      <param name="values">Um intervalo somente leitura de bytes que contém os valores a serem adicionados ao vetor. O intervalo precisa conter, pelo menos, <see cref="P:System.Numerics.Vector`1.Count" /> elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.Span{`0})">
      <summary>Constrói um vetor com base no <see cref="T:System.Span`1" /> especificado.</summary>
      <param name="values">Os valores a serem adicionados ao vetor, como um intervalo de objetos do tipo T. O intervalo precisa conter, pelo menos, <see cref="P:System.Numerics.Vector`1.Count" /> elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[])">
      <summary>Copia a instância de vetor para uma matriz de destino especificada.</summary>
      <param name="destination">A matriz a receber uma cópia dos valores de vetor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos no vector atual é maior que o número de elementos disponíveis na matriz <paramref name="destination" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
      <summary>Copia a instância de vetor para uma matriz de destino especificada, começando em uma posição de índice especificada.</summary>
      <param name="destination">A matriz a receber uma cópia dos valores de vetor.</param>
      <param name="startIndex">O índice inicial no <paramref name="destination" /> em que a operação de cópia será iniciada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na instância atual é maior do que o número de elementos disponível de <paramref name="startIndex" /> até o final da matriz <paramref name="destination" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero ou maior que o último índice em <paramref name="destination" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{`0})">
      <summary>Copia o vetor para o intervalo especificado. .</summary>
      <param name="destination">O intervalo de destino para o qual os valores são copiados. O intervalo de destino precisa ter, pelo menos, o tamanho <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.ArgumentException">O número de elementos no vetor de origem é maior que aqueles disponíveis no intervalo de destino.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{System.Byte})">
      <summary>Copia o vetor para o <see cref="T:System.Span`1" /> especificado.</summary>
      <param name="destination">O intervalo de destino para o qual os valores são copiados. O intervalo de destino precisa ter, pelo menos, o tamanho <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.ArgumentException">O número de elementos no vetor de origem é maior que aqueles disponíveis no intervalo de destino.</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.Count">
      <summary>Retorna o número de elementos armazenados no vetor.</summary>
      <returns>O número de elementos armazenados no vetor.</returns>
      <exception cref="T:System.NotSupportedException">Não há suporte para acesso ao getter de propriedade por meio da reflexão.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})">
      <summary>Retorna um valor que indica se essa instância é igual a um vetor especificado.</summary>
      <param name="other">O vetor a ser comparado com essa instância.</param>
      <returns>
        <see langword="true" /> se a instância atual e <paramref name="other" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="obj">O objeto a ser comparado com essa instância.</param>
      <returns>
        <see langword="true" /> se a instância atual e <paramref name="obj" /> forem iguais; caso contrário, <see langword="false" />. O método retornará <see langword="false" /> se <paramref name="obj" /> for nulo ou se <paramref name="obj" /> for um vetor de um tipo diferente da instância atual.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>O código hash.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Item(System.Int32)">
      <summary>Obtém o elemento em um índice especificado.</summary>
      <param name="index">O índice do elemento a ser retornado.</param>
      <returns>O elemento no índice <paramref name="index" />.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> é menor que zero.
-ou-
<paramref name="index" /> é maior ou igual a <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.One">
      <summary>Retorna um vetor que contém todos os índices.</summary>
      <returns>Um vetor que contém todos os.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Soma dois vetores.</summary>
      <param name="left">O primeiro vetor a ser adicionado.</param>
      <param name="right">O segundo vetor a ser adicionado.</param>
      <returns>O vetor somado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Retorna um novo vetor executando uma operação bit a bit <see langword="And" /> em cada um dos elementos em dois vetores.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor resultante da operação bit a bit <see langword="And" /> de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Retorna um novo vetor executando uma operação bit a bit <see langword="Or" /> em cada um dos elementos em dois vetores.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor resultante da operação bit a bit <see langword="Or" /> dos elementos em <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Divide o primeiro vetor pelo segundo.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor resultante da divisão de <paramref name="left" /> por <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Retorna um valor que indica se cada par de elementos em dois vetores especificados é igual.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> forem iguais, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Retorna um novo vetor executando uma operação bit a bit <see langword="XOr" /> em cada um dos elementos em dois vetores.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor resultante da operação bit a bit <see langword="XOr" /> dos elementos em <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}">
      <summary>Reinterpreta os bits do vetor especificado em um vetor do tipo <see cref="T:System.Byte" />.</summary>
      <param name="value">O vetor a se reinterpretado.</param>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}">
      <summary>Reinterpreta os bits do vetor especificado em um vetor do tipo <see cref="T:System.Double" />.</summary>
      <param name="value">O vetor a se reinterpretado.</param>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}">
      <summary>Reinterpreta os bits do vetor especificado em um vetor do tipo <see cref="T:System.Int16" />.</summary>
      <param name="value">O vetor a se reinterpretado.</param>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}">
      <summary>Reinterpreta os bits do vetor especificado em um vetor do tipo <see cref="T:System.Int32" />.</summary>
      <param name="value">O vetor a se reinterpretado.</param>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}">
      <summary>Reinterpreta os bits do vetor especificado em um vetor do tipo <see cref="T:System.Int64" />.</summary>
      <param name="value">O vetor a se reinterpretado.</param>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}">
      <summary>Reinterpreta os bits do vetor especificado em um vetor do tipo <see cref="T:System.SByte" />.</summary>
      <param name="value">O vetor a se reinterpretado.</param>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}">
      <summary>Reinterpreta os bits do vetor especificado em um vetor do tipo <see cref="T:System.Single" />.</summary>
      <param name="value">O vetor a se reinterpretado.</param>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}">
      <summary>Reinterpreta os bits do vetor especificado em um vetor do tipo <see cref="T:System.UInt16" />.</summary>
      <param name="value">O vetor a se reinterpretado.</param>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}">
      <summary>Reinterpreta os bits do vetor especificado em um vetor do tipo <see cref="T:System.UInt32" />.</summary>
      <param name="value">O vetor a se reinterpretado.</param>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}">
      <summary>Reinterpreta os bits do vetor especificado em um vetor do tipo <see cref="T:System.UInt64" />.</summary>
      <param name="value">O vetor a se reinterpretado.</param>
      <returns>O vetor reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Retorna um valor que indica se qualquer par único de elementos nos vetores especificados é igual.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>
        <see langword="true" /> se quaisquer pares de elemento na esquerda e na direita forem iguais. <see langword="false" /> se nenhum par de elemento for igual.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})">
      <summary>Multiplica um vetor por um valor escalar especificado.</summary>
      <param name="factor">O valor escalar.</param>
      <param name="value">O vetor de origem.</param>
      <returns>O vetor em escala.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)">
      <summary>Multiplica um vetor por um valor escalar especificado.</summary>
      <param name="value">O vetor de origem.</param>
      <param name="factor">Um valor escalar.</param>
      <returns>O vetor em escala.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Retorna um novo vetor cujos valores são o produto de cada par de elementos em dois vetores especificados.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor de produto elemento a elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})">
      <summary>Retorna um novo vetor cujos elementos são obtidos retirando o complemento de um dos elementos de um vetor especificado.</summary>
      <param name="value">O vetor de origem.</param>
      <returns>O vetor complementar do um.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Subtrai o segundo vetor da primeiro.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor resultante da subtração de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})">
      <summary>Nega um vetor determinado.</summary>
      <param name="value">O vetor a ser negado.</param>
      <returns>O vetor negado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString">
      <summary>Retorna a representação de cadeia de caracteres desse vetor usando a formatação padrão.</summary>
      <returns>A representação de cadeia de caracteres desse vetor.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String)">
      <summary>Retorna a representação de cadeia de caracteres desse vetor usando a cadeia de caracteres de formato especificada para formatar elementos individuais.</summary>
      <param name="format">Um  ou  que define o formato de elementos individuais.</param>
      <returns>A representação de cadeia de caracteres da instância atual.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)">
      <summary>Retorna a representação de cadeia de caracteres desse vetor usando a cadeia de caracteres de formato especificada para formatar elementos individuais e o provedor de formato especificado para definir a formatação específica da cultura.</summary>
      <param name="format">Um  ou  que define o formato de elementos individuais.</param>
      <param name="formatProvider">Um provedor de formato que fornece informações de formatação específicas da cultura.</param>
      <returns>A representação de cadeia de caracteres da instância atual.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{`0})">
      <summary>Tenta copiar o vetor para o <see cref="T:System.Span`1" /> especificado.</summary>
      <param name="destination">O intervalo de destino para o qual os valores são copiados. O intervalo de destino precisa ter, pelo menos, o tamanho <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <returns>
        <see langword="true" /> se o vetor de origem foi copiado com êxito para <paramref name="destination" />. <see langword="false" /> se <paramref name="destination" /> não é grande o suficiente para manter o vetor de origem.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{System.Byte})">
      <summary>Tenta copiar o vetor para o intervalo de bytes especificado.</summary>
      <param name="destination">O intervalo de destino para o qual os valores são copiados. O intervalo de destino precisa ter, pelo menos, o tamanho <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <returns>
        <see langword="true" /> se o vetor de origem foi copiado com êxito para <paramref name="destination" />. <see langword="false" /> se <paramref name="destination" /> não é grande o suficiente para manter o vetor de origem.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Zero">
      <summary>Retorna um vetor que contém todos os zeros.</summary>
      <returns>Um vetor que contém todos os zeros.</returns>
    </member>
    <member name="T:System.Numerics.Vector2">
      <summary>Representa um vetor com dois valores de ponto flutuante de precisão simples.</summary>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single)">
      <summary>Cria um novo objeto <see cref="T:System.Numerics.Vector2" /> cujos dois elementos têm o mesmo valor.</summary>
      <param name="value">O valor a ser atribuído aos dois elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single,System.Single)">
      <summary>Cria um vetor cujos elementos têm os valores especificados.</summary>
      <param name="x">O valor a ser atribuído ao campo <see cref="F:System.Numerics.Vector2.X" />.</param>
      <param name="y">O valor a ser atribuído ao campo <see cref="F:System.Numerics.Vector2.Y" />.</param>
    </member>
    <member name="M:System.Numerics.Vector2.Abs(System.Numerics.Vector2)">
      <summary>Retorna um vetor cujos elementos são os valores absolutos de cada um dos elementos do vetor especificado.</summary>
      <param name="value">Um vetor.</param>
      <returns>O valor absoluto do vetor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Soma dois vetores.</summary>
      <param name="left">O primeiro vetor a ser adicionado.</param>
      <param name="right">O segundo vetor a ser adicionado.</param>
      <returns>O vetor somado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Restringe um vetor entre um valor mínimo e um valor máximo.</summary>
      <param name="value1">O vetor a ser restringido.</param>
      <param name="min">O valor mínimo.</param>
      <param name="max">O valor máximo.</param>
      <returns>O vetor restringido.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[])">
      <summary>Copia os elementos do vetor para uma matriz especificada.</summary>
      <param name="array">A matriz de destino.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na instância atual é maior que na matriz.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> é multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)">
      <summary>Copia os elementos do vetor para uma matriz especificada, começando em uma posição de índice especificada.</summary>
      <param name="array">A matriz de destino.</param>
      <param name="index">O índice no qual copiar o primeiro elemento do vetor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na instância atual é maior que na matriz.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.
-ou-
<paramref name="index" /> é maior que ou igual ao comprimento da matriz.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> é multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Calcula a distância euclidiana entre os dois pontos determinados.</summary>
      <param name="value1">O primeiro ponto.</param>
      <param name="value2">O segundo ponto.</param>
      <returns>A distância.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retorna a distância euclidiana ao quadrado entre dois pontos especificados.</summary>
      <param name="value1">O primeiro ponto.</param>
      <param name="value2">O segundo ponto.</param>
      <returns>A distância ao quadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Divide o primeiro vetor pelo segundo.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor resultante da divisão.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)">
      <summary>Divide o vetor especificado por um valor escalar especificado.</summary>
      <param name="left">O vetor.</param>
      <param name="divisor">O valor escalar.</param>
      <returns>O vetor resultante da divisão.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retorna o produto escalar de dois vetores.</summary>
      <param name="value1">O primeiro vetor.</param>
      <param name="value2">O segundo vetor.</param>
      <returns>O produto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Numerics.Vector2)">
      <summary>Retorna um valor que indica se essa instância e outro vetor são iguais.</summary>
      <param name="other">O outro vetor.</param>
      <returns>
        <see langword="true" /> se os dois vetores forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa instância e um objeto especificado são iguais.</summary>
      <param name="obj">O objeto a ser comparado com a instância atual.</param>
      <returns>
        <see langword="true" /> se a instância atual e <paramref name="obj" /> forem iguais; caso contrário, <see langword="false" />. Se <paramref name="obj" /> for <see langword="null" />, o método retornará <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>O código hash.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Length">
      <summary>Retorna o comprimento do vetor.</summary>
      <returns>O comprimento do vetor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.LengthSquared">
      <summary>Retorna o comprimento do vetor ao quadrado.</summary>
      <returns>O comprimento do vetor ao quadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
      <summary>Executa uma interpolação linear entre dois vetores com base na importância determinada.</summary>
      <param name="value1">O primeiro vetor.</param>
      <param name="value2">O segundo vetor.</param>
      <param name="amount">Um valor entre 0 e 1 que indica o peso de <paramref name="value2" />.</param>
      <returns>O vetor interpolado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retorna um vetor cujos elementos são o número máximo de cada um dos pares de elementos em dois vetores especificados.</summary>
      <param name="value1">O primeiro vetor.</param>
      <param name="value2">O segundo vetor.</param>
      <returns>O vetor maximizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retorna um vetor cujos elementos são o número mínimo de cada um dos pares de elementos em dois vetores especificados.</summary>
      <param name="value1">O primeiro vetor.</param>
      <param name="value2">O segundo vetor.</param>
      <returns>O vetor minimizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retorna um novo vetor cujos valores são o produto de cada par de elementos em dois vetores especificados.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor de produto elemento a elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)">
      <summary>Multiplica um vetor por um escalar especificado.</summary>
      <param name="left">O vetor a ser multiplicado.</param>
      <param name="right">O valor escalar.</param>
      <returns>O vetor em escala.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)">
      <summary>Multiplica um valor escalar por um vetor especificado.</summary>
      <param name="left">O valor em escala.</param>
      <param name="right">O vetor.</param>
      <returns>O vetor em escala.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Negate(System.Numerics.Vector2)">
      <summary>Nega um vetor especificado.</summary>
      <param name="value">O vetor a ser negado.</param>
      <returns>O vetor negado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Normalize(System.Numerics.Vector2)">
      <summary>Retorna um vetor com a mesma direção que o vetor especificado, mas com um comprimento de um.</summary>
      <param name="value">O vetor a ser normalizado.</param>
      <returns>O vetor normalizado.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.One">
      <summary>Obtém um vetor cujos dois elementos são iguais a um.</summary>
      <returns>Um vetor cujos dois elementos são iguais a um (ou seja, retorna o vetor <c>(1, 1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Soma dois vetores.</summary>
      <param name="left">O primeiro vetor a ser adicionado.</param>
      <param name="right">O segundo vetor a ser adicionado.</param>
      <returns>O vetor somado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Divide o primeiro vetor pelo segundo.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor resultante da divisão de <paramref name="left" /> por <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)">
      <summary>Divide o vetor especificado por um valor escalar especificado.</summary>
      <param name="value1">O vetor.</param>
      <param name="value2">O valor escalar.</param>
      <returns>O resultado da divisão.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retorna um valor que indica se cada par de elementos em dois vetores especificados é igual.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> forem iguais, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retorna um valor que indica se dois vetores especificados não são iguais.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retorna um novo vetor cujos valores são o produto de cada par de elementos em dois vetores especificados.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor de produto elemento a elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)">
      <summary>Multiplica o vetor especificado pelo valor escalar especificado.</summary>
      <param name="left">O vetor.</param>
      <param name="right">O valor escalar.</param>
      <returns>O vetor em escala.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)">
      <summary>Multiplica o valor escalar pelo vetor especificado.</summary>
      <param name="left">O vetor.</param>
      <param name="right">O valor escalar.</param>
      <returns>O vetor em escala.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Subtrai o segundo vetor da primeiro.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor resultante da subtração de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)">
      <summary>Nega o vetor especificado.</summary>
      <param name="value">O vetor a ser negado.</param>
      <returns>O vetor negado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retorna a reflexão de um vetor de uma superfície que tem o normal especificado.</summary>
      <param name="vector">O vetor de origem.</param>
      <param name="normal">O normal da superfície que está sendo refletida.</param>
      <returns>O vetor refletido.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)">
      <summary>Retorna um vetor cujos elementos são a raiz quadrada de cada um dos elementos de um vetor especificado.</summary>
      <param name="value">Um vetor.</param>
      <returns>O vetor de raiz quadrada.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Subtrai o segundo vetor da primeiro.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor de diferença.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString">
      <summary>Retorna a representação de cadeia de caracteres da instância atual usando a formatação padrão.</summary>
      <returns>A representação de cadeia de caracteres da instância atual.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String)">
      <summary>Retorna a representação de cadeia de caracteres da instância atual usando a cadeia de caracteres de formato especificada para formatar elementos individuais.</summary>
      <param name="format">Uma cadeia de caracteres de formato numérico personalizado ou padrão que define o formato de elementos individuais.</param>
      <returns>A representação de cadeia de caracteres da instância atual.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)">
      <summary>Retorna a representação de cadeia de caracteres da instância atual usando a cadeia de caracteres de formato especificada para formatar elementos individuais e o provedor de formato especificado para definir a formatação específica da cultura.</summary>
      <param name="format">Uma cadeia de caracteres de formato numérico personalizado ou padrão que define o formato de elementos individuais.</param>
      <param name="formatProvider">Um provedor de formato que fornece informações de formatação específicas da cultura.</param>
      <returns>A representação de cadeia de caracteres da instância atual.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>Transforma um vetor por uma matriz 3x2 especificada.</summary>
      <param name="position">O vetor a ser transformado.</param>
      <param name="matrix">A matriz de transformação.</param>
      <returns>O vetor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Transforma um vetor por uma matriz 4x4 especificada.</summary>
      <param name="position">O vetor a ser transformado.</param>
      <param name="matrix">A matriz de transformação.</param>
      <returns>O vetor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>Transforma um vetor pelo valor de rotação Quaternion especificado.</summary>
      <param name="value">O vetor a ser girado.</param>
      <param name="rotation">A rotação a se aplicar.</param>
      <returns>O vetor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>Transforma o normal de um vetor pela matriz 3x2 especificada.</summary>
      <param name="normal">O vetor de origem.</param>
      <param name="matrix">A matriz.</param>
      <returns>O vetor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Transforma o normal de um vetor pela matriz 4x4 especificada.</summary>
      <param name="normal">O vetor de origem.</param>
      <param name="matrix">A matriz.</param>
      <returns>O vetor transformado.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitX">
      <summary>Obtém o vetor (1,0).</summary>
      <returns>O vetor <c>(1, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitY">
      <summary>Obtém o vetor (0,1).</summary>
      <returns>O vetor <c>(0, 1)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector2.X">
      <summary>O componente X do vetor.</summary>
    </member>
    <member name="F:System.Numerics.Vector2.Y">
      <summary>O componente Y do vetor.</summary>
    </member>
    <member name="P:System.Numerics.Vector2.Zero">
      <summary>Retorna um vetor cujos dois elementos são iguais a zero.</summary>
      <returns>Um vetor cujos dois elementos são iguais a zero (ou seja, retorna o vetor <c>(0, 0)</c>.</returns>
    </member>
    <member name="T:System.Numerics.Vector3">
      <summary>Representa um vetor com três valores de ponto flutuante de precisão simples.</summary>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)">
      <summary>Cria um novo objeto <see cref="T:System.Numerics.Vector3" /> do objeto <see cref="T:System.Numerics.Vector2" /> especificado e o valor especificado.</summary>
      <param name="value">O vetor com dois elementos.</param>
      <param name="z">O valor adicional a ser atribuído ao campo <see cref="F:System.Numerics.Vector3.Z" />.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single)">
      <summary>Cria um novo objeto <see cref="T:System.Numerics.Vector3" /> cujos três elementos têm o mesmo valor.</summary>
      <param name="value">O valor a ser atribuído a todos os três elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>Cria um vetor cujos elementos têm os valores especificados.</summary>
      <param name="x">O valor a ser atribuído ao campo <see cref="F:System.Numerics.Vector3.X" />.</param>
      <param name="y">O valor a ser atribuído ao campo <see cref="F:System.Numerics.Vector3.Y" />.</param>
      <param name="z">O valor a ser atribuído ao campo <see cref="F:System.Numerics.Vector3.Z" />.</param>
    </member>
    <member name="M:System.Numerics.Vector3.Abs(System.Numerics.Vector3)">
      <summary>Retorna um vetor cujos elementos são os valores absolutos de cada um dos elementos do vetor especificado.</summary>
      <param name="value">Um vetor.</param>
      <returns>O valor absoluto do vetor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Soma dois vetores.</summary>
      <param name="left">O primeiro vetor a ser adicionado.</param>
      <param name="right">O segundo vetor a ser adicionado.</param>
      <returns>O vetor somado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Restringe um vetor entre um valor mínimo e um valor máximo.</summary>
      <param name="value1">O vetor a ser restringido.</param>
      <param name="min">O valor mínimo.</param>
      <param name="max">O valor máximo.</param>
      <returns>O vetor restringido.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[])">
      <summary>Copia os elementos do vetor para uma matriz especificada.</summary>
      <param name="array">A matriz de destino.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na instância atual é maior que na matriz.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> é multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)">
      <summary>Copia os elementos do vetor para uma matriz especificada, começando em uma posição de índice especificada.</summary>
      <param name="array">A matriz de destino.</param>
      <param name="index">O índice no qual copiar o primeiro elemento do vetor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na instância atual é maior que na matriz.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.
-ou-
<paramref name="index" /> é maior que ou igual ao comprimento da matriz.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> é multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Calcula o produto cruzado de dois vetores.</summary>
      <param name="vector1">O primeiro vetor.</param>
      <param name="vector2">O segundo vetor.</param>
      <returns>O produto cruzado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Calcula a distância euclidiana entre os dois pontos determinados.</summary>
      <param name="value1">O primeiro ponto.</param>
      <param name="value2">O segundo ponto.</param>
      <returns>A distância.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retorna a distância euclidiana ao quadrado entre dois pontos especificados.</summary>
      <param name="value1">O primeiro ponto.</param>
      <param name="value2">O segundo ponto.</param>
      <returns>A distância ao quadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Divide o primeiro vetor pelo segundo.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor resultante da divisão.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)">
      <summary>Divide o vetor especificado por um valor escalar especificado.</summary>
      <param name="left">O vetor.</param>
      <param name="divisor">O valor escalar.</param>
      <returns>O vetor resultante da divisão.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retorna o produto escalar de dois vetores.</summary>
      <param name="vector1">O primeiro vetor.</param>
      <param name="vector2">O segundo vetor.</param>
      <returns>O produto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Numerics.Vector3)">
      <summary>Retorna um valor que indica se essa instância e outro vetor são iguais.</summary>
      <param name="other">O outro vetor.</param>
      <returns>
        <see langword="true" /> se os dois vetores forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa instância e um objeto especificado são iguais.</summary>
      <param name="obj">O objeto a ser comparado com a instância atual.</param>
      <returns>
        <see langword="true" /> se a instância atual e <paramref name="obj" /> forem iguais; caso contrário, <see langword="false" />. Se <paramref name="obj" /> for <see langword="null" />, o método retornará <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>O código hash.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Length">
      <summary>Retorna o comprimento do objeto de vetor.</summary>
      <returns>O comprimento do vetor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.LengthSquared">
      <summary>Retorna o comprimento do vetor ao quadrado.</summary>
      <returns>O comprimento do vetor ao quadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
      <summary>Executa uma interpolação linear entre dois vetores com base na importância determinada.</summary>
      <param name="value1">O primeiro vetor.</param>
      <param name="value2">O segundo vetor.</param>
      <param name="amount">Um valor entre 0 e 1 que indica o peso de <paramref name="value2" />.</param>
      <returns>O vetor interpolado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retorna um vetor cujos elementos são o número máximo de cada um dos pares de elementos em dois vetores especificados.</summary>
      <param name="value1">O primeiro vetor.</param>
      <param name="value2">O segundo vetor.</param>
      <returns>O vetor maximizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retorna um vetor cujos elementos são o número mínimo de cada um dos pares de elementos em dois vetores especificados.</summary>
      <param name="value1">O primeiro vetor.</param>
      <param name="value2">O segundo vetor.</param>
      <returns>O vetor minimizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retorna um novo vetor cujos valores são o produto de cada par de elementos em dois vetores especificados.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor de produto elemento a elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)">
      <summary>Multiplica um vetor por um escalar especificado.</summary>
      <param name="left">O vetor a ser multiplicado.</param>
      <param name="right">O valor escalar.</param>
      <returns>O vetor em escala.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)">
      <summary>Multiplica um valor escalar por um vetor especificado.</summary>
      <param name="left">O valor em escala.</param>
      <param name="right">O vetor.</param>
      <returns>O vetor em escala.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Negate(System.Numerics.Vector3)">
      <summary>Nega um vetor especificado.</summary>
      <param name="value">O vetor a ser negado.</param>
      <returns>O vetor negado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Normalize(System.Numerics.Vector3)">
      <summary>Retorna um vetor com a mesma direção que o vetor especificado, mas com um comprimento de um.</summary>
      <param name="value">O vetor a ser normalizado.</param>
      <returns>O vetor normalizado.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.One">
      <summary>Obtém um vetor cujos três elementos são iguais a um.</summary>
      <returns>Um vetor cujos três elementos são iguais a um (ou seja, retorna o vetor <c>(1, 1, 1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Soma dois vetores.</summary>
      <param name="left">O primeiro vetor a ser adicionado.</param>
      <param name="right">O segundo vetor a ser adicionado.</param>
      <returns>O vetor somado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Divide o primeiro vetor pelo segundo.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor resultante da divisão de <paramref name="left" /> por <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)">
      <summary>Divide o vetor especificado por um valor escalar especificado.</summary>
      <param name="value1">O vetor.</param>
      <param name="value2">O valor escalar.</param>
      <returns>O resultado da divisão.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retorna um valor que indica se cada par de elementos em dois vetores especificados é igual.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> forem iguais, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retorna um valor que indica se dois vetores especificados não são iguais.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retorna um novo vetor cujos valores são o produto de cada par de elementos em dois vetores especificados.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor de produto elemento a elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)">
      <summary>Multiplica o vetor especificado pelo valor escalar especificado.</summary>
      <param name="left">O vetor.</param>
      <param name="right">O valor escalar.</param>
      <returns>O vetor em escala.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)">
      <summary>Multiplica o valor escalar pelo vetor especificado.</summary>
      <param name="left">O vetor.</param>
      <param name="right">O valor escalar.</param>
      <returns>O vetor em escala.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Subtrai o segundo vetor da primeiro.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor resultante da subtração de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)">
      <summary>Nega o vetor especificado.</summary>
      <param name="value">O vetor a ser negado.</param>
      <returns>O vetor negado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retorna a reflexão de um vetor de uma superfície que tem o normal especificado.</summary>
      <param name="vector">O vetor de origem.</param>
      <param name="normal">O normal da superfície que está sendo refletida.</param>
      <returns>O vetor refletido.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)">
      <summary>Retorna um vetor cujos elementos são a raiz quadrada de cada um dos elementos de um vetor especificado.</summary>
      <param name="value">Um vetor.</param>
      <returns>O vetor de raiz quadrada.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Subtrai o segundo vetor da primeiro.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor de diferença.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString">
      <summary>Retorna a representação de cadeia de caracteres da instância atual usando a formatação padrão.</summary>
      <returns>A representação de cadeia de caracteres da instância atual.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String)">
      <summary>Retorna a representação de cadeia de caracteres da instância atual usando a cadeia de caracteres de formato especificada para formatar elementos individuais.</summary>
      <param name="format">Uma cadeia de caracteres de formato numérico personalizado ou padrão que define o formato de elementos individuais.</param>
      <returns>A representação de cadeia de caracteres da instância atual.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)">
      <summary>Retorna a representação de cadeia de caracteres da instância atual usando a cadeia de caracteres de formato especificada para formatar elementos individuais e o provedor de formato especificado para definir a formatação específica da cultura.</summary>
      <param name="format">Uma cadeia de caracteres de formato numérico personalizado ou padrão que define o formato de elementos individuais.</param>
      <param name="formatProvider">Um provedor de formato que fornece informações de formatação específicas da cultura.</param>
      <returns>A representação de cadeia de caracteres da instância atual.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Transforma um vetor por uma matriz 4x4 especificada.</summary>
      <param name="position">O vetor a ser transformado.</param>
      <param name="matrix">A matriz de transformação.</param>
      <returns>O vetor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>Transforma um vetor pelo valor de rotação Quaternion especificado.</summary>
      <param name="value">O vetor a ser girado.</param>
      <param name="rotation">A rotação a se aplicar.</param>
      <returns>O vetor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Transforma o normal de um vetor pela matriz 4x4 especificada.</summary>
      <param name="normal">O vetor de origem.</param>
      <param name="matrix">A matriz.</param>
      <returns>O vetor transformado.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitX">
      <summary>Obtém o vetor (1,0,0).</summary>
      <returns>O vetor <c>(1, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitY">
      <summary>Obtém o vetor (0,1,0).</summary>
      <returns>O vetor <c>(0, 1, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitZ">
      <summary>Obtém o vetor (0,0,1).</summary>
      <returns>O vetor <c>(0, 0, 1)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector3.X">
      <summary>O componente X do vetor.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Y">
      <summary>O componente Y do vetor.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Z">
      <summary>O componente Z do vetor.</summary>
    </member>
    <member name="P:System.Numerics.Vector3.Zero">
      <summary>Obtém um vetor cujos três elementos são iguais a zero.</summary>
      <returns>Um vetor cujos três elementos são iguais a zero (ou seja, retorna o vetor <c>(0, 0, 0)</c>.</returns>
    </member>
    <member name="T:System.Numerics.Vector4">
      <summary>Representa um vetor com quatro valores de ponto flutuante de precisão simples.</summary>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector2,System.Single,System.Single)">
      <summary>Cria um novo objeto <see cref="T:System.Numerics.Vector4" /> do objeto <see cref="T:System.Numerics.Vector2" /> especificado e os componentes Z e W.</summary>
      <param name="value">O vetor a ser usado para os componentes X e Y.</param>
      <param name="z">O componente Z.</param>
      <param name="w">O componente W.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Constrói um novo objeto <see cref="T:System.Numerics.Vector4" /> do objeto <see cref="T:System.Numerics.Vector3" /> especificado e um componente W.</summary>
      <param name="value">O vetor a ser usado para os componentes X, Y e Z.</param>
      <param name="w">O componente W.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single)">
      <summary>Cria um novo objeto <see cref="T:System.Numerics.Vector4" /> cujos quatro elementos têm o mesmo valor.</summary>
      <param name="value">O valor a ser atribuído a todos os quatro elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Cria um vetor cujos elementos têm os valores especificados.</summary>
      <param name="x">O valor a ser atribuído ao campo <see cref="F:System.Numerics.Vector4.X" />.</param>
      <param name="y">O valor a ser atribuído ao campo <see cref="F:System.Numerics.Vector4.Y" />.</param>
      <param name="z">O valor a ser atribuído ao campo <see cref="F:System.Numerics.Vector4.Z" />.</param>
      <param name="w">O valor a ser atribuído ao campo <see cref="F:System.Numerics.Vector4.W" />.</param>
    </member>
    <member name="M:System.Numerics.Vector4.Abs(System.Numerics.Vector4)">
      <summary>Retorna um vetor cujos elementos são os valores absolutos de cada um dos elementos do vetor especificado.</summary>
      <param name="value">Um vetor.</param>
      <returns>O valor absoluto do vetor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Add(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Soma dois vetores.</summary>
      <param name="left">O primeiro vetor a ser adicionado.</param>
      <param name="right">O segundo vetor a ser adicionado.</param>
      <returns>O vetor somado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Clamp(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Restringe um vetor entre um valor mínimo e um valor máximo.</summary>
      <param name="value1">O vetor a ser restringido.</param>
      <param name="min">O valor mínimo.</param>
      <param name="max">O valor máximo.</param>
      <returns>O vetor restringido.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[])">
      <summary>Copia os elementos do vetor para uma matriz especificada.</summary>
      <param name="array">A matriz de destino.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na instância atual é maior que na matriz.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> é multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[],System.Int32)">
      <summary>Copia os elementos do vetor para uma matriz especificada, começando em uma posição de índice especificada.</summary>
      <param name="array">A matriz de destino.</param>
      <param name="index">O índice no qual copiar o primeiro elemento do vetor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na instância atual é maior que na matriz.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.
-ou-
<paramref name="index" /> é maior que ou igual ao comprimento da matriz.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> é multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.Distance(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Calcula a distância euclidiana entre os dois pontos determinados.</summary>
      <param name="value1">O primeiro ponto.</param>
      <param name="value2">O segundo ponto.</param>
      <returns>A distância.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.DistanceSquared(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Retorna a distância euclidiana ao quadrado entre dois pontos especificados.</summary>
      <param name="value1">O primeiro ponto.</param>
      <param name="value2">O segundo ponto.</param>
      <returns>A distância ao quadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Divide o primeiro vetor pelo segundo.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor resultante da divisão.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Single)">
      <summary>Divide o vetor especificado por um valor escalar especificado.</summary>
      <param name="left">O vetor.</param>
      <param name="divisor">O valor escalar.</param>
      <returns>O vetor resultante da divisão.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Dot(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Retorna o produto escalar de dois vetores.</summary>
      <param name="vector1">O primeiro vetor.</param>
      <param name="vector2">O segundo vetor.</param>
      <returns>O produto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Numerics.Vector4)">
      <summary>Retorna um valor que indica se essa instância e outro vetor são iguais.</summary>
      <param name="other">O outro vetor.</param>
      <returns>
        <see langword="true" /> se os dois vetores forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa instância e um objeto especificado são iguais.</summary>
      <param name="obj">O objeto a ser comparado com a instância atual.</param>
      <returns>
        <see langword="true" /> se a instância atual e <paramref name="obj" /> forem iguais; caso contrário, <see langword="false" />. Se <paramref name="obj" /> for <see langword="null" />, o método retornará <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>O código hash.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Length">
      <summary>Retorna o comprimento do objeto de vetor.</summary>
      <returns>O comprimento do vetor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.LengthSquared">
      <summary>Retorna o comprimento do vetor ao quadrado.</summary>
      <returns>O comprimento do vetor ao quadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Lerp(System.Numerics.Vector4,System.Numerics.Vector4,System.Single)">
      <summary>Executa uma interpolação linear entre dois vetores com base na importância determinada.</summary>
      <param name="value1">O primeiro vetor.</param>
      <param name="value2">O segundo vetor.</param>
      <param name="amount">Um valor entre 0 e 1 que indica o peso de <paramref name="value2" />.</param>
      <returns>O vetor interpolado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Max(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Retorna um vetor cujos elementos são o número máximo de cada um dos pares de elementos em dois vetores especificados.</summary>
      <param name="value1">O primeiro vetor.</param>
      <param name="value2">O segundo vetor.</param>
      <returns>O vetor maximizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Min(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Retorna um vetor cujos elementos são o número mínimo de cada um dos pares de elementos em dois vetores especificados.</summary>
      <param name="value1">O primeiro vetor.</param>
      <param name="value2">O segundo vetor.</param>
      <returns>O vetor minimizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Retorna um novo vetor cujos valores são o produto de cada par de elementos em dois vetores especificados.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor de produto elemento a elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Single)">
      <summary>Multiplica um vetor por um escalar especificado.</summary>
      <param name="left">O vetor a ser multiplicado.</param>
      <param name="right">O valor escalar.</param>
      <returns>O vetor em escala.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Single,System.Numerics.Vector4)">
      <summary>Multiplica um valor escalar por um vetor especificado.</summary>
      <param name="left">O valor em escala.</param>
      <param name="right">O vetor.</param>
      <returns>O vetor em escala.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Negate(System.Numerics.Vector4)">
      <summary>Nega um vetor especificado.</summary>
      <param name="value">O vetor a ser negado.</param>
      <returns>O vetor negado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Normalize(System.Numerics.Vector4)">
      <summary>Retorna um vetor com a mesma direção que o vetor especificado, mas com um comprimento de um.</summary>
      <param name="vector">O vetor a ser normalizado.</param>
      <returns>O vetor normalizado.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.One">
      <summary>Obtém um vetor cujos quatro elementos são iguais a um.</summary>
      <returns>Retorna <see cref="T:System.Numerics.Vector4" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Addition(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Soma dois vetores.</summary>
      <param name="left">O primeiro vetor a ser adicionado.</param>
      <param name="right">O segundo vetor a ser adicionado.</param>
      <returns>O vetor somado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Divide o primeiro vetor pelo segundo.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor resultante da divisão de <paramref name="left" /> por <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Single)">
      <summary>Divide o vetor especificado por um valor escalar especificado.</summary>
      <param name="value1">O vetor.</param>
      <param name="value2">O valor escalar.</param>
      <returns>O resultado da divisão.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Equality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Retorna um valor que indica se cada par de elementos em dois vetores especificados é igual.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> forem iguais, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Inequality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Retorna um valor que indica se dois vetores especificados não são iguais.</summary>
      <param name="left">O primeiro vetor a ser comparado.</param>
      <param name="right">O segundo vetor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Retorna um novo vetor cujos valores são o produto de cada par de elementos em dois vetores especificados.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor de produto elemento a elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Single)">
      <summary>Multiplica o vetor especificado pelo valor escalar especificado.</summary>
      <param name="left">O vetor.</param>
      <param name="right">O valor escalar.</param>
      <returns>O vetor em escala.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Single,System.Numerics.Vector4)">
      <summary>Multiplica o valor escalar pelo vetor especificado.</summary>
      <param name="left">O vetor.</param>
      <param name="right">O valor escalar.</param>
      <returns>O vetor em escala.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Subtraction(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Subtrai o segundo vetor da primeiro.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor resultante da subtração de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_UnaryNegation(System.Numerics.Vector4)">
      <summary>Nega o vetor especificado.</summary>
      <param name="value">O vetor a ser negado.</param>
      <returns>O vetor negado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.SquareRoot(System.Numerics.Vector4)">
      <summary>Retorna um vetor cujos elementos são a raiz quadrada de cada um dos elementos de um vetor especificado.</summary>
      <param name="value">Um vetor.</param>
      <returns>O vetor de raiz quadrada.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Subtract(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Subtrai o segundo vetor da primeiro.</summary>
      <param name="left">O primeiro vetor.</param>
      <param name="right">O segundo vetor.</param>
      <returns>O vetor de diferença.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString">
      <summary>Retorna a representação de cadeia de caracteres da instância atual usando a formatação padrão.</summary>
      <returns>A representação de cadeia de caracteres da instância atual.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String)">
      <summary>Retorna a representação de cadeia de caracteres da instância atual usando a cadeia de caracteres de formato especificada para formatar elementos individuais.</summary>
      <param name="format">Uma cadeia de caracteres de formato numérico personalizado ou padrão que define o formato de elementos individuais.</param>
      <returns>A representação de cadeia de caracteres da instância atual.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String,System.IFormatProvider)">
      <summary>Retorna a representação de cadeia de caracteres da instância atual usando a cadeia de caracteres de formato especificada para formatar elementos individuais e o provedor de formato especificado para definir a formatação específica da cultura.</summary>
      <param name="format">Uma cadeia de caracteres de formato numérico personalizado ou padrão que define o formato de elementos individuais.</param>
      <param name="formatProvider">Um provedor de formato que fornece informações de formatação específicas da cultura.</param>
      <returns>A representação de cadeia de caracteres da instância atual.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Transforma um vetor bidimensional pela matriz 4x4 especificada.</summary>
      <param name="position">O vetor a ser transformado.</param>
      <param name="matrix">A matriz de transformação.</param>
      <returns>O vetor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>Transforma um vetor bidimensional pelo valor de rotação Quaternion especificado.</summary>
      <param name="value">O vetor a ser girado.</param>
      <param name="rotation">A rotação a se aplicar.</param>
      <returns>O vetor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Transforma um vetor tridimensional pela matriz 4x4 especificada.</summary>
      <param name="position">O vetor a ser transformado.</param>
      <param name="matrix">A matriz de transformação.</param>
      <returns>O vetor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>Transforma um vetor tridimensional pelo valor de rotação Quaternion especificado.</summary>
      <param name="value">O vetor a ser girado.</param>
      <param name="rotation">A rotação a se aplicar.</param>
      <returns>O vetor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Matrix4x4)">
      <summary>Transforma um vetor quadridimensional pela matriz 4x4 especificada.</summary>
      <param name="vector">O vetor a ser transformado.</param>
      <param name="matrix">A matriz de transformação.</param>
      <returns>O vetor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Quaternion)">
      <summary>Transforma um vetor quadridimensional pelo valor de rotação Quaternion especificado.</summary>
      <param name="value">O vetor a ser girado.</param>
      <param name="rotation">A rotação a se aplicar.</param>
      <returns>O vetor transformado.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitW">
      <summary>Obtém o vetor (0,0,0,1).</summary>
      <returns>O vetor <c>(0, 0, 0, 1)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitX">
      <summary>Obtém o vetor (1,0,0,0).</summary>
      <returns>O vetor <c>(1, 0, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitY">
      <summary>Obtém o vetor (0,1,0,0).</summary>
      <returns>O vetor <c>(0, 1, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitZ">
      <summary>Obtém o vetor (0,0,1,0).</summary>
      <returns>O vetor <c>(0, 0, 1, 0)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector4.W">
      <summary>O componente W do vetor.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.X">
      <summary>O componente X do vetor.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Y">
      <summary>O componente Y do vetor.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Z">
      <summary>O componente Z do vetor.</summary>
    </member>
    <member name="P:System.Numerics.Vector4.Zero">
      <summary>Obtém um vetor cujos quatro elementos são iguais a zero.</summary>
      <returns>Um vetor cujos quatro elementos são iguais a zero (ou seja, retorna o vetor <c>(0, 0, 0, 0)</c>.</returns>
    </member>
  </members>
</doc>
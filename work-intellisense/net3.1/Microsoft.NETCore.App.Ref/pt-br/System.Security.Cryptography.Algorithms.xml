<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security.Cryptography.Algorithms</name>
  </assembly>
  <members>
    <member name="T:System.Security.Cryptography.Aes">
      <summary>Representa a classe base abstrata da qual todas as implementações de criptografia AES devem ser herdadas.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.Aes" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.Create">
      <summary>Cria um objeto de criptografia usado para executar o algoritmo simétrico.</summary>
      <returns>Um objeto de criptografia usado para executar o algoritmo simétrico.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Aes.Create(System.String)">
      <summary>Cria um objeto de criptografia que especifica a implementação do AES a ser usado para executar o algoritmo simétrico.</summary>
      <param name="algorithmName">O nome da implementação específica do AES a ser usada.</param>
      <returns>Um objeto de criptografia usado para executar o algoritmo simétrico.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="algorithmName" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.Cryptography.AesCcm">
      <summary>Representa uma chave AES (criptografia AES) a ser usada com o contador com modo de operação CCM (CBC-MAC).</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.#ctor(System.Byte[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.AesCcm" /> com uma chave fornecida.</summary>
      <param name="key">A chave secreta a ser usada para esta instância.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O comprimento do parâmetro <paramref name="key" /> é diferente de 16, 24 ou 32 bytes (128, 192 ou 256 bits).</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.AesCcm" /> com uma chave fornecida.</summary>
      <param name="key">A chave secreta a ser usada para esta instância.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O comprimento do parâmetro <paramref name="key" /> é diferente de 16, 24 ou 32 bytes (128, 192 ou 256 bits).</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>Descriptografa o texto cifrado no buffer de destino fornecido caso a marca de autenticação possa ser validada.</summary>
      <param name="nonce">O nonce associado a essa mensagem, que deve corresponder ao valor fornecido durante a criptografia.</param>
      <param name="ciphertext">O conteúdo criptografado a ser descriptografado.</param>
      <param name="tag">A marca de autenticação produzida para esta mensagem durante a criptografia.</param>
      <param name="plaintext">A matriz de bytes a receber o conteúdo descriptografado.</param>
      <param name="associatedData">Dados extra associados a essa mensagem, que devem corresponder ao valor fornecido durante a criptografia.</param>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="plaintext" /> e o <paramref name="ciphertext" /> não têm o mesmo comprimento.
- ou -
O comprimento do parâmetro <paramref name="nonce" /> não é permitido por <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" />.
- ou -
O comprimento do parâmetro <paramref name="tag" /> não é permitido por <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" />.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="nonce" />, <paramref name="ciphertext" />, <paramref name="tag" /> ou <paramref name="plaintext" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível verificar o valor da marca ou a operação de descriptografia falhou de outra forma.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Decrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Descriptografa o texto cifrado no buffer de destino fornecido caso a marca de autenticação possa ser validada.</summary>
      <param name="nonce">O nonce associado a essa mensagem, que deve corresponder ao valor fornecido durante a criptografia.</param>
      <param name="ciphertext">O conteúdo criptografado a ser descriptografado.</param>
      <param name="tag">A marca de autenticação produzida para esta mensagem durante a criptografia.</param>
      <param name="plaintext">O intervalo de bytes a receber o conteúdo descriptografado.</param>
      <param name="associatedData">Dados extra associados a essa mensagem, que devem corresponder ao valor fornecido durante a criptografia.</param>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="plaintext" /> e o <paramref name="ciphertext" /> não têm o mesmo comprimento.
- ou -
O comprimento do parâmetro <paramref name="nonce" /> não é permitido por <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" />.
- ou -
O comprimento do parâmetro <paramref name="tag" /> não é permitido por <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível verificar o valor da marca ou a operação de descriptografia falhou de outra forma.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Dispose">
      <summary>Libera os recursos usados pela instância atual da classe <see cref="T:System.Security.Cryptography.AesCcm" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>Criptografa o texto não criptografado no buffer de destino do texto cifrado e gera a marca de autenticação em um buffer separado.</summary>
      <param name="nonce">O nonce associado a essa mensagem, que deve ser um valor exclusivo para cada operação com a mesma chave.</param>
      <param name="plaintext">O conteúdo a ser criptografado.</param>
      <param name="ciphertext">A matriz de bytes a receber o conteúdo criptografado.</param>
      <param name="tag">A matriz de bytes a receber a marca de autenticação gerada.</param>
      <param name="associatedData">Dados extra associados a essa mensagem, que também devem ser fornecidos durante a descriptografia.</param>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="plaintext" /> e o <paramref name="ciphertext" /> não têm o mesmo comprimento.
- ou -
O comprimento do parâmetro <paramref name="nonce" /> não é permitido por <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" />.
- ou -
O comprimento do parâmetro <paramref name="tag" /> não é permitido por <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" />.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="nonce" />, <paramref name="ciphertext" />, <paramref name="tag" /> ou <paramref name="plaintext" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Falha na operação de criptografia.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Criptografa o texto não criptografado no buffer de destino do texto cifrado e gera a marca de autenticação em um buffer separado.</summary>
      <param name="nonce">O nonce associado a essa mensagem, que deve ser um valor exclusivo para cada operação com a mesma chave.</param>
      <param name="plaintext">O conteúdo a ser criptografado.</param>
      <param name="ciphertext">O intervalo de bytes a receber o conteúdo criptografado.</param>
      <param name="tag">O intervalo de bytes a receber a marca de autenticação gerada.</param>
      <param name="associatedData">Dados extra associados a essa mensagem, que também devem ser fornecidos durante a descriptografia.</param>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="plaintext" /> e o <paramref name="ciphertext" /> não têm o mesmo comprimento.
- ou -
O comprimento do parâmetro <paramref name="nonce" /> não é permitido por <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" />.
- ou -
O comprimento do parâmetro <paramref name="tag" /> não é permitido por <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Falha na operação de criptografia.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCcm.NonceByteSizes">
      <summary>Obtém os tamanhos de nonce, em bytes, com suporte nesta instância.</summary>
      <returns>Os tamanhos de nonce com suporte nesta instância: 7, 8, 9, 10, 11, 12 ou 13 bytes (56, 64, 72, 80, 88, 96 ou 104 bits).</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCcm.TagByteSizes">
      <summary>Obtém os tamanhos da marca, em bytes, com suporte nesta instância.</summary>
      <returns>Os tamanhos de marca com suporte nesta instância: 4, 6, 8, 10, 12, 14 ou 16 bytes (32, 48, 64, 80, 96, 112 ou 128 bits).</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesGcm">
      <summary>Representa uma chave AES (criptografia AES) a ser usada com o modo GCM (Modo Galois/Contador) de operação.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.#ctor(System.Byte[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.AesGcm" /> com uma chave fornecida.</summary>
      <param name="key">A chave secreta a ser usada para esta instância.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O comprimento do parâmetro <paramref name="key" /> é diferente de 16, 24 ou 32 bytes (128, 192 ou 256 bits).</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.AesGcm" /> com uma chave fornecida.</summary>
      <param name="key">A chave secreta a ser usada para esta instância.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O comprimento do parâmetro <paramref name="key" /> é diferente de 16, 24 ou 32 bytes (128, 192 ou 256 bits).</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>Descriptografa o texto cifrado no buffer de destino fornecido caso a marca de autenticação possa ser validada.</summary>
      <param name="nonce">O nonce associado a essa mensagem, que deve corresponder ao valor fornecido durante a criptografia.</param>
      <param name="ciphertext">O conteúdo criptografado a ser descriptografado.</param>
      <param name="tag">A marca de autenticação produzida para esta mensagem durante a criptografia.</param>
      <param name="plaintext">A matriz de bytes a receber o conteúdo descriptografado.</param>
      <param name="associatedData">Dados extra associados a essa mensagem, que devem corresponder ao valor fornecido durante a criptografia.</param>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="plaintext" /> e o <paramref name="ciphertext" /> não têm o mesmo comprimento.
- ou -
O comprimento do parâmetro <paramref name="nonce" /> não é permitido por <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" />.
- ou -
O comprimento do parâmetro <paramref name="tag" /> não é permitido por <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" />.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="nonce" />, <paramref name="ciphertext" />, <paramref name="tag" /> ou <paramref name="plaintext" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível verificar o valor da marca ou a operação de descriptografia falhou de outra forma.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Decrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Descriptografa o texto cifrado no buffer de destino fornecido caso a marca de autenticação possa ser validada.</summary>
      <param name="nonce">O nonce associado a essa mensagem, que deve corresponder ao valor fornecido durante a criptografia.</param>
      <param name="ciphertext">O conteúdo criptografado a ser descriptografado.</param>
      <param name="tag">A marca de autenticação produzida para esta mensagem durante a criptografia.</param>
      <param name="plaintext">O intervalo de bytes a receber o conteúdo descriptografado.</param>
      <param name="associatedData">Dados extra associados a essa mensagem, que devem corresponder ao valor fornecido durante a criptografia.</param>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="plaintext" /> e o <paramref name="ciphertext" /> não têm o mesmo comprimento.
- ou -
O comprimento do parâmetro <paramref name="nonce" /> não é permitido por <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" />.
- ou -
O comprimento do parâmetro <paramref name="tag" /> não é permitido por <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível verificar o valor da marca ou a operação de descriptografia falhou de outra forma.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Dispose">
      <summary>Libera os recursos usados pela instância atual da classe <see cref="T:System.Security.Cryptography.AesGcm" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>Criptografa o texto não criptografado no buffer de destino do texto cifrado e gera a marca de autenticação em um buffer separado.</summary>
      <param name="nonce">O nonce associado a essa mensagem, que deve ser um valor exclusivo para cada operação com a mesma chave.</param>
      <param name="plaintext">O conteúdo a ser criptografado.</param>
      <param name="ciphertext">A matriz de bytes a receber o conteúdo criptografado.</param>
      <param name="tag">A matriz de bytes a receber a marca de autenticação gerada.</param>
      <param name="associatedData">Dados extra associados a essa mensagem, que também devem ser fornecidos durante a descriptografia.</param>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="plaintext" /> e o <paramref name="ciphertext" /> não têm o mesmo comprimento.
- ou -
O comprimento do parâmetro <paramref name="nonce" /> não é permitido por <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" />.
- ou -
O comprimento do parâmetro <paramref name="tag" /> não é permitido por <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" />.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="nonce" />, <paramref name="ciphertext" />, <paramref name="tag" /> ou <paramref name="plaintext" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Falha na operação de criptografia.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Criptografa o texto não criptografado no buffer de destino do texto cifrado e gera a marca de autenticação em um buffer separado.</summary>
      <param name="nonce">O nonce associado a essa mensagem, que deve ser um valor exclusivo para cada operação com a mesma chave.</param>
      <param name="plaintext">O conteúdo a ser criptografado.</param>
      <param name="ciphertext">A matriz de bytes a receber o conteúdo criptografado.</param>
      <param name="tag">A matriz de bytes a receber a marca de autenticação gerada.</param>
      <param name="associatedData">Dados extra associados a essa mensagem, que também devem ser fornecidos durante a descriptografia.</param>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="plaintext" /> e o <paramref name="ciphertext" /> não têm o mesmo comprimento.
- ou -
O comprimento do parâmetro <paramref name="nonce" /> não é permitido por <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" />.
- ou -
O comprimento do parâmetro <paramref name="tag" /> não é permitido por <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Falha na operação de criptografia.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesGcm.NonceByteSizes">
      <summary>Obtém os tamanhos de nonce, em bytes, com suporte nesta instância.</summary>
      <returns>Os tamanhos de nonce com suporte nesta instância: 12 bytes (96 bits).</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesGcm.TagByteSizes">
      <summary>Obtém os tamanhos da marca, em bytes, com suporte nesta instância.</summary>
      <returns>Os tamanhos de marca com suporte nesta instância: 12, 13, 14, 15 ou 16 bytes (96, 104, 112, 120 ou 128 bits).</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>Fornece uma implementação gerenciada do algoritmo simétrico da criptografia AES.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.AesManaged" />.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A configuração da política de segurança do Windows para FIPS está habilitada.</exception>
      <exception cref="T:System.InvalidOperationException">Esta implementação não faz parte dos algoritmos criptográficos validados por FIPS da Plataforma Windows.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.BlockSize">
      <summary>Obtém ou define o tamanho do bloco, em bits, da operação de criptografia.</summary>
      <returns>O tamanho do bloco, em bits, da operação de criptografia. O padrão é 128 bits.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>Cria um objeto descriptografador simétrico usando a chave atual e o IV (vetor de inicialização).</summary>
      <returns>Um objeto descriptografador simétrico.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Cria um objeto descriptografador simétrico usando a chave especificada e o IV (vetor de inicialização).</summary>
      <param name="rgbKey">A chave secreta a ser usada para o algoritmo simétrico.</param>
      <param name="rgbIV">O vetor de inicialização a ser usado para o algoritmo simétrico.</param>
      <returns>Um objeto descriptografador simétrico.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> ou <paramref name="iv" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> é inválido.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>Cria um objeto criptografador simétrico usando a chave atual e o IV (vetor de inicialização).</summary>
      <returns>Um objeto criptografador simétrico.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Cria um objeto criptografador simétrico usando a chave especificada e o IV (vetor de inicialização).</summary>
      <param name="rgbKey">A chave secreta a ser usada para o algoritmo simétrico.</param>
      <param name="rgbIV">O vetor de inicialização a ser usado para o algoritmo simétrico.</param>
      <returns>Um objeto criptografador simétrico.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> ou <paramref name="iv" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> é inválido.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.FeedbackSize">
      <summary>Obtém ou define o número de bits para usar como comentário.</summary>
      <returns>O tamanho dos comentários, em bits.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>Gera um IV (vetor de inicialização) aleatório a ser usado para o algoritmo simétrico.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>Gera uma chave aleatória a ser usada para o algoritmo simétrico.</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>Obtém ou define o VI (vetor de inicialização) a ser usado para o algoritmo simétrico.</summary>
      <returns>O vetor de inicialização a ser usado para o algoritmo simétrico</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>Obtém ou define a chave secreta usada para o algoritmo simétrico.</summary>
      <returns>A chave para o algoritmo simétrico.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>Obtém ou define o tamanho, em bits, da chave secreta usada para o algoritmo simétrico.</summary>
      <returns>O tamanho, em bits, da chave usada pelo algoritmo simétrico.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalBlockSizes">
      <summary>Obtém os tamanhos de bloco, em bits, que tem suporte com o algoritmo simétrico.</summary>
      <returns>Os tamanhos de bloco, em bits, que têm suporte do algoritmo simétrico.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalKeySizes">
      <summary>Obtém os tamanhos de chave, em bits, que têm suporte pelo algoritmo simétrico.</summary>
      <returns>Os tamanhos de chave, em bits, que têm suporte do algoritmo simétrico.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Mode">
      <summary>Obtém ou define o modo de operação do algoritmo simétrico.</summary>
      <returns>Um dos valores de enumeração que especifica o modo de codificação de bloco a ser usado para criptografia. O padrão é <see cref="F:System.Security.Cryptography.CipherMode.CBC" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.AesManaged.Mode" /> é definido como <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> ou <see cref="F:System.Security.Cryptography.CipherMode.OFB" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Padding">
      <summary>Obtém ou define o modo de preenchimento usado no algoritmo simétrico.</summary>
      <returns>Um dos valores de enumeração que especifica o tipo de preenchimento a ser aplicado. O padrão é <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter">
      <summary>Representa a classe base da qual derivam todos os desformatadores de troca de chaves assimétrica.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.#ctor">
      <summary>Inicializa uma nova instância de <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>Quando substituído em uma classe derivada, extrai as informações de segredo dos dados de troca de chaves criptografados.</summary>
      <param name="rgb">Os dados de troca de chaves dentro dos quais as informações secretas estão ocultas.</param>
      <returns>As informações secretas derivadas dos dados de troca de chaves.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.Parameters">
      <summary>Quando substituído em uma classe derivada, obtém ou define os parâmetros para a troca de chaves assimétrica.</summary>
      <returns>Uma cadeia de caracteres em formato XML que contém os parâmetros da operação de troca de chave assimétrica.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Quando substituído em uma classe derivada, define a chave privada a ser usada para descriptografar as informações secretas.</summary>
      <param name="key">A instância da implementação de <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> que contém a chave privada.</param>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter">
      <summary>Representa a classe base da qual derivam todos os formatadores de troca de chaves assimétrica.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.#ctor">
      <summary>Inicializa uma nova instância de <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>Quando substituído em uma classe derivada, cria os dados de troca de chaves criptografados dos dados de entrada especificados.</summary>
      <param name="data">As informações de segredo a serem passadas na troca de chaves.</param>
      <returns>Os dados de troca de chaves criptografados a serem enviados para o destinatário pretendido.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>Quando substituído em uma classe derivada, cria os dados de troca de chaves criptografados dos dados de entrada especificados.</summary>
      <param name="data">As informações de segredo a serem passadas na troca de chaves.</param>
      <param name="symAlgType">Esse parâmetro não é usado na versão atual.</param>
      <returns>Os dados de troca de chaves criptografados a serem enviados para o destinatário pretendido.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters">
      <summary>Quando substituído em uma classe derivada, obtém os parâmetros para a troca de chaves assimétrica.</summary>
      <returns>Uma cadeia de caracteres em formato XML que contém os parâmetros da operação de troca de chave assimétrica.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Quando substituído em uma classe derivada, define a chave pública a ser usada para criptografar as informações de segredo.</summary>
      <param name="key">A instância da implementação de <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> que contém a chave pública.</param>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureDeformatter">
      <summary>Representa a classe base abstrata de qual todas as implementações de desformatadores de assinatura assimétricos derivam.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor">
      <summary>Inicializa uma nova instância de <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>Quando substituído em uma classe derivada, define o algoritmo de hash a ser usado para verificar a assinatura.</summary>
      <param name="strName">O nome do algoritmo de hash a ser usado para verificar a assinatura.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Quando substituído em uma classe derivada, define a chave pública a ser usada para verificar a assinatura.</summary>
      <param name="key">A instância de uma implementação de <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> que contém a chave pública.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>Quando substituído em uma classe derivada, verifica a assinatura para os dados especificados.</summary>
      <param name="rgbHash">Os dados assinados com <paramref name="rgbSignature" />.</param>
      <param name="rgbSignature">A assinatura a ser verificada quanto a <paramref name="rgbHash" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="rgbSignature" /> corresponder à assinatura computada usando a chave e o algoritmo de hash especificados em <paramref name="rgbHash" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
      <summary>Verifica a assinatura do valor de hash especificado.</summary>
      <param name="hash">O algoritmo de hash a ser usado para verificar a assinatura.</param>
      <param name="rgbSignature">A assinatura a ser verificada.</param>
      <returns>
        <see langword="true" /> se a assinatura for válida para o hash, caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="hash" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureFormatter">
      <summary>Representa a classe base da qual todas as implementações de formatadores de assinatura assimétricos derivam.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor">
      <summary>Inicializa uma nova instância de <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])">
      <summary>Quando substituído em uma classe derivada, cria a assinatura para os dados especificados.</summary>
      <param name="rgbHash">Os dados a serem assinados.</param>
      <returns>A assinatura digital do parâmetro <paramref name="rgbHash" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)">
      <summary>Cria a assinatura com o valor de hash especificado.</summary>
      <param name="hash">O algoritmo de hash a ser usado para criar a assinatura.</param>
      <returns>A assinatura do valor de hash especificado.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="hash" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>Quando substituído em uma classe derivada, define o algoritmo de hash a ser usado para criar a assinatura.</summary>
      <param name="strName">O nome do algoritmo de hash a ser usado para criar a assinatura.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Quando substituído em uma classe derivada, define o algoritmo assimétrico a ser usado para criar a assinatura.</summary>
      <param name="key">A instância da implementação do <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> a ser usado para criar a assinatura.</param>
    </member>
    <member name="T:System.Security.Cryptography.CryptoConfig">
      <summary>Acessa as informações de configuração de criptografia.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.CryptoConfig" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])">
      <summary>Adiciona um conjunto de nomes aos mapeamentos de algoritmo a ser usado para o domínio do aplicativo atual.</summary>
      <param name="algorithm">O algoritmo para o qual o mapeamento será feito.</param>
      <param name="names">Uma matriz de nomes para mapear para o algoritmo.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="algorithm" /> ou <paramref name="names" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="algorithm" /> não pode ser acessado de fora do assembly.
-ou-
Uma das entradas no <paramref name="names" /> parâmetro está vazia ou é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.AddOID(System.String,System.String[])">
      <summary>Adiciona um conjunto de nomes aos mapeamentos de OID (identificador de objeto) a ser usado para o domínio do aplicativo atual.</summary>
      <param name="oid">O OID (identificador de objeto) para o qual mapear.</param>
      <param name="names">Uma matriz de nomes para mapear para o OID.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="oid" /> ou <paramref name="names" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Uma das entradas no <paramref name="names" /> parâmetro está vazia ou é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms">
      <summary>Indica se o tempo de execução deve aplicar a política para criar apenas algoritmos certificados de padrão FIPS.</summary>
      <returns>
        <see langword="true" /> para impor a política; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String)">
      <summary>Cria uma nova instância do objeto criptográfico especificado.</summary>
      <param name="name">O nome simples do objeto criptográfico do qual criar uma instância.</param>
      <returns>Uma nova instância do objeto criptográfico especificado.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="name" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">O algoritmo descrito pelo parâmetro <paramref name="name" /> foi usado com o modo FIPS (Federal Information Processing Standards) habilitado, mas ele não é compatível com FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String,System.Object[])">
      <summary>Cria uma nova instância do objeto criptográfico especificado com os argumentos especificados.</summary>
      <param name="name">O nome simples do objeto criptográfico do qual criar uma instância.</param>
      <param name="args">Os argumentos usados para criar o objeto criptográfico especificado.</param>
      <returns>Uma nova instância do objeto criptográfico especificado.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="name" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">O algoritmo descrito pelo parâmetro <paramref name="name" /> foi usado com o modo FIPS (Federal Information Processing Standards) habilitado, mas ele não é compatível com FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.EncodeOID(System.String)">
      <summary>Codifica o OID (identificador de objeto) especificado.</summary>
      <param name="str">O OID a ser codificado.</param>
      <returns>Uma matriz de bytes que contém o OID codificado.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="str" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">Ocorreu um erro ao codificar o OID.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)">
      <summary>Obtém o OID (identificador de objeto) do algoritmo correspondente ao nome simples especificado.</summary>
      <param name="name">O nome simples do algoritmo para a qual obter o OID.</param>
      <returns>O OID do algoritmo especificado.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="name" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.Cryptography.DeriveBytes">
      <summary>Representa a classe base abstrata da qual são herdadas todas as classes que derivam sequências de bytes de um comprimento especificado.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.DeriveBytes" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Dispose">
      <summary>Quando substituído em uma classe derivada, libera todos os recursos usados pela instância atual da classe <see cref="T:System.Security.Cryptography.DeriveBytes" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)">
      <summary>Quando substituído em uma classe derivada, libera os recursos não gerenciados usados pela classe <see cref="T:System.Security.Cryptography.DeriveBytes" /> e, opcionalmente, libera os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)">
      <summary>Quando substituído em uma classe derivada, retorna bytes de chave pseudoaleatórios.</summary>
      <param name="cb">O número de bytes de chave pseudoaleatórios a serem gerados.</param>
      <returns>Uma matriz de bytes preenchida com bytes de chave pseudoaleatórios.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Reset">
      <summary>Quando substituído em uma classe derivada, redefine o estado da operação.</summary>
    </member>
    <member name="T:System.Security.Cryptography.DES">
      <summary>Representa a classe base do algoritmo DES (padrão de criptografia de dados) do qual todas as implementações <see cref="T:System.Security.Cryptography.DES" /> devem derivar.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.DES" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create">
      <summary>Cria uma instância de um objeto de criptografia para executar o algoritmo <see cref="T:System.Security.Cryptography.DES" /> (padrão de criptografia de dados).</summary>
      <returns>Um objeto de criptografia.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create(System.String)">
      <summary>Cria uma instância de um objeto de criptografia para realizar a implementação especificada do algoritmo <see cref="T:System.Security.Cryptography.DES" /> (Padrão de Criptografia de Dados).</summary>
      <param name="algName">O nome da implementação específica do <see cref="T:System.Security.Cryptography.DES" /> a ser usada.</param>
      <returns>Um objeto de criptografia.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])">
      <summary>Determina se a chave especificada é semifraca.</summary>
      <param name="rgbKey">A chave secreta a ser testada quanto à semifraqueza.</param>
      <returns>
        <see langword="true" /> se a chave for semifraca; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O tamanho do parâmetro <paramref name="rgbKey" /> não é válido.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])">
      <summary>Determina se a chave especificada é fraca.</summary>
      <param name="rgbKey">A chave secreta cuja vulnerabilidade será testada.</param>
      <returns>
        <see langword="true" /> se a chave for fraca; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O tamanho do parâmetro <paramref name="rgbKey" /> não é válido.</exception>
    </member>
    <member name="P:System.Security.Cryptography.DES.Key">
      <summary>Obtém ou define a chave secreta para o algoritmo <see cref="T:System.Security.Cryptography.DES" /> (padrão de criptografia de dados).</summary>
      <returns>A chave secreta para o algoritmo <see cref="T:System.Security.Cryptography.DES" />.</returns>
      <exception cref="T:System.ArgumentNullException">Foi feita uma tentativa de definir a chave como <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Foi feita uma tentativa de definir uma chave cujo tamanho não é igual a <see cref="F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Foi feita uma tentativa de definir uma chave fraca (consulte <see cref="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])" />) ou uma chave semifraca (consulte <see cref="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])" />).</exception>
    </member>
    <member name="T:System.Security.Cryptography.DSA">
      <summary>Representa a classe base abstrata da qual todas as implementações de <see cref="T:System.Security.Cryptography.DSA" /> (Algoritmo de Assinatura Digital) devem ser herdadas.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSA.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create">
      <summary>Cria o objeto de criptografia padrão usado para executar o algoritmo assimétrico.</summary>
      <returns>Um objeto criptográfico usado para executar o algoritmo assimétrico.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.Int32)">
      <summary>Cria uma nova chave DSA efêmera com o tamanho da chave especificado.</summary>
      <param name="keySizeInBits">O tamanho da chave, em bits.</param>
      <returns>Uma nova chave DSA efêmera com o tamanho da chave especificado.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySizeInBits" /> não é permitido por <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)">
      <summary>Cria uma nova chave DSA efêmera com os parâmetros de chave DSA especificados.</summary>
      <param name="parameters">Os parâmetros para o algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</param>
      <returns>Uma nova chave DSA efêmera.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.String)">
      <summary>Cria o objeto criptográfico especificado usado para executar o algoritmo assimétrico.</summary>
      <param name="algName">O nome da implementação específica do <see cref="T:System.Security.Cryptography.DSA" /> a ser usada.</param>
      <returns>Um objeto criptográfico usado para executar o algoritmo assimétrico.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[])">
      <summary>Quando substituído em uma classe derivada, cria a assinatura <see cref="T:System.Security.Cryptography.DSA" /> para o valor de hash especificado.</summary>
      <param name="rgbHash">O valor de hash a ser assinado.</param>
      <returns>A assinatura digital para os valores de hash especificados.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ExportParameters(System.Boolean)">
      <summary>Quando substituído em uma classe derivada, exporta o <see cref="T:System.Security.Cryptography.DSAParameters" />.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> para incluir parâmetros particulares; caso contrário, <see langword="false" />.</param>
      <returns>Os parâmetros para <see cref="T:System.Security.Cryptography.DSA" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.FromXmlString(System.String)">
      <summary>Reconstrói um objeto <see cref="T:System.Security.Cryptography.DSA" /> de uma cadeia de caracteres XML.</summary>
      <param name="xmlString">A cadeia de caracteres XML a ser usada para reconstruir o objeto <see cref="T:System.Security.Cryptography.DSA" />.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="xmlString" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O formato do parâmetro <paramref name="xmlString" /> não é válido.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Quando substituído em uma classe derivada, calcula o valor de hash de uma parte especificada de uma matriz de bytes usando um algoritmo de hash especificado.</summary>
      <param name="data">Os dados que passarão por hash.</param>
      <param name="offset">O índice do primeiro byte em <paramref name="data" /> que deverá passar por hash.</param>
      <param name="count">O número de bytes que passaram por hash.</param>
      <param name="hashAlgorithm">O algoritmo a ser usado para efetuar hash nos dados.</param>
      <returns>Os dados com hash.</returns>
      <exception cref="T:System.NotImplementedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Quando substituído em uma classe derivada, calcula o valor de hash de um fluxo binário especificado usando um algoritmo de hash especificado.</summary>
      <param name="data">O fluxo binário que passará por hash.</param>
      <param name="hashAlgorithm">O algoritmo a ser usado para efetuar hash nos dados.</param>
      <returns>Os dados com hash.</returns>
      <exception cref="T:System.NotImplementedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa o par de chaves pública/privada de uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 após descriptografar com uma senha baseada em bytes, substituindo as chaves desse objeto.</summary>
      <param name="passwordBytes">Os bytes a serem usados como senha ao descriptografar o material da chave.</param>
      <param name="source">Os bytes de uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 na codificação ASN.1-BER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A senha está incorreta.
- ou -
O conteúdo de <paramref name="source" /> indica que a KDF (Função de Derivação de Chaves) a ser aplicada é a KDF do PKCS nº 12 herdada, que requer senhas baseadas em <see cref="T:System.Char" />.
- ou -
O conteúdo de <paramref name="source" /> não representa uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 codificada por ASN.1-BER.
- ou -
O conteúdo de <paramref name="source" /> indica que a chave é de um algoritmo que não é aquele representado por essa instância.
- ou -
O conteúdo de <paramref name="source" /> representa a chave em um formato sem suporte.
- ou -
Falha na importação da chave específica do algoritmo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa o par de chaves pública/privada de uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 após descriptografar com uma senha baseada em caracteres, substituindo as chaves desse objeto.</summary>
      <param name="password">A senha a ser usada para descriptografar o material da chave.</param>
      <param name="source">Os bytes de uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 na codificação ASN.1-BER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A senha está incorreta.
- ou -
O conteúdo de <paramref name="source" /> não representa uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 codificada por ASN.1-BER.
- ou -
O conteúdo de <paramref name="source" /> indica que a chave é de um algoritmo que não é aquele representado por essa instância.
- ou -
O conteúdo de <paramref name="source" /> representa a chave em um formato sem suporte.
- ou -
Falha na importação da chave específica do algoritmo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)">
      <summary>Quando é substituído em uma classe derivada, importa o <see cref="T:System.Security.Cryptography.DSAParameters" /> especificado.</summary>
      <param name="parameters">Os parâmetros para <see cref="T:System.Security.Cryptography.DSA" />.</param>
      <exception cref="T:System.ArgumentException">Há campos obrigatórios ausentes em <paramref name="parameters" />.
- ou -
<paramref name="parameters" /> tem campos com comprimentos inconsistentes para uma chave válida.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> não representa um conjunto de parâmetros de chave DSA válida.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa o par de chaves pública/privada de uma estrutura de PrivateKeyInfo do PKCS nº 8 após a descriptografia, substituindo as chaves desse objeto.</summary>
      <param name="source">Os bytes de uma estrutura de PrivateKeyInfo do PKCS nº 8 na codificação ASN.1-BER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O conteúdo de <paramref name="source" /> não representa uma estrutura de PrivateKeyInfo do PKCS nº 8 codificada por ASN.1-BER.
- ou -
O conteúdo de <paramref name="source" /> indica que a chave é de um algoritmo que não é aquele representado por essa instância.
- ou -
O conteúdo de <paramref name="source" /> representa a chave em um formato sem suporte.
- ou -
Falha na importação da chave específica do algoritmo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa a chave pública de uma estrutura de SubjectPublicKeyInfo X.509 após a descriptografia, substituindo as chaves desse objeto.</summary>
      <param name="source">Os bytes de uma estrutura de SubjectPublicKeyInfo X.509 na codificação ASN.1-DER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O conteúdo de <paramref name="source" /> não representa uma estrutura de SubjectPublicKeyInfo X.509 codificada por ASN.1-DER.
- ou -
O conteúdo de <paramref name="source" /> indica que a chave é de um algoritmo que não é aquele representado por essa instância.
- ou -
O conteúdo de <paramref name="source" /> representa a chave em um formato sem suporte.
- ou -
Falha na importação da chave específica do algoritmo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Calcula o valor de hash de uma parte da matriz de byte especificada usando o algoritmo de hash especificado e assina o valor de hash resultante.</summary>
      <param name="data">Os dados de entrada para os quais o hash será calculado.</param>
      <param name="offset">O deslocamento na matriz no qual os dados começarão a ser usados.</param>
      <param name="count">O número de bytes na matriz a ser usado como dados.</param>
      <param name="hashAlgorithm">O algoritmo de hash a ser usado para criar o valor de hash.</param>
      <returns>A assinatura DSA para os dados especificados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> é menor que zero.
- ou -
<paramref name="count" /> é menor que zero.
- ou -
<paramref name="offset" /> + <paramref name="count" /> – 1 resulta em um índice que está além do limite superior de <paramref name="data" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Calcula o valor de hash da matriz de byte especificada usando o algoritmo de hash especificado e assina o valor de hash resultante.</summary>
      <param name="data">Os dados de entrada para os quais o hash será calculado.</param>
      <param name="hashAlgorithm">O algoritmo de hash a ser usado para criar o valor de hash.</param>
      <returns>A assinatura DSA para os dados especificados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Calcula o valor de hash do fluxo especificado usando o algoritmo de hash especificado e assina o valor de hash resultante.</summary>
      <param name="data">O fluxo de entrada para o qual calcular o hash.</param>
      <param name="hashAlgorithm">O algoritmo de hash a ser usado para criar o valor de hash.</param>
      <returns>A assinatura DSA para os dados especificados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ToXmlString(System.Boolean)">
      <summary>Cria e retorna uma representação de cadeia de caracteres XML do objeto <see cref="T:System.Security.Cryptography.DSA" /> atual.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> para incluir parâmetros particulares; caso contrário, <see langword="false" />.</param>
      <returns>Uma codificação de cadeia de caracteres XML do objeto <see cref="T:System.Security.Cryptography.DSA" /> atual.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryCreateSignature(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Tenta criar a assinatura DSA para o hash especificado no buffer fornecido.</summary>
      <param name="hash">O hash a assinar.</param>
      <param name="destination">O intervalo de bytes que receberá a assinatura.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber o resultado; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Essa instância representa apenas uma chave pública.
- ou -
O tipo de implementação dá suporte apenas ao DSA herdado (FIPS 186-2) e <paramref name="hash" /> não é um valor de 20 bytes.
- ou -
A criação da assinatura de outra forma falhou.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato EncryptedPrivateKeyInfo do PKCS n º 8 para um buffer fornecido, usando uma senha baseada em bytes.</summary>
      <param name="passwordBytes">Os bytes a serem usados como senha ao criptografar o material da chave.</param>
      <param name="pbeParameters">Os parâmetros de PBE (criptografia baseada em senha) a serem usados ao criptografar o material da chave.</param>
      <param name="destination">O intervalo de bytes que receberá os dados de EncryptedPrivateKeyInfo do PKCS n º 8.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.
- ou -
<paramref name="pbeParameters" /> indica que <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> deve ser usado, o que exige senhas baseadas em <see cref="T:System.Char" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato EncryptedPrivateKeyInfo do PKCS n º 8 para um buffer fornecido, usando uma senha baseada em caracteres.</summary>
      <param name="password">A senha a ser usada ao criptografar o material da chave.</param>
      <param name="pbeParameters">Os parâmetros de PBE (criptografia baseada em senha) a serem usados ao criptografar o material da chave.</param>
      <param name="destination">O intervalo de bytes que receberá os dados de EncryptedPrivateKeyInfo do PKCS n º 8.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato PrivateKeyInfo do PKCS n º 8 para um buffer fornecido.</summary>
      <param name="destination">O intervalo de bytes que receberá os dados de PrivateKeyInfo do PKCS n º 8.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato SubjectPublicKeyInfo X.509 para um buffer fornecido.</summary>
      <param name="destination">O intervalo de bytes que receberá os dados de SubjectPublicKeyInfo X.509.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>Tenta computar o valor de hash dos dados fornecidos em um buffer fornecido.</summary>
      <param name="data">Os dados que passarão por hash.</param>
      <param name="destination">O intervalo de bytes que receberá o valor de hash.</param>
      <param name="hashAlgorithm">O nome do algoritmo de hash a ser usado.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber o resultado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>Tenta criar a assinatura DSA para os dados especificados no buffer fornecido.</summary>
      <param name="data">Os dados para hash e assinatura.</param>
      <param name="destination">O intervalo de bytes que receberá a assinatura.</param>
      <param name="hashAlgorithm">O nome do algoritmo de hash a ser usado.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber o resultado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifica se uma assinatura digital é válida calculando o valor de hash dos dados especificados usando o algoritmo de hash especificados e comparando-o à assinatura fornecida.</summary>
      <param name="data">Os dados assinados.</param>
      <param name="signature">Os dados de assinatura a serem verificados.</param>
      <param name="hashAlgorithm">O algoritmo de hash usado para criar o valor de hash dos dados.</param>
      <returns>
        <see langword="true" /> se a assinatura digital for válida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.
- ou -
<paramref name="signature" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O tipo de implementação dá suporte apenas ao DSA herdado (FIPS 186-2) e o algoritmo de hash não é SHA-1.
- ou -
A verificação da assinatura de outra forma falhou.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifica se uma assinatura digital é válida calculando o valor de hash dos dados especificados em uma parte de uma matriz de bytes usando o algoritmo de hash especificado e comparando-o à assinatura fornecida.</summary>
      <param name="data">Os dados assinados.</param>
      <param name="offset">O índice inicial no qual calcular o hash.</param>
      <param name="count">O número de bytes que passaram por hash.</param>
      <param name="signature">Os dados de assinatura a serem verificados.</param>
      <param name="hashAlgorithm">O algoritmo de hash usado para criar o valor de hash dos dados.</param>
      <returns>
        <see langword="true" /> se a assinatura digital for válida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.
- ou -
<paramref name="signature" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> é menor que zero.
- ou -
<paramref name="count" /> é menor que zero.
- ou -
<paramref name="offset" /> + <paramref name="count" /> – 1 resulta em um índice que está além do limite superior de <paramref name="data" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O tipo de implementação dá suporte apenas ao DSA herdado (FIPS 186-2) e o algoritmo de hash não é SHA-1.
- ou -
A verificação da assinatura de outra forma falhou.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifica se uma assinatura digital é válida calculando o valor de hash do fluxo especificado usando o algoritmo de hash especificado e comparando-o à assinatura fornecida.</summary>
      <param name="data">Os dados assinados.</param>
      <param name="signature">Os dados de assinatura a serem verificados.</param>
      <param name="hashAlgorithm">O algoritmo de hash usado para criar o valor de hash dos dados.</param>
      <returns>
        <see langword="true" /> se a assinatura digital for válida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.
- ou -
<paramref name="signature" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O tipo de implementação dá suporte apenas ao DSA herdado (FIPS 186-2) e o algoritmo de hash não é SHA-1.
- ou -
A verificação da assinatura de outra forma falhou.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifica se uma assinatura digital é válida calculando o valor de hash dos dados em um intervalo de bytes usando o algoritmo de hash especificados e comparando-o à assinatura fornecida.</summary>
      <param name="data">Os dados assinados.</param>
      <param name="signature">A assinatura a ser verificada.</param>
      <param name="hashAlgorithm">O algoritmo de hash usado para criar o valor de hash dos dados.</param>
      <returns>
        <see langword="true" /> se a assinatura digital for válida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O tipo de implementação dá suporte apenas ao DSA herdado (FIPS 186-2) e o algoritmo de hash não é SHA-1.
- ou -
A verificação da assinatura de outra forma falhou.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])">
      <summary>Quando substituído em uma classe derivada, verifica a assinatura <see cref="T:System.Security.Cryptography.DSA" /> para os dados especificados.</summary>
      <param name="rgbHash">O hash dos dados assinados com <paramref name="rgbSignature" />.</param>
      <param name="rgbSignature">A assinatura a ser verificada para <c>rgbData</c>.</param>
      <returns>
        <see langword="true" /> se <paramref name="rgbSignature" /> corresponder à assinatura computada usando a chave e o algoritmo de hash especificados em <paramref name="rgbHash" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O tipo de implementação dá suporte apenas ao DSA herdado (FIPS 186-2) e o valor de hash não tem 20 bytes.
- ou -
A verificação da assinatura de outra forma falhou.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Verifica se a assinatura digital é válida para um hash de dados fornecido.</summary>
      <param name="hash">O hash de dados a ser verificado.</param>
      <param name="signature">A assinatura a ser verificada.</param>
      <returns>
        <see langword="true" /> se a assinatura digital for válida para o hash; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O tipo de implementação dá suporte apenas ao DSA herdado (FIPS 186-2) e o valor de hash não tem 20 bytes.
- ou -
A verificação da assinatura de outra forma falhou.</exception>
    </member>
    <member name="T:System.Security.Cryptography.DSAParameters">
      <summary>Contém os parâmetros típicos do algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Counter">
      <summary>Especifica o contador para o algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.G">
      <summary>Especifica o parâmetro <see langword="G" /> para o algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.J">
      <summary>Especifica o parâmetro <see langword="J" /> para o algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.P">
      <summary>Especifica o parâmetro <see langword="P" /> para o algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Q">
      <summary>Especifica o parâmetro <see langword="Q" /> para o algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Seed">
      <summary>Especifica a semente para o algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.X">
      <summary>Especifica o parâmetro <see langword="X" /> para o algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Y">
      <summary>Especifica o parâmetro <see langword="Y" /> para o algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureDeformatter">
      <summary>Verifica uma assinatura PKCS#1 v1.5 <see cref="T:System.Security.Cryptography.DSA" /> (Algoritmo de Assinatura Digital).</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.DSASignatureDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.DSASignatureDeformatter" /> com a chave especificada.</summary>
      <param name="key">A instância de <see cref="T:System.Security.Cryptography.DSA" /> (Algoritmo de Assinatura Digital) que contém a chave.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>Especifica o algoritmo de hash para o desformatador de assinatura <see cref="T:System.Security.Cryptography.DSA" /> (Algoritmo de Assinatura Digital).</summary>
      <param name="strName">O nome do algoritmo de hash a ser usado para o desformatador de assinatura.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">O parâmetro <paramref name="strName" /> não é mapeado para o algoritmo de hash <see cref="T:System.Security.Cryptography.SHA1" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Especifica a chave a ser usada para o desformatador de assinatura <see cref="T:System.Security.Cryptography.DSA" /> (Algoritmo de Assinatura Digital).</summary>
      <param name="key">A instância de <see cref="T:System.Security.Cryptography.DSA" /> que contém a chave.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>Verifica a assinatura <see cref="T:System.Security.Cryptography.DSA" /> (Algoritmo de Assinatura Digital) nos dados.</summary>
      <param name="rgbHash">Os dados assinados com <paramref name="rgbSignature" />.</param>
      <param name="rgbSignature">A assinatura a ser verificada quanto a <paramref name="rgbHash" />.</param>
      <returns>
        <see langword="true" /> se a assinatura for válida para os dados; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> é <see langword="null" />.
- ou -
<paramref name="rgbSignature" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">A chave DSA está ausente.</exception>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureFormatter">
      <summary>Cria uma assinatura <see cref="T:System.Security.Cryptography.DSA" /> (Algoritmo de Assinatura Digital).</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.DSASignatureFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.DSASignatureFormatter" /> com a chave especificada.</summary>
      <param name="key">A instância do <see cref="T:System.Security.Cryptography.DSA" /> (Algoritmo de Assinatura Digital) que contém a chave.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.CreateSignature(System.Byte[])">
      <summary>Cria a assinatura PKCS nº 1 <see cref="T:System.Security.Cryptography.DSA" /> (Algoritmo de Assinatura Digital) para os dados especificados.</summary>
      <param name="rgbHash">Os dados a serem assinados.</param>
      <returns>A assinatura digital para os dados especificados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">O OID é <see langword="null" />.
- ou -
A chave DSA é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>Especifica o algoritmo de hash para o formatador de assinatura <see cref="T:System.Security.Cryptography.DSA" /> (Algoritmo de Assinatura Digital).</summary>
      <param name="strName">O nome do algoritmo de hash a ser usado para o formatador de assinatura.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">O parâmetro <paramref name="strName" /> não é mapeado para o algoritmo de hash <see cref="T:System.Security.Cryptography.SHA1" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Especifica a chave a ser usada para o formatador de assinatura <see cref="T:System.Security.Cryptography.DSA" /> (Algoritmo de Assinatura Digital).</summary>
      <param name="key">A instância de <see cref="T:System.Security.Cryptography.DSA" /> que contém a chave.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve">
      <summary>Representa uma curva elíptica.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.A">
      <summary>O primeiro coeficiente uma curva explícita. <c>A</c> para curvas curtas de Weierstrass, Montgomery e Twisted Edwards.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.B">
      <summary>O segundo coeficiente de uma curva explícita. <c>B</c> para curvas Weierstrass curtas e <c>d</c> para curvas Twisted Edwards curtas.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Cofactor">
      <summary>O cofator da curva.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromFriendlyName(System.String)">
      <summary>Cria uma curva nomeada usando o nome amigável especificado do identificador.</summary>
      <param name="oidFriendlyName">O nome amigável do identificador.</param>
      <returns>Um objeto que representa a curva nomeada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidFriendlyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromOid(System.Security.Cryptography.Oid)">
      <summary>Cria uma curva nomeada usando o objeto <see cref="T:System.Security.Cryptography.Oid" /> especificado.</summary>
      <param name="curveOid">O identificador de objeto a ser usado.</param>
      <returns>Um objeto que representa a curva nomeada.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromValue(System.String)">
      <summary>Cria uma curva nomeada usando a representação decimal pontilhada especificada do identificador.</summary>
      <param name="oidValue">O número pontilhado do identificador.</param>
      <returns>Um objeto que representa a curva nomeada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidValue" /> é <see langword="null" />.</exception>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.CurveType">
      <summary>Identifica a composição do objeto <see cref="T:System.Security.Cryptography.ECCurve" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.ECCurveType">
      <summary>Indica como interpretar os dados contidos em um objeto <see cref="T:System.Security.Cryptography.ECCurve" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Characteristic2">
      <summary>Os parâmetros de curva representam uma curva 2 característica.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Implicit">
      <summary>Nenhum dado de curva é interpretado. O chamador deve saber qual é a curva.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Named">
      <summary>Os parâmetros de curva representam uma curva nomeada.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeMontgomery">
      <summary>Os parâmetros de curva representam uma curva principal com a fórmula B*y^2 = x^3 + A*x^2 + x.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeShortWeierstrass">
      <summary>Os parâmetros de curva representam uma curva principal com a fórmula y^2 = x^3 + A*x + B no campo principal P.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeTwistedEdwards">
      <summary>Os parâmetros de curva representam uma curva principal com a fórmula A*x^2 + y^2 = 1 + B*x^2*y^2 no campo P principal.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.G">
      <summary>O gerador ou ponto de base para operações na curva.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Hash">
      <summary>O nome do algoritmo de hash que foi usado para gerar os coeficientes de curva (<see cref="F:System.Security.Cryptography.ECCurve.A" /> e <see cref="F:System.Security.Cryptography.ECCurve.B" />) do <see cref="F:System.Security.Cryptography.ECCurve.Seed" /> sob o algoritmo de geração ANSI X9.62. Aplica-se somente a curvas explícitas.</summary>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsCharacteristic2">
      <summary>Obtém um valor que indica se o tipo de curva indica uma curva 2 característica explícita.</summary>
      <returns>
        <see langword="true" /> se a curva é uma curva característica explícita 2; <see langword="false" /> se a curva é uma curva característica nomeada 2, principal ou implícita.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsExplicit">
      <summary>Obtém um valor que indica se o tipo de curva indica uma curva explícita (principal ou de característica 2).</summary>
      <returns>
        <see langword="true" /> se a curva for uma curva explícita (principal ou de característica 2); <see langword="false" /> se a curva for uma curva implícita ou nomeada.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsNamed">
      <summary>Obtém um valor que indica se o tipo de curva indica uma curva nomeada.</summary>
      <returns>
        <see langword="true" />se a curva for uma curva nomeada; <see langword="false" /> se a curva for uma curva implícita ou explícita (primo ou característica 2).</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsPrime">
      <summary>Obtém um valor que indica se o tipo de curva indica uma curva principal explícita.</summary>
      <returns>
        <see langword="true" /> se a curva é uma curva principal explícita; <see langword="false" /> se a curva é uma curva principal nomeada, característica 2 ou implícita.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.NamedCurves">
      <summary>Representa uma classe de fábrica para criação de curvas nomeadas.</summary>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160r1">
      <summary>Obtém uma curva nomeada brainpoolP160r1.</summary>
      <returns>Uma curva nomeada brainpoolP160r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160t1">
      <summary>Obtém uma curva nomeada brainpoolP160t1.</summary>
      <returns>Uma curva nomeada brainpoolP160t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192r1">
      <summary>Obtém uma curva nomeada brainpoolP192r1.</summary>
      <returns>Uma curva nomeada brainpoolP192r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192t1">
      <summary>Obtém uma curva nomeada brainpoolP192t1.</summary>
      <returns>Uma curva nomeada brainpoolP192t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224r1">
      <summary>Obtém uma curva nomeada brainpoolP224r1.</summary>
      <returns>Uma curva nomeada brainpoolP224r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224t1">
      <summary>Obtém uma curva nomeada brainpoolP224t1.</summary>
      <returns>Uma curva nomeada brainpoolP224t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256r1">
      <summary>Obtém uma curva nomeada brainpoolP256r1.</summary>
      <returns>Uma curva nomeada brainpoolP256r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256t1">
      <summary>Obtém uma curva nomeada brainpoolP256t1.</summary>
      <returns>Uma curva nomeada brainpoolP256t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320r1">
      <summary>Obtém uma curva nomeada brainpoolP320r1.</summary>
      <returns>Uma curva nomeada brainpoolP320r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320t1">
      <summary>Obtém uma curva nomeada brainpoolP320t1.</summary>
      <returns>Uma curva nomeada brainpoolP320t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384r1">
      <summary>Obtém uma curva nomeada brainpoolP384r1.</summary>
      <returns>Uma curva nomeada brainpoolP384r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384t1">
      <summary>Obtém uma curva nomeada brainpoolP384t1.</summary>
      <returns>Uma curva nomeada brainpoolP384t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512r1">
      <summary>Obtém uma curva nomeada brainpoolP512r1.</summary>
      <returns>Uma curva nomeada brainpoolP512r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512t1">
      <summary>Obtém uma curva nomeada brainpoolP512t1.</summary>
      <returns>Uma curva nomeada brainpoolP512t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP256">
      <summary>Obtém uma curva nomeada nistP256.</summary>
      <returns>Uma curva nomeada nistP256.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP384">
      <summary>Obtém uma curva nomeada nistP384.</summary>
      <returns>Uma curva nomeada nistP384.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP521">
      <summary>Obtém uma curva nomeada nistP521.</summary>
      <returns>Uma curva nomeada nistP521.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.Oid">
      <summary>Obtém o identificador de uma curva nomeada.</summary>
      <returns>O identificador de uma curva nomeada.</returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Order">
      <summary>A ordem da curva. Aplica-se somente a curvas explícitas.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Polynomial">
      <summary>A curva polinomial. Aplica-se somente a curvas de característica dois.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Prime">
      <summary>O principal que especifica o campo base. Aplica-se somente às curvas principais.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Seed">
      <summary>O valor de semente para a geração de coeficiente sob o algoritmo de geração X9.62 ANSI. Aplica-se somente a curvas explícitas.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.Validate">
      <summary>Valida a integridade da curva atual. Lança uma exceção <see cref="T:System.Security.Cryptography.CryptographicException" /> se a estrutura não for válida.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Os parâmetros da curva não são válidos para o tipo de curva atual.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellman">
      <summary>Fornece uma classe base abstrata da qual as implementações do algoritmo ECDH (Diffie-Hellman de curva elíptica) podem ser derivadas. Essa classe fornece o conjunto básico de operações ao qual todas as implementações de ECDH devem dar suporte.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create">
      <summary>Cria uma nova instância da implementação padrão do algoritmo ECDH (Diffie-Hellman de curva elíptica).</summary>
      <returns>Uma nova instância da implementação padrão desta classe.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)">
      <summary>Cria uma nova instância da implementação padrão do algoritmo Diffie-Hellman de Curva Elíptica (ECDH) com um novo par de chaves pública/privada gerado com a curva especificada.</summary>
      <param name="curve">A curva a ser usada para gerar um novo par de chaves pública/privada.</param>
      <returns>Uma nova instância da implementação padrão do algoritmo Diffie-Hellman de Curva Elíptica (ECDH).</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> não é validado.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)">
      <summary>Cria uma nova instância da implementação padrão do algoritmo Diffie-Hellman de Curva Elíptica (ECDH) com a chave descrita pelo objeto <see cref="T:System.Security.Cryptography.ECParameters" /> especificado.</summary>
      <param name="parameters">O parâmetros para o algoritmo ECC (criptografia de curva elíptica).</param>
      <returns>Uma nova instância da implementação padrão do algoritmo Diffie-Hellman de Curva Elíptica (ECDH).</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> não é validado.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)">
      <summary>Cria uma nova instância da implementação especificada do algoritmo ECDH (Diffie-Hellman de Curva Elíptica).</summary>
      <param name="algorithm">O nome de uma implementação do algoritmo ECDH.</param>
      <returns>Uma nova instância da implementação especificada desta classe. Se o nome do algoritmo especificado não for mapeado para uma implementação ECDH, esse método retornará <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="algorithm" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Executa a derivação de chave usando um algoritmo de hash especificado.</summary>
      <param name="otherPartyPublicKey">A chave pública do outro participante.</param>
      <param name="hashAlgorithm">O algoritmo de hash a ser usado para derivar o material de chave.</param>
      <returns>O hash do segredo compartilhado.</returns>
      <exception cref="T:System.ArgumentException">A curva usada por <paramref name="otherPartyPublicKey" /> tem um tamanho diferente da curva dessa chave.
- ou -
O parâmetro <paramref name="hashAlgorithm" /> não especifica um hash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A curva usada por <paramref name="otherPartyPublicKey" /> é diferente da curva dessa chave.
- ou -
Essa instância representa apenas uma chave pública.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>Quando implementado em uma classe derivada, executa a derivação de chave usando um algoritmo de hash especificado com os dados opcionais anexados ou acrescentados.</summary>
      <param name="otherPartyPublicKey">A chave pública do outro participante.</param>
      <param name="hashAlgorithm">O algoritmo de hash a ser usado para derivar o material de chave.</param>
      <param name="secretPrepend">Um valor a ser precedido ao segredo derivado antes do hash.</param>
      <param name="secretAppend">Um valor a ser acrescentado ao segredo derivado antes do hash.</param>
      <returns>O hash do segredo compartilhado após a anexação ou o acréscimo de dados, conforme solicitado.</returns>
      <exception cref="T:System.NotImplementedException">Uma classe derivada deve substituir esse método.</exception>
      <exception cref="T:System.ArgumentException">A curva usada por <paramref name="otherPartyPublicKey" /> tem um tamanho diferente da curva dessa chave.
- ou -
O parâmetro <paramref name="hashAlgorithm" /> não especifica um hash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A curva usada por <paramref name="otherPartyPublicKey" /> é diferente da curva dessa chave.
- ou -
Essa instância representa apenas uma chave pública.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>Executa a derivação de chave usando um algoritmo HMAC (Message Authentication Code baseado em hash) especificado.</summary>
      <param name="otherPartyPublicKey">A chave pública do outro participante.</param>
      <param name="hashAlgorithm">O algoritmo de hash a ser usado para derivar o material de chave.</param>
      <param name="hmacKey">A chave para o HMAC.</param>
      <returns>O HMAC do segredo compartilhado.</returns>
      <exception cref="T:System.ArgumentException">A curva usada por <paramref name="otherPartyPublicKey" /> tem um tamanho diferente da curva dessa chave.
- ou -
O parâmetro <paramref name="hashAlgorithm" /> não especifica um hash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A curva usada por <paramref name="otherPartyPublicKey" /> é diferente da curva dessa chave.
- ou -
Essa instância representa apenas uma chave pública.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])">
      <summary>Quando implementado em uma classe derivada, executa a derivação de chave usando um algoritmo HMAC (Message Authentication Code baseado em hash) especificado com os dados opcionais acrescentados ou anexados.</summary>
      <param name="otherPartyPublicKey">A chave pública do outro participante.</param>
      <param name="hashAlgorithm">O algoritmo de hash a ser usado para derivar o material de chave.</param>
      <param name="hmacKey">A chave para o HMAC.</param>
      <param name="secretPrepend">Um valor a ser precedido ao segredo derivado antes do hash.</param>
      <param name="secretAppend">Um valor a ser acrescentado ao segredo derivado antes do hash.</param>
      <returns>O HMAC do segredo compartilhado após a anexação ou o acréscimo de dados, conforme solicitado.</returns>
      <exception cref="T:System.NotImplementedException">Uma classe derivada deve substituir esse método.</exception>
      <exception cref="T:System.ArgumentException">A curva usada por <paramref name="otherPartyPublicKey" /> tem um tamanho diferente da curva dessa chave.
- ou -
O parâmetro <paramref name="hashAlgorithm" /> não especifica um hash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A curva usada por <paramref name="otherPartyPublicKey" /> é diferente da curva dessa chave.
- ou -
Essa instância representa apenas uma chave pública.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>Quando implementada em uma classe derivada, executa uma derivação de chave no segredo compartilhado.</summary>
      <param name="otherPartyPublicKey">A chave pública do outro participante.</param>
      <returns>O resultado da função de derivação de chaves, usando o segredo compartilhado como uma entrada.</returns>
      <exception cref="T:System.ArgumentException">A curva usada por <paramref name="otherPartyPublicKey" /> tem um tamanho diferente da curva dessa chave.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A curva usada por <paramref name="otherPartyPublicKey" /> é diferente da curva dessa chave.
- ou -
Essa instância representa apenas uma chave pública.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])">
      <summary>Quando implementada em uma classe derivada, executa a derivação de chave usando a PRF (função pseudoaleatória) do protocolo TLS 1.1.</summary>
      <param name="otherPartyPublicKey">A chave pública do outro participante.</param>
      <param name="prfLabel">O rótulo PRF codificado em ASCII.</param>
      <param name="prfSeed">A semente PRF de 64 bytes.</param>
      <returns>Os primeiros 48 bytes do protocolo TLS 1.1 PRF, usando o segredo compartilhado como a chave.</returns>
      <exception cref="T:System.NotImplementedException">Uma classe derivada deve substituir esse método.</exception>
      <exception cref="T:System.ArgumentException">A curva usada por <paramref name="otherPartyPublicKey" /> tem um tamanho diferente da curva dessa chave.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" />, <paramref name="prfLabel" /> ou <paramref name="prfSeed" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="prfSeed" /> não tem tamanho de exatamente 64 bytes.
- ou -
A curva usada por <paramref name="otherPartyPublicKey" /> é diferente da curva dessa chave.
- ou -
Essa instância representa apenas uma chave pública.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportECPrivateKey">
      <summary>Exporta a chave atual no formato ECPrivateKey.</summary>
      <returns>Uma matriz de bytes que contém a representação ECPrivateKey dessa chave.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não é possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)">
      <summary>Quando substituído em uma classe derivada, exporta as informações de chave pública ou chaves públicas e privadas usando o formulário de curva explícita de uma chave <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> de trabalho para uma estrutura <see cref="T:System.Security.Cryptography.ECParameters" /> para que ela possa ser passada para o método <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> para incluir parâmetros particulares; caso contrário, <see langword="false" />.</param>
      <returns>Um objeto que representa o ponto na curva para essa chave, usando o formato de curva explícita.</returns>
      <exception cref="T:System.NotImplementedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)">
      <summary>Quando substituído em uma classe derivada, exporta as informações de chave pública ou chaves públicas e privadas de uma chave <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> de trabalho em uma estrutura <see cref="T:System.Security.Cryptography.ECParameters" />, por isso pode ser passado para o método <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> para incluir parâmetros particulares; caso contrário, <see langword="false" /> para incluir somente os parâmetros públicos.</param>
      <returns>Um objeto que representa o ponto na curva para essa chave. Ele pode ser passado para o método <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />.</returns>
      <exception cref="T:System.NotImplementedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.FromXmlString(System.String)">
      <summary>Esse método é gerado em todos os casos.</summary>
      <param name="xmlString">A cadeia de caracteres XML a ser usada para reconstruir o objeto <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />.</param>
      <exception cref="T:System.NotImplementedException">Em todos os casos.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>Quando substituído em uma classe derivada, gera um novo par de chaves pública/privada efêmero para a curva especificada.</summary>
      <param name="curve">A curva usada para gerar um par de chaves pública/privada efêmero.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> não é validado.</exception>
      <exception cref="T:System.NotImplementedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa o par de chaves pública/privada de uma estrutura de ECPrivateKey, substituindo as chaves desse objeto.</summary>
      <param name="source">Os bytes de uma estrutura de ECPrivateKey na codificação ASN.1-BER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O conteúdo de <paramref name="source" /> não representa uma estrutura de ECPrivateKey do PKCS nº 8 codificada por ASN.1-BER.
- ou -
Falha na importação da chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa o par de chaves pública/privada de uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 após descriptografar com uma senha baseada em bytes, substituindo as chaves desse objeto.</summary>
      <param name="passwordBytes">Os bytes a serem usados como senha ao descriptografar o material da chave.</param>
      <param name="source">Os bytes de uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 na codificação ASN.1-BER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A senha está incorreta.
- ou -
O conteúdo de <paramref name="source" /> indica que a KDF (Função de Derivação de Chaves) a ser aplicada é a KDF do PKCS nº 12 herdada, que requer senhas baseadas em <see cref="T:System.Char" />.
- ou -
O conteúdo de <paramref name="source" /> não representa uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 codificada por ASN.1-BER.
- ou -
O conteúdo de <paramref name="source" /> indica que a chave é de um algoritmo que não é aquele representado por essa instância.
- ou -
O conteúdo de <paramref name="source" /> representa a chave em um formato sem suporte.
- ou -
Falha na importação da chave específica do algoritmo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa o par de chaves pública/privada de uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 após descriptografar com uma senha baseada em caracteres, substituindo as chaves desse objeto.</summary>
      <param name="password">A senha a ser usada para descriptografar o material da chave.</param>
      <param name="source">Os bytes de uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 na codificação ASN.1-BER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A senha está incorreta.
- ou -
O conteúdo de <paramref name="source" /> não representa uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 codificada por ASN.1-BER.
- ou -
O conteúdo de <paramref name="source" /> indica que a chave é de um algoritmo que não é aquele representado por essa instância.
- ou -
O conteúdo de <paramref name="source" /> representa a chave em um formato sem suporte.
- ou -
Falha na importação da chave específica do algoritmo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>Quando substituído em uma classe derivada, importa os parâmetros especificados para um <see cref="T:System.Security.Cryptography.ECCurve" /> como uma chave efêmera para o objeto <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> atual.</summary>
      <param name="parameters">Os parâmetros da curva a serem importados.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> não é validado.</exception>
      <exception cref="T:System.NotImplementedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa o par de chaves pública/privada de uma estrutura de PrivateKeyInfo do PKCS nº 8 após a descriptografia, substituindo as chaves desse objeto.</summary>
      <param name="source">Os bytes de uma estrutura de PrivateKeyInfo do PKCS nº 8 na codificação ASN.1-BER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O conteúdo de <paramref name="source" /> não representa uma estrutura de PrivateKeyInfo do PKCS nº 8 codificada por ASN.1-BER.
- ou -
O conteúdo de <paramref name="source" /> indica que a chave é de um algoritmo que não é aquele representado por essa instância.
- ou -
O conteúdo de <paramref name="source" /> representa a chave em um formato sem suporte.
- ou -
Falha na importação da chave específica do algoritmo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa a chave pública de uma estrutura de SubjectPublicKeyInfo X.509 após a descriptografia, substituindo as chaves desse objeto.</summary>
      <param name="source">Os bytes de uma estrutura de SubjectPublicKeyInfo X.509 na codificação ASN.1-DER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O conteúdo de <paramref name="source" /> não representa uma estrutura de SubjectPublicKeyInfo X.509 codificada por ASN.1-DER.
- ou -
O conteúdo de <paramref name="source" /> indica que a chave é de um algoritmo que não é aquele representado por essa instância.
- ou -
O conteúdo de <paramref name="source" /> representa a chave em um formato sem suporte.
- ou -
Falha na importação da chave específica do algoritmo.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm">
      <summary>Obtém o nome do algoritmo de troca de chaves.</summary>
      <returns>O nome do algoritmo de troca de chave.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.PublicKey">
      <summary>Obtém a chave pública que está sendo usada pela instância atual do ECDH (Diffie-Hellman de curva elíptica).</summary>
      <returns>A parte pública do par de chaves ECDH que está sendo usada por esta instância de <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm">
      <summary>Obtém o nome do algoritmo de assinatura.</summary>
      <returns>Sempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ToXmlString(System.Boolean)">
      <summary>Esse método é gerado em todos os casos.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> para incluir parâmetros particulares; caso contrário, <see langword="false" />.</param>
      <returns>Esse método não retorna um valor.</returns>
      <exception cref="T:System.NotImplementedException">Em todos os casos.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato ECPrivateKey para um buffer fornecido.</summary>
      <param name="destination">O intervalo de bytes que receberá os dados de ECPrivateKey.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não é possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato EncryptedPrivateKeyInfo do PKCS n º 8 para um buffer fornecido, usando uma senha baseada em bytes.</summary>
      <param name="passwordBytes">Os bytes a serem usados como senha ao criptografar o material da chave.</param>
      <param name="pbeParameters">Os parâmetros de PBE (criptografia baseada em senha) a serem usados ao criptografar o material da chave.</param>
      <param name="destination">O intervalo de bytes que receberá os dados de EncryptedPrivateKeyInfo do PKCS n º 8.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.
- ou -
<paramref name="pbeParameters" /> indica que <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> deve ser usado, o que exige senhas baseadas em <see cref="T:System.Char" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato EncryptedPrivateKeyInfo do PKCS n º 8 para um buffer fornecido, usando uma senha baseada em caracteres.</summary>
      <param name="password">A senha a ser usada ao criptografar o material da chave.</param>
      <param name="pbeParameters">Os parâmetros de PBE (criptografia baseada em senha) a serem usados ao criptografar o material da chave.</param>
      <param name="destination">O intervalo de bytes que receberá os dados de EncryptedPrivateKeyInfo do PKCS n º 8.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato PrivateKeyInfo do PKCS n º 8 para um buffer fornecido.</summary>
      <param name="destination">O intervalo de bytes que receberá os dados de PrivateKeyInfo do PKCS n º 8.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato SubjectPublicKeyInfo X.509 para um buffer fornecido.</summary>
      <param name="destination">O intervalo de bytes que receberá os dados de SubjectPublicKeyInfo X.509.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não é possível exportar a chave.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanPublicKey">
      <summary>Fornece uma classe base abstrata da qual todas as implementações <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> devem ser herdadas.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor(System.Byte[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />.</summary>
      <param name="keyBlob">Uma matriz de bytes que representa um objeto <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose">
      <summary>Libera todos os recursos usados pela instância atual da classe <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pela classe <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> e, opcionalmente, libera os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportExplicitParameters">
      <summary>Quando substituído em uma classe derivada, exporta o <see cref="T:System.Security.Cryptography.ECParameters" /> explícito para um objeto <see cref="T:System.Security.Cryptography.ECCurve" />.</summary>
      <returns>Um objeto que representa o ponto na curva para essa chave, usando o formato de curva explícita.</returns>
      <exception cref="T:System.NotSupportedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportParameters">
      <summary>Quando substituído em uma classe derivada, exporta o <see cref="T:System.Security.Cryptography.ECParameters" /> nomeada ou explícito para um objeto <see cref="T:System.Security.Cryptography.ECCurve" />.</summary>
      <returns>Um objeto que representa o ponto na curva para essa chave.</returns>
      <exception cref="T:System.NotSupportedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToByteArray">
      <summary>Serializa o BLOB da chave <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> para uma matriz de bytes.</summary>
      <returns>Uma matriz de bytes que contém a chave pública ECDH (Diffie-Hellman de curva elíptica) serializada.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToXmlString">
      <summary>Serializa a chave pública <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> para uma cadeia de caracteres XML.</summary>
      <returns>Uma cadeia de caracteres XML que contém a chave pública ECDH (Diffie-Hellman de curva elíptica) serializada.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDsa">
      <summary>Fornece uma classe base abstrata que encapsula o ECDSA (Algoritmo de Assinatura Digital da Curva Elíptica).</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.ECDsa" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create">
      <summary>Cria uma nova instância da implementação padrão do ECDSA (Algoritmo de Assinatura Digital Curva Elíptica).</summary>
      <returns>Uma nova instância da implementação padrão (<see cref="T:System.Security.Cryptography.ECDsaCng" />) desta classe.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)">
      <summary>Cria uma nova instância da implementação do padrão de Algoritmo de Assinatura Digital de Curva Elíptica (ECDSA) com uma chave recém-gerada sobre a curva especificada.</summary>
      <param name="curve">A curva a ser usada para a geração de chave.</param>
      <returns>Uma nova instância da implementação padrão (<see cref="T:System.Security.Cryptography.ECDsaCng" />) desta classe.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)">
      <summary>Cria uma nova instância da implementação padrão do ECDSA (Algoritmo de Assinatura Digital de Curva Elíptica) usando os parâmetros especificados com a chave.</summary>
      <param name="parameters">Os parâmetros que representam a chave a ser usada.</param>
      <returns>Uma nova instância da implementação padrão (<see cref="T:System.Security.Cryptography.ECDsaCng" />) desta classe.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.String)">
      <summary>Cria uma nova instância da implementação especificada do ECDSA (Algoritmo de Assinatura Digital Curva Elíptica).</summary>
      <param name="algorithm">O nome de uma implementação de ECDSA. Todas as seguintes cadeias de caracteres se referem à mesma implementação, o que é a única implementação compatível atualmente no .NET Framework:
– "ECDsa"
– "ECDsaCng"
– "System.Security.Cryptography.ECDsaCng"
Você também pode fornecer o nome de uma implementação de ECDSA personalizada.</param>
      <returns>Uma nova instância da implementação especificada desta classe. Se o nome do algoritmo especificado não for mapeado para uma implementação ECDSA, esse método retornará <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="algorithm" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportECPrivateKey">
      <summary>Exporta a chave atual no formato ECPrivateKey.</summary>
      <returns>Uma matriz de bytes que contém a representação ECPrivateKey dessa chave.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não é possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)">
      <summary>Quando substituído em uma classe derivada, exporta os parâmetros explícitos para uma curva elíptica.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> para incluir parâmetros particulares; caso contrário, <see langword="false" />.</param>
      <returns>Os parâmetros que representam o ponto na curva para essa chave, usando o formato de curva explícita.</returns>
      <exception cref="T:System.NotSupportedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)">
      <summary>Quando substituído em uma classe derivada, exporta os parâmetros nomeados ou explícitos de uma curva elíptica. Se a curva tiver um nome, o campo <see cref="F:System.Security.Cryptography.ECParameters.Curve" /> conterá parâmetros de curva nomeados, caso contrário, ele conterá parâmetros explícitos.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> para incluir parâmetros particulares; caso contrário, <see langword="false" />.</param>
      <returns>Os parâmetros que representam o ponto na curva para essa chave.</returns>
      <exception cref="T:System.NotSupportedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.FromXmlString(System.String)">
      <summary>Esse método é gerado em todos os casos.</summary>
      <param name="xmlString">A cadeia de caracteres XML a ser usada para reconstruir o objeto <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />.</param>
      <exception cref="T:System.NotImplementedException">Em todos os casos.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>Quando substituído em uma classe derivada, gera um novo par de chaves pública/privada efêmero para a curva especificada, substituindo a chave atual.</summary>
      <param name="curve">A curva a usar para gerar a chave.</param>
      <exception cref="T:System.NotSupportedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Quando substituído em uma classe derivada, calcula o valor de hash de uma parte especificada de uma matriz de bytes usando o algoritmo de hash especificado.</summary>
      <param name="data">Os dados que passarão por hash.</param>
      <param name="offset">O índice do primeiro byte em <paramref name="data" /> que passará por hash.</param>
      <param name="count">O número de bytes que passaram por hash.</param>
      <param name="hashAlgorithm">O algoritmo a ser usado para efetuar hash nos dados.</param>
      <returns>Os dados com hash.</returns>
      <exception cref="T:System.NotImplementedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Quando substituído em uma classe derivada, calcula o valor de hash do fluxo binário especificado usando um algoritmo de hash especificado.</summary>
      <param name="data">O fluxo binário que passará por hash.</param>
      <param name="hashAlgorithm">O algoritmo a ser usado para efetuar hash nos dados.</param>
      <returns>Os dados com hash.</returns>
      <exception cref="T:System.NotImplementedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa o par de chaves pública/privada de uma estrutura de ECPrivateKey, substituindo as chaves desse objeto.</summary>
      <param name="source">Os bytes de uma estrutura de ECPrivateKey na codificação ASN.1-BER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O conteúdo de <paramref name="source" /> não representa uma estrutura de ECPrivateKey do PKCS nº 8 codificada por ASN.1-BER.
- ou -
Falha na importação da chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa o par de chaves pública/privada de uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 após descriptografar com uma senha baseada em bytes, substituindo as chaves desse objeto.</summary>
      <param name="passwordBytes">Os bytes a serem usados como senha ao descriptografar o material da chave.</param>
      <param name="source">Os bytes de uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 na codificação ASN.1-BER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A senha está incorreta.
- ou -
O conteúdo de <paramref name="source" /> indica que a KDF (Função de Derivação de Chaves) a ser aplicada é a KDF do PKCS nº 12 herdada, que requer senhas baseadas em <see cref="T:System.Char" />.
- ou -
O conteúdo de <paramref name="source" /> não representa uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 codificada por ASN.1-BER.
- ou -
O conteúdo de <paramref name="source" /> indica que a chave é de um algoritmo que não é aquele representado por essa instância.
- ou -
O conteúdo de <paramref name="source" /> representa a chave em um formato sem suporte.
- ou -
Falha na importação da chave específica do algoritmo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa o par de chaves pública/privada de uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 após descriptografar com uma senha baseada em caracteres, substituindo as chaves desse objeto.</summary>
      <param name="password">A senha a ser usada para descriptografar o material da chave.</param>
      <param name="source">Os bytes de uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 na codificação ASN.1-BER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A senha está incorreta.
- ou -
O conteúdo de <paramref name="source" /> não representa uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 codificada por ASN.1-BER.
- ou -
O conteúdo de <paramref name="source" /> indica que a chave é de um algoritmo que não é aquele representado por essa instância.
- ou -
O conteúdo de <paramref name="source" /> representa a chave em um formato sem suporte.
- ou -
Falha na importação da chave específica do algoritmo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>Quando substituído em uma classe derivada, importa os parâmetros especificados.</summary>
      <param name="parameters">Os parâmetros de curva.</param>
      <exception cref="T:System.NotSupportedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa o par de chaves pública/privada de uma estrutura de PrivateKeyInfo do PKCS nº 8 após a descriptografia, substituindo as chaves desse objeto.</summary>
      <param name="source">Os bytes de uma estrutura de PrivateKeyInfo do PKCS nº 8 na codificação ASN.1-BER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O conteúdo de <paramref name="source" /> não representa uma estrutura de PrivateKeyInfo do PKCS nº 8 codificada por ASN.1-BER.
- ou -
O conteúdo de <paramref name="source" /> indica que a chave é de um algoritmo que não é aquele representado por essa instância.
- ou -
O conteúdo de <paramref name="source" /> representa a chave em um formato sem suporte.
- ou -
Falha na importação da chave específica do algoritmo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa a chave pública de uma estrutura de SubjectPublicKeyInfo X.509 após a descriptografia, substituindo as chaves desse objeto.</summary>
      <param name="source">Os bytes de uma estrutura de SubjectPublicKeyInfo X.509 na codificação ASN.1-DER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O conteúdo de <paramref name="source" /> não representa uma estrutura de SubjectPublicKeyInfo X.509 codificada por ASN.1-DER.
- ou -
O conteúdo de <paramref name="source" /> indica que a chave é de um algoritmo que não é aquele representado por essa instância.
- ou -
O conteúdo de <paramref name="source" /> representa a chave em um formato sem suporte.
- ou -
Falha na importação da chave específica do algoritmo.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
      <summary>Obtém o nome do algoritmo de troca de chaves.</summary>
      <returns>Sempre <see langword="null" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
      <summary>Obtém o nome do algoritmo de assinatura.</summary>
      <returns>A cadeia de caracteres "ECDsa".</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Calcula o valor de hash de uma parte da matriz de byte especificada usando o algoritmo de hash especificado e assina o valor de hash resultante.</summary>
      <param name="data">Os dados de entrada para os quais o hash será calculado.</param>
      <param name="offset">O deslocamento na matriz no qual os dados começarão a ser usados.</param>
      <param name="count">O número de bytes na matriz a ser usado como dados.</param>
      <param name="hashAlgorithm">O algoritmo de hash a ser usado para criar o valor de hash.</param>
      <returns>A assinatura ECDSA para os dados especificados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> é menor que zero.
- ou -
<paramref name="count" /> é menor que zero.
- ou -
<paramref name="offset" /> + <paramref name="count" /> – 1 resulta em um índice que está além do limite superior de <paramref name="data" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Calcula o valor de hash da matriz de byte especificada usando o algoritmo de hash especificado e assina o valor de hash resultante.</summary>
      <param name="data">Os dados de entrada para os quais o hash será calculado.</param>
      <param name="hashAlgorithm">O algoritmo de hash a ser usado para criar o valor de hash.</param>
      <returns>A assinatura ECDSA para os dados especificados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Calcula o valor de hash do fluxo especificado usando o algoritmo de hash especificado e assina o valor de hash resultante.</summary>
      <param name="data">O fluxo de entrada para o qual calcular o hash.</param>
      <param name="hashAlgorithm">O algoritmo de hash a ser usado para criar o valor de hash.</param>
      <returns>A assinatura ECDSA para os dados especificados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
      <summary>Gera uma assinatura digital para os valores de hash especificados.</summary>
      <param name="hash">O valor de hash dos dados a serem assinados.</param>
      <returns>Uma assinatura digital para os valores de hash especificados.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="hash" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)">
      <summary>Esse método é gerado em todos os casos.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> para incluir parâmetros particulares; caso contrário, <see langword="false" />.</param>
      <returns>Esse método não retorna um valor.</returns>
      <exception cref="T:System.NotImplementedException">Em todos os casos.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato ECPrivateKey para um buffer fornecido.</summary>
      <param name="destination">O intervalo de bytes que receberá os dados de ECPrivateKey.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não é possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato EncryptedPrivateKeyInfo do PKCS n º 8 para um buffer fornecido, usando uma senha baseada em bytes.</summary>
      <param name="passwordBytes">Os bytes a serem usados como senha ao criptografar o material da chave.</param>
      <param name="pbeParameters">Os parâmetros de PBE (criptografia baseada em senha) a serem usados ao criptografar o material da chave.</param>
      <param name="destination">O intervalo de bytes que receberá os dados de EncryptedPrivateKeyInfo do PKCS n º 8.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.
- ou -
<paramref name="pbeParameters" /> indica que <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> deve ser usado, o que exige senhas baseadas em <see cref="T:System.Char" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato EncryptedPrivateKeyInfo do PKCS n º 8 para um buffer fornecido, usando uma senha baseada em caracteres.</summary>
      <param name="password">A senha a ser usada ao criptografar o material da chave.</param>
      <param name="pbeParameters">Os parâmetros de PBE (criptografia baseada em senha) a serem usados ao criptografar o material da chave.</param>
      <param name="destination">O intervalo de bytes que receberá os dados de EncryptedPrivateKeyInfo do PKCS n º 8.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato PrivateKeyInfo do PKCS n º 8 para um buffer fornecido.</summary>
      <param name="destination">O intervalo de bytes que receberá os dados de PrivateKeyInfo do PKCS n º 8.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato SubjectPublicKeyInfo X.509 para um buffer fornecido.</summary>
      <param name="destination">O intervalo de bytes que receberá os dados de SubjectPublicKeyInfo X.509.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>Tenta calcular o valor de hash do intervalo de bytes somente leitura especificado para o destino fornecido usando o algoritmo de hash especificado.</summary>
      <param name="data">Os dados que passarão por hash.</param>
      <param name="destination">O buffer que recebe o valor de hash.</param>
      <param name="hashAlgorithm">O algoritmo a ser usado para efetuar hash nos dados.</param>
      <param name="bytesWritten">Quando esse método é retornado, o número total de bytes gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="false" /> se <paramref name="destination" /> não for longo o suficiente para receber o valor de hash.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>Tenta calcular a assinatura digital ECDSA para o intervalo de bytes somente leitura especificado no destino fornecido usando o algoritmo de hash especificado e a chave atual.</summary>
      <param name="data">Os dados a serem assinados.</param>
      <param name="destination">O buffer que recebe a assinatura.</param>
      <param name="hashAlgorithm">O algoritmo a ser usado para efetuar hash nos dados para assinatura.</param>
      <param name="bytesWritten">Quando esse método é retornado, o número total de bytes gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="false" /> se <paramref name="destination" /> não for longo o suficiente para receber a assinatura.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Tenta calcular a assinatura digital ECDSA para o intervalo de bytes somente leitura especificado que representa um hash de dados no destino fornecido usando a chave atual.</summary>
      <param name="hash">O valor de hash dos dados a serem assinados.</param>
      <param name="destination">O buffer que recebe a assinatura.</param>
      <param name="bytesWritten">Quando esse método é retornado, o número total de bytes gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="false" /> se <paramref name="destination" /> não for longo o suficiente para receber a assinatura.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifica se uma assinatura digital é adequada para a chave atual e para os dados fornecidos com um algoritmo de hash especificado.</summary>
      <param name="data">Os dados assinados.</param>
      <param name="signature">Os dados de assinatura a serem verificados.</param>
      <param name="hashAlgorithm">O algoritmo de hash usado para criar o valor de hash dos dados.</param>
      <returns>
        <see langword="true" /> se a assinatura for válida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.
- ou -
<paramref name="signature" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifica se uma assinatura digital é adequada para a chave atual e para a parte dos dados fornecida com um algoritmo de hash especificado.</summary>
      <param name="data">Os dados assinados.</param>
      <param name="offset">O índice inicial no qual calcular o hash.</param>
      <param name="count">O número de bytes que passaram por hash.</param>
      <param name="signature">Os dados de assinatura a serem verificados.</param>
      <param name="hashAlgorithm">O algoritmo de hash usado para criar o valor de hash dos dados.</param>
      <returns>
        <see langword="true" /> se a assinatura for válida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.
- ou -
<paramref name="signature" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> é menor que zero.
- ou -
<paramref name="count" /> é menor que zero.
- ou -
<paramref name="offset" /> + <paramref name="count" /> – 1 resulta em um índice que está além do limite superior de <paramref name="data" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifica se uma assinatura digital é adequada para a chave atual e para os dados fornecidos com um algoritmo de hash especificado.</summary>
      <param name="data">Os dados assinados.</param>
      <param name="signature">Os dados de assinatura a serem verificados.</param>
      <param name="hashAlgorithm">O algoritmo de hash usado para criar o valor de hash dos dados.</param>
      <returns>
        <see langword="true" /> se a assinatura for válida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.
- ou -
<paramref name="signature" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifica se uma assinatura digital é adequada para a chave atual e para os dados fornecidos com um algoritmo de hash especificado.</summary>
      <param name="data">Os dados assinados.</param>
      <param name="signature">A assinatura a ser verificada.</param>
      <param name="hashAlgorithm">O algoritmo de hash usado para criar o valor de hash dos dados.</param>
      <returns>
        <see langword="true" /> se a assinatura for válida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
      <summary>Verifica se uma assinatura digital é adequada para a chave atual e para o hash de dados fornecido.</summary>
      <param name="hash">O valor de hash dos dados a serem verificados.</param>
      <param name="signature">A assinatura digital dos dados a serem verificados em relação ao valor de hash.</param>
      <returns>
        <see langword="true" /> se a assinatura for válida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> ou <paramref name="signature" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Verifica se uma assinatura digital é adequada para a chave atual e para o hash de dados fornecido.</summary>
      <param name="hash">O valor de hash dos dados a serem verificados.</param>
      <param name="signature">A assinatura digital dos dados a serem verificados em relação ao valor de hash.</param>
      <returns>
        <see langword="true" /> se a assinatura for válida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECParameters">
      <summary>Representa os parâmetros padrão para o algoritmo ECC (criptografia de curva elíptica).</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Curve">
      <summary>Representa a curva associada à chave pública (<see cref="F:System.Security.Cryptography.ECParameters.Q" />) e a chave privada opcional (<see cref="F:System.Security.Cryptography.ECParameters.D" />).</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.D">
      <summary>Representa a chave privada <see langword="D" /> para o algoritmo ECC (criptografia de curva elíptica) armazenado no formato big-endian.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Q">
      <summary>Representa a chave pública <see langword="Q" /> para o algoritmo ECC (criptografia de curva elíptica).</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECParameters.Validate">
      <summary>Valida o objeto atual.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Os parâmetros de chave ou curva não são válidos para o tipo de curva atual.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECPoint">
      <summary>Representa um par coordenado (X, Y) para estruturas ECC (criptografia de curva elíptica).</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.X">
      <summary>Representa a coordenada X.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.Y">
      <summary>Representa a coordenada Y.</summary>
    </member>
    <member name="T:System.Security.Cryptography.HMACMD5">
      <summary>Calcula um HMAC (Hash-based Message Authentication Code) usando a função de hash <see cref="T:System.Security.Cryptography.MD5" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.HMACMD5" /> usando uma chave gerada aleatoriamente.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.HMACMD5" /> usando a chave especificada.</summary>
      <param name="key">A chave secreta para a criptografia <see cref="T:System.Security.Cryptography.HMACMD5" />. A chave poderá ter qualquer comprimento, mas se tiver mais de 64 bytes, ela será transformada em hash (usando SHA-1) para derivar uma chave de 64 bytes. Portanto, o tamanho recomendado da chave secreta é de 64 bytes.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.Dispose(System.Boolean)">
      <param name="disposing" />
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashCore(System.Byte[],System.Int32,System.Int32)">
      <param name="rgb" />
      <param name="ib" />
      <param name="cb" />
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashFinal" />
    <member name="M:System.Security.Cryptography.HMACMD5.Initialize" />
    <member name="P:System.Security.Cryptography.HMACMD5.Key" />
    <member name="M:System.Security.Cryptography.HMACMD5.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA1">
      <summary>Calcula um HMAC (Hash-based Message Authentication Code) usando a função de hash <see cref="T:System.Security.Cryptography.SHA1" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.HMACSHA1" /> com uma chave gerada aleatoriamente.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.HMACSHA1" /> com os dados de chave especificados.</summary>
      <param name="key">A chave secreta para a criptografia <see cref="T:System.Security.Cryptography.HMACSHA1" />. A chave poderá ter qualquer comprimento, mas se tiver mais de 64 bytes ela terá hash (usando SHA-1) para derivar uma chave de 64 bytes. Portanto, o tamanho recomendado da chave secreta é de 64 bytes.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.HMACSHA1" /> com os dados de chave especificados e um valor que especifica se deve-se ou não usar a versão gerenciada do algoritmo SHA1.</summary>
      <param name="key">A chave secreta para a criptografia <see cref="T:System.Security.Cryptography.HMACSHA1" />. A chave poderá ter qualquer comprimento, mas se tiver mais de 64 bytes ela será transformada em hash (usando SHA-1) para derivar uma chave de 64 bytes. Portanto, o tamanho recomendado da chave secreta é de 64 bytes.</param>
      <param name="useManagedSha1">
        <see langword="true" /> para usar a implementação gerenciada do algoritmo SHA1 (a classe <see cref="T:System.Security.Cryptography.SHA1Managed" />); <see langword="false" /> para usar a implementação não gerenciada (a classe <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" />).</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)">
      <summary>Este membro substitui <see cref="M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)" />, e pode haver uma documentação mais completa disponível nesse tópico.
Libera os recursos não gerenciados usados pelo <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> e opcionalmente libera os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar os recursos gerenciados e não gerenciados; false para liberar somente os recursos não gerenciados.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>Encaminha os dados gravados no objeto para o algoritmo de hash SHA1 para computar o HMAC (Hash-based Message Authentication Code).</summary>
      <param name="rgb">Os dados de entrada.</param>
      <param name="ib">O deslocamento para a matriz de bytes com base na qual os dados começarão a ser usados.</param>
      <param name="cb">O número de bytes na matriz a ser usado como dados.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashFinal" />
    <member name="M:System.Security.Cryptography.HMACSHA1.Initialize">
      <summary>Inicializa uma instância de <see cref="T:System.Security.Cryptography.HMACSHA1" />.</summary>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA1.Key">
      <summary>Obtém ou define a chave a ser usada no algoritmo de hash.</summary>
      <returns>A chave a ser usada no algoritmo de hash.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA256">
      <summary>Calcula um HMAC (Hash-based Message Authentication Code) usando a função de hash <see cref="T:System.Security.Cryptography.SHA256" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.HMACSHA256" /> com uma chave gerada aleatoriamente.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.HMACSHA256" /> com os dados de chave especificados.</summary>
      <param name="key">A chave secreta para a criptografia <see cref="T:System.Security.Cryptography.HMACSHA256" />. A chave pode ter qualquer tamanho. No entanto, o tamanho recomendado é 64 bytes. Se a chave tiver mais de 64 bytes, ela será transformada em hash (usando SHA-256) para derivar uma chave de 64 bytes. Se tiver menos que 64 bytes, ela será preenchida para 64 bytes.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.Dispose(System.Boolean)">
      <param name="disposing" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashCore(System.Byte[],System.Int32,System.Int32)">
      <param name="rgb" />
      <param name="ib" />
      <param name="cb" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashFinal" />
    <member name="M:System.Security.Cryptography.HMACSHA256.Initialize" />
    <member name="P:System.Security.Cryptography.HMACSHA256.Key" />
    <member name="M:System.Security.Cryptography.HMACSHA256.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA384">
      <summary>Calcula um HMAC (Hash-based Message Authentication Code) usando a função de hash <see cref="T:System.Security.Cryptography.SHA384" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.HMACSHA384" /> usando uma chave gerada aleatoriamente.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.HMACSHA384" /> usando os dados de chave especificados.</summary>
      <param name="key">A chave secreta para a criptografia <see cref="T:System.Security.Cryptography.HMACSHA384" />. A chave pode ter qualquer tamanho. No entanto, o tamanho recomendado é 128 bytes. Se a chave tiver mais de 128 bytes, ela será transformada em hash (usando SHA-384) para derivar uma chave de 128 bytes. Se for menor que 128 bytes, ela será preenchida até 128 bytes.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.Dispose(System.Boolean)">
      <param name="disposing" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashCore(System.Byte[],System.Int32,System.Int32)">
      <param name="rgb" />
      <param name="ib" />
      <param name="cb" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashFinal" />
    <member name="M:System.Security.Cryptography.HMACSHA384.Initialize" />
    <member name="P:System.Security.Cryptography.HMACSHA384.Key" />
    <member name="P:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues">
      <summary>Fornece uma solução alternativa para a implementação .NET Framework 2.0 do algoritmo <see cref="T:System.Security.Cryptography.HMACSHA384" />, o que é inconsistente com a implementação .NET Framework 2.0 Service Pack 1 do algoritmo.</summary>
      <returns>
        <see langword="true" /> para permitir que .NET Framework 2.0 Service Pack 1 aplicativos interajam com .NET Framework 2.0 aplicativos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA512">
      <summary>Calcula um HMAC (Hash-based Message Authentication Code) usando a função de hash <see cref="T:System.Security.Cryptography.SHA512" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.HMACSHA512" /> com uma chave gerada aleatoriamente.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.HMACSHA512" /> com os dados de chave especificados.</summary>
      <param name="key">A chave secreta para a criptografia <see cref="T:System.Security.Cryptography.HMACSHA512" />. A chave pode ter qualquer tamanho. No entanto, o tamanho recomendado é 128 bytes. Se a chave tiver mais de 128 bytes, ela será transformada em hash (usando SHA-512) para derivar uma chave de 128 bytes. Se for menor que 128 bytes, ela será preenchida até 128 bytes.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.Dispose(System.Boolean)">
      <param name="disposing" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashCore(System.Byte[],System.Int32,System.Int32)">
      <param name="rgb" />
      <param name="ib" />
      <param name="cb" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashFinal" />
    <member name="M:System.Security.Cryptography.HMACSHA512.Initialize" />
    <member name="P:System.Security.Cryptography.HMACSHA512.Key" />
    <member name="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
      <summary>Fornece uma solução alternativa para a implementação .NET Framework 2.0 do algoritmo <see cref="T:System.Security.Cryptography.HMACSHA512" />, o que é inconsistente com a implementação .NET Framework 2.0 Service Pack 1.</summary>
      <returns>
        <see langword="true" /> para permitir que .NET Framework 2.0 Service Pack 1 aplicativos interajam com .NET Framework 2.0 aplicativos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.IncrementalHash">
      <summary>Fornece suporte para contabilizar um valor do hash ou HMAC (Hash-based Message Authentication Code) de forma incremental em vários segmentos.</summary>
    </member>
    <member name="P:System.Security.Cryptography.IncrementalHash.AlgorithmName">
      <summary>Obtém o nome do algoritmo que está sendo executado. Algoritmos HMAC são prefixados por "HMAC" para diferenciá-los de um código hash sem chave.</summary>
      <returns>O nome do algoritmo que está sendo executado.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])">
      <summary>Acrescenta os dados especificados aos dados já processados no hash ou HMAC.</summary>
      <param name="data">Os dados a serem processados.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O objeto <see cref="T:System.Security.Cryptography.IncrementalHash" /> já foi descartado.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[],System.Int32,System.Int32)">
      <summary>Acrescenta o número especificado de bytes dos dados especificados, começando no deslocamento especificado, para os dados já processados no hash ou HMAC (Hash-based Message Authentication Code).</summary>
      <param name="data">Os dados a serem processados.</param>
      <param name="offset">O deslocamento para a matriz de bytes com base na qual os dados começarão a ser usados.</param>
      <param name="count">O número de bytes a serem usados de <paramref name="data" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> ou <paramref name="offset" /> é negativo.
-ou-
<paramref name="count" /> é maior que o tamanho de <paramref name="data" />.</exception>
      <exception cref="T:System.ArgumentException">A soma de <paramref name="offset" /> e <paramref name="count" /> é maior do que o tamanho dos dados.</exception>
      <exception cref="T:System.ObjectDisposedException">O objeto <see cref="T:System.Security.Cryptography.IncrementalHash" /> já foi descartado.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})">
      <param name="data" />
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)">
      <summary>Cria um <see cref="T:System.Security.Cryptography.IncrementalHash" /> para o algoritmo especificado.</summary>
      <param name="hashAlgorithm">O nome do algoritmo de hash a ser executado.</param>
      <returns>Uma instância <see cref="T:System.Security.Cryptography.IncrementalHash" /> pronta para calcular o algoritmo de hash especificado por <paramref name="hashAlgorithm" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou uma cadeia de caracteres vazia.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> não é um algoritmo de hash conhecido.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>Cria um <see cref="T:System.Security.Cryptography.IncrementalHash" /> para o algoritmo HMAC (Message Authentication Code com Hash) usando a chave e o algoritmo de hash especificados.</summary>
      <param name="hashAlgorithm">O nome do algoritmo de hash a ser executado dentro do HMAC.</param>
      <param name="key">A chave secreta para o HMAC. A chave pode ser de qualquer tamanho, mas uma chave maior do que o tamanho da saída do algoritmo de hash receberá um hash para derivar uma chave de tamanho correto. Portanto, o tamanho recomendado da chave secreta é o tamanho da saída do algoritmo de hash especificado.</param>
      <returns>Uma instância da classe <see cref="T:System.Security.Cryptography.IncrementalHash" /> pronta para calcular o algoritmo de hash especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou uma cadeia de caracteres vazia.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> não é um algoritmo de hash conhecido.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.Dispose">
      <summary>Libera os recursos usados pela instância atual da classe <see cref="T:System.Security.Cryptography.IncrementalHash" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetHashAndReset">
      <summary>Recupera o hash ou HMAC (Hash-based Message Authentication Code) dos dados acumulados de chamadas anteriores ao método <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])" /> e redefine o objeto para seu estado inicial.</summary>
      <returns>O HMAC ou hash computado.</returns>
      <exception cref="T:System.ObjectDisposedException">O objeto <see cref="T:System.Security.Cryptography.IncrementalHash" /> já foi descartado.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.TryGetHashAndReset(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.MaskGenerationMethod">
      <summary>Representa a classe abstrata da qual todos os algoritmos do gerador de máscara devem derivar.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.MaskGenerationMethod" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>Quando substituído em uma classe derivada, gera uma máscara com o comprimento especificado usando a semente aleatória especificada.</summary>
      <param name="rgbSeed">A semente aleatória a ser usada para computar a máscara.</param>
      <param name="cbReturn">O comprimento da máscara gerada em bytes.</param>
      <returns>Uma máscara gerada aleatoriamente cujo comprimento é igual ao parâmetro <paramref name="cbReturn" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.MD5">
      <summary>Representa a classe base abstrata da qual todas as implementações do algoritmo de hash <see cref="T:System.Security.Cryptography.MD5" /> herdam.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.#ctor">
      <summary>Inicializa uma nova instância de <see cref="T:System.Security.Cryptography.MD5" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create">
      <summary>Cria uma instância da implementação padrão do algoritmo de hash <see cref="T:System.Security.Cryptography.MD5" />.</summary>
      <returns>Uma nova instância do algoritmo de hash <see cref="T:System.Security.Cryptography.MD5" />.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">O algoritmo foi usado com o modo FIPS (Federal Information Processing Standards) habilitado, mas ele não é compatível com FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create(System.String)">
      <summary>Cria uma instância da implementação especificada do algoritmo de hash <see cref="T:System.Security.Cryptography.MD5" />.</summary>
      <param name="algName">O nome da implementação específica do <see cref="T:System.Security.Cryptography.MD5" /> a ser usada.</param>
      <returns>Uma nova instância da implementação especificada de <see cref="T:System.Security.Cryptography.MD5" />.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">O algoritmo descrito pelo parâmetro <paramref name="algName" /> foi usado com o modo FIPS (Federal Information Processing Standards) habilitado, mas ele não é compatível com FIPS.</exception>
    </member>
    <member name="T:System.Security.Cryptography.PKCS1MaskGenerationMethod">
      <summary>Calcula as máscaras de acordo com PKCS n º 1 para uso pelos algoritmos de troca de chaves.</summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.PKCS1MaskGenerationMethod" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>Gera e retorna uma máscara da semente aleatória especificada do comprimento especificado.</summary>
      <param name="rgbSeed">A semente aleatória a ser usada para computar a máscara.</param>
      <param name="cbReturn">O comprimento da máscara gerada em bytes.</param>
      <returns>Uma máscara gerada aleatoriamente cujo comprimento é igual ao parâmetro <paramref name="cbReturn" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.PKCS1MaskGenerationMethod.HashName">
      <summary>Obtém ou define o nome do tipo de algoritmo de hash ser usado para gerar a máscara.</summary>
      <returns>O nome do tipo que implementa o algoritmo de hash a ser usado para computar a máscara.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RandomNumberGenerator">
      <summary>Representa a classe abstrata da qual derivam todas as implementações de geradores de números aleatórios criptográficos.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
      <summary>Inicializa uma nova instância de <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create">
      <summary>Cria uma instância da implementação padrão de um gerador de número aleatório criptográfico que pode ser usada para gerar dados aleatórios.</summary>
      <returns>Uma nova instância de um gerador de número aleatório criptográfico.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
      <summary>Cria uma instância da implementação especificada de um gerador de número aleatório criptográfico.</summary>
      <param name="rngName">O nome da implementação do gerador de número aleatório a ser usada.</param>
      <returns>Uma nova instância de um gerador de número aleatório criptográfico.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
      <summary>Quando substituído em uma classe derivada, libera todos os recursos usados pela instância atual da classe <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
      <summary>Quando substituído em uma classe derivada, libera os recursos não gerenciados usados pelo <see cref="T:System.Security.Cryptography.RandomNumberGenerator" /> e, opcionalmente, libera os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Fill(System.Span{System.Byte})">
      <summary>Preenche um intervalo com bytes aleatórios criptograficamente fortes.</summary>
      <param name="data">O intervalo a ser preenchido com bytes aleatórios criptograficamente fortes.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
      <summary>Quando substituído em uma classe derivada, preenche uma matriz de bytes com uma sequência aleatória criptograficamente forte de valores.</summary>
      <param name="data">A matriz a ser preenchida com bytes aleatórios criptograficamente fortes.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Preenche a matriz de bytes especificada com uma sequência de valores aleatória e criptograficamente forte.</summary>
      <param name="data">A matriz a ser preenchida com bytes aleatórios criptograficamente fortes.</param>
      <param name="offset">O índice da matriz para iniciar a operação de preenchimento.</param>
      <param name="count">O número de bytes a preencher.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="count" /> é menor que 0</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> mais <paramref name="count" /> excede o comprimento de <paramref name="data" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Span{System.Byte})">
      <summary>Preenche um intervalo com bytes aleatórios criptograficamente fortes.</summary>
      <param name="data">O intervalo a ser preenchido com bytes aleatórios criptograficamente fortes.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetInt32(System.Int32)">
      <summary>Gera um inteiro aleatório maior ou igual a 0 e menor que um limite superior especificado usando um gerador de número aleatório criptograficamente forte.</summary>
      <param name="toExclusive">O limite superior exclusivo do intervalo aleatório.</param>
      <returns>Um inteiro aleatório maior ou igual a 0 e menor que <paramref name="toExclusive" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="toExclusive" /> é menor ou igual a 0.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetInt32(System.Int32,System.Int32)">
      <summary>Gera um inteiro aleatório maior ou igual a um limite inferior especificado e menor que um limite superior especificado usando um gerador de número aleatório criptograficamente forte.</summary>
      <param name="fromInclusive">O limite inferior inclusivo do intervalo aleatório.</param>
      <param name="toExclusive">O limite superior exclusivo do intervalo aleatório.</param>
      <returns>Um inteiro aleatório maior ou igual a <paramref name="fromInclusive" /> e menor que <paramref name="toExclusive" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="toExclusive" /> é menor ou igual ao parâmetro <paramref name="fromInclusive" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
      <summary>Quando substituído em uma classe derivada, preenche uma matriz de bytes com uma sequência aleatória criptograficamente forte de valores diferentes de zero.</summary>
      <param name="data">A matriz a ser preenchida com bytes aleatórios criptograficamente fortes diferentes de zero.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Span{System.Byte})">
      <summary>Preenche um intervalo de bytes com uma sequência aleatória criptograficamente forte de valores diferentes de zero.</summary>
      <param name="data">O intervalo a ser preenchido com bytes aleatórios criptograficamente fortes diferentes de zero.</param>
    </member>
    <member name="T:System.Security.Cryptography.RC2">
      <summary>Representa a classe base da qual todas as implementações do algoritmo <see cref="T:System.Security.Cryptography.RC2" /> devem ser derivadas.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.#ctor">
      <summary>Inicializa uma nova instância de <see cref="T:System.Security.Cryptography.RC2" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create">
      <summary>Cria uma instância de um objeto criptográfico para executar o algoritmo <see cref="T:System.Security.Cryptography.RC2" />.</summary>
      <returns>Uma instância de um objeto de criptografia.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">O algoritmo foi usado com o modo FIPS (Federal Information Processing Standards) habilitado, mas ele não é compatível com FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create(System.String)">
      <summary>Cria uma instância de um objeto criptográfico para realizar a implementação especificada do algoritmo <see cref="T:System.Security.Cryptography.RC2" />.</summary>
      <param name="AlgName">O nome da implementação específica do <see cref="T:System.Security.Cryptography.RC2" /> a ser usada.</param>
      <returns>Uma instância de um objeto de criptografia.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">O algoritmo descrito pelo parâmetro <paramref name="algName" /> foi usado com o modo FIPS (Federal Information Processing Standards) habilitado, mas ele não é compatível com FIPS.</exception>
    </member>
    <member name="P:System.Security.Cryptography.RC2.EffectiveKeySize">
      <summary>Obtém ou define o tamanho efetivo da chave secreta usada pelo algoritmo <see cref="T:System.Security.Cryptography.RC2" /> em bits.</summary>
      <returns>O tamanho de chave efetivo usado pelo algoritmo de <see cref="T:System.Security.Cryptography.RC2" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O tamanho efetivo da chave é inválido.</exception>
    </member>
    <member name="F:System.Security.Cryptography.RC2.EffectiveKeySizeValue">
      <summary>Representa o tamanho efetivo da chave secreta usada pelo algoritmo <see cref="T:System.Security.Cryptography.RC2" /> em bits.</summary>
    </member>
    <member name="P:System.Security.Cryptography.RC2.KeySize">
      <summary>Obtém ou define o tamanho da chave secreta usada pelo algoritmo <see cref="T:System.Security.Cryptography.RC2" /> em bits.</summary>
      <returns>O tamanho da chave secreta usada pelo algoritmo de <see cref="T:System.Security.Cryptography.RC2" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O valor para o tamanho da chave RC2 é menor que o valor de tamanho de chave efetivo.</exception>
    </member>
    <member name="T:System.Security.Cryptography.Rfc2898DeriveBytes">
      <summary>Implementa funcionalidade de derivação de chave baseada em senha, PBKDF2, usando um gerador de número pseudoaleatório com base em <see cref="T:System.Security.Cryptography.HMACSHA1" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> usando uma senha, um sal e o número de iterações para derivar a chave.</summary>
      <param name="password">A senha usada para derivar a chave.</param>
      <param name="salt">O sal da chave usado para derivar a chave.</param>
      <param name="iterations">O número de iterações para a operação.</param>
      <exception cref="T:System.ArgumentException">O tamanho de sal especificado é menor do que 8 bytes ou a contagem de iterações é menor que 1.</exception>
      <exception cref="T:System.ArgumentNullException">A senha ou o sal é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> usando a senha especificada, o sal, o número de iterações e o nome do algoritmo de hash para derivar a chave.</summary>
      <param name="password">A senha a ser usada para derivar a chave.</param>
      <param name="salt">O sal da chave a ser usado para derivar a chave.</param>
      <param name="iterations">O número de iterações para a operação.</param>
      <param name="hashAlgorithm">O algoritmo de hash a ser usado para derivar a chave.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="saltSize" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">A propriedade <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> de <paramref name="hashAlgorithm" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O nome do algoritmo de hash é inválido.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> usando uma senha e sal para derivar a chave.</summary>
      <param name="password">A senha usada para derivar a chave.</param>
      <param name="salt">O sal da chave usado para derivar a chave.</param>
      <exception cref="T:System.ArgumentException">O tamanho de sal especificado é menor do que 8 bytes ou a contagem de iterações é menor que 1.</exception>
      <exception cref="T:System.ArgumentNullException">A senha ou o sal é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> usando uma senha, um sal e o número de iterações para derivar a chave.</summary>
      <param name="password">A senha usada para derivar a chave.</param>
      <param name="salt">O sal da chave usado para derivar a chave.</param>
      <param name="iterations">O número de iterações para a operação.</param>
      <exception cref="T:System.ArgumentException">O tamanho de sal especificado é menor do que 8 bytes ou a contagem de iterações é menor que 1.</exception>
      <exception cref="T:System.ArgumentNullException">A senha ou o sal é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> usando a senha especificada, o sal, o número de iterações e o nome do algoritmo de hash para derivar a chave.</summary>
      <param name="password">A senha a ser usada para derivar a chave.</param>
      <param name="salt">O sal da chave a ser usado para derivar a chave.</param>
      <param name="iterations">O número de iterações para a operação.</param>
      <param name="hashAlgorithm">O algoritmo de hash a ser usado para derivar a chave.</param>
      <exception cref="T:System.ArgumentException">A propriedade <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> de <paramref name="hashAlgorithm" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O nome do algoritmo de hash é inválido.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> usando a senha e o tamanho salt para derivar a chave.</summary>
      <param name="password">A senha usada para derivar a chave.</param>
      <param name="saltSize">O tamanho do sal aleatório a ser gerado pela classe.</param>
      <exception cref="T:System.ArgumentException">O tamanho de sal especificado é menor do que 8 bytes.</exception>
      <exception cref="T:System.ArgumentNullException">A senha ou o sal é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> usando uma senha, um tamanho salt e o número de iterações para derivar a chave.</summary>
      <param name="password">A senha usada para derivar a chave.</param>
      <param name="saltSize">O tamanho do sal aleatório a ser gerado pela classe.</param>
      <param name="iterations">O número de iterações para a operação.</param>
      <exception cref="T:System.ArgumentException">O tamanho de sal especificado é menor do que 8 bytes ou a contagem de iterações é menor que 1.</exception>
      <exception cref="T:System.ArgumentNullException">A senha ou o sal é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iterations" /> está fora do intervalo. Esse parâmetro requer um número não negativo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> usando a senha especificada, o número do sal, o número de iterações e o nome do algoritmo de hash para derivar a chave.</summary>
      <param name="password">A senha a ser usada para derivar a chave.</param>
      <param name="saltSize">O tamanho do sal aleatório a ser gerado pela classe.</param>
      <param name="iterations">O número de iterações para a operação.</param>
      <param name="hashAlgorithm">O algoritmo de hash a ser usado para derivar a chave.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="saltSize" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">A propriedade <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> de <paramref name="hashAlgorithm" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O nome do algoritmo de hash é inválido.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
      <summary>Deriva uma chave de criptografia do objeto <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" />.</summary>
      <param name="algname">O nome do algoritmo para o qual a chave será derivada.</param>
      <param name="alghashname">O nome do algoritmo de hash a ser usado para derivar a chave.</param>
      <param name="keySize">O tamanho da chave, em bits, a ser derivada.</param>
      <param name="rgbIV">O IV (vetor de inicialização) a ser usado para derivar a chave.</param>
      <returns>A chave derivada.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O parâmetro <paramref name="keySize" /> está incorreto.
- ou -
O CSP (provedor de serviços de criptografia) não pode ser adquirido.
- ou -
O parâmetro <paramref name="algname" /> não é um nome de algoritmo válido.
- ou -
O parâmetro <paramref name="alghashname" /> não é um nome de algoritmo de hash válido.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pela classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> e, opcionalmente, libera os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
      <summary>Retorna a chave pseudoaleatória para esse objeto.</summary>
      <param name="cb">O número de bytes de chave pseudoaleatórios a serem gerados.</param>
      <returns>Uma matriz de bytes preenchida com bytes de chave pseudoaleatórios.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cb" /> está fora do intervalo. Esse parâmetro requer um número não negativo.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
      <summary>Obtém ou define o número de iterações para a operação.</summary>
      <returns>O número de iterações para a operação.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O número de iterações é menor que 1.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset">
      <summary>Redefine o estado da operação.</summary>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
      <summary>Obtém ou define o valor de sal da chave para a operação.</summary>
      <returns>O valor de sal da chave para a operação.</returns>
      <exception cref="T:System.ArgumentException">O tamanho de sal especificado é menor do que 8 bytes.</exception>
      <exception cref="T:System.ArgumentNullException">O sal é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.Cryptography.Rijndael">
      <summary>Representa a classe base da qual todas as implementações do algoritmo de criptografia simétrico <see cref="T:System.Security.Cryptography.Rijndael" /> devem herdar.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.#ctor">
      <summary>Inicializa uma nova instância de <see cref="T:System.Security.Cryptography.Rijndael" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create">
      <summary>Cria um objeto de criptografia para executar o algoritmo <see cref="T:System.Security.Cryptography.Rijndael" />.</summary>
      <returns>Um objeto de criptografia.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">O algoritmo foi usado com o modo FIPS (Federal Information Processing Standards) habilitado, mas ele não é compatível com FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create(System.String)">
      <summary>Cria um objeto criptográfico para realizar a implementação especificada do algoritmo <see cref="T:System.Security.Cryptography.Rijndael" />.</summary>
      <param name="algName">O nome da implementação específica de <see cref="T:System.Security.Cryptography.Rijndael" /> a ser criada.</param>
      <returns>Um objeto de criptografia.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">O algoritmo descrito pelo parâmetro <paramref name="algName" /> foi usado com o modo FIPS (Federal Information Processing Standards) habilitado, mas ele não é compatível com FIPS.</exception>
    </member>
    <member name="T:System.Security.Cryptography.RijndaelManaged">
      <summary>Acessa a versão gerenciada do algoritmo <see cref="T:System.Security.Cryptography.Rijndael" />. Esta classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.RijndaelManaged" />.</summary>
      <exception cref="T:System.InvalidOperationException">Esta classe não é compatível com o algoritmo FIPS.</exception>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.BlockSize">
      <summary>Obtém ou define o tamanho do bloco, em bits, da operação de criptografia.</summary>
      <returns>O tamanho do bloco, em bits, da operação de criptografia. O padrão é 128 bits.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateDecryptor">
      <summary>Cria um objeto descriptografador simétrico com a propriedade <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> atual e o vetor de inicialização (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <returns>Um objeto descriptografador simétrico.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Cria um objeto descriptografador <see cref="T:System.Security.Cryptography.Rijndael" /> simétrico com o <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> especificado e um vetor de inicialização (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <param name="rgbKey">A chave secreta a ser usada para o algoritmo simétrico. O tamanho da chave deve ser 128, 192 ou 256 bits.</param>
      <param name="rgbIV">A IV a ser usada para o algoritmo simétrico.</param>
      <returns>Um objeto descriptografador <see cref="T:System.Security.Cryptography.Rijndael" /> simétrico.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="rgbKey" /> é <see langword="null" />.
- ou -
O parâmetro <paramref name="rgbIV" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O valor da propriedade de <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> não é <see cref="F:System.Security.Cryptography.CipherMode.ECB" />, <see cref="F:System.Security.Cryptography.CipherMode.CBC" /> ou <see cref="F:System.Security.Cryptography.CipherMode.CFB" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateEncryptor">
      <summary>Cria um objeto criptografador simétrico com a propriedade <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> atual e o vetor de inicialização (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <returns>Um objeto criptografador simétrico.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Cria um objeto criptografador <see cref="T:System.Security.Cryptography.Rijndael" /> simétrico com a <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> atual e o vetor de inicialização (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <param name="rgbKey">A chave secreta a ser usada para o algoritmo simétrico. O tamanho da chave deve ser 128, 192 ou 256 bits.</param>
      <param name="rgbIV">A IV a ser usada para o algoritmo simétrico.</param>
      <returns>Um objeto criptografador <see cref="T:System.Security.Cryptography.Rijndael" /> simétrico.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="rgbKey" /> é <see langword="null" />.
- ou -
O parâmetro <paramref name="rgbIV" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O valor da propriedade de <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> não é <see cref="F:System.Security.Cryptography.CipherMode.ECB" />, <see cref="F:System.Security.Cryptography.CipherMode.CBC" /> ou <see cref="F:System.Security.Cryptography.CipherMode.CFB" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateIV">
      <summary>Gera um vetor de inicialização aleatório (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) a ser usado para o algoritmo.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateKey">
      <summary>Gera <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> aleatórios a serem usados para o algoritmo.</summary>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.IV">
      <summary>Obtém ou define o VI (vetor de inicialização) a ser usado para o algoritmo simétrico.</summary>
      <returns>O vetor de inicialização (IV) a ser usado para o algoritmo simétrico.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Key">
      <summary>Obtém ou define a chave secreta usada para o algoritmo simétrico.</summary>
      <returns>A chave secreta usada para o algoritmo simétrico.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.KeySize">
      <summary>Obtém ou define o tamanho, em bits, da chave secreta usada para o algoritmo simétrico.</summary>
      <returns>O tamanho, em bits, da chave secreta usada para o algoritmo simétrico. O padrão é 256 bits.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.LegalKeySizes">
      <summary>Obtém os tamanhos de chave, em bits, que têm suporte pelo algoritmo simétrico.</summary>
      <returns>Os tamanhos de chave, em bits, que têm suporte do algoritmo simétrico.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Mode">
      <summary>Obtém ou define o modo de operação do algoritmo simétrico.</summary>
      <returns>O modo de operação do algoritmo simétrico. O padrão é <see cref="F:System.Security.Cryptography.CipherMode.CBC" /></returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Padding">
      <summary>Obtém ou define o modo de preenchimento usado no algoritmo simétrico.</summary>
      <returns>O modo de preenchimento usado no algoritmo simétrico. O padrão é <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSA">
      <summary>Representa a classe base da qual todas as implementações do algoritmo <see cref="T:System.Security.Cryptography.RSA" /> são herdadas.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create">
      <summary>Cria uma instância da implementação padrão do algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
      <returns>Uma nova instância da implementação padrão do <see cref="T:System.Security.Cryptography.RSA" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.Int32)">
      <summary>Cria uma nova chave RSA efêmera com o tamanho da chave especificado.</summary>
      <param name="keySizeInBits">O tamanho da chave, em bits.</param>
      <returns>Uma nova chave RSA efêmera com o tamanho da chave especificado.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySizeInBits" /> é diferente de <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.Security.Cryptography.RSAParameters)">
      <summary>Cria uma nova chave RSA efêmera com os parâmetros de chave RSA especificados.</summary>
      <param name="parameters">Os parâmetros para o algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</param>
      <returns>Uma nova chave RSA efêmera.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.String)">
      <summary>Cria uma nova instância da implementação especificada de <see cref="T:System.Security.Cryptography.RSA" />.</summary>
      <param name="algName">O nome da implementação do <see cref="T:System.Security.Cryptography.RSA" /> a usar.</param>
      <returns>Uma nova instância da implementação especificada de <see cref="T:System.Security.Cryptography.RSA" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>Quando substituído em uma classe derivada, descriptografa os dados de entrada usando o modo de preenchimento especificado.</summary>
      <param name="data">Os dados a serem descriptografados.</param>
      <param name="padding">O modo de preenchimento.</param>
      <returns>Os dados descriptografados.</returns>
      <exception cref="T:System.NotImplementedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.DecryptValue(System.Byte[])">
      <summary>Quando substituído em uma classe derivada, descriptografa os dados de entrada usando a chave privada.</summary>
      <param name="rgb">O texto de criptografia a ser descriptografado.</param>
      <returns>A descriptografia resultante do parâmetro <paramref name="rgb" /> em um texto sem formatação.</returns>
      <exception cref="T:System.NotSupportedException">Não há suporte para essa chamada de método. Essa exceção é gerada a partir do .NET Framework 4.6.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>Quando substituído em uma classe derivada, criptografa os dados de entrada usando o modo de preenchimento especificado.</summary>
      <param name="data">Os dados a serem criptografados.</param>
      <param name="padding">O modo de preenchimento.</param>
      <returns>Os dados criptografados.</returns>
      <exception cref="T:System.NotImplementedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.EncryptValue(System.Byte[])">
      <summary>Quando substituído em uma classe derivada, criptografa os dados de entrada usando a chave pública.</summary>
      <param name="rgb">O texto sem formatação a ser criptografado.</param>
      <returns>A criptografia resultante do parâmetro <paramref name="rgb" /> como texto cifrado.</returns>
      <exception cref="T:System.NotSupportedException">Não há suporte para essa chamada de método. Essa exceção é gerada a partir do .NET Framework 4.6.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)">
      <summary>Quando substituído em uma classe derivada, exporta o <see cref="T:System.Security.Cryptography.RSAParameters" />.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> para incluir parâmetros particulares; caso contrário, <see langword="false" />.</param>
      <returns>Os parâmetros para <see cref="T:System.Security.Cryptography.RSA" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportRSAPrivateKey">
      <summary>Exporta a chave atual no formato RSAPrivateKey do PKCS# nº 1.</summary>
      <returns>Uma matriz de bytes que contém a representação de RSAPrivateKey do PKCS nº 1 dessa chave.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportRSAPublicKey">
      <summary>Exporta a parte pública da chave atual no formato RSAPublicKey do PKCS nº 1.</summary>
      <returns>Uma matriz de bytes que contém a representação de RSAPublicKey do PKCS nº 1 dessa chave.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.FromXmlString(System.String)">
      <summary>Inicializa um objeto <see cref="T:System.Security.Cryptography.RSA" /> de informações de chave de uma cadeia de caracteres XML.</summary>
      <param name="xmlString">A cadeia de caracteres XML contendo <see cref="T:System.Security.Cryptography.RSA" /> informações de chave.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="xmlString" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O formato do parâmetro <paramref name="xmlString" /> não é válido.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Somente .NET Core: esse membro não é compatível.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Quando substituído em uma classe derivada, calcula o valor de hash de uma parte especificada de uma matriz de bytes usando um algoritmo de hash especificado.</summary>
      <param name="data">Os dados que passarão por hash.</param>
      <param name="offset">O índice do primeiro byte em <paramref name="data" /> que deverá passar por hash.</param>
      <param name="count">O número de bytes que passaram por hash.</param>
      <param name="hashAlgorithm">O algoritmo a ser usado para fazer hash dos dados.</param>
      <returns>Os dados com hash.</returns>
      <exception cref="T:System.NotImplementedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Quando substituído em uma classe derivada, calcula o valor de hash de um fluxo binário especificado usando um algoritmo de hash especificado.</summary>
      <param name="data">O fluxo binário que passará por hash.</param>
      <param name="hashAlgorithm">O algoritmo hash.</param>
      <returns>Os dados com hash.</returns>
      <exception cref="T:System.NotImplementedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa o par de chaves pública/privada de uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 após descriptografar com uma senha baseada em bytes, substituindo as chaves desse objeto.</summary>
      <param name="passwordBytes">Os bytes a serem usados como senha ao descriptografar o material da chave.</param>
      <param name="source">Os bytes de uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 na codificação ASN.1-BER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A senha está incorreta.
-ou-
O conteúdo de <paramref name="source" /> indica que a KDF (Função de Derivação de Chaves) a ser aplicada é a KDF do PKCS nº 12 herdada, que requer senhas baseadas em <see cref="T:System.Char" />.
-ou-
O conteúdo de <paramref name="source" /> não representa uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 codificada por ASN.1-BER.
-ou-
O conteúdo de <paramref name="source" /> indica que a chave é de um algoritmo que não é aquele representado por essa instância.
-ou-
O conteúdo de <paramref name="source" /> representa a chave em um formato sem suporte.
-ou-
Falha na importação da chave específica do algoritmo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa o par de chaves pública/privada de uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 após descriptografar com uma senha baseada em caracteres, substituindo as chaves desse objeto.</summary>
      <param name="password">A senha a ser usada para descriptografar o material da chave.</param>
      <param name="source">Os bytes de uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 na codificação ASN.1-BER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A senha está incorreta.
-ou-
O conteúdo de <paramref name="source" /> não representa uma estrutura de EncryptedPrivateKeyInfo do PKCS nº 8 codificada por ASN.1-BER.
-ou-
O conteúdo de <paramref name="source" /> indica que a chave é de um algoritmo que não é aquele representado por essa instância.
-ou-
O conteúdo de <paramref name="source" /> representa a chave em um formato sem suporte.
-ou-
Falha na importação da chave específica do algoritmo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>Quando é substituído em uma classe derivada, importa o <see cref="T:System.Security.Cryptography.RSAParameters" /> especificado.</summary>
      <param name="parameters">Os parâmetros para <see cref="T:System.Security.Cryptography.RSA" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa o par de chaves pública/privada de uma estrutura de PrivateKeyInfo do PKCS nº 8 após a descriptografia, substituindo as chaves desse objeto.</summary>
      <param name="source">Os bytes de uma estrutura de PrivateKeyInfo do PKCS nº 8 na codificação ASN.1-BER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O conteúdo de <paramref name="source" /> não representa uma estrutura de PrivateKeyInfo do PKCS nº 8 codificada por ASN.1-BER.
-ou-
O conteúdo de <paramref name="source" /> indica que a chave é de um algoritmo que não é aquele representado por essa instância.
-ou-
O conteúdo de <paramref name="source" /> representa a chave em um formato sem suporte.
-ou-
Falha na importação da chave específica do algoritmo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportRSAPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa o par de chaves pública/privada de uma estrutura de RSAPrivateKey do PKCS nº 1 após a descriptografia, substituindo as chaves desse objeto.</summary>
      <param name="source">Os bytes de uma estrutura de RSAPrivateKey do PKCS nº 1 na codificação ASN.1-BER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O conteúdo de <paramref name="source" /> não representa uma estrutura de RSAPrivateKey do PKCS nº 1 codificada por ASN.1-BER.
-ou-
Falha na importação da chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportRSAPublicKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa a chave pública de uma estrutura de RSAPublicKey do PKCS nº 1 após a descriptografia, substituindo as chaves desse objeto.</summary>
      <param name="source">Os bytes de uma estrutura de RSAPublicKey do PKCS nº 1 na codificação ASN.1-BER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O conteúdo de <paramref name="source" /> não representa uma estrutura de RSAPublicKey do PKCS nº 1 codificada por ASN.1-BER.
-ou-
Falha na importação da chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa a chave pública de uma estrutura de SubjectPublicKeyInfo X.509 após a descriptografia, substituindo as chaves desse objeto.</summary>
      <param name="source">Os bytes de uma estrutura de SubjectPublicKeyInfo X.509 na codificação ASN.1-DER.</param>
      <param name="bytesRead">Quando é retornado, este método contém um valor que indica o número de bytes lidos de <paramref name="source" />. Esse parâmetro é tratado como não inicializado.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O conteúdo de <paramref name="source" /> não representa uma estrutura de SubjectPublicKeyInfo X.509 codificada por ASN.1-DER.
-ou-
O conteúdo de <paramref name="source" /> indica que a chave é de um algoritmo que não é aquele representado por essa instância.
-ou-
O conteúdo de <paramref name="source" /> representa a chave em um formato sem suporte.
-ou-
Falha na importação da chave específica do algoritmo.</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSA.KeyExchangeAlgorithm">
      <summary>Obtém o nome do algoritmo de troca de chaves disponível com esta implementação de <see cref="T:System.Security.Cryptography.RSA" />.</summary>
      <returns>Retorna "RSA".</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSA.SignatureAlgorithm">
      <summary>Obtém o nome do algoritmo de assinatura disponível com esta implementação de <see cref="T:System.Security.Cryptography.RSA" />.</summary>
      <returns>Retorna "RSA".</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Calcula o valor de hash de uma parte da matriz de bytes especificada usando o algoritmo de hash e o modo de preenchimento especificados e assina o valor de hash resultante.</summary>
      <param name="data">Os dados de entrada em relação aos quais o hash será calculado.</param>
      <param name="offset">O deslocamento na matriz no qual os dados começarão a ser usados.</param>
      <param name="count">O número de bytes na matriz a ser usado como dados.</param>
      <param name="hashAlgorithm">O algoritmo de hash a ser usado para criar o valor de hash.</param>
      <param name="padding">O modo de preenchimento.</param>
      <returns>A assinatura RSA para os dados especificados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.
-ou-
<paramref name="padding" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> é menor que zero.
-ou-
<paramref name="count" /> é menor que zero.
-ou-
<paramref name="offset" /> + <paramref name="count" /> – 1 resulta em um índice que está além do limite superior de <paramref name="data" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Calcula o valor de hash da matriz de bytes especificada usando o algoritmo de hash especificado e o modo de preenchimento, e assina o valor de hash resultante.</summary>
      <param name="data">Os dados de entrada em relação aos quais o hash será calculado.</param>
      <param name="hashAlgorithm">O algoritmo de hash a ser usado para criar o valor de hash.</param>
      <param name="padding">O modo de preenchimento.</param>
      <returns>A assinatura RSA para os dados especificados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.
-ou-
<paramref name="padding" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Calcula o valor de hash do fluxo especificado usando o algoritmo de hash e o modo de preenchimento especificados e assina o valor de hash resultante.</summary>
      <param name="data">O fluxo de entrada para o qual calcular o hash.</param>
      <param name="hashAlgorithm">O algoritmo de hash a ser usado para criar o valor de hash.</param>
      <param name="padding">O modo de preenchimento.</param>
      <returns>A assinatura RSA para os dados especificados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.
-ou-
<paramref name="padding" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Quando substituído em uma classe derivada, calcula a assinatura para o valor de hash especificado criptografando-a com a chave privada usando o preenchimento especificado.</summary>
      <param name="hash">O valor de hash dos dados a serem assinados.</param>
      <param name="hashAlgorithm">O algoritmo de hash usado para criar o valor de hash dos dados.</param>
      <param name="padding">O preenchimento.</param>
      <returns>A assinatura RSA do valor de hash especificado.</returns>
      <exception cref="T:System.NotImplementedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ToXmlString(System.Boolean)">
      <summary>Cria e retorna uma cadeia de caracteres XML que contém a chave do atual objeto <see cref="T:System.Security.Cryptography.RSA" />.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> para incluir uma chave RSA pública e privada; <see langword="false" /> para incluir somente a chave pública.</param>
      <returns>Uma cadeia de caracteres XML que contém a chave do atual objeto <see cref="T:System.Security.Cryptography.RSA" />.</returns>
      <exception cref="T:System.PlatformNotSupportedException">Somente .NET Core: esse membro não é compatível.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryDecrypt(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.RSAEncryptionPadding,System.Int32@)">
      <param name="data" />
      <param name="destination" />
      <param name="padding" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryEncrypt(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.RSAEncryptionPadding,System.Int32@)">
      <param name="data" />
      <param name="destination" />
      <param name="padding" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato EncryptedPrivateKeyInfo do PKCS n º 8 para um buffer fornecido, usando uma senha baseada em bytes.</summary>
      <param name="passwordBytes">Os bytes a serem usados como senha ao criptografar o material da chave.</param>
      <param name="pbeParameters">Os parâmetros de PBE (criptografia baseada em senha) a serem usados ao criptografar o material da chave.</param>
      <param name="destination">O intervalo de bytes que receberá os dados de EncryptedPrivateKeyInfo do PKCS n º 8.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.
-ou-
<paramref name="pbeParameters" /> indica que <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> deve ser usado, o que exige senhas baseadas em <see cref="T:System.Char" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato EncryptedPrivateKeyInfo do PKCS n º 8 para um buffer fornecido, usando uma senha baseada em caracteres.</summary>
      <param name="password">A senha a ser usada ao criptografar o material da chave.</param>
      <param name="pbeParameters">Os parâmetros de PBE (criptografia baseada em senha) a serem usados ao criptografar o material da chave.</param>
      <param name="destination">O intervalo de bytes que receberá os dados de EncryptedPrivateKeyInfo do PKCS n º 8.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato PrivateKeyInfo do PKCS n º 8 para um buffer fornecido.</summary>
      <param name="destination">O intervalo de bytes que receberá os dados de PrivateKeyInfo do PKCS n º 8.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportRSAPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato RSAPrivateKey do PKCS nº 1 para um buffer fornecido.</summary>
      <param name="destination">O intervalo de bytes que receberá os dados de RSAPrivateKey do PKCS nº 1.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportRSAPublicKey(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato RSAPublicKey do PKCS nº 1 para um buffer fornecido.</summary>
      <param name="destination">O intervalo de bytes que receberá os dados de RSAPublicKey do PKCS nº 1.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta exportar a chave atual no formato SubjectPublicKeyInfo X.509 para um buffer fornecido.</summary>
      <param name="destination">O intervalo de bytes que receberá os dados de SubjectPublicKeyInfo X.509.</param>
      <param name="bytesWritten">Quando é retornado, este método contém um valor que indica o número de caracteres gravados em <paramref name="destination" />. Esse parâmetro é tratado como não inicializado.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> for grande o suficiente para receber a saída; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível exportar a chave.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <param name="data" />
      <param name="destination" />
      <param name="hashAlgorithm" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.RSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding,System.Int32@)">
      <param name="data" />
      <param name="destination" />
      <param name="hashAlgorithm" />
      <param name="padding" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.RSA.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding,System.Int32@)">
      <param name="hash" />
      <param name="destination" />
      <param name="hashAlgorithm" />
      <param name="padding" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Verifica se uma assinatura digital é válida, calculando o valor de hash dos dados especificados usando o preenchimento e algoritmo de hash especificados e comparando-o à assinatura fornecida.</summary>
      <param name="data">Os dados assinados.</param>
      <param name="signature">Os dados de assinatura a serem verificados.</param>
      <param name="hashAlgorithm">O algoritmo de hash usado para criar o valor de hash dos dados.</param>
      <param name="padding">O modo de preenchimento.</param>
      <returns>
        <see langword="true" /> se a assinatura for válida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.
-ou-
<paramref name="signature" /> é <see langword="null" />.
-ou-
<paramref name="padding" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Verifica se uma assinatura digital é válida calculando o valor de hash dos dados em uma parte de uma matriz de bytes usando o preenchimento e o algoritmo de hash especificados e comparando-a à assinatura fornecida.</summary>
      <param name="data">Os dados assinados.</param>
      <param name="offset">O índice inicial no qual calcular o hash.</param>
      <param name="count">O número de bytes que passaram por hash.</param>
      <param name="signature">Os dados de assinatura a serem verificados.</param>
      <param name="hashAlgorithm">O algoritmo de hash usado para criar o valor de hash dos dados.</param>
      <param name="padding">O modo de preenchimento.</param>
      <returns>
        <see langword="true" /> se a assinatura for válida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.
-ou-
<paramref name="signature" /> é <see langword="null" />.
-ou-
<paramref name="padding" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> é menor que zero.
-ou-
<paramref name="count" /> é menor que zero.
-ou-
<paramref name="offset" /> + <paramref name="count" /> – 1 resulta em um índice que está além do limite superior de <paramref name="data" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Verifica se uma assinatura digital é válida calculando o valor de hash do fluxo especificado usando o preenchimento e algoritmo de hash especificados e comparando-o à a assinatura fornecida.</summary>
      <param name="data">Os dados assinados.</param>
      <param name="signature">Os dados de assinatura a serem verificados.</param>
      <param name="hashAlgorithm">O algoritmo de hash usado para criar o valor de hash dos dados.</param>
      <param name="padding">O modo de preenchimento.</param>
      <returns>
        <see langword="true" /> se a assinatura for válida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> é <see langword="null" />.
-ou-
<paramref name="signature" /> é <see langword="null" />.
-ou-
<paramref name="padding" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <param name="data" />
      <param name="signature" />
      <param name="hashAlgorithm" />
      <param name="padding" />
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Verifica se uma assinatura digital é válida determinando o valor de hash na assinatura usando o preenchimento e o algoritmo de hash especificados e comparando-a ao valor de hash fornecido.</summary>
      <param name="hash">O valor de hash dos dados assinados.</param>
      <param name="signature">Os dados de assinatura a serem verificados.</param>
      <param name="hashAlgorithm">O algoritmo de hash usado para criar o valor de hash.</param>
      <param name="padding">O modo de preenchimento.</param>
      <returns>
        <see langword="true" /> se a assinatura for válida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException">Uma classe derivada deve substituir esse método.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <param name="hash" />
      <param name="signature" />
      <param name="hashAlgorithm" />
      <param name="padding" />
    </member>
    <member name="T:System.Security.Cryptography.RSAEncryptionPadding">
      <summary>Especifica o modo de preenchimento e os parâmetros a serem usados com operações de criptografia ou descriptografia RSA.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.CreateOaep(System.Security.Cryptography.HashAlgorithmName)">
      <summary>Cria uma nova instância <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> cujo <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> é <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" /> com o algoritmo de hash fornecido.</summary>
      <param name="hashAlgorithm">O algoritmo hash.</param>
      <returns>Um objeto cujo modo é <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> é <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" /> com o algoritmo de hash especificado pelo <paramref name="hashAlgorithm" />.</returns>
      <exception cref="T:System.ArgumentException">A propriedade <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> de <paramref name="hashAlgorithm" /> é <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Object)">
      <summary>Determina se a instância atual é igual ao objeto especificado.</summary>
      <param name="obj">O objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="obj" /> for igual a essa instância atual, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>Determina se a instância atual é igual ao objeto <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> especificado.</summary>
      <param name="other">O objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="other" /> for igual a essa instância atual, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.GetHashCode">
      <summary>Retorna o código hash deste objeto <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" />.</summary>
      <returns>Retorna o código hash dessa instância.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Mode">
      <summary>Obtém o modo de preenchimento representado por esta instância <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" />.</summary>
      <returns>Um modo de preenchimento.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepHashAlgorithm">
      <summary>Obtém o algoritmo de hash usado em conjunto com o modo de preenchimento <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" />.</summary>
      <returns>O algoritmo hash.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1">
      <summary>Obtém um objeto que representa o padrão de criptografia OAEP (Preenchimento de Criptografia Assimétrica Ideal) com um algoritmo hash SHA1.</summary>
      <returns>Um objeto que representa o padrão de criptografia OAEP com um algoritmo hash SHA1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA256">
      <summary>Obtém um objeto que representa o padrão de criptografia OAEP (Preenchimento de Criptografia Assimétrica Ideal) com um algoritmo hash SHA256.</summary>
      <returns>Um objeto que representa o padrão de criptografia OAEP com um algoritmo de hash SHA256.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA384">
      <summary>Obtém um objeto que representa o padrão de criptografia OAEP (Preenchimento de Criptografia Assimétrica Ideal) com um algoritmo hash SHA-384.</summary>
      <returns>Um objeto que representa o padrão de criptografia OAEP com um algoritmo de hash SHA384.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA512">
      <summary>Obtém um objeto que representa o padrão de criptografia OAEP (Preenchimento de Criptografia Assimétrica Ideal) com um algoritmo hash SHA512.</summary>
      <returns>Um objeto que representa o padrão de criptografia OAEP com um algoritmo de hash SHA512.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.op_Equality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>Indica se dois objetos <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> especificados são iguais.</summary>
      <param name="left">O primeiro objeto a ser comparado.</param>
      <param name="right">O segundo objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se <see langword="left" /> e <see langword="right" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.op_Inequality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>Indica se dois objetos <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> especificados são desiguais.</summary>
      <param name="left">O primeiro objeto a ser comparado.</param>
      <param name="right">O segundo objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se <see langword="left" /> e <see langword="right" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1">
      <summary>Obtém um objeto que representa o padrão de criptografia PKCS #1.</summary>
      <returns>Um objeto que representa o padrão de criptografia PKCS #1.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.ToString">
      <summary>Retorna a representação de cadeia de caracteres da instância <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> atual.</summary>
      <returns>A representação de cadeia de caracteres do objeto atual.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAEncryptionPaddingMode">
      <summary>Especifica o modo de preenchimento a ser usado com operações de criptografia ou descriptografia RSA.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep">
      <summary>Preenchimento de Criptografia Assimétrica Ideal. É recomendável para novos aplicativos.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Pkcs1">
      <summary>PKCS #1 v1.5. Há suporte para compatibilidade com aplicativos existentes.</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter">
      <summary>Descriptografa dados de troca de chaves OAEP (Preenchimento de Criptografia Assimétrica Ideal).</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" /> com a chave especificada.</summary>
      <param name="key">A instância do algoritmo <see cref="T:System.Security.Cryptography.RSA" /> que contém a chave privada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>Extrai informações secretas dos dados de troca de chaves criptografados.</summary>
      <param name="rgbData">Os dados de troca de chaves dentro dos quais as informações secretas estão ocultas.</param>
      <returns>As informações secretas derivadas dos dados de troca de chaves.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A verificação de dados de troca de chaves falhou.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">A chave está ausente.</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.Parameters">
      <summary>Obtém os parâmetros para a troca de chaves de OAEP (Preenchimento Ideal de Criptografia Assimétrica).</summary>
      <returns>Uma cadeia de caracteres XML que contém os parâmetros da operação de troca de chave OAEP.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Define a chave privada a ser usada para descriptografar as informações do segredo.</summary>
      <param name="key">A instância do algoritmo <see cref="T:System.Security.Cryptography.RSA" /> que contém a chave privada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter">
      <summary>Cria dados de troca de chaves OAEP (Preenchimento de Criptografia Assimétrica Ideal) usando <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" /> com a chave especificada.</summary>
      <param name="key">A instância do algoritmo <see cref="T:System.Security.Cryptography.RSA" /> que contém a chave pública.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>Cria os dados de troca de chaves criptografados usando os dados de entrada especificados.</summary>
      <param name="rgbData">As informações de segredo a serem passadas na troca de chaves.</param>
      <returns>Os dados de troca de chaves criptografados a serem enviados para o destinatário pretendido.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">A chave está ausente.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>Cria os dados de troca de chaves criptografados usando os dados de entrada especificados.</summary>
      <param name="rgbData">As informações de segredo a serem passadas na troca de chaves.</param>
      <param name="symAlgType">Esse parâmetro não é usado na versão atual.</param>
      <returns>Os dados de troca de chaves criptografados a serem enviados para o destinatário pretendido.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter">
      <summary>Obtém ou define o parâmetro usado para criar o preenchimento no processo de criação de troca de chaves.</summary>
      <returns>O valor do parâmetro.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters">
      <summary>Obtém os parâmetros para a troca de chaves de OAEP (Preenchimento Ideal de Criptografia Assimétrica).</summary>
      <returns>Uma cadeia de caracteres XML que contém os parâmetros da operação de troca de chave OAEP.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng">
      <summary>Obtém ou define o algoritmo do gerador de números aleatórios a ser usado na criação da troca de chaves.</summary>
      <returns>A instância de um algoritmo gerador de números aleatórios a ser usado.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Define a chave pública a ser usada para criptografar os dados de troca de chaves.</summary>
      <param name="key">A instância do algoritmo <see cref="T:System.Security.Cryptography.RSA" /> que contém a chave pública.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAParameters">
      <summary>Representa os parâmetros padrão do algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.D">
      <summary>Representa o parâmetro <see langword="D" /> do algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DP">
      <summary>Representa o parâmetro <see langword="DP" /> do algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DQ">
      <summary>Representa o parâmetro <see langword="DQ" /> do algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Exponent">
      <summary>Representa o parâmetro <see langword="Exponent" /> do algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.InverseQ">
      <summary>Representa o parâmetro <see langword="InverseQ" /> do algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Modulus">
      <summary>Representa o parâmetro <see langword="Modulus" /> do algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.P">
      <summary>Representa o parâmetro <see langword="P" /> do algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Q">
      <summary>Representa o parâmetro <see langword="Q" /> do algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter">
      <summary>Descriptografa os dados de troca de chaves do PKCS n º 1.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" /> com a chave especificada.</summary>
      <param name="key">A instância do algoritmo <see cref="T:System.Security.Cryptography.RSA" /> que contém a chave privada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>Extrai informações secretas dos dados de troca de chaves criptografados.</summary>
      <param name="rgbIn">Os dados de troca de chaves dentro dos quais as informações secretas estão ocultas.</param>
      <returns>As informações secretas derivadas dos dados de troca de chaves.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">A chave está ausente.</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.Parameters">
      <summary>Obtém os parâmetros para a troca de chaves PKCS nº 1.</summary>
      <returns>Uma cadeia de caracteres XML que contém os parâmetros da operação de troca de chave de #1 PKCS.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.RNG">
      <summary>Obtém ou define o algoritmo do gerador de números aleatórios a ser usado na criação da troca de chaves.</summary>
      <returns>A instância de um algoritmo gerador de números aleatórios a ser usado.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Define a chave privada a ser usada para descriptografar as informações do segredo.</summary>
      <param name="key">A instância do algoritmo <see cref="T:System.Security.Cryptography.RSA" /> que contém a chave privada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter">
      <summary>Cria os dados de troca de chaves PKCS #1 usando <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" /> com a chave especificada.</summary>
      <param name="key">A instância do algoritmo <see cref="T:System.Security.Cryptography.RSA" /> que contém a chave pública.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>Cria os dados de troca de chaves criptografados usando os dados de entrada especificados.</summary>
      <param name="rgbData">As informações de segredo a serem passadas na troca de chaves.</param>
      <returns>Os dados de troca de chaves criptografados a serem enviados para o destinatário pretendido.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbData" /> é grande demais.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">A chave é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>Cria os dados de troca de chaves criptografados usando os dados de entrada especificados.</summary>
      <param name="rgbData">As informações de segredo a serem passadas na troca de chaves.</param>
      <param name="symAlgType">Esse parâmetro não é usado na versão atual.</param>
      <returns>Os dados de troca de chaves criptografados a serem enviados para o destinatário pretendido.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters">
      <summary>Obtém os parâmetros para a troca de chaves PKCS nº 1.</summary>
      <returns>Uma cadeia de caracteres XML que contém os parâmetros da operação de troca de chave de #1 PKCS.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng">
      <summary>Obtém ou define o algoritmo do gerador de números aleatórios a ser usado na criação da troca de chaves.</summary>
      <returns>A instância de um algoritmo gerador de números aleatórios a ser usado.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Define a chave pública a ser usada para criptografar os dados de troca de chaves.</summary>
      <param name="key">A instância do algoritmo <see cref="T:System.Security.Cryptography.RSA" /> que contém a chave pública.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter">
      <summary>Verifica uma assinatura <see cref="T:System.Security.Cryptography.RSA" /> PKCS nº 1 versão 1.5.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" /> com a chave especificada.</summary>
      <param name="key">A instância de <see cref="T:System.Security.Cryptography.RSA" /> que retém a chave pública.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>Define o algoritmo de hash a ser usado para verificar a assinatura.</summary>
      <param name="strName">O nome do algoritmo de hash a ser usado para verificar a assinatura.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Define a chave pública a ser usada para verificar a assinatura.</summary>
      <param name="key">A instância de <see cref="T:System.Security.Cryptography.RSA" /> que retém a chave pública.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>Verifica a assinatura PKCS nº 1 do <see cref="T:System.Security.Cryptography.RSA" /> para os dados especificados.</summary>
      <param name="rgbHash">Os dados assinados com <paramref name="rgbSignature" />.</param>
      <param name="rgbSignature">A assinatura a ser verificada quanto a <paramref name="rgbHash" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="rgbSignature" /> corresponder à assinatura computada usando a chave e o algoritmo de hash especificados em <paramref name="rgbHash" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">A chave é <see langword="null" />.
- ou -
O algoritmo hash é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="rgbHash" /> é <see langword="null" />.
- ou -
O parâmetro <paramref name="rgbSignature" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter">
      <summary>Cria uma assinatura do PKCS #1 versão 1.5 <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" /> com a chave especificada.</summary>
      <param name="key">A instância do algoritmo <see cref="T:System.Security.Cryptography.RSA" /> que contém a chave privada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.CreateSignature(System.Byte[])">
      <summary>Cria a assinatura PKCS nº 1 do <see cref="T:System.Security.Cryptography.RSA" /> para os dados especificados.</summary>
      <param name="rgbHash">Os dados a serem assinados.</param>
      <returns>A assinatura digital de <paramref name="rgbHash" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">A chave é <see langword="null" />.
- ou -
O algoritmo hash é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="rgbHash" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>Define o algoritmo de hash a ser usado para criar a assinatura.</summary>
      <param name="strName">O nome do algoritmo de hash a ser usado para criar a assinatura.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Define a chave privada a ser usada para criar a assinatura.</summary>
      <param name="key">A instância do algoritmo <see cref="T:System.Security.Cryptography.RSA" /> que contém a chave privada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSASignaturePadding">
      <summary>Especifica o modo de preenchimento e os parâmetros a serem usados com operações de criação ou verificação de assinatura RSA.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="obj">O objeto a ser comparado com a instância atual.</param>
      <returns>
        <see langword="true" /> se o objeto especificado for igual ao objeto atual, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.Equals(System.Security.Cryptography.RSASignaturePadding)">
      <summary>Retorna um valor que indica se essa instância é igual a um objeto <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> especificado.</summary>
      <param name="other">O objeto a ser comparado com a instância atual.</param>
      <returns>
        <see langword="true" /> se o objeto especificado for igual ao objeto atual, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.GetHashCode">
      <summary>Retorna o código hash para essa instância <see cref="T:System.Security.Cryptography.RSASignaturePadding" />.</summary>
      <returns>O código hash para essa instância <see cref="T:System.Security.Cryptography.RSASignaturePadding" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Mode">
      <summary>Obtém o modo de preenchimento desta instância <see cref="T:System.Security.Cryptography.RSASignaturePadding" />.</summary>
      <returns>O modo de preenchimento ( <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1" /> ou <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss" />) dessa instância.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.op_Equality(System.Security.Cryptography.RSASignaturePadding,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Indica se dois objetos <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> especificados são iguais.</summary>
      <param name="left">O primeiro objeto a ser comparado.</param>
      <param name="right">O segundo objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se <see langword="left" /> e <see langword="right" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.op_Inequality(System.Security.Cryptography.RSASignaturePadding,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Indica se dois objetos <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> especificados são desiguais.</summary>
      <param name="left">O primeiro objeto a ser comparado.</param>
      <param name="right">O segundo objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se <see langword="left" /> e <see langword="right" /> forem diferentes; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1">
      <summary>Obtém um objeto que usa o modo de preenchimento PKCS nº 1 v1.5.</summary>
      <returns>Um objeto que usa o modo de preenchimento <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Pss">
      <summary>Obtém um objeto que usa o modo de preenchimento PSS.</summary>
      <returns>Um objeto que usa o modo de preenchimento <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss" /> com o número de bytes de sal igual ao tamanho do hash.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.ToString">
      <summary>Retorna a representação de cadeia de caracteres da instância <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> atual.</summary>
      <returns>A representação de cadeia de caracteres do objeto atual.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSASignaturePaddingMode">
      <summary>Especifica o modo de preenchimento a ser usado com operações de criação ou verificação de assinatura RSA.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1">
      <summary>PKCS #1 v1.5.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss">
      <summary>Esquema de assinatura probabilística.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1">
      <summary>Calcula o hash <see cref="T:System.Security.Cryptography.SHA1" /> para os dados de entrada.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.#ctor">
      <summary>Inicializa uma nova instância de <see cref="T:System.Security.Cryptography.SHA1" />.</summary>
      <exception cref="T:System.InvalidOperationException">A política nesse objeto não é compatível com o algoritmo FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create">
      <summary>Cria uma nova instância da implementação padrão do <see cref="T:System.Security.Cryptography.SHA1" />.</summary>
      <returns>Uma nova instância de <see cref="T:System.Security.Cryptography.SHA1" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create(System.String)">
      <summary>Cria uma nova instância da implementação especificada de <see cref="T:System.Security.Cryptography.SHA1" />.</summary>
      <param name="hashName">O nome da implementação específica do <see cref="T:System.Security.Cryptography.SHA1" /> a ser usada.</param>
      <returns>Uma nova instância de <see cref="T:System.Security.Cryptography.SHA1" /> usando a implementação especificada.</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Managed">
      <summary>Calcula o hash <see cref="T:System.Security.Cryptography.SHA1" /> para os dados de entrada usando a biblioteca gerenciada.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.SHA1Managed" />.</summary>
      <exception cref="T:System.InvalidOperationException">Esta classe não é compatível com o algoritmo FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pelo objeto <see cref="T:System.Security.Cryptography.SHA1Managed" /> e libera opcionalmente os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>Roteia os dados gravados no objeto para o algoritmo de hash <see cref="T:System.Security.Cryptography.SHA1Managed" /> para computar o hash.</summary>
      <param name="array">Os dados de entrada.</param>
      <param name="ibStart">O deslocamento para a matriz de bytes com base na qual os dados começarão a ser usados.</param>
      <param name="cbSize">O número de bytes na matriz a ser usado como dados.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.HashFinal">
      <summary>Retorna o valor de hach <see cref="T:System.Security.Cryptography.SHA1" /> computado depois que todos os dados foram gravados no objeto.</summary>
      <returns>O código hash calculado.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.Initialize">
      <summary>Inicializa uma instância de <see cref="T:System.Security.Cryptography.SHA1Managed" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.SHA256">
      <summary>Calcula o hash <see cref="T:System.Security.Cryptography.SHA256" /> para os dados de entrada.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.#ctor">
      <summary>Inicializa uma nova instância de <see cref="T:System.Security.Cryptography.SHA256" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create">
      <summary>Cria uma nova instância da implementação padrão do <see cref="T:System.Security.Cryptography.SHA256" />.</summary>
      <returns>Uma nova instância de <see cref="T:System.Security.Cryptography.SHA256" />. No .NET Framework, esse método criará uma instância da classe <see cref="T:System.Security.Cryptography.SHA256Managed" /> se o modo FIPS não estiver ativo; se o modo FIPS estiver ativo, ele criará uma instância da classe <see cref="T:System.Security.Cryptography.SHA256Cng" />. No .NET Core, ele retorna uma instância de uma classe privada derivada de <see cref="T:System.Security.Cryptography.SHA256" />.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">Somente no .NET Framework 4.6.1 e versões anteriores: o algoritmo foi usado com o modo do padrão FIPS habilitado, mas ele não é compatível com o FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create(System.String)">
      <summary>Cria uma nova instância de uma implementação especificada de <see cref="T:System.Security.Cryptography.SHA256" />.</summary>
      <param name="hashName">O nome da implementação específica do <see cref="T:System.Security.Cryptography.SHA256" /> a ser usada.</param>
      <returns>Uma nova instância de <see cref="T:System.Security.Cryptography.SHA256" /> usando a implementação especificada.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">Somente no .NET Framework: o modo do padrão FIPS está habilitado, mas <paramref name="hashName" /> solicita <see cref="T:System.Security.Cryptography.SHA256Managed" />, que não é compatível com o FIPS.</exception>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Managed">
      <summary>Calcula o hash <see cref="T:System.Security.Cryptography.SHA256" /> para os dados de entrada usando a biblioteca gerenciada.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.SHA256Managed" /> usando a biblioteca gerenciada.</summary>
      <exception cref="T:System.InvalidOperationException">A configuração de segurança FIPS (Federal Information Processing Standards) está habilitada. Esta implementação não faz parte dos algoritmos criptográficos validados por FIPS da Plataforma Windows.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pelo objeto <see cref="T:System.Security.Cryptography.SHA256Managed" /> e libera opcionalmente os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>Quando substituído em uma classe derivada, roteia os dados gravados no objeto para o algoritmo de hash <see cref="T:System.Security.Cryptography.SHA256" /> para computar o hash.</summary>
      <param name="array">Os dados de entrada.</param>
      <param name="ibStart">O deslocamento para a matriz de bytes com base na qual os dados começarão a ser usados.</param>
      <param name="cbSize">O número de bytes na matriz a ser usado como dados.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.HashFinal">
      <summary>Quando substituído em uma classe derivada, finaliza o cálculo de hash depois que os últimos dados são processados pelo objeto de fluxo criptográfico.</summary>
      <returns>O código hash calculado.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.Initialize">
      <summary>Inicializa uma instância de <see cref="T:System.Security.Cryptography.SHA256Managed" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.SHA384">
      <summary>Calcula o hash <see cref="T:System.Security.Cryptography.SHA384" /> para os dados de entrada.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.#ctor">
      <summary>Inicializa uma nova instância de <see cref="T:System.Security.Cryptography.SHA384" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create">
      <summary>Cria uma nova instância da implementação padrão do <see cref="T:System.Security.Cryptography.SHA384" />.</summary>
      <returns>Uma nova instância de <see cref="T:System.Security.Cryptography.SHA384" />.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">O algoritmo foi usado com o modo FIPS (Federal Information Processing Standards) habilitado, mas ele não é compatível com FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create(System.String)">
      <summary>Cria uma nova instância de uma implementação especificada de <see cref="T:System.Security.Cryptography.SHA384" />.</summary>
      <param name="hashName">O nome da implementação específica do <see cref="T:System.Security.Cryptography.SHA384" /> a ser usada.</param>
      <returns>Uma nova instância de <see cref="T:System.Security.Cryptography.SHA384" /> usando a implementação especificada.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">O algoritmo descrito pelo parâmetro <paramref name="hashName" /> foi usado com o modo FIPS (Federal Information Processing Standards) habilitado, mas ele não é compatível com FIPS.</exception>
    </member>
    <member name="T:System.Security.Cryptography.SHA384Managed">
      <summary>Calcula o hash <see cref="T:System.Security.Cryptography.SHA384" /> para os dados de entrada usando a biblioteca gerenciada.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.SHA384Managed" />.</summary>
      <exception cref="T:System.InvalidOperationException">A configuração de segurança FIPS (Federal Information Processing Standards) está habilitada. Esta implementação não faz parte dos algoritmos criptográficos validados por FIPS da Plataforma Windows.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pelo objeto <see cref="T:System.Security.Cryptography.SHA384Managed" /> e libera opcionalmente os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>Quando substituído em uma classe derivada, roteia os dados gravados no objeto para o algoritmo de hash <see cref="T:System.Security.Cryptography.SHA384Managed" /> para computar o hash.</summary>
      <param name="array">Os dados de entrada.</param>
      <param name="ibStart">O deslocamento para a matriz de bytes com base na qual os dados começarão a ser usados.</param>
      <param name="cbSize">O número de bytes na matriz a ser usado como dados.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.HashFinal">
      <summary>Quando substituído em uma classe derivada, finaliza o cálculo de hash depois que os últimos dados são processados pelo objeto de fluxo criptográfico.</summary>
      <returns>O código hash calculado.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.Initialize">
      <summary>Inicializa uma instância de <see cref="T:System.Security.Cryptography.SHA384Managed" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.SHA512">
      <summary>Calcula o hash <see cref="T:System.Security.Cryptography.SHA512" /> para os dados de entrada.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.#ctor">
      <summary>Inicializa uma nova instância de <see cref="T:System.Security.Cryptography.SHA512" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create">
      <summary>Cria uma nova instância da implementação padrão do <see cref="T:System.Security.Cryptography.SHA512" />.</summary>
      <returns>Uma nova instância de <see cref="T:System.Security.Cryptography.SHA512" />.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">O algoritmo foi usado com o modo FIPS (Federal Information Processing Standards) habilitado, mas ele não é compatível com FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create(System.String)">
      <summary>Cria uma nova instância de uma implementação especificada de <see cref="T:System.Security.Cryptography.SHA512" />.</summary>
      <param name="hashName">O nome da implementação específica do <see cref="T:System.Security.Cryptography.SHA512" /> a ser usada.</param>
      <returns>Uma nova instância de <see cref="T:System.Security.Cryptography.SHA512" /> usando a implementação especificada.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">O algoritmo descrito pelo parâmetro <paramref name="hashName" /> foi usado com o modo FIPS (Federal Information Processing Standards) habilitado, mas ele não é compatível com FIPS.</exception>
    </member>
    <member name="T:System.Security.Cryptography.SHA512Managed">
      <summary>Calcula o algoritmo de hash <see cref="T:System.Security.Cryptography.SHA512" /> para os dados de entrada usando a biblioteca gerenciada.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.SHA512Managed" />.</summary>
      <exception cref="T:System.InvalidOperationException">A configuração de segurança FIPS (Federal Information Processing Standards) está habilitada. Esta implementação não faz parte dos algoritmos criptográficos validados por FIPS da Plataforma Windows.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pelo objeto <see cref="T:System.Security.Cryptography.SHA512Managed" /> e libera opcionalmente os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>Quando substituído em uma classe derivada, roteia os dados gravados no objeto para o algoritmo de hash <see cref="T:System.Security.Cryptography.SHA512Managed" /> para computar o hash.</summary>
      <param name="array">Os dados de entrada.</param>
      <param name="ibStart">O deslocamento para a matriz de bytes com base na qual os dados começarão a ser usados.</param>
      <param name="cbSize">O número de bytes na matriz a ser usado como dados.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.HashFinal">
      <summary>Quando substituído em uma classe derivada, finaliza o cálculo de hash depois que os últimos dados são processados pelo objeto de fluxo criptográfico.</summary>
      <returns>O código hash calculado.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.Initialize">
      <summary>Inicializa uma instância da classe <see cref="T:System.Security.Cryptography.SHA512Managed" /> usando a biblioteca gerenciada.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.SignatureDescription">
      <summary>Contém informações sobre as propriedades de uma assinatura digital.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.SignatureDescription" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor(System.Security.SecurityElement)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.SignatureDescription" /> do <see cref="T:System.Security.SecurityElement" /> especificado.</summary>
      <param name="el">O <see cref="T:System.Security.SecurityElement" /> do qual obter os algoritmos para a descrição de assinatura.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="el" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDeformatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Cria uma instância de <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> com a chave especificada usando a propriedade <see cref="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm" />.</summary>
      <param name="key">A chave a ser usada no <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />.</param>
      <returns>A instância de <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> recém-criada.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDigest">
      <summary>Cria uma instância de <see cref="T:System.Security.Cryptography.HashAlgorithm" /> usando a propriedade <see cref="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm" />.</summary>
      <returns>A instância de <see cref="T:System.Security.Cryptography.HashAlgorithm" /> recém-criada.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateFormatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Cria uma instância de <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> com a chave especificada usando a propriedade <see cref="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm" />.</summary>
      <param name="key">A chave a ser usada no <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" />.</param>
      <returns>A instância de <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> recém-criada.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm">
      <summary>Obtém ou define o algoritmo deformatador para a descrição da assinatura.</summary>
      <returns>O algoritmo de desformatador para a descrição da assinatura.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm">
      <summary>Obtém ou define o algoritmo de resumo para a descrição da assinatura.</summary>
      <returns>O algoritmo de resumo para a descrição da assinatura.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm">
      <summary>Obtém ou define o algoritmo formatador para a descrição da assinatura.</summary>
      <returns>O algoritmo do formatador para a descrição da assinatura.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.KeyAlgorithm">
      <summary>Obtém ou define o algoritmo de chave para a descrição da assinatura.</summary>
      <returns>O algoritmo de chave para a descrição da assinatura.</returns>
    </member>
    <member name="T:System.Security.Cryptography.TripleDES">
      <summary>Representa a classe base para algoritmos DES triplo dos quais todas as implementações <see cref="T:System.Security.Cryptography.TripleDES" /> devem derivar.</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.TripleDES" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create">
      <summary>Cria uma instância de um objeto criptográfico para executar o algoritmo <see cref="T:System.Security.Cryptography.TripleDES" />.</summary>
      <returns>Uma instância de um objeto de criptografia.</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create(System.String)">
      <summary>Cria uma instância de um objeto criptográfico para realizar a implementação especificada do algoritmo <see cref="T:System.Security.Cryptography.TripleDES" />.</summary>
      <param name="str">O nome da implementação específica do <see cref="T:System.Security.Cryptography.TripleDES" /> a ser usada.</param>
      <returns>Uma instância de um objeto de criptografia.</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])">
      <summary>Determina se a chave especificada é fraca.</summary>
      <param name="rgbKey">A chave secreta cuja vulnerabilidade será testada.</param>
      <returns>
        <see langword="true" /> se a chave for fraca; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">O tamanho do parâmetro <paramref name="rgbKey" /> não é válido.</exception>
    </member>
    <member name="P:System.Security.Cryptography.TripleDES.Key">
      <summary>Obtém ou define a chave secreta para o algoritmo <see cref="T:System.Security.Cryptography.TripleDES" />.</summary>
      <returns>A chave secreta para o algoritmo <see cref="T:System.Security.Cryptography.TripleDES" />.</returns>
      <exception cref="T:System.ArgumentNullException">Foi feita uma tentativa de definir a chave como <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Ocorreu uma tentativa de definir uma chave cujo tamanho é inválido.
- ou -
Foi feita uma tentativa de definir uma chave fraca (consulte <see cref="M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])" />).</exception>
    </member>
  </members>
</doc>
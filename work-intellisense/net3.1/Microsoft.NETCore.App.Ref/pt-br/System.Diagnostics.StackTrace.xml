<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Diagnostics.StackTrace</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.StackFrame">
      <summary vsli:raw="Provides information about a &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt;, which represents a function call on the call stack for the current thread.">Fornece informações sobre um <see cref="T:System.Diagnostics.StackFrame" />, que representa uma chamada de função na pilha de chamadas do thread atual.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackFrame" />.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class, optionally capturing source information.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackFrame" />, com a opção de capturar informações de origem.</summary>
      <param name="fNeedFileInfo">
        <see langword="true" /> para capturar o nome de arquivo, o número de linha e o número de coluna do registro de ativação; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that corresponds to a frame above the current stack frame.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackFrame" /> que corresponde a um quadro acima do registro de ativação atual.</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack to skip.">O número de quadros acima na pilha para ignorar.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that corresponds to a frame above the current stack frame, optionally capturing source information.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackFrame" /> que corresponde a um quadro acima do registro de ativação atual, capturando opcionalmente informações de origem.</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack to skip.">O número de quadros acima na pilha para ignorar.</param>
      <param name="fNeedFileInfo">
        <see langword="true" /> para capturar o nome de arquivo, o número de linha e o número de coluna do registro de ativação; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that contains only the given file name and line number.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackFrame" /> que contém somente o nome do arquivo determinado e o número de linha.</summary>
      <param name="fileName" vsli:raw="The file name.">O nome de arquivo.</param>
      <param name="lineNumber" vsli:raw="The line number in the specified file.">O número de linha no arquivo especificado.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that contains only the given file name, line number, and column number.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackFrame" /> que contém somente o nome do arquivo determinado, o número de linha e o número da coluna.</summary>
      <param name="fileName" vsli:raw="The file name.">O nome de arquivo.</param>
      <param name="lineNumber" vsli:raw="The line number in the specified file.">O número de linha no arquivo especificado.</param>
      <param name="colNumber" vsli:raw="The column number in the specified file.">O número da coluna no arquivo especificado.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary vsli:raw="Gets the column number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">Obtém o número da coluna no arquivo que contém o código que está em execução. Normalmente, essas informações são extraídas de símbolos de depuração para o executável.</summary>
      <returns vsli:raw="The file column number, or 0 (zero) if the file column number cannot be determined.">O número da coluna do arquivo ou 0 (zero), se o número da coluna do arquivo não puder ser determinado.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary vsli:raw="Gets the line number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">Obtém o número de linha no arquivo que contém o código que está em execução. Normalmente, essas informações são extraídas de símbolos de depuração para o executável.</summary>
      <returns vsli:raw="The file line number, or 0 (zero) if the file line number cannot be determined.">O número de linha do arquivo ou 0 (zero), se o número de linha do arquivo não puder ser determinado.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary vsli:raw="Gets the file name that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">Obtém o nome do arquivo que contém o código que está em execução. Normalmente, essas informações são extraídas de símbolos de depuração para o executável.</summary>
      <returns vsli:raw="The file name, or &lt;see langword=&quot;null&quot; /&gt; if the file name cannot be determined.">O nome do arquivo ou <see langword="null" />, se o nome de arquivo não puder ser determinado.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary vsli:raw="Gets the offset from the start of the Microsoft intermediate language (MSIL) code for the method that is executing. This offset might be an approximation depending on whether or not the just-in-time (JIT) compiler is generating debugging code. The generation of this debugging information is controlled by the &lt;see cref=&quot;T:System.Diagnostics.DebuggableAttribute&quot; /&gt;.">Obtém o deslocamento do início do código MSIL (Microsoft Intermediate Language) para o método que está sendo executado. Esse deslocamento pode ser uma aproximação dependendo se o compilador JIT (Just-In-Time) está gerando o código de depuração. A geração dessas informações de depuração é controlada pelo <see cref="T:System.Diagnostics.DebuggableAttribute" />.</summary>
      <returns vsli:raw="The offset from the start of the MSIL code for the method that is executing.">O deslocamento do início do código MSIL para o método que está sendo executado.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary vsli:raw="Gets the method in which the frame is executing.">Obtém o método no qual o quadro está em execução.</summary>
      <returns vsli:raw="The method in which the frame is executing.">O método no qual o quadro está em execução.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
      <summary vsli:raw="Gets the offset from the start of the native just-in-time (JIT)-compiled code for the method that is being executed. The generation of this debugging information is controlled by the &lt;see cref=&quot;T:System.Diagnostics.DebuggableAttribute&quot; /&gt; class.">Obtém o deslocamento do início do código compilado JIT (Just-In-Time) nativo para o método que está sendo executado. A geração dessas informações de depuração é controlada pela classe <see cref="T:System.Diagnostics.DebuggableAttribute" />.</summary>
      <returns vsli:raw="The offset from the start of the JIT-compiled code for the method that is being executed.">O deslocamento do início do código compilado JIT para o método que está sendo executado.</returns>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary vsli:raw="Defines the value that is returned from the &lt;see cref=&quot;M:System.Diagnostics.StackFrame.GetNativeOffset&quot; /&gt; or &lt;see cref=&quot;M:System.Diagnostics.StackFrame.GetILOffset&quot; /&gt; method when the native or Microsoft intermediate language (MSIL) offset is unknown. This field is constant.">Define o valor que é retornado do método <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" /> ou <see cref="M:System.Diagnostics.StackFrame.GetILOffset" /> quando o deslocamento nativo ou MSIL (Microsoft Intermediate Language) é desconhecido. Este campo é constante.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary vsli:raw="Builds a readable representation of the stack trace.">Cria uma representação legível do rastreamento de pilha.</summary>
      <returns vsli:raw="A readable representation of the stack trace.">Uma representação legível do rastreamento de pilha.</returns>
    </member>
    <member name="T:System.Diagnostics.StackFrameExtensions">
      <summary vsli:raw="Provides extension methods for the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class, which represents a function call on the call stack for the current thread.">Fornece métodos de extensão para a classe <see cref="T:System.Diagnostics.StackFrame" />, que representa uma chamada de função na pilha de chamadas do thread atual.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Returns a pointer to the base address of the native image that this stack frame is executing.">Retorna um ponteiro para o endereço básico da imagem nativa na qual esse registro de ativação está sendo executado.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Um registro de ativação.</param>
      <returns vsli:raw="A pointer to the base address of the native image or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; if you're targeting the .NET Framework.">Um ponteiro para o endereço básico da imagem nativa ou <see cref="F:System.IntPtr.Zero" /> se o destino for o .NET Framework.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Gets an interface pointer to the start of the native code for the method that is being executed.">Obtém um ponteiro de interface para o início do código nativo para o método que está sendo executado.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Um registro de ativação.</param>
      <returns vsli:raw="An interface pointer to the start of the native code for the method that is being executed or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; if you're targeting the .NET Framework.">Um ponteiro de interface para o início do código nativo do método que está sendo executado ou <see cref="F:System.IntPtr.Zero" /> se o .NET Framework for o destino.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether an offset from the start of the IL code for the method that is executing is available.">Indica se um deslocamento do início do código do nível de integridade para o método que está sendo executado está disponível.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Um registro de ativação.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the offset is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a opção estiver disponível; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether information about the method in which the specified frame is executing is available.">Indica se as informações sobre o método no qual o quadro especificado está em execução estão disponíveis.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Um registro de ativação.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if information about the method in which the current frame is executing is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se as informações sobre o método no qual o quadro atual está em execução estão disponíveis; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether the native image is available for the specified stack frame.">Indica se a imagem nativa está disponível para o registro de ativação especificado.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Um registro de ativação.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a native image is available for this stack frame; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se uma imagem nativa estiver disponível para este registro de ativação; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether the file that contains the code that the specified stack frame is executing is available.">Indica se o arquivo que contém o código que o registro de ativação especificado está executando está disponível.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Um registro de ativação.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code that the specified stack frame is executing is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o código que o registro de ativação está executando está disponível; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary vsli:raw="Represents a stack trace, which is an ordered collection of one or more stack frames.">Representa um rastreamento de pilha, que é uma coleção ordenada de um ou mais registros de ativação.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" /> do quadro do chamador.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, optionally capturing source information.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" /> do quadro do chamador, capturando originalmente as informações de origem.</summary>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para capturar o nome de arquivo, o número de linha e o número de coluna; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class that contains a single frame.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" /> que contém um único quadro.</summary>
      <param name="frame" vsli:raw="The frame that the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; object should contain.">O quadro que o objeto <see cref="T:System.Diagnostics.StackTrace" /> deve conter.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" /> usando o objeto de exceção fornecido.</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">O objeto de exceção do qual o rastreamento de pilha será construído.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="e" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class, using the provided exception object and optionally capturing source information.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" />, usando o objeto de exceção fornecido e, opcionalmente, capturando as informações de origem.</summary>
      <param name="exception">O objeto de exceção do qual o rastreamento de pilha será construído.</param>
      <param name="needFileInfo">
        <see langword="true" /> para capturar o nome de arquivo, o número de linha e o número de coluna; caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="e" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object and skipping the specified number of frames.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" />, usando o objeto de exceção fornecido e ignorando o número especificado de quadros.</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">O objeto de exceção do qual o rastreamento de pilha será construído.</param>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">O número de quadros na pilha do qual iniciar o rastreamento.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="e" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">O parâmetro <paramref name="skipFrames" /> é negativo.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object, skipping the specified number of frames and optionally capturing source information.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" /> usando o objeto de exceção fornecido, ignorando o número especificado de quadros e, opcionalmente, capturando informações de origem.</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">O objeto de exceção do qual o rastreamento de pilha será construído.</param>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">O número de quadros na pilha do qual iniciar o rastreamento.</param>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para capturar o nome de arquivo, o número de linha e o número de coluna; caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="e" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">O parâmetro <paramref name="skipFrames" /> é negativo.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, skipping the specified number of frames.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" /> com base no quadro do chamador, ignorando o número de quadros especificado.</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">O número de quadros na pilha do qual iniciar o rastreamento.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">O parâmetro <paramref name="skipFrames" /> é negativo.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, skipping the specified number of frames and optionally capturing source information.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" /> com base no quadro do chamador, ignorando o número especificado de quadros e, opcionalmente, capturando informações de origem.</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">O número de quadros na pilha do qual iniciar o rastreamento.</param>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para capturar o nome de arquivo, o número de linha e o número de coluna; caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">O parâmetro <paramref name="skipFrames" /> é negativo.</exception>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
      <summary vsli:raw="Gets the number of frames in the stack trace.">Obtém o número de quadros no rastreamento da pilha.</summary>
      <returns vsli:raw="The number of frames in the stack trace.">O número de quadros no rastreamento de pilha.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
      <summary vsli:raw="Gets the specified stack frame.">Obtém o registro de ativação especificado.</summary>
      <param name="index" vsli:raw="The index of the stack frame requested.">O índice do registro de ativação solicitado.</param>
      <returns vsli:raw="The specified stack frame.">O registro de ativação especificado.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary vsli:raw="Returns a copy of all stack frames in the current stack trace.">Retorna uma cópia de todos os quadros de pilha no rastreamento de pilha atual.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; representing the function calls in the stack trace.">Uma matriz do tipo <see cref="T:System.Diagnostics.StackFrame" /> que representa as chamadas de função no rastreamento de pilha.</returns>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
      <summary vsli:raw="Defines the default for the number of methods to omit from the stack trace. This field is constant.">Define o padrão para o número de métodos a ser omitido do rastreamento de pilha. Este campo é constante.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary vsli:raw="Builds a readable representation of the stack trace.">Cria uma representação legível do rastreamento de pilha.</summary>
      <returns vsli:raw="A readable representation of the stack trace.">Uma representação legível do rastreamento de pilha.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder">
      <summary vsli:raw="Represents a symbol binder for managed code.">Representa um associador de símbolos para código gerenciado.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder.GetReader(System.Int32,System.String,System.String)">
      <summary vsli:raw="Gets the interface of the symbol reader for the current file.">Obtém a interface do leitor de símbolo para o arquivo atual.</summary>
      <param name="importer" vsli:raw="The metadata import interface.">A interface de importação de metadados.</param>
      <param name="filename" vsli:raw="The name of the file for which the reader interface is required.">O nome do arquivo para o qual a interface de leitor é necessária.</param>
      <param name="searchPath" vsli:raw="The search path used to locate the symbol file.">O caminho de pesquisa usado para localizar o arquivo de símbolo.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolReader&quot; /&gt; interface that reads the debugging symbols.">A interface <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> que lê os símbolos de depuração.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder1">
      <summary vsli:raw="Represents a symbol binder for managed code.">Representa um associador de símbolos para código gerenciado.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder1.GetReader(System.IntPtr,System.String,System.String)">
      <summary vsli:raw="Gets the interface of the symbol reader for the current file.">Obtém a interface do leitor de símbolo para o arquivo atual.</summary>
      <param name="importer" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that refers to the metadata import interface.">Um <see cref="T:System.IntPtr" /> que se refere à interface de importação de metadados.</param>
      <param name="filename" vsli:raw="The name of the file for which the reader interface is required.">O nome do arquivo para o qual a interface de leitor é necessária.</param>
      <param name="searchPath" vsli:raw="The search path used to locate the symbol file.">O caminho de pesquisa usado para localizar o arquivo de símbolo.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolReader&quot; /&gt; interface that reads the debugging symbols.">A interface <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> que lê os símbolos de depuração.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocument">
      <summary vsli:raw="Represents a document referenced by a symbol store.">Representa um documento referenciado por um repositório de símbolos.</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.CheckSumAlgorithmId">
      <summary vsli:raw="Gets the checksum algorithm identifier.">Obtém o identificador do algoritmo de soma de verificação.</summary>
      <returns vsli:raw="A GUID identifying the checksum algorithm. The value is all zeros, if there is no checksum.">Um GUID que identifica o algoritmo de soma de verificação. O valor será todos os zeros, se não houver nenhuma soma de verificação.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.DocumentType">
      <summary vsli:raw="Gets the type of the current document.">Obtém o tipo do documento atual.</summary>
      <returns vsli:raw="The type of the current document.">O tipo de documento atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.FindClosestLine(System.Int32)">
      <summary vsli:raw="Returns the closest line that is a sequence point, given a line in the current document that might or might not be a sequence point.">Retorna a linha mais próxima que é um ponto de sequência, considerando uma linha no documento atual que pode ou não ser um ponto de sequência.</summary>
      <param name="line" vsli:raw="The specified line in the document.">A linha especificada no documento.</param>
      <returns vsli:raw="The closest line that is a sequence point.">A linha mais próxima e que seja um ponto de sequência.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetCheckSum">
      <summary vsli:raw="Gets the checksum.">Obtém a soma de verificação.</summary>
      <returns vsli:raw="The checksum.">A soma de verificação.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetSourceRange(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Gets the embedded document source for the specified range.">Obtém a origem do documento inserido para o intervalo especificado.</summary>
      <param name="startLine" vsli:raw="The starting line in the current document.">A linha inicial no documento atual.</param>
      <param name="startColumn" vsli:raw="The starting column in the current document.">A coluna de inicial no documento atual.</param>
      <param name="endLine" vsli:raw="The ending line in the current document.">A linha final no documento atual.</param>
      <param name="endColumn" vsli:raw="The ending column in the current document.">A coluna final no documento atual.</param>
      <returns vsli:raw="The document source for the specified range.">A origem do documento para o intervalo especificado.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.HasEmbeddedSource">
      <summary vsli:raw="Checks whether the current document is stored in the symbol store.">Verifica se o documento atual está armazenado no repositório de símbolos.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current document is stored in the symbol store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o documento atual estiver armazenado no repositório de símbolos; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.Language">
      <summary vsli:raw="Gets the language of the current document.">Obtém o idioma do documento atual.</summary>
      <returns vsli:raw="The language of the current document.">O idioma do documento atual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.LanguageVendor">
      <summary vsli:raw="Gets the language vendor of the current document.">Obtém a o fornecedor do idioma do documento atual.</summary>
      <returns vsli:raw="The language vendor of the current document.">O fornecedor de idioma do documento atual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.SourceLength">
      <summary vsli:raw="Gets the length, in bytes, of the embedded source.">Obtém o comprimento, em bytes, da origem inserida.</summary>
      <returns vsli:raw="The source length of the current document.">O comprimento de origem do documento atual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.URL">
      <summary vsli:raw="Gets the URL of the current document.">Obtém a URL do documento atual.</summary>
      <returns vsli:raw="The URL of the current document.">A URL do documento atual.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
      <summary vsli:raw="Represents a document referenced by a symbol store.">Representa um documento referenciado por um repositório de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
      <summary vsli:raw="Sets checksum information.">Define informações de soma de verificação.</summary>
      <param name="algorithmId" vsli:raw="The GUID representing the algorithm ID.">O GUID que representa a ID de algoritmo.</param>
      <param name="checkSum" vsli:raw="The checksum.">A soma de verificação.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
      <summary vsli:raw="Stores the raw source for a document in the symbol store.">Armazena a origem bruta de um documento no repositório de símbolos.</summary>
      <param name="source" vsli:raw="The document source represented as unsigned bytes.">A origem do documento representada como bytes sem sinal.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolMethod">
      <summary vsli:raw="Represents a method within a symbol store.">Representa um método em um repositório de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace">
      <summary vsli:raw="Gets the namespace that the current method is defined within.">Obtém o namespace no qual o método atual está definido.</summary>
      <returns vsli:raw="The namespace that the current method is defined within.">O namespace no qual o método atual está definido.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets the Microsoft intermediate language (MSIL) offset within the method that corresponds to the specified position.">Obtém o deslocamento do MSIL (Microsoft Intermediate Language) dentro do método que corresponde à posição especificada.</summary>
      <param name="document" vsli:raw="The document for which the offset is requested.">O documento para o qual o deslocamento é solicitado.</param>
      <param name="line" vsli:raw="The document line corresponding to the offset.">A linha do documento correspondente ao deslocamento.</param>
      <param name="column" vsli:raw="The document column corresponding to the offset.">A coluna do documento correspondente ao deslocamento.</param>
      <returns vsli:raw="The offset within the specified document.">O deslocamento dentro do documento especificado.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters">
      <summary vsli:raw="Gets the parameters for the current method.">Obtém os parâmetros para o método atual.</summary>
      <returns vsli:raw="The array of parameters for the current method.">A matriz de parâmetros do método atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets an array of start and end offset pairs that correspond to the ranges of Microsoft intermediate language (MSIL) that a given position covers within this method.">Obtém uma matriz de pares de deslocamentos de início e término que correspondem aos intervalos do MSIL (Microsoft Intermediate Language) que uma posição especificada cobre dentro desse método.</summary>
      <param name="document" vsli:raw="The document for which the offset is requested.">O documento para o qual o deslocamento é solicitado.</param>
      <param name="line" vsli:raw="The document line corresponding to the ranges.">A linha do documento correspondente a intervalos.</param>
      <param name="column" vsli:raw="The document column corresponding to the ranges.">A coluna do documento correspondente a intervalos.</param>
      <returns vsli:raw="An array of start and end offset pairs.">Uma matriz de pares de deslocamento de início e término.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)">
      <summary vsli:raw="Returns the most enclosing lexical scope when given an offset within a method.">Retorna o escopo léxico mais delimitador quando é fornecido um deslocamento dentro de um método.</summary>
      <param name="offset" vsli:raw="The byte offset within the method of the lexical scope.">O deslocamento de bytes no método do escopo léxico.</param>
      <returns vsli:raw="The most enclosing lexical scope for the given byte offset within the method.">O escopo léxico mais delimitador para o deslocamento de bytes fornecido dentro de um método.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Gets the sequence points for the current method.">Obtém os pontos de sequência para o método atual.</summary>
      <param name="offsets" vsli:raw="The array of byte offsets from the beginning of the method for the sequence points.">A matriz de deslocamentos de bytes do início do método para os pontos de sequência.</param>
      <param name="documents" vsli:raw="The array of documents in which the sequence points are located.">A matriz de documentos em que os pontos de sequência estão localizados.</param>
      <param name="lines" vsli:raw="The array of lines in the documents at which the sequence points are located.">A matriz de linhas nos documentos em que os pontos de sequência estão localizados.</param>
      <param name="columns" vsli:raw="The array of columns in the documents at which the sequence points are located.">A matriz de colunas nos documentos em que os pontos de sequência estão localizados.</param>
      <param name="endLines" vsli:raw="The array of lines in the documents at which the sequence points end.">A matriz de linhas nos documentos em que a sequência de pontos termina.</param>
      <param name="endColumns" vsli:raw="The array of columns in the documents at which the sequence points end.">A matriz de colunas nos documentos em que a sequência de pontos termina.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Gets the start and end positions for the source of the current method.">Obtém as posições inicial e final da fonte de dados do método atual.</summary>
      <param name="docs" vsli:raw="The starting and ending source documents.">Os documentos de origem iniciais e finais.</param>
      <param name="lines" vsli:raw="The starting and ending lines in the corresponding source documents.">As linhas iniciais e finais nos documentos de origem correspondentes.</param>
      <param name="columns" vsli:raw="The starting and ending columns in the corresponding source documents.">As colunas iniciais e finais nos documentos de origem correspondentes.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the positions were defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se as posições foram definidas, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.RootScope">
      <summary vsli:raw="Gets the root lexical scope for the current method. This scope encloses the entire method.">Obtém o escopo do léxico raiz do método atual. Esse escopo abrange todo o método.</summary>
      <returns vsli:raw="The root lexical scope that encloses the entire method.">O escopo do léxico raiz que abrange todo o método.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount">
      <summary vsli:raw="Gets a count of the sequence points in the method.">Obtém uma contagem dos pontos de sequência no método.</summary>
      <returns vsli:raw="The count of the sequence points in the method.">A contagem dos pontos de sequência no método.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.Token">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; containing the metadata for the current method.">Obtém o <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> que contém os metadados do método atual.</summary>
      <returns vsli:raw="The metadata token for the current method.">O token de metadados para o método atual.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolNamespace">
      <summary vsli:raw="Represents a namespace within a symbol store.">Representa um namespace em um repositório de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetNamespaces">
      <summary vsli:raw="Gets the child members of the current namespace.">Obtém os membros filho do namespace atual.</summary>
      <returns vsli:raw="The child members of the current namespace.">Os membros filho do namespace atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetVariables">
      <summary vsli:raw="Gets all the variables defined at global scope within the current namespace.">Obtém todas as variáveis definidas no escopo global do namespace atual.</summary>
      <returns vsli:raw="The variables defined at global scope within the current namespace.">As variáveis definidas no escopo global do namespace atual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolNamespace.Name">
      <summary vsli:raw="Gets the current namespace.">Obtém o namespace atual.</summary>
      <returns vsli:raw="The current namespace.">O namespace atual.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolReader">
      <summary vsli:raw="Represents a symbol reader for managed code.">Representa um leitor de símbolo para código gerenciado.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary vsli:raw="Gets a document specified by the language, vendor, and type.">Obtém um documento especificado por idioma, fornecedor e tipo.</summary>
      <param name="url" vsli:raw="The URL that identifies the document.">A URL que identifica o documento.</param>
      <param name="language" vsli:raw="The document language. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">O idioma do documento. Você pode especificar esse parâmetro como <see cref="F:System.Guid.Empty" />.</param>
      <param name="languageVendor" vsli:raw="The identity of the vendor for the document language. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">A identidade do fornecedor para o idioma do documento. Você pode especificar esse parâmetro como <see cref="F:System.Guid.Empty" />.</param>
      <param name="documentType" vsli:raw="The type of the document. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">O tipo do documento. Você pode especificar esse parâmetro como <see cref="F:System.Guid.Empty" />.</param>
      <returns vsli:raw="The specified document.">O documento especificado.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocuments">
      <summary vsli:raw="Gets an array of all documents defined in the symbol store.">Obtém uma matriz de todos os documentos definidos no repositório de símbolos.</summary>
      <returns vsli:raw="An array of all documents defined in the symbol store.">Uma matriz de todos os documentos definidos no repositório de símbolos.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetGlobalVariables">
      <summary vsli:raw="Gets all global variables in the module.">Obtém todas as variáveis globais no módulo.</summary>
      <returns vsli:raw="An array of all variables in the module.">Uma matriz de todas as variáveis no módulo.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Gets a symbol reader method object when given the identifier of a method.">Obtém um objeto do método de leitor de símbolo quando o identificador de um método é fornecido.</summary>
      <param name="method" vsli:raw="The metadata token of the method.">O token de metadados do método.</param>
      <returns vsli:raw="The symbol reader method object for the specified method identifier.">O objeto do método de leitor de símbolo para o identificador do método especificado.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)">
      <summary vsli:raw="Gets a symbol reader method object when given the identifier of a method and its edit and continue version.">Obtém um objeto do método de leitor de símbolo quando é fornecido o identificador de um método e sua versão de edição e continuação.</summary>
      <param name="method" vsli:raw="The metadata token of the method.">O token de metadados do método.</param>
      <param name="version" vsli:raw="The edit and continue version of the method.">A versão de edição e continuação do método.</param>
      <returns vsli:raw="The symbol reader method object for the specified method identifier.">O objeto do método de leitor de símbolo para o identificador do método especificado.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets a symbol reader method object that contains a specified position in a document.">Obtém um objeto do método de leitor de símbolo que contém uma posição especificada em um documento.</summary>
      <param name="document" vsli:raw="The document in which the method is located.">O documento no qual o método está localizado.</param>
      <param name="line" vsli:raw="The position of the line within the document. The lines are numbered, beginning with 1.">A posição da linha dentro do documento. As linhas são numeradas, começando com 1.</param>
      <param name="column" vsli:raw="The position of column within the document. The columns are numbered, beginning with 1.">A posição da coluna dentro do documento. As colunas são numeradas, começando com 1.</param>
      <returns vsli:raw="The reader method object for the specified position in the document.">O objeto do método de leitor para a posição especificada no documento.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetNamespaces">
      <summary vsli:raw="Gets the namespaces that are defined in the global scope within the current symbol store.">Obtém os namespaces que são definidos no escopo global no repositório de símbolos atual.</summary>
      <returns vsli:raw="The namespaces defined in the global scope within the current symbol store.">Os namespaces definidos no escopo global no repositório de símbolos atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)">
      <summary vsli:raw="Gets an attribute value when given the attribute name.">Obtém um valor de atributo quando é fornecido o nome do atributo.</summary>
      <param name="parent" vsli:raw="The metadata token for the object for which the attribute is requested.">O token de metadados do objeto para o qual o atributo é solicitado.</param>
      <param name="name" vsli:raw="The attribute name.">O nome do atributo.</param>
      <returns vsli:raw="The value of the attribute.">O valor do atributo.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Gets the variables that are not local when given the parent.">Obtém as variáveis que não são locais quando é fornecido o pai.</summary>
      <param name="parent" vsli:raw="The metadata token for the type for which the variables are requested.">O token de metadados do tipo para o qual as variáveis são solicitadas.</param>
      <returns vsli:raw="An array of variables for the parent.">Uma matriz de variáveis para o pai.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolReader.UserEntryPoint">
      <summary vsli:raw="Gets the metadata token for the method that was specified as the user entry point for the module, if any.">Obtém o token de metadados para o método especificado como o ponto de entrada do usuário para o módulo, caso haja algum.</summary>
      <returns vsli:raw="The metadata token for the method that is the user entry point for the module.">O token de metadados para o método que é o ponto de entrada do usuário para o módulo.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolScope">
      <summary vsli:raw="Represents a lexical scope within &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolMethod&quot; /&gt;, providing access to the start and end offsets of the scope, as well as its child and parent scopes.">Representa um escopo léxico em <see cref="T:System.Diagnostics.SymbolStore.ISymbolMethod" />, fornecendo acesso aos deslocamentos inicial e final do escopo, bem como aos escopos pai e filho.</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.EndOffset">
      <summary vsli:raw="Gets the end offset of the current lexical scope.">Obtém o deslocamento final do escopo léxico atual.</summary>
      <returns vsli:raw="The end offset of the current lexical scope.">O deslocamento final do escopo léxico atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetChildren">
      <summary vsli:raw="Gets the child lexical scopes of the current lexical scope.">Obtém os escopos léxicos filho do escopo léxico atual.</summary>
      <returns vsli:raw="The child lexical scopes that of the current lexical scope.">Os escopos léxicos filho do escopo léxico atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetLocals">
      <summary vsli:raw="Gets the local variables within the current lexical scope.">Obtém as variáveis locais dentro do escopo léxico atual.</summary>
      <returns vsli:raw="The local variables within the current lexical scope.">As variáveis locais dentro do escopo léxico atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces">
      <summary vsli:raw="Gets the namespaces that are used within the current scope.">Obtém os namespaces que são usados dentro do escopo atual.</summary>
      <returns vsli:raw="The namespaces that are used within the current scope.">Os namespaces que são usados dentro do escopo atual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Method">
      <summary vsli:raw="Gets the method that contains the current lexical scope.">Obtém o método que contém o escopo léxico atual.</summary>
      <returns vsli:raw="The method that contains the current lexical scope.">O método que contém o escopo léxico atual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Parent">
      <summary vsli:raw="Gets the parent lexical scope of the current scope.">Obtém o escopo léxico pai do escopo atual.</summary>
      <returns vsli:raw="The parent lexical scope of the current scope.">O escopo léxico pai do escopo atual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.StartOffset">
      <summary vsli:raw="Gets the start offset of the current lexical scope.">Obtém o deslocamento inicial do escopo léxico atual.</summary>
      <returns vsli:raw="The start offset of the current lexical scope.">O deslocamento inicial do escopo léxico atual.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolVariable">
      <summary vsli:raw="Represents a variable within a symbol store.">Representa uma variável em um repositório de símbolos.</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField1">
      <summary vsli:raw="Gets the first address of a variable.">Obtém o primeiro endereço de uma variável.</summary>
      <returns vsli:raw="The first address of the variable.">O primeiro endereço da variável.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField2">
      <summary vsli:raw="Gets the second address of a variable.">Obtém o segundo endereço de uma variável.</summary>
      <returns vsli:raw="The second address of the variable.">O segundo endereço da variável.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField3">
      <summary vsli:raw="Gets the third address of a variable.">Obtém o terceiro endereço de uma variável.</summary>
      <returns vsli:raw="The third address of the variable.">O terceiro endereço da variável.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressKind">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymAddressKind&quot; /&gt; value describing the type of the address.">Obtém o valor <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> que descreve o tipo de endereço.</summary>
      <returns vsli:raw="The type of the address. One of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymAddressKind&quot; /&gt; values.">O tipo do endereço. Um dos valores de <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" />.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Attributes">
      <summary vsli:raw="Gets the attributes of the variable.">Obtém os atributos da variável.</summary>
      <returns vsli:raw="The variable attributes.">Os atributos da variável.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.EndOffset">
      <summary vsli:raw="Gets the end offset of a variable within the scope of the variable.">Obtém o deslocamento final de uma variável no escopo da variável.</summary>
      <returns vsli:raw="The end offset of the variable.">O deslocamento final da variável.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolVariable.GetSignature">
      <summary vsli:raw="Gets the variable signature.">Obtém a assinatura da variável.</summary>
      <returns vsli:raw="The variable signature as an opaque blob.">A assinatura da variável como um blob opaco.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Name">
      <summary vsli:raw="Gets the name of the variable.">Obtém o nome da variável.</summary>
      <returns vsli:raw="The name of the variable.">O nome da variável.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.StartOffset">
      <summary vsli:raw="Gets the start offset of the variable within the scope of the variable.">Obtém o deslocamento inicial da variável no escopo da variável.</summary>
      <returns vsli:raw="The start offset of the variable.">O deslocamento inicial da variável.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolWriter">
      <summary vsli:raw="Represents a symbol writer for managed code.">Representa um gravador de símbolo do código gerenciado.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
      <summary vsli:raw="Closes &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; and commits the symbols to the symbol store.">Fecha <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> e confirma os símbolos no repositório de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
      <summary vsli:raw="Closes the current method.">Fecha o método atual.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace">
      <summary vsli:raw="Closes the most recent namespace.">Fecha o namespace mais recente.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
      <summary vsli:raw="Closes the current lexical scope.">Fecha o escopo léxico atual.</summary>
      <param name="endOffset" vsli:raw="The points past the last instruction in the scope.">Os pontos após a última instrução no escopo.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary vsli:raw="Defines a source document.">Define um documento de origem.</summary>
      <param name="url" vsli:raw="The URL that identifies the document.">A URL que identifica o documento.</param>
      <param name="language" vsli:raw="The document language. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">O idioma do documento. Esse parâmetro pode ser <see cref="F:System.Guid.Empty" />.</param>
      <param name="languageVendor" vsli:raw="The identity of the vendor for the document language. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">A identidade do fornecedor para o idioma do documento. Esse parâmetro pode ser <see cref="F:System.Guid.Empty" />.</param>
      <param name="documentType" vsli:raw="The type of the document. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">O tipo do documento. Esse parâmetro pode ser <see cref="F:System.Guid.Empty" />.</param>
      <returns vsli:raw="The object that represents the document.">O objeto que representa o documento.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a field in a type or a global field.">Define um campo em um tipo ou um campo global.</summary>
      <param name="parent" vsli:raw="The metadata type or method token.">O tipo de metadados ou método de token.</param>
      <param name="name" vsli:raw="The field name.">O nome do campo.</param>
      <param name="attributes" vsli:raw="A bitwise combination of the field attributes.">Uma combinação bit a bit dos atributos do campo.</param>
      <param name="signature" vsli:raw="The field signature.">A assinatura de campo.</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt; and &lt;paramref name=&quot;addr2&quot; /&gt;.">Os tipos de endereço para <paramref name="addr1" /> e <paramref name="addr2" />.</param>
      <param name="addr1" vsli:raw="The first address for the field specification.">O primeiro endereço para a especificação do campo.</param>
      <param name="addr2" vsli:raw="The second address for the field specification.">O segundo endereço para a especificação de campo.</param>
      <param name="addr3" vsli:raw="The third address for the field specification.">O terceiro endereço para a especificação de campo.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single global variable.">Define uma única variável global.</summary>
      <param name="name" vsli:raw="The global variable name.">O nome da variável global.</param>
      <param name="attributes" vsli:raw="A bitwise combination of the global variable attributes.">Uma combinação bit a bit dos atributos da variável global.</param>
      <param name="signature" vsli:raw="The global variable signature.">A assinatura da variável global.</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">Os tipos de endereço de <paramref name="addr1" />, <paramref name="addr2" /> e <paramref name="addr3" />.</param>
      <param name="addr1" vsli:raw="The first address for the global variable specification.">O primeiro endereço para a especificação da variável global.</param>
      <param name="addr2" vsli:raw="The second address for the global variable specification.">O segundo endereço para a especificação da variável global.</param>
      <param name="addr3" vsli:raw="The third address for the global variable specification.">O terceiro endereço para a especificação da variável global.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single variable in the current lexical scope.">Define uma única variável no escopo léxico atual.</summary>
      <param name="name" vsli:raw="The local variable name.">O nome da variável local.</param>
      <param name="attributes" vsli:raw="A bitwise combination of the local variable attributes.">Uma combinação bit a bit dos atributos da variável local.</param>
      <param name="signature" vsli:raw="The local variable signature.">A assinatura da variável local.</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">Os tipos de endereço de <paramref name="addr1" />, <paramref name="addr2" /> e <paramref name="addr3" />.</param>
      <param name="addr1" vsli:raw="The first address for the local variable specification.">O primeiro endereço para a especificação da variável local.</param>
      <param name="addr2" vsli:raw="The second address for the local variable specification.">O segundo endereço para a especificação da variável local.</param>
      <param name="addr3" vsli:raw="The third address for the local variable specification.">O terceiro endereço para a especificação da variável local.</param>
      <param name="startOffset" vsli:raw="The start offset for the variable. If this parameter is zero, it is ignored and the variable is defined throughout the entire scope. If the parameter is nonzero, the variable falls within the offsets of the current scope.">O deslocamento inicial da variável. Se este parâmetro for zero, ele será ignorado e a variável será definida ao longo de todo o escopo. Se o parâmetro for diferente de zero, a variável estará dentro dos deslocamentos do escopo atual.</param>
      <param name="endOffset" vsli:raw="The end offset for the variable. If this parameter is zero, it is ignored and the variable is defined throughout the entire scope. If the parameter is nonzero, the variable falls within the offsets of the current scope.">O deslocamento final da variável. Se este parâmetro for zero, ele será ignorado e a variável será definida ao longo de todo o escopo. Se o parâmetro for diferente de zero, a variável estará dentro dos deslocamentos do escopo atual.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single parameter in the current method. The type of each parameter is taken from its position within the signature of the method.">Define um único parâmetro no método atual. O tipo de cada parâmetro é obtido da sua posição dentro a assinatura do método.</summary>
      <param name="name" vsli:raw="The parameter name.">O nome do parâmetro.</param>
      <param name="attributes" vsli:raw="A bitwise combination of the parameter attributes.">Uma combinação bit a bit dos atributos de parâmetro.</param>
      <param name="sequence" vsli:raw="The parameter signature.">A assinatura do parâmetro.</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">Os tipos de endereço de <paramref name="addr1" />, <paramref name="addr2" /> e <paramref name="addr3" />.</param>
      <param name="addr1" vsli:raw="The first address for the parameter specification.">O primeiro endereço para a especificação de parâmetro.</param>
      <param name="addr2" vsli:raw="The second address for the parameter specification.">O segundo endereço para a especificação de parâmetro.</param>
      <param name="addr3" vsli:raw="The third address for the parameter specification.">O terceiro endereço para a especificação de parâmetro.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Defines a group of sequence points within the current method.">Define um grupo de pontos de sequência dentro do método atual.</summary>
      <param name="document" vsli:raw="The document object for which the sequence points are being defined.">O objeto de documento para o qual os pontos de sequência estão sendo definidos.</param>
      <param name="offsets" vsli:raw="The sequence point offsets measured from the beginning of methods.">Os deslocamentos dos pontos de sequência medidos do início dos métodos.</param>
      <param name="lines" vsli:raw="The document lines for the sequence points.">As linhas do documento para os pontos de sequência.</param>
      <param name="columns" vsli:raw="The document positions for the sequence points.">As posições no documento para os pontos de sequência.</param>
      <param name="endLines" vsli:raw="The document end lines for the sequence points.">As linhas finais do documento para os pontos de sequência.</param>
      <param name="endColumns" vsli:raw="The document end positions for the sequence points.">As posições das linhas finais do documento para os pontos de sequência.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
      <summary vsli:raw="Sets the metadata emitter interface to associate with a writer.">Define a interface do emissor de metadados a ser associada a um gravador.</summary>
      <param name="emitter" vsli:raw="The metadata emitter interface.">A interface do emissor de metadados.</param>
      <param name="filename" vsli:raw="The file name for which the debugging symbols are written. Some writers require a file name, and others do not. If a file name is specified for a writer that does not use file names, this parameter is ignored.">O nome do arquivo para o qual os símbolos de depuração são gravados. Alguns gravadores exigem um nome de arquivo, outros não. Se um nome de arquivo for especificado para um gravador que não use nomes de arquivo, esse parâmetro será ignorado.</param>
      <param name="fFullBuild" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; indicates that this is a full rebuild; &lt;see langword=&quot;false&quot; /&gt; indicates that this is an incremental compilation.">
        <see langword="true" /> indica que se trata de uma recompilação completa; <see langword="false" /> indica uma compilação incremental.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Opens a method to place symbol information into.">Abre um método no qual as informações de símbolo serão colocadas.</summary>
      <param name="method" vsli:raw="The metadata token for the method to be opened.">O token de metadados do método a ser aberto.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
      <summary vsli:raw="Opens a new namespace.">Abre um novo namespace.</summary>
      <param name="name" vsli:raw="The name of the new namespace.">O nome do novo namespace.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
      <summary vsli:raw="Opens a new lexical scope in the current method.">Abre um novo escopo léxico no método atual.</summary>
      <param name="startOffset" vsli:raw="The offset, in bytes, from the beginning of the method to the first instruction in the lexical scope.">O deslocamento, em bytes, do início do método até a primeira instrução no escopo léxico.</param>
      <returns vsli:raw="An opaque scope identifier that can be used with &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)&quot; /&gt; to define the start and end offsets of a scope at a later time. In this case, the offsets passed to &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)&quot; /&gt; and &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)&quot; /&gt; are ignored. A scope identifier is valid only in the current method.">Um identificador de escopo opaco que pode ser usado com <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" /> para definir os deslocamentos de início e término de um escopo em um momento posterior. Nesse caso, os deslocamentos passados para <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /> e <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" /> são ignorados. Um identificador de escopo é válido somente no método atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
      <summary vsli:raw="Specifies the true start and end of a method within a source file. Use &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)&quot; /&gt; to specify the extent of a method, independent of the sequence points that exist within the method.">Especifica os verdadeiros início e término de um método de dentro de um arquivo de origem. Use <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" /> para especificar a extensão de um método, independente dos pontos de sequência que existem dentro do método.</summary>
      <param name="startDoc" vsli:raw="The document that contains the starting position.">O documento que contém a posição inicial.</param>
      <param name="startLine" vsli:raw="The starting line number.">O número de linha inicial.</param>
      <param name="startColumn" vsli:raw="The starting column.">A coluna inicial.</param>
      <param name="endDoc" vsli:raw="The document that contains the ending position.">O documento que contém a posição final.</param>
      <param name="endLine" vsli:raw="The ending line number.">O número de linha final.</param>
      <param name="endColumn" vsli:raw="The ending column number.">O número de coluna final.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines the offset range for the specified lexical scope.">Define o intervalo de deslocamento do escopo léxico especificado.</summary>
      <param name="scopeID" vsli:raw="The identifier of the lexical scope.">O identificador do escopo léxico.</param>
      <param name="startOffset" vsli:raw="The byte offset of the beginning of the lexical scope.">O deslocamento de bytes do início do escopo léxico.</param>
      <param name="endOffset" vsli:raw="The byte offset of the end of the lexical scope.">O deslocamento de bytes do fim do escopo léxico.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
      <summary vsli:raw="Defines an attribute when given the attribute name and the attribute value.">Define um atributo quando é fornecido o nome e o valor do atributo.</summary>
      <param name="parent" vsli:raw="The metadata token for which the attribute is being defined.">O token de metadados para o qual o atributo está sendo definido.</param>
      <param name="name" vsli:raw="The attribute name.">O nome do atributo.</param>
      <param name="data" vsli:raw="The attribute value.">O valor do atributo.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
      <summary vsli:raw="Sets the underlying &lt;see langword=&quot;ISymUnmanagedWriter&quot; /&gt; (the corresponding unmanaged interface) that a managed &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; uses to emit symbols.">Define o <see langword="ISymUnmanagedWriter" /> subjacente (a interface não gerenciada correspondente) que um <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> gerenciado usa para emitir símbolos.</summary>
      <param name="underlyingWriter" vsli:raw="A pointer to code that represents the underlying writer.">Um ponteiro para o código que representa o gravador subjacente.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Identifies the user-defined method as the entry point for the current module.">Identifica o método definido pelo usuário como o ponto de entrada do módulo atual.</summary>
      <param name="entryMethod" vsli:raw="The metadata token for the method that is the user entry point.">O token de metadados do método que é o ponto de entrada do usuário.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
      <summary vsli:raw="Specifies that the given, fully qualified namespace name is used within the open lexical scope.">Especifica que o nome totalmente qualificado do namespace fornecido é usado dentro do escopo léxico aberto.</summary>
      <param name="fullName" vsli:raw="The fully qualified name of the namespace.">O nome totalmente qualificado do namespace.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymAddressKind">
      <summary vsli:raw="Specifies address types for local variables, parameters, and fields in the methods &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)&quot; /&gt;, &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)&quot; /&gt;, and &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)&quot; /&gt; of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; interface.">Especifica os tipos de endereço para variáveis locais, parâmetros e campos nos métodos <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />, <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> e <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> da interface <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" />.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.BitField">
      <summary vsli:raw="A bit field. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the position where the field starts, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the field length.">Um campo de bits. O parâmetro <paramref name="addr1" /> é a posição em que o campo é iniciado e o parâmetro <paramref name="addr2" /> é o tamanho do campo.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.ILOffset">
      <summary vsli:raw="A Microsoft intermediate language (MSIL) offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the MSIL local variable or parameter index.">Um deslocamento MSIL (Microsoft Intermediate Language). O parâmetro <paramref name="addr1" /> é o índice de parâmetro ou variável local da MSIL.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeOffset">
      <summary vsli:raw="A native offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the offset from the start of the parent.">Um deslocamento nativo. O parâmetro <paramref name="addr1" /> é o deslocamento do início do pai.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegister">
      <summary vsli:raw="A native register address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the register in which the variable is stored.">Um endereço de registro nativo. O parâmetro <paramref name="addr1" /> é o registro no qual a variável é armazenada.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRegister">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the low-order register, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the high-order register.">Um endereço relativo ao registro. O parâmetro <paramref name="addr1" /> é o registro de ordem inferior e o parâmetro <paramref name="addr2" /> é o registro de ordem superior.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRelative">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the register, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset.">Um endereço relativo ao registro. O parâmetro <paramref name="addr1" /> é o registro e o parâmetro <paramref name="addr2" /> é o deslocamento.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterStack">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the low-order register, the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the stack register, and the &lt;paramref name=&quot;addr3&quot; /&gt; parameter is the offset from the stack pointer to the high-order part of the value.">Um endereço relativo ao registro. O parâmetro <paramref name="addr1" /> é o registro de ordem inferior, o parâmetro <paramref name="addr2" /> é o registro de pilha e o <paramref name="addr3" /> parâmetro é o deslocamento do ponteiro de pilha até a parte de ordem superior do valor.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRVA">
      <summary vsli:raw="A native Relevant Virtual Address (RVA). The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the RVA in the module.">Um RVA (Endereço Virtual Relevante) nativo. O parâmetro <paramref name="addr1" /> é o RVA no módulo.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeSectionOffset">
      <summary vsli:raw="A native section offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the section, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset.">Um deslocamento de seção nativo. O parâmetro <paramref name="addr1" /> é a seção e o parâmetro <paramref name="addr2" /> é o deslocamento.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeStackRegister">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the stack register, the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset from the stack pointer to the low-order part of the value, and the &lt;paramref name=&quot;addr3&quot; /&gt; parameter is the high-order register.">Um endereço relativo ao registro. O parâmetro <paramref name="addr1" /> é o registro de pilha, o parâmetro <paramref name="addr2" /> é o deslocamento do ponteiro de pilha até a parte de ordem inferior do valor e o parâmetro <paramref name="addr3" /> é o registro de ordem superior.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymbolToken">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure is an object representation of a token that represents symbolic information.">A estrutura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> é uma representação de objeto de um token que representa informações simbólicas.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure when given a value.">Inicializa uma nova instância da estrutura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> quando um valor é determinado.</summary>
      <param name="val" vsli:raw="The value to be used for the token.">O valor a ser usado para o token.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Determines whether &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance.">Determina se <paramref name="obj" /> é igual a esta instância.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; to check.">O <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> a ser verificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> for igual a essa instância; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Object)">
      <summary vsli:raw="Determines whether &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; and is equal to this instance.">Determina se <paramref name="obj" /> é uma instância de <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> e é igual a esta instância.</summary>
      <param name="obj" vsli:raw="The object to check.">O objeto a ser verificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; and is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> for uma instância de <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> e for igual a esta instância; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetHashCode">
      <summary vsli:raw="Generates the hash code for the current token.">Gera o código hash para o token atual.</summary>
      <returns vsli:raw="The hash code for the current token.">O código hash para o token atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetToken">
      <summary vsli:raw="Gets the value of the current token.">Obtém o valor do token atual.</summary>
      <returns vsli:raw="The value of the current token.">O valor do token atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Equality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Returns a value indicating whether two &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; objects are equal.">Retorna um valor que indica se dois objetos <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> são iguais.</summary>
      <param name="a" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">Uma estrutura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <param name="b" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">Uma estrutura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; and &lt;paramref name=&quot;b&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="a" /> e <paramref name="b" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Returns a value indicating whether two &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; objects are not equal.">Retorna um valor que indica se dois objetos <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> não são iguais.</summary>
      <param name="a" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">Uma estrutura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <param name="b" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">Uma estrutura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; and &lt;paramref name=&quot;b&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="a" /> e <paramref name="b" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymDocumentType">
      <summary vsli:raw="Holds the public GUIDs for document types to be used with the symbol store.">Retém os GUIDs públicos para tipos de documento a serem usados com o repositório de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymDocumentType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymDocumentType&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.SymbolStore.SymDocumentType" />.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymDocumentType.Text">
      <summary vsli:raw="Specifies the GUID of the document type to be used with the symbol store.">Especifica o GUID do tipo de documento a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageType">
      <summary vsli:raw="Holds the public GUIDs for language types to be used with the symbol store.">Retém os GUIDs públicos para tipos de linguagem a serem usados com o repositório de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymLanguageType&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.SymbolStore.SymLanguageType" />.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Basic">
      <summary vsli:raw="Specifies the GUID of the Basic language type to be used with the symbol store.">Especifica o GUID do tipo de linguagem Basic a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.C">
      <summary vsli:raw="Specifies the GUID of the C language type to be used with the symbol store.">Especifica o GUID do tipo de linguagem C a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Cobol">
      <summary vsli:raw="Specifies the GUID of the Cobol language type to be used with the symbol store.">Especifica o GUID do tipo de linguagem Cobol a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CPlusPlus">
      <summary vsli:raw="Specifies the GUID of the C++ language type to be used with the symbol store.">Especifica o GUID do tipo de linguagem C++ a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CSharp">
      <summary vsli:raw="Specifies the GUID of the C# language type to be used with the symbol store.">Especifica o GUID do tipo de linguagem C# a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.ILAssembly">
      <summary vsli:raw="Specifies the GUID of the ILAssembly language type to be used with the symbol store.">Especifica o GUID do tipo de linguagem ILAssembly a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Java">
      <summary vsli:raw="Specifies the GUID of the Java language type to be used with the symbol store.">Especifica o GUID do tipo de linguagem Java a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.JScript">
      <summary vsli:raw="Specifies the GUID of the JScript language type to be used with the symbol store.">Especifica o GUID do tipo de linguagem JScript a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.MCPlusPlus">
      <summary vsli:raw="Specifies the GUID of the C++ language type to be used with the symbol store.">Especifica o GUID do tipo de linguagem C++ a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Pascal">
      <summary vsli:raw="Specifies the GUID of the Pascal language type to be used with the symbol store.">Especifica o GUID do tipo de linguagem Pascal a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.SMC">
      <summary vsli:raw="Specifies the GUID of the SMC language type to be used with the symbol store.">Especifica o GUID do tipo de linguagem SMC a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageVendor">
      <summary vsli:raw="Holds the public GUIDs for language vendors to be used with the symbol store.">Retém os GUIDs públicos para fornecedores de linguagem a serem usados com o repositório de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageVendor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymLanguageVendor&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.SymbolStore.SymLanguageVendor" />.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageVendor.Microsoft">
      <summary vsli:raw="Specifies the GUID of the Microsoft language vendor.">Especifica o GUID do fornecedor de linguagem da Microsoft.</summary>
    </member>
  </members>
</doc>
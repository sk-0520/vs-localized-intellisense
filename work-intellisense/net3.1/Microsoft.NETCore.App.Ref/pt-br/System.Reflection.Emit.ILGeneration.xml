<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Emit.ILGeneration</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.CustomAttributeBuilder">
      <summary>Ajuda a criar atributos personalizados.</summary>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])">
      <summary>Inicializa uma instância da classe <see langword="CustomAttributeBuilder" /> dado o construtor para o atributo personalizado e os argumentos para o construtor.</summary>
      <param name="con">O construtor do atributo personalizado.</param>
      <param name="constructorArgs">Os argumentos para o construtor do atributo personalizado.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="con" /> é privado ou estático.
- ou -
O número de argumentos fornecidos não corresponde ao número de parâmetros do construtor conforme exigido pela convenção de chamada do construtor.
- ou -
O tipo de argumento fornecido não corresponde ao tipo do parâmetro declarado no construtor.
- ou -
Um argumento fornecido é um tipo de referência diferente de <see cref="T:System.String" /> ou <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> ou <paramref name="constructorArgs" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary>Inicializa uma instância da classe <see langword="CustomAttributeBuilder" /> dado o construtor para o atributo personalizado, os argumentos para o construtor e um conjunto de pares nome-valor nomeados.</summary>
      <param name="con">O construtor do atributo personalizado.</param>
      <param name="constructorArgs">Os argumentos para o construtor do atributo personalizado.</param>
      <param name="namedFields">Campos nomeados do atributo personalizado.</param>
      <param name="fieldValues">Valores dos campos nomeados do atributo personalizado.</param>
      <exception cref="T:System.ArgumentException">Os comprimentos das matrizes <paramref name="namedFields" /> e <paramref name="fieldValues" /> são diferentes.
- ou -
<paramref name="con" /> é privado ou estático.
- ou -
O número de argumentos fornecidos não corresponde ao número de parâmetros do construtor conforme exigido pela convenção de chamada do construtor.
- ou -
O tipo de argumento fornecido não corresponde ao tipo do parâmetro declarado no construtor.
- ou -
Os tipos de valores de campo não correspondem aos tipos dos campos nomeados.
- ou -
O campo não pertence à mesma classe ou classe base do construtor.
- ou -
Um argumento ou campo nomeado fornecido é um tipo de referência diferente de <see cref="T:System.String" /> ou <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException">Um dos parâmetros é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])">
      <summary>Inicializa uma instância da classe <see langword="CustomAttributeBuilder" /> dado o construtor para o atributo personalizado, os argumentos para o construtor e um conjunto pares de valores ou propriedades nomeadas.</summary>
      <param name="con">O construtor do atributo personalizado.</param>
      <param name="constructorArgs">Os argumentos para o construtor do atributo personalizado.</param>
      <param name="namedProperties">Propriedades nomeadas do atributo personalizado.</param>
      <param name="propertyValues">Valores para as propriedades nomeadas do atributo personalizado.</param>
      <exception cref="T:System.ArgumentException">Os comprimentos das matrizes <paramref name="namedProperties" /> e <paramref name="propertyValues" /> são diferentes.
- ou -
<paramref name="con" /> é privado ou estático.
- ou -
O número de argumentos fornecidos não corresponde ao número de parâmetros do construtor conforme exigido pela convenção de chamada do construtor.
- ou -
O tipo de argumento fornecido não corresponde ao tipo do parâmetro declarado no construtor.
- ou -
Os tipos de valores de propriedade não correspondem aos tipos das propriedades nomeadas.
- ou -
Uma propriedade não tem nenhum método setter.
- ou -
A propriedade não pertence à mesma classe ou classe base do construtor.
- ou -
Um argumento ou propriedade nomeada fornecido é um tipo de referência diferente de <see cref="T:System.String" /> ou <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException">Um dos parâmetros é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary>Inicializa uma instância da classe <see langword="CustomAttributeBuilder" /> dado o construtor para o atributo personalizado, os argumentos para o construtor, um conjunto pares de valores ou propriedades nomeadas e um conjunto de campos nomeados ou pares de valores.</summary>
      <param name="con">O construtor do atributo personalizado.</param>
      <param name="constructorArgs">Os argumentos para o construtor do atributo personalizado.</param>
      <param name="namedProperties">Propriedades nomeadas do atributo personalizado.</param>
      <param name="propertyValues">Valores para as propriedades nomeadas do atributo personalizado.</param>
      <param name="namedFields">Campos nomeados do atributo personalizado.</param>
      <param name="fieldValues">Valores dos campos nomeados do atributo personalizado.</param>
      <exception cref="T:System.ArgumentException">Os comprimentos das matrizes <paramref name="namedProperties" /> e <paramref name="propertyValues" /> são diferentes.
- ou -
Os comprimentos das matrizes <paramref name="namedFields" /> e <paramref name="fieldValues" /> são diferentes.
- ou -
<paramref name="con" /> é privado ou estático.
- ou -
O número de argumentos fornecidos não corresponde ao número de parâmetros do construtor conforme exigido pela convenção de chamada do construtor.
- ou -
O tipo de argumento fornecido não corresponde ao tipo do parâmetro declarado no construtor.
- ou -
Os tipos de valores de propriedade não correspondem aos tipos das propriedades nomeadas.
- ou -
Os tipos de valores de campo não correspondem aos tipos dos campos correspondentes.
- ou -
Uma propriedade não tem nenhum setter.
- ou -
A propriedade ou campo não pertence à mesma classe ou classe base do construtor.
- ou -
Um argumento, propriedade nomeada ou campo nomeado fornecido é um tipo de referência diferente de <see cref="T:System.String" /> ou <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException">Um dos parâmetros é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.ILGenerator">
      <summary>Descreve instruções MSIL (Microsoft Intermediate Language).</summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
      <summary>Inicia um bloco catch.</summary>
      <param name="exceptionType">O objeto <see cref="T:System.Type" /> que representa a exceção.</param>
      <exception cref="T:System.ArgumentException">O bloco catch está dentro de uma exceção filtrada.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptionType" /> é <see langword="null" /> e o bloco de filtragem de exceção não retornou um valor que indica que blocos finally devem ser executados até esse bloco catch ser localizado.</exception>
      <exception cref="T:System.NotSupportedException">A MSIL (Microsoft Intermediate Language) sendo gerada ainda não está em um bloco de exceção.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
      <summary>Inicia um bloco de exceção para uma exceção filtrada.</summary>
      <exception cref="T:System.NotSupportedException">A MSIL (Microsoft Intermediate Language) sendo gerada ainda não está em um bloco de exceção.
-ou-
Este <see cref="T:System.Reflection.Emit.ILGenerator" /> pertence a outro <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
      <summary>Inicia um bloco de exceção para uma exceção não filtrada.</summary>
      <returns>O rótulo para o fim do bloco. Isso deixará você no local correto para executar blocos finally ou concluir o bloco try.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
      <summary>Inicia um bloco de falha de exceção no fluxo de MSIL (Microsoft Intermediate Language).</summary>
      <exception cref="T:System.NotSupportedException">A MSIL sendo gerada ainda não está em um bloco de exceção.
-ou-
Este <see cref="T:System.Reflection.Emit.ILGenerator" /> pertence a outro <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
      <summary>Começa um bloco finally no fluxo de instruções da MSIL (Microsoft Intermediate Language).</summary>
      <exception cref="T:System.NotSupportedException">A MSIL sendo gerada ainda não está em um bloco de exceção.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginScope">
      <summary>Inicia um escopo léxico.</summary>
      <exception cref="T:System.NotSupportedException">Este <see cref="T:System.Reflection.Emit.ILGenerator" /> pertence a outro <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
      <summary>Declara uma variável local do tipo especificado.</summary>
      <param name="localType">Um objeto <see cref="T:System.Type" /> que representa o tipo da variável local.</param>
      <returns>A variável local declarada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">O tipo recipiente foi criado pelo método <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
      <summary>Declara uma variável local do tipo especificado, opcionalmente fixar o objeto referenciado pela variável.</summary>
      <param name="localType">Um objeto <see cref="T:System.Type" /> que representa o tipo da variável local.</param>
      <param name="pinned">
        <see langword="true" /> para fixar o objeto na memória; caso contrário, <see langword="false" />.</param>
      <returns>Um objeto <see cref="T:System.Reflection.Emit.LocalBuilder" /> que representa a variável local.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">O tipo recipiente foi criado pelo método <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.
-ou-
O corpo do método delimitador foi criado pelo método <see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" />.</exception>
      <exception cref="T:System.NotSupportedException">O método com o qual este <see cref="T:System.Reflection.Emit.ILGenerator" /> está associado não é representado por um <see cref="T:System.Reflection.Emit.MethodBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DefineLabel">
      <summary>Declara um novo rótulo.</summary>
      <returns>Um novo rótulo que pode ser usado como um token para ramificação.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
      <summary>Coloca a instrução especificada no fluxo de instruções.</summary>
      <param name="opcode">A instrução do MSIL (Microsoft Intermediate Language) a ser colocada no fluxo.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
      <summary>Coloca a instrução especificada e o argumento de caractere no fluxo de instruções da MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode">A instrução MSIL a ser colocada no fluxo.</param>
      <param name="arg">O argumento de caractere enviado por push para o fluxo imediatamente após a instrução.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
      <summary>Coloca a instrução especificada e o argumento numérico no fluxo de instruções da MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode">A instrução MSIL a ser colocada no fluxo. Definido na enumeração <see langword="OpCodes" />.</param>
      <param name="arg">O argumento numérico enviado por push para o fluxo imediatamente após a instrução.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
      <summary>Coloca a instrução especificada e o argumento numérico no fluxo de instruções da MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode">A instrução MSIL para ser emitida para o fluxo.</param>
      <param name="arg">O argumento <see langword="Int" /> enviado por push para o fluxo imediatamente após a instrução.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
      <summary>Coloca a instrução especificada e o argumento numérico no fluxo de instruções da MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode">A instrução MSIL a ser colocada no fluxo.</param>
      <param name="arg">O argumento numérico enviado por push para o fluxo imediatamente após a instrução.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
      <summary>Coloca a instrução especificada e o argumento numérico no fluxo de instruções da MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode">A instrução MSIL a ser colocada no fluxo.</param>
      <param name="arg">O argumento numérico enviado por push para o fluxo imediatamente após a instrução.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
      <summary>Coloca a instrução especificada e o token de metadados para o construtor especificado no fluxo de instruções da MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode">A instrução MSIL para ser emitida para o fluxo.</param>
      <param name="con">Um <see langword="ConstructorInfo" /> que representa um construtor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> é <see langword="null" />. Essa exceção é nova no .NET Framework 4.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
      <summary>Coloca a instrução especificada para o fluxo da MSIL (Microsoft Intermediate Language) e deixa espaço para incluir um rótulo após a realização das correções.</summary>
      <param name="opcode">A instrução MSIL para ser emitida para o fluxo.</param>
      <param name="label">O rótulo para o qual ramificar deste local.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
      <summary>Coloca a instrução especificada para o fluxo da MSIL (Microsoft Intermediate Language) e deixa espaço para incluir um rótulo após a realização das correções.</summary>
      <param name="opcode">A instrução MSIL para ser emitida para o fluxo.</param>
      <param name="labels">A matriz de objetos de rótulo para a qual ramificar deste local. Todos os rótulos serão usados.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> é <see langword="null" />. Essa exceção é nova no .NET Framework 4.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
      <summary>Coloca a instrução especificada no fluxo da MSIL (Microsoft Intermediate Language) seguido pelo índice da variável local fornecida.</summary>
      <param name="opcode">A instrução MSIL para ser emitida para o fluxo.</param>
      <param name="local">Uma variável local.</param>
      <exception cref="T:System.ArgumentException">O método pai do parâmetro <paramref name="local" /> não corresponde ao método associado a este <see cref="T:System.Reflection.Emit.ILGenerator" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="local" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="opcode" /> é uma instrução de byte único e <paramref name="local" /> representa uma variável local com um índice maior que <see langword="Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
      <summary>Coloca a instrução especificada e o token de assinatura no fluxo de instruções da MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode">A instrução MSIL para ser emitida para o fluxo.</param>
      <param name="signature">Um auxiliar para construir um token de assinatura.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signature" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
      <summary>Coloca a instrução especificada e o token de metadados para o campo especificado no fluxo de instruções da MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode">A instrução MSIL para ser emitida para o fluxo.</param>
      <param name="field">Um <see langword="FieldInfo" /> que representa um campo.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
      <summary>Coloca a instrução especificada no fluxo da MSIL (Microsoft Intermediate Language) seguido pelo token de metadados para o método fornecido.</summary>
      <param name="opcode">A instrução MSIL para ser emitida para o fluxo.</param>
      <param name="meth">Um <see langword="MethodInfo" /> que representa um método.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="meth" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="meth" /> é um método genérico para o qual a propriedade <see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /> é <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
      <summary>Coloca a instrução especificada e o argumento de caractere no fluxo de instruções da MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode">A instrução MSIL a ser colocada no fluxo.</param>
      <param name="arg">O argumento de caractere enviado por push para o fluxo imediatamente após a instrução.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
      <summary>Coloca a instrução especificada e o argumento numérico no fluxo de instruções da MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode">A instrução MSIL a ser colocada no fluxo.</param>
      <param name="arg">O argumento <see langword="Single" /> enviado por push para o fluxo imediatamente após a instrução.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
      <summary>Coloca a instrução especificada no fluxo da MSIL (Microsoft Intermediate Language) seguido pelo token de metadados para a cadeia de caracteres fornecida.</summary>
      <param name="opcode">A instrução MSIL para ser emitida para o fluxo.</param>
      <param name="str">O <see langword="String" /> a ser emitido.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
      <summary>Coloca a instrução especificada no fluxo da MSIL (Microsoft Intermediate Language) seguido pelo token de metadados para o tipo fornecido.</summary>
      <param name="opcode">A instrução MSIL a ser colocada no fluxo.</param>
      <param name="cls">Um <see langword="Type" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cls" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
      <summary>Coloca uma instrução <see langword="call" /> ou <see langword="callvirt" /> no fluxo do MSIL (Microsoft Intermediate Language) para chamar um método <see langword="varargs" />.</summary>
      <param name="opcode">A instrução MSIL para ser emitida para o fluxo. Deve ser <see cref="F:System.Reflection.Emit.OpCodes.Call" />, <see cref="F:System.Reflection.Emit.OpCodes.Callvirt" /> ou <see cref="F:System.Reflection.Emit.OpCodes.Newobj" />.</param>
      <param name="methodInfo">O método <see langword="varargs" /> a ser chamado.</param>
      <param name="optionalParameterTypes">Os tipos dos argumentos opcionais se o método for um método <see langword="varargs" />, caso contrário, <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="opcode" /> não especifica uma chamada de método.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="methodInfo" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A convenção de chamada para o método não é <see langword="varargs" />, mas são fornecidos tipos de parâmetro opcionais. Essa exceção é lançada nas versões do .NET Framework 1.0 e 1.1. Em versões subsequentes, nenhuma exceção é lançada.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
      <summary>Coloca uma instrução <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> no fluxo da MSIL (Microsoft Intermediate Language), especificando uma convenção de chamada gerenciada para a chamada indireta.</summary>
      <param name="opcode">A instrução MSIL para ser emitida para o fluxo. Deve ser <see cref="F:System.Reflection.Emit.OpCodes.Calli" />.</param>
      <param name="callingConvention">A convenção de chamada gerenciada a ser usada.</param>
      <param name="returnType">O <see cref="T:System.Type" /> do resultado.</param>
      <param name="parameterTypes">Os tipos dos argumentos necessários para a instrução.</param>
      <param name="optionalParameterTypes">Os tipos de argumentos opcionais para chamadas <see langword="varargs" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="optionalParameterTypes" /> não é <see langword="null" />, mas <paramref name="callingConvention" /> não inclui o sinalizador <see cref="F:System.Reflection.CallingConventions.VarArgs" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
      <summary>Coloca uma instrução <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> no fluxo da MSIL (Microsoft Intermediate Language), especificando uma convenção de chamada não gerenciada para a chamada indireta.</summary>
      <param name="opcode">A instrução MSIL para ser emitida para o fluxo. Deve ser <see cref="F:System.Reflection.Emit.OpCodes.Calli" />.</param>
      <param name="unmanagedCallConv">A convenção de chamada não gerenciada a ser usada.</param>
      <param name="returnType">O <see cref="T:System.Type" /> do resultado.</param>
      <param name="parameterTypes">Os tipos dos argumentos necessários para a instrução.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
      <summary>Emite a MSIL (Microsoft Intermediate Language) necessária para chamar <see cref="Overload:System.Console.WriteLine" /> com a variável local fornecida.</summary>
      <param name="localBuilder">A variável local cujo valor será gravado no console.</param>
      <exception cref="T:System.ArgumentException">O tipo de <paramref name="localBuilder" /> é <see cref="T:System.Reflection.Emit.TypeBuilder" /> ou <see cref="T:System.Reflection.Emit.EnumBuilder" />, que não têm suporte.
-ou-
Não há nenhuma sobrecarga de <see cref="Overload:System.Console.WriteLine" /> que aceita o tipo de <paramref name="localBuilder" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localBuilder" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
      <summary>Emite a MSIL (Microsoft Intermediate Language) necessária para chamar <see cref="Overload:System.Console.WriteLine" /> com o campo fornecido.</summary>
      <param name="fld">O campo cujo valor será gravado no console.</param>
      <exception cref="T:System.ArgumentException">Não há nenhuma sobrecarga do método <see cref="Overload:System.Console.WriteLine" /> que aceita o tipo do campo especificado.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fld" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">O tipo do campo é <see cref="T:System.Reflection.Emit.TypeBuilder" /> ou <see cref="T:System.Reflection.Emit.EnumBuilder" />, que não têm suporte.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
      <summary>Emite a MSIL (Microsoft Intermediate Language) para chamar <see cref="Overload:System.Console.WriteLine" /> com uma cadeia de caracteres.</summary>
      <param name="value">A cadeia de caracteres a ser impressa.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
      <summary>Termina um bloco de exceção.</summary>
      <exception cref="T:System.InvalidOperationException">O bloco de exceção final ocorre em um lugar inesperado no fluxo de código.</exception>
      <exception cref="T:System.NotSupportedException">A MSIL (Microsoft Intermediate Language) sendo gerada ainda não está em um bloco de exceção.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndScope">
      <summary>Termina um escopo léxico.</summary>
      <exception cref="T:System.NotSupportedException">Este <see cref="T:System.Reflection.Emit.ILGenerator" /> pertence a outro <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ILGenerator.ILOffset">
      <summary>Obtém o deslocamento atual, em bytes, no fluxo da MSIL (Microsoft Intermediate Language) que está sendo emitido pelo <see cref="T:System.Reflection.Emit.ILGenerator" />.</summary>
      <returns>O deslocamento no fluxo MSIL no qual a próxima instrução será emitida.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
      <summary>Marca a posição atual do fluxo da MSIL (Microsoft Intermediate Language) com o rótulo fornecido.</summary>
      <param name="loc">O rótulo para o qual definir um índice.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="loc" /> representa um índice inválido para a matriz do rótulo.
-ou-
Um índice para <paramref name="loc" /> já foi definido.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
      <summary>Emite uma instrução para gerar uma exceção.</summary>
      <param name="excType">A classe do tipo de exceção a ser gerada.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="excType" /> não é a classe <see cref="T:System.Exception" /> nem uma classe derivada de <see cref="T:System.Exception" />.
-ou-
O tipo não tem um construtor sem parâmetros.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="excType" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
      <summary>Especifica o namespace a ser usado na avaliação de locais e procura por escopo léxico ativo atual.</summary>
      <param name="usingNamespace">O namespace a ser usado na avaliação de locais e procura por escopo léxico ativo atual</param>
      <exception cref="T:System.ArgumentException">O tamanho de <paramref name="usingNamespace" /> é zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="usingNamespace" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Este <see cref="T:System.Reflection.Emit.ILGenerator" /> pertence a outro <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.Label">
      <summary>Representa um rótulo no fluxo de instrução. <see langword="Label" /> é usado em conjunto com a classe <see cref="T:System.Reflection.Emit.ILGenerator" />.</summary>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Object)">
      <summary>Verifica se o objeto fornecido é uma instância de <see langword="Label" /> e é igual a esta instância.</summary>
      <param name="obj">O objeto a ser comparado com essa instância <see langword="Label" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="obj" /> for uma instância de <see langword="Label" /> e for igual a este objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)">
      <summary>Indica se a instância atual é igual ao <see cref="T:System.Reflection.Emit.Label" /> especificado.</summary>
      <param name="obj">O <see cref="T:System.Reflection.Emit.Label" /> a ser comparado com a instância atual.</param>
      <returns>
        <see langword="true" /> se o valor de <paramref name="obj" /> for igual ao valor da instância atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.GetHashCode">
      <summary>Gera um código hash para esta instância.</summary>
      <returns>Um código hash para esta instância.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary>Indica se duas estruturas <see cref="T:System.Reflection.Emit.Label" /> são iguais.</summary>
      <param name="a">O <see cref="T:System.Reflection.Emit.Label" /> para comparar com <paramref name="b" />.</param>
      <param name="b">O <see cref="T:System.Reflection.Emit.Label" /> para comparar com <paramref name="a" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="a" /> for igual a <paramref name="b" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary>Indica se duas estruturas <see cref="T:System.Reflection.Emit.Label" /> não são iguais.</summary>
      <param name="a">O <see cref="T:System.Reflection.Emit.Label" /> para comparar com <paramref name="b" />.</param>
      <param name="b">O <see cref="T:System.Reflection.Emit.Label" /> para comparar com <paramref name="a" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="a" /> não for igual a <paramref name="b" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.Emit.LocalBuilder">
      <summary>Representa uma variável local dentro de um método ou construtor.</summary>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.IsPinned">
      <summary>Obtém um valor que indica se o objeto referenciado pela variável local está fixado na memória.</summary>
      <returns>
        <see langword="true" /> se o objeto referido pela variável local está fixado na memória; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalIndex">
      <summary>Obtém o índice com base em zero da variável local dentro do corpo de método.</summary>
      <returns>Um valor inteiro que representa a ordem de declaração da variável local dentro do corpo do método.</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalType">
      <summary>Obtém o tipo da variável local.</summary>
      <returns>O <see cref="T:System.Type" /> da variável local.</returns>
    </member>
    <member name="T:System.Reflection.Emit.ParameterBuilder">
      <summary>Cria ou associa informações de parâmetro.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Attributes">
      <summary>Recupera os atributos para esse parâmetro.</summary>
      <returns>Somente leitura. Recupera os atributos para esse parâmetro.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsIn">
      <summary>Recupera se esse é um parâmetro de entrada.</summary>
      <returns>Somente leitura. Recupera se esse é um parâmetro de entrada.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOptional">
      <summary>Recupera se esse parâmetro é opcional.</summary>
      <returns>Somente leitura. Especifica se esse parâmetro é opcional.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOut">
      <summary>Recupera se esse parâmetro é um parâmetro de saída.</summary>
      <returns>Somente leitura. Recupera se esse parâmetro é um parâmetro de saída.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Name">
      <summary>Recupera o nome do parâmetro.</summary>
      <returns>Somente leitura. Recupera o nome do parâmetro.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Position">
      <summary>Recupera a posição de assinatura para esse parâmetro.</summary>
      <returns>Somente leitura. Recupera a posição de assinatura para esse parâmetro.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)">
      <summary>Define o valor padrão do parâmetro.</summary>
      <param name="defaultValue">O valor padrão desse parâmetro.</param>
      <exception cref="T:System.ArgumentException">O parâmetro não é um dos tipos com suporte.
-ou-
O tipo de <paramref name="defaultValue" /> não coincide com o tipo do parâmetro.
-ou-
O parâmetro é do tipo <see cref="T:System.Object" /> ou outro tipo de referência, <paramref name="defaultValue" /> não é <see langword="null" /> e o valor não pode ser atribuído ao tipo de referência.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Define um atributo personalizado usando um blob de atributo personalizado especificado.</summary>
      <param name="con">O construtor do atributo personalizado.</param>
      <param name="binaryAttribute">Um blob de bytes que representa os atributos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> ou <paramref name="binaryAttribute" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Defina um atributo personalizado usando um construtor de atributos personalizados.</summary>
      <param name="customBuilder">Uma instância de uma classe auxiliar para definir o atributo personalizado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.SignatureHelper">
      <summary>Fornece métodos para a criação de assinaturas.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)">
      <summary>Adiciona um argumento à assinatura.</summary>
      <param name="clsArgument">O tipo do argumento.</param>
      <exception cref="T:System.ArgumentException">A assinatura já foi encerrada.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clsArgument" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)">
      <summary>Adiciona um argumento do tipo especificado à assinatura, especificando se o argumento está fixado.</summary>
      <param name="argument">O tipo de argumento.</param>
      <param name="pinned">
        <see langword="true" /> se o argumento estiver fixado; caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])">
      <summary>Adiciona um argumento à assinatura, com modificadores personalizados especificados.</summary>
      <param name="argument">O tipo de argumento.</param>
      <param name="requiredCustomModifiers">Uma matriz de tipos que representa os modificadores personalizados obrigatórios para o argumento, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se o argumento não tiver modificadores personalizados obrigatórios, especifique <see langword="null" />.</param>
      <param name="optionalCustomModifiers">Uma matriz de tipos que representa os modificadores personalizados opcionais para o argumento, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se o argumento não tiver nenhum modificador personalizado opcional, especifique <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> é <see langword="null" />.
- ou -
Um elemento de <paramref name="requiredCustomModifiers" /> ou <paramref name="optionalCustomModifiers" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">A assinatura já foi encerrada.
- ou -
Um dos modificadores personalizados especificados é um tipo de matriz.
- ou -
Um dos modificadores personalizados especificados é um tipo genérico aberto. Ou seja, a propriedade <see cref="P:System.Type.ContainsGenericParameters" /> é <see langword="true" /> para o modificador personalizado.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])">
      <summary>Adiciona um conjunto de argumentos à assinatura, com modificadores personalizados especificados.</summary>
      <param name="arguments">Os tipos dos argumentos a serem adicionados.</param>
      <param name="requiredCustomModifiers">Uma matriz de matrizes de tipos. Cada matriz de tipos representa os modificadores personalizados obrigatórios para o argumento correspondente, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se um argumento específico não tiver nenhum modificador personalizado obrigatório, especifique <see langword="null" />, em vez de uma matriz de tipos. Se nenhum dos argumentos tiver modificadores personalizados obrigatórios, especifique <see langword="null" /> em vez de uma matriz de matrizes.</param>
      <param name="optionalCustomModifiers">Uma matriz de matrizes de tipos. Cada matriz de tipos representa os modificadores personalizados opcionais para o argumento correspondente, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se um argumento específico não tiver nenhum modificador personalizado opcional, especifique <see langword="null" />, em vez de uma matriz de tipos. Se nenhum dos argumentos tiver modificadores personalizados opcionais, especifique <see langword="null" /> em vez de uma matriz de matrizes.</param>
      <exception cref="T:System.ArgumentNullException">Um elemento de <paramref name="arguments" /> é <see langword="null" />.
- ou -
Um dos modificadores personalizados especificados é <see langword="null" />. (No entanto, <see langword="null" /> pode ser especificado para a matriz de modificadores personalizados para qualquer argumento.)</exception>
      <exception cref="T:System.ArgumentException">A assinatura já foi encerrada.
- ou -
Um dos modificadores personalizados especificados é um tipo de matriz.
- ou -
Um dos modificadores personalizados especificados é um tipo genérico aberto. Ou seja, a propriedade <see cref="P:System.Type.ContainsGenericParameters" /> é <see langword="true" /> para o modificador personalizado.
- ou -
O tamanho de <paramref name="requiredCustomModifiers" /> ou <paramref name="optionalCustomModifiers" /> não é igual ao tamanho de <paramref name="arguments" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddSentinel">
      <summary>Marca o final de uma parte fixa vararg. Isso só será usado se o chamador estiver criando um site de chamada de assinatura vararg.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)">
      <summary>Verifica se esta instância é igual ao objeto fornecido.</summary>
      <param name="obj">O objeto com o qual esta instância deverá ser comparada.</param>
      <returns>
        <see langword="true" /> se o objeto fornecido for um <see langword="SignatureHelper" /> e representar a mesma assinatura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)">
      <summary>Retorna um auxiliar de assinatura para um campo.</summary>
      <param name="mod">O módulo dinâmico que contém o campo para o qual o <see langword="SignatureHelper" /> é solicitado.</param>
      <returns>O objeto <see langword="SignatureHelper" /> para um campo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetHashCode">
      <summary>Cria e retorna um código hash para esta instância.</summary>
      <returns>O código hash com base no nome.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper">
      <summary>Retorna um auxiliar de assinatura para uma variável local.</summary>
      <returns>Um <see cref="T:System.Reflection.Emit.SignatureHelper" /> para uma variável local.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)">
      <summary>Retorna um auxiliar de assinatura para uma variável local.</summary>
      <param name="mod">O módulo dinâmico que contém a variável local para a qual o <see langword="SignatureHelper" /> é solicitado.</param>
      <returns>O objeto <see langword="SignatureHelper" /> para uma variável local.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)">
      <summary>Retorna um auxiliar de assinatura para um método considerando a convenção de chamada e o tipo de retorno do método.</summary>
      <param name="callingConvention">A convenção de chamada do método.</param>
      <param name="returnType">O tipo de retorno do método ou <see langword="null" /> para um tipo de retorno nulo (procedimento <see langword="Sub" /> no Visual Basic).</param>
      <returns>O objeto <see langword="SignatureHelper" /> para um método.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)">
      <summary>Retorna um auxiliar de assinatura para um método considerando o módulo, a convenção de chamada e o tipo de retorno do método.</summary>
      <param name="mod">O <see cref="T:System.Reflection.Emit.ModuleBuilder" /> que contém o método para o qual o <see langword="SignatureHelper" /> é solicitado.</param>
      <param name="callingConvention">A convenção de chamada do método.</param>
      <param name="returnType">O tipo de retorno do método ou <see langword="null" /> para um tipo de retorno nulo (procedimento <see langword="Sub" /> no Visual Basic).</param>
      <returns>O objeto <see langword="SignatureHelper" /> para um método.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> não é um <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary>Retorna um auxiliar de assinatura para um método com uma convenção de chamada padrão, considerando o módulo, o tipo de retorno e os tipos de argumento do método.</summary>
      <param name="mod">O <see cref="T:System.Reflection.Emit.ModuleBuilder" /> que contém o método para o qual o <see langword="SignatureHelper" /> é solicitado.</param>
      <param name="returnType">O tipo de retorno do método ou <see langword="null" /> para um tipo de retorno nulo (procedimento <see langword="Sub" /> no Visual Basic).</param>
      <param name="parameterTypes">Os tipos dos argumentos do método ou <see langword="null" /> se o método não tiver argumentos.</param>
      <returns>O objeto <see langword="SignatureHelper" /> para um método.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> é <see langword="null" />.
- ou -
Um elemento de <paramref name="parameterTypes" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> não é um <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Retorna um auxiliar de assinatura para uma propriedade, considerando o módulo dinâmico que contém a propriedade, a convenção de chamada, o tipo de propriedade, os argumentos de propriedade e os modificadores personalizados para o tipo de retorno e argumentos.</summary>
      <param name="mod">O <see cref="T:System.Reflection.Emit.ModuleBuilder" /> que contém a propriedade para a qual o <see cref="T:System.Reflection.Emit.SignatureHelper" /> é solicitado.</param>
      <param name="callingConvention">A convenção de chamada dos acessadores de propriedade.</param>
      <param name="returnType">O tipo de propriedade.</param>
      <param name="requiredReturnTypeCustomModifiers">Uma matriz de tipos que representa os modificadores personalizados obrigatórios para o tipo de retorno, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se o tipo de retorno não tiver modificadores personalizados obrigatórios, especifique <see langword="null" />.</param>
      <param name="optionalReturnTypeCustomModifiers">Uma matriz de tipos que representa os modificadores personalizados opcionais para o tipo de retorno, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se o tipo de retorno não tiver modificadores personalizados opcionais, especifique <see langword="null" />.</param>
      <param name="parameterTypes">Os tipos dos argumentos da propriedade ou <see langword="null" /> se a propriedade não tiver nenhum argumento.</param>
      <param name="requiredParameterTypeCustomModifiers">Uma matriz de matrizes de tipos. Cada matriz de tipos representa os modificadores personalizados obrigatórios para o argumento correspondente da propriedade. Se um argumento específico não tiver nenhum modificador personalizado obrigatório, especifique <see langword="null" />, em vez de uma matriz de tipos. Se a propriedade não tiver nenhum argumento ou se nenhum argumento tiver modificadores personalizados obrigatórios, especifique <see langword="null" /> em vez de uma matriz de matrizes.</param>
      <param name="optionalParameterTypeCustomModifiers">Uma matriz de matrizes de tipos. Cada matriz de tipos representa os modificadores personalizados opcionais para o argumento correspondente da propriedade. Se um argumento específico não tiver nenhum modificador personalizado opcional, especifique <see langword="null" />, em vez de uma matriz de tipos. Se a propriedade não tiver nenhum argumento ou se nenhum argumento tiver modificadores personalizados opcionais, especifique <see langword="null" /> em vez de uma matriz de matrizes.</param>
      <returns>Um objeto <see cref="T:System.Reflection.Emit.SignatureHelper" /> para uma propriedade.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> é <see langword="null" />.
- ou -
Um elemento de <paramref name="parameterTypes" /> é <see langword="null" />.
- ou -
Um dos modificadores personalizados especificados é <see langword="null" />. (No entanto, <see langword="null" /> pode ser especificado para a matriz de modificadores personalizados para qualquer argumento.)</exception>
      <exception cref="T:System.ArgumentException">A assinatura já foi encerrada.
- ou -
<paramref name="mod" /> não é um <see cref="T:System.Reflection.Emit.ModuleBuilder" />.
- ou -
Um dos modificadores personalizados especificados é um tipo de matriz.
- ou -
Um dos modificadores personalizados especificados é um tipo genérico aberto. Ou seja, a propriedade <see cref="P:System.Type.ContainsGenericParameters" /> é <see langword="true" /> para o modificador personalizado.
- ou -
O tamanho de <paramref name="requiredParameterTypeCustomModifiers" /> ou <paramref name="optionalParameterTypeCustomModifiers" /> não é igual ao tamanho de <paramref name="parameterTypes" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary>Retorna um auxiliar de assinatura para uma propriedade, considerando o módulo dinâmico que contém a propriedade, o tipo de propriedade e os argumentos de propriedade.</summary>
      <param name="mod">O <see cref="T:System.Reflection.Emit.ModuleBuilder" /> que contém a propriedade para a qual o <see cref="T:System.Reflection.Emit.SignatureHelper" /> é solicitado.</param>
      <param name="returnType">O tipo de propriedade.</param>
      <param name="parameterTypes">Os tipos de argumento ou <see langword="null" /> se a propriedade não tiver argumentos.</param>
      <returns>Um objeto <see cref="T:System.Reflection.Emit.SignatureHelper" /> para uma propriedade.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> é <see langword="null" />.
- ou -
Um elemento de <paramref name="parameterTypes" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> não é um <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Retorna um auxiliar de assinatura para uma propriedade, considerando o módulo dinâmico que contém a propriedade, o tipo de propriedade, os argumentos de propriedade e os modificadores personalizados para o tipo de retorno e os argumentos.</summary>
      <param name="mod">O <see cref="T:System.Reflection.Emit.ModuleBuilder" /> que contém a propriedade para a qual o <see cref="T:System.Reflection.Emit.SignatureHelper" /> é solicitado.</param>
      <param name="returnType">O tipo de propriedade.</param>
      <param name="requiredReturnTypeCustomModifiers">Uma matriz de tipos que representa os modificadores personalizados obrigatórios para o tipo de retorno, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se o tipo de retorno não tiver modificadores personalizados obrigatórios, especifique <see langword="null" />.</param>
      <param name="optionalReturnTypeCustomModifiers">Uma matriz de tipos que representa os modificadores personalizados opcionais para o tipo de retorno, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se o tipo de retorno não tiver modificadores personalizados opcionais, especifique <see langword="null" />.</param>
      <param name="parameterTypes">Os tipos dos argumentos da propriedade ou <see langword="null" /> se a propriedade não tiver nenhum argumento.</param>
      <param name="requiredParameterTypeCustomModifiers">Uma matriz de matrizes de tipos. Cada matriz de tipos representa os modificadores personalizados obrigatórios para o argumento correspondente da propriedade. Se um argumento específico não tiver nenhum modificador personalizado obrigatório, especifique <see langword="null" />, em vez de uma matriz de tipos. Se a propriedade não tiver nenhum argumento ou se nenhum argumento tiver modificadores personalizados obrigatórios, especifique <see langword="null" /> em vez de uma matriz de matrizes.</param>
      <param name="optionalParameterTypeCustomModifiers">Uma matriz de matrizes de tipos. Cada matriz de tipos representa os modificadores personalizados opcionais para o argumento correspondente da propriedade. Se um argumento específico não tiver nenhum modificador personalizado opcional, especifique <see langword="null" />, em vez de uma matriz de tipos. Se a propriedade não tiver nenhum argumento ou se nenhum argumento tiver modificadores personalizados opcionais, especifique <see langword="null" /> em vez de uma matriz de matrizes.</param>
      <returns>Um objeto <see cref="T:System.Reflection.Emit.SignatureHelper" /> para uma propriedade.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> é <see langword="null" />.
- ou -
Um elemento de <paramref name="parameterTypes" /> é <see langword="null" />.
- ou -
Um dos modificadores personalizados especificados é <see langword="null" />. (No entanto, <see langword="null" /> pode ser especificado para a matriz de modificadores personalizados para qualquer argumento.)</exception>
      <exception cref="T:System.ArgumentException">A assinatura já foi encerrada.
- ou -
<paramref name="mod" /> não é um <see cref="T:System.Reflection.Emit.ModuleBuilder" />.
- ou -
Um dos modificadores personalizados especificados é um tipo de matriz.
- ou -
Um dos modificadores personalizados especificados é um tipo genérico aberto. Ou seja, a propriedade <see cref="P:System.Type.ContainsGenericParameters" /> é <see langword="true" /> para o modificador personalizado.
- ou -
O tamanho de <paramref name="requiredParameterTypeCustomModifiers" /> ou <paramref name="optionalParameterTypeCustomModifiers" /> não é igual ao tamanho de <paramref name="parameterTypes" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetSignature">
      <summary>Adiciona o token final à assinatura e marca a assinatura como concluída. Portanto, nenhum token adicional pode ser adicionado.</summary>
      <returns>Uma matriz de bytes composta pela assinatura completa.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.ToString">
      <summary>Retorna uma cadeia de caracteres que representa os argumentos de assinatura.</summary>
      <returns>Uma cadeia de caracteres que representa os argumentos desta assinatura.</returns>
    </member>
  </members>
</doc>
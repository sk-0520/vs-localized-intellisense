<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Extensions</name>
  </assembly>
  <members>
    <member name="T:System.AppDomain">
      <summary>表示应用程序域，它是一个应用程序在其中执行的独立环境。 此类不能被继承。</summary>
    </member>
    <member name="M:System.AppDomain.AppendPrivatePath(System.String)">
      <summary>将指定的目录名追加到专用路径列表。</summary>
      <param name="path">要追加到专用路径的目录名称。</param>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="M:System.AppDomain.ApplyPolicy(System.String)">
      <summary>返回应用策略后的程序集显示名称。</summary>
      <param name="assemblyName">程序集显示名称，采用 <see cref="P:System.Reflection.Assembly.FullName" /> 属性提供的格式。</param>
      <returns>包含应用策略后的程序集显示名称的字符串。</returns>
    </member>
    <member name="E:System.AppDomain.AssemblyLoad">
      <summary>在加载程序集时发生。</summary>
    </member>
    <member name="E:System.AppDomain.AssemblyResolve">
      <summary>在对程序集的解析失败时发生。</summary>
    </member>
    <member name="P:System.AppDomain.BaseDirectory">
      <summary>获取基目录，它由程序集冲突解决程序用来探测程序集。</summary>
      <returns>基目录，由程序集冲突解决程序用来探测程序集。</returns>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="M:System.AppDomain.ClearPrivatePath">
      <summary>将指定专用程序集位置的路径重置为空字符串 ("")。</summary>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="M:System.AppDomain.ClearShadowCopyPath">
      <summary>将包含影像复制的程序集的目录列表重置为空字符串 ("")。</summary>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="M:System.AppDomain.CreateDomain(System.String)">
      <summary>使用指定的名称新建应用程序域。</summary>
      <param name="friendlyName">域的友好名称。</param>
      <returns>新创建的应用程序域。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="friendlyName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">方法在 .NET Core 上不受支持。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String)">
      <summary>创建在指定程序集中定义的指定类型的新实例。</summary>
      <param name="assemblyName">程序集的显示名称。 请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</param>
      <returns>一个对象，该对象是 <paramref name="typeName" /> 指定的新实例的包装。 返回值需要打开包装才能访问真实对象。</returns>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的程序集。
或
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高的版本编译的。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</exception>
      <exception cref="T:System.NullReferenceException">此示例为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>创建在指定程序集中定义的指定类型的新实例。 形参指定联编程序、绑定标志、构造函数实参、用于解释实参的特定于区域性的信息，以及可选激活特性。</summary>
      <param name="assemblyName">程序集的显示名称。 请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</param>
      <param name="ignoreCase">一个布尔值，指示是否执行区分大小写的搜索。</param>
      <param name="bindingAttr">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。 如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</param>
      <param name="binder">一个对象，它使用反射启用绑定、参数类型的强制、成员的调用和 <see cref="T:System.Reflection.MemberInfo" /> 对象的检索。 如果 <paramref name="binder" /> 为 null，则使用默认联编程序。</param>
      <param name="args">要传递给构造函数的实参。 此实参数组必须在数量、顺序和类型方面与要调用的构造函数的形参匹配。 如果无参数构造函数是首选，则 <paramref name="args" /> 必须为空数组或 NULL。</param>
      <param name="culture">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。 如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。
此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
      <returns>一个对象，该对象是 <paramref name="typeName" /> 指定的新实例的包装。 返回值需要打开包装才能访问真实对象。</returns>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的程序集。
或
<paramref name="assemblyName" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
      <exception cref="T:System.NotSupportedException">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</exception>
      <exception cref="T:System.NullReferenceException">此示例为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
      <summary>创建在指定程序集中定义的指定类型的新实例。 形参指定激活特性数组。</summary>
      <param name="assemblyName">程序集的显示名称。 请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</param>
      <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。
此参数与客户端激活的对象相关。客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
      <returns>一个对象，该对象是 <paramref name="typeName" /> 指定的新实例的包装。 返回值需要打开包装才能访问真实对象。</returns>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的程序集。
或
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高的版本编译的。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
      <exception cref="T:System.NotSupportedException">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</exception>
      <exception cref="T:System.NullReferenceException">此示例为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
      <summary>创建指定类型的新实例。 形参指定定义类型的程序集以及类型的名称。</summary>
      <param name="assemblyName">程序集的显示名称。 请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</param>
      <returns>
        <paramref name="typeName" /> 所指定对象的实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的程序集。
或
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高的版本编译的。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>创建在指定的程序集中定义的指定类型的新实例，指定是否忽略类型名称的大小写，并指定绑定特性和用于选择要创建的类型的联编程序、构造函数的自变量、区域性以及激活特性。</summary>
      <param name="assemblyName">程序集的显示名称。 请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</param>
      <param name="ignoreCase">一个布尔值，指示是否执行区分大小写的搜索。</param>
      <param name="bindingAttr">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。 如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</param>
      <param name="binder">一个对象，它使用反射启用绑定、参数类型的强制、成员的调用和 <see cref="T:System.Reflection.MemberInfo" /> 对象的检索。 如果 <paramref name="binder" /> 为 null，则使用默认联编程序。</param>
      <param name="args">要传递给构造函数的实参。 此实参数组必须在数量、顺序和类型方面与要调用的构造函数的形参匹配。 如果无参数构造函数是首选，则 <paramref name="args" /> 必须为空数组或 NULL。</param>
      <param name="culture">用于控制类型强制的特定于区域性的对象。 如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see langword="CultureInfo" />。</param>
      <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 通常是包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组。 指定激活远程对象所需的 URL。
此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
      <returns>
        <paramref name="typeName" /> 所指定对象的实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.NotSupportedException">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的程序集。
或
<paramref name="assemblyName" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
      <summary>创建指定类型的新实例。 形参指定定义类型的程序集、类型的名称和激活特性的数组。</summary>
      <param name="assemblyName">程序集的显示名称。 请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</param>
      <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。
此参数与客户端激活的对象相关。客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
      <returns>
        <paramref name="typeName" /> 所指定对象的实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.NotSupportedException">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的程序集。
或
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高的版本编译的。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
      <summary>创建在指定程序集文件中定义的指定类型的新实例。</summary>
      <param name="assemblyFile">文件的名称（包括路径），该文件包含定义所请求类型的程序集。 该程序集是使用 <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> 方法加载的。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</param>
      <returns>一个对象，它是新实例的包装，或者如果找不到 <see langword="null" />，则为 <paramref name="typeName" />。 返回值需要打开包装才能访问真实对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 为 <see langword="null" />。
或
<paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typeName" />。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.MissingMethodException">未找到无形参的公共构造函数。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有足够的权限调用此构造函数。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。
或
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyFile" /> 是用更高的版本编译的。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
      <exception cref="T:System.NullReferenceException">此示例为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>创建在指定程序集文件中定义的指定类型的新实例。</summary>
      <param name="assemblyFile">文件的名称（包括路径），该文件包含定义所请求类型的程序集。 该程序集是使用 <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> 方法加载的。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</param>
      <param name="ignoreCase">一个布尔值，指示是否执行区分大小写的搜索。</param>
      <param name="bindingAttr">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。 如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</param>
      <param name="binder">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <see cref="T:System.Reflection.MemberInfo" /> 对象的检索。 如果 <paramref name="binder" /> 为 null，则使用默认联编程序。</param>
      <param name="args">要传递给构造函数的实参。 此实参数组必须在数量、顺序和类型方面与要调用的构造函数的形参匹配。 如果无参数构造函数是首选，则 <paramref name="args" /> 必须为空数组或 NULL。</param>
      <param name="culture">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。 如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。
此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
      <returns>一个对象，它是新实例的包装，或者如果找不到 <see langword="null" />，则为 <paramref name="typeName" />。 返回值需要打开包装才能访问真实对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 为 <see langword="null" />。
或
<paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.TypeLoadException">在<paramref name="typeName" /> 中未找到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有足够的权限调用此构造函数。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。
或
<paramref name="assemblyFile" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
      <exception cref="T:System.NullReferenceException">此示例为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
      <summary>创建在指定程序集文件中定义的指定类型的新实例。</summary>
      <param name="assemblyFile">文件的名称（包括路径），该文件包含定义所请求类型的程序集。 该程序集是使用 <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> 方法加载的。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</param>
      <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。
此参数与客户端激活的对象相关。客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
      <returns>一个对象，它是新实例的包装，或者如果找不到 <see langword="null" />，则为 <paramref name="typeName" />。 返回值需要打开包装才能访问真实对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typeName" />。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有足够的权限调用此构造函数。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
      <exception cref="T:System.NotSupportedException">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。
或
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyFile" /> 是用更高的版本编译的。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
      <exception cref="T:System.NullReferenceException">此示例为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
      <summary>创建在指定程序集文件中定义的指定类型的新实例。</summary>
      <param name="assemblyName">定义所请求类型的程序集的文件名和路径。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</param>
      <returns>请求的对象，或者如果找不到 <paramref name="typeName" /> 则返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 为 <see langword="null" />。
或
<paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typeName" />。</exception>
      <exception cref="T:System.MissingMethodException">未找到无形参的公共构造函数。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有足够的权限调用此构造函数。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的程序集。
或
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高的版本编译的。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>创建在指定的程序集文件中定义的指定类型的新实例，指定是否忽略类型名称的大小写，并指定绑定特性和用于选择要创建的类型的联编程序、构造函数的自变量、区域性以及激活特性。</summary>
      <param name="assemblyFile">定义所请求类型的程序集的文件名和路径。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</param>
      <param name="ignoreCase">一个布尔值，指示是否执行区分大小写的搜索。</param>
      <param name="bindingAttr">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。 如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</param>
      <param name="binder">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <see cref="T:System.Reflection.MemberInfo" /> 对象的检索。 如果 <paramref name="binder" /> 为 null，则使用默认联编程序。</param>
      <param name="args">要传递给构造函数的实参。 此实参数组必须在数量、顺序和类型方面与要调用的构造函数的形参匹配。 如果无参数构造函数是首选，则 <paramref name="args" /> 必须为空数组或 NULL。</param>
      <param name="culture">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。 如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。
此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
      <returns>请求的对象，或者如果找不到 <paramref name="typeName" /> 则返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 为 <see langword="null" />。
或
<paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.TypeLoadException">在<paramref name="typeName" /> 中未找到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有足够的权限调用此构造函数。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的程序集。
或
<paramref name="assemblyName" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
      <summary>创建在指定程序集文件中定义的指定类型的新实例。</summary>
      <param name="assemblyName">定义所请求类型的程序集的文件名和路径。</param>
      <param name="typeName">所请求类型的完全限定名，包括命名空间而不是程序集（请参见 <see cref="P:System.Type.FullName" /> 属性）。</param>
      <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。
此参数与客户端激活的对象相关。客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
      <returns>请求的对象，或者如果找不到 <paramref name="typeName" /> 则返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 为 <see langword="null" />。
或
<paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typeName" />。</exception>
      <exception cref="T:System.MissingMethodException">未找到无形参的公共构造函数。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有足够的权限调用此构造函数。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的程序集。
或
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高的版本编译的。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
    </member>
    <member name="P:System.AppDomain.CurrentDomain">
      <summary>获取当前 <see cref="T:System.Threading.Thread" /> 的当前应用程序域。</summary>
      <returns>当前应用程序域。</returns>
    </member>
    <member name="E:System.AppDomain.DomainUnload">
      <summary>在即将卸载 <see cref="T:System.AppDomain" /> 时发生。</summary>
    </member>
    <member name="P:System.AppDomain.DynamicDirectory">
      <summary>获取目录，它由程序集冲突解决程序用来探测动态创建的程序集。</summary>
      <returns>目录，它由程序集冲突解决程序用来探测动态创建的程序集。</returns>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String)">
      <summary>执行指定文件中包含的程序集。</summary>
      <param name="assemblyFile">包含要执行程序集的文件的名称。</param>
      <returns>程序集的入口点返回的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> 未找到。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。
或
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyFile" /> 是用更高版本编译的。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
      <exception cref="T:System.MissingMethodException">指定的程序集没有入口点。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
      <summary>使用指定的参数执行指定文件中包含的程序集。</summary>
      <param name="assemblyFile">包含要执行程序集的文件的名称。</param>
      <param name="args">程序集的入口点的自变量。</param>
      <returns>程序集的入口点返回的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> 未找到。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。
或
<paramref name="assemblyFile" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
      <exception cref="T:System.MissingMethodException">指定的程序集没有入口点。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>使用指定的参数、哈希值和哈希算法执行指定文件中包含的程序集。</summary>
      <param name="assemblyFile">包含要执行程序集的文件的名称。</param>
      <param name="args">程序集的入口点的自变量。</param>
      <param name="hashValue">表示计算所得的哈希代码的值。</param>
      <param name="hashAlgorithm">表示程序集清单使用的哈希算法。</param>
      <returns>程序集的入口点返回的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> 未找到。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。
或
<paramref name="assemblyFile" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
      <exception cref="T:System.MissingMethodException">指定的程序集没有入口点。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
      <summary>根据给定的 <see cref="T:System.Reflection.AssemblyName" /> 使用指定的自变量执行程序集。</summary>
      <param name="assemblyName">
        <see cref="T:System.Reflection.AssemblyName" /> 对象，表示程序集名称。</param>
      <param name="args">启动该进程时传递的命令行参数。</param>
      <returns>程序集的入口点返回的值。</returns>
      <exception cref="T:System.IO.FileNotFoundException">找不到由 <paramref name="assemblyName" /> 指定的程序集。</exception>
      <exception cref="T:System.IO.FileLoadException">找到了由 <paramref name="assemblyName" /> 指定的程序集，但无法加载。</exception>
      <exception cref="T:System.BadImageFormatException">由 <paramref name="assemblyName" /> 指定的程序集不是有效的程序集。
或
<paramref name="assemblyName" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.MissingMethodException">指定的程序集没有入口点。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
      <summary>在给定其显示名称的情况下执行程序集。</summary>
      <param name="assemblyName">程序集的显示名称。 请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <returns>程序集的入口点返回的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到由 <paramref name="assemblyName" /> 指定的程序集。</exception>
      <exception cref="T:System.BadImageFormatException">由 <paramref name="assemblyName" /> 指定的程序集不是有效的程序集。
或
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高版本编译的。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.IO.FileLoadException">找到了由 <paramref name="assemblyName" /> 指定的程序集，但无法加载。</exception>
      <exception cref="T:System.MissingMethodException">指定的程序集没有入口点。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
      <summary>在给定显示名称的情况下，使用指定自变量执行程序集。</summary>
      <param name="assemblyName">程序集的显示名称。 请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <param name="args">启动该进程时传递的命令行参数。</param>
      <returns>程序集的入口点返回的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到由 <paramref name="assemblyName" /> 指定的程序集。</exception>
      <exception cref="T:System.IO.FileLoadException">找到了由 <paramref name="assemblyName" /> 指定的程序集，但无法加载。</exception>
      <exception cref="T:System.BadImageFormatException">由 <paramref name="assemblyName" /> 指定的程序集不是有效的程序集。
或
<paramref name="assemblyName" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.MissingMethodException">指定的程序集没有入口点。</exception>
    </member>
    <member name="E:System.AppDomain.FirstChanceException">
      <summary>当托管代码抛出异常时发生，在运行时在调用堆栈中搜索应用程序域中的异常处理程序之前。</summary>
    </member>
    <member name="P:System.AppDomain.FriendlyName">
      <summary>获取此应用程序域的友好名称。</summary>
      <returns>此应用程序域的友好名称。</returns>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="M:System.AppDomain.GetAssemblies">
      <summary>获取已加载到此应用程序域的执行上下文中的程序集。</summary>
      <returns>此应用程序域中的程序集的数组。</returns>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="M:System.AppDomain.GetCurrentThreadId">
      <summary>获取当前线程标识符。</summary>
      <returns>一个 32 位带符号整数，它是当前线程的标识符。</returns>
    </member>
    <member name="M:System.AppDomain.GetData(System.String)">
      <summary>为指定名称获取存储在当前应用程序域中的值。</summary>
      <param name="name">预定义应用程序域属性的名称，或已定义的应用程序域属性的名称。</param>
      <returns>
        <paramref name="name" /> 属性的值，或 <see langword="null" />（如果属性不存在）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="P:System.AppDomain.Id">
      <summary>获得一个整数，该整数唯一标识进程中的应用程序域。</summary>
      <returns>标识应用程序域的整数。</returns>
    </member>
    <member name="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
      <summary>获取可以为 null 的布尔值，该值指示是否设置了任何兼容性开关，如果已设置，则指定是否设置了指定的兼容性开关。</summary>
      <param name="value">要测试的兼容性开关。</param>
      <returns>如果未设置任何兼容性开关，则为 null 引用（Visual Basic 中的 <see langword="Nothing" />）；否则，为布尔值，指示是否设置了由 <paramref name="value" /> 指定的兼容性开关。</returns>
    </member>
    <member name="M:System.AppDomain.IsDefaultAppDomain">
      <summary>返回一个值，指示应用程序域是否是进程的默认应用程序域。</summary>
      <returns>如果当前 <see cref="T:System.AppDomain" /> 对象表示进程的默认应用程序域，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.AppDomain.IsFinalizingForUnload">
      <summary>指示此应用程序域是否正在卸载以及公共语言运行时是否正在终止该域包含的对象。</summary>
      <returns>如果此应用程序域正在卸载，并且公共语言运行时已开始调用终止程序，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.AppDomain.IsFullyTrusted">
      <summary>获取一个值，该值指示加载到当前应用程序域的程序集是否是以完全信任方式执行的。</summary>
      <returns>如果加载到当前应用程序域的程序集是以完全信任方式执行的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.AppDomain.IsHomogenous">
      <summary>获取一个值，该值指示当前应用程序域是否拥有一个为加载到该应用程序域的所有程序集授予的权限集。</summary>
      <returns>如果当前应用程序域具有一组同构权限，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[])">
      <summary>加载带有基于通用对象文件格式 (COFF) 的图像的 <see cref="T:System.Reflection.Assembly" />，该图像包含已发出的 <see cref="T:System.Reflection.Assembly" />。</summary>
      <param name="rawAssembly">
        <see langword="byte" /> 类型的数组，它是包含已发出程序集的基于 COFF 的图像。</param>
      <returns>加载的程序集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> 不是有效的程序集。
或
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="rawAssembly" /> 是用更高版本编译的。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
      <summary>加载带有基于通用对象文件格式 (COFF) 的图像的 <see cref="T:System.Reflection.Assembly" />，该图像包含已发出的 <see cref="T:System.Reflection.Assembly" />。 还加载表示 <see cref="T:System.Reflection.Assembly" /> 的符号的原始字节。</summary>
      <param name="rawAssembly">
        <see langword="byte" /> 类型的数组，它是包含已发出程序集的基于 COFF 的图像。</param>
      <param name="rawSymbolStore">
        <see langword="byte" /> 类型的数组，它包含表示程序集符号的原始字节。</param>
      <returns>加载的程序集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> 不是有效的程序集。
或
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="rawAssembly" /> 是用更高版本编译的。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
      <summary>在给定 <see cref="T:System.Reflection.AssemblyName" /> 的情况下加载 <see cref="T:System.Reflection.Assembly" />。</summary>
      <param name="assemblyRef">描述要加载的程序集的对象。</param>
      <returns>加载的程序集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyRef" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyRef" /> 未找到。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyRef" /> 不是有效的程序集。
或
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyRef" /> 是用更高版本编译的。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.String)">
      <summary>在给定其显示名称的情况下加载 <see cref="T:System.Reflection.Assembly" />。</summary>
      <param name="assemblyString">程序集的显示名称。 请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <returns>加载的程序集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> 为 <see langword="null" /></exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> 。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> 不是有效的程序集。
或
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyString" /> 是用更高版本编译的。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringIsEnabled">
      <summary>获取或设置一个值，该值指示是否对当前进程启用应用程序域的 CPU 和内存监视。 一旦对进程启用了监视，则无法将其禁用。</summary>
      <returns>如果启用监视，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">当前进程试图将值 <see langword="false" /> 赋予此属性。</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedMemorySize">
      <summary>获取上次回收后保留下来的，已知由当前应用程序域引用的字节数。</summary>
      <returns>保留下来的字节数。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" />（Visual Basic 中的 <see langword="Shared" />）<see cref="P:System.AppDomain.MonitoringIsEnabled" /> 属性设置为 <see langword="false" />。</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
      <summary>获取进程中所有应用程序域的上次回收后保留下来的总字节数。</summary>
      <returns>进程的保留下来的总字节数。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" />（Visual Basic 中的 <see langword="Shared" />）<see cref="P:System.AppDomain.MonitoringIsEnabled" /> 属性设置为 <see langword="false" />。</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalAllocatedMemorySize">
      <summary>获取自从创建应用程序域后由应用程序域进行的所有内存分配的总大小（以字节为单位，不扣除已回收的内存）。</summary>
      <returns>所有内存分配的总大小。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" />（Visual Basic 中的 <see langword="Shared" />）<see cref="P:System.AppDomain.MonitoringIsEnabled" /> 属性设置为 <see langword="false" />。</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalProcessorTime">
      <summary>获取自从进程启动后所有线程在当前应用程序域中执行时所使用的总处理器时间。</summary>
      <returns>当前应用程序域的总处理器时间。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" />（Visual Basic 中的 <see langword="Shared" />）<see cref="P:System.AppDomain.MonitoringIsEnabled" /> 属性设置为 <see langword="false" />。</exception>
    </member>
    <member name="P:System.AppDomain.PermissionSet">
      <summary>获取沙盒应用程序域的权限集。</summary>
      <returns>沙盒应用程序域的权限集。</returns>
    </member>
    <member name="E:System.AppDomain.ProcessExit">
      <summary>当默认应用程序域的父进程存在时发生。</summary>
    </member>
    <member name="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
      <summary>当程序集的解析在仅限反射的上下文中失败时发生。</summary>
    </member>
    <member name="M:System.AppDomain.ReflectionOnlyGetAssemblies">
      <summary>返回已加载到应用程序域的只反射上下文中的程序集。</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" /> 对象数组，表示加载到应用程序域的只反射上下文中的程序集。</returns>
      <exception cref="T:System.AppDomainUnloadedException">尝试对已卸载的应用程序域进行操作。</exception>
    </member>
    <member name="P:System.AppDomain.RelativeSearchPath">
      <summary>获取基目录下的路径，在此程序集冲突解决程序应探测专用程序集。</summary>
      <returns>基目录下的路径，在此程序集冲突解决程序应探测专用程序集。</returns>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="E:System.AppDomain.ResourceResolve">
      <summary>当资源解析因资源不是程序集中的有效链接资源或嵌入资源而失败时发生。</summary>
    </member>
    <member name="M:System.AppDomain.SetCachePath(System.String)">
      <summary>确定指定目录路径为对程序集进行影像复制的位置。</summary>
      <param name="path">到卷影副本位置的完全限定路径。</param>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="M:System.AppDomain.SetData(System.String,System.Object)">
      <summary>为指定的应用程序域属性分配指定值。</summary>
      <param name="name">要创建或更改的用户定义应用程序域属性的名称。</param>
      <param name="data">该属性的值。</param>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="M:System.AppDomain.SetDynamicBase(System.String)">
      <summary>建立指定的目录路径，作为存储和访问动态生成的文件的子目录的基目录。</summary>
      <param name="path">完全限定路径，是存储动态程序集的子目录的基目录。</param>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
      <summary>指定在此应用程序域中执行时如果线程尝试绑定到用户，用户和标识对象应如何附加到该线程。</summary>
      <param name="policy">
        <see cref="T:System.Security.Principal.PrincipalPolicy" /> 值之一，指定要附加到线程的主体对象类型。</param>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyFiles">
      <summary>打开影像复制功能。</summary>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyPath(System.String)">
      <summary>确定指定目录路径为要进行影像复制的程序集的位置。</summary>
      <param name="path">目录名列表，各名称用分号隔开。</param>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
      <summary>设置在以下情况下要附加到线程的默认主体对象，即当线程在此应用程序域中执行时，如果线程尝试绑定到主体这种情况。</summary>
      <param name="principal">要附加到线程的主体对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="principal" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Policy.PolicyException">已经设置了线程用户。</exception>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="P:System.AppDomain.SetupInformation">
      <summary>获取此实例的应用程序域配置信息。</summary>
      <returns>应用程序域初始化信息。</returns>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="P:System.AppDomain.ShadowCopyFiles">
      <summary>获取应用程序域是否配置为影像副本文件的指示。</summary>
      <returns>如果应用程序域配置为卷影副本文件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.AppDomainUnloadedException">在卸载的应用程序域上尝试该操作。</exception>
    </member>
    <member name="M:System.AppDomain.ToString">
      <summary>获取一个字符串表示，包含应用程序域友好名称和任意上下文策略。</summary>
      <returns>一个字符串，通过连接字符串“Name:”、应用程序域的友好名称以及上下文策略的字符串表示或字符串“There are no context policies”而成。</returns>
      <exception cref="T:System.AppDomainUnloadedException">当前 <see cref="T:System.AppDomain" /> 表示的应用程序域已卸载。</exception>
    </member>
    <member name="E:System.AppDomain.TypeResolve">
      <summary>在对类型的解析失败时发生。</summary>
    </member>
    <member name="E:System.AppDomain.UnhandledException">
      <summary>当某个异常未被捕获时出现。</summary>
    </member>
    <member name="M:System.AppDomain.Unload(System.AppDomain)">
      <summary>卸载指定的应用程序域。</summary>
      <param name="domain">要卸载的应用程序域。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="domain" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.CannotUnloadAppDomainException">
        <paramref name="domain" /> 未能卸载。</exception>
      <exception cref="T:System.Exception">在卸载进程期间出错。</exception>
    </member>
    <member name="T:System.AppDomainSetup">
      <summary>表示可以添加到 <see cref="T:System.AppDomain" /> 的实例的程序集绑定信息。</summary>
    </member>
    <member name="P:System.AppDomainSetup.ApplicationBase">
      <summary>获取或设置包含该应用程序的目录的名称。</summary>
      <returns>应用程序基目录的名称。</returns>
    </member>
    <member name="P:System.AppDomainSetup.TargetFrameworkName">
      <summary>获取或设置为应用程序域指定目标版本和 .NET Framework 配置文件的字符串，该字符串采用可由 <see cref="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)" /> 构造函数分析的格式。</summary>
      <returns>.NET Framework 的目标版本和配置文件。</returns>
    </member>
    <member name="T:System.AppDomainUnloadedException">
      <summary>当尝试访问已卸载的应用程序域时引发的异常。</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor">
      <summary>初始化 <see cref="T:System.AppDomainUnloadedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.AppDomainUnloadedException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.AppDomainUnloadedException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.AppDomainUnloadedException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.ApplicationId">
      <summary>所含信息用于唯一标识基于清单的应用程序。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ApplicationId.#ctor(System.Byte[],System.String,System.Version,System.String,System.String)">
      <summary>初始化 <see cref="T:System.ApplicationId" /> 类的新实例。</summary>
      <param name="publicKeyToken">表示原始公钥数据的字节数组。</param>
      <param name="name">应用程序的名称。</param>
      <param name="version">
        <see cref="T:System.Version" /> 对象，用于指定应用程序的版本。</param>
      <param name="processorArchitecture">应用程序的处理器体系结构。</param>
      <param name="culture">应用程序的区域性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。
或
<paramref name="version" /> 为 <see langword="null" />。
或
<paramref name="publicKeyToken" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是一个空字符串。</exception>
    </member>
    <member name="M:System.ApplicationId.Copy">
      <summary>创建并返回当前应用程序标识的相同副本。</summary>
      <returns>
        <see cref="T:System.ApplicationId" /> 对象，表示与原件完全相同的副本。</returns>
    </member>
    <member name="P:System.ApplicationId.Culture">
      <summary>获取表示此应用程序的区域性信息的字符串。</summary>
      <returns>应用程序的区域性信息。</returns>
    </member>
    <member name="M:System.ApplicationId.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.ApplicationId" /> 对象是否等效于当前 <see cref="T:System.ApplicationId" />。</summary>
      <param name="o">要与当前 <see cref="T:System.ApplicationId" /> 进行比较的 <see cref="T:System.ApplicationId" /> 对象。</param>
      <returns>如果指定的 <see cref="T:System.ApplicationId" /> 对象等效于当前 <see cref="T:System.ApplicationId" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ApplicationId.GetHashCode">
      <summary>获取当前应用程序标识的哈希代码。</summary>
      <returns>当前应用程序标识的哈希代码。</returns>
    </member>
    <member name="P:System.ApplicationId.Name">
      <summary>获取应用程序的名称。</summary>
      <returns>应用程序的名称。</returns>
    </member>
    <member name="P:System.ApplicationId.ProcessorArchitecture">
      <summary>获取应用程序的目标处理器体系结构。</summary>
      <returns>应用程序的处理器体系结构。</returns>
    </member>
    <member name="P:System.ApplicationId.PublicKeyToken">
      <summary>获取应用程序的公钥标记。</summary>
      <returns>一个包含应用程序的公钥标记的字节数组。</returns>
    </member>
    <member name="M:System.ApplicationId.ToString">
      <summary>创建并返回应用程序标识的字符串表示。</summary>
      <returns>应用程序标识的字符串表示。</returns>
    </member>
    <member name="P:System.ApplicationId.Version">
      <summary>获取应用程序的版本。</summary>
      <returns>
        <see cref="T:System.Version" />，用于指定应用程序的版本。</returns>
    </member>
    <member name="T:System.AssemblyLoadEventArgs">
      <summary>为 <see cref="E:System.AppDomain.AssemblyLoad" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.AssemblyLoadEventArgs.#ctor(System.Reflection.Assembly)">
      <summary>使用指定的 <see cref="T:System.AssemblyLoadEventArgs" /> 初始化 <see cref="T:System.Reflection.Assembly" /> 类的新实例。</summary>
      <param name="loadedAssembly">表示当前加载的程序集的实例。</param>
    </member>
    <member name="P:System.AssemblyLoadEventArgs.LoadedAssembly">
      <summary>获取一个表示当前加载的程序集的 <see cref="T:System.Reflection.Assembly" />。</summary>
      <returns>表示当前加载的程序集的 <see cref="T:System.Reflection.Assembly" /> 实例。</returns>
    </member>
    <member name="T:System.AssemblyLoadEventHandler">
      <summary>表示处理 <see cref="T:System.AppDomain" /> 的 <see cref="E:System.AppDomain.AssemblyLoad" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="args">包含事件数据的 <see cref="T:System.AssemblyLoadEventArgs" />。</param>
    </member>
    <member name="T:System.Base64FormattingOptions">
      <summary>指定相关的 <see cref="Overload:System.Convert.ToBase64CharArray" /> 和 <see cref="Overload:System.Convert.ToBase64String" /> 方法是否在其输出中插入分行符。</summary>
    </member>
    <member name="F:System.Base64FormattingOptions.InsertLineBreaks">
      <summary>在字符串表示形式中每隔 76 个字符插入分行符。</summary>
    </member>
    <member name="F:System.Base64FormattingOptions.None">
      <summary>不要在字符串表示形式中每隔 76 个字符插入分行符。</summary>
    </member>
    <member name="T:System.BitConverter">
      <summary>将基数据类型转换为一个字节数组以及将一个字节数组转换为基数据类型。</summary>
    </member>
    <member name="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
      <summary>将指定的双精度浮点数转换为 64 位有符号整数。</summary>
      <param name="value">要转换的数字。</param>
      <returns>64 位有符号整数，其值等于 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Boolean)">
      <summary>以字节数组的形式返回指定的布尔值。</summary>
      <param name="value">一个布尔值。</param>
      <returns>长度为 1 的字节数组。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Char)">
      <summary>以字节数组的形式返回指定的 Unicode 字符值。</summary>
      <param name="value">要转换的字符。</param>
      <returns>长度为 2 的字节数组。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Double)">
      <summary>以字节数组的形式返回指定的双精度浮点值。</summary>
      <param name="value">要转换的数字。</param>
      <returns>长度为 8 的字节数组。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int16)">
      <summary>以字节数组的形式返回指定的 16 位有符号整数值。</summary>
      <param name="value">要转换的数字。</param>
      <returns>长度为 2 的字节数组。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int32)">
      <summary>以字节数组的形式返回指定 32 位有符号整数值。</summary>
      <param name="value">要转换的数字。</param>
      <returns>长度为 4 的字节数组。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int64)">
      <summary>以字节数组的形式返回指定 64 位带符号整数值。</summary>
      <param name="value">要转换的数字。</param>
      <returns>长度为 8 的字节数组。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Single)">
      <summary>以字节数组的形式返回指定的单精度浮点值。</summary>
      <param name="value">要转换的数字。</param>
      <returns>长度为 4 的字节数组。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt16)">
      <summary>以字节数组的形式返回指定的 16 位无符号整数值。</summary>
      <param name="value">要转换的数字。</param>
      <returns>长度为 2 的字节数组。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt32)">
      <summary>以字节数组的形式返回指定的 32 位无符号整数值。</summary>
      <param name="value">要转换的数字。</param>
      <returns>长度为 4 的字节数组。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt64)">
      <summary>以字节数组的形式返回指定的 64 位无符号整数值。</summary>
      <param name="value">要转换的数字。</param>
      <returns>长度为 8 的字节数组。</returns>
    </member>
    <member name="M:System.BitConverter.Int32BitsToSingle(System.Int32)">
      <summary>将指定的 32 位整数重新解释为单精度浮点值。</summary>
      <param name="value">要转换的整数。</param>
      <returns>表示已转换整数的单精度浮点值。</returns>
    </member>
    <member name="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
      <summary>将指定的 64 位带符号整数重新解释成双精度浮点数。</summary>
      <param name="value">要转换的数字。</param>
      <returns>双精度浮点数，其值等于 <paramref name="value" />。</returns>
    </member>
    <member name="F:System.BitConverter.IsLittleEndian">
      <summary>指示数据存储在此计算机体系结构中的字节顺序（“endianness”）。</summary>
    </member>
    <member name="M:System.BitConverter.SingleToInt32Bits(System.Single)">
      <summary>将单精度浮点值转换为整数。</summary>
      <param name="value">要转换的单精度浮点值。</param>
      <returns>表示已转换单精度浮点值的整数。</returns>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的一个字节转换来的布尔值。</summary>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 中的字节索引。</param>
      <returns>如果 <paramref name="startIndex" /> 中的 <paramref name="value" /> 处的字节非零，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.ReadOnlySpan{System.Byte})">
      <summary>将只读字节范围转换为布尔值。</summary>
      <param name="value">包含要转换的字节的只读范围。</param>
      <returns>表示已转换字节的布尔值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度小于 0。</exception>
    </member>
    <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的两个字节转换来的 Unicode 字符。</summary>
      <param name="value">一个数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <returns>由两个字节构成、从 <paramref name="startIndex" /> 开始的字符。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
    </member>
    <member name="M:System.BitConverter.ToChar(System.ReadOnlySpan{System.Byte})">
      <summary>将只读字节范围转换为字符。</summary>
      <param name="value">包含要转换的字节的只读范围。</param>
      <returns>表示已转换字节的字符。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度小于 <see cref="T:System.Char" /> 的长度。</exception>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的八个字节转换来的双精度浮点数。</summary>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <returns>由八个字节构成、从 <paramref name="startIndex" /> 开始的双精度浮点数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大于等于 <paramref name="value" /> 减 7 的长度，且小于等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.ReadOnlySpan{System.Byte})">
      <summary>将只读字节范围转换为双精度浮点值。</summary>
      <param name="value">包含要转换的字节的只读范围。</param>
      <returns>表示已转换字节的双精度浮点值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度小于 <see cref="T:System.Double" /> 值的长度。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的两个字节转换来的 16 位有符号整数。</summary>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <returns>由两个字节构成、从 <paramref name="startIndex" /> 开始的 16 位有符号整数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.ReadOnlySpan{System.Byte})">
      <summary>将只读字节范围转换为 16 位带符号整数。</summary>
      <param name="value">包含要转换的字节的只读范围。</param>
      <returns>表示已转换字节的 16 位带符号整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度小于 2。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的四个字节转换来的 32 位有符号整数。</summary>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <returns>由四个字节构成、从 <paramref name="startIndex" /> 开始的 32 位有符号整数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大于等于 <paramref name="value" /> 减 3 的长度，且小于等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.ReadOnlySpan{System.Byte})">
      <summary>将只读字节范围转换为 32 位带符号整数。</summary>
      <param name="value">包含要转换的字节的只读范围。</param>
      <returns>表示已转换字节的 32 位带符号整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度小于 4。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的八个字节转换来的 64 位有符号整数。</summary>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <returns>由八个字节构成、从 <paramref name="startIndex" /> 开始的 64 位有符号整数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大于等于 <paramref name="value" /> 减 7 的长度，且小于等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.ReadOnlySpan{System.Byte})">
      <summary>将只读字节范围转换为 64 位带符号整数。</summary>
      <param name="value">包含要转换的字节的只读范围。</param>
      <returns>表示已转换字节的 64 位带符号整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度小于 8。</exception>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的四个字节转换来的单精度浮点数。</summary>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <returns>由四个字节构成、从 <paramref name="startIndex" /> 开始的单精度浮点数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大于等于 <paramref name="value" /> 减 3 的长度，且小于等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.ReadOnlySpan{System.Byte})">
      <summary>将只读字节范围转换为双精度浮点值。</summary>
      <param name="value">包含要转换的字节的只读范围。</param>
      <returns>表示已转换字节的双精度浮点值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度小于 <see cref="T:System.Double" /> 值的长度。</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[])">
      <summary>将指定的字节数组的每个元素的数值转换为它的等效十六进制字符串表示形式。</summary>
      <param name="value">字节数组。</param>
      <returns>由以连字符分隔的十六进制对构成的字符串，其中每一对表示 <paramref name="value" /> 中对应的元素；例如“7F-2C-4A”。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
      <summary>将指定的字节子数组的每个元素的数值转换为它的等效十六进制字符串表示形式。</summary>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <returns>由以连字符分隔的十六进制对构成的字符串，其中每一对表示 <paramref name="value" /> 的子数组中对应的元素；例如“7F-2C-4A”。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
      <summary>将指定的字节子数组的每个元素的数值转换为它的等效十六进制字符串表示形式。</summary>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <param name="length">要转换的 <paramref name="value" /> 中的数组元素数。</param>
      <returns>由以连字符分隔的十六进制对构成的字符串，其中每一对表示 <paramref name="value" /> 的子数组中对应的元素；例如“7F-2C-4A”。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。
或
<paramref name="startIndex" /> 大于零且大于等于 <paramref name="value" /> 的长度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 的组合不指定 <paramref name="value" /> 中的位置；也就是说，<paramref name="startIndex" /> 参数大于 <paramref name="value" /> 的长度减去 <paramref name="length" /> 参数。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的两个字节转换来的 16 位无符号整数。</summary>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <returns>由两个字节构成、从 <paramref name="startIndex" /> 开始的 16 位无符号整数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.ReadOnlySpan{System.Byte})">
      <summary>将只读字节范围转换为 16 位无符号整数。</summary>
      <param name="value">包含要转换的字节的只读范围。</param>
      <returns>表示已转换字节的 16 位无符号整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度小于 2。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的四个字节转换来的 32 位无符号整数。</summary>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <returns>由四个字节构成、从 <paramref name="startIndex" /> 开始的 32 位无符号整数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大于等于 <paramref name="value" /> 减 3 的长度，且小于等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.ReadOnlySpan{System.Byte})">
      <summary>将只读字节范围转换为 32 位无符号整数。</summary>
      <param name="value">包含要转换的字节的只读范围。</param>
      <returns>表示已转换字节的 32 位无符号整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度小于 4。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的八个字节转换来的 64 位无符号整数。</summary>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <returns>由八个字节构成、从 <paramref name="startIndex" /> 开始的 64 位无符号整数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大于等于 <paramref name="value" /> 减 7 的长度，且小于等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.ReadOnlySpan{System.Byte})">
      <summary>将字节转换为无符号长整数。</summary>
      <param name="value">包含要转换的字节的只读范围。</param>
      <returns>表示已转换字节的 64 位无符号整数。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Boolean)">
      <summary>将布尔值转换为字节范围。</summary>
      <param name="destination">此方法返回时，表示转换后的布尔值的字节。</param>
      <param name="value">要转换的布尔值。</param>
      <returns>如果转换成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Char)">
      <summary>将字符转换为字节范围。</summary>
      <param name="destination">此方法返回时，表示转换后的字符的字节。</param>
      <param name="value">要转换的字符。</param>
      <returns>如果转换成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Double)">
      <summary>将双精度浮点值转换为字节范围。</summary>
      <param name="destination">此方法返回时，表示转换后的双精度浮点值的字节。</param>
      <param name="value">要转换的双精度浮点值。</param>
      <returns>如果转换成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int16)">
      <summary>将 16 位带符号整数转换为字节范围。</summary>
      <param name="destination">此方法返回时，表示转换后的 16 位带符号整数的字节。</param>
      <param name="value">要转换的 16 位带符号整数。</param>
      <returns>如果转换成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int32)">
      <summary>将 32 位带符号整数转换为字节范围。</summary>
      <param name="destination">此方法返回时，表示转换后的 32 位带符号整数的字节。</param>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>如果转换成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int64)">
      <summary>将 64 位带符号整数转换为字节范围。</summary>
      <param name="destination">此方法返回时，表示转换后的 64 位带符号整数的字节。</param>
      <param name="value">要转换的 64 位带符号整数。</param>
      <returns>如果转换成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Single)">
      <summary>将双精度浮点值转换为字节范围。</summary>
      <param name="destination">此方法返回时，表示转换后的双精度浮点值的字节。</param>
      <param name="value">要转换的双精度浮点值。</param>
      <returns>如果转换成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt16)">
      <summary>将无符号 16 位整数转换为字节范围。</summary>
      <param name="destination">此方法返回时，表示转换后的无符号 16 位整数的字节。</param>
      <param name="value">要转换的无符号 16 位整数。</param>
      <returns>如果转换成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt32)">
      <summary>将 32 位无符号整数转换为字节范围。</summary>
      <param name="destination">此方法返回时，表示转换后的无符号 32 位整数的字节。</param>
      <param name="value">要转换的无符号 32 位整数。</param>
      <returns>如果转换成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt64)">
      <summary>将无符号 64 位整数转换为字节范围。</summary>
      <param name="destination">此方法返回时，表示转换后的无符号 64 位整数的字节。</param>
      <param name="value">要转换的无符号 64 位整数。</param>
      <returns>如果转换成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.CannotUnloadAppDomainException">
      <summary>当尝试卸载应用程序域失败时引发的异常。</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor">
      <summary>初始化 <see cref="T:System.CannotUnloadAppDomainException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.CannotUnloadAppDomainException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.CannotUnloadAppDomainException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.CannotUnloadAppDomainException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.CodeDom.Compiler.IndentedTextWriter">
      <summary>提供可根据 Tab 字符串标记缩进新行的文本编写器。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>使用指定的文本编写器和默认 Tab 字符串，初始化 <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> 类的新实例。</summary>
      <param name="writer">用于输出的 <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>使用指定的文本编写器和 Tab 字符串初始化 <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> 类的新实例。</summary>
      <param name="writer">用于输出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="tabString">用于缩进的 Tab 字符串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Close">
      <summary>关闭正在向其写入的文档。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.IndentedTextWriter.DefaultTabString">
      <summary>指定默认 Tab 字符串。 此字段为常数。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Encoding">
      <summary>获取供文本编写器使用的编码。</summary>
      <returns>
        <see cref="T:System.Text.Encoding" />，指示供文本编写器使用的编码。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Flush">
      <summary>刷新流。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Indent">
      <summary>获取或设置缩进的空格数。</summary>
      <returns>要缩进的空格数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.InnerWriter">
      <summary>获取要使用的 <see cref="T:System.IO.TextWriter" />。</summary>
      <returns>要使用的 <see cref="T:System.IO.TextWriter" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.NewLine">
      <summary>获取或设置使用的换行符。</summary>
      <returns>使用的换行符。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.OutputTabs">
      <summary>根据 <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" /> 属性为每个缩进级别输出一次 Tab 字符串。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Boolean)">
      <summary>将 Boolean 值的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 Boolean 值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char)">
      <summary>将字符写入文本流。</summary>
      <param name="value">要写入的字符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[])">
      <summary>将字符数组写入文本流。</summary>
      <param name="buffer">要写入的字符数组。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>将字符的子数组写入文本流。</summary>
      <param name="buffer">要从中写出数据的字符数组。</param>
      <param name="index">在缓冲区中开始索引。</param>
      <param name="count">要写入的字符数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Double)">
      <summary>将 Double 的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 <see langword="double" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int32)">
      <summary>将整数的文本表示形式写入文本流。</summary>
      <param name="value">要写入的整数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int64)">
      <summary>将 8 字节整数的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 8 字节整数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Object)">
      <summary>将对象的文本表示形式写入文本流。</summary>
      <param name="value">要写入的对象。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Single)">
      <summary>将 Single 的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 <see langword="single" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String)">
      <summary>将指定的字符串写入文本流。</summary>
      <param name="s">要写入的字符串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>使用与指定语义相同的语义写出已格式化的字符串。</summary>
      <param name="format">格式化字符串。</param>
      <param name="arg0">要写入已格式化字符串的对象。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>使用与指定语义相同的语义写出已格式化的字符串。</summary>
      <param name="format">要使用的格式化字符串。</param>
      <param name="arg0">第一个要写入已格式化字符串的对象。</param>
      <param name="arg1">第二个要写入已格式化字符串的对象。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>使用与指定语义相同的语义写出已格式化的字符串。</summary>
      <param name="format">要使用的格式化字符串。</param>
      <param name="arg">要输出的参数数组。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine">
      <summary>写入一个行结束符。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>将后跟行结束符的 Boolean 的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 Boolean。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char)">
      <summary>将后跟行结束符的字符写入文本流。</summary>
      <param name="value">要写入的字符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>将后跟行结束符的字符数组写入文本流。</summary>
      <param name="buffer">要写入的字符数组。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>将后跟行结束符的字符子数组写入文本流。</summary>
      <param name="buffer">要从中写出数据的字符数组。</param>
      <param name="index">在缓冲区中开始索引。</param>
      <param name="count">要写入的字符数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Double)">
      <summary>将后跟行结束符的 Double 的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 <see langword="double" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>将后跟行结束符的整数的文本表示形式写入文本流。</summary>
      <param name="value">要写入的整数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>将后跟行结束符的 8 字节整数的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 8 字节整数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Object)">
      <summary>将后跟行结束符的对象的文本表示形式写入文本流。</summary>
      <param name="value">要写入的对象。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Single)">
      <summary>将后跟行结束符的 Single 的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 <see langword="single" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String)">
      <summary>将后跟行结束符的指定字符串写入文本流。</summary>
      <param name="s">要写入的字符串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>使用与指定语义相同的语义写出后跟行结束符的已格式化字符串。</summary>
      <param name="format">格式化字符串。</param>
      <param name="arg0">要写入已格式化字符串的对象。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>使用与指定语义相同的语义写出后跟行结束符的已格式化字符串。</summary>
      <param name="format">要使用的格式化字符串。</param>
      <param name="arg0">第一个要写入已格式化字符串的对象。</param>
      <param name="arg1">第二个要写入已格式化字符串的对象。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>使用与指定语义相同的语义写出后跟行结束符的已格式化字符串。</summary>
      <param name="format">要使用的格式化字符串。</param>
      <param name="arg">要输出的参数数组。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>将后跟行结束符的 UInt32 的文本表示形式写入文本流。</summary>
      <param name="value">要输出的 UInt32。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>将指定字符串写入无制表符的行。</summary>
      <param name="s">要写入的字符串。</param>
    </member>
    <member name="T:System.Collections.ArrayList">
      <summary>使用大小会根据需要动态增加的数组来实现 <see cref="T:System.Collections.IList" /> 接口。</summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor">
      <summary>初始化 <see cref="T:System.Collections.ArrayList" /> 类的新实例，该实例为空并且具有默认初始容量。</summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
      <summary>初始化 <see cref="T:System.Collections.ArrayList" /> 类的新实例，该类包含从指定集合复制的元素，并具有与复制的元素数相同的初始容量。</summary>
      <param name="c">其元素已复制到新列表的 <see cref="T:System.Collections.ICollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.ArrayList" /> 类的新实例，该实例为空并且具有指定的初始容量。</summary>
      <param name="capacity">新列表最初可以存储的元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
      <summary>为特定 <see cref="T:System.Collections.ArrayList" /> 创建 <see cref="T:System.Collections.IList" /> 包装。</summary>
      <param name="list">要包装的 <see cref="T:System.Collections.IList" />。</param>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 的 <see cref="T:System.Collections.IList" /> 包装。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Add(System.Object)">
      <summary>将对象添加到 <see cref="T:System.Collections.ArrayList" /> 的结尾处。</summary>
      <param name="value">要添加到 <see cref="T:System.Object" /> 的结尾处的 <see cref="T:System.Collections.ArrayList" />。 该值可以为 <see langword="null" />。</param>
      <returns>已添加 <see cref="T:System.Collections.ArrayList" /> 的 <paramref name="value" /> 索引。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。

或 -
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
      <summary>将 <see cref="T:System.Collections.ICollection" /> 的元素添加到 <see cref="T:System.Collections.ArrayList" /> 的末尾。</summary>
      <param name="c">
        <see cref="T:System.Collections.ICollection" />，其元素应添加到 <see cref="T:System.Collections.ArrayList" /> 的末尾。 集合本身不能为 <see langword="null" />，但它可以包含为 <see langword="null" /> 的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。

或 -
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器在已排序 <see cref="T:System.Collections.ArrayList" /> 的某个元素范围中搜索元素，并返回该元素从零开始的索引。</summary>
      <param name="index">要搜索范围的从零开始的起始索引。</param>
      <param name="count">要搜索的范围的长度。</param>
      <param name="value">要查找的 <see cref="T:System.Object" />。 该值可以为 <see langword="null" />。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。

或 -
如果为 <see langword="null" />，则使用默认比较器，即每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <returns>如果找到 <paramref name="value" />，则为排序的 <see cref="T:System.Collections.ArrayList" /> 中从零开始的 <paramref name="value" /> 索引；否则为一个负数，它是大于 <paramref name="value" /> 的下一个元素索引的按位求补，或者，如果没有更大的元素，则为 <see cref="P:System.Collections.ArrayList.Count" /> 的按位求补。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.ArrayList" /> 中的有效范围。

或 -
<paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="value" /> 和 <see cref="T:System.Collections.ArrayList" /> 的元素均不实现 <see cref="T:System.IComparable" /> 接口。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="value" /> 和 <see cref="T:System.Collections.ArrayList" /> 的元素不属于同一类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。

或 -
<paramref name="count" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object)">
      <summary>使用默认的比较器在整个已排序的 <see cref="T:System.Collections.ArrayList" /> 中搜索元素，并返回该元素从零开始的索引。</summary>
      <param name="value">要查找的 <see cref="T:System.Object" />。 该值可以为 <see langword="null" />。</param>
      <returns>如果找到 <paramref name="value" />，则为排序的 <see cref="T:System.Collections.ArrayList" /> 中从零开始的 <paramref name="value" /> 索引；否则为一个负数，它是大于 <paramref name="value" /> 的下一个元素索引的按位求补，或者，如果没有更大的元素，则为 <see cref="P:System.Collections.ArrayList.Count" /> 的按位求补。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 和 <see cref="T:System.Collections.ArrayList" /> 的元素均未实现 <see cref="T:System.IComparable" /> 接口。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 和 <see cref="T:System.Collections.ArrayList" /> 的元素不是同一类型。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器在整个已排序的 <see cref="T:System.Collections.ArrayList" /> 中搜索元素，并返回该元素从零开始的索引。</summary>
      <param name="value">要查找的 <see cref="T:System.Object" />。 该值可以为 <see langword="null" />。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。

或 -
如果为 <see langword="null" />，则使用默认比较器，即每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <returns>如果找到 <paramref name="value" />，则为排序的 <see cref="T:System.Collections.ArrayList" /> 中从零开始的 <paramref name="value" /> 索引；否则为一个负数，它是大于 <paramref name="value" /> 的下一个元素索引的按位求补，或者，如果没有更大的元素，则为 <see cref="P:System.Collections.ArrayList.Count" /> 的按位求补。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="value" /> 和 <see cref="T:System.Collections.ArrayList" /> 的元素均不实现 <see cref="T:System.IComparable" /> 接口。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="value" /> 和 <see cref="T:System.Collections.ArrayList" /> 的元素不属于同一类型。</exception>
    </member>
    <member name="P:System.Collections.ArrayList.Capacity">
      <summary>获取或设置 <see cref="T:System.Collections.ArrayList" /> 可包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 可包含的元素数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.ArrayList.Capacity" /> 已设置为一个小于 <see cref="P:System.Collections.ArrayList.Count" /> 的值。</exception>
      <exception cref="T:System.OutOfMemoryException">系统上没有足够的可用内存。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clear">
      <summary>从 <see cref="T:System.Collections.ArrayList" /> 中移除所有元素。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。

或 -
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clone">
      <summary>创建 <see cref="T:System.Collections.ArrayList" /> 的浅表副本。</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 的浅表副本。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.Contains(System.Object)">
      <summary>确定某元素是否在 <see cref="T:System.Collections.ArrayList" /> 中。</summary>
      <param name="item">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.ArrayList" />。 该值可以为 <see langword="null" />。</param>
      <returns>如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.ArrayList" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array)">
      <summary>从目标数组的开头开始，将整个 <see cref="T:System.Collections.ArrayList" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ArrayList" /> 复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。

或 -
源 <see cref="T:System.Collections.ArrayList" /> 中的元素个数大于目标 <paramref name="array" /> 可以包含的元素个数。</exception>
      <exception cref="T:System.InvalidCastException">无法自动将源 <see cref="T:System.Collections.ArrayList" /> 的类型转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ArrayList" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ArrayList" /> 复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。

或 -
源 <see cref="T:System.Collections.ArrayList" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
      <exception cref="T:System.InvalidCastException">无法自动将源 <see cref="T:System.Collections.ArrayList" /> 的类型转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>从目标数组的指定索引处开始，将 <see cref="T:System.Collections.ArrayList" /> 中某个范围的元素复制到兼容的一维数组  <see cref="T:System.Array" />。</summary>
      <param name="index">复制即从源 <see cref="T:System.Collections.ArrayList" /> 中从零开始的索引开始。</param>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ArrayList" /> 复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <param name="count">要复制的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。

或 -
<paramref name="arrayIndex" /> 小于零。

或 -
<paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。

或 -
<paramref name="index" /> 等于或大于源 <see cref="P:System.Collections.ArrayList.Count" /> 的 <see cref="T:System.Collections.ArrayList" />。

或 -
从 <paramref name="index" /> 到源 <see cref="T:System.Collections.ArrayList" /> 的末尾的元素数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 的末尾的可用空间。</exception>
      <exception cref="T:System.InvalidCastException">无法自动将源 <see cref="T:System.Collections.ArrayList" /> 的类型转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.ArrayList.Count">
      <summary>获取 <see cref="T:System.Collections.ArrayList" /> 中实际包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 中实际包含的元素数。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
      <summary>返回具有固定大小的 <see cref="T:System.Collections.ArrayList" /> 包装。</summary>
      <param name="list">要包装的 <see cref="T:System.Collections.ArrayList" />。</param>
      <returns>具有固定大小的 <see cref="T:System.Collections.ArrayList" /> 包装。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
      <summary>返回具有固定大小的 <see cref="T:System.Collections.IList" /> 包装。</summary>
      <param name="list">要包装的 <see cref="T:System.Collections.IList" />。</param>
      <returns>具有固定大小的 <see cref="T:System.Collections.IList" /> 包装。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator">
      <summary>返回用于整个 <see cref="T:System.Collections.ArrayList" /> 的枚举数。</summary>
      <returns>用于整个 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.ArrayList" />。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
      <summary>返回 <see cref="T:System.Collections.ArrayList" /> 中元素范围的枚举器。</summary>
      <param name="index">枚举器应引用的 <see cref="T:System.Collections.ArrayList" /> 部分从零开始的起始索引。</param>
      <param name="count">枚举器应引用的 <see cref="T:System.Collections.ArrayList" /> 部分中的元素数。</param>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 中指定的元素范围的 <see cref="T:System.Collections.ArrayList" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。

或 -
<paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 未在 <see cref="T:System.Collections.ArrayList" /> 中指定有效范围。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
      <summary>返回一个 <see cref="T:System.Collections.ArrayList" />，它表示源 <see cref="T:System.Collections.ArrayList" /> 中的元素子集。</summary>
      <param name="index">范围开始处的从零开始的 <see cref="T:System.Collections.ArrayList" /> 索引。</param>
      <param name="count">范围中的元素数。</param>
      <returns>一个 <see cref="T:System.Collections.ArrayList" />，它表示源 <see cref="T:System.Collections.ArrayList" /> 中的元素子集。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。

或 -
<paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.ArrayList" /> 中元素的有效范围。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object)">
      <summary>搜索指定的 <see cref="T:System.Object" />，并返回整个 <see cref="T:System.Collections.ArrayList" /> 中第一个匹配项的从零开始的索引。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.ArrayList" />。 该值可以为 <see langword="null" />。</param>
      <returns>如果找到，则为整个 <paramref name="value" /> 中 <see cref="T:System.Collections.ArrayList" /> 第一个匹配项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
      <summary>搜索指定的 <see cref="T:System.Object" />，并返回 <see cref="T:System.Collections.ArrayList" /> 中从指定索引到最后一个元素的元素范围中第一个匹配项的从零开始索引。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.ArrayList" />。 该值可以为 <see langword="null" />。</param>
      <param name="startIndex">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <returns>如果在 <paramref name="value" /> 中从 <see cref="T:System.Collections.ArrayList" /> 到最后一个元素的元素范围内找到 <paramref name="startIndex" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <see cref="T:System.Collections.ArrayList" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
      <summary>搜索指定的 <see cref="T:System.Object" />，并返回 <see cref="T:System.Collections.ArrayList" /> 中从指定索引开始，并包含指定元素数的元素范围中第一个匹配项的从零开始的索引。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.ArrayList" />。 该值可以为 <see langword="null" />。</param>
      <param name="startIndex">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <returns>如果在 <paramref name="value" /> 中从 <see cref="T:System.Collections.ArrayList" /> 开始并包含 <paramref name="startIndex" /> 个元素的元素范围内找到 <paramref name="count" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <see cref="T:System.Collections.ArrayList" /> 的有效索引范围。

或 -
<paramref name="count" /> 小于零。

或 -
<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <see cref="T:System.Collections.ArrayList" /> 中指定有效部分。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
      <summary>将元素插入 <see cref="T:System.Collections.ArrayList" /> 的指定索引处。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">要插入的 <see cref="T:System.Object" />。 该值可以为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。

或 -
<paramref name="index" /> 大于 <see cref="P:System.Collections.ArrayList.Count" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。

或 -
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
      <summary>将集合中的元素插入 <see cref="T:System.Collections.ArrayList" /> 的指定索引处。</summary>
      <param name="index">应在此处插入新元素的从零开始的索引。</param>
      <param name="c">
        <see cref="T:System.Collections.ICollection" />，应将其元素插入到 <see cref="T:System.Collections.ArrayList" /> 中。 集合本身不能为 <see langword="null" />，但它可以包含为 <see langword="null" /> 的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。

或 -
<paramref name="index" /> 大于 <see cref="P:System.Collections.ArrayList.Count" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。

或 -
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="P:System.Collections.ArrayList.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.ArrayList" /> 是否具有固定大小。</summary>
      <returns>如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.ArrayList" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.ArrayList" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.ArrayList" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ArrayList" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ArrayList" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ArrayList.Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。

或 -
<paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ArrayList.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
      <summary>在整个 <see cref="T:System.Object" /> 中搜索指定的 <see cref="T:System.Collections.ArrayList" />，并返回最后一个匹配项的从零开始的索引。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.ArrayList" />。 该值可以为 <see langword="null" />。</param>
      <returns>如果在整个 <paramref name="value" /> 中找到 <see cref="T:System.Collections.ArrayList" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
      <summary>搜索指定的 <see cref="T:System.Object" />，并返回 <see cref="T:System.Collections.ArrayList" /> 中从第一个元素到指定索引这部分元素中最后一个匹配项的从零开始索引。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.ArrayList" />。 该值可以为 <see langword="null" />。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <returns>如果找到，则返回在 <paramref name="value" /> 中从第一个元素到 <see cref="T:System.Collections.ArrayList" /> 的元素范围内找到 <paramref name="startIndex" /> 的最后一个匹配项的从零开始的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <see cref="T:System.Collections.ArrayList" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
      <summary>搜索指定的 <see cref="T:System.Object" />，并返回 <see cref="T:System.Collections.ArrayList" /> 中到指定索引为止包含指定元素数的这部分元素中最后一个匹配项的从零开始的索引。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.ArrayList" />。 该值可以为 <see langword="null" />。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <returns>如果在 <paramref name="value" /> 中到 <see cref="T:System.Collections.ArrayList" /> 为止包含 <paramref name="count" /> 个元素的这部分元素中找到 <paramref name="startIndex" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <see cref="T:System.Collections.ArrayList" /> 的有效索引范围。

或 -
<paramref name="count" /> 小于零。

或 -
<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <see cref="T:System.Collections.ArrayList" /> 中指定有效部分。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
      <summary>返回只读的 <see cref="T:System.Collections.ArrayList" /> 包装。</summary>
      <param name="list">要包装的 <see cref="T:System.Collections.ArrayList" />。</param>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 周围的只读 <paramref name="list" /> 包装。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
      <summary>返回只读的 <see cref="T:System.Collections.IList" /> 包装。</summary>
      <param name="list">要包装的 <see cref="T:System.Collections.IList" />。</param>
      <returns>
        <see cref="T:System.Collections.IList" /> 周围的只读 <paramref name="list" /> 包装。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.ArrayList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="obj">要从 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.ArrayList" />。 该值可以为 <see langword="null" />。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。

或 -
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.ArrayList" /> 的指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。

或 -
<paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ArrayList.Count" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。

或 -
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Collections.ArrayList" /> 中移除一系列元素。</summary>
      <param name="index">要移除的元素范围的从零开始的起始索引。</param>
      <param name="count">要移除的元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。

或 -
<paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.ArrayList" /> 中元素的有效范围。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。

或 -
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
      <summary>返回 <see cref="T:System.Collections.ArrayList" />，其元素是指定值的副本。</summary>
      <param name="value">要在新的 <see cref="T:System.Object" /> 中对其进行多次复制的 <see cref="T:System.Collections.ArrayList" />。 该值可以为 <see langword="null" />。</param>
      <param name="count">
        <paramref name="value" /> 应复制的次数。</param>
      <returns>具有 <see cref="T:System.Collections.ArrayList" /> 个元素数的 <paramref name="count" />，所有元素都是 <paramref name="value" /> 的副本。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse">
      <summary>将整个 <see cref="T:System.Collections.ArrayList" /> 中元素的顺序反转。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
      <summary>将指定范围中元素的顺序反转。</summary>
      <param name="index">要反转的范围的从零开始的起始索引。</param>
      <param name="count">要反转的范围内的元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。

或 -
<paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.ArrayList" /> 中元素的有效范围。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
      <summary>复制 <see cref="T:System.Collections.ArrayList" /> 中一个子集合的元素。</summary>
      <param name="index">从零开始的 <see cref="T:System.Collections.ArrayList" /> 索引，从此索引处开始复制 <paramref name="c" /> 的元素。</param>
      <param name="c">
        <see cref="T:System.Collections.ICollection" />，它的元素要复制到 <see cref="T:System.Collections.ArrayList" />。 集合本身不能为 <see langword="null" />，但它可以包含为 <see langword="null" /> 的元素。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。

或 -
<paramref name="index" /> 加上 <paramref name="c" /> 中的元素数大于 <see cref="P:System.Collections.ArrayList.Count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort">
      <summary>对整个 <see cref="T:System.Collections.ArrayList" /> 中的元素进行排序。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
      <summary>使用指定的比较器对整个 <see cref="T:System.Collections.ArrayList" /> 中的元素进行排序。</summary>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。

或 -
一个空引用（在 Visual Basic 中为 <see langword="Nothing" />），将使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。</exception>
      <exception cref="T:System.InvalidOperationException">比较两个元素时出错。</exception>
      <exception cref="T:System.ArgumentException">将为 <see langword="null" /> 传递 <paramref name="comparer" />，并且列表中的元素不实现 <see cref="T:System.IComparable" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>使用指定的比较器对 <see cref="T:System.Collections.ArrayList" /> 中某个范围内的元素进行排序。</summary>
      <param name="index">要排序范围的从零开始的起始索引。</param>
      <param name="count">要排序的范围的长度。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。

或 -
一个空引用（在 Visual Basic 中为 <see langword="Nothing" />），将使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。

或 -
<paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 未在 <see cref="T:System.Collections.ArrayList" /> 中指定有效范围。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。</exception>
      <exception cref="T:System.InvalidOperationException">比较两个元素时出错。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
      <summary>返回同步的（线程安全）<see cref="T:System.Collections.ArrayList" /> 包装器。</summary>
      <param name="list">要同步的 <see cref="T:System.Collections.ArrayList" />。</param>
      <returns>同步的（线程安全）<see cref="T:System.Collections.ArrayList" /> 包装器。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
      <summary>返回同步的（线程安全）<see cref="T:System.Collections.IList" /> 包装器。</summary>
      <param name="list">要同步的 <see cref="T:System.Collections.IList" />。</param>
      <returns>同步的（线程安全）<see cref="T:System.Collections.IList" /> 包装器。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Collections.ArrayList.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ArrayList" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ArrayList" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray">
      <summary>将 <see cref="T:System.Collections.ArrayList" /> 的元素复制到新 <see cref="T:System.Object" /> 数组中。</summary>
      <returns>一个包含 <see cref="T:System.Object" /> 的元素副本的 <see cref="T:System.Collections.ArrayList" /> 数组。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray(System.Type)">
      <summary>将 <see cref="T:System.Collections.ArrayList" /> 的元素复制到新的指定元素类型数组中。</summary>
      <param name="type">要创建和复制元素的目标数组的元素 <see cref="T:System.Type" />。</param>
      <returns>包含 <see cref="T:System.Collections.ArrayList" /> 的元素副本的指定元素类型数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">源 <see cref="T:System.Collections.ArrayList" /> 的类型无法自动转换为指定类型。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.TrimToSize">
      <summary>将容量设置为 <see cref="T:System.Collections.ArrayList" /> 中元素的实际数目。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。

或 -
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="T:System.Collections.Comparer">
      <summary>比较两个对象是否相等，其中字符串比较是区分大小写的。</summary>
    </member>
    <member name="M:System.Collections.Comparer.#ctor(System.Globalization.CultureInfo)">
      <summary>使用指定的 <see cref="T:System.Collections.Comparer" /> 初始化 <see cref="T:System.Globalization.CultureInfo" /> 类的新实例。</summary>
      <param name="culture">要用于新 <see cref="T:System.Globalization.CultureInfo" /> 的 <see cref="T:System.Collections.Comparer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Comparer.Compare(System.Object,System.Object)">
      <summary>对同一类型的两个对象执行区分大小写的比较，并返回一个值，指示其中一个对象小于、等于还是大于另一个对象。</summary>
      <param name="a">要比较的第一个对象。</param>
      <param name="b">要比较的第二个对象。</param>
      <returns>一个有符号整数，指示 <paramref name="a" /> 和 <paramref name="b" /> 的相对值，如下表所示。
  值 
  含义 
  小于零 
 <paramref name="a" /> 小于 <paramref name="b" />。  
  
  零 
 <paramref name="a" /> 等于 <paramref name="b" />。  
  
  大于零 
 <paramref name="a" /> 大于 <paramref name="b" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="a" /> 和 <paramref name="b" /> 都不实现 <see cref="T:System.IComparable" /> 接口。
或
<paramref name="a" /> 和 <paramref name="b" /> 的类型不同，它们都无法处理与另一个进行的比较。</exception>
    </member>
    <member name="F:System.Collections.Comparer.Default">
      <summary>表示 <see cref="T:System.Collections.Comparer" /> 的实例，它与当前线程的 <see cref="P:System.Threading.Thread.CurrentCulture" /> 关联。 此字段为只读。</summary>
    </member>
    <member name="F:System.Collections.Comparer.DefaultInvariant">
      <summary>表示 <see cref="T:System.Collections.Comparer" /> 的实例，它与 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> 关联。 此字段为只读。</summary>
    </member>
    <member name="M:System.Collections.Comparer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">要填充数据的对象。</param>
      <param name="context">有关序列化的源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Collections.Hashtable">
      <summary>表示根据键的哈希代码进行组织的键/值对的集合。</summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor">
      <summary>使用默认的初始容量、加载因子、哈希代码提供程序和比较器来初始化 <see cref="T:System.Collections.Hashtable" /> 类的新的空实例。</summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)">
      <summary>通过将指定字典中的元素复制到新的 <see cref="T:System.Collections.Hashtable" /> 对象中，初始化 <see cref="T:System.Collections.Hashtable" /> 类的一个新实例。 新 <see cref="T:System.Collections.Hashtable" /> 对象的初始容量等于复制的元素数，并且使用默认的加载因子、哈希代码提供程序和比较器。</summary>
      <param name="d">要复制到新 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.Hashtable" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)">
      <summary>通过将指定字典中的元素复制到新的 <see cref="T:System.Collections.Hashtable" /> 对象中，初始化 <see cref="T:System.Collections.Hashtable" /> 类的一个新实例。 新 <see cref="T:System.Collections.Hashtable" /> 对象的初始容量等于复制的元素数，并且使用默认加载因子和指定的 <see cref="T:System.Collections.IEqualityComparer" /> 对象。</summary>
      <param name="d">要复制到新 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.Hashtable" /> 对象。</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于定义要用来处理 <see cref="T:System.Collections.Hashtable" /> 的哈希代码提供程序和比较器。
或
<see langword="null" />，则使用默认哈希代码提供程序和默认比较器。 默认哈希代码提供程序是各个键的 <see cref="M:System.Object.GetHashCode" /> 实现，而默认比较器是各个键的 <see cref="M:System.Object.Equals(System.Object)" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>通过将指定字典中的元素复制到新的 <see cref="T:System.Collections.Hashtable" /> 对象中，初始化 <see cref="T:System.Collections.Hashtable" /> 类的一个新实例。 新 <see cref="T:System.Collections.Hashtable" /> 对象的初始容量等于复制的元素数，并且使用默认的加载因子、指定的哈希代码提供程序和指定的比较器。 此 API 已过时。 有关另类，请参见 <see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)" />。</summary>
      <param name="d">要复制到新 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.Hashtable" /> 对象。</param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 对象，用于为 <see cref="T:System.Collections.Hashtable" /> 中的所有键提供哈希代码。
或
<see langword="null" />，使用默认哈希代码提供程序，该提供程序是每一个键的 <see cref="M:System.Object.GetHashCode" /> 实现。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> 对象，用于确定两个键是否相等。
或
<see langword="null" />，使用默认比较器，该比较器是每一个键的 <see cref="M:System.Object.Equals(System.Object)" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)">
      <summary>通过将指定字典中的元素复制到新的 <see cref="T:System.Collections.Hashtable" /> 对象中，初始化 <see cref="T:System.Collections.Hashtable" /> 类的一个新实例。 新 <see cref="T:System.Collections.Hashtable" /> 对象的初始容量等于复制的元素数，并且使用指定的加载因子、默认哈希代码提供程序和默认比较器。</summary>
      <param name="d">要复制到新 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.Hashtable" /> 对象。</param>
      <param name="loadFactor">0.1 到 1.0 范围内的数字，再乘以提供最佳性能的默认值。 结果是元素与存储桶的最大比率。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" /> 小于 0.1。
或
<paramref name="loadFactor" /> 大于 1.0。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)">
      <summary>通过将指定字典中的元素复制到新的 <see cref="T:System.Collections.Hashtable" /> 对象中，初始化 <see cref="T:System.Collections.Hashtable" /> 类的一个新实例。 新 <see cref="T:System.Collections.Hashtable" /> 对象的初始容量等于复制的元素数，并且使用指定的加载因子和 <see cref="T:System.Collections.IEqualityComparer" /> 对象。</summary>
      <param name="d">要复制到新 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.Hashtable" /> 对象。</param>
      <param name="loadFactor">0.1 到 1.0 范围内的数字，再乘以提供最佳性能的默认值。 结果是元素与存储桶的最大比率。</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于定义要用来处理 <see cref="T:System.Collections.Hashtable" /> 的哈希代码提供程序和比较器。
或
<see langword="null" />，则使用默认哈希代码提供程序和默认比较器。 默认哈希代码提供程序是各个键的 <see cref="M:System.Object.GetHashCode" /> 实现，而默认比较器是各个键的 <see cref="M:System.Object.Equals(System.Object)" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" /> 小于 0.1。
或
<paramref name="loadFactor" /> 大于 1.0。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>通过将指定字典中的元素复制到新的 <see cref="T:System.Collections.Hashtable" /> 对象中，初始化 <see cref="T:System.Collections.Hashtable" /> 类的一个新实例。 新 <see cref="T:System.Collections.Hashtable" /> 对象的初始容量等于复制的元素数，并且使用指定的加载因子、哈希代码提供程序和比较器。</summary>
      <param name="d">要复制到新 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.Hashtable" /> 对象。</param>
      <param name="loadFactor">0.1 到 1.0 范围内的数字，再乘以提供最佳性能的默认值。 结果是元素与存储桶的最大比率。</param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 对象，用于为 <see cref="T:System.Collections.Hashtable" /> 中的所有键提供哈希代码。
或
<see langword="null" />，使用默认哈希代码提供程序，该提供程序是每一个键的 <see cref="M:System.Object.GetHashCode" /> 实现。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> 对象，用于确定两个键是否相等。
或
<see langword="null" />，使用默认比较器，该比较器是每一个键的 <see cref="M:System.Object.Equals(System.Object)" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" /> 小于 0.1。
或
<paramref name="loadFactor" /> 大于 1.0。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)">
      <summary>使用默认的初始容量、默认加载因子和指定的 <see cref="T:System.Collections.Hashtable" /> 对象来初始化 <see cref="T:System.Collections.IEqualityComparer" /> 类的新的空实例。</summary>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于定义要与 <see cref="T:System.Collections.Hashtable" /> 对象一起使用的哈希代码提供程序和比较器。
或
<see langword="null" />，则使用默认哈希代码提供程序和默认比较器。 默认哈希代码提供程序是各个键的 <see cref="M:System.Object.GetHashCode" /> 实现，而默认比较器是各个键的 <see cref="M:System.Object.Equals(System.Object)" /> 实现。</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>使用默认初始容量、默认加载因子、指定的哈希代码提供程序和指定的比较器来初始化 <see cref="T:System.Collections.Hashtable" /> 类的新的空实例。</summary>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 对象，用于为 <see cref="T:System.Collections.Hashtable" /> 对象中的所有键提供哈希代码。
或
<see langword="null" />，使用默认哈希代码提供程序，该提供程序是每一个键的 <see cref="M:System.Object.GetHashCode" /> 实现。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> 对象，用于确定两个键是否相等。
或
<see langword="null" />，使用默认比较器，该比较器是每一个键的 <see cref="M:System.Object.Equals(System.Object)" /> 实现。</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32)">
      <summary>使用指定的初始容量、默认加载因子、默认哈希代码提供程序和默认比较器来初始化 <see cref="T:System.Collections.Hashtable" /> 类的新的空实例。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 对象最初可包含的元素的近似数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>使用指定的初始容量和 <see cref="T:System.Collections.Hashtable" /> 以及默认的加载因子来初始化 <see cref="T:System.Collections.IEqualityComparer" /> 类的新的空实例。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 对象最初可包含的元素的近似数目。</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于定义要用来处理 <see cref="T:System.Collections.Hashtable" /> 的哈希代码提供程序和比较器。
或
<see langword="null" />，则使用默认哈希代码提供程序和默认比较器。 默认哈希代码提供程序是各个键的 <see cref="M:System.Object.GetHashCode" /> 实现，而默认比较器是各个键的 <see cref="M:System.Object.Equals(System.Object)" /> 实现。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>使用指定的初始容量、哈希代码提供程序、比较器和默认加载因子来初始化 <see cref="T:System.Collections.Hashtable" /> 类的新的空实例。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 对象最初可包含的元素的近似数目。</param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 对象，用于为 <see cref="T:System.Collections.Hashtable" /> 中的所有键提供哈希代码。
或
<see langword="null" />，使用默认哈希代码提供程序，该提供程序是每一个键的 <see cref="M:System.Object.GetHashCode" /> 实现。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> 对象，用于确定两个键是否相等。
或
<see langword="null" />，使用默认比较器，该比较器是每一个键的 <see cref="M:System.Object.Equals(System.Object)" /> 实现。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single)">
      <summary>使用指定的初始容量、指定的加载因子、默认的哈希代码提供程序和默认比较器来初始化 <see cref="T:System.Collections.Hashtable" /> 类的新的空实例。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 对象最初可包含的元素的近似数目。</param>
      <param name="loadFactor">0.1 到 1.0 范围内的数字，再乘以提供最佳性能的默认值。 结果是元素与存储桶的最大比率。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
或
<paramref name="loadFactor" /> 小于 0.1。
或
<paramref name="loadFactor" /> 大于 1.0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="capacity" /> 导致溢出。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)">
      <summary>使用指定的初始容量、加载因子和 <see cref="T:System.Collections.Hashtable" /> 对象来初始化 <see cref="T:System.Collections.IEqualityComparer" /> 类的新的空实例。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 对象最初可包含的元素的近似数目。</param>
      <param name="loadFactor">0.1 到 1.0 范围内的数字，再乘以提供最佳性能的默认值。 结果是元素与存储桶的最大比率。</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于定义要用来处理 <see cref="T:System.Collections.Hashtable" /> 的哈希代码提供程序和比较器。
或
<see langword="null" />，则使用默认哈希代码提供程序和默认比较器。 默认哈希代码提供程序是各个键的 <see cref="M:System.Object.GetHashCode" /> 实现，而默认比较器是各个键的 <see cref="M:System.Object.Equals(System.Object)" /> 实现。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
或
<paramref name="loadFactor" /> 小于 0.1。
或
<paramref name="loadFactor" /> 大于 1.0。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>使用指定的初始容量、加载因子、哈希代码提供程序和比较器来初始化 <see cref="T:System.Collections.Hashtable" /> 类的新的空实例。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 对象最初可包含的元素的近似数目。</param>
      <param name="loadFactor">0.1 到 1.0 范围内的数字，再乘以提供最佳性能的默认值。 结果是元素与存储桶的最大比率。</param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 对象，用于为 <see cref="T:System.Collections.Hashtable" /> 中的所有键提供哈希代码。
或
<see langword="null" />，使用默认哈希代码提供程序，该提供程序是每一个键的 <see cref="M:System.Object.GetHashCode" /> 实现。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> 对象，用于确定两个键是否相等。
或
<see langword="null" />，使用默认比较器，该比较器是每一个键的 <see cref="M:System.Object.Equals(System.Object)" /> 实现。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
或
<paramref name="loadFactor" /> 小于 0.1。
或
<paramref name="loadFactor" /> 大于 1.0。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Collections.Hashtable" /> 类的新的空实例，该实例可序列化且使用指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含序列化 <see cref="T:System.Collections.Hashtable" /> 所需的信息。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象包含与<see cref="T:System.Collections.Hashtable" /> 关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Add(System.Object,System.Object)">
      <summary>将带有指定键和值的元素添加到 <see cref="T:System.Collections.Hashtable" /> 中。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。 该值可以为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Hashtable" /> 中已存在具有相同键的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> 为只读。
或
<see cref="T:System.Collections.Hashtable" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clear">
      <summary>从 <see cref="T:System.Collections.Hashtable" /> 中移除所有元素。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clone">
      <summary>创建 <see cref="T:System.Collections.Hashtable" /> 的浅表副本。</summary>
      <returns>
        <see cref="T:System.Collections.Hashtable" /> 的浅表副本。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.comparer">
      <summary>获取或设置要用于 <see cref="T:System.Collections.IComparer" /> 的 <see cref="T:System.Collections.Hashtable" />。</summary>
      <returns>要用于 <see cref="T:System.Collections.IComparer" /> 的 <see cref="T:System.Collections.Hashtable" />。</returns>
      <exception cref="T:System.ArgumentException">该属性被设置为某个值，但哈希表是使用 <see cref="T:System.Collections.IEqualityComparer" /> 创建的。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.Hashtable" /> 是否包含特定键。</summary>
      <param name="key">要在 <see cref="T:System.Collections.Hashtable" /> 中定位的键。</param>
      <returns>如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Hashtable" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsKey(System.Object)">
      <summary>确定 <see cref="T:System.Collections.Hashtable" /> 是否包含特定键。</summary>
      <param name="key">要在 <see cref="T:System.Collections.Hashtable" /> 中定位的键。</param>
      <returns>如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Hashtable" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsValue(System.Object)">
      <summary>确定 <see cref="T:System.Collections.Hashtable" /> 是否包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Collections.Hashtable" /> 中定位的值。 该值可以为 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 包含具有指定 <see cref="T:System.Collections.Hashtable" /> 的元素，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Collections.Hashtable" /> 元素复制到一维 <see cref="T:System.Array" /> 实例中的指定索引位置。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.DictionaryEntry" /> 复制的 <see cref="T:System.Collections.Hashtable" /> 对象的目标位置。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
或
源 <see cref="T:System.Collections.Hashtable" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
      <exception cref="T:System.InvalidCastException">无法自动将源 <see cref="T:System.Collections.Hashtable" /> 的类型转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Hashtable.Count">
      <summary>获取包含在 <see cref="T:System.Collections.Hashtable" /> 中的键/值对的数目。</summary>
      <returns>包含在 <see cref="T:System.Collections.Hashtable" /> 中的键/值对的数目。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.EqualityComparer">
      <summary>获取要用于 <see cref="T:System.Collections.IEqualityComparer" /> 的 <see cref="T:System.Collections.Hashtable" />。</summary>
      <returns>要用于 <see cref="T:System.Collections.IEqualityComparer" /> 的 <see cref="T:System.Collections.Hashtable" />。</returns>
      <exception cref="T:System.ArgumentException">该属性被设置为某个值，但哈希表是使用 <see cref="T:System.Collections.IHashCodeProvider" /> 和 <see cref="T:System.Collections.IComparer" /> 创建的。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.Hashtable" />。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 的一个 <see cref="T:System.Collections.Hashtable" />。</returns>
    </member>
    <member name="M:System.Collections.Hashtable.GetHash(System.Object)">
      <summary>返回指定键的哈希代码。</summary>
      <param name="key">
        <see cref="T:System.Object" />，将为其返回哈希代码。</param>
      <returns>
        <paramref name="key" /> 的哈希代码。</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回序列化 <see cref="T:System.Collections.Hashtable" /> 所需的数据。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象包含序列化 <see cref="T:System.Collections.Hashtable" /> 所需的信息。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象包含与<see cref="T:System.Collections.Hashtable" /> 关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">已修改集合。</exception>
    </member>
    <member name="P:System.Collections.Hashtable.hcp">
      <summary>获取或设置可分配哈希代码的对象。</summary>
      <returns>可分配哈希代码的对象。</returns>
      <exception cref="T:System.ArgumentException">该属性被设置为某个值，但哈希表是使用 <see cref="T:System.Collections.IEqualityComparer" /> 创建的。</exception>
    </member>
    <member name="P:System.Collections.Hashtable.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Hashtable" /> 是否具有固定大小。</summary>
      <returns>如果<see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.Hashtable" /> ；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Hashtable" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Hashtable" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.Hashtable" /> 的访问（线程安全）。</summary>
      <returns>如果对<see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.Hashtable" /> ；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.Item(System.Object)">
      <summary>获取或设置与指定的键关联的值。</summary>
      <param name="key">要获取或设置其值的键。</param>
      <returns>与指定的键相关联的值。 如果未找到指定的键，尝试获取它将返回 <see langword="null" />，尝试设置它将使用指定的键创建新元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">设置了该属性，但 <see cref="T:System.Collections.Hashtable" /> 为只读。
或
设置了该属性，但 <paramref name="key" /> 不存在于集合中，且 <see cref="T:System.Collections.Hashtable" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.KeyEquals(System.Object,System.Object)">
      <summary>将特定 <see cref="T:System.Object" /> 与 <see cref="T:System.Collections.Hashtable" /> 中的特定键进行比较。</summary>
      <param name="item">要与 <paramref name="key" /> 进行比较的 <see cref="T:System.Object" />。</param>
      <param name="key">要与 <paramref name="item" /> 进行比较的 <see cref="T:System.Collections.Hashtable" /> 中的键。</param>
      <returns>如果 <paramref name="item" /> 和 <paramref name="key" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 <see langword="null" />。
或
<paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Collections.Hashtable.Keys">
      <summary>获取包含 <see cref="T:System.Collections.ICollection" /> 中的键的 <see cref="T:System.Collections.Hashtable" />。</summary>
      <returns>包含 <see cref="T:System.Collections.ICollection" /> 中的键的 <see cref="T:System.Collections.Hashtable" />。</returns>
    </member>
    <member name="M:System.Collections.Hashtable.OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。</summary>
      <param name="sender">反序列化事件源。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">与当前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 相关联的 <see cref="T:System.Collections.Hashtable" /> 对象无效。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.Hashtable" /> 中移除包含指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> 为只读。
或
<see cref="T:System.Collections.Hashtable" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)">
      <summary>返回 <see cref="T:System.Collections.Hashtable" /> 的同步（线程安全）包装。</summary>
      <param name="table">要同步的 <see cref="T:System.Collections.Hashtable" />。</param>
      <returns>
        <see cref="T:System.Collections.Hashtable" /> 的同步（线程安全）包装。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Collections.Hashtable.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.Hashtable" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.Hashtable" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.Values">
      <summary>获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.Hashtable" /> 中的值。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.Hashtable" /> 中的值。</returns>
    </member>
    <member name="T:System.Collections.IHashCodeProvider">
      <summary>使用自定义哈希函数为对象提供哈希代码。</summary>
    </member>
    <member name="M:System.Collections.IHashCodeProvider.GetHashCode(System.Object)">
      <summary>返回指定对象的哈希代码。</summary>
      <param name="obj">
        <see cref="T:System.Object" />，将为其返回哈希代码。</param>
      <returns>指定对象的哈希代码。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的类型为引用类型，<paramref name="obj" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ContextBoundObject">
      <summary>定义所有上下文绑定类的基类。</summary>
    </member>
    <member name="M:System.ContextBoundObject.#ctor">
      <summary>实例化 <see cref="T:System.ContextBoundObject" /> 类的实例。</summary>
    </member>
    <member name="T:System.ContextMarshalException">
      <summary>在尝试跨上下文边界封送对象失败时引发的异常。</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.ContextMarshalException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.ContextMarshalException" /> 类的新实例。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.ContextMarshalException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ContextMarshalException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.ContextStaticAttribute">
      <summary>指示某静态字段的值对于特定上下文是唯一的。</summary>
    </member>
    <member name="M:System.ContextStaticAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ContextStaticAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Convert">
      <summary>将一个基本数据类型转换为另一个基本数据类型。</summary>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type)">
      <summary>返回一个指定类型的对象，该对象的值等效于指定的对象。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="conversionType">要返回的对象的类型。</param>
      <returns>一个对象，其类型为 <paramref name="conversionType" />，并且其值等效于 <paramref name="value" />。
或
如果 <see langword="Nothing" /> 为 <paramref name="value" />，并且 <see langword="null" /> 不是值类型，则为空引用（在 Visual Basic 中为 <paramref name="conversionType" />）。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。
或
<paramref name="value" /> 是 <see langword="null" /> 并且 <paramref name="conversionType" /> 是一个值类型。
或
<paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不是 <paramref name="conversionType" /> 可识别的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示不在 <paramref name="conversionType" /> 的范围内的数字。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
      <summary>返回指定类型的对象，其值等效于指定对象。 参数提供区域性特定的格式设置信息。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="conversionType">要返回的对象的类型。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个对象，其类型为 <paramref name="conversionType" />，并且其值等效于 <paramref name="value" />。
或
<paramref name="value" />，前提是 <see cref="T:System.Type" /> 的 <paramref name="value" /> 和 <paramref name="conversionType" /> 相等。
或
如果 <see langword="Nothing" /> 为 <paramref name="value" />，并且 <see langword="null" /> 不是值类型，则为空引用（在 Visual Basic 中为 <paramref name="conversionType" />）。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。
或
<paramref name="value" /> 是 <see langword="null" /> 并且 <paramref name="conversionType" /> 是一个值类型。
或
<paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不是 <paramref name="provider" /> 可识别的 <paramref name="conversionType" /> 的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示不在 <paramref name="conversionType" />的范围内的数字。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
      <summary>返回指定类型的对象，其值等效于指定对象。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="typeCode">要返回的对象的类型。</param>
      <returns>一个对象，其基础类型为 <paramref name="typeCode" />，并且其值等效于 <paramref name="value" />。
或
如果 <see langword="Nothing" /> 为 <paramref name="value" /> 并且 <see langword="null" /> 为 <paramref name="typeCode" />、<see cref="F:System.TypeCode.Empty" /> 或 <see cref="F:System.TypeCode.String" />，则为空引用（在 Visual Basic 中为 <see cref="F:System.TypeCode.Object" />）。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。
或
<paramref name="value" /> 为 <see langword="null" />，并且 <paramref name="typeCode" /> 指定值类型。
或
<paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不是 <paramref name="typeCode" /> 类型可识别的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示不在 <paramref name="typeCode" /> 类型的范围内的数字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" /> 无效。</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
      <summary>返回指定类型的对象，其值等效于指定对象。 参数提供区域性特定的格式设置信息。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="typeCode">要返回的对象的类型。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个对象，其基础类型为 <paramref name="typeCode" />，并且其值等效于 <paramref name="value" />。
或
如果 <see langword="Nothing" /> 为 <paramref name="value" /> 并且 <see langword="null" /> 为 <paramref name="typeCode" />、<see cref="F:System.TypeCode.Empty" /> 或 <see cref="F:System.TypeCode.String" />，则为空引用（在 Visual Basic 中为 <see cref="F:System.TypeCode.Object" />）。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。
或
<paramref name="value" /> 为 <see langword="null" />，并且 <paramref name="typeCode" /> 指定值类型。
或
<paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不是 <paramref name="provider" /> 可识别的 <paramref name="typeCode" /> 类型的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示不在 <paramref name="typeCode" /> 类型的范围内的数字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" /> 无效。</exception>
    </member>
    <member name="F:System.Convert.DBNull">
      <summary>一个常数，用于表示没有数据的数据库列；即数据库为空。</summary>
    </member>
    <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
      <summary>将 Unicode 字符数组（它将二进制数据编码为 Base64 数字）的子集转换为等效的 8 位无符号整数数组。 参数指定输入数组的子集以及要转换的元素数。</summary>
      <param name="inArray">Unicode 字符数组。</param>
      <param name="offset">
        <paramref name="inArray" /> 中的位置。</param>
      <param name="length">
        <paramref name="inArray" /> 中要转换的元素数目。</param>
      <returns>等效于 <paramref name="length" /> 中位于 <paramref name="offset" /> 位置的 <paramref name="inArray" /> 元素的 8 位无符号整数数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="length" /> 小于 0。
或
<paramref name="offset" /> 加 <paramref name="length" /> 表示不在 <paramref name="inArray" /> 内的位置。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="inArray" /> 的长度（忽略空格）不是 0 或 4 的倍数。
或
<paramref name="inArray" /> 的格式无效。 <paramref name="inArray" /> 包含非 base 64 字符、两个以上的填充字符或者在填充字符中包含非空格字符。</exception>
    </member>
    <member name="M:System.Convert.FromBase64String(System.String)">
      <summary>将指定的字符串（它将二进制数据编码为 Base64 数字）转换为等效的 8 位无符号整数数组。</summary>
      <param name="s">要转换的字符串。</param>
      <returns>与 <paramref name="s" /> 等效的 8 位无符号整数数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的长度（忽略空格）不是 0 或 4 的倍数。
或
<paramref name="s" /> 的格式无效。 <paramref name="s" /> 包含非 base 64 字符、两个以上的填充字符或者在填充字符中包含非空格字符。</exception>
    </member>
    <member name="M:System.Convert.GetTypeCode(System.Object)">
      <summary>返回指定对象的 <see cref="T:System.TypeCode" />。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <returns>如果 <see cref="T:System.TypeCode" /> 是 <paramref name="value" />，则为 <see cref="F:System.TypeCode.Empty" /> 的 <paramref name="value" /> 或 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Convert.IsDBNull(System.Object)">
      <summary>返回有关指定对象是否为 <see cref="T:System.DBNull" /> 类型的指示。</summary>
      <param name="value">一个对象。</param>
      <returns>如果 <see langword="true" /> 的类型是 <paramref name="value" />，则为 <see cref="T:System.DBNull" /> ；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>将 8 位无符号整数数组的子集转换为用 Base64 数字编码的 Unicode 字符数组的等价子集。 参数将子集指定为输入和输出数组中的偏移量和输入数组中要转换的元素数。</summary>
      <param name="inArray">8 位无符号整数的输入数组。</param>
      <param name="offsetIn">
        <paramref name="inArray" /> 中的位置。</param>
      <param name="length">要转换的 <paramref name="inArray" /> 的元素数。</param>
      <param name="outArray">Unicode 字符的输出数组。</param>
      <param name="offsetOut">
        <paramref name="outArray" /> 中的位置。</param>
      <returns>包含 <paramref name="outArray" /> 中的字节数的 32 位带符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 或 <paramref name="outArray" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />、<paramref name="offsetOut" /> 或 <paramref name="length" /> 为负数。
或
<paramref name="offsetIn" /> 加上 <paramref name="length" /> 大于 <paramref name="inArray" /> 的长度。
或
<paramref name="offsetOut" /> 加上要返回的元素数，大于 <paramref name="outArray" /> 的长度。</exception>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
      <summary>将 8 位无符号整数数组的子集转换为用 Base64 数字编码的 Unicode 字符数组的等价子集。 参数指定作为输入和输出数组中偏移量的子集、输入数组中要转换的元素数以及是否在输出数组中插入分行符。</summary>
      <param name="inArray">8 位无符号整数的输入数组。</param>
      <param name="offsetIn">
        <paramref name="inArray" /> 中的位置。</param>
      <param name="length">要转换的 <paramref name="inArray" /> 的元素数。</param>
      <param name="outArray">Unicode 字符的输出数组。</param>
      <param name="offsetOut">
        <paramref name="outArray" /> 中的位置。</param>
      <param name="options">如果每 76 个字符插入一个分行符，则使用 <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" />，如果不插入分行符，则使用 <see cref="F:System.Base64FormattingOptions.None" />。</param>
      <returns>包含 <paramref name="outArray" /> 中的字节数的 32 位带符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 或 <paramref name="outArray" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />、<paramref name="offsetOut" /> 或 <paramref name="length" /> 为负数。
或
<paramref name="offsetIn" /> 加上 <paramref name="length" /> 大于 <paramref name="inArray" /> 的长度。
或
<paramref name="offsetOut" /> 加上要返回的元素数，大于 <paramref name="outArray" />的长度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Base64FormattingOptions" /> 值。</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[])">
      <summary>将 8 位无符号整数的数组转换为其用 Base64 数字编码的等效字符串表示形式。</summary>
      <param name="inArray">8 位无符号整数数组。</param>
      <returns>
        <paramref name="inArray" /> 的内容的字符串表示形式，以 Base64 表示。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
      <summary>将 8 位无符号整数的数组转换为其用 Base64 数字编码的等效字符串表示形式。 你可以指定是否在返回值中插入换行符。</summary>
      <param name="inArray">8 位无符号整数数组。</param>
      <param name="options">如果每 76 个字符插入一个分行符，则使用 <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" />，如果不插入分行符，则使用 <see cref="F:System.Base64FormattingOptions.None" />。</param>
      <returns>
        <paramref name="inArray" /> 中元素的字符串表示形式，以 Base64 表示。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Base64FormattingOptions" /> 值。</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
      <summary>将 8 位无符号整数数组的子集转换为其用 Base64 数字编码的等效字符串表示形式。 参数将子集指定为输入数组中的偏移量和数组中要转换的元素数。</summary>
      <param name="inArray">8 位无符号整数数组。</param>
      <param name="offset">
        <paramref name="inArray" /> 中的偏移量。</param>
      <param name="length">要转换的 <paramref name="inArray" /> 的元素数。</param>
      <returns>
        <paramref name="length" /> 中从位置 <paramref name="inArray" /> 开始的 <paramref name="offset" /> 个元素的字符串表示形式，以 Base64 表示。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="length" /> 为负数。
或
<paramref name="offset" /> 加上 <paramref name="length" /> 大于 <paramref name="inArray" /> 的长度。</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
      <summary>将 8 位无符号整数数组的子集转换为其用 Base64 数字编码的等效字符串表示形式。 参数指定作为输入数组中偏移量的子集、数组中要转换的元素数以及是否在返回值中插入分行符。</summary>
      <param name="inArray">8 位无符号整数数组。</param>
      <param name="offset">
        <paramref name="inArray" /> 中的偏移量。</param>
      <param name="length">要转换的 <paramref name="inArray" /> 的元素数。</param>
      <param name="options">如果每 76 个字符插入一个分行符，则使用 <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" />，如果不插入分行符，则使用 <see cref="F:System.Base64FormattingOptions.None" />。</param>
      <returns>
        <paramref name="length" /> 中从位置 <paramref name="inArray" /> 开始的 <paramref name="offset" /> 个元素的字符串表示形式，以 Base64 表示。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="length" /> 为负数。
或
<paramref name="offset" /> 加上 <paramref name="length" /> 大于 <paramref name="inArray" /> 的长度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Base64FormattingOptions" /> 值。</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.ReadOnlySpan{System.Byte},System.Base64FormattingOptions)">
      <summary>将指定的只读范围内的 8 位无符号整数转换为其用 base-64 数字编码的等效字符串表示形式。 你可以选择指定是否在返回值中插入换行符。</summary>
      <param name="bytes">8 位无符号整数的只读范围。</param>
      <param name="options">枚举值之一，指定是否在返回值中插入换行符。 默认值为 <see cref="F:System.Base64FormattingOptions.None" />。</param>
      <returns>
        <paramref name="inArray" /> 中元素的字符串表示形式，以 Base64 表示。 如果 <paramref name="bytes" /> 的长度为 0，则返回空字符串。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Base64FormattingOptions" /> 值。</exception>
      <exception cref="T:System.OutOfMemoryException">输出长度大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Boolean)">
      <summary>返回指定的布尔值；不执行任何实际的转换。</summary>
      <param name="value">要返回的布尔值。</param>
      <returns>不经更改即返回 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的布尔值。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Char)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的 Unicode 字符。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.DateTime)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的日期和时间值。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Decimal)">
      <summary>将指定的十进制数字的值转换为等效的布尔值。</summary>
      <param name="value">要转换的数字。</param>
      <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的布尔值。</summary>
      <param name="value">要转换的双精度浮点数。</param>
      <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int16)">
      <summary>将指定的 16 位有符号整数的值转换为等效的布尔值。</summary>
      <param name="value">要转换的 16 位带符号整数。</param>
      <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为等效的布尔值。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为等效的布尔值。</summary>
      <param name="value">要转换的 64 位带符号整数。</param>
      <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object)">
      <summary>将指定对象的值转换为等效的布尔值。</summary>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。</param>
      <returns>
        <see langword="true" /> 或 <see langword="false" />，它将反映通过对 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> 的基础类型调用 <paramref name="value" /> 方法而返回的值。 如果 <paramref name="value" /> 为 <see langword="null" />，则此方法返回 <see langword="false" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 是一个不等于 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />的字符串。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持 <paramref name="value" /> 到 <see cref="T:System.Boolean" /> 的转换。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定对象的值转换为等效的布尔值。</summary>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>
        <see langword="true" /> 或 <see langword="false" />，它将反映通过对 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> 的基础类型调用 <paramref name="value" /> 方法而返回的值。 如果 <paramref name="value" /> 为 <see langword="null" />，则此方法返回 <see langword="false" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 是一个不等于 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />的字符串。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持 <paramref name="value" /> 到 <see cref="T:System.Boolean" /> 的转换。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.SByte)">
      <summary>将指定的 8 位有符号整数的值转换为等效的布尔值。</summary>
      <param name="value">要转换的 8 位带符号整数。</param>
      <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的布尔值。</summary>
      <param name="value">要转换的单精度浮点数。</param>
      <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String)">
      <summary>将逻辑值的指定字符串表示形式转换为其等效的布尔值。</summary>
      <param name="value">包含 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 值的字符串。</param>
      <returns>如果 <see langword="true" /> 等于 <paramref name="value" />，则为 <see cref="F:System.Boolean.TrueString" />；如果 <see langword="false" /> 等于 <paramref name="value" /> 或 <see cref="F:System.Boolean.FalseString" />，则为 <see langword="null" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不等于 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将逻辑值的指定字符串表示形式转换为其等效的布尔值。</summary>
      <param name="value">包含 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 值的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。 忽略此参数。</param>
      <returns>如果 <see langword="true" /> 等于 <paramref name="value" />，则为 <see cref="F:System.Boolean.TrueString" />；如果 <see langword="false" /> 等于 <paramref name="value" /> 或 <see cref="F:System.Boolean.FalseString" />，则为 <see langword="null" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不等于 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的布尔值。</summary>
      <param name="value">要转换的 16 位无符号整数。</param>
      <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的布尔值。</summary>
      <param name="value">要转换的 32 位无符号整数。</param>
      <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的布尔值。</summary>
      <param name="value">要转换的 64 位无符号整数。</param>
      <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Boolean)">
      <summary>将指定的布尔值转换为等效的 8 位无符号整数。</summary>
      <param name="value">要转换的布尔值。</param>
      <returns>如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Byte)">
      <summary>返回指定的 8 位无符号整数；不执行任何实际的转换。</summary>
      <param name="value">要返回的 8 位无符号整数。</param>
      <returns>不经更改即返回 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Char)">
      <summary>将指定 Unicode 字符的值转换为等效的 8 位无符号整数。</summary>
      <param name="value">要转换的 Unicode 字符。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个大于 <see cref="F:System.Byte.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.DateTime)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的日期和时间值。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的 8 位无符号整数。</summary>
      <param name="value">要转换的数字。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" /> 或小于 <see cref="F:System.Byte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的 8 位无符号整数。</summary>
      <param name="value">要转换的双精度浮点数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" /> 或小于 <see cref="F:System.Byte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int16)">
      <summary>将指定的 16 位有符号整数的值转换为等效的 8 位无符号整数。</summary>
      <param name="value">要转换的 16 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为等效的 8 位无符号整数。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为等效的 8 位无符号整数。</summary>
      <param name="value">要转换的 64 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object)">
      <summary>将指定对象的值转换为 8 位无符号整数。</summary>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 未采用 <see cref="T:System.Byte" /> 值的属性格式。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" />。
或
不支持从 <paramref name="value" /> 转换为 <see cref="T:System.Byte" /> 类型。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定对象的值转换为 8 位无符号整数。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 未采用 <see cref="T:System.Byte" /> 值的属性格式。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" />。
或
不支持从 <paramref name="value" /> 转换为 <see cref="T:System.Byte" /> 类型。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.SByte)">
      <summary>将指定的 8 位有符号整数的值转换为等效的 8 位无符号整数。</summary>
      <param name="value">要转换的 8 位有符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的 8 位无符号整数。</summary>
      <param name="value">单精度浮点数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" /> 或小于 <see cref="F:System.Byte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的 8 位无符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 8 位无符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.Int32)">
      <summary>将指定基数的数字的字符串表示形式转换为等效的 8 位无符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。</param>
      <returns>与 <paramref name="value" /> 中数字等效的 8 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
或
<paramref name="value" />（表示非 10 为基数的无符号数字）的前面带一个负号。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含一个字符，该字符不是由 <paramref name="fromBase" /> 指定的基数中的有效数字。 如果 <paramref name="value" /> 中的第一个字符无效，则该异常消息指示没有要转换的数字；否则，该消息指示 <paramref name="value" /> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />（表示 10 为基的无符号数字）的前面带一个负号。
或
<paramref name="value" /> 表示一个小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的 8 位无符号整数。</summary>
      <param name="value">要转换的 16 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的 8 位无符号整数。</summary>
      <param name="value">要转换的 32 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的 8 位无符号整数。</summary>
      <param name="value">要转换的 64 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Boolean)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的布尔值。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为其等效的 Unicode 字符。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Char)">
      <summary>返回指定的 Unicode 字符值；不执行任何实际的转换。</summary>
      <param name="value">要返回的 Unicode 字符。</param>
      <returns>不经更改即返回 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.DateTime)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的日期和时间值。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Decimal)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的十进制数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Double)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的双精度浮点数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int16)">
      <summary>将指定的 16 位有符号整数的值转换为它的等效 Unicode 字符。</summary>
      <param name="value">要转换的 16 位带符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为它的等效 Unicode 字符。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" /> 或大于 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为它的等效 Unicode 字符。</summary>
      <param name="value">要转换的 64 位带符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" /> 或大于 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object)">
      <summary>将指定对象的值转换为 Unicode 字符。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <returns>与 value 等效的 Unicode 字符，或者如果 <see cref="F:System.Char.MinValue" /> 为 <paramref name="value" />，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 是一个 null 字符串。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持 <paramref name="value" /> 到 <see cref="T:System.Char" /> 的转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" /> 或大于 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将指定对象的值转换为其等效的 Unicode 字符。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>与 <paramref name="value" /> 等效的 Unicode 字符，或者如果 <see cref="F:System.Char.MinValue" /> 为 <paramref name="value" />，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 是一个 null 字符串。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持 <paramref name="value" /> 到 <see cref="T:System.Char" /> 的转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" /> 或大于 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.SByte)">
      <summary>将指定的 8 位有符号整数的值转换为它的等效 Unicode 字符。</summary>
      <param name="value">要转换的 8 位带符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Single)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的单精度浮点数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String)">
      <summary>将指定字符串的第一个字符转换为 Unicode 字符。</summary>
      <param name="value">长度为 1 的字符串。</param>
      <returns>与 <paramref name="value" /> 中第一个且仅有的字符等效的 Unicode 字符。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的长度不是 1。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定字符串的第一个字符转换为 Unicode 字符。</summary>
      <param name="value">长度为 1 或 <see langword="null" /> 的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。 忽略此参数。</param>
      <returns>与 <paramref name="value" /> 中第一个且仅有的字符等效的 Unicode 字符。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的长度不是 1。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为其等效的 Unicode 字符。</summary>
      <param name="value">要转换的 16 位无符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为其等效的 Unicode 字符。</summary>
      <param name="value">要转换的 32 位无符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为其等效的 Unicode 字符。</summary>
      <param name="value">要转换的 64 位无符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Boolean)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的布尔值。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Byte)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Char)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的 Unicode 字符。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.DateTime)">
      <summary>返回指定的 <see cref="T:System.DateTime" /> 对象；不执行任何实际的转换。</summary>
      <param name="value">日期和时间值。</param>
      <returns>不经更改即返回 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Decimal)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的数字。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Double)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的双精度浮点值。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int16)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的 16 位带符号整数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int32)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int64)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的 64 位带符号整数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object)">
      <summary>将指定对象的值转换为 <see cref="T:System.DateTime" /> 对象。</summary>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。</param>
      <returns>
        <paramref name="value" /> 的值的日期和时间等效项，如果 <see cref="F:System.DateTime.MinValue" /> 为 <paramref name="value" />，则为 <see langword="null" /> 的日期和时间等效项。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 是无效的日期和时间值。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将指定对象的值转换为 <see cref="T:System.DateTime" /> 对象。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>
        <paramref name="value" /> 的值的日期和时间等效项，如果 <see cref="F:System.DateTime.MinValue" /> 为 <paramref name="value" />，则为 <see langword="null" /> 的日期和时间等效项。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 是无效的日期和时间值。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.SByte)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的 8 位带符号整数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Single)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的单精度浮点值。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String)">
      <summary>将日期和时间的指定字符串表示形式转换为等效的日期和时间值。</summary>
      <param name="value">日期和时间的字符串表示形式。</param>
      <returns>
        <paramref name="value" /> 的值的日期和时间等效项，如果 <see cref="F:System.DateTime.MinValue" /> 为 <paramref name="value" />，则为 <see langword="null" /> 的日期和时间等效项。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是格式正确的日期和时间字符串。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的日期和时间。</summary>
      <param name="value">包含要转换的日期和时间的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>
        <paramref name="value" /> 的值的日期和时间等效项，如果 <see cref="F:System.DateTime.MinValue" /> 为 <paramref name="value" />，则为 <see langword="null" /> 的日期和时间等效项。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是格式正确的日期和时间字符串。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt16)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的 16 位无符号整数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt32)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的 32 位无符号整数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt64)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的 64 位无符号整数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Boolean)">
      <summary>将指定的布尔值转换为等效的十进制数。</summary>
      <param name="value">要转换的布尔值。</param>
      <returns>如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的十进制数。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <returns>与 <paramref name="value" /> 等效的十进制数。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Char)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的 Unicode 字符。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.DateTime)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的日期和时间值。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Decimal)">
      <summary>返回指定的十进制数；不执行任何实际的转换。</summary>
      <param name="value">十进制数。</param>
      <returns>不经更改即返回 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的十进制数。</summary>
      <param name="value">要转换的双精度浮点数。</param>
      <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Decimal.MaxValue" /> 或小于 <see cref="F:System.Decimal.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int16)">
      <summary>将指定的 16 位带符号整数的值转换为等效的十进制数。</summary>
      <param name="value">要转换的 16 位带符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int32)">
      <summary>将指定的 32 位带符号整数的值转换为等效的十进制数。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int64)">
      <summary>将指定的 64 位带符号整数的值转换为等效的十进制数。</summary>
      <param name="value">要转换的 64 位带符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object)">
      <summary>将指定对象的值转换为等效的十进制数。</summary>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。</param>
      <returns>与 <paramref name="value" /> 等效的十进制数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">对于 <see cref="T:System.Decimal" /> 类型，<paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定对象的值转换为等效的十进制数。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>与 <paramref name="value" /> 等效的十进制数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">对于 <see cref="T:System.Decimal" /> 类型，<paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为等效的十进制数。</summary>
      <param name="value">要转换的 8 位带符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的十进制数。</summary>
      <param name="value">要转换的单精度浮点数。</param>
      <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Decimal.MaxValue" /> 或小于 <see cref="F:System.Decimal.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的十进制数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <returns>与 <paramref name="value" /> 中数字等效的十进制数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个具有有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的十进制数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>与 <paramref name="value" /> 中数字等效的十进制数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个具有有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的十进制数。</summary>
      <param name="value">要转换的 16 位无符号整数。</param>
      <returns>与 <paramref name="value" /> 等效的十进制数。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的十进制数。</summary>
      <param name="value">要转换的 32 位无符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的十进制数。</summary>
      <param name="value">要转换的 64 位无符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Boolean)">
      <summary>将指定的布尔值转换为等效的双精度浮点数。</summary>
      <param name="value">要转换的布尔值。</param>
      <returns>如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的双精度浮点数。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <returns>与 <paramref name="value" /> 等效的双精度浮点数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Char)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的 Unicode 字符。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.DateTime)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的日期和时间值。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的双精度浮点数。</summary>
      <param name="value">要转换的十进制数。</param>
      <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Double)">
      <summary>返回指定的双精度浮点数；不执行任何实际的转换。</summary>
      <param name="value">要返回的双精度浮点数。</param>
      <returns>不经更改即返回 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int16)">
      <summary>将指定的 16 位带符号整数的值转换为等效的双精度浮点数。</summary>
      <param name="value">要转换的 16 位带符号整数。</param>
      <returns>与 <paramref name="value" /> 等效的双精度浮点数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int32)">
      <summary>将指定的 32 位带符号整数的值转换为等效的双精度浮点数。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int64)">
      <summary>将指定的 64 位带符号整数的值转换为等效的双精度浮点数。</summary>
      <param name="value">要转换的 64 位带符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object)">
      <summary>将指定对象的值转换为双精度浮点数。</summary>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。</param>
      <returns>与 <paramref name="value" /> 等效的双精度浮点数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">对于 <see cref="T:System.Double" /> 类型，<paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定对象的值转换为双精度浮点数。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>与 <paramref name="value" /> 等效的双精度浮点数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">对于 <see cref="T:System.Double" /> 类型，<paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为等效的双精度浮点数。</summary>
      <param name="value">要转换的 8 位带符号整数。</param>
      <returns>与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的双精度浮点数。</summary>
      <param name="value">单精度浮点数。</param>
      <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的双精度浮点数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <returns>与 <paramref name="value" /> 中数字等效的双精度浮点数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个具有有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的双精度浮点数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>与 <paramref name="value" /> 中数字等效的双精度浮点数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个具有有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的双精度浮点数。</summary>
      <param name="value">要转换的 16 位无符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的双精度浮点数。</summary>
      <param name="value">要转换的 32 位无符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的双精度浮点数。</summary>
      <param name="value">要转换的 64 位无符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Boolean)">
      <summary>将指定的布尔值转换为等效的 16 位带符号整数。</summary>
      <param name="value">要转换的布尔值。</param>
      <returns>如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的 16 位有符号整数。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Char)">
      <summary>将指定的 Unicode 字符的值转换为等效的 16 位有符号整数。</summary>
      <param name="value">要转换的 Unicode 字符。</param>
      <returns>一个与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.DateTime)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的日期和时间值。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的 16 位带符号整数。</summary>
      <param name="value">要转换的十进制数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位带符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的 16 位带符号整数。</summary>
      <param name="value">要转换的双精度浮点数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位带符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int16)">
      <summary>返回指定的 16 位有符号整数；不执行实际的转换。</summary>
      <param name="value">要转换的 16 位无符号整数。</param>
      <returns>不经更改即返回 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为等效的 16 位有符号整数。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为等效的 16 位有符号整数。</summary>
      <param name="value">要转换的 64 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object)">
      <summary>将指定对象的值转换为 16 位带符号整数。</summary>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。</param>
      <returns>一个与 <paramref name="value" /> 等效的 16 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">对于 <see cref="T:System.Int16" /> 类型，<paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将指定对象的值转换为 16 位带符号整数。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个与 <paramref name="value" /> 等效的 16 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">对于 <see cref="T:System.Int16" /> 类型，<paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为等效的 16 位带符号整数。</summary>
      <param name="value">要转换的 8 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的 16 位带符号整数。</summary>
      <param name="value">要转换的单精度浮点数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位带符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的 16 位带符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 16 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 16 位带符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 16 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
      <summary>将指定基数的数字的字符串表示形式转换为等效的 16 位有符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 16 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
或
<paramref name="value" />（表示基数不为 10 的符号数字）的前缀为负号。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含一个字符，该字符不是由 <paramref name="fromBase" /> 指定的基数中的有效数字。 如果 <paramref name="value" /> 中的第一个字符无效，则该异常消息指示没有要转换的数字；否则，该消息指示 <paramref name="value" /> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />（表示基数不为 10 的符号数字）的前缀为负号。
或
<paramref name="value" /> 表示一个小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的 16 位有符号整数。</summary>
      <param name="value">要转换的 16 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的 16 位有符号整数。</summary>
      <param name="value">要转换的 32 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的 16 位有符号整数。</summary>
      <param name="value">要转换的 64 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Boolean)">
      <summary>将指定的布尔值转换为等效的 32 位带符号整数。</summary>
      <param name="value">要转换的布尔值。</param>
      <returns>如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的 32 位有符号整数。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Char)">
      <summary>将指定的 Unicode 字符的值转换为等效的 32 位有符号整数。</summary>
      <param name="value">要转换的 Unicode 字符。</param>
      <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.DateTime)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的日期和时间值。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的 32 位带符号整数。</summary>
      <param name="value">要转换的十进制数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位有符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" /> 或小于 <see cref="F:System.Int32.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的 32 位带符号整数。</summary>
      <param name="value">要转换的双精度浮点数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位有符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" /> 或小于 <see cref="F:System.Int32.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int16)">
      <summary>将指定的 16 位有符号整数的值转换为等效的 32 位有符号整数。</summary>
      <param name="value">要转换的 16 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int32)">
      <summary>返回指定的 32 位有符号整数；不执行实际的转换。</summary>
      <param name="value">要转换的 32 位无符号整数。</param>
      <returns>不经更改即返回 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为等效的 32 位有符号整数。</summary>
      <param name="value">要转换的 64 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" /> 或小于 <see cref="F:System.Int32.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object)">
      <summary>将指定对象的值转换为 32 位带符号整数。</summary>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。</param>
      <returns>一个等效于 <paramref name="value" /> 的 32 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将指定对象的值转换为 32 位带符号整数。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为等效的 32 位带符号整数。</summary>
      <param name="value">要转换的 8 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的 32 位带符号整数。</summary>
      <param name="value">要转换的单精度浮点数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位有符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" /> 或小于 <see cref="F:System.Int32.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的 32 位带符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 32 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 32 位带符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 32 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
      <summary>将指定基数的数字的字符串表示形式转换为等效的 32 位有符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 32 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
或
<paramref name="value" />（表示基数不为 10 的符号数字）的前缀为负号。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含一个字符，该字符不是由 <paramref name="fromBase" /> 指定的基数中的有效数字。 如果 <paramref name="value" /> 中的第一个字符无效，则该异常消息指示没有要转换的数字；否则，该消息指示 <paramref name="value" /> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />（表示基数不为 10 的符号数字）的前缀为负号。
或
<paramref name="value" /> 表示一个小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的 32 位有符号整数。</summary>
      <param name="value">要转换的 16 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的 32 位有符号整数。</summary>
      <param name="value">要转换的 32 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的 32 位有符号整数。</summary>
      <param name="value">要转换的 64 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Boolean)">
      <summary>将指定的布尔值转换为等效的 64 位带符号整数。</summary>
      <param name="value">要转换的布尔值。</param>
      <returns>如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的 64 位有符号整数。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Char)">
      <summary>将指定的 Unicode 字符的值转换为等效的 64 位有符号整数。</summary>
      <param name="value">要转换的 Unicode 字符。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.DateTime)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的日期和时间值。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的 64 位带符号整数。</summary>
      <param name="value">要转换的十进制数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位有符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int64.MaxValue" /> 或小于 <see cref="F:System.Int64.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的 64 位带符号整数。</summary>
      <param name="value">要转换的双精度浮点数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位有符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int64.MaxValue" /> 或小于 <see cref="F:System.Int64.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int16)">
      <summary>将指定的 16 位有符号整数的值转换为等效的 64 位有符号整数。</summary>
      <param name="value">要转换的 16 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为等效的 64 位有符号整数。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int64)">
      <summary>返回指定的 64 位有符号整数；不执行实际的转换。</summary>
      <param name="value">64 位带符号整数。</param>
      <returns>不经更改即返回 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object)">
      <summary>将指定对象的值转换为 64 位带符号整数。</summary>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将指定对象的值转换为 64 位带符号整数。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为等效的 64 位带符号整数。</summary>
      <param name="value">要转换的 8 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的 64 位带符号整数。</summary>
      <param name="value">要转换的单精度浮点数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位有符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int64.MaxValue" /> 或小于 <see cref="F:System.Int64.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的 64 位带符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 64 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 64 位带符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 64 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
      <summary>将指定基数的数字的字符串表示形式转换为等效的 64 位有符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 64 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
或
<paramref name="value" />（表示基数不为 10 的符号数字）的前缀为负号。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含一个字符，该字符不是由 <paramref name="fromBase" /> 指定的基数中的有效数字。 如果 <paramref name="value" /> 中的第一个字符无效，则该异常消息指示没有要转换的数字；否则，该消息指示 <paramref name="value" /> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />（表示基数不为 10 的符号数字）的前缀为负号。
或
<paramref name="value" /> 表示一个小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的 64 位有符号整数。</summary>
      <param name="value">要转换的 16 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的 64 位有符号整数。</summary>
      <param name="value">要转换的 32 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的 64 位有符号整数。</summary>
      <param name="value">要转换的 64 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Boolean)">
      <summary>将指定的布尔值转换为等效的 8 位带符号整数。</summary>
      <param name="value">要转换的布尔值。</param>
      <returns>如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。</returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的 8 位有符号整数。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Char)">
      <summary>将指定的 Unicode 字符的值转换为等效的 8 位有符号整数。</summary>
      <param name="value">要转换的 Unicode 字符。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.DateTime)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的日期和时间值。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的 8 位带符号整数。</summary>
      <param name="value">要转换的十进制数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位有符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的 8 位带符号整数。</summary>
      <param name="value">要转换的双精度浮点数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位有符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int16)">
      <summary>将指定的 16 位带符号整数的值转换为等效的 8 位带符号整数。</summary>
      <param name="value">要转换的 16 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为等效的 8 位有符号整数。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为等效的 8 位有符号整数。</summary>
      <param name="value">要转换的 64 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object)">
      <summary>将指定对象的值转换为 8 位带符号整数。</summary>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将指定对象的值转换为 8 位带符号整数。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.SByte)">
      <summary>返回指定的 8 位有符号整数；不执行实际的转换。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <returns>不经更改即返回 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的 8 位带符号整数。</summary>
      <param name="value">要转换的单精度浮点数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位有符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的 8 位带符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <returns>与 <paramref name="value" /> 中数字等效的 8 位带符号整数，如果值为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 8 位带符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
      <summary>将指定基数的数字的字符串表示形式转换为等效的 8 位有符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。</param>
      <returns>与 <paramref name="value" /> 中数字等效的 8 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
或
<paramref name="value" />（表示基数不为 10 的符号数字）的前缀为负号。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含一个字符，该字符不是由 <paramref name="fromBase" /> 指定的基数中的有效数字。 如果 <paramref name="value" /> 中的第一个字符无效，则该异常消息指示没有要转换的数字；否则，该消息指示 <paramref name="value" /> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />（表示基数不为 10 的符号数字）的前缀为负号。
或
<paramref name="value" /> 表示一个小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的 8 位有符号整数。</summary>
      <param name="value">要转换的 16 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的 8 位有符号整数。</summary>
      <param name="value">要转换的 32 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的 8 位有符号整数。</summary>
      <param name="value">要转换的 64 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Boolean)">
      <summary>将指定的布尔值转换为等效的单精度浮点数。</summary>
      <param name="value">要转换的布尔值。</param>
      <returns>如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的单精度浮点数。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Char)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的 Unicode 字符。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.DateTime)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的日期和时间值。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的单精度浮点数。</summary>
      <param name="value">要转换的十进制数。</param>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。
使用“舍入为最接近的数字”规则对 <paramref name="value" /> 进行舍入。 例如，当舍入为两位小数时，值 2.345 变成 2.34，而值 2.355 变成 2.36。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的单精度浮点数。</summary>
      <param name="value">要转换的双精度浮点数。</param>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。
使用“舍入为最接近的数字”规则对 <paramref name="value" /> 进行舍入。 例如，当舍入为两位小数时，值 2.345 变成 2.34，而值 2.355 变成 2.36。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int16)">
      <summary>将指定的 16 位带符号整数的值转换为等效的单精度浮点数。</summary>
      <param name="value">要转换的 16 位带符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int32)">
      <summary>将指定的 32 位带符号整数的值转换为等效的单精度浮点数。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int64)">
      <summary>将指定的 64 位带符号整数的值转换为等效的单精度浮点数。</summary>
      <param name="value">要转换的 64 位带符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object)">
      <summary>将指定对象的值转换为单精度浮点数。</summary>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。</param>
      <returns>与 <paramref name="value" /> 等效的单精度浮点数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定对象的值转换为单精度浮点数。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>与 <paramref name="value" /> 等效的单精度浮点数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为等效的单精度浮点数。</summary>
      <param name="value">要转换的 8 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Single)">
      <summary>返回指定的单精度浮点数；不执行任何实际的转换。</summary>
      <param name="value">要返回的单精度浮点数。</param>
      <returns>不经更改即返回 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的单精度浮点数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <returns>与 <paramref name="value" /> 中数字等效的单精度浮点数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个具有有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的单精度浮点数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>与 <paramref name="value" /> 中数字等效的单精度浮点数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个具有有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的单精度浮点数。</summary>
      <param name="value">要转换的 16 位无符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的单精度浮点数。</summary>
      <param name="value">要转换的 32 位无符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的单精度浮点数。</summary>
      <param name="value">要转换的 64 位无符号整数。</param>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean)">
      <summary>将指定的布尔值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的布尔值。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
      <summary>将指定的布尔值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的布尔值。</param>
      <param name="provider">一个对象的实例。 忽略此参数。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的 8 位无符号整数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
      <summary>将 8 位无符号整数的值转换为其等效的指定基数的字符串表示形式。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <param name="toBase">返回值的基数，必须是 2、8、10 或 16。</param>
      <returns>以 <paramref name="value" /> 为基数的 <paramref name="toBase" /> 的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Char)">
      <summary>将指定的 Unicode 字符的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 Unicode 字符。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将指定的 Unicode 字符的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 Unicode 字符。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。 忽略此参数。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime)">
      <summary>将指定的 <see cref="T:System.DateTime" /> 的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的日期和时间值。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将指定的 <see cref="T:System.DateTime" /> 的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的日期和时间值。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal)">
      <summary>将指定的十进制数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的十进制数。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将指定的十进制数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的十进制数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double)">
      <summary>将指定的双精度浮点数的值转换其等效的字符串表示形式。</summary>
      <param name="value">要转换的双精度浮点数。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
      <summary>将指定的双精度浮点数的值转换其等效的字符串表示形式。</summary>
      <param name="value">要转换的双精度浮点数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16)">
      <summary>将指定的 16 位带符号整数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 16 位带符号整数。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的 16 位带符号整数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 16 位带符号整数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
      <summary>将 16 位带符号整数的值转换为其指定基的等效字符串表示形式。</summary>
      <param name="value">要转换的 16 位带符号整数。</param>
      <param name="toBase">返回值的基数，必须是 2、8、10 或 16。</param>
      <returns>以 <paramref name="value" /> 为基数的 <paramref name="toBase" /> 的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int32)">
      <summary>将指定的 32 位带符号整数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的 32 位带符号整数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
      <summary>将 32 位带符号整数的值转换为其指定基的等效字符串表示形式。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <param name="toBase">返回值的基数，必须是 2、8、10 或 16。</param>
      <returns>以 <paramref name="value" /> 为基数的 <paramref name="toBase" /> 的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int64)">
      <summary>将指定的 64 位带符号整数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 64 位带符号整数。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的 64 位带符号整数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 64 位带符号整数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
      <summary>将 64 位带符号整数的值转换为其指定基的等效字符串表示形式。</summary>
      <param name="value">要转换的 64 位带符号整数。</param>
      <param name="toBase">返回值的基数，必须是 2、8、10 或 16。</param>
      <returns>以 <paramref name="value" /> 为基数的 <paramref name="toBase" /> 的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Object)">
      <summary>将指定对象的值转换为其等效的字符串表示形式。</summary>
      <param name="value">一个对象，用于提供要转换的值，或 <see langword="null" />。</param>
      <returns>
        <paramref name="value" /> 的字符串表现形式；如果 <paramref name="value" /> 为 <see langword="null" />，则为 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将指定对象的值转换为其等效的字符串表示形式。</summary>
      <param name="value">一个对象，用于提供要转换的值，或 <see langword="null" />。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式；如果 <see cref="F:System.String.Empty" /> 是一个值为 <paramref name="value" /> 的对象，则为 <see langword="null" />。 如果 <paramref name="value" /> 为 <see langword="null" />，则此方法返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 8 位带符号整数。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的 8 位带符号整数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 8 位带符号整数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single)">
      <summary>将指定的单精度浮点数的值转换其等效的字符串表示形式。</summary>
      <param name="value">要转换的单精度浮点数。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的单精度浮点数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的单精度浮点数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.String)">
      <summary>返回指定的字符串实例；不执行任何实际转换。</summary>
      <param name="value">要返回的字符串。</param>
      <returns>不经更改即返回 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.String,System.IFormatProvider)">
      <summary>返回指定的字符串实例；不执行任何实际转换。</summary>
      <param name="value">要返回的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。 忽略此参数。</param>
      <returns>不经更改即返回 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 16 位无符号整数。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的 16 位无符号整数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 16 位无符号整数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 32 位无符号整数。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的 32 位无符号整数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 32 位无符号整数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 64 位无符号整数。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的 64 位无符号整数的值转换为其等效的字符串表示形式。</summary>
      <param name="value">要转换的 64 位无符号整数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Boolean)">
      <summary>将指定的布尔值转换为等效的 16 位无符号整数。</summary>
      <param name="value">要转换的布尔值。</param>
      <returns>如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的 16 位无符号整数。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Char)">
      <summary>将指定 Unicode 字符的值转换为等效的 16 位无符号整数。</summary>
      <param name="value">要转换的 Unicode 字符。</param>
      <returns>与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.DateTime)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的日期和时间值。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的 16 位无符号整数。</summary>
      <param name="value">要转换的十进制数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的 16 位无符号整数。</summary>
      <param name="value">要转换的双精度浮点数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int16)">
      <summary>将指定的 16 位有符号整数的值转换为等效的 16 位无符号整数。</summary>
      <param name="value">要转换的 16 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为等效的 16 位无符号整数。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为等效的 16 位无符号整数。</summary>
      <param name="value">要转换的 64 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object)">
      <summary>将指定对象的值转换为 16 位无符号整数。</summary>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。</param>
      <returns>一个与 <paramref name="value" /> 等效的 16 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将指定对象的值转换为 16 位无符号整数。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个与 <paramref name="value" /> 等效的 16 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.SByte)">
      <summary>将指定的 8 位有符号整数的值转换为等效的 16 位无符号整数。</summary>
      <param name="value">要转换的 8 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的 16 位无符号整数。</summary>
      <param name="value">要转换的单精度浮点数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的 16 位无符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 16 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 16 位无符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 16 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
      <summary>将指定基数的数字的字符串表示形式转换为等效的 16 位无符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 16 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
或
<paramref name="value" />（表示非 10 为基数的无符号数字）的前面带一个负号。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含一个字符，该字符不是由 <paramref name="fromBase" /> 指定的基数中的有效数字。 如果 <paramref name="value" /> 中的第一个字符无效，则该异常消息指示没有要转换的数字；否则，该消息指示 <paramref name="value" /> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />（表示非 10 为基数的无符号数字）的前面带一个负号。
或
<paramref name="value" /> 表示一个小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt16)">
      <summary>返回指定的 16 位无符号整数；不执行任何实际的转换。</summary>
      <param name="value">要返回的 16 位无符号整数。</param>
      <returns>不经更改即返回 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的 16 位无符号整数。</summary>
      <param name="value">要转换的 32 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的 16 位无符号整数。</summary>
      <param name="value">要转换的 64 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Boolean)">
      <summary>将指定的布尔值转换为等效的 32 位无符号整数。</summary>
      <param name="value">要转换的布尔值。</param>
      <returns>如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的 32 位无符号整数。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Char)">
      <summary>将指定 Unicode 字符的值转换为等效的 32 位无符号整数。</summary>
      <param name="value">要转换的 Unicode 字符。</param>
      <returns>一个与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.DateTime)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的日期和时间值。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的 32 位无符号整数。</summary>
      <param name="value">要转换的十进制数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的 32 位无符号整数。</summary>
      <param name="value">要转换的双精度浮点数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int16)">
      <summary>将指定的 16 位有符号整数的值转换为等效的 32 位无符号整数。</summary>
      <param name="value">要转换的 16 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为等效的 32 位无符号整数。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为等效的 32 位无符号整数。</summary>
      <param name="value">要转换的 64 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object)">
      <summary>将指定对象的值转换为 32 位无符号整数。</summary>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。</param>
      <returns>一个等效于 <paramref name="value" /> 的 32 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将指定对象的值转换为 32 位无符号整数。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个与 <paramref name="value" /> 等效的 32 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.SByte)">
      <summary>将指定的 8 位有符号整数的值转换为等效的 32 位无符号整数。</summary>
      <param name="value">要转换的 8 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的 32 位无符号整数。</summary>
      <param name="value">要转换的单精度浮点数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的 32 位无符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 32 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 32 位无符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 32 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
      <summary>将指定基数的数字的字符串表示形式转换为等效的 32 位无符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 32 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
或
<paramref name="value" />（表示非 10 为基数的无符号数字）的前面带一个负号。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含一个字符，该字符不是由 <paramref name="fromBase" /> 指定的基数中的有效数字。 如果 <paramref name="value" /> 中的第一个字符无效，则该异常消息指示没有要转换的数字；否则，该消息指示 <paramref name="value" /> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />（表示非 10 为基数的无符号数字）的前面带一个负号。
或
<paramref name="value" /> 表示一个小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的 32 位无符号整数。</summary>
      <param name="value">要转换的 16 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt32)">
      <summary>返回指定的 32 位无符号整数；不执行任何实际的转换。</summary>
      <param name="value">要返回的 32 位无符号整数。</param>
      <returns>不经更改即返回 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的 32 位无符号整数。</summary>
      <param name="value">要转换的 64 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Boolean)">
      <summary>将指定的布尔值转换为等效的 64 位无符号整数。</summary>
      <param name="value">要转换的布尔值。</param>
      <returns>如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的 64 位无符号整数。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Char)">
      <summary>将指定 Unicode 字符的值转换为等效的 64 位无符号整数。</summary>
      <param name="value">要转换的 Unicode 字符。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.DateTime)">
      <summary>调用此方法始终引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要转换的日期和时间值。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的 64 位无符号整数。</summary>
      <param name="value">要转换的十进制数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的 64 位无符号整数。</summary>
      <param name="value">要转换的双精度浮点数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int16)">
      <summary>将指定的 16 位有符号整数的值转换为等效的 64 位无符号整数。</summary>
      <param name="value">要转换的 16 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为等效的 64 位无符号整数。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为等效的 64 位无符号整数。</summary>
      <param name="value">要转换的 64 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object)">
      <summary>将指定对象的值转换为 64 位无符号整数。</summary>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将指定对象的值转换为 64 位无符号整数。</summary>
      <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
或
不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.SByte)">
      <summary>将指定的 8 位有符号整数的值转换为等效的 64 位无符号整数。</summary>
      <param name="value">要转换的 8 位带符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的 64 位无符号整数。</summary>
      <param name="value">要转换的单精度浮点数。</param>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的 64 位无符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 64 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 64 位无符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 64 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
      <summary>将指定基数的数字的字符串表示形式转换为等效的 64 位无符号整数。</summary>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。</param>
      <returns>一个与 <paramref name="value" /> 中数字等效的 64 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
或
<paramref name="value" />（表示非 10 为基数的无符号数字）的前面带一个负号。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含一个字符，该字符不是由 <paramref name="fromBase" /> 指定的基数中的有效数字。 如果 <paramref name="value" /> 中的第一个字符无效，则该异常消息指示没有要转换的数字；否则，该消息指示 <paramref name="value" /> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />（表示非 10 为基数的无符号数字）的前面带一个负号。
或
<paramref name="value" /> 表示一个小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的 64 位无符号整数。</summary>
      <param name="value">要转换的 16 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的 64 位无符号整数。</summary>
      <param name="value">要转换的 32 位无符号整数。</param>
      <returns>一个与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt64)">
      <summary>返回指定的 64 位无符号整数；不执行任何实际的转换。</summary>
      <param name="value">要返回的 64 位无符号整数。</param>
      <returns>不经更改即返回 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Convert.TryFromBase64Chars(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)">
      <summary>尝试将包含用 base-64 数字编码的字符串表示形式的指定范围转换为 8 位无符号整数的范围。</summary>
      <param name="chars">包含用 base-64 数字编码的字符串表示形式的范围。</param>
      <param name="bytes">如果此方法返回 <see langword="true" />，则为转换后的 8 位无符号整数。 此方法返回 <see langword="false" /> 时，范围将保持不变，或包含 <paramref name="chars" /> 的不完整转换，直到最后一个有效字符。</param>
      <param name="bytesWritten">此方法返回时，写入到 <paramref name="bytes" /> 的字节数。</param>
      <returns>如果转换成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.TryFromBase64String(System.String,System.Span{System.Byte},System.Int32@)">
      <summary>尝试将用 base-64 数字编码的指定字符串表示形式转换为 8 位无符号整数的范围。</summary>
      <param name="s">用 base-64 数字编码的字符串表示形式。</param>
      <param name="bytes">如果此方法返回 <see langword="true" />，则为转换后的 8 位无符号整数。 此方法返回 <see langword="false" /> 时，范围将保持不变，或包含 <paramref name="s" /> 的不完整转换，直到最后一个有效字符。</param>
      <param name="bytesWritten">此方法返回时，写入到 <paramref name="bytes" /> 的字节数。</param>
      <returns>如果转换成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Convert.TryToBase64Chars(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@,System.Base64FormattingOptions)">
      <summary>尝试将指定的只读范围内的 8 位无符号整数转换为其用 base-64 数字编码的等效字符串表示形式。 你可以选择指定是否在返回值中插入换行符。</summary>
      <param name="bytes">8 位无符号整数的只读范围。</param>
      <param name="chars">如果此方法返回 <see langword="true" />，则为包含 <paramref name="bytes" /> 中元素的 Base64 字符串表示形式的范围。 如果 <paramref name="bytes" /> 的长度为 0，或者如果此方法返回 <paramref name="false" />，则不会向此参数写入任何内容。</param>
      <param name="charsWritten">此方法返回时，为写入 <paramref name="chars" /> 的字符总数。</param>
      <param name="options">枚举值之一，指定是否在返回值中插入换行符。 默认值为 <see cref="F:System.Base64FormattingOptions.None" />。</param>
      <returns>如果转换成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Base64FormattingOptions" /> 值。</exception>
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>提供一组方法和属性，可用于准确地测量运行时间。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Stopwatch" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>获取当前实例测量得出的总运行时间。</summary>
      <returns>一个只读的 <see cref="T:System.TimeSpan" />，用于表示当前实例测量得出的总运行时间。</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>获取当前实例测量得出的总运行时间（以毫秒为单位）。</summary>
      <returns>一个只读长整型，表示当前实例测量得出的总毫秒数。</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>获取当前实例测量得出的总运行时间（用计时器计时周期表示）。</summary>
      <returns>一个只读长整型，表示当前实例测量得出的计时器计时周期的总数。</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>获取以每秒计时周期数表示的计时器频率。 此字段为只读。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>获取计时器机制中的当前最小时间单位数。</summary>
      <returns>一个长整型，表示基础计时器机制中的计时周期计数器值。</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>指示计时器是否基于高分辨率性能计数器。 此字段为只读。</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>获取一个指示 <see cref="T:System.Diagnostics.Stopwatch" /> 计时器是否在运行的值。</summary>
      <returns>如果 <see cref="T:System.Diagnostics.Stopwatch" /> 实例当前正在运行，并且在对某个时间间隔的运行时间进行测量，则该值为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>停止时间间隔测量，并将运行时间重置为零。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Restart">
      <summary>停止时间间隔测量，将运行时间重置为零，然后开始测量运行时间。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>开始或继续测量某个时间间隔的运行时间。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>对新的 <see cref="T:System.Diagnostics.Stopwatch" /> 实例进行初始化，将运行时间属性设置为零，然后开始测量运行时间。</summary>
      <returns>刚刚开始测量运行时间的 <see cref="T:System.Diagnostics.Stopwatch" />。</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>停止测量某个时间间隔的运行时间。</summary>
    </member>
    <member name="T:System.Environment">
      <summary>提供有关当前环境和平台的信息以及操作它们的方法。 此类不能被继承。</summary>
    </member>
    <member name="P:System.Environment.CommandLine">
      <summary>获取该进程的命令行。</summary>
      <returns>包含命令行参数的字符串。</returns>
    </member>
    <member name="P:System.Environment.CurrentDirectory">
      <summary>获取或设置当前工作目录的完全限定路径。</summary>
      <returns>包含目录路径的字符串。</returns>
      <exception cref="T:System.ArgumentException">已尝试设置为空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">已尝试设置为 <see langword="null." /></exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">已尝试设置一个找不到的本地路径。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有相应的权限。</exception>
    </member>
    <member name="P:System.Environment.CurrentManagedThreadId">
      <summary>获取当前托管线程的唯一标识符。</summary>
      <returns>一个整数，表示此托管线程的唯一标识符。</returns>
    </member>
    <member name="M:System.Environment.Exit(System.Int32)">
      <summary>终止此进程，并将退出代码返回到操作系统。</summary>
      <param name="exitCode">返回到操作系统的退出代码。 使用 0（零）指示处理已成功完成。</param>
      <exception cref="T:System.Security.SecurityException">调用方没有足够的安全权限来执行此函数。</exception>
    </member>
    <member name="P:System.Environment.ExitCode">
      <summary>获取或设置进程的退出代码。</summary>
      <returns>包含退出代码的 32 位有符号整数。 默认值为 0（零），这指示已成功完成处理。</returns>
    </member>
    <member name="M:System.Environment.ExpandEnvironmentVariables(System.String)">
      <summary>将嵌入到指定字符串中的每个环境变量的名称替换为该变量的值的等效字符串，然后返回结果字符串。</summary>
      <param name="name">包含零个或多个环境变量名的字符串。 每个环境变量都用百分号 (%) 引起来。</param>
      <returns>一个字符串，其中的每个环境变量均被替换为该变量的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Environment.FailFast(System.String)">
      <summary>向 Windows 的应用程序事件日志写入消息后立即终止进程，然后在发往 Microsoft 的错误报告中加入该消息。</summary>
      <param name="message">一条解释进程终止原因的消息；如果未提供解释，则为 <see langword="null" />。</param>
    </member>
    <member name="M:System.Environment.FailFast(System.String,System.Exception)">
      <summary>向 Windows 的应用程序事件日志写入消息后立即终止进程，然后在发往 Microsoft 的错误报告中加入该消息和异常信息。</summary>
      <param name="message">一条解释进程终止原因的消息；如果未提供解释，则为 <see langword="null" />。</param>
      <param name="exception">一个异常，表示导致终止的错误。 通常这是 <see langword="catch" /> 块中的异常。</param>
    </member>
    <member name="M:System.Environment.GetCommandLineArgs">
      <summary>返回包含当前进程的命令行自变量的字符串数组。</summary>
      <returns>字符串数组，其中的每个元素都包含一个命令行自变量。 第一个元素是可执行文件名，后面的零个或多个元素包含其余的命令行自变量。</returns>
      <exception cref="T:System.NotSupportedException">系统不支持命令行参数。</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String)">
      <summary>从当前进程检索环境变量的值。</summary>
      <param name="variable">环境变量名。</param>
      <returns>
        <paramref name="variable" /> 指定的环境变量的值；或者如果找不到环境变量，则返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有执行此操作所需的权限。</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
      <summary>从当前进程或者从当前用户或本地计算机的 Windows 操作系统注册表项检索环境变量的值。</summary>
      <param name="variable">环境变量名。</param>
      <param name="target">
        <see cref="T:System.EnvironmentVariableTarget" /> 值之一。 在基于 Unix 的系统上运行的 .NET Core 仅支持 <see cref="F:System.EnvironmentVariableTarget.Process" />。</param>
      <returns>
        <paramref name="variable" /> 和 <paramref name="target" /> 参数指定的环境变量的值；或者如果找不到环境变量，则返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是有效的 <see cref="T:System.EnvironmentVariableTarget" /> 值。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有执行此操作所需的权限。</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables">
      <summary>从当前进程检索所有环境变量名及其值。</summary>
      <returns>包含所有环境变量名及其值的字典；如果找不到任何环境变量，则返回空字典。</returns>
      <exception cref="T:System.Security.SecurityException">调用方没有执行此操作所需的权限。</exception>
      <exception cref="T:System.OutOfMemoryException">缓冲区内存不足。</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
      <summary>从当前进程或者从当前用户或本地计算机的 Windows 操作系统注册表项检索所有环境变量名及其值。</summary>
      <param name="target">
        <see cref="T:System.EnvironmentVariableTarget" /> 值之一。 在基于 Unix 的系统上运行的 .NET Core 仅支持 <see cref="F:System.EnvironmentVariableTarget.Process" />。</param>
      <returns>包含 <paramref name="target" /> 参数所指定的源中所有环境变量名及其值的字典；否则，如果找不到任何环境变量，则返回空字典。</returns>
      <exception cref="T:System.Security.SecurityException">调用方不具有针对 <paramref name="target" /> 的指定值执行此操作的所需权限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 包含非法值。</exception>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
      <summary>获取由指定枚举标识的系统特殊文件夹的路径。</summary>
      <param name="folder">标识系统特殊文件夹的枚举值之一。</param>
      <returns>如果指定的系统特殊文件夹实际存在于您的计算机上，则为到该文件夹的路径；否则为空字符串 ("")。
如果系统未创建文件夹、已删除现有文件夹，或者文件夹是不对应物理路径的虚拟目录（例如"我的电脑"），则该文件夹不会实际存在。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="folder" /> 不是 <see cref="T:System.Environment.SpecialFolder" /> 的成员。</exception>
      <exception cref="T:System.PlatformNotSupportedException">不支持当前平台。</exception>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
      <summary>获取由指定枚举标识的系统特殊文件夹的路径，并使用用于访问特殊文件夹的指定选项。</summary>
      <param name="folder">标识系统特殊文件夹的枚举值之一。</param>
      <param name="option">指定用于访问特殊文件夹的选项的枚举值之一。</param>
      <returns>如果指定的系统特殊文件夹实际存在于您的计算机上，则为到该文件夹的路径；否则为空字符串 ("")。
如果系统未创建文件夹、已删除现有文件夹，或者文件夹是不对应物理路径的虚拟目录（例如"我的电脑"），则该文件夹不会实际存在。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="folder" /> 不是 <see cref="T:System.Environment.SpecialFolder" /> 的成员。
或
<paramref name="options" /> 不是 <see cref="T:System.Environment.SpecialFolderOption" /> 的成员。</exception>
      <exception cref="T:System.PlatformNotSupportedException">不支持当前平台。</exception>
    </member>
    <member name="M:System.Environment.GetLogicalDrives">
      <summary>返回包含当前计算机中的逻辑驱动器名称的字符串数组。</summary>
      <returns>字符串数组，其中的每个元素都包含逻辑驱动器名称。 例如，如果计算机的硬盘是第一个逻辑驱动器，则返回的第一个元素是“C:\”。</returns>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所需的权限。</exception>
    </member>
    <member name="P:System.Environment.HasShutdownStarted">
      <summary>获取一个值，该值指示当前的应用程序域是否正在卸载或者公共语言运行时 (CLR) 是否正在关闭。</summary>
      <returns>
        <see langword="true" /> 如果当前应用程序域正在卸载或者 CLR 正在关闭，则为;否则，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Environment.Is64BitOperatingSystem">
      <summary>确定当前操作系统是否为 64 位操作系统。</summary>
      <returns>如果操作系统为 64 位操作系统，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Environment.Is64BitProcess">
      <summary>确定当前进程是否为 64 位进程。</summary>
      <returns>如果进程为 64 位进程，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Environment.MachineName">
      <summary>获取此本地计算机的 NetBIOS 名称。</summary>
      <returns>包含此计算机的名称的字符串。</returns>
      <exception cref="T:System.InvalidOperationException">无法获取此计算机的名称。</exception>
    </member>
    <member name="P:System.Environment.NewLine">
      <summary>获取为此环境定义的换行字符串。</summary>
      <returns>对于非 Unix 平台为包含“\r\n”的字符串，对于 Unix 平台则为包含“\n”的字符串。</returns>
    </member>
    <member name="P:System.Environment.OSVersion">
      <summary>获取包含当前平台标识符和版本号的 <see cref="T:System.OperatingSystem" /> 对象。</summary>
      <returns>一个包含平台标识符和版本号的对象。</returns>
      <exception cref="T:System.InvalidOperationException">此属性不能获得系统版本。
或
获得的平台标识符不是 <see cref="T:System.PlatformID" />的成员</exception>
    </member>
    <member name="P:System.Environment.ProcessorCount">
      <summary>获取当前计算机上的处理器数。</summary>
      <returns>指定当前计算机上处理器个数的 32 位有符号整数。 没有默认值。 如果当前计算机包含多个处理器组，则此属性返回可用的逻辑处理器数以供公共语言运行时 (CLR) 使用。</returns>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
      <summary>创建、修改或删除当前进程中存储的环境变量。</summary>
      <param name="variable">环境变量名。</param>
      <param name="value">要分配给 <paramref name="variable" /> 的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variable" /> 包含一个长度为零的字符串、一个初始十六进制零字符 (0x00) 或一个等号 ("=")。
或
<paramref name="variable" /> 或 <paramref name="value" /> 的长度大于或等于 32,767 个字符。
或
执行此操作期间出错。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有执行此操作所需的权限。</exception>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
      <summary>创建、修改或删除当前进程中或者为当前用户或本地计算机保留的 Windows 操作系统注册表项中存储的环境变量。</summary>
      <param name="variable">环境变量名。</param>
      <param name="value">要分配给 <paramref name="variable" /> 的值。</param>
      <param name="target">一个用于指定环境变量的位置的枚举值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variable" /> 包含一个长度为零的字符串、一个初始十六进制零字符 (0x00) 或一个等号 ("=")。
或
<paramref name="variable" /> 的长度大于或等于 32,767 个字符。
或
<paramref name="target" /> 不是 <see cref="T:System.EnvironmentVariableTarget" /> 枚举的一个成员。
或
<paramref name="target" /> 为 <see cref="F:System.EnvironmentVariableTarget.Machine" /> 或 <see cref="F:System.EnvironmentVariableTarget.User" />，且 <paramref name="variable" /> 的长度大于或等于 255。
或
<paramref name="target" /> 为 <see cref="F:System.EnvironmentVariableTarget.Process" /> ，且 <paramref name="value" /> 的长度大于或等于 32767 个字符。
或
执行此操作期间出错。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有执行此操作所需的权限。</exception>
    </member>
    <member name="T:System.Environment.SpecialFolder">
      <summary>指定用于检索系统特殊文件夹的目录路径的枚举常数。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.AdminTools">
      <summary>用于存储各个用户的管理工具的文件系统目录。 Microsoft Management Console (MMC) 会将自定义的控制台保存在此目录中，并且此目录将随用户一起漫游。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ApplicationData">
      <summary>用作当前漫游用户的应用程序特定数据的公共储存库的目录。 漫游用户在网络上的多台计算机上工作。 漫游用户的配置文件保留在网络服务器上，并在用户登录时加载到系统中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CDBurning">
      <summary>充当等待写入 CD 的文件的临时区域的文件系统目录。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonAdminTools">
      <summary>包含计算机所有用户的管理工具的文件系统目录。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonApplicationData">
      <summary>用作所有用户使用的应用程序特定数据的公共储存库的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonDesktopDirectory">
      <summary>包含在所有用户桌面上出现的文件和文件夹的文件系统目录。 此特殊文件夹仅对 Windows NT 系统有效。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonDocuments">
      <summary>包含所有用户共有的文档的文件系统目录。 此特殊文件夹仅对装有 Shfolder.dll 的 Windows NT 系统、Windows 95 和 Windows 98 系统有效。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonMusic">
      <summary>充当所有用户共有的音乐文件的存储库的文件系统目录。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonOemLinks">
      <summary>为了实现向后兼容，Windows Vista 中可以识别此值，但该特殊文件夹本身已不再使用。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonPictures">
      <summary>充当所有用户共有的图像文件的存储库的文件系统目录。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFiles">
      <summary>用于应用程序间共享的组件的目录。
若要在非 x86 系统上获取 x86 常规程序文件目录，请使用 <see cref="F:System.Environment.SpecialFolder.ProgramFilesX86" /> 成员。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFilesX86">
      <summary>“Program Files”文件夹。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonPrograms">
      <summary>跨应用程序共享的组件的文件夹。 此特殊文件夹仅对 Windows NT、Windows 2000 和 Windows XP 系统有效。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonStartMenu">
      <summary>文件系统目录，包含所有用户的“开始”菜单上都出现的程序和文件夹。 此特殊文件夹仅对 Windows NT 系统有效。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonStartup">
      <summary>文件系统目录，包含所有用户的“启动”文件夹中都出现的程序。 此特殊文件夹仅对 Windows NT 系统有效。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonTemplates">
      <summary>包含所有用户都可以使用的模板的文件系统目录。 此特殊文件夹仅对 Windows NT 系统有效。  已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonVideos">
      <summary>充当所有用户共有的视频文件的存储库的文件系统目录。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Cookies">
      <summary>用作 Internet Cookie 的公共储存库的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Desktop">
      <summary>逻辑桌面，而不是物理文件系统位置。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.DesktopDirectory">
      <summary>用于物理上存储桌面上的文件对象的目录。 不要混淆此目录与桌面文件夹本身，后者是一个虚拟文件夹。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Favorites">
      <summary>用作用户收藏夹项的公共储存库的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Fonts">
      <summary>包含字体的虚拟文件夹。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.History">
      <summary>用作 Internet 历史记录项的公共储存库的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.InternetCache">
      <summary>用作 Internet 临时文件的公共储存库的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalApplicationData">
      <summary>用作当前非漫游用户使用的应用程序特定数据的公共储存库的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalizedResources">
      <summary>包含本地化资源数据的文件系统目录。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyComputer">
      <summary>“我的计算机”文件夹。 传递给 <see langword="Environment.GetFolderPath" /> 方法时，<see langword="MyComputer" /> 枚举成员始终生成空字符串（""），这是因为没有为“我的电脑”文件夹定义路径。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyDocuments">
      <summary>“我的文档”文件夹。 此成员等效于 <see cref="F:System.Environment.SpecialFolder.Personal" />。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyMusic">
      <summary>“我的音乐”文件夹。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyPictures">
      <summary>“我的图片”文件夹。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyVideos">
      <summary>充当属于某个用户的视频的存储库的文件系统目录。  已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.NetworkShortcuts">
      <summary>文件系统目录，包含“网上邻居”虚拟文件夹中可能存在的链接对象。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Personal">
      <summary>用作文档的公共储存库的目录。  此成员等效于 <see cref="F:System.Environment.SpecialFolder.MyDocuments" />。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.PrinterShortcuts">
      <summary>文件系统目录，包含“打印机”虚拟文件夹中可能存在的链接对象。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFiles">
      <summary>“Program files”目录。
在非 x86 系统中，将 <see cref="F:System.Environment.SpecialFolder.ProgramFiles" /> 传递到 <see cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)" /> 方法将返回非 x86 程序的路径。 若要在非 x86 系统上获取 x86 程序文件目录，请使用 <see cref="F:System.Environment.SpecialFolder.ProgramFilesX86" /> 成员。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFilesX86">
      <summary>x86 “Program Files”文件夹。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Programs">
      <summary>包含用户程序组的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Recent">
      <summary>包含用户最近使用过的文档的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Resources">
      <summary>包含资源数据的文件系统目录。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SendTo">
      <summary>包含“发送”菜单项的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.StartMenu">
      <summary>包含“开始”菜单项的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Startup">
      <summary>对应于用户的“开始”程序组的目录。 只要用户登录或启动 Windows，系统就会启动这些程序。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.System">
      <summary>“System”目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SystemX86">
      <summary>Windows “系统”文件夹。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Templates">
      <summary>用作文档模板的公共储存库的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.UserProfile">
      <summary>用户的配置文件文件夹。 应用程序不应在此级别上创建文件或文件夹；它们应将其数据放在 <see cref="F:System.Environment.SpecialFolder.ApplicationData" /> 所引用的位置之下。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Windows">
      <summary>Windows 目录或 SYSROOT。 它与 %windir% 或 %SYSTEMROOT% 环境变量相对应。 已添加到 .NET Framework 4 中。</summary>
    </member>
    <member name="T:System.Environment.SpecialFolderOption">
      <summary>指定用于获取特殊文件夹路径的选项。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.Create">
      <summary>如果文件夹尚未存在，则创建该文件夹的路径。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.DoNotVerify">
      <summary>指向文件夹的路径在返回时不会验证路径是否存在。 如果文件夹位于网络上，则指定此选项可以缩短延隔时间。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.None">
      <summary>已验证指向文件夹的路径。 如果该文件夹存在，则返回路径。 如果文件夹不存在，则返回空字符串。 这是默认行为。</summary>
    </member>
    <member name="P:System.Environment.StackTrace">
      <summary>获取当前的堆栈跟踪信息。</summary>
      <returns>包含堆栈跟踪信息的字符串。 此值可为 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Environment.SystemDirectory">
      <summary>获取系统目录的完全限定路径。</summary>
      <returns>包含目录路径的字符串。</returns>
    </member>
    <member name="P:System.Environment.SystemPageSize">
      <summary>获取操作系统的内存页的字节数。</summary>
      <returns>系统内存页中的字节数。</returns>
    </member>
    <member name="P:System.Environment.TickCount">
      <summary>获取系统启动后经过的毫秒数。</summary>
      <returns>一个 32 位带符号整数，它包含自上次启动计算机以来所经过的时间（以毫秒为单位）。</returns>
    </member>
    <member name="P:System.Environment.TickCount64">
      <summary>获取系统启动后经过的毫秒数。</summary>
      <returns>自系统启动以来经过的时间（毫秒）。</returns>
    </member>
    <member name="P:System.Environment.UserDomainName">
      <summary>获取与当前用户关联的网络域名。</summary>
      <returns>与当前用户关联的网络域名。</returns>
      <exception cref="T:System.PlatformNotSupportedException">操作系统不支持检索网络域名。</exception>
      <exception cref="T:System.InvalidOperationException">无法检索的网络域名。</exception>
    </member>
    <member name="P:System.Environment.UserInteractive">
      <summary>获取一个值，用以指示当前进程是否在用户交互模式中运行。</summary>
      <returns>如果当前进程在用户交互模式中运行，则为<see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Environment.UserName">
      <summary>获取当前已登录到操作系统的人员的用户名。</summary>
      <returns>登录到操作系统的人员的用户名。</returns>
    </member>
    <member name="P:System.Environment.Version">
      <summary>获取一个 <see cref="T:System.Version" /> 对象，该对象描述公共语言运行时的主版本、次版本、内部版本和修订号。</summary>
      <returns>用于显示公共语言运行时版本的对象。</returns>
    </member>
    <member name="P:System.Environment.WorkingSet">
      <summary>获取映射到进程上下文的物理内存量。</summary>
      <returns>一个 64 位带符号整数，包含映射到进程上下文的物理内存字节的数目。</returns>
    </member>
    <member name="T:System.EnvironmentVariableTarget">
      <summary>指定在 Set 或 Get 操作中存储或检索环境变量的位置。</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.Machine">
      <summary>在 Windows 操作系统注册表的 <see langword="HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment" /> 项中存储或从其中检索环境变量。 此值应仅用于在 Windows 系统上运行的 .NET 实现。</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.Process">
      <summary>环境变量存储在与当前进程关联的环境块中，或者从其中检索。</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.User">
      <summary>在 Windows 操作系统注册表的 <see langword="HKEY_CURRENT_USER\Environment" /> 项中存储或从其中检索环境变量。 此值应仅用于在 Windows 系统上运行的 .NET 实现。</summary>
    </member>
    <member name="T:System.Globalization.GlobalizationExtensions">
      <summary>提供与全球化相关的扩展方法。</summary>
    </member>
    <member name="M:System.Globalization.GlobalizationExtensions.GetStringComparer(System.Globalization.CompareInfo,System.Globalization.CompareOptions)">
      <summary>根据指定 <see cref="T:System.Globalization.CompareInfo" /> 对象区分区域性的字符串比较规则，返回 <see cref="T:System.StringComparer" /> 对象。</summary>
      <param name="compareInfo">一个对象，该对象支持区分区域性的字符串比较。</param>
      <param name="options">一个值，用于定义应如何比较字符串。 <paramref name="options" /> 可以是枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 或 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />，也可以是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> 和 <see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
      <returns>可用于执行字符串比较的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="compareInfo" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 无效。</exception>
    </member>
    <member name="T:System.IO.BinaryReader">
      <summary>用特定的编码将基元数据类型读作二进制值。</summary>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
      <summary>基于所指定的流和特定的 UTF-8 编码，初始化 <see cref="T:System.IO.BinaryReader" /> 类的新实例。</summary>
      <param name="input">输入流。</param>
      <exception cref="T:System.ArgumentException">该流不支持读取，为<see langword="null" /> 或已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>基于所指定的流和特定的字符编码，初始化 <see cref="T:System.IO.BinaryReader" /> 类的新实例。</summary>
      <param name="input">输入流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <exception cref="T:System.ArgumentException">该流不支持读取，为<see langword="null" /> 或已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>基于所提供的流和特定的字符编码，初始化 <see cref="T:System.IO.BinaryReader" /> 类的新实例，有选择性的打开流。</summary>
      <param name="input">输入流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <param name="leaveOpen">如果在释放 <see cref="T:System.IO.BinaryReader" /> 对象后保持流处于打开状态，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">该流不支持读取，为<see langword="null" /> 或已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> 或 <paramref name="input" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.IO.BinaryReader.BaseStream">
      <summary>公开对 <see cref="T:System.IO.BinaryReader" /> 的基础流的访问。</summary>
      <returns>与 <see langword="BinaryReader" /> 关联的基础流。</returns>
    </member>
    <member name="M:System.IO.BinaryReader.Close">
      <summary>关闭当前阅读器及基础流。</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose">
      <summary>释放 <see cref="T:System.IO.BinaryReader" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.IO.BinaryReader" /> 类使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
      <summary>用从流中读取的指定字节数填充内部缓冲区。</summary>
      <param name="numBytes">要读取的字节数。</param>
      <exception cref="T:System.IO.EndOfStreamException">在可以读取 <paramref name="numBytes" /> 之前到达了流的末尾。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">请求的 <paramref name="numBytes" /> 大于内部缓冲区大小。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.PeekChar">
      <summary>返回下一个可用的字符，并且不提升字节或字符的位置。</summary>
      <returns>下一个可用的字符，或者，如果没有可用字符或者流不支持查找时为 -1。</returns>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ArgumentException">当前字符无法通过使用为该流选择的 <see cref="T:System.Text.Encoding" /> 解码到内部字符缓冲区中。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read">
      <summary>从基础流中读取字符，并根据所使用的 <see langword="Encoding" /> 和从流中读取的特定字符，提升流的当前位置。</summary>
      <returns>输入流中的下一个字符，如果当前无可用字符则为 -1。</returns>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>从字节数组中的指定点开始，从流中读取指定的字节数。</summary>
      <param name="buffer">将数据读入的缓冲区。</param>
      <param name="index">缓冲区中的起始点，在该处开始读入缓冲区。</param>
      <param name="count">要读取的字节数。</param>
      <returns>读入 <paramref name="buffer" /> 的字节数。 如果可用的字节没有请求的那么多，此数可能小于所请求的字节数；如果到达了流的末尾，此数可能为零。</returns>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
或
要读取的解码字符数大于 <paramref name="count" />。 如果 Unicode 解码器返回回退字符或代理项对，则可能发生此情况。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>从字符数组中的指定点开始，从流中读取指定的字符数。</summary>
      <param name="buffer">将数据读入的缓冲区。</param>
      <param name="index">缓冲区中的起始点，在该处开始读入缓冲区。</param>
      <param name="count">要读取的字符数。</param>
      <returns>读入缓冲区的总字符数。 如果当前可用的字节没有请求的那么多，此数可能小于所请求的字符数；如果到达了流的末尾，此数可能为零。</returns>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
或
要读取的解码字符数大于 <paramref name="count" />。 如果 Unicode 解码器返回回退字符或代理项对，则可能发生此情况。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Span{System.Byte})">
      <summary>从当前流读取字节序列，并将流中的位置向前移动读取的字节数。</summary>
      <param name="buffer">内存的区域。 当此方法返回时，此区域的内容将替换为从当前源读取的字节。</param>
      <returns>读入缓冲区中的总字节数。 如果很多字节当前不可用，则这可小于在缓冲区中分配的字节数；如果已到达流结尾，则为零 (0)。</returns>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Span{System.Char})">
      <summary>从当前流中读取与提供的缓冲区长度相同的字符数，将其写入提供的缓冲区，然后根据所使用的 <see langword="Encoding" /> 和从流中读取的特定字符，将当前位置前移。</summary>
      <param name="buffer">字符范围。 当此方法返回时，此区域的内容将替换为从当前源读取的字符。</param>
      <returns>读入缓冲区的总字符数。 如果当前可用的字节没有请求的那么多，此数可能小于所请求的字符数；如果到达了流的末尾，此数可能为零。</returns>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read7BitEncodedInt">
      <summary>以压缩格式读入 32 位整数。</summary>
      <returns>压缩格式的 32 位整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.FormatException">流已损坏。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBoolean">
      <summary>从当前流中读取 <see langword="Boolean" /> 值，并使该流的当前位置提升 1 个字节。</summary>
      <returns>如果字节为非零则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadByte">
      <summary>从当前流中读取下一个字节，并使流的当前位置提升 1 个字节。</summary>
      <returns>从当前流中读取的下一个字节。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
      <summary>从当前流中读取指定的字节数以写入字节数组中，并将当前位置前移相应的字节数。</summary>
      <param name="count">要读取的字节数。 此值必须为 0 或非负数字，否则将出现异常。</param>
      <returns>包含从基础流中读取的数据的字节数组。 如果到达了流的末尾，则该字节数组可能小于所请求的字节数。</returns>
      <exception cref="T:System.ArgumentException">要读取的解码字符数大于 <paramref name="count" />。 如果 Unicode 解码器返回回退字符或代理项对，则可能发生此情况。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 为负数。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChar">
      <summary>从当前流中读取下一个字符，并根据所使用的 <see langword="Encoding" /> 和从流中读取的特定字符，提升流的当前位置。</summary>
      <returns>从当前流中读取的字符。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ArgumentException">读取了一个代理项字符。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChars(System.Int32)">
      <summary>从当前流中读取指定的字符数，并以字符数组的形式返回数据，然后根据所使用的 <see langword="Encoding" /> 和从流中读取的特定字符，将当前位置前移。</summary>
      <param name="count">要读取的字符数。</param>
      <returns>包含从基础流中读取的数据的字节数组。 如果到达了流的末尾，则该字符数组可能小于所请求的字符数。</returns>
      <exception cref="T:System.ArgumentException">要读取的解码字符数大于 <paramref name="count" />。 如果 Unicode 解码器返回回退字符或代理项对，则可能发生此情况。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 为负数。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDecimal">
      <summary>从当前流中读取十进制数值，并将该流的当前位置提升十六个字节。</summary>
      <returns>从当前流中读取的十进制数值。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDouble">
      <summary>从当前流中读取 8 字节浮点值，并使流的当前位置提升 8 个字节。</summary>
      <returns>从当前流中读取的 8 字节浮点值。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt16">
      <summary>从当前流中读取 2 字节有符号整数，并使流的当前位置提升 2 个字节。</summary>
      <returns>从当前流中读取的 2 字节有符号整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt32">
      <summary>从当前流中读取 4 字节有符号整数，并使流的当前位置提升 4 个字节。</summary>
      <returns>从当前流中读取的 2 字节有符号整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt64">
      <summary>从当前流中读取 8 字节有符号整数，并使流的当前位置提升 8 个字节。</summary>
      <returns>从当前流中读取的 8 字节有符号整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSByte">
      <summary>从此流中读取 1 个有符号字节，并使流的当前位置提升 1 个字节。</summary>
      <returns>从当前流中读取的一个有符号字节。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSingle">
      <summary>从当前流中读取 4 字节浮点值，并使流的当前位置提升 4 个字节。</summary>
      <returns>从当前流中读取的 4 字节浮点值。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadString">
      <summary>从当前流中读取一个字符串。 字符串有长度前缀，一次 7 位地被编码为整数。</summary>
      <returns>正被读取的字符串。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt16">
      <summary>使用 Little-Endian 编码从当前流中读取 2 字节无符号整数，并将流的位置提升 2 个字节。</summary>
      <returns>从该流中读取的 2 字节无符号整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt32">
      <summary>从当前流中读取 4 字节无符号整数并使流的当前位置提升 4 个字节。</summary>
      <returns>从该流中读取的 4 字节无符号整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt64">
      <summary>从当前流中读取 8 字节无符号整数并使流的当前位置提升 8 个字节。</summary>
      <returns>从该流中读取的 8 字节无符号整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="T:System.IO.BinaryWriter">
      <summary>以二进制形式将基元类型写入流，并支持用特定的编码写入字符串。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor">
      <summary>初始化写入流的 <see cref="T:System.IO.BinaryWriter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
      <summary>基于所指定的流和特定的 UTF-8 编码，初始化 <see cref="T:System.IO.BinaryWriter" /> 类的新实例。</summary>
      <param name="output">输出流。</param>
      <exception cref="T:System.ArgumentException">该流不支持写入或者该流已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>基于所指定的流和特定的字符编码，初始化 <see cref="T:System.IO.BinaryWriter" /> 类的新实例。</summary>
      <param name="output">输出流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <exception cref="T:System.ArgumentException">该流不支持写入或者该流已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>基于所提供的流和特定的字符编码，初始化 <see cref="T:System.IO.BinaryWriter" /> 类的新实例，有选择性的打开流。</summary>
      <param name="output">输出流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <param name="leaveOpen">如果在释放 <see cref="T:System.IO.BinaryWriter" /> 对象后保持流处于打开状态，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">该流不支持写入或者该流已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.IO.BinaryWriter.BaseStream">
      <summary>获取 <see cref="T:System.IO.BinaryWriter" /> 的基础流。</summary>
      <returns>与 <see langword="BinaryWriter" /> 关联的基础流。</returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Close">
      <summary>关闭当前的 <see cref="T:System.IO.BinaryWriter" /> 和基础流。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose">
      <summary>释放 <see cref="T:System.IO.BinaryWriter" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.BinaryWriter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.IO.BinaryWriter.DisposeAsync">
      <summary>异步释放 <see cref="T:System.IO.BinaryWriter" /> 类的当前实例所使用的所有资源。</summary>
      <returns>一个表示异步释放操作的任务。</returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Flush">
      <summary>清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.Null">
      <summary>指定无后备存储的 <see cref="T:System.IO.BinaryWriter" />。</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.OutStream">
      <summary>包含基础流。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
      <summary>设置当前流中的位置。</summary>
      <param name="offset">相对于 <paramref name="origin" /> 的字节偏移量。</param>
      <param name="origin">
        <see cref="T:System.IO.SeekOrigin" /> 的一个字段，指示获取新位置所依据的参考点。</param>
      <returns>包含当前流的位置。</returns>
      <exception cref="T:System.IO.IOException">文件指针被移到无效位置。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.IO.SeekOrigin" /> 值无效。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Boolean)">
      <summary>将单字节 <see langword="Boolean" /> 值写入当前流，其中 0 表示 <see langword="false" />，1 表示 <see langword="true" />。</summary>
      <param name="value">要写入的 <see langword="Boolean" /> 值（0 或 1）。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte)">
      <summary>将一个无符号字节写入当前流，并将流的位置提升 1 个字节。</summary>
      <param name="value">要写入的无符号字节。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[])">
      <summary>将字节数组写入基础流。</summary>
      <param name="buffer">包含要写入的数据的字节数组。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>将字节数组区域写入当前流。</summary>
      <param name="buffer">包含要写入的数据的字节数组。</param>
      <param name="index">要从 <paramref name="buffer" /> 中读取且要写入流的第一个字节的索引。</param>
      <param name="count">要从 <paramref name="buffer" /> 中读取且要写入流的字节数。</param>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char)">
      <summary>将 Unicode 字符写入当前流，并根据所使用的 <see langword="Encoding" /> 和向流中写入的特定字符，提升流的当前位置。</summary>
      <param name="ch">要写入的非代理项 Unicode 字符。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ch" /> 是单一代理项字符。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[])">
      <summary>将字符数组写入当前流，并根据所使用的 <see langword="Encoding" /> 和向流中写入的特定字符，提升流的当前位置。</summary>
      <param name="chars">包含要写入的数据的字符数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>将字符数组部分写入当前流，并根据所使用的 <see langword="Encoding" />（可能还根据向流中写入的特定字符），提升流的当前位置。</summary>
      <param name="chars">包含要写入的数据的字符数组。</param>
      <param name="index">要从 <paramref name="chars" /> 中读取且要写入流的第一个字符的索引。</param>
      <param name="count">要从 <paramref name="chars" /> 中读取且要写入流的字符数。</param>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Decimal)">
      <summary>将一个十进制值写入当前流，并将流位置提升十六个字节。</summary>
      <param name="value">要写入的十进制值。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Double)">
      <summary>将 8 字节浮点值写入当前流，并将流的位置提升 8 个字节。</summary>
      <param name="value">要写入的 8 字节浮点值。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int16)">
      <summary>将 2 字节带符号整数写入当前流，并将流的位置提升 2 个字节。</summary>
      <param name="value">要写入的 2 字节带符号整数。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int32)">
      <summary>将 4 字节带符号整数写入当前流，并将流的位置提升 4 个字节。</summary>
      <param name="value">要写入的 4 字节带符号整数。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int64)">
      <summary>将 8 字节带符号整数写入当前流，并将流的位置提升 8 个字节。</summary>
      <param name="value">要写入的 8 字节带符号整数。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.ReadOnlySpan{System.Byte})">
      <summary>将字节范围写入当前流。</summary>
      <param name="buffer">要写入的字节范围。</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>将一段字符写入当前流，并根据所使用的 <see langword="Encoding" />（可能还根据向流中写入的特定字符），提升流的当前位置。</summary>
      <param name="chars">要写入的一个字符范围。</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.SByte)">
      <summary>将一个带符号字节写入当前流，并将流的位置提升 1 个字节。</summary>
      <param name="value">要写入的带符号字节。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Single)">
      <summary>将 4 字节浮点值写入当前流，并将流的位置提升 4 个字节。</summary>
      <param name="value">要写入的 4 字节浮点值。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.String)">
      <summary>将有长度前缀的字符串按 <see cref="T:System.IO.BinaryWriter" /> 的当前编码写入此流，并根据所使用的编码和写入流的特定字符，提升流的当前位置。</summary>
      <param name="value">要写入的值。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt16)">
      <summary>将 2 字节无符号整数写入当前流，并将流的位置提升 2 个字节。</summary>
      <param name="value">要写入的 2 字节无符号整数。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt32)">
      <summary>将 4 字节无符号整数写入当前流，并将流的位置提升 4 个字节。</summary>
      <param name="value">要写入的 4 字节无符号整数。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt64)">
      <summary>将 8 字节无符号整数写入当前流，并将流的位置提升 8 个字节。</summary>
      <param name="value">要写入的 8 字节无符号整数。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
      <summary>以压缩格式写入 32 位整数。</summary>
      <param name="value">要写入的 32 位整数。</param>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">流已关闭。</exception>
    </member>
    <member name="T:System.IO.BufferedStream">
      <summary>将缓冲层添加到另一个流上的读取和写入操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
      <summary>使用默认的缓冲区大小 4096 字节初始化 <see cref="T:System.IO.BufferedStream" /> 类的新实例。</summary>
      <param name="stream">当前流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
      <summary>使用指定的缓冲区大小初始化 <see cref="T:System.IO.BufferedStream" /> 类的新实例。</summary>
      <param name="stream">当前流。</param>
      <param name="bufferSize">缓冲区大小（以字节为单位）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 为负数。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读操作。 （请考虑改用 <see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。）</summary>
      <param name="buffer">数据读入的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="callback">可选的异步回调，在完成读取时调用。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
      <returns>表示异步读取（可能仍处于挂起状态）的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.IO.IOException">试图在流的末尾之外进行异步读取。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="offset" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.NotSupportedException">当前流不支持读取操作。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写操作。 （请考虑改用 <see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。）</summary>
      <param name="buffer">包含要写入当前流的数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="callback">异步写操作完成后调用的方法。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
      <returns>一个表示异步写入（可能仍处于挂起状态）的对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 长度减去 <paramref name="offset" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
    </member>
    <member name="P:System.IO.BufferedStream.BufferSize">
      <summary>获取此缓冲流的缓冲区大小（以字节为单位）。</summary>
      <returns>表示缓冲区大小（以字节为单位）的整数。</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanRead">
      <summary>获取一个值，该值指示当前流是否支持读取。</summary>
      <returns>如果流支持读取，则为 <see langword="true" />；如果流已关闭或是通过只写访问方式打开的，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanSeek">
      <summary>获取一个值，该值指示当前流是否支持查找。</summary>
      <returns>如果流支持查找，则为 <see langword="true" />；如果流已关闭或者如果流是由操作系统句柄（如管道或到控制台的输出）构造的，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanWrite">
      <summary>获取一个值，该值指示当前流是否支持写入。</summary>
      <returns>如果流支持写入，则为 <see langword="true" />；如果流已关闭或是通过只读访问方式打开的，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.CopyTo(System.IO.Stream,System.Int32)">
      <summary>从当前缓冲流中读取字节并将其写入到其他流中。</summary>
      <param name="destination">将复制当前缓冲流的内容的流。</param>
      <param name="bufferSize">缓冲区的大小。 此值必须大于零。 默认大小为 81920。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 为负数或零。</exception>
      <exception cref="T:System.NotSupportedException">当前流不支持读取。
或
<paramref name="destination" /> 不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">在调用 <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> 方法前，当前流或 <paramref name="destination" /> 已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>使用指定的缓冲区大小和取消令牌，从当前缓冲流中异步读取字节并将其写入到另一个流中。</summary>
      <param name="destination">将复制当前缓冲流的内容的流。</param>
      <param name="bufferSize">缓冲区的大小（以字节为单位）。 此值必须大于零。 默认大小为 81920。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步复制操作的任务。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.DisposeAsync">
      <summary>异步释放缓冲流使用的非管理资源。</summary>
      <returns>一个表示异步释放操作的任务。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
      <summary>等待挂起的异步读操作完成。 （请考虑改用 <see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。）</summary>
      <param name="asyncResult">对所等待的挂起异步请求的引用。</param>
      <returns>从流中读取的字节数，介于 0（零）和你请求的字节数之间。 流仅在流的末尾返回 0；否则应一直阻塞到至少有 1 个字节可用为止。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">此 <see cref="T:System.IAsyncResult" /> 对象不是通过对该类调用 <see cref="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 来创建的。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
      <summary>结束异步写入操作，在 I/O 操作完成之前一直阻止。 （请考虑改用 <see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。）</summary>
      <param name="asyncResult">挂起的异步请求。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">此 <see cref="T:System.IAsyncResult" /> 对象不是通过对该类调用 <see cref="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 来创建的。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Flush">
      <summary>清除此流的所有缓冲区并导致所有缓冲数据都写入基础设备中。</summary>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
      <exception cref="T:System.IO.IOException">数据源或储存库未打开。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>异步清理这个流的所有缓冲区，并使所有缓冲数据写入基础设备，并且监控取消请求。</summary>
      <param name="cancellationToken">要监视取消请求的标记。</param>
      <returns>表示异步刷新操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
    </member>
    <member name="P:System.IO.BufferedStream.Length">
      <summary>获取流长度，长度以字节为单位。</summary>
      <returns>流长度，以字节为单位。</returns>
      <exception cref="T:System.IO.IOException">基础流为 <see langword="null" /> 或已关闭。</exception>
      <exception cref="T:System.NotSupportedException">流不支持查找。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
    </member>
    <member name="P:System.IO.BufferedStream.Position">
      <summary>获取当前流内的位置。</summary>
      <returns>当前流内的位置。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递给 <see cref="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)" /> 的值为负。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误，如流被关闭。</exception>
      <exception cref="T:System.NotSupportedException">流不支持查找。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>将字节从当前缓冲流复制到数组。</summary>
      <param name="array">将字节复制到的缓冲区。</param>
      <param name="offset">缓冲区中的字节偏移量，从此处开始读取字节。</param>
      <param name="count">要读取的字节数。</param>
      <returns>读入 <paramref name="array" /> 中的总字节数。 如果可用的字节没有所请求的那么多，总字节数可能小于请求的字节数；或者如果在可读取任何数据前就已到达流的末尾，则为零。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 的长度减去 <paramref name="offset" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.IO.IOException">流未打开或为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Read(System.Span{System.Byte})">
      <summary>将当前缓冲流中的字节复制到字节跨度，并按读取的字节数向前移动缓冲流中的位置。</summary>
      <param name="destination">内存的区域。 当此方法返回时，此区域的内容将替换为从当前源读取的字节。</param>
      <returns>读入缓冲区中的总字节数。 如果很多字节当前不可用，则这可小于在缓冲区中分配的字节数；如果已到达流结尾，则为零 (0)。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>从当前流异步读取字节的序列，将流中的位置提升读取的字节数，并监视取消请求。</summary>
      <param name="buffer">要写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="cancellationToken">要监视取消请求的标记。</param>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。 如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
      <exception cref="T:System.InvalidOperationException">之前的读取操作当前正在使用流。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>从当前缓冲流异步读取字节序列，并按读取的字节数向前移动缓冲流中的位置。</summary>
      <param name="buffer">要将数据写入的内存区域。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步读取操作的任务。 其 <see cref="P:System.Threading.Tasks.ValueTask`1.Result" /> 属性的值包含读入缓冲区的总字节数。 如果很多字节当前不可用，则结果值可小于在缓冲区中分配的字节数；如果已到达流结尾，则结果值可以为 0（零）。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.ReadByte">
      <summary>从基础流中读取一个字节，并返回转换为 <see langword="int" /> 的该字节；或者如果从流的末尾读取则返回 -1。</summary>
      <returns>转换为 <see langword="int" /> 的字节，或者如果从流的末尾读取则为 -1。</returns>
      <exception cref="T:System.IO.IOException">发生 I/O 错误，如流被关闭。</exception>
      <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>设置当前缓冲流中的位置。</summary>
      <param name="offset">相对于 <paramref name="origin" /> 的字节偏移量。</param>
      <param name="origin">
        <see cref="T:System.IO.SeekOrigin" /> 类型的值，指示用于获得新位置的参考点。</param>
      <returns>当前缓冲流中的新位置。</returns>
      <exception cref="T:System.IO.IOException">流未打开或为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">流不支持查找。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.SetLength(System.Int64)">
      <summary>设置缓冲流的长度。</summary>
      <param name="value">一个整数，指示当前缓冲流的所需长度（以字节为单位）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为负数。</exception>
      <exception cref="T:System.IO.IOException">流未打开或为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">该流不支持写入和查找。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
    </member>
    <member name="P:System.IO.BufferedStream.UnderlyingStream">
      <summary>获取此缓冲流的基础 <see cref="T:System.IO.Stream" /> 实例。</summary>
      <returns>基础流实例。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>将字节复制到缓冲流，并将缓冲流内的当前位置前进写入的字节数。</summary>
      <param name="array">字节数组，从该字节数组将 <paramref name="count" /> 个字节复制到当前缓冲流中。</param>
      <param name="offset">缓冲区中的偏移量，从此处开始将字节复制到当前缓冲流中。</param>
      <param name="count">要写入当前缓冲流中的字节数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 的长度减去 <paramref name="offset" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.IO.IOException">流关闭或为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>将字节序列写入当前缓冲流，并按写入的字节数向前移动此缓冲流中的当前位置。</summary>
      <param name="buffer">内存的区域。 此方法将此区域的内容复制到当前缓冲流。</param>
    </member>
    <member name="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>将字节的序列异步写入当前流，将该流中的当前位置向前移动写入的字节数，并监视取消请求。</summary>
      <param name="buffer">从中写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="cancellationToken">要监视取消请求的标记。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
      <exception cref="T:System.InvalidOperationException">流正在由前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>将字节的序列异步写入当前缓冲流，按写入的字节数向前移动该缓冲流中的当前位置，并监视取消请求。</summary>
      <param name="buffer">从中写入数据的内存区域。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步写入操作的任务。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.WriteByte(System.Byte)">
      <summary>将一个字节写入缓冲流的当前位置。</summary>
      <param name="value">要写入流的字节。</param>
      <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
    </member>
    <member name="T:System.IO.EndOfStreamException">
      <summary>读操作试图超出流的末尾时引发的异常。</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor">
      <summary>初始化 <see cref="T:System.IO.EndOfStreamException" /> 类的新实例，将其消息字符串设置为系统提供的消息，将其 HRESULT 设置为 COR_E_ENDOFSTREAM。</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用指定的序列化和上下文信息初始化 <see cref="T:System.IO.EndOfStreamException" /> 类的新实例。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IO.EndOfStreamException" /> 类的新实例，将其消息字符串设置为 <paramref name="message" />，将其 HRESULT 设置为 COR_E_ENDOFSTREAM。</summary>
      <param name="message">描述错误的字符串。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.EndOfStreamException" /> 类的新实例。</summary>
      <param name="message">描述错误的字符串。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>在数据流的格式无效时引发的异常。</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>初始化 <see cref="T:System.IO.InvalidDataException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.IO.InvalidDataException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>用对作为此异常原因的内部异常的引用初始化 <see cref="T:System.IO.InvalidDataException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.IO.MemoryStream">
      <summary>创建一个流，其后备存储为内存。</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor">
      <summary>使用初始化为零的可扩展容量初始化 <see cref="T:System.IO.MemoryStream" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[])">
      <summary>基于指定的字节数组初始化 <see cref="T:System.IO.MemoryStream" /> 类的无法调整大小的新实例。</summary>
      <param name="buffer">从中创建当前流的无符号字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
      <summary>在 <see cref="P:System.IO.MemoryStream.CanWrite" /> 属性按指定设置的状态下，基于指定的字节数组初始化 <see cref="T:System.IO.MemoryStream" /> 类的无法调整大小的新实例。</summary>
      <param name="buffer">从中创建此流的无符号字节的数组。</param>
      <param name="writable">
        <see cref="P:System.IO.MemoryStream.CanWrite" /> 属性的设置，确定流是否支持写入。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>基于字节数组的指定区域（索引）初始化 <see cref="T:System.IO.MemoryStream" /> 类的无法调整大小的新实例。</summary>
      <param name="buffer">从中创建该流的无符号字节数组。</param>
      <param name="index">
        <paramref name="buffer" /> 内的索引，流从此处开始。</param>
      <param name="count">流的长度（以字节为单位）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>在 <see cref="T:System.IO.MemoryStream" /> 属性按指定设置的状态下，基于字节数组的指定区域，初始化 <see cref="P:System.IO.MemoryStream.CanWrite" /> 类的无法调整大小的新实例。</summary>
      <param name="buffer">从中创建此流的无符号字节的数组。</param>
      <param name="index">
        <paramref name="buffer" /> 内的索引，流从此处开始。</param>
      <param name="count">流的长度（以字节为单位）。</param>
      <param name="writable">
        <see cref="P:System.IO.MemoryStream.CanWrite" /> 属性的设置，确定该流是否支持写入。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>在 <see cref="T:System.IO.MemoryStream" /> 属性和调用 <see cref="P:System.IO.MemoryStream.CanWrite" /> 的能力按指定设置的状态下，基于字节数组的指定区域初始化 <see cref="M:System.IO.MemoryStream.GetBuffer" /> 类的新实例。</summary>
      <param name="buffer">从中创建该流的无符号字节数组。</param>
      <param name="index">
        <paramref name="buffer" /> 内的索引，流从此处开始。</param>
      <param name="count">流的长度（以字节为单位）。</param>
      <param name="writable">
        <see cref="P:System.IO.MemoryStream.CanWrite" /> 属性的设置，确定该流是否支持写入。</param>
      <param name="publiclyVisible">设置为 <see langword="true" /> 可以启用 <see cref="M:System.IO.MemoryStream.GetBuffer" />，它返回无符号字节数组，流从该数组创建；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Int32)">
      <summary>使用按指定要求初始化的可扩展容量初始化 <see cref="T:System.IO.MemoryStream" /> 类的新实例。</summary>
      <param name="capacity">内部数组的初始大小（以字节为单位）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 为负数。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读操作。 （请考虑改用 <see cref="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。）</summary>
      <param name="buffer">数据读入的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从内存流中读取的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="callback">可选的异步回调，在完成读取时调用。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
      <returns>表示异步读取的 <see cref="T:System.IAsyncResult" />（可能仍处于挂起状态）。</returns>
      <exception cref="T:System.IO.IOException">尝试的异步读取超过了内存流的结尾，或者发生了磁盘错误。</exception>
      <exception cref="T:System.ArgumentException">一个或多个自变量无效。</exception>
      <exception cref="T:System.ObjectDisposedException">在内存流关闭后调用了方法。</exception>
      <exception cref="T:System.NotSupportedException">当前内存流实现不支持读取操作。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写操作。 （请考虑改用 <see cref="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。）</summary>
      <param name="buffer">从中写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从此处开始写入。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="callback">可选的异步回调，在完成写入时调用。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
      <returns>表示异步写入的 <see langword="IAsyncResult" />（可能仍处于挂起状态）。</returns>
      <exception cref="T:System.IO.IOException">尝试进行的异步写入超过了内存流的结尾，或者发生了磁盘错误。</exception>
      <exception cref="T:System.ArgumentException">一个或多个自变量无效。</exception>
      <exception cref="T:System.ObjectDisposedException">在内存流关闭后调用了方法。</exception>
      <exception cref="T:System.NotSupportedException">当前内存流实现不支持写入操作。</exception>
    </member>
    <member name="P:System.IO.MemoryStream.CanRead">
      <summary>获取一个值，该值指示当前流是否支持读取。</summary>
      <returns>如果流是打开的，则为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanSeek">
      <summary>获取一个值，该值指示当前流是否支持查找。</summary>
      <returns>如果流是打开的，则为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanWrite">
      <summary>获取一个值，该值指示当前流是否支持写入。</summary>
      <returns>如果流支持写入，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.MemoryStream.Capacity">
      <summary>获取或设置分配给该流的字节数。</summary>
      <returns>流的缓冲区的可使用部分的长度。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">容量设置为负或小于流的当前长度。</exception>
      <exception cref="T:System.ObjectDisposedException">当前流已关闭。</exception>
      <exception cref="T:System.NotSupportedException">对不能修改其容量的流调用 <see langword="set" />。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.CopyTo(System.IO.Stream,System.Int32)">
      <summary>使用指定的缓冲区大小，从当前内存流中读取字节并将其写入到另一流中。</summary>
      <param name="destination">当前内存流的内容将复制到的流。</param>
      <param name="bufferSize">缓冲区的大小。 此值必须大于零。 默认大小为 81920。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 不是正数。</exception>
      <exception cref="T:System.ObjectDisposedException">基础内存流或 <paramref name="destination" /> 流已关闭。</exception>
      <exception cref="T:System.NotSupportedException">基础内存流不可读取。
或
<paramref name="destination" /> 流不可写入。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>从当前流中异步读取所有字节并将其写入到另一个流中（使用指定的缓冲区大小和取消令牌）。</summary>
      <param name="destination">当前流的内容将复制到的流。</param>
      <param name="bufferSize">缓冲区的大小（以字节为单位）。 此值必须大于零。</param>
      <param name="cancellationToken">要监视取消请求的标记。</param>
      <returns>表示异步复制操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> 为负数或零。</exception>
      <exception cref="T:System.ObjectDisposedException">当前流或目标流已释放。</exception>
      <exception cref="T:System.NotSupportedException">当前流不支持阅读，或目标流不支持写入。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.IO.MemoryStream" /> 类使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.IO.MemoryStream.EndRead(System.IAsyncResult)">
      <summary>等待挂起的异步读取完成。 （请考虑改用 <see cref="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。）</summary>
      <param name="asyncResult">对要完成的挂起异步请求的引用。</param>
      <returns>从内存流中读取的字节数，介于零 (0) 和所请求的字节数之间。 仅在内存流结尾返回零 (0)，否则在至少有 1 个字节可用之前应一直进行阻止。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">处于挂起状态的读取操作的句柄不可用。
或
挂起操作不支持读取。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> 不源于当前内存流的 <see cref="M:System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.IO.IOException">流已关闭或出现了内部错误。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.EndWrite(System.IAsyncResult)">
      <summary>结束异步写操作。 （请考虑改用 <see cref="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。）</summary>
      <param name="asyncResult">对未完成的异步 I/O 请求的引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">处于挂起状态的写入操作的句柄不可用。
或
挂起操作不支持写入。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> 不源于当前流的 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.IO.IOException">流已关闭或出现了内部错误。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Flush">
      <summary>重写 <see cref="M:System.IO.Stream.Flush" /> 方法以便不执行任何操作。</summary>
    </member>
    <member name="M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>异步清除此流的所有缓冲区，并监视取消请求。</summary>
      <param name="cancellationToken">要监视取消请求的标记。</param>
      <returns>表示异步刷新操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.GetBuffer">
      <summary>返回从中创建此流的无符号字节的数组。</summary>
      <returns>创建此流所用的字节数组；或者如果在当前实例的构造期间没有向 <see cref="T:System.IO.MemoryStream" /> 构造函数提供字节数组，则为基础数组。</returns>
      <exception cref="T:System.UnauthorizedAccessException">未使用公共可见缓冲区创建 <see langword="MemoryStream" /> 的实例。</exception>
    </member>
    <member name="P:System.IO.MemoryStream.Length">
      <summary>获取流的长度（以字节为单位）。</summary>
      <returns>流的长度（以字节为单位）。</returns>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="P:System.IO.MemoryStream.Position">
      <summary>获取或设置流中的当前位置。</summary>
      <returns>流中的当前位置。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">此位置设置为负值或大于 <see cref="F:System.Int32.MaxValue" /> 的值。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>从当前流中读取字节块并将数据写入缓冲区中。</summary>
      <param name="buffer">当此方法返回时，包含指定的字节数组，此数组中 <paramref name="offset" /> 和 (<paramref name="offset" /> + <paramref name="count" /> - 1) 之间的值被从当前流中读取的字符所替换。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始存储当前流中的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <returns>写入缓冲区中的总字节数。 如果当前可用字节数不到所请求的字节数，则这一总字节数可能小于所请求的字节数，或者如果在读取任何字节前已到达流的末尾，则为零。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="offset" /> 的结果小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ObjectDisposedException">当前流实例已关闭。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Span{System.Byte})">
      <summary>从当前内存流读取字节序列，并将内存流中的位置向前移动读取的字节数。</summary>
      <param name="destination">内存的区域。 当此方法返回时，此范围的内容将替换为从当前内存流源读取的字节。</param>
      <returns>读入缓冲区中的总字节数。 如果很多字节当前不可用，则这可小于在缓冲区中分配的字节数；如果已到达内存流结尾，则为零 (0)。</returns>
    </member>
    <member name="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>从当前流异步读取字节的序列，将流中的位置提升读取的字节数，并监视取消请求。</summary>
      <param name="buffer">要写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。 如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
      <exception cref="T:System.InvalidOperationException">之前的读取操作当前正在使用流。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>从当前内存流异步读取字节的序列，将该序列写入 <paramref name="destination" />，按读取的字节数向前移动内存流中的位置，并监视取消请求。</summary>
      <param name="destination">要将数据写入的内存区域。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步读取操作的任务。 其 <see cref="P:System.Threading.Tasks.ValueTask`1.Result" /> 属性的值包含读入 <paramref name="destination" /> 的总字节数。 如果很多字节当前不可用，则结果值可小于在 <paramref name="destination" /> 中分配的字节数；如果已到达内存流结尾，则结果值可以为 0（零）。</returns>
    </member>
    <member name="M:System.IO.MemoryStream.ReadByte">
      <summary>从当前流中读取一个字节。</summary>
      <returns>强制转换为 <see cref="T:System.Int32" /> 的字节；或者如果已到达流的末尾，则为 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">当前流实例已关闭。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>将当前流中的位置设置为指定值。</summary>
      <param name="offset">流内的新位置。 它是相对于 <paramref name="loc" /> 参数的位置，而且可正可负。</param>
      <param name="loc">类型 <see cref="T:System.IO.SeekOrigin" /> 的值，它用作查找参考点。</param>
      <returns>流内的新位置，通过将初始参考点和偏移量合并计算而得。</returns>
      <exception cref="T:System.IO.IOException">试图在流的开始位置之前进行查找。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.IO.SeekOrigin" /> 无效。
或
<paramref name="offset" /> 导致算法溢出。</exception>
      <exception cref="T:System.ObjectDisposedException">当前流实例已关闭。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.SetLength(System.Int64)">
      <summary>将当前流的长度设为指定值。</summary>
      <param name="value">值，通过该值设置长度。</param>
      <exception cref="T:System.NotSupportedException">当前流无法调整大小，而且 <paramref name="value" /> 大于当前容量。
或
当前流不支持写入。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为负或者大于 <see cref="T:System.IO.MemoryStream" /> 的最大长度，其中最大长度为 (<see cref="F:System.Int32.MaxValue" />- origin)，origin 为基础缓冲区中作为流的起点的索引。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ToArray">
      <summary>将流内容写入字节数组，而与 <see cref="P:System.IO.MemoryStream.Position" /> 属性无关。</summary>
      <returns>新的字节数组。</returns>
    </member>
    <member name="M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)">
      <summary>返回从其创建此流的无符号字节数组。 用于指示转换是否成功的返回值。</summary>
      <param name="buffer">用于创建此流的字节数组段。</param>
      <returns>如果转换成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>使用从缓冲区读取的数据将字节块写入当前流。</summary>
      <param name="buffer">从中写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
      <param name="count">最多写入的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">流不支持写入。 有关其他信息，请参见 <see cref="P:System.IO.Stream.CanWrite" />。
或
当前位置到流结尾的距离小于 <paramref name="count" /> 字节，并且无法修改容量。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="offset" /> 的结果小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">当前流实例已关闭。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>将 <paramref name="source" /> 中包含的字节序列写入当前内存流，并按写入的字节数向前移动内存流的当前位置。</summary>
      <param name="source">内存的区域。 此方法将此区域的内容复制到当前内存流。</param>
    </member>
    <member name="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>将字节的序列异步写入当前流，将该流中的当前位置向前移动写入的字节数，并监视取消请求。</summary>
      <param name="buffer">从中写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
      <exception cref="T:System.InvalidOperationException">流正在由前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>将 <paramref name="source" /> 中包含的字节序列异步写入当前内存流，按写入的字节数向前移动该内存流中的当前位置，并监视取消请求。</summary>
      <param name="source">从中写入数据的内存区域。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步写入操作的任务。</returns>
    </member>
    <member name="M:System.IO.MemoryStream.WriteByte(System.Byte)">
      <summary>将一个字节写入当前流中的当前位置。</summary>
      <param name="value">写入的字节。</param>
      <exception cref="T:System.NotSupportedException">流不支持写入。 有关其他信息，请参见 <see cref="P:System.IO.Stream.CanWrite" />。
或
当前位置位于流的末尾，而且容量不能被修改。</exception>
      <exception cref="T:System.ObjectDisposedException">当前流已关闭。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
      <summary>将此内存流的整个内容写入到另一个流中。</summary>
      <param name="stream">要将此内存流写入的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">当前流或目标流已关闭。</exception>
    </member>
    <member name="T:System.IO.Path">
      <summary>对包含文件或目录路径信息的 <see cref="T:System.String" /> 实例执行操作。 这些操作是以跨平台的方式执行的。</summary>
    </member>
    <member name="F:System.IO.Path.AltDirectorySeparatorChar">
      <summary>提供平台特定的替换字符，该替换字符用于在反映分层文件系统组织的路径字符串中分隔目录级别。</summary>
    </member>
    <member name="M:System.IO.Path.ChangeExtension(System.String,System.String)">
      <summary>更改路径字符串的扩展名。</summary>
      <param name="path">要修改的路径信息。 该路径不能包含在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的任何字符。</param>
      <param name="extension">新的扩展名（有或没有前导句点）。 指定 <see langword="null" /> 以从 <paramref name="path" /> 移除现有扩展名。</param>
      <returns>已修改的路径信息。
在基于 Windows 的桌面平台上，如果 <paramref name="path" /> 是 <see langword="null" /> 或空字符串 (“”)，则返回的路径信息是未修改的。 如果 <paramref name="extension" /> 为 <see langword="null" />，则返回的字符串包含指定的路径（其扩展名已移除）。 如果 <paramref name="path" /> 不具有扩展名且 <paramref name="extension" /> 不为 <see langword="null" />，则返回的路径字符串包含追加到 <paramref name="path" /> 结尾的 <paramref name="extension" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String)">
      <summary>将两个字符串组合成一个路径。</summary>
      <param name="path1">要组合的第一个路径。</param>
      <param name="path2">要组合的第二个路径。</param>
      <returns>已组合的路径。 如果指定的路径之一是零长度字符串，则该方法返回其他路径。 如果 <paramref name="path2" /> 包含绝对路径，则该方法返回 <paramref name="path2" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" /> 或 <paramref name="path2" /> 包含一个或多个在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" /> 或 <paramref name="path2" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String)">
      <summary>将三个字符串组合成一个路径。</summary>
      <param name="path1">要组合的第一个路径。</param>
      <param name="path2">要组合的第二个路径。</param>
      <param name="path3">要组合的第三个路径。</param>
      <returns>已组合的路径。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" />、<paramref name="path2" /> 或 <paramref name="path3" /> 包含一个或多个在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" />、<paramref name="path2" /> 或 <paramref name="path3" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)">
      <summary>将四个字符串组合成一个路径。</summary>
      <param name="path1">要组合的第一个路径。</param>
      <param name="path2">要组合的第二个路径。</param>
      <param name="path3">要组合的第三个路径。</param>
      <param name="path4">要组合的第四个路径。</param>
      <returns>已组合的路径。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" />、<paramref name="path2" />、<paramref name="path3" /> 或 <paramref name="path4" /> 包含一个或多个在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" />、<paramref name="path2" />、<paramref name="path3" /> 或 <paramref name="path4" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String[])">
      <summary>将字符串数组组合成一个路径。</summary>
      <param name="paths">由路径的各部分构成的数组。</param>
      <returns>已组合的路径。</returns>
      <exception cref="T:System.ArgumentException">数组中的一个字符串包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的一个或多个无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">数组中的一个字符串为 <see langword="null" />。</exception>
    </member>
    <member name="F:System.IO.Path.DirectorySeparatorChar">
      <summary>提供平台特定的字符，该字符用于在反映分层文件系统组织的路径字符串中分隔目录级别。</summary>
    </member>
    <member name="M:System.IO.Path.EndsInDirectorySeparator(System.ReadOnlySpan{System.Char})">
      <summary>返回一个值，该值指示指定为只读范围的路径是否以目录分隔符结尾。</summary>
      <param name="path">要分析的路径。</param>
      <returns>如果该路径以目录分隔符结尾，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.EndsInDirectorySeparator(System.String)">
      <summary>返回一个值，该值指示指定的路径是否以目录分隔符结尾。</summary>
      <param name="path">要分析的路径。</param>
      <returns>如果该路径以目录分隔符结尾，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.ReadOnlySpan{System.Char})">
      <summary>返回由字符范围表示的指定路径的目录信息。</summary>
      <param name="path">要从中检索目录信息的路径。</param>
      <returns>
        <paramref name="path" /> 的目录信息，如果 <paramref name="path" /> 为 <see langword="null" />空范围或根（例如 ,C: 或\server\share），则为空跨度。</returns>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.String)">
      <summary>返回指定路径字符串的目录信息。</summary>
      <param name="path">文件或目录的路径。</param>
      <returns>
        <paramref name="path" /> 的目录信息；如果 <paramref name="path" /> 表示根目录或为 null，则为 <see langword="null" />。 如果 <paramref name="path" /> 不包含目录信息，则返回 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.ArgumentException">该 <paramref name="path" /> 参数包含无效字符，为空，或仅包含空格。</exception>
      <exception cref="T:System.IO.PathTooLongException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.IO.IOException" />。  
  

            
  
 <paramref name="path" /> 参数超过系统定义的最大长度。</exception>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.ReadOnlySpan{System.Char})">
      <summary>返回由只读字符范围表示的文件路径的扩展名。</summary>
      <param name="path">从中获取扩展名的文件路径。</param>
      <returns>指定路径的扩展名（包括句点“.”）；如果 <paramref name="path" /> 没有扩展信息，则为 <see cref="P:System.ReadOnlySpan`1.Empty" />。</returns>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.String)">
      <summary>返回指定路径字符串的扩展名（包括句点“.”）。</summary>
      <param name="path">从中获取扩展名的路径字符串。</param>
      <returns>指定路径的扩展名（包含句点“.”）、或 <see langword="null" />、或 <see cref="F:System.String.Empty" />。 如果 <paramref name="path" /> 为 <see langword="null" />，则 <see cref="M:System.IO.Path.GetExtension(System.String)" /> 返回 <see langword="null" />。 如果 <paramref name="path" /> 不具有扩展名信息，则 <see cref="M:System.IO.Path.GetExtension(System.String)" /> 返回 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</exception>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})">
      <summary>返回由只读字符范围表示的文件路径的文件名和扩展名。</summary>
      <param name="path">一个只读范围，包含从中获取文件名和扩展名的路径。</param>
      <returns>
        <paramref name="path" /> 中最后的目录分隔符后的字符。</returns>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.String)">
      <summary>返回指定路径字符串的文件名和扩展名。</summary>
      <param name="path">从中获取文件名和扩展名的路径字符串。</param>
      <returns>
        <paramref name="path" /> 中最后的目录分隔符后的字符。 如果 <paramref name="path" /> 的最后一个字符是目录或卷分隔符，则此方法返回 <see cref="F:System.String.Empty" />。 如果 <paramref name="path" /> 为 <see langword="null" />，则此方法返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</exception>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.ReadOnlySpan{System.Char})">
      <summary>返回文件名，该文件名不带由只读字符范围表示的文件路径扩展名。</summary>
      <param name="path">一个只读范围，包含从中获取没有扩展名的文件名的路径。</param>
      <returns>由 <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" /> 返回的只读范围中的字符，但不包括最后一个句点 (.) 及其后面的所有字符。</returns>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.String)">
      <summary>返回不具有扩展名的指定路径字符串的文件名。</summary>
      <param name="path">文件的路径。</param>
      <returns>由 <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" /> 返回的字符串，但不包括最后的句点 (.) 以及之后的所有字符。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String)">
      <summary>返回指定路径字符串的绝对路径。</summary>
      <param name="path">要获取其绝对路径信息的文件或目录。</param>
      <returns>
        <paramref name="path" /> 的完全限定的位置，例如“C:\MyFile.txt”。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是一个零长度字符串，仅包含空格或者包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义一个或多个无效字符。
或
系统无法检索绝对路径。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所需的权限。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 包含一个冒号（“:”），此冒号不是卷标识符（如，“c:\”）的一部分。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String,System.String)">
      <summary>返回完全限定的基本路径和相对路径的绝对路径。</summary>
      <param name="path">连接到 <paramref name="basePath" /> 的相对路径。</param>
      <param name="basePath">完全限定路径的开头。</param>
      <returns>绝对路径。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="basePath" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="basePath" /> 不是完全限定的路径。
或
<paramref name="path" /> 或 <paramref name="basePath" /> 包含无效的路径字符，例如 U+0000。</exception>
    </member>
    <member name="M:System.IO.Path.GetInvalidFileNameChars">
      <summary>获取包含不允许在文件名中使用的字符的数组。</summary>
      <returns>包含不允许在文件名中使用的字符的数组。</returns>
    </member>
    <member name="M:System.IO.Path.GetInvalidPathChars">
      <summary>获取包含不允许在路径名中使用的字符的数组。</summary>
      <returns>包含不允许在路径名中使用的字符的数组。</returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.ReadOnlySpan{System.Char})">
      <summary>从指定字符范围包含的路径中获取根目录信息。</summary>
      <param name="path">字符的只读范围，包含要从中获取根目录信息的路径。</param>
      <returns>字符的只读范围，包含 <paramref name="path" /> 的根目录。</returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.String)">
      <summary>从指定字符串包含的路径中获取根目录信息。</summary>
      <param name="path">一个字符串，包含要从中获取根目录信息的路径。</param>
      <returns>如果为根路径，则为 <paramref name="path" /> 的根目录。
或
如果 <paramref name="path" /> 不包含根目录信息，则为 <see cref="F:System.String.Empty" />。
或
如果 <paramref name="path" /> 为 <see langword="null" /> 或实际上为空，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">仅限 .NET Framework：<paramref name="path" /> 包含一个或多个在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的无效字符。
或
仅限 .NET Framework：<see cref="F:System.String.Empty" /> 已传递给 <paramref name="path" />。</exception>
    </member>
    <member name="M:System.IO.Path.GetRandomFileName">
      <summary>返回随机文件夹名或文件名。</summary>
      <returns>随机文件夹名或文件名。</returns>
    </member>
    <member name="M:System.IO.Path.GetRelativePath(System.String,System.String)">
      <summary>返回从一个路径到另一个路径的相对路径。</summary>
      <param name="relativeTo">相对于结果的源路径。 此路径始终被视为目录。</param>
      <param name="path">目标路径。</param>
      <returns>相对路径，如果路径不共享同一根，则为 <paramref name="path" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relativeTo" /> 或 <paramref name="path" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.Path.GetTempFileName">
      <summary>在磁盘上创建一个唯一命名的零字节临时文件，并返回该文件的完整路径。</summary>
      <returns>临时文件的完整路径。</returns>
      <exception cref="T:System.IO.IOException">发生 I/O 错误，例如没有提供唯一的临时文件名。
或
此方法无法创建临时文件。</exception>
    </member>
    <member name="M:System.IO.Path.GetTempPath">
      <summary>返回当前用户的临时文件夹的路径。</summary>
      <returns>临时文件夹的路径，以反斜杠结尾。</returns>
      <exception cref="T:System.Security.SecurityException">调用方没有所需的权限。</exception>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.ReadOnlySpan{System.Char})">
      <summary>确定指定字符范围表示的路径是否包含文件扩展名。</summary>
      <param name="path">用于搜索扩展名的路径。</param>
      <returns>如果路径中最后一个目录分隔符或卷分隔符之后的字符包括句点 (.)，并且后面跟有一个或多个字符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.String)">
      <summary>确定路径是否包括文件扩展名。</summary>
      <param name="path">用于搜索扩展名的路径。</param>
      <returns>如果路径中最后一个目录分隔符（\\ 或 /）或卷分隔符 (:) 之后的字符包括句点 (.)，并且后面跟有一个或多个字符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</exception>
    </member>
    <member name="F:System.IO.Path.InvalidPathChars">
      <summary>提供平台特定的字符数组，这些字符不能在传递到 <see cref="T:System.IO.Path" /> 类的成员的路径字符串自变量中指定。</summary>
    </member>
    <member name="M:System.IO.Path.IsPathFullyQualified(System.ReadOnlySpan{System.Char})">
      <summary>返回一个值，该值指示由指定字符范围表示的文件路径是否固定到特定驱动器或 UNC 路径。</summary>
      <param name="path">文件路径。</param>
      <returns>如果路径固定到特定驱动器或 UNC 路径，为 <see langword="true" />；如果路径相对于当前驱动器或工作目录，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.IsPathFullyQualified(System.String)">
      <summary>返回一个值，该值指示指定的文件路径是否固定到特定驱动器或 UNC 路径。</summary>
      <param name="path">文件路径。</param>
      <returns>如果路径固定到特定驱动器或 UNC 路径，为 <see langword="true" />；如果路径相对于当前驱动器或工作目录，则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.ReadOnlySpan{System.Char})">
      <summary>返回一个值，该值指示表示文件路径的指定字符范围是否包含根。</summary>
      <param name="path">要测试的路径。</param>
      <returns>如果 <paramref name="path" /> 包含一个根，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.String)">
      <summary>返回一个值，该值指示指定的路径字符串是否包含根。</summary>
      <param name="path">要测试的路径。</param>
      <returns>如果 <paramref name="path" /> 包含一个根，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</exception>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>将两个路径组件连接到一个路径中。</summary>
      <param name="path1">包含要加入的第一个路径的字符范围。</param>
      <param name="path2">包含要加入的第二个路径的字符范围。</param>
      <returns>已组合的路径。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>将三个路径组件连接到一个路径中。</summary>
      <param name="path1">包含要加入的第一个路径的字符范围。</param>
      <param name="path2">包含要加入的第二个路径的字符范围。</param>
      <param name="path3">包含要加入的第三个路径的字符范围。</param>
      <returns>连接的路径。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>将四个路径组件连接到一个路径中。</summary>
      <param name="path1">包含要加入的第一个路径的字符范围。</param>
      <param name="path2">包含要加入的第二个路径的字符范围。</param>
      <param name="path3">包含要加入的第三个路径的字符范围。</param>
      <param name="path4">包含要联接的第四个路径的字符跨度。</param>
      <returns>连接的路径。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String)">
      <summary>将两个路径连接到一个路径中。</summary>
      <param name="path1">要联接的第一个路径。</param>
      <param name="path2">要联接的第二个路径。</param>
      <returns>连接的路径。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String,System.String)">
      <summary>将三个路径连接到一个路径中。</summary>
      <param name="path1">要联接的第一个路径。</param>
      <param name="path2">要联接的第二个路径。</param>
      <param name="path3">要联接的第三个路径。</param>
      <returns>连接的路径。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String,System.String,System.String)">
      <summary>将四个路径连接到一个路径中。</summary>
      <param name="path1">要联接的第一个路径。</param>
      <param name="path2">要联接的第二个路径。</param>
      <param name="path3">要联接的第三个路径。</param>
      <param name="path4">要联接的第四个路径。</param>
      <returns>连接的路径。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String[])">
      <summary>将路径数组连接到一个路径中。</summary>
      <param name="paths">路径的数组。</param>
      <returns>连接的路径。</returns>
    </member>
    <member name="F:System.IO.Path.PathSeparator">
      <summary>用于在环境变量中分隔路径字符串的平台特定的分隔符。</summary>
    </member>
    <member name="M:System.IO.Path.TrimEndingDirectorySeparator(System.ReadOnlySpan{System.Char})">
      <summary>剪裁一个超出指定路径根目录的尾随目录分隔符。</summary>
      <param name="path">要剪裁的路径。</param>
      <returns>不带任何尾随目录分隔符的 <paramref name="path" />。</returns>
    </member>
    <member name="M:System.IO.Path.TrimEndingDirectorySeparator(System.String)">
      <summary>剪裁一个超出指定路径根目录的尾随目录分隔符。</summary>
      <param name="path">要剪裁的路径。</param>
      <returns>不带任何尾随目录分隔符的 <paramref name="path" />。</returns>
    </member>
    <member name="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
      <summary>尝试将两个路径组件连接到一个预分配的字符范围，并返回一个值，该值指示操作是否成功。</summary>
      <param name="path1">包含要加入的第一个路径的字符范围。</param>
      <param name="path2">包含要加入的第二个路径的字符范围。</param>
      <param name="path3">包含要加入的第三个路径的字符范围。</param>
      <param name="destination">用于保存连接的路径的字符范围。</param>
      <param name="charsWritten">方法返回时，为一个指示写入 <paramref name="destination" /> 的字符数的值。</param>
      <returns>如果此串联运算成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
      <summary>尝试将两个路径组件连接到一个预分配的字符范围，并返回一个值，该值指示操作是否成功。</summary>
      <param name="path1">包含要加入的第一个路径的字符范围。</param>
      <param name="path2">包含要加入的第二个路径的字符范围。</param>
      <param name="destination">用于保存连接的路径的字符范围。</param>
      <param name="charsWritten">方法返回时，为一个指示写入 <paramref name="destination" /> 的字符数的值。</param>
      <returns>如果此串联运算成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.IO.Path.VolumeSeparatorChar">
      <summary>提供平台特定的卷分隔符。</summary>
    </member>
    <member name="T:System.IO.StreamReader">
      <summary>实现一个 <see cref="T:System.IO.TextReader" />，使其以一种特定的编码从字节流中读取字符。</summary>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream)">
      <summary>为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例。</summary>
      <param name="stream">要读取的流。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支持读取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>用指定的字节顺序标记检测选项，为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的一个新实例。</summary>
      <param name="stream">要读取的流。</param>
      <param name="detectEncodingFromByteOrderMarks">指示是否在文件头查找字节顺序标记。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支持读取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>用指定的字符编码为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的一个新实例。</summary>
      <param name="stream">要读取的流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支持读取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例，带有指定的字符编码和字节顺序标记检测选项。</summary>
      <param name="stream">要读取的流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <param name="detectEncodingFromByteOrderMarks">指示是否在文件头查找字节顺序标记。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支持读取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例，带有指定的字符编码、字节顺序标记检测选项和缓冲区大小。</summary>
      <param name="stream">要读取的流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <param name="detectEncodingFromByteOrderMarks">指示是否在文件头查找字节顺序标记。</param>
      <param name="bufferSize">最小缓冲区大小。</param>
      <exception cref="T:System.ArgumentException">流不支持读取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 小于或等于零。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)">
      <summary>为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例，带有指定的字符编码、字节顺序标记检测选项和缓冲区大小，有选择性的打开流。</summary>
      <param name="stream">要读取的流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <param name="detectEncodingFromByteOrderMarks">如果要在文件开头查找字节顺序标记，则为<see langword="true" /> ；否则为 <see langword="false" />。</param>
      <param name="bufferSize">最小缓冲区大小。</param>
      <param name="leaveOpen">如果在释放 <see cref="T:System.IO.StreamReader" /> 对象后保持流处于打开状态，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String)">
      <summary>为指定的文件名初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例。</summary>
      <param name="path">要读取的完整文件路径。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">无法找到该文件。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，例如位于未映射的驱动器上。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包括不正确或无效的文件名、目录名或卷标的语法。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Boolean)">
      <summary>为指定的文件名初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例，带有指定的字节顺序标记检测选项。</summary>
      <param name="path">要读取的完整文件路径。</param>
      <param name="detectEncodingFromByteOrderMarks">指示是否在文件头查找字节顺序标记。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">无法找到该文件。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，例如位于未映射的驱动器上。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包括不正确或无效的文件名、目录名或卷标的语法。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding)">
      <summary>用指定的字符编码，为指定的文件名初始化 <see cref="T:System.IO.StreamReader" /> 类的一个新实例。</summary>
      <param name="path">要读取的完整文件路径。</param>
      <param name="encoding">要使用的字符编码。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">无法找到该文件。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，例如位于未映射的驱动器上。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 包括不正确或无效的文件名、目录名或卷标的语法。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean)">
      <summary>为指定的文件名初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例，带有指定的字符编码和字节顺序标记检测选项。</summary>
      <param name="path">要读取的完整文件路径。</param>
      <param name="encoding">要使用的字符编码。</param>
      <param name="detectEncodingFromByteOrderMarks">指示是否在文件头查找字节顺序标记。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">无法找到该文件。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，例如位于未映射的驱动器上。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 包括不正确或无效的文件名、目录名或卷标的语法。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>为指定的文件名初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例，带有指定字符编码、字节顺序标记检测选项和缓冲区大小。</summary>
      <param name="path">要读取的完整文件路径。</param>
      <param name="encoding">要使用的字符编码。</param>
      <param name="detectEncodingFromByteOrderMarks">指示是否在文件头查找字节顺序标记。</param>
      <param name="bufferSize">最小缓冲区大小（以 16 位字符的数目为单位）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">无法找到该文件。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，例如位于未映射的驱动器上。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 包含不正确或无效的文件名、目录名或卷标语法。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> 小于或等于零。</exception>
    </member>
    <member name="P:System.IO.StreamReader.BaseStream">
      <summary>返回基础流。</summary>
      <returns>基础流。</returns>
    </member>
    <member name="M:System.IO.StreamReader.Close">
      <summary>关闭 <see cref="T:System.IO.StreamReader" /> 对象和基础流，并释放与读取器关联的所有系统资源。</summary>
    </member>
    <member name="P:System.IO.StreamReader.CurrentEncoding">
      <summary>获取当前 <see cref="T:System.IO.StreamReader" /> 对象正在使用的当前字符编码。</summary>
      <returns>当前读取器所使用的当前字符编码。 第一次调用 <see cref="T:System.IO.StreamReader" /> 的任何 <see cref="Overload:System.IO.StreamReader.Read" /> 方法后，该值可能会不同，因为直到第一次调用 <see cref="Overload:System.IO.StreamReader.Read" /> 方法时，才会进行编码的自动检测。</returns>
    </member>
    <member name="M:System.IO.StreamReader.DiscardBufferedData">
      <summary>清除内部缓冲区。</summary>
    </member>
    <member name="M:System.IO.StreamReader.Dispose(System.Boolean)">
      <summary>关闭基础流，释放 <see cref="T:System.IO.StreamReader" /> 使用的未托管资源，同时还可以根据需要释放托管资源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.IO.StreamReader.EndOfStream">
      <summary>获取一个值，该值表示当前的流位置是否在流的末尾。</summary>
      <returns>如果当前流位置位于流的末尾，则为<see langword="true" /> ；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">基础流已释放。</exception>
    </member>
    <member name="F:System.IO.StreamReader.Null">
      <summary>空流周围的 <see cref="T:System.IO.StreamReader" />。</summary>
    </member>
    <member name="M:System.IO.StreamReader.Peek">
      <summary>返回下一个可用的字符，但不使用它。</summary>
      <returns>为表示下一个要读取的字符的整数，或者，如果没有要读取的字符或该流不支持查找，则为 -1。</returns>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read">
      <summary>读取输入流中的下一个字符并使该字符的位置提升一个字符。</summary>
      <returns>输入流中表示为 <see cref="T:System.Int32" /> 对象的下一个字符。如果不再有可用的字符，则为 -1。</returns>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>从当前流中将指定的最多个字符读到指定索引位置开始的缓冲区。</summary>
      <param name="buffer">当此方法返回时，包含指定字符数组，此数组中 <paramref name="index" /> 和 (<c>index + count - 1</c>) 之间的值被从当前源中读取的字符所替换。</param>
      <param name="index">开始写入的 <paramref name="buffer" /> 的索引。</param>
      <param name="count">最多读取的字符数。</param>
      <returns>已读取的字符数，或者如果已到达流的末尾并且未读取任何数据，则为 0。 该数小于或等于 <paramref name="count" /> 参数，具体取决于流中是否有可用的数据。</returns>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误，如流被关闭。</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Span{System.Char})">
      <summary>将当前流中的字符读入范围。</summary>
      <param name="buffer">此方法返回时，包含指定的字符范围，这些字符由从当前源中读取的字符替换。</param>
      <returns>已读取的字符数，或者如果已到达流结尾并且未读取任何数据，则为 0。 该数小于或等于 <paramref name="buffer" /> 长度，具体取决于流中是否有可用的数据。</returns>
      <exception cref="T:System.IO.IOException">从流中读取的字符数大于 <paramref name="buffer" /> 长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>从当前流中异步读取指定的最大字符，并且从指定的索引位置开始将该数据写入缓冲区。</summary>
      <param name="buffer">当此方法返回时，包含指定的字符数组，此数组中 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值被从当前源中读取的字符所替换。</param>
      <param name="index">在 <paramref name="buffer" /> 中开始写入的位置。</param>
      <param name="count">要读取的最大字符数。 如果在将指定的字符数写入缓冲区之前已到达流结尾，则将返回当前方法。</param>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数的值包含读入缓冲区的总字符数。 如果当前可用字符数少于所请求的字符数，则该结果值可小于所请求的字符数；如果已到达流结尾时，则为 0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
      <exception cref="T:System.InvalidOperationException">以前的读取操作当前正在使用读取器。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>将当前流中的字符异步读入内存块。</summary>
      <param name="buffer">此方法返回时，包含指定的字符内存块，这些字符由从当前源中读取的字符替换。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步读取操作的值任务。 值任务的类型参数的值包含已读取的字符数，或者如果已到达流结尾并且未读取任何数据，则为 0。 该数小于或等于 <paramref name="buffer" /> 长度，具体取决于流中是否有可用的数据。</returns>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>从当前流中读取指定数目的字符并从指定索引开始将该数据写入缓冲区。</summary>
      <param name="buffer">当此方法返回时，包含指定字符数组，此数组中 <paramref name="index" /> 和 (<c>index + count - 1</c>) 之间的值被从当前源中读取的字符所替换。</param>
      <param name="index">在 <paramref name="buffer" /> 中开始写入的位置。</param>
      <param name="count">最多读取的字符数。</param>
      <returns>已读取的字符数。 该数字将小于或等于 <paramref name="count" />，取决于是否所有的输入字符都已读取。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.StreamReader" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlock(System.Span{System.Char})">
      <summary>从当前流中读取字符并将数据写入缓冲区。</summary>
      <param name="buffer">此方法返回时，包含指定的字符范围，这些字符由从当前源中读取的字符替换。</param>
      <returns>已读取的字符数。 该数字将小于或等于 <paramref name="buffer" /> 长度，具体取决于是否已读取所有输入字符。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.StreamReader" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>从当前流中异步读取指定的最大字符，并且从指定的索引位置开始将该数据写入缓冲区。</summary>
      <param name="buffer">当此方法返回时，包含指定的字符数组，此数组中 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值被从当前源中读取的字符所替换。</param>
      <param name="index">在 <paramref name="buffer" /> 中开始写入的位置。</param>
      <param name="count">最多读取的字符数。 如果在将指定的字符数写入到缓冲区之前就已经达到流结尾，则将返回此方法。</param>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数的值包含读入缓冲区的总字符数。 如果当前可用字符数少于所请求的字符数，则该结果值可小于所请求的字符数；如果已到达流结尾时，则为 0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
      <exception cref="T:System.InvalidOperationException">以前的读取操作当前正在使用读取器。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>从当前流中异步读取字符并将数据写入缓冲区。</summary>
      <param name="buffer">此方法返回时，包含指定的字符内存块，这些字符由从当前源中读取的字符替换。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步读取操作的值任务。 值任务的类型参数的值包含读入缓冲区的总字符数。 如果当前可用字符数少于所请求的字符数，则该结果值可小于所请求的字符数；如果已到达流结尾时，则为 0（零）。</returns>
    </member>
    <member name="M:System.IO.StreamReader.ReadLine">
      <summary>从当前流中读取一行字符并将数据作为字符串返回。</summary>
      <returns>输入流中的下一行；如果到达了输入流的末尾，则为 <see langword="null" />。</returns>
      <exception cref="T:System.OutOfMemoryException">没有足够的内存来为返回的字符串分配缓冲区。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadLineAsync">
      <summary>从当前流中异步读取一行字符并将数据作为字符串返回。</summary>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数的值包含来自流的下一行；如果读取了所有字符，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字符数大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
      <exception cref="T:System.InvalidOperationException">以前的读取操作当前正在使用读取器。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEnd">
      <summary>从流的当前位置到末尾读取所有字符。</summary>
      <returns>字符串形式的流的其余部分（从当前位置到末尾）。 如果当前位置位于流的末尾，则返回空字符串 (“”)。</returns>
      <exception cref="T:System.OutOfMemoryException">没有足够的内存来为返回的字符串分配缓冲区。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEndAsync">
      <summary>异步读取从当前位置到流的结尾的所有字符并将它们作为一个字符串返回。</summary>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数值包括带有从流的当前位置到结尾的字符的字符串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">字符数大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
      <exception cref="T:System.InvalidOperationException">以前的读取操作当前正在使用读取器。</exception>
    </member>
    <member name="T:System.IO.StreamWriter">
      <summary>实现一个 <see cref="T:System.IO.TextWriter" />，使其以一种特定的编码向流中写入字符。</summary>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream)">
      <summary>使用 UTF-8 编码及默认的缓冲区大小，为指定的流初始化 <see cref="T:System.IO.StreamWriter" /> 类的新实例。</summary>
      <param name="stream">要写入的流。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可写。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>使用指定的编码及默认的缓冲区大小，为指定的流初始化 <see cref="T:System.IO.StreamWriter" /> 类的新实例。</summary>
      <param name="stream">要写入的流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可写。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
      <summary>使用指定的编码及缓冲区大小，为指定的流初始化 <see cref="T:System.IO.StreamWriter" /> 类的新实例。</summary>
      <param name="stream">要写入的流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <param name="bufferSize">缓冲区大小（以字节为单位）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可写。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
      <summary>使用指定的编码和缓冲区大小，为指定的流初始化 <see cref="T:System.IO.StreamWriter" /> 类的新实例，并可以选择保持流处于打开状态。</summary>
      <param name="stream">要写入的流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <param name="bufferSize">缓冲区大小（以字节为单位）。</param>
      <param name="leaveOpen">如果在释放 <see cref="T:System.IO.StreamWriter" /> 对象后保持流处于打开状态，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可写。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String)">
      <summary>用默认编码和缓冲区大小，为指定的文件初始化 <see cref="T:System.IO.StreamWriter" /> 类的一个新实例。</summary>
      <param name="path">要写入的完整文件路径。 <paramref name="path" /> 可以是一个文件名。</param>
      <exception cref="T:System.UnauthorizedAccessException">拒绝访问。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")。
或
<paramref name="path" /> 包含系统设备的名称（com1、com2 等等）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含不正确或无效的文件名、目录名或卷标签的语法。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean)">
      <summary>用默认编码和缓冲区大小，为指定的文件初始化 <see cref="T:System.IO.StreamWriter" /> 类的一个新实例。 如果该文件存在，则可以将其覆盖或向其追加。 如果该文件不存在，此构造函数将创建一个新文件。</summary>
      <param name="path">要写入的完整文件路径。</param>
      <param name="append">若要追加数据到该文件中，则为 <see langword="true" />；若要覆盖该文件，则为 <see langword="false" />。 如果指定的文件不存在，该参数无效，且构造函数将创建一个新文件。</param>
      <exception cref="T:System.UnauthorizedAccessException">拒绝访问。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空。
或
<paramref name="path" /> 包含系统设备的名称（com1、com2 等等）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含不正确或无效的文件名、目录名或卷标签的语法。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
      <summary>使用指定的编码和默认的缓冲区大小，为指定的文件初始化 <see cref="T:System.IO.StreamWriter" /> 类的新实例。 如果该文件存在，则可以将其覆盖或向其追加。 如果该文件不存在，此构造函数将创建一个新文件。</summary>
      <param name="path">要写入的完整文件路径。</param>
      <param name="append">若要追加数据到该文件中，则为 <see langword="true" />；若要覆盖该文件，则为 <see langword="false" />。 如果指定的文件不存在，该参数无效，且构造函数将创建一个新文件。</param>
      <param name="encoding">要使用的字符编码。</param>
      <exception cref="T:System.UnauthorizedAccessException">拒绝访问。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空。
或
<paramref name="path" /> 包含系统设备的名称（com1、com2 等等）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含不正确或无效的文件名、目录名或卷标签的语法。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
      <summary>使用指定编码和缓冲区大小，为指定路径上的指定文件初始化 <see cref="T:System.IO.StreamWriter" /> 类的新实例。 如果该文件存在，则可以将其覆盖或向其追加。 如果该文件不存在，此构造函数将创建一个新文件。</summary>
      <param name="path">要写入的完整文件路径。</param>
      <param name="append">若要追加数据到该文件中，则为 <see langword="true" />；若要覆盖该文件，则为 <see langword="false" />。 如果指定的文件不存在，该参数无效，且构造函数将创建一个新文件。</param>
      <param name="encoding">要使用的字符编码。</param>
      <param name="bufferSize">缓冲区大小（以字节为单位）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")。
或
<paramref name="path" /> 包含系统设备的名称（com1、com2 等等）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 为负数。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含不正确或无效的文件名、目录名或卷标签的语法。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">拒绝访问。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
    </member>
    <member name="P:System.IO.StreamWriter.AutoFlush">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.IO.StreamWriter" /> 在每次调用 <see cref="M:System.IO.StreamWriter.Write(System.Char)" /> 之后是否都将其缓冲区刷新到基础流。</summary>
      <returns>强制 <see cref="T:System.IO.StreamWriter" /> 刷新其缓冲区时，为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.StreamWriter.BaseStream">
      <summary>获取同后备存储连接的基础流。</summary>
      <returns>此 <see langword="StreamWriter" /> 正在写入的基础流。</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Close">
      <summary>关闭当前 <see langword="StreamWriter" /> 对象和基础流。</summary>
      <exception cref="T:System.Text.EncoderFallbackException">当前编码不支持显示半个 Unicode 代理项对。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Dispose(System.Boolean)">
      <summary>使所有缓冲数据写入基础流，释放 <see cref="T:System.IO.StreamWriter" /> 使用的非托管资源，同时还可以根据需要释放受管理资源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
      <exception cref="T:System.Text.EncoderFallbackException">当前编码不支持显示半个 Unicode 代理项对。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.DisposeAsync">
      <summary>将所有缓冲数据异步写入基础流，并释放 <see cref="T:System.IO.StreamWriter" /> 使用的非管理资源。</summary>
      <returns>一个表示异步释放操作的任务。</returns>
    </member>
    <member name="P:System.IO.StreamWriter.Encoding">
      <summary>获取在其中写入输出的 <see cref="T:System.Text.Encoding" />。</summary>
      <returns>在当前实例的构造函数中指定的 <see cref="T:System.Text.Encoding" />；或者如果未指定编码，则为 <see cref="T:System.Text.UTF8Encoding" />。</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Flush">
      <summary>清理当前写入器的所有缓冲区，并使所有缓冲数据写入基础流。</summary>
      <exception cref="T:System.ObjectDisposedException">当前编写器已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">当前编码不支持显示半个 Unicode 代理项对。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.FlushAsync">
      <summary>异步清除此流的所有缓冲区并导致所有缓冲数据都写入基础设备中。</summary>
      <returns>表示异步刷新操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
    </member>
    <member name="F:System.IO.StreamWriter.Null">
      <summary>提供 <see langword="StreamWriter" />，它不带任何可写入但无法从中读取的后备存储。</summary>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char)">
      <summary>将字符写入流。</summary>
      <param name="value">要写入流中的字符。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 为 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且当前编写器已关闭。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 为 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且由于 <see cref="T:System.IO.StreamWriter" /> 位于基础固定大小流的结尾，缓冲区的内容无法写入该流。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[])">
      <summary>将字符数组写入流。</summary>
      <param name="buffer">包含要写入的数据的字符数组。 如果 <paramref name="buffer" /> 为 <see langword="null" />，则不写入任何内容。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 为 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且当前编写器已关闭。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 为 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且由于 <see cref="T:System.IO.StreamWriter" /> 位于基础固定大小流的结尾，缓冲区的内容无法写入该流。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>将字符的子数组写入流。</summary>
      <param name="buffer">包含要写入的数据的字符数组。</param>
      <param name="index">在开始读取数据时缓冲区中的字符位置。</param>
      <param name="count">要写入的最大字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 为 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且当前编写器已关闭。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 为 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且由于 <see cref="T:System.IO.StreamWriter" /> 位于基础固定大小流的结尾，缓冲区的内容无法写入该流。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>将字符范围写流。</summary>
      <param name="buffer">要写入的字符范围。</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String)">
      <summary>将字符串写入流。</summary>
      <param name="value">要写入流的字符串。 如果 <paramref name="value" /> 为 null，则不写入任何内容。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 为 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且当前编写器已关闭。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 为 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且由于 <see cref="T:System.IO.StreamWriter" /> 位于基础固定大小流的结尾，缓冲区的内容无法写入该流。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object)">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 方法相同的语义将格式化字符串写入流。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要格式化和写入的对象。</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object,System.Object)">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 方法相同的语义将格式化字符串写入流。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要格式化和写入的第一个对象。</param>
      <param name="arg1">要格式化和写入的第二个对象。</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> 方法相同的语义将格式化字符串写入流。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要格式化和写入的第一个对象。</param>
      <param name="arg1">要格式化和写入的第二个对象。</param>
      <param name="arg2">要设置格式和写入的第三个对象。</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object[])">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object[])" /> 方法相同的语义将格式化字符串写入流。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg">一个对象数组，其中包含零个或多个要设置格式和写入的对象。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char)">
      <summary>将字符异步写入该流。</summary>
      <param name="value">要写入流中的字符。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">流编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">流编写器正在由其前一次写入操作使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>将字符的子数组异步写入该流。</summary>
      <param name="buffer">包含要写入的数据的字符数组。</param>
      <param name="index">在开始读取数据时缓冲区中的字符位置。</param>
      <param name="count">要写入的最大字符数。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加 <paramref name="count" /> 大于缓冲区长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ObjectDisposedException">流编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">流编写器正在由其前一次写入操作使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>将字符内存区域异步写入该流。</summary>
      <param name="buffer">要写入流的字符存储区域。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步写入操作的任务。</returns>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.String)">
      <summary>将字符串异步写入该流。</summary>
      <param name="value">要写入流的字符串。 如果 <paramref name="value" /> 为 <see langword="null" />，则不写入任何内容。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">流编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">流编写器正在由其前一次写入操作使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>将字符范围的文本表示形式写入该流，后跟行结束符。</summary>
      <param name="buffer">要写入流中的字符范围。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String)">
      <summary>将字符串写入该流，后跟行结束符。</summary>
      <param name="value">要写入的字符串。 如果 <paramref name="value" /> 为 <see langword="null" />，则只写入行终止符。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object)">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 方法相同的语义将格式化字符串和新行写入流。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要格式化和写入的对象。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 方法相同的语义将格式化字符串和新行写入流。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要格式化和写入的第一个对象。</param>
      <param name="arg1">要格式化和写入的第二个对象。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 相同的语义将格式化字符串和新行写出流。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要格式化和写入的第一个对象。</param>
      <param name="arg1">要格式化和写入的第二个对象。</param>
      <param name="arg2">要设置格式和写入的第三个对象。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object[])">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 相同的语义将格式化字符串和新行写出流。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg">一个对象数组，其中包含零个或多个要设置格式和写入的对象。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync">
      <summary>将行结束符异步写入流。</summary>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">流编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">流编写器正在由其前一次写入操作使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char)">
      <summary>将字符异步写入流，后跟行结束符。</summary>
      <param name="value">要写入流中的字符。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">流编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">流编写器正在由其前一次写入操作使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>将字符的子数组异步写入流，后跟行结束符。</summary>
      <param name="buffer">要从中写出数据的字符数组。</param>
      <param name="index">在开始读取数据时缓冲区中的字符位置。</param>
      <param name="count">要写入的最大字符数。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加 <paramref name="count" /> 大于缓冲区长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ObjectDisposedException">流编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">流编写器正在由其前一次写入操作使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>将字符内存区域的文本表示形式异步写入流，后跟行结束符。</summary>
      <param name="buffer">要写入流的字符存储区域。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步写入操作的任务。</returns>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.String)">
      <summary>将字符串异步写入流，后跟行结束符。</summary>
      <param name="value">要写入的字符串。 如果值为 <see langword="null" />，则只写入行终止符。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">流编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">流编写器正在由其前一次写入操作使用。</exception>
    </member>
    <member name="T:System.IO.StringReader">
      <summary>实现从字符串读取的 <see cref="T:System.IO.TextReader" />。</summary>
    </member>
    <member name="M:System.IO.StringReader.#ctor(System.String)">
      <summary>初始化从指定的字符串读取的 <see cref="T:System.IO.StringReader" /> 类的新实例。</summary>
      <param name="s">应将 <see cref="T:System.IO.StringReader" /> 初始化为的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StringReader.Close">
      <summary>关闭 <see cref="T:System.IO.StringReader" />。</summary>
    </member>
    <member name="M:System.IO.StringReader.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.IO.StringReader" /> 使用的非托管资源，并选择性地释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.StringReader.Peek">
      <summary>返回下一个可用字符，但不使用它。</summary>
      <returns>一个表示下一个要读取的字符的整数; 如果没有更多可用的字符或该流不支持查找，则为-1。</returns>
      <exception cref="T:System.ObjectDisposedException">当前读取器已关闭。</exception>
    </member>
    <member name="M:System.IO.StringReader.Read">
      <summary>读取输入字符串中的下一个字符，并将字符位置提升一个字符。</summary>
      <returns>基础字符串中的下一个字符; 如果没有更多可用字符，则为-1。</returns>
      <exception cref="T:System.ObjectDisposedException">当前读取器已关闭。</exception>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>读取输入字符串中的字符块，并将字符位置提升 <paramref name="count" />。</summary>
      <param name="buffer">当此方法返回时，包含指定的字符数组，此数组中 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值被从当前源中读取的字符所替换。</param>
      <param name="index">缓冲区中的起始索引。</param>
      <param name="count">要读取的字符数。</param>
      <returns>读入缓冲区的总字符数。 如果当前没有可用的字符，则此值可能小于所请求的字符数; 如果已到达基础字符串的末尾，则为零。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ObjectDisposedException">当前读取器已关闭。</exception>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Span{System.Char})">
      <summary>从当前位置开始读取输入字符串中的所有字符，并将当前位置前移到输入字符串的末尾。</summary>
      <param name="buffer">此方法返回时，包含从当前源中读取的字符。 如果读取的总字符数为零，则范围将保持不变。</param>
      <returns>读入缓冲区的总字符数。</returns>
      <exception cref="T:System.ObjectDisposedException">当前字符串读取器实例已关闭。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>从当前字符串中异步读取指定的最大字符数并从指定索引处开始将数据写入缓冲区。</summary>
      <param name="buffer">当此方法返回时，包含指定的字符数组，此数组中 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值被从当前源中读取的字符所替换。</param>
      <param name="index">在 <paramref name="buffer" /> 中开始写入的位置。</param>
      <param name="count">要读取的最大字符数。 如果在将指定的字符数写入缓冲区之前已到达字符串的末尾，则该方法将返回。</param>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。 如果当前可用字节数小于所请求的字节数，则结果值可能小于所请求的字节数，或者如果已到达字符串的末尾，则为0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.ObjectDisposedException">字符串读取器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">以前的读取操作当前正在使用读取器。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>从当前位置开始，异步读取输入字符串中的所有字符，并将当前位置前移到输入字符串的末尾。</summary>
      <param name="buffer">此方法返回时，包含从当前源中读取的字符。</param>
      <param name="cancellationToken">要监视的取消请求标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数的值包含读入缓冲区的总字符数。</returns>
    </member>
    <member name="M:System.IO.StringReader.ReadBlock(System.Span{System.Char})">
      <summary>从当前位置开始读取输入字符串中的所有字符，并将当前位置前移到输入字符串的末尾。</summary>
      <param name="buffer">此方法返回时，包含从当前源中读取的字符。 如果读取的总字符数为零，则范围将保持不变。</param>
      <returns>读入缓冲区的总字符数。</returns>
      <exception cref="T:System.ObjectDisposedException">当前字符串读取器实例已关闭。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>从当前字符串中异步读取指定的最大字符数并从指定索引处开始将数据写入缓冲区。</summary>
      <param name="buffer">当此方法返回时，包含指定的字符数组，此数组中 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值被从当前源中读取的字符所替换。</param>
      <param name="index">在 <paramref name="buffer" /> 中开始写入的位置。</param>
      <param name="count">要读取的最大字符数。 如果在将指定的字符数写入缓冲区之前已到达字符串的末尾，则该方法将返回。</param>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。 如果当前可用字节数小于所请求的字节数，则结果值可能小于所请求的字节数，或者如果已到达字符串的末尾，则为0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.ObjectDisposedException">字符串读取器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">以前的读取操作当前正在使用读取器。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>从当前位置开始，异步读取输入字符串中的所有字符，并将当前位置前移到输入字符串的末尾。</summary>
      <param name="buffer">此方法返回时，包含从当前源中读取的字符。 如果读取的总字符数为零，则范围将保持不变。</param>
      <param name="cancellationToken">要监视的取消请求标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数的值包含读入缓冲区的总字符数。</returns>
    </member>
    <member name="M:System.IO.StringReader.ReadLine">
      <summary>从当前字符串中读取一行字符并将数据作为字符串返回。</summary>
      <returns>当前字符串中的下一行; 如果到达字符串的末尾，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ObjectDisposedException">当前读取器已关闭。</exception>
      <exception cref="T:System.OutOfMemoryException">没有足够的内存来为返回的字符串分配缓冲区。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadLineAsync">
      <summary>从当前字符串中异步读取一行字符并将数据作为字符串返回。</summary>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数的值包含来自字符串读取器的下一行，或者如果已读取了所有字符，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字符数大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">字符串读取器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">以前的读取操作当前正在使用读取器。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEnd">
      <summary>读取从当前位置到字符串末尾的所有字符并将它们作为单个字符串返回。</summary>
      <returns>从当前位置到基础字符串末尾的内容。</returns>
      <exception cref="T:System.OutOfMemoryException">没有足够的内存来为返回的字符串分配缓冲区。</exception>
      <exception cref="T:System.ObjectDisposedException">当前读取器已关闭。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEndAsync">
      <summary>异步读取从当前位置到字符串的结尾的所有字符并将它们作为单个字符串返回。</summary>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数的值包含一个字符串，其中包含从当前位置到字符串末尾的字符。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">字符数大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">字符串读取器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">以前的读取操作当前正在使用读取器。</exception>
    </member>
    <member name="T:System.IO.StringWriter">
      <summary>实现一个用于将信息写入字符串的 <see cref="T:System.IO.TextWriter" />。 该信息存储在基础 <see cref="T:System.Text.StringBuilder" /> 中。</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor">
      <summary>初始化 <see cref="T:System.IO.StringWriter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.IFormatProvider)">
      <summary>使用指定的格式控制初始化 <see cref="T:System.IO.StringWriter" /> 类的新实例。</summary>
      <param name="formatProvider">控制格式设置的 <see cref="T:System.IFormatProvider" /> 对象。</param>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder)">
      <summary>初始化写入指定 <see cref="T:System.IO.StringWriter" /> 的 <see cref="T:System.Text.StringBuilder" /> 类的新实例。</summary>
      <param name="sb">要写入的 <see cref="T:System.Text.StringBuilder" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)">
      <summary>初始化写入指定 <see cref="T:System.IO.StringWriter" /> 并具有指定格式提供程序的 <see cref="T:System.Text.StringBuilder" /> 类的新实例。</summary>
      <param name="sb">要写入的 <see cref="T:System.Text.StringBuilder" /> 对象。</param>
      <param name="formatProvider">控制格式设置的 <see cref="T:System.IFormatProvider" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StringWriter.Close">
      <summary>关闭当前的 <see cref="T:System.IO.StringWriter" /> 和基础流。</summary>
    </member>
    <member name="M:System.IO.StringWriter.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.StringWriter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.IO.StringWriter.Encoding">
      <summary>获取在其中写入输出的 <see cref="T:System.Text.Encoding" />。</summary>
      <returns>用来写入输出的 <see langword="Encoding" />。</returns>
    </member>
    <member name="M:System.IO.StringWriter.FlushAsync">
      <summary>异步清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。</summary>
      <returns>表示异步刷新操作的任务。</returns>
    </member>
    <member name="M:System.IO.StringWriter.GetStringBuilder">
      <summary>返回基础 <see cref="T:System.Text.StringBuilder" />。</summary>
      <returns>基础 <see langword="StringBuilder" />。</returns>
    </member>
    <member name="M:System.IO.StringWriter.ToString">
      <summary>返回包含迄今为止写入到当前 <see langword="StringWriter" /> 中的字符的字符串。</summary>
      <returns>包含写入到当前 <see langword="StringWriter" /> 中的字符的字符串。</returns>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char)">
      <summary>将字符写入该字符串。</summary>
      <param name="value">要写入的字符。</param>
      <exception cref="T:System.ObjectDisposedException">编写器已关闭。</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>将字符的子数组写入该字符串。</summary>
      <param name="buffer">要从中写出数据的字符数组。</param>
      <param name="index">在开始读取数据缓存中的位置。</param>
      <param name="count">要写入的最大字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">(<paramref name="index" /> + <paramref name="count" />)&gt; <paramref name="buffer" />. <see langword="Length" />。</exception>
      <exception cref="T:System.ObjectDisposedException">编写器已关闭。</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>将字符范围的字符串表示形式写入当前字符串。</summary>
      <param name="buffer">要写入字符串中的字符范围。</param>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.String)">
      <summary>将字符串写入当前流。</summary>
      <param name="value">要写入的字符串。</param>
      <exception cref="T:System.ObjectDisposedException">编写器已关闭。</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Text.StringBuilder)">
      <summary>将字符串生成器的字符串表示形式写入当前字符串。</summary>
      <param name="value">要写入字符串的字符串生成器。</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char)">
      <summary>以异步方式将字符写入流。</summary>
      <param name="value">要写入字符串中的字符。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">字符串编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">字符串编写器正在由其前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>将字符的子数组异步写入该字符串。</summary>
      <param name="buffer">要从中写出数据的字符数组。</param>
      <param name="index">在开始读取数据缓存中的位置。</param>
      <param name="count">要写入的最大字符数。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加 <paramref name="count" /> 大于缓冲区长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ObjectDisposedException">字符串编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">字符串编写器正在由其前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>将字符的内存区域异步写入字符串。</summary>
      <param name="buffer">要写入字符串中的字符内存区域。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步写入操作的任务。</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.String)">
      <summary>以异步方式将字符串写入当前流。</summary>
      <param name="value">要写入的字符串。 如果 <paramref name="value" /> 为 <see langword="null" />，则不会将任何内容写入文本流。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">字符串编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">字符串编写器正在由其前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>将字符串生成器的文本表示形式异步写入字符串。</summary>
      <param name="value">要写入字符串的字符串生成器。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步写入操作的任务。</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>将字符范围的文本表示形式写入字符串，后跟行终止符。</summary>
      <param name="buffer">要写入字符串中的字符范围。</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteLine(System.Text.StringBuilder)">
      <summary>将字符串生成器的文本表示形式写入字符串，后跟行终止符。</summary>
      <param name="value">要作为字符串生成器写入字符串的字符串。</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char)">
      <summary>将字符异步写入字符串，后跟行终止符。</summary>
      <param name="value">要写入字符串中的字符。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">字符串编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">字符串编写器正在由其前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>将字符的子数组异步写入字符串，后跟行终止符。</summary>
      <param name="buffer">要从中写出数据的字符数组。</param>
      <param name="index">在开始读取数据缓存中的位置。</param>
      <param name="count">要写入的最大字符数。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加 <paramref name="count" /> 大于缓冲区长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ObjectDisposedException">字符串编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">字符串编写器正在由其前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>将字符内存区域的字符串表示形式异步写入当前字符串，后跟行终止符。</summary>
      <param name="buffer">要写入字符串中的字符内存区域。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步写入操作的任务。</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.String)">
      <summary>将字符串异步写入当前字符串，后跟行终止符。</summary>
      <param name="value">要写入的字符串。 如果值为 <see langword="null" />，则只写入行终止符。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">字符串编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">字符串编写器正在由其前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>将字符串生成器的字符串表示形式异步写入当前字符串，后跟行终止符。</summary>
      <param name="value">要写入字符串的字符串生成器。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步写入操作的任务。</returns>
    </member>
    <member name="T:System.IO.TextReader">
      <summary>表示可读取有序字符系列的读取器。</summary>
    </member>
    <member name="M:System.IO.TextReader.#ctor">
      <summary>初始化 <see cref="T:System.IO.TextReader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.TextReader.Close">
      <summary>关闭 <see cref="T:System.IO.TextReader" /> 并释放与该 <see langword="TextReader" /> 关联的所有系统资源。</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose">
      <summary>释放由 <see cref="T:System.IO.TextReader" /> 对象使用的所有资源。</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.TextReader" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="F:System.IO.TextReader.Null">
      <summary>提供一个无数据可供读取的 <see langword="TextReader" />。</summary>
    </member>
    <member name="M:System.IO.TextReader.Peek">
      <summary>读取下一个字符，而不更改读取器状态或字符源。 返回下一个可用字符，而实际上并不从读取器中读取此字符。</summary>
      <returns>一个表示下一个要读取的字符的整数；如果没有更多可读取的字符或该读取器不支持查找，则为 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextReader.Read">
      <summary>读取文本读取器中的下一个字符并使该字符的位置提升一个字符。</summary>
      <returns>文本读取器中的下一个字符，或为 -1 （如果没有更多的可用字符）。 默认实现将返回 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>从当前读取器中读取指定数目的字符并从指定索引开始将该数据写入缓冲区。</summary>
      <param name="buffer">当此方法返回时，包含指定的字符数组，此数组中 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值被从当前源中读取的字符所替换。</param>
      <param name="index">在 <paramref name="buffer" /> 中开始写入的位置。</param>
      <param name="count">最多读取的字符数。 如果在读取指定数目的字符到缓冲区之前，读取器就已达到末尾，那么该方法返回。</param>
      <returns>已读取的字符数。 该数会小于或等于 <paramref name="count" />，具体取决于读取器中是否有可用的数据。 如果调用此方法时没有留下更多的字符供读取，则此方法返回 0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Span{System.Char})">
      <summary>从当前读取器中读取字符，并将数据写入指定的缓冲区。</summary>
      <param name="buffer">此方法返回时，包含指定的字符范围，这些字符由从当前源中读取的字符替换。</param>
      <returns>已读取的字符数。 该数小于或等于 <paramref name="buffer" /> 长度，具体取决于读取器中是否有可用的数据。 如果调用此方法时没有留下更多的字符供读取，则此方法返回 0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.IOException">从流中读取的字符数大于 <paramref name="buffer" /> 的长度。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>异步从当前文本读取器中读取指定数目的字符并从指定索引开始将该数据写入缓冲区。</summary>
      <param name="buffer">当此方法返回时，包含指定的字符数组，此数组中 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值被从当前源中读取的字符所替换。</param>
      <param name="index">在 <paramref name="buffer" /> 中开始写入的位置。</param>
      <param name="count">最多读取的字符数。 如果在将指定数量的字符读入缓冲区之前已到达文本的末尾，则当前方法将返回。</param>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。 如果当前可用字节数少于所请求的字节数，则该结果值可能小于所请求的字节数，或者如果已达到文本的末尾时，则为 0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.ObjectDisposedException">文本读取器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">以前的读取操作当前正在使用读取器。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>将当前流中的字符异步读入内存块。</summary>
      <param name="buffer">此方法返回时，包含指定的字符内存块，这些字符由从当前源中读取的字符替换。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步读取操作的值任务。 类型参数的值包含已读取的字符数，或者如果已到达流结尾并且未读取任何数据，则为 0。 该数小于或等于 <paramref name="buffer" /> 长度，具体取决于流中是否有可用的数据。</returns>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>从当前文本读取器中读取指定数目的字符并从指定索引开始将该数据写入缓冲区。</summary>
      <param name="buffer">当此方法返回时，此参数包含指定的字符数组，此数组中 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值被从当前源中读取的字符所替换。</param>
      <param name="index">在 <paramref name="buffer" /> 中开始写入的位置。</param>
      <param name="count">最多读取的字符数。</param>
      <returns>已读取的字符数。 该数字将小于或等于 <paramref name="count" />，取决于是否所有的输入字符都已读取。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Span{System.Char})">
      <summary>从当前流中读取字符并将数据写入缓冲区。</summary>
      <param name="buffer">此方法返回时，包含指定的字符范围，这些字符由从当前源中读取的字符替换。</param>
      <returns>已读取的字符数。 该数字将小于或等于 <paramref name="buffer" /> 长度，具体取决于是否已读取所有输入字符。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.StreamReader" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>异步从当前文本读取器中读取指定数目的字符并从指定索引开始将该数据写入缓冲区。</summary>
      <param name="buffer">当此方法返回时，包含指定的字符数组，此数组中 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值被从当前源中读取的字符所替换。</param>
      <param name="index">在 <paramref name="buffer" /> 中开始写入的位置。</param>
      <param name="count">最多读取的字符数。 如果在将指定数量的字符读入缓冲区之前已到达文本的末尾，则当前方法将返回。</param>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。 如果当前可用字节数少于所请求的字节数，则该结果值可能小于所请求的字节数，或者如果已达到文本的末尾时，则为 0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.ObjectDisposedException">文本读取器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">以前的读取操作当前正在使用读取器。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>从当前流中异步读取字符并将数据写入缓冲区。</summary>
      <param name="buffer">此方法返回时，包含指定的字符内存块，这些字符由从当前源中读取的字符替换。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步读取操作的值任务。 类型参数的值包含读入缓冲区的总字符数。 如果当前可用字符数少于所请求的字符数，则该结果值可小于所请求的字符数；如果已到达流结尾时，则为 0（零）。</returns>
    </member>
    <member name="M:System.IO.TextReader.ReadLine">
      <summary>从文本读取器中读取一行字符并将数据作为字符串返回。</summary>
      <returns>读取器中的下一行，或 <see langword="null" />（如果已读取所有字符）。</returns>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.OutOfMemoryException">没有足够的内存来为返回的字符串分配缓冲区。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字符数大于 <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.IO.TextReader.ReadLineAsync">
      <summary>异步读取一行字符并将数据作为字符串返回。</summary>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数的值包含来自文本读取器的下一行或为 <see langword="null" /> 如果读取所有字符。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字符数大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">文本读取器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">以前的读取操作当前正在使用读取器。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEnd">
      <summary>读取从当前位置到文本读取器末尾的所有字符并将它们作为一个字符串返回。</summary>
      <returns>一个包含从当前位置到文本读取器末尾的所有字符的字符串。</returns>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
      <exception cref="T:System.OutOfMemoryException">没有足够的内存来为返回的字符串分配缓冲区。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字符数大于 <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEndAsync">
      <summary>异步读取从当前位置到文本读取器末尾的所有字符并将它们作为一个字符串返回。</summary>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数值包括字符串来自当前位置到结束文本读取器字符。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">字符数大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">文本读取器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">以前的读取操作当前正在使用读取器。</exception>
    </member>
    <member name="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
      <summary>在指定的 <see langword="TextReader" /> 周围创建线程安全包装。</summary>
      <param name="reader">要同步的 <see langword="TextReader" />。</param>
      <returns>一个线程安全的 <see cref="T:System.IO.TextReader" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.IO.TextWriter">
      <summary>表示可以编写一个有序字符系列的编写器。 此类为抽象类。</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor">
      <summary>初始化 <see cref="T:System.IO.TextWriter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor(System.IFormatProvider)">
      <summary>使用指定的格式提供程序初始化 <see cref="T:System.IO.TextWriter" /> 类的新实例。</summary>
      <param name="formatProvider">控制格式设置的 <see cref="T:System.IFormatProvider" /> 对象。</param>
    </member>
    <member name="M:System.IO.TextWriter.Close">
      <summary>关闭当前编写器并释放任何与该编写器关联的系统资源。</summary>
    </member>
    <member name="F:System.IO.TextWriter.CoreNewLine">
      <summary>存储用于此 <see langword="TextWriter" /> 的换行符。</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose">
      <summary>释放由 <see cref="T:System.IO.TextWriter" /> 对象使用的所有资源。</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.TextWriter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.TextWriter.DisposeAsync">
      <summary>异步释放由 <see cref="T:System.IO.TextWriter" /> 对象使用的所有资源。</summary>
      <returns>一个表示异步释放操作的任务。</returns>
    </member>
    <member name="P:System.IO.TextWriter.Encoding">
      <summary>当在派生类中重写时，返回用来写输出的该字符编码。</summary>
      <returns>用来写入输出的字符编码。</returns>
    </member>
    <member name="M:System.IO.TextWriter.Flush">
      <summary>清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。</summary>
    </member>
    <member name="M:System.IO.TextWriter.FlushAsync">
      <summary>异步清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。</summary>
      <returns>表示异步刷新操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">编写器正在由其前一次写操作使用。</exception>
    </member>
    <member name="P:System.IO.TextWriter.FormatProvider">
      <summary>获取控制格式设置的对象。</summary>
      <returns>特定区域性的 <see cref="T:System.IFormatProvider" /> 对象，或者如果未指定任何其他区域性，则为当前区域性的格式设置。</returns>
    </member>
    <member name="P:System.IO.TextWriter.NewLine">
      <summary>获取或设置由当前 <see langword="TextWriter" /> 使用的行结束符字符串。</summary>
      <returns>当前 <see langword="TextWriter" /> 的行结束符字符串。</returns>
    </member>
    <member name="F:System.IO.TextWriter.Null">
      <summary>提供 <see langword="TextWriter" />，它不带任何可写入但无法从中读取的后备存储。</summary>
    </member>
    <member name="M:System.IO.TextWriter.Synchronized(System.IO.TextWriter)">
      <summary>在指定的 <see langword="TextWriter" /> 周围创建线程安全包装。</summary>
      <param name="writer">要同步的 <see langword="TextWriter" />。</param>
      <returns>线程安全包装。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Boolean)">
      <summary>将 <see langword="Boolean" /> 值的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 <see langword="Boolean" /> 值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char)">
      <summary>将字符写入文本流。</summary>
      <param name="value">要写入文本流中的字符。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[])">
      <summary>将字符数组写入文本流。</summary>
      <param name="buffer">要写入文本流中的字符数组。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>将字符的子数组写入文本流。</summary>
      <param name="buffer">要从中写出数据的字符数组。</param>
      <param name="index">在开始接收数据时缓存中的字符位置。</param>
      <param name="count">要写入的字符数。</param>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Decimal)">
      <summary>将小数值的文本表示形式写入文本流。</summary>
      <param name="value">要写入的十进制值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Double)">
      <summary>将 8 字节浮点值的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 8 字节浮点值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int32)">
      <summary>将 4 字节带符号整数的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 4 字节有符号整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int64)">
      <summary>将 8 字节带符号整数的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 8 字节有符号整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Object)">
      <summary>通过在对象上调用 <see langword="ToString" /> 方法将此对象的文本表示形式写入文本流。</summary>
      <param name="value">要写入的对象。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>将字符范围写入文本流。</summary>
      <param name="buffer">要写入的字符范围。</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Single)">
      <summary>将 4 字节浮点值的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 4 字节浮点值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String)">
      <summary>将字符串写入文本流。</summary>
      <param name="value">要写入的字符串。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object)">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 方法相同的语义将格式化字符串写入文本流。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要格式化和写入的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的复合格式字符串。
或
格式项的索引小于 0 （0）、或大于或等于要设置格式的对象数 (用于该方法重载，为一)。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 方法相同的语义将格式化字符串写入文本流。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要格式化和写入的第一个对象。</param>
      <param name="arg1">要格式化和写入的第二个对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的复合格式字符串。
或
格式项的索引小于 0 （0） 或大于或等于要设置格式的对象数 (用于该方法重载，为二)。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> 方法相同的语义将格式化字符串写入文本流。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要格式化和写入的第一个对象。</param>
      <param name="arg1">要格式化和写入的第二个对象。</param>
      <param name="arg2">要设置格式和写入的第三个对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的复合格式字符串。
或
格式项的索引小于 0 （0）、或大于或等于要设置格式的对象数 (用于该方法重载，为三)。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object[])">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object[])" /> 方法相同的语义将格式化字符串写入文本流。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg">一个对象数组，其中包含零个或多个要设置格式和写入的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="arg" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的复合格式字符串。
或
格式项的索引小于 0（零），或者大于或等于 <paramref name="arg" /> 数组的长度。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Text.StringBuilder)">
      <summary>将字符串生成器写入文本流。</summary>
      <param name="value">要作为字符串生成器写入文本流的字符串。</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt32)">
      <summary>将 4 字节无符号整数的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 4 字节无符号整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt64)">
      <summary>将 8 字节无符号整数的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 8 字节无符号整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char)">
      <summary>将字符异步写入文本流。</summary>
      <param name="value">要写入文本流中的字符。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[])">
      <summary>将字符数组异步写入文本流。</summary>
      <param name="buffer">要写入文本流中的字符数组。 如果 <paramref name="buffer" /> 为 <see langword="null" />，则不写入任何内容。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以异步形式将字符的子数组写入文本流。</summary>
      <param name="buffer">要从中写出数据的字符数组。</param>
      <param name="index">在开始接收数据时缓存中的字符位置。</param>
      <param name="count">要写入的字符数。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加 <paramref name="count" /> 大于缓冲区长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>以异步形式将字符内存区域写入文本流。</summary>
      <param name="buffer">要写入文本流中的字符内存区域。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步写入操作的任务。</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.String)">
      <summary>将字符串异步写入文本流。</summary>
      <param name="value">要写入的字符串。 如果 <paramref name="value" /> 为 <see langword="null" />，则不会将任何内容写入文本流。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>以异步形式将字符串生成器写入文本流。</summary>
      <param name="value">要作为字符串生成器写入文本流的字符串。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步写入操作的任务。</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine">
      <summary>将行终止符写入文本流。</summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Boolean)">
      <summary>将 <see langword="Boolean" /> 值的文本表示形式写入文本流，后跟行终止符。</summary>
      <param name="value">要写入的 <see langword="Boolean" /> 值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char)">
      <summary>将字符写入文本流，后跟行终止符。</summary>
      <param name="value">要写入文本流中的字符。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[])">
      <summary>将字符数组写入文本流，后跟行终止符。</summary>
      <param name="buffer">从其读取数据的字符数组。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>将字符子数组写入文本流，后跟行终止符。</summary>
      <param name="buffer">从其读取数据的字符数组。</param>
      <param name="index">在开始读取数据时 <paramref name="buffer" /> 中的字符位置。</param>
      <param name="count">要写入的最大字符数。</param>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Decimal)">
      <summary>将小数值的文本表示形式写入文本流，后跟行终止符。</summary>
      <param name="value">要写入的十进制值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Double)">
      <summary>将 8 字节浮点值的文本表示形式写入文本流，后跟行终止符。</summary>
      <param name="value">要写入的 8 字节浮点值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int32)">
      <summary>将 4 字节带符号整数的文本表示形式写入文本流，后跟行终止符。</summary>
      <param name="value">要写入的 4 字节有符号整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int64)">
      <summary>将 8 字节带符号整数的文本表示形式写入文本流，后跟行终止符。</summary>
      <param name="value">要写入的 8 字节有符号整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Object)">
      <summary>通过在对象上调用 <see langword="ToString" /> 方法将此对象的文本表示形式写入文本流，后跟行终止符。</summary>
      <param name="value">要写入的对象。 如果 <paramref name="value" /> 为 <see langword="null" />，则只写入行终止符。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>将字符范围的文本表示形式写入文本流，后跟行终止符。</summary>
      <param name="buffer">要写入文本流中的字符范围值。</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Single)">
      <summary>将 4 字节浮点值的文本表示形式写入文本流，后跟行终止符。</summary>
      <param name="value">要写入的 4 字节浮点值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String)">
      <summary>将字符串写入文本流，后跟行终止符。</summary>
      <param name="value">要写入的字符串。 如果 <paramref name="value" /> 为 <see langword="null" />，则只写入行终止符。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object)">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 方法相同的语义将格式化字符串和新行写入文本流。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要格式化和写入的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的复合格式字符串。
或
格式项的索引小于 0 （0）、或大于或等于要设置格式的对象数 (用于该方法重载，为一)。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 方法相同的语义将格式化字符串和新行写入文本流。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要格式化和写入的第一个对象。</param>
      <param name="arg1">要格式化和写入的第二个对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的复合格式字符串。
或
格式项的索引小于 0 （0）、或大于或等于要设置格式的对象数 (用于该方法重载，为二)。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 相同的语义将格式化字符串和新行写入文本流。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要格式化和写入的第一个对象。</param>
      <param name="arg1">要格式化和写入的第二个对象。</param>
      <param name="arg2">要设置格式和写入的第三个对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的复合格式字符串。
或
格式项的索引小于 0 （0）、或大于或等于要设置格式的对象数 (用于该方法重载，为三)。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 相同的语义将格式化字符串和新行写入文本流。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg">一个对象数组，其中包含零个或多个要设置格式和写入的对象。</param>
      <exception cref="T:System.ArgumentNullException">字符串或对象作为 <see langword="null" /> 传入。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的复合格式字符串。
或
格式项的索引小于 0（零），或者大于或等于 <paramref name="arg" /> 数组的长度。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Text.StringBuilder)">
      <summary>将字符串生成器的文本表示形式写入文本流，后跟行终止符。</summary>
      <param name="value">要作为字符串生成器写入文本流的字符串。</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt32)">
      <summary>将 4 字节无符号整数的文本表示形式写入文本流，后跟行终止符。</summary>
      <param name="value">要写入的 4 字节无符号整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt64)">
      <summary>将 8 字节无符号整数的文本表示形式写入文本流，后跟行终止符。</summary>
      <param name="value">要写入的 8 字节无符号整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync">
      <summary>以异步形式将行终止符写入文本流。</summary>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char)">
      <summary>以异步形式将字符写入文本流，后跟行终止符。</summary>
      <param name="value">要写入文本流中的字符。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[])">
      <summary>以异步形式将字符数组写入文本流，后跟行终止符。</summary>
      <param name="buffer">要写入文本流中的字符数组。 如果字符数组为 <see langword="null" />，则仅写入行结束符。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以异步形式将字符子数组写入文本流，后跟行终止符。</summary>
      <param name="buffer">要从中写出数据的字符数组。</param>
      <param name="index">在开始接收数据时缓存中的字符位置。</param>
      <param name="count">要写入的字符数。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加 <paramref name="count" /> 大于缓冲区长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>以异步形式将字符内存区域的文本表示形式写入文本流，后跟行终止符。</summary>
      <param name="buffer">要写入文本流中的字符内存区域。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步写入操作的任务。</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.String)">
      <summary>以异步形式将字符串写入文本流，后跟行终止符。</summary>
      <param name="value">要写入的字符串。 如果值为 <see langword="null" />，则只写入行终止符。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>以异步形式将字符串生成器的文本表示形式写入文本流，后跟行终止符。</summary>
      <param name="value">要作为字符串生成器写入文本流的字符串。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步写入操作的任务。</returns>
    </member>
    <member name="T:System.LoaderOptimization">
      <summary>与 <see cref="T:System.LoaderOptimizationAttribute" /> 类配合使用的枚举，用于指定可执行文件的加载程序优化。</summary>
    </member>
    <member name="F:System.LoaderOptimization.DisallowBindings">
      <summary>被公共语言运行时忽略。</summary>
    </member>
    <member name="F:System.LoaderOptimization.DomainMask">
      <summary>请勿使用。 该掩码选择与域相关的值，筛选出未使用的 <see cref="F:System.LoaderOptimization.DisallowBindings" /> 标志。</summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomain">
      <summary>表示应用程序将可能有多个使用相同代码的域，并且加载程序必须跨应用程序域最大限度地共享内部资源。</summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomainHost">
      <summary>表示应用程序可能将承载多个域中的唯一代码，加载程序必须跨应用程序域共享资源，仅限已添加到全局程序集缓存的全局可用（具有强名称）程序集。</summary>
    </member>
    <member name="F:System.LoaderOptimization.NotSpecified">
      <summary>表示未指定任何针对共享内部资源的优化。 如果默认域或宿主接口指定了一种优化，那么加载程序将使用该优化；否则，加载程序将使用 <see cref="F:System.LoaderOptimization.SingleDomain" />。</summary>
    </member>
    <member name="F:System.LoaderOptimization.SingleDomain">
      <summary>表示应用程序将可能只有单个域，并且加载程序不可以跨应用程序域共享内部资源。</summary>
    </member>
    <member name="T:System.LoaderOptimizationAttribute">
      <summary>用于为可执行应用程序的主方法设置默认的加载程序优化策略。</summary>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.Byte)">
      <summary>将 <see cref="T:System.LoaderOptimizationAttribute" /> 类的新实例初始化为指定值。</summary>
      <param name="value">等效于 <see cref="T:System.LoaderOptimization" /> 常数的值。</param>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.LoaderOptimization)">
      <summary>将 <see cref="T:System.LoaderOptimizationAttribute" /> 类的新实例初始化为指定值。</summary>
      <param name="value">一个 <see cref="T:System.LoaderOptimization" /> 常数。</param>
    </member>
    <member name="P:System.LoaderOptimizationAttribute.Value">
      <summary>获取此实例的当前 <see cref="T:System.LoaderOptimization" /> 值。</summary>
      <returns>一个 <see cref="T:System.LoaderOptimization" /> 常数。</returns>
    </member>
    <member name="T:System.Math">
      <summary>为三角函数、对数函数和其他通用数学函数提供常数和静态方法。</summary>
    </member>
    <member name="M:System.Math.Abs(System.Decimal)">
      <summary>返回 <see cref="T:System.Decimal" /> 数字的绝对值。</summary>
      <param name="value">一个大于或等于 <see cref="F:System.Decimal.MinValue" /> 但小于或等于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</param>
      <returns>十进制数 x，满足 0 ≤ x ≤ <see cref="F:System.Decimal.MaxValue" />。</returns>
    </member>
    <member name="M:System.Math.Abs(System.Double)">
      <summary>返回双精度浮点数字的绝对值。</summary>
      <param name="value">一个大于或等于 <see cref="F:System.Double.MinValue" /> 但小于或等于 <see cref="F:System.Double.MaxValue" /> 的数字。</param>
      <returns>双精度浮点数 x，满足 0 ≤ x ≤ <see cref="F:System.Double.MaxValue" />。</returns>
    </member>
    <member name="M:System.Math.Abs(System.Int16)">
      <summary>返回 16 位有符号整数的绝对值。</summary>
      <param name="value">一个大于 <see cref="F:System.Int16.MinValue" /> 但小于或等于 <see cref="F:System.Int16.MaxValue" /> 的数字。</param>
      <returns>16 位有符号整数 x，满足 0 ≤ x ≤ <see cref="F:System.Int16.MaxValue" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 等于 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Math.Abs(System.Int32)">
      <summary>返回 32 位有符号整数的绝对值。</summary>
      <param name="value">一个大于 <see cref="F:System.Int32.MinValue" /> 但小于或等于 <see cref="F:System.Int32.MaxValue" /> 的数字。</param>
      <returns>32 位有符号整数 x，满足 0 ≤ x ≤ <see cref="F:System.Int32.MaxValue" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 等于 <see cref="F:System.Int32.MinValue" />。</exception>
    </member>
    <member name="M:System.Math.Abs(System.Int64)">
      <summary>返回 64 位有符号整数的绝对值。</summary>
      <param name="value">一个大于 <see cref="F:System.Int64.MinValue" /> 但小于或等于 <see cref="F:System.Int64.MaxValue" /> 的数字。</param>
      <returns>64 位有符号整数 x，满足 0 ≤ x ≤ <see cref="F:System.Int64.MaxValue" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 等于 <see cref="F:System.Int64.MinValue" />。</exception>
    </member>
    <member name="M:System.Math.Abs(System.SByte)">
      <summary>返回 8 位有符号整数的绝对值。</summary>
      <param name="value">一个大于 <see cref="F:System.SByte.MinValue" /> 但小于或等于 <see cref="F:System.SByte.MaxValue" /> 的数字。</param>
      <returns>8 位有符号整数 x，满足 0 ≤ x ≤ <see cref="F:System.SByte.MaxValue" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 等于 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Math.Abs(System.Single)">
      <summary>返回单精度浮点数字的绝对值。</summary>
      <param name="value">一个大于或等于 <see cref="F:System.Single.MinValue" /> 但小于或等于 <see cref="F:System.Single.MaxValue" /> 的数字。</param>
      <returns>单精度浮点数 x，满足 0 ≤ x ≤ <see cref="F:System.Single.MaxValue" />。</returns>
    </member>
    <member name="M:System.Math.Acos(System.Double)">
      <summary>返回余弦值为指定数字的角度。</summary>
      <param name="d">一个表示余弦值的数字，其中 <paramref name="d" /> 必须大于或等于 -1 但小于或等于 1。</param>
      <returns>角度 θ，以弧度为单位，满足 0 ≤θ≤π
或
如果 <paramref name="d" /> &lt; -1 或 <paramref name="d" /> &gt; 1 或 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />，则为 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Acosh(System.Double)">
      <summary>返回双曲余弦值为指定数字的角度。</summary>
      <param name="d">一个表示双曲余弦值的数字，其中 <paramref name="d" /> 必须大于等于 1 但小于等于 <see cref="F:System.Double.PositiveInfinity" />。</param>
      <returns>角度 θ，以弧度为单位，满足 0 ≤ θ ≤ ∞。
或
如果 <paramref name="d" /> &lt; 1 或 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />，则为 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Asin(System.Double)">
      <summary>返回正弦值为指定数字的角度。</summary>
      <param name="d">一个表示正弦值的数字，其中 <paramref name="d" /> 必须大于或等于 -1 但小于或等于 1。</param>
      <returns>角度 θ，以弧度为单位，满足 -π/2 ≤θ≤π/2
或
如果 <paramref name="d" /> &lt; -1 或 <paramref name="d" /> &gt; 1 或 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />，则为 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Asinh(System.Double)">
      <summary>返回双曲正弦值为指定数字的角度。</summary>
      <param name="d">一个表示双曲正弦值的数字，其中 <paramref name="d" /> 必须大于等于 <see cref="F:System.Double.NegativeInfinity" /> 但小于等于 <see cref="F:System.Double.PositiveInfinity" />。</param>
      <returns>角度 θ，以弧度为单位，满足 -∞ &lt; θ ≤-1 或 1 ≤ θ &lt; ∞。
或
如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />，则为 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Atan(System.Double)">
      <summary>返回正切值为指定数字的角度。</summary>
      <param name="d">表示正切值的数字。</param>
      <returns>角度 θ，以弧度为单位，满足 -π/2 ≤θ≤π/2。
或
如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />，则为 <see cref="F:System.Double.NaN" />；如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NegativeInfinity" />，则 -π/2 舍入为双精度值 (-1.5707963267949)；或者如果 <paramref name="d" /> 等于 <see cref="F:System.Double.PositiveInfinity" />，则 π/2 舍入为双精度值 (1.5707963267949)。</returns>
    </member>
    <member name="M:System.Math.Atan2(System.Double,System.Double)">
      <summary>返回正切值为两个指定数字的商的角度。</summary>
      <param name="y">点的 y 坐标。</param>
      <param name="x">点的 x 坐标。</param>
      <returns>角度 θ，以弧度为单位，满足 -π≤θ≤π，且 tan(θ) = <paramref name="y" /> / <paramref name="x" />，其中 (<paramref name="x" />, <paramref name="y" />) 是笛卡尔平面中的点。 请看下面：

由于 (<paramref name="x" />, <paramref name="y" />) 在第 1 象限，因此 0 &lt; θ &lt; π/2。

由于 (<paramref name="x" />, <paramref name="y" />) 在第 2 象限，因此 π/2 &lt; θ≤π。

由于 (<paramref name="x" />, <paramref name="y" />) 在第 3 象限，因此 -π &lt; θ &lt; -π/2。

由于 (<paramref name="x" />, <paramref name="y" />) 在第 4 象限，因此 -π/2 &lt; θ &lt; 0。


如果点在象限的边界上，则返回值如下：

如果 y 为 0 并且 x 不为负值，则 θ = 0。

如果 y 为 0 并且 x 为负值，则 θ = π。

如果 y 为正值并且 x 为 0，则 θ = π/2。

如果 y 为负值并且 x 为 0，则 θ = -π/2。

如果 y 为 0 并且 x 为 0，则 θ = 0。


如果 <paramref name="x" /> 或 <paramref name="y" /> 为 <see cref="F:System.Double.NaN" />，或者如果 <paramref name="x" /> 和 <paramref name="y" /> 为 <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />，则该方法返回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Atanh(System.Double)">
      <summary>返回双曲正切值为指定数字的角度。</summary>
      <param name="d">一个表示双曲正切值的数字，其中 <paramref name="d" /> 必须大于等于 -1 但小于等于 1。</param>
      <returns>角度 θ，以弧度为单位，满足 -∞ &lt; θ &lt;-1 或 1 &lt; θ &lt; ∞。
或
如果 <paramref name="d" /> &lt; -1 或 <paramref name="d" /> &gt; 1 或 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />，则为 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.BigMul(System.Int32,System.Int32)">
      <summary>生成两个 32 位数字的完整乘积。</summary>
      <param name="a">要相乘的第一个数。</param>
      <param name="b">要相乘的第二个数。</param>
      <returns>包含指定数字乘积的数。</returns>
    </member>
    <member name="M:System.Math.BitDecrement(System.Double)">
      <summary>返回小于 <paramref name="x" /> 的下一个最小值。</summary>
      <param name="x">要递减的值。</param>
      <returns>小于 <paramref name="x" /> 的下一个最小值。
或
如果 <paramref name="x" /> 等于 <see cref="F:System.Double.NegativeInfinity" />，则为 <see cref="F:System.Double.NegativeInfinity" />。
或
如果 <paramref name="x" /> 等于 <see cref="F:System.Double.NaN" />，则为 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.BitIncrement(System.Double)">
      <summary>返回大于 <paramref name="x" /> 的下一个最大值。</summary>
      <param name="x">要递增的值。</param>
      <returns>相对大于 <paramref name="x" /> 的下一个最大值。
或
如果 <paramref name="x" /> 等于 <see cref="F:System.Double.PositiveInfinity" />，则为 <see cref="F:System.Double.PositiveInfinity" />。
或
如果 <paramref name="x" /> 等于 <see cref="F:System.Double.NaN" />，则为 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Cbrt(System.Double)">
      <summary>返回指定数字的立方根。</summary>
      <param name="d">将查找其立方根的数字。</param>
      <returns>
        <paramref name="d" /> 的立方根。
或
如果 <paramref name="x" /> 等于 <see cref="F:System.Double.NaN" />，则为 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Decimal)">
      <summary>返回大于或等于指定的十进制数的最小整数值。</summary>
      <param name="d">十进制数。</param>
      <returns>大于或等于 <paramref name="d" /> 的最小整数值。 请注意，此方法返回 <see cref="T:System.Decimal" />，而不是整数类型。</returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Double)">
      <summary>返回大于或等于指定的双精度浮点数的最小整数值。</summary>
      <param name="a">一个双精度浮点数。</param>
      <returns>大于或等于 <paramref name="a" /> 的最小整数值。 如果 <paramref name="a" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，则返回该值。 请注意，此方法返回 <see cref="T:System.Double" />，而不是整数类型。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Byte,System.Byte,System.Byte)">
      <summary>返回限制在 <paramref name="min" /> 和 <paramref name="max" /> 范围内（含首尾）的 <paramref name="value" />。</summary>
      <param name="value">要限制的值。</param>
      <param name="min">结果的下限。</param>
      <param name="max">结果的上限。</param>
      <returns>如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />，则为 <paramref name="value" />。
或
如果 <paramref name="value" /> &lt; <paramref name="min" />，则为 <paramref name="min" />。
或
如果 <paramref name="max" /> &lt; <paramref name="value" />，则为 <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)">
      <summary>返回限制在 <paramref name="min" /> 和 <paramref name="max" /> 范围内（含首尾）的 <paramref name="value" />。</summary>
      <param name="value">要限制的值。</param>
      <param name="min">结果的下限。</param>
      <param name="max">结果的上限。</param>
      <returns>如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />，则为 <paramref name="value" />。
或
如果 <paramref name="value" /> &lt;<paramref name="min" />，则为 <paramref name="min" />。
或
如果 <paramref name="max" /> &lt; <paramref name="value" />，则为 <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Double,System.Double,System.Double)">
      <summary>返回限制在 <paramref name="min" /> 和 <paramref name="max" /> 范围内（含首尾）的 <paramref name="value" />。</summary>
      <param name="value">要限制的值。</param>
      <param name="min">结果的下限。</param>
      <param name="max">结果的上限。</param>
      <returns>如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />，则为 <paramref name="value" />。
或
如果 <paramref name="value" /> &lt; <paramref name="min" />，则为 <paramref name="min" />。
或
如果<paramref name="max" /> &lt; <paramref name="value" />，则为 <paramref name="max" />。
或
如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />，则为 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int16,System.Int16,System.Int16)">
      <summary>返回限制在 <paramref name="min" /> 和 <paramref name="max" /> 范围内（含首尾）的 <paramref name="value" />。</summary>
      <param name="value">要限制的值。</param>
      <param name="min">结果的下限。</param>
      <param name="max">结果的上限。</param>
      <returns>如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />，则为 <paramref name="value" />。
或
如果 <paramref name="value" /> &lt; <paramref name="min" />，则为 <paramref name="min" />。
或
如果 <paramref name="max" /> &lt; <paramref name="value" />，则为 <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int32,System.Int32,System.Int32)">
      <summary>返回限制在 <paramref name="min" /> 和 <paramref name="max" /> 范围内（含首尾）的 <paramref name="value" />。</summary>
      <param name="value">要限制的值。</param>
      <param name="min">结果的下限。</param>
      <param name="max">结果的上限。</param>
      <returns>如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />，则为 <paramref name="value" />。
或
如果 <paramref name="value" /> &lt; <paramref name="min" />，则为 <paramref name="min" />。
或
如果 <paramref name="max" /> &lt; <paramref name="value" />，则为 <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int64,System.Int64,System.Int64)">
      <summary>返回限制在 <paramref name="min" /> 和 <paramref name="max" /> 范围内（含首尾）的 <paramref name="value" />。</summary>
      <param name="value">要限制的值。</param>
      <param name="min">结果的下限。</param>
      <param name="max">结果的上限。</param>
      <returns>如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />，则为 <paramref name="value" />。
或
如果 <paramref name="value" /> &lt; <paramref name="min" />，则为 <paramref name="min" />。
或
如果 <paramref name="max" /> &lt; <paramref name="value" />，则为 <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.SByte,System.SByte,System.SByte)">
      <summary>返回限制在 <paramref name="min" /> 和 <paramref name="max" /> 范围内（含首尾）的 <paramref name="value" />。</summary>
      <param name="value">要限制的值。</param>
      <param name="min">结果的下限。</param>
      <param name="max">结果的上限。</param>
      <returns>如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />，则为 <paramref name="value" />。
或
如果 <paramref name="value" /> &lt; <paramref name="min" />，则为 <paramref name="min" />。
或
如果 <paramref name="max" /> &lt; <paramref name="value" />，则为 <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Single,System.Single,System.Single)">
      <summary>返回限制在 <paramref name="min" /> 和 <paramref name="max" /> 范围内（含首尾）的 <paramref name="value" />。</summary>
      <param name="value">要限制的值。</param>
      <param name="min">结果的下限。</param>
      <param name="max">结果的上限。</param>
      <returns>如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />，则为 <paramref name="value" />。
或
如果 <paramref name="value" /> &lt; <paramref name="min" />，则为 <paramref name="min" />。
或
如果 <paramref name="max" /> &lt; <paramref name="value" />，则为 <paramref name="max" />。
或
如果 <paramref name="value" /> 等于 <see cref="F:System.Single.NaN" />，则为 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)">
      <summary>返回限制在 <paramref name="min" /> 和 <paramref name="max" /> 范围内（含首尾）的 <paramref name="value" />。</summary>
      <param name="value">要限制的值。</param>
      <param name="min">结果的下限。</param>
      <param name="max">结果的上限。</param>
      <returns>如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />，则为 <paramref name="value" />。
或
如果 <paramref name="value" /> &lt; <paramref name="min" />，则为 <paramref name="min" />。
或
如果 <paramref name="max" /> &lt; <paramref name="value" />，则为 <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)">
      <summary>返回限制在 <paramref name="min" /> 和 <paramref name="max" /> 范围内（含首尾）的 <paramref name="value" />。</summary>
      <param name="value">要限制的值。</param>
      <param name="min">结果的下限。</param>
      <param name="max">结果的上限。</param>
      <returns>如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />，则为 <paramref name="value" />。
或
如果 <paramref name="value" /> &lt; <paramref name="min" />，则为 <paramref name="min" />。
或
如果 <paramref name="max" /> &lt; <paramref name="value" />，则为 <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)">
      <summary>返回限制在 <paramref name="min" /> 和 <paramref name="max" /> 范围内（含首尾）的 <paramref name="value" />。</summary>
      <param name="value">要限制的值。</param>
      <param name="min">结果的下限。</param>
      <param name="max">结果的上限。</param>
      <returns>如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />，则为 <paramref name="value" />。
或
如果 <paramref name="value" /> &lt; <paramref name="min" />，则为 <paramref name="min" />。
或
如果 <paramref name="max" /> &lt; <paramref name="value" />，则为 <paramref name="max" />。</returns>
    </member>
    <member name="M:System.Math.CopySign(System.Double,System.Double)">
      <summary>返回一个值，它具有 <paramref name="x" /> 的大小和 <paramref name="y" /> 的符号。</summary>
      <param name="x">其大小在结果中使用的数字。</param>
      <param name="y">其符号在结果中使用的数字。</param>
      <returns>一个值，它具有 <paramref name="x" /> 的大小和 <paramref name="y" /> 的符号。</returns>
    </member>
    <member name="M:System.Math.Cos(System.Double)">
      <summary>返回指定角度的余弦值。</summary>
      <param name="d">以弧度计量的角度。</param>
      <returns>
        <paramref name="d" /> 的余弦值。 如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，此方法将返回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Cosh(System.Double)">
      <summary>返回指定角度的双曲余弦值。</summary>
      <param name="value">以弧度计量的角度。</param>
      <returns>
        <paramref name="value" /> 的双曲余弦值。 如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，则返回 <see cref="F:System.Double.PositiveInfinity" />。 如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />，则返回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.DivRem(System.Int32,System.Int32,System.Int32@)">
      <summary>计算两个 32 位有符号整数的商，并通过输出参数返回余数。</summary>
      <param name="a">被除数。</param>
      <param name="b">除数。</param>
      <param name="result">余数。</param>
      <returns>指定数字的商。</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="b" /> 为零。</exception>
    </member>
    <member name="M:System.Math.DivRem(System.Int64,System.Int64,System.Int64@)">
      <summary>计算两个 64 位有符号整数的商，并通过输出参数返回余数。</summary>
      <param name="a">被除数。</param>
      <param name="b">除数。</param>
      <param name="result">余数。</param>
      <returns>指定数字的商。</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="b" /> 为零。</exception>
    </member>
    <member name="F:System.Math.E">
      <summary>表示自然对数的底，它由常数 <see langword="e" /> 指定。</summary>
    </member>
    <member name="M:System.Math.Exp(System.Double)">
      <summary>返回 <see langword="e" /> 的指定次幂。</summary>
      <param name="d">指定幂的数字。</param>
      <returns>数字 <see langword="e" /> 的 <paramref name="d" /> 次幂。 如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" /> 或 <see cref="F:System.Double.PositiveInfinity" />，则返回该值。 如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NegativeInfinity" />，则返回 0。</returns>
    </member>
    <member name="M:System.Math.Floor(System.Decimal)">
      <summary>返回小于或等于指定小数的最大整数值。</summary>
      <param name="d">十进制数。</param>
      <returns>小于或等于 <paramref name="d" /> 的最大整数值。  请注意，该方法将返回 <see cref="T:System.Decimal" /> 类型的整数值。</returns>
    </member>
    <member name="M:System.Math.Floor(System.Double)">
      <summary>返回小于或等于指定双精度浮点数的最大整数值。</summary>
      <param name="d">一个双精度浮点数。</param>
      <returns>小于或等于 <paramref name="d" /> 的最大整数值。 如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，则返回该值。</returns>
    </member>
    <member name="M:System.Math.FusedMultiplyAdd(System.Double,System.Double,System.Double)">
      <summary>返回 (x * y) + z，舍入为一个三元运算。</summary>
      <param name="x">要与 <paramref name="y" /> 相乘的数字。</param>
      <param name="y">要与 <paramref name="x" /> 相乘的数字。</param>
      <param name="z">要与 <paramref name="x" /> 和 <paramref name="y" /> 相乘所得的结果相加的数字。</param>
      <returns>(x * y) + z，舍入为一个三元运算。</returns>
    </member>
    <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
      <summary>返回一指定数字被另一指定数字相除的余数。</summary>
      <param name="x">被除数。</param>
      <param name="y">除数。</param>
      <returns>等于 <paramref name="x" /> - (<paramref name="y" /> Q) 的数，其中 Q 是 <paramref name="x" /> / <paramref name="y" /> 的商的最接近整数（如果 <paramref name="x" /> / <paramref name="y" /> 在两个整数中间，则返回偶数）。
如果 <paramref name="x" /> - (<paramref name="y" /> Q) 为零，则在 <paramref name="x" /> 为正时返回值 +0，而在 <paramref name="x" /> 为负时返回 -0。
如果 <paramref name="y" /> = 0，则返回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.ILogB(System.Double)">
      <summary>返回指定数字以 2 为底的整数对数。</summary>
      <param name="x">要查找其对数的数字。</param>
      <returns>下表中的值之一。
 <paramref name="x" /> 参数 
  返回值 
  默认 
  <paramref name="x" /> 以 2 为底的整数对数，即 (int)log2(<paramref name="x" />)。  
  
  零 
 <see cref="F:System.Int32.MinValue" /> 等于 <see cref="F:System.Double.NaN" /> 或 <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Int32.MaxValue" /></returns>
    </member>
    <member name="M:System.Math.Log(System.Double)">
      <summary>返回指定数字的自然对数（底为 <see langword="e" />）。</summary>
      <param name="d">要查找其对数的数字。</param>
      <returns>下表中的值之一。
 <paramref name="d" /> 参数 
  返回值 
  正 
  <paramref name="d" /> 的自然对数，即 ln <paramref name="d" /> 或 log e <paramref name="d" /> 零 
 <see cref="F:System.Double.NegativeInfinity" /> 负数 
 <see cref="F:System.Double.NaN" /> 等于 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> 等于 <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Log(System.Double,System.Double)">
      <summary>返回指定数字在使用指定底时的对数。</summary>
      <param name="a">要查找其对数的数字。</param>
      <param name="newBase">对数的底。</param>
      <returns>下表中的值之一。 （+Infinity 表示 <see cref="F:System.Double.PositiveInfinity" />，-Infinity 表示 <see cref="F:System.Double.NegativeInfinity" />，NaN 表示 <see cref="F:System.Double.NaN" />。）
 <paramref name="a" /><paramref name="newBase" /> 返回值 
 <paramref name="a" />&gt; 0 
  (0 &lt;<paramref name="newBase" />&lt; 1) 或 (<paramref name="newBase" />&gt; 1) 
  lognewBase(a) 
 <paramref name="a" />&lt; 0 
  （任意值） 
  NaN 
  （任意值） 
 <paramref name="newBase" />&lt; 0 
  NaN 
 <paramref name="a" /> != 1 
 <paramref name="newBase" /> = 0 
  NaN 
 <paramref name="a" /> != 1 
 <paramref name="newBase" /> = +Infinity 
  NaN 
 <paramref name="a" /> = NaN 
  （任意值） 
  NaN 
  （任意值） 
 <paramref name="newBase" /> = NaN 
  NaN 
  （任意值） 
 <paramref name="newBase" /> = 1 
  NaN 
 <paramref name="a" /> = 0 
  0 &lt;<paramref name="newBase" />&lt; 1 
  +Infinity 
 <paramref name="a" /> = 0 
 <paramref name="newBase" />&gt; 1 
  -Infinity 
 <paramref name="a" /> =  +Infinity 
  0 &lt;<paramref name="newBase" />&lt; 1 
  -Infinity 
 <paramref name="a" /> =  +Infinity 
 <paramref name="newBase" />&gt; 1 
  +Infinity 
 <paramref name="a" /> = 1 
 <paramref name="newBase" /> = 0 
  0 
 <paramref name="a" /> = 1 
 <paramref name="newBase" /> = +Infinity 
  0</returns>
    </member>
    <member name="M:System.Math.Log10(System.Double)">
      <summary>返回指定数字以 10 为底的对数。</summary>
      <param name="d">要查找其对数的数字。</param>
      <returns>下表中的值之一。
 <paramref name="d" /> 参数 
  返回值 
  正 
  <paramref name="d" /> 的以 10 为底的对数，即 log 10<paramref name="d" />。  
  
  零 
 <see cref="F:System.Double.NegativeInfinity" /> 负数 
 <see cref="F:System.Double.NaN" /> 等于 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> 等于 <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Log2(System.Double)">
      <summary>返回指定数字以 2 为底的对数。</summary>
      <param name="x">要查找其对数的数字。</param>
      <returns>下表中的值之一。
 <paramref name="x" /> 参数 
  返回值 
  正 
  <paramref name="x" /> 以 2 为底的对数，即 log 2<paramref name="x" />。  
  
  零 
 <see cref="F:System.Double.NegativeInfinity" /> 负数 
 <see cref="F:System.Double.NaN" /> 等于 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> 等于 <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Max(System.Byte,System.Byte)">
      <summary>返回两个 8 位无符号整数中较大的一个。</summary>
      <param name="val1">要比较的两个 8 位无符号整数中的第一个。</param>
      <param name="val2">要比较的两个 8 位无符号整数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
    </member>
    <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
      <summary>返回两个十进制数中较大的一个。</summary>
      <param name="val1">要比较的两个十进制数字中的第一个。</param>
      <param name="val2">要比较的两个十进制数字中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
    </member>
    <member name="M:System.Math.Max(System.Double,System.Double)">
      <summary>返回两个双精度浮点数字中较大的一个。</summary>
      <param name="val1">要比较的两个双精度浮点数中的第一个。</param>
      <param name="val2">要比较的两个双精度浮点数中的第二个</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。 如果 <paramref name="val1" /> 或 <paramref name="val2" /> 或者 <paramref name="val1" /> 和 <paramref name="val2" /> 都等于 <see cref="F:System.Double.NaN" />，则返回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Max(System.Int16,System.Int16)">
      <summary>返回两个 16 位有符号的整数中较大的一个。</summary>
      <param name="val1">要比较的两个 16 位有符号整数中的第一个。</param>
      <param name="val2">要比较的两个 16 位有符号整数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
    </member>
    <member name="M:System.Math.Max(System.Int32,System.Int32)">
      <summary>返回两个 32 位有符号的整数中较大的一个。</summary>
      <param name="val1">要比较的两个 32 位有符号整数中的第一个。</param>
      <param name="val2">要比较的两个 32 位有符号整数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
    </member>
    <member name="M:System.Math.Max(System.Int64,System.Int64)">
      <summary>返回两个 64 位有符号的整数中较大的一个。</summary>
      <param name="val1">要比较的两个 64 位有符号整数中的第一个。</param>
      <param name="val2">要比较的两个 64 位有符号整数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
    </member>
    <member name="M:System.Math.Max(System.SByte,System.SByte)">
      <summary>返回两个 8 位有符号的整数中较大的一个。</summary>
      <param name="val1">要比较的两个 8 位有符号整数中的第一个。</param>
      <param name="val2">要比较的两个 8 位有符号整数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
    </member>
    <member name="M:System.Math.Max(System.Single,System.Single)">
      <summary>返回两个单精度浮点数字中较大的一个。</summary>
      <param name="val1">要比较的两个单精度浮点数中的第一个。</param>
      <param name="val2">要比较的两个单精度浮点数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。 如果 <paramref name="val1" /> 或 <paramref name="val2" /> 或者 <paramref name="val1" /> 和 <paramref name="val2" /> 都等于 <see cref="F:System.Single.NaN" />，则返回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
      <summary>返回两个 16 位无符号整数中较大的一个。</summary>
      <param name="val1">要比较的两个 16 位无符号整数中的第一个。</param>
      <param name="val2">要比较的两个 16 位无符号整数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
      <summary>返回两个 32 位无符号整数中较大的一个。</summary>
      <param name="val1">要比较的两个 32 位无符号整数中的第一个。</param>
      <param name="val2">要比较的两个 32 位无符号整数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
      <summary>返回两个 64 位无符号整数中较大的一个。</summary>
      <param name="val1">要比较的两个 64 位无符号整数中的第一个。</param>
      <param name="val2">要比较的两个 64 位无符号整数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
    </member>
    <member name="M:System.Math.MaxMagnitude(System.Double,System.Double)">
      <summary>返回两个双精度浮点数字中的较大值。</summary>
      <param name="x">要比较的两个双精度浮点数中的第一个。</param>
      <param name="y">要比较的两个双精度浮点数中的第二个</param>
      <returns>参数 <paramref name="x" /> 或 <paramref name="y" />，取较大的值。 如果 <paramref name="x" /> 或 <paramref name="y" /> 或者 <paramref name="x" /> 和 <paramref name="y" /> 都等于 <see cref="F:System.Double.NaN" />，则返回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Min(System.Byte,System.Byte)">
      <summary>返回两个 8 位无符号整数中较小的一个。</summary>
      <param name="val1">要比较的两个 8 位无符号整数中的第一个。</param>
      <param name="val2">要比较的两个 8 位无符号整数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
    </member>
    <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
      <summary>返回两个十进制数中较小的一个。</summary>
      <param name="val1">要比较的两个十进制数字中的第一个。</param>
      <param name="val2">要比较的两个十进制数字中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
    </member>
    <member name="M:System.Math.Min(System.Double,System.Double)">
      <summary>返回两个双精度浮点数字中较小的一个。</summary>
      <param name="val1">要比较的两个双精度浮点数中的第一个。</param>
      <param name="val2">要比较的两个双精度浮点数中的第二个</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。 如果 <paramref name="val1" /> 或 <paramref name="val2" /> 或者 <paramref name="val1" /> 和 <paramref name="val2" /> 都等于 <see cref="F:System.Double.NaN" />，则返回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Min(System.Int16,System.Int16)">
      <summary>返回两个 16 位有符号整数中较小的一个。</summary>
      <param name="val1">要比较的两个 16 位有符号整数中的第一个。</param>
      <param name="val2">要比较的两个 16 位有符号整数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
    </member>
    <member name="M:System.Math.Min(System.Int32,System.Int32)">
      <summary>返回两个 32 位有符号整数中较小的一个。</summary>
      <param name="val1">要比较的两个 32 位有符号整数中的第一个。</param>
      <param name="val2">要比较的两个 32 位有符号整数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
    </member>
    <member name="M:System.Math.Min(System.Int64,System.Int64)">
      <summary>返回两个 64 位有符号整数中较小的一个。</summary>
      <param name="val1">要比较的两个 64 位有符号整数中的第一个。</param>
      <param name="val2">要比较的两个 64 位有符号整数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
    </member>
    <member name="M:System.Math.Min(System.SByte,System.SByte)">
      <summary>返回两个 8 位有符号整数中较小的一个。</summary>
      <param name="val1">要比较的两个 8 位有符号整数中的第一个。</param>
      <param name="val2">要比较的两个 8 位有符号整数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
    </member>
    <member name="M:System.Math.Min(System.Single,System.Single)">
      <summary>返回两个单精度浮点数字中较小的一个。</summary>
      <param name="val1">要比较的两个单精度浮点数中的第一个。</param>
      <param name="val2">要比较的两个单精度浮点数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。 如果 <paramref name="val1" /> 或 <paramref name="val2" /> 或者 <paramref name="val1" /> 和 <paramref name="val2" /> 都等于 <see cref="F:System.Single.NaN" />，则返回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
      <summary>返回两个 16 位无符号整数中较小的一个。</summary>
      <param name="val1">要比较的两个 16 位无符号整数中的第一个。</param>
      <param name="val2">要比较的两个 16 位无符号整数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
      <summary>返回两个 32 位无符号整数中较小的一个。</summary>
      <param name="val1">要比较的两个 32 位无符号整数中的第一个。</param>
      <param name="val2">要比较的两个 32 位无符号整数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
      <summary>返回两个 64 位无符号整数中较小的一个。</summary>
      <param name="val1">要比较的两个 64 位无符号整数中的第一个。</param>
      <param name="val2">要比较的两个 64 位无符号整数中的第二个。</param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
    </member>
    <member name="M:System.Math.MinMagnitude(System.Double,System.Double)">
      <summary>返回两个双精度浮点数字中的较小值。</summary>
      <param name="x">要比较的两个双精度浮点数中的第一个。</param>
      <param name="y">要比较的两个双精度浮点数中的第二个</param>
      <returns>参数 <paramref name="x" /> 或 <paramref name="y" />，取较小的值。 如果 <paramref name="x" /> 或 <paramref name="y" /> 或者 <paramref name="x" /> 和 <paramref name="y" /> 都等于 <see cref="F:System.Double.NaN" />，则返回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="F:System.Math.PI">
      <summary>表示圆的周长与其直径的比值，由常数 π 指定。</summary>
    </member>
    <member name="M:System.Math.Pow(System.Double,System.Double)">
      <summary>返回指定数字的指定次幂。</summary>
      <param name="x">要乘幂的双精度浮点数。</param>
      <param name="y">指定幂的双精度浮点数。</param>
      <returns>数字 <paramref name="x" /> 的 <paramref name="y" /> 次幂。</returns>
    </member>
    <member name="M:System.Math.Round(System.Decimal)">
      <summary>将小数值舍入到最接近的整数值，并将中点值舍入到最接近的偶数。</summary>
      <param name="d">要舍入的小数。</param>
      <returns>最接近 <paramref name="d" /> 参数的整数。 如果 <paramref name="d" /> 的小数部分正好处于两个整数中间，其中一个整数为偶数，另一个整数为奇数，则返回偶数。 请注意，此方法返回 <see cref="T:System.Decimal" />，而不是整数类型。</returns>
      <exception cref="T:System.OverflowException">结果超出了 <see cref="T:System.Decimal" /> 的范围。</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32)">
      <summary>将小数值舍入到指定数量的小数位，并将中点值舍入到最接近的偶数。</summary>
      <param name="d">要舍入的小数。</param>
      <param name="decimals">返回值中的小数位数。</param>
      <returns>最接近 <paramref name="d" /> 的 <paramref name="decimals" /> 位小数的数字。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> 小于 0 或大于 28。</exception>
      <exception cref="T:System.OverflowException">结果超出了 <see cref="T:System.Decimal" /> 的范围。</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)">
      <summary>将小数值舍入到指定数量的小数位，并为中点值使用指定的舍入规则。</summary>
      <param name="d">要舍入的小数。</param>
      <param name="decimals">返回值中的小数位数。</param>
      <param name="mode">在两个数字之间时如何舍入 <paramref name="d" /> 的规范。</param>
      <returns>最接近 <paramref name="d" /> 的 <paramref name="decimals" /> 位小数的数字。 如果 <paramref name="d" /> 比 <paramref name="decimals" /> 少部分数字，<paramref name="d" /> 原样返回。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> 小于 0 或大于 28。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是 <see cref="T:System.MidpointRounding" /> 的一个有效值。</exception>
      <exception cref="T:System.OverflowException">结果超出了 <see cref="T:System.Decimal" /> 的范围。</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.MidpointRounding)">
      <summary>将小数值舍入到最接近的整数，并为中点值使用指定的舍入规则。</summary>
      <param name="d">要舍入的小数。</param>
      <param name="mode">在两个数字之间时如何舍入 <paramref name="d" /> 的规范。</param>
      <returns>最接近 <paramref name="d" /> 的整数。 如果 <paramref name="d" /> 是两个数字的中值，这两个数字一个为偶数，另一个为奇数，则 <paramref name="mode" /> 确定返回两个数字中的哪一个。 请注意，此方法返回 <see cref="T:System.Decimal" />，而不是整数类型。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是 <see cref="T:System.MidpointRounding" /> 的一个有效值。</exception>
      <exception cref="T:System.OverflowException">结果超出了 <see cref="T:System.Decimal" /> 的范围。</exception>
    </member>
    <member name="M:System.Math.Round(System.Double)">
      <summary>将双精度浮点值舍入到最接近的整数值，并将中点值舍入到最接近的偶数。</summary>
      <param name="a">要舍入的双精度浮点数。</param>
      <returns>最接近 <paramref name="a" /> 的整数。 如果 <paramref name="a" /> 的小数部分正好处于两个整数中间，其中一个整数为偶数，另一个整数为奇数，则返回偶数。 请注意，此方法返回 <see cref="T:System.Double" />，而不是整数类型。</returns>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32)">
      <summary>将双精度浮点值舍入到指定数量的小数位，并将中点值舍入到最接近的偶数。</summary>
      <param name="value">要舍入的双精度浮点数。</param>
      <param name="digits">返回值中的小数数字。</param>
      <returns>最接近 <paramref name="value" /> 的 <paramref name="digits" /> 位小数的数字。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> 小于 0 或大于 15。</exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)">
      <summary>将双精度浮点值舍入到指定数量的小数位，并为中点值使用指定的舍入规则。</summary>
      <param name="value">要舍入的双精度浮点数。</param>
      <param name="digits">返回值中的小数数字。</param>
      <param name="mode">在两个数字之间时如何舍入 <paramref name="value" /> 的规范。</param>
      <returns>最接近 <paramref name="value" /> 的 <paramref name="digits" /> 位小数的数字。 如果 <paramref name="value" /> 比 <paramref name="digits" /> 少部分数字，<paramref name="value" /> 原样返回。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> 小于 0 或大于 15。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是 <see cref="T:System.MidpointRounding" /> 的一个有效值。</exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.MidpointRounding)">
      <summary>将双精度浮点值舍入到最接近的整数，并为中点值使用指定的舍入约定。</summary>
      <param name="value">要舍入的双精度浮点数。</param>
      <param name="mode">在两个数字之间时如何舍入 <paramref name="value" /> 的规范。</param>
      <returns>最接近 <paramref name="value" /> 的整数。 如果 <paramref name="value" /> 是两个整数的中值，这两个整数一个为偶数，另一个为奇数，则 <paramref name="mode" /> 确定返回两个整数中的哪一个。 请注意，此方法返回 <see cref="T:System.Double" />，而不是整数类型。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是 <see cref="T:System.MidpointRounding" /> 的一个有效值。</exception>
    </member>
    <member name="M:System.Math.ScaleB(System.Double,System.Int32)">
      <summary>返回有效计算的 x * 2^n。</summary>
      <param name="x">指定基值的单精度浮点数。</param>
      <param name="n">指定幂的单精度浮点数。</param>
      <returns>有效计算的 x * 2^n。</returns>
    </member>
    <member name="M:System.Math.Sign(System.Decimal)">
      <summary>返回表示十进制数符号的整数。</summary>
      <param name="value">已签名的十进制数。</param>
      <returns>一个指示 <paramref name="value" /> 的符号的数字，如下表所示。
  返回值 
  含义 
  -1 
 <paramref name="value" /> 小于零。  
  
  0 
 <paramref name="value" /> 等于零。  
  
  1 
 <paramref name="value" /> 大于零。</returns>
    </member>
    <member name="M:System.Math.Sign(System.Double)">
      <summary>返回一个整数，该整数表示双精度浮点数字的符号。</summary>
      <param name="value">有符号的数字。</param>
      <returns>一个指示 <paramref name="value" /> 的符号的数字，如下表所示。
  返回值 
  含义 
  -1 
 <paramref name="value" /> 小于零。  
  
  0 
 <paramref name="value" /> 等于零。  
  
  1 
 <paramref name="value" /> 大于零。</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.Math.Sign(System.Int16)">
      <summary>返回表示 16 位带符号整数的整数。</summary>
      <param name="value">有符号的数字。</param>
      <returns>一个指示 <paramref name="value" /> 的符号的数字，如下表所示。
  返回值 
  含义 
  -1 
 <paramref name="value" /> 小于零。  
  
  0 
 <paramref name="value" /> 等于零。  
  
  1 
 <paramref name="value" /> 大于零。</returns>
    </member>
    <member name="M:System.Math.Sign(System.Int32)">
      <summary>返回表示 32 位带符号整数的整数。</summary>
      <param name="value">有符号的数字。</param>
      <returns>一个指示 <paramref name="value" /> 的符号的数字，如下表所示。
  返回值 
  含义 
  -1 
 <paramref name="value" /> 小于零。  
  
  0 
 <paramref name="value" /> 等于零。  
  
  1 
 <paramref name="value" /> 大于零。</returns>
    </member>
    <member name="M:System.Math.Sign(System.Int64)">
      <summary>返回一个整数，该整数指示 64 位带符号整数的符号。</summary>
      <param name="value">有符号的数字。</param>
      <returns>一个指示 <paramref name="value" /> 的符号的数字，如下表所示。
  返回值 
  含义 
  -1 
 <paramref name="value" /> 小于零。  
  
  0 
 <paramref name="value" /> 等于零。  
  
  1 
 <paramref name="value" /> 大于零。</returns>
    </member>
    <member name="M:System.Math.Sign(System.SByte)">
      <summary>返回一个整数，该整数指示 8 位带符号整数的符号。</summary>
      <param name="value">有符号的数字。</param>
      <returns>一个指示 <paramref name="value" /> 的符号的数字，如下表所示。
  返回值 
  含义 
  -1 
 <paramref name="value" /> 小于零。  
  
  0 
 <paramref name="value" /> 等于零。  
  
  1 
 <paramref name="value" /> 大于零。</returns>
    </member>
    <member name="M:System.Math.Sign(System.Single)">
      <summary>返回一个整数，该整数表示单精度浮点数字的符号。</summary>
      <param name="value">有符号的数字。</param>
      <returns>一个指示 <paramref name="value" /> 的符号的数字，如下表所示。
  返回值 
  含义 
  -1 
 <paramref name="value" /> 小于零。  
  
  0 
 <paramref name="value" /> 等于零。  
  
  1 
 <paramref name="value" /> 大于零。</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> 等于 <see cref="F:System.Single.NaN" />。</exception>
    </member>
    <member name="M:System.Math.Sin(System.Double)">
      <summary>返回指定角度的正弦值。</summary>
      <param name="a">以弧度计量的角度。</param>
      <returns>
        <paramref name="a" /> 的正弦值。 如果 <paramref name="a" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，此方法将返回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Sinh(System.Double)">
      <summary>返回指定角度的双曲正弦值。</summary>
      <param name="value">以弧度计量的角度。</param>
      <returns>
        <paramref name="value" /> 的双曲正弦值。 如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NaN" />，则此方法返回等于 <see cref="T:System.Double" /> 的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Math.Sqrt(System.Double)">
      <summary>返回指定数字的平方根。</summary>
      <param name="d">将查找其平方根的数字。</param>
      <returns>下表中的值之一。
 <paramref name="d" /> 参数 
  返回值 
  零或正数 
  <paramref name="d" /> 的正平方根。  
  
  负数 
 <see cref="F:System.Double.NaN" /> 等于 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> 等于 <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Tan(System.Double)">
      <summary>返回指定角度的正切值。</summary>
      <param name="a">以弧度计量的角度。</param>
      <returns>
        <paramref name="a" /> 的正切值。 如果 <paramref name="a" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，此方法将返回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Tanh(System.Double)">
      <summary>返回指定角度的双曲正切值。</summary>
      <param name="value">以弧度计量的角度。</param>
      <returns>
        <paramref name="value" /> 的双曲正切值。 如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NegativeInfinity" />，则此方法返回 -1。 如果值等于 <see cref="F:System.Double.PositiveInfinity" />，则此方法返回 1。 如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />，则此方法返回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Truncate(System.Decimal)">
      <summary>计算一个数字的整数部分。</summary>
      <param name="d">要截断的数字。</param>
      <returns>
        <paramref name="d" /> 的整数部分（即舍弃小数位后剩余的数）。</returns>
    </member>
    <member name="M:System.Math.Truncate(System.Double)">
      <summary>计算指定双精度浮点数的整数部分。</summary>
      <param name="d">要截断的数字。</param>
      <returns>
        <paramref name="d" /> 的整数部分（即舍弃小数位后剩余的数或下表所列出的值之一）。
<paramref name="d" /> 返回值 
<see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="T:System.MathF">
      <summary>为三角函数、对数函数和其他通用数学函数提供常数和静态方法。</summary>
    </member>
    <member name="M:System.MathF.Abs(System.Single)">
      <summary>返回单精度浮点数字的绝对值。</summary>
      <param name="x">一个大于或等于 <see cref="F:System.Single.MinValue" /> 但小于或等于 <see cref="F:System.Single.MaxValue" /> 的数字。</param>
      <returns>单精度浮点数 x，满足 0 ≤ x ≤ <see cref="F:System.Single.MaxValue" />。</returns>
    </member>
    <member name="M:System.MathF.Acos(System.Single)">
      <summary>返回余弦值为指定数字的角度。</summary>
      <param name="x">一个表示余弦值的数字，其中 <paramref name="x" /> 必须大于或等于 -1 但小于或等于 1。</param>
      <returns>角度 θ，以弧度为单位，满足 0 ≤ θ ≤ π。
或
如果 <paramref name="x" /> &lt; -1 或 <paramref name="x" /> &gt; 1 或 <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" />，则为 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Acosh(System.Single)">
      <summary>返回双曲余弦值为指定数字的角度。</summary>
      <param name="x">一个表示双曲余弦值的数字，其中 <paramref name="x" /> 必须大于等于 1 但小于等于 <see cref="F:System.Single.PositiveInfinity" />。</param>
      <returns>角度 θ，以弧度为单位，满足 0 ≤ θ ≤ ∞。

或 -
如果 <paramref name="x" /> &lt; 1 或 <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" />，则为 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Asin(System.Single)">
      <summary>返回正弦值为指定数字的角度。</summary>
      <param name="x">一个表示正弦值的数字，其中 <paramref name="x" /> 必须大于或等于 -1 但小于或等于 1。</param>
      <returns>角度 θ，以弧度为单位，满足 -π/2 ≤ θ ≤ π/2。
或
如果 <paramref name="x" /> &lt; -1 或 <paramref name="x" /> &gt; 1 或 <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" />，则为 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Asinh(System.Single)">
      <summary>返回双曲正弦值为指定数字的角度。</summary>
      <param name="x">一个表示双曲正弦值的数字，其中 <paramref name="x" /> 必须大于等于 <see cref="F:System.Single.NegativeInfinity" /> 但小于等于 <see cref="F:System.Single.PositiveInfinity" />。</param>
      <returns>角度 θ，以弧度为单位，满足 -∞ &lt; θ ≤ -1 或 1 ≤ θ &lt; ∞。
或
如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" />，则为 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Atan(System.Single)">
      <summary>返回正切值为指定数字的角度。</summary>
      <param name="x">表示正切值的数字。</param>
      <returns>角度 θ，以弧度为单位，满足 -π/2 ≤ θ ≤ π/2。
或
如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" />，则为 <see cref="F:System.Single.NaN" />；如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NegativeInfinity" />，则 -π/2 舍入为双精度值 (-1.5707963267949)；或者如果 <paramref name="x" /> 等于 <see cref="F:System.Single.PositiveInfinity" />，则 π/2 舍入为双精度值 (1.5707963267949)。</returns>
    </member>
    <member name="M:System.MathF.Atan2(System.Single,System.Single)">
      <summary>返回正切值为两个指定数字的商的角度。</summary>
      <param name="y">点的 y 坐标。</param>
      <param name="x">点的 x 坐标。</param>
      <returns>角度 θ，以弧度为单位，满足 -π ≤ θ ≤ π，且 tan(θ) = <paramref name="y" /> / <paramref name="x" />，其中 (<paramref name="x" />, <paramref name="y" />) 是笛卡儿平面中的点。 请看下面：

由于 (<paramref name="x" />, <paramref name="y" />) 在第 1 象限，因此 0 &lt; θ &lt; π/2。

由于 (<paramref name="x" />, <paramref name="y" />) 在第 2 象限，因此 π/2 &lt; θ ≤ π。

由于 (<paramref name="x" />, <paramref name="y" />) 在第 3 象限，因此 -π &lt; θ &lt; -π/2。

由于 (<paramref name="x" />, <paramref name="y" />) 在第 4 象限，因此 -π/2 &lt; θ &lt; 0。


如果点在象限的边界上，则返回值如下：

如果 y 为 0 并且 x 不为负值，则 θ = 0。

如果 y 为 0 并且 x 为负值，则 θ = π。

如果 y 为正值并且 x 为 0，则 θ = π/2。

如果 y 为负值并且 x 为 0，则 θ = -π/2。

如果 y 为 0 并且 x 为 0，则 θ = 0。


如果 <paramref name="x" /> 或 <paramref name="y" /> 为 <see cref="F:System.Single.NaN" />，或者如果 <paramref name="x" /> 和 <paramref name="y" /> 为 <see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />，则该方法返回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Atanh(System.Single)">
      <summary>返回双曲正切值为指定数字的角度。</summary>
      <param name="x">一个表示双曲正切值的数字，其中 <paramref name="x" /> 必须大于等于 -1 但小于等于 1。</param>
      <returns>角度 θ，以弧度为单位，满足 -∞ &lt; θ &lt;-1 或 1 &lt; θ &lt; ∞。
或
如果 <paramref name="x" /> &lt; -1 或 <paramref name="x" /> &gt; 1 或 <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" />，则为 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.BitDecrement(System.Single)">
      <summary>返回小于 <paramref name="x" /> 的下一个最小值。</summary>
      <param name="x">要递减的值。</param>
      <returns>小于 <paramref name="x" /> 的下一个最小值。

或 -
如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NegativeInfinity" />，则为 <see cref="F:System.Single.NegativeInfinity" />。

或 -
如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" />，则为 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.BitIncrement(System.Single)">
      <summary>返回大于 <paramref name="x" /> 的下一个最大值。</summary>
      <param name="x">要递增的值。</param>
      <returns>大于 <paramref name="x" /> 的下一个最大值。

或 -
如果 <paramref name="x" /> 等于 <see cref="F:System.Single.PositiveInfinity" />，则为 <see cref="F:System.Single.PositiveInfinity" />。

或 -
如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" />，则为 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Cbrt(System.Single)">
      <summary>返回指定数字的立方根。</summary>
      <param name="x">将查找其立方根的数字。</param>
      <returns>
        <paramref name="x" /> 的立方根。
或
如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" />，则为 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Ceiling(System.Single)">
      <summary>返回大于等于指定的单精度浮点数的最小整数值。</summary>
      <param name="x">单精度浮点数。</param>
      <returns>大于或等于 <paramref name="x" /> 的最小整数值。 如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" /> 或 <see cref="F:System.Single.PositiveInfinity" />，则返回该值。 请注意，此方法返回 <see cref="T:System.Single" />，而不是整数类型。</returns>
    </member>
    <member name="M:System.MathF.CopySign(System.Single,System.Single)">
      <summary>返回一个值，它具有 <paramref name="x" /> 的大小和 <paramref name="y" /> 的符号。</summary>
      <param name="x">其大小在结果中使用的数字。</param>
      <param name="y">其符号在结果中使用的数字。</param>
      <returns>一个值，它具有 <paramref name="x" /> 的大小和 <paramref name="y" /> 的符号。</returns>
    </member>
    <member name="M:System.MathF.Cos(System.Single)">
      <summary>返回指定角度的余弦值。</summary>
      <param name="x">以弧度计量的角度。</param>
      <returns>
        <paramref name="x" /> 的余弦值。 如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" /> 或 <see cref="F:System.Single.PositiveInfinity" />，此方法将返回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Cosh(System.Single)">
      <summary>返回指定角度的双曲余弦值。</summary>
      <param name="x">以弧度计量的角度。</param>
      <returns>
        <paramref name="x" /> 的双曲余弦值。 如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NegativeInfinity" /> 或 <see cref="F:System.Single.PositiveInfinity" />，则返回 <see cref="F:System.Single.PositiveInfinity" />。 如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" />，则返回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="F:System.MathF.E">
      <summary>表示自然对数的底，它由常数 <see langword="e" /> 指定。</summary>
    </member>
    <member name="M:System.MathF.Exp(System.Single)">
      <summary>返回 <see langword="e" /> 的指定次幂。</summary>
      <param name="x">指定幂的数字。</param>
      <returns>数字 <see langword="e" /> 的 <paramref name="x" /> 次幂。 如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" /> 或 <see cref="F:System.Single.PositiveInfinity" />，则返回该值。 如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NegativeInfinity" />，则返回 0。</returns>
    </member>
    <member name="M:System.MathF.Floor(System.Single)">
      <summary>返回小于等于指定单精度浮点数的最大整数值。</summary>
      <param name="x">单精度浮点数。</param>
      <returns>小于或等于 <paramref name="x" /> 的最大整数值。 如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" /> 或 <see cref="F:System.Single.PositiveInfinity" />，则返回该值。</returns>
    </member>
    <member name="M:System.MathF.FusedMultiplyAdd(System.Single,System.Single,System.Single)">
      <summary>返回 (x * y) + z，舍入为一个三元运算。</summary>
      <param name="x">要与 <paramref name="y" /> 相乘的数字。</param>
      <param name="y">要与 <paramref name="x" /> 相乘的数字。</param>
      <param name="z">要与 <paramref name="x" /> 和 <paramref name="y" /> 相乘所得的结果相加的数字。</param>
      <returns>(x * y) + z，舍入为一个三元运算。</returns>
    </member>
    <member name="M:System.MathF.IEEERemainder(System.Single,System.Single)">
      <summary>返回一指定数字被另一指定数字相除的余数。</summary>
      <param name="x">被除数。</param>
      <param name="y">除数。</param>
      <returns>等于 <paramref name="x" /> - (<paramref name="y" /> Q) 的数，其中 Q 是 <paramref name="x" /> / <paramref name="y" /> 的商的最接近整数（如果 <paramref name="x" /> / <paramref name="y" /> 在两个整数中间，则返回偶数）。
如果 <paramref name="x" /> - (<paramref name="y" /> Q) 为零，则在 <paramref name="x" /> 为正时返回值 +0，而在 <paramref name="x" /> 为负时返回 -0。
如果 <paramref name="y" /> = 0，则返回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.ILogB(System.Single)">
      <summary>返回指定数字以 2 为底的整数对数。</summary>
      <param name="x">要查找其对数的数字。</param>
      <returns>下表中的值之一。
 <paramref name="x" /> 参数 
  返回值 
  默认 
  <paramref name="x" /> 以 2 为底的整数对数，即 (int)log2(<paramref name="x" />)。  
  
  零 
 <see cref="F:System.Int32.MinValue" /> 等于 <see cref="F:System.Single.NaN" /> 或 <see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" /><see cref="F:System.Int32.MaxValue" /></returns>
    </member>
    <member name="M:System.MathF.Log(System.Single)">
      <summary>返回指定数字的自然对数（底为 <see langword="e" />）。</summary>
      <param name="x">要查找其对数的数字。</param>
      <returns>下表中的值之一。
 <paramref name="x" /> 参数 
  返回值 
  正 
  <paramref name="x" /> 的自然对数，即 ln <paramref name="x" /> 或 log e <paramref name="x" /> 零 
 <see cref="F:System.Single.NegativeInfinity" /> 负数 
 <see cref="F:System.Single.NaN" /> 等于 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> 等于 <see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Log(System.Single,System.Single)">
      <summary>返回指定数字在使用指定底时的对数。</summary>
      <param name="x">要查找其对数的数字。</param>
      <param name="y">基数。</param>
      <returns>下表中的值之一。 （+Infinity 表示 <see cref="F:System.Single.PositiveInfinity" />，-Infinity 表示 <see cref="F:System.Single.NegativeInfinity" />，NaN 表示 <see cref="F:System.Single.NaN" />。）
 <paramref name="x" /><paramref name="newBase" /> 返回值 
 <paramref name="x" />&gt; 0 
  (0 &lt;<paramref name="newBase" />&lt; 1) 或 (<paramref name="newBase" />&gt; 1) 
  lognewBase(a) 
 <paramref name="x" />&lt; 0 
  （任意值） 
  NaN 
  （任意值） 
 <paramref name="newBase" />&lt; 0 
  NaN 
 <paramref name="x" /> != 1 
 <paramref name="newBase" /> = 0 
  NaN 
 <paramref name="x" /> != 1 
 <paramref name="newBase" /> = +Infinity 
  NaN 
 <paramref name="x" /> = NaN 
  （任意值） 
  NaN 
  （任意值） 
 <paramref name="newBase" /> = NaN 
  NaN 
  （任意值） 
 <paramref name="newBase" /> = 1 
  NaN 
 <paramref name="x" /> = 0 
  0 &lt;<paramref name="newBase" />&lt; 1 
  +Infinity 
 <paramref name="x" /> = 0 
 <paramref name="newBase" />&gt; 1 
  -Infinity 
 <paramref name="x" /> =  +Infinity 
  0 &lt;<paramref name="newBase" />&lt; 1 
  -Infinity 
 <paramref name="x" /> =  +Infinity 
 <paramref name="newBase" />&gt; 1 
  +Infinity 
 <paramref name="x" /> = 1 
 <paramref name="newBase" /> = 0 
  0 
 <paramref name="x" /> = 1 
 <paramref name="newBase" /> = +Infinity 
  0</returns>
    </member>
    <member name="M:System.MathF.Log10(System.Single)">
      <summary>返回指定数字以 10 为底的对数。</summary>
      <param name="x">要查找其对数的数字。</param>
      <returns>下表中的值之一。
 <paramref name="x" /> 参数 
  返回值 
  正 
  <paramref name="x" /> 的以 10 为底的对数，即 log 10<paramref name="x" />。  
  
  零 
 <see cref="F:System.Single.NegativeInfinity" /> 负数 
 <see cref="F:System.Single.NaN" /> 等于 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> 等于 <see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Log2(System.Single)">
      <summary>返回指定数字以 2 为底的对数。</summary>
      <param name="x">要查找其对数的数字。</param>
      <returns>下表中的值之一。
 <paramref name="x" /> 参数 
  返回值 
  正 
  <paramref name="x" /> 以 2 为底的对数，即 log 2<paramref name="x" />。  
  
  零 
 <see cref="F:System.Single.NegativeInfinity" /> 负数 
 <see cref="F:System.Single.NaN" /> 等于 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> 等于 <see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Max(System.Single,System.Single)">
      <summary>返回两个单精度浮点数字中较大的一个。</summary>
      <param name="x">要比较的两个单精度浮点数中的第一个。</param>
      <param name="y">要比较的两个单精度浮点数中的第二个。</param>
      <returns>
        <paramref name="x" /> 或 <paramref name="y" /> 参数中较大的一个。 如果 <paramref name="x" /> 或 <paramref name="y" /> 或者 <paramref name="x" /> 和 <paramref name="y" /> 都等于 <see cref="F:System.Single.NaN" />，则返回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.MaxMagnitude(System.Single,System.Single)">
      <summary>返回两个单精度浮点数字中的较大值。</summary>
      <param name="x">要比较的两个单精度浮点数中的第一个。</param>
      <param name="y">要比较的两个单精度浮点数中的第二个。</param>
      <returns>参数 <paramref name="x" /> 或 <paramref name="y" />，取较大的值。 如果 <paramref name="x" /> 或 <paramref name="y" /> 或者 <paramref name="x" /> 和 <paramref name="y" /> 都等于 <see cref="F:System.Single.NaN" />，则返回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Min(System.Single,System.Single)">
      <summary>返回两个单精度浮点数字中较小的一个。</summary>
      <param name="x">要比较的两个单精度浮点数中的第一个。</param>
      <param name="y">要比较的两个单精度浮点数中的第二个。</param>
      <returns>
        <paramref name="x" /> 或 <paramref name="y" /> 参数中较小的一个。 如果 <paramref name="x" /> 或 <paramref name="y" /> 或者 <paramref name="x" /> 和 <paramref name="y" /> 都等于 <see cref="F:System.Single.NaN" />，则返回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.MinMagnitude(System.Single,System.Single)">
      <summary>返回两个单精度浮点数字中的较小值。</summary>
      <param name="x">要比较的两个单精度浮点数中的第一个。</param>
      <param name="y">要比较的两个单精度浮点数中的第二个。</param>
      <returns>参数 <paramref name="x" /> 或 <paramref name="y" />，取较小的值。 如果 <paramref name="x" /> 或 <paramref name="y" /> 或者 <paramref name="x" /> 和 <paramref name="y" /> 都等于 <see cref="F:System.Single.NaN" />，则返回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="F:System.MathF.PI">
      <summary>表示圆的周长与其直径的比值，由常数 π 指定。</summary>
    </member>
    <member name="M:System.MathF.Pow(System.Single,System.Single)">
      <summary>返回指定数字的指定次幂。</summary>
      <param name="x">要乘幂的单精度浮点数。</param>
      <param name="y">指定幂的单精度浮点数。</param>
      <returns>数字 <paramref name="x" /> 的 <paramref name="y" /> 次幂。</returns>
    </member>
    <member name="M:System.MathF.Round(System.Single)">
      <summary>将单精度浮点值舍入到最接近的整数值，并将中点值舍入到最接近的偶数。</summary>
      <param name="x">要舍入的单精度浮点数。</param>
      <returns>最接近 <paramref name="x" /> 的整数。 如果 <paramref name="x" /> 的小数部分正好处于两个整数中间，其中一个整数为偶数，另一个整数为奇数，则返回偶数。 请注意，此方法返回 <see cref="T:System.Single" />，而不是整数类型。</returns>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.Int32)">
      <summary>将单精度浮点值舍入到指定的小数位数，并将中点值舍入到最接近的偶数。</summary>
      <param name="x">要舍入的单精度浮点数。</param>
      <param name="digits">返回值中的小数数字。</param>
      <returns>最接近 <paramref name="x" /> 的 <paramref name="digits" /> 位小数的数字。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> 小于 0 或大于 6。</exception>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.Int32,System.MidpointRounding)">
      <summary>将单精度浮点值舍入到指定的小数位数，并为中点值使用指定的舍入规则。</summary>
      <param name="x">要舍入的单精度浮点数。</param>
      <param name="digits">返回值中的小数数字。</param>
      <param name="mode">在两个数字之间时如何舍入 <paramref name="x" /> 的规范。</param>
      <returns>最接近 <paramref name="x" /> 的 <paramref name="digits" /> 位小数的数字。 如果 <paramref name="x" /> 比 <paramref name="digits" /> 少部分数字，<paramref name="x" /> 原样返回。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> 小于 0 或大于 6。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是 <see cref="T:System.MidpointRounding" /> 的一个有效值。</exception>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.MidpointRounding)">
      <summary>将单精度浮点值舍入到最接近的整数，并为中点值使用指定的舍入规则。</summary>
      <param name="x">要舍入的单精度浮点数。</param>
      <param name="mode">在两个数字之间时如何舍入 <paramref name="x" /> 的规范。</param>
      <returns>最接近 <paramref name="x" /> 的整数。 如果 <paramref name="x" /> 是两个整数的中值，这两个整数一个为偶数，另一个为奇数，则 <paramref name="mode" /> 确定返回两个整数中的哪一个。 请注意，此方法返回 <see cref="T:System.Single" />，而不是整数类型。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是 <see cref="T:System.MidpointRounding" /> 的一个有效值。</exception>
    </member>
    <member name="M:System.MathF.ScaleB(System.Single,System.Int32)">
      <summary>返回有效计算的 x * 2^n。</summary>
      <param name="x">指定基值的单精度浮点数。</param>
      <param name="n">指定幂的单精度浮点数。</param>
      <returns>有效计算的 x * 2^n。</returns>
    </member>
    <member name="M:System.MathF.Sign(System.Single)">
      <summary>返回一个整数，该整数表示单精度浮点数字的符号。</summary>
      <param name="x">有符号的数字。</param>
      <returns>一个指示 <paramref name="x" /> 的符号的数字，如下表所示。
  返回值 
  含义 
  -1 
 <paramref name="x" /> 小于零。  
  
  0 
 <paramref name="x" /> 等于零。  
  
  1 
 <paramref name="x" /> 大于零。</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" />。</exception>
    </member>
    <member name="M:System.MathF.Sin(System.Single)">
      <summary>返回指定角度的正弦值。</summary>
      <param name="x">以弧度计量的角度。</param>
      <returns>
        <paramref name="x" /> 的正弦值。 如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" /> 或 <see cref="F:System.Single.PositiveInfinity" />，此方法将返回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Sinh(System.Single)">
      <summary>返回指定角度的双曲正弦值。</summary>
      <param name="x">以弧度计量的角度。</param>
      <returns>
        <paramref name="x" /> 的双曲正弦值。 如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NegativeInfinity" />、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NaN" />，则此方法返回等于 <paramref name="x" /> 的 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.MathF.Sqrt(System.Single)">
      <summary>返回指定数字的平方根。</summary>
      <param name="x">将查找其平方根的数字。</param>
      <returns>下表中的值之一。
 <paramref name="x" /> 参数 
  返回值 
  零或正数 
  <paramref name="x" /> 的正平方根。  
  
  负数 
 <see cref="F:System.Single.NaN" /> 等于 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> 等于 <see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Tan(System.Single)">
      <summary>返回指定角度的正切值。</summary>
      <param name="x">以弧度计量的角度。</param>
      <returns>
        <paramref name="x" /> 的正切值。 如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" /> 或 <see cref="F:System.Single.PositiveInfinity" />，此方法将返回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Tanh(System.Single)">
      <summary>返回指定角度的双曲正切值。</summary>
      <param name="x">以弧度计量的角度。</param>
      <returns>
        <paramref name="x" /> 的双曲正切值。 如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NegativeInfinity" />，则此方法返回 -1。 如果值等于 <see cref="F:System.Single.PositiveInfinity" />，则此方法返回 1。 如果 <paramref name="x" /> 等于 <see cref="F:System.Single.NaN" />，则此方法返回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Truncate(System.Single)">
      <summary>计算指定单精度浮点数的整数部分。</summary>
      <param name="x">要截断的数字。</param>
      <returns>
        <paramref name="x" /> 的整数部分（即舍弃小数位后剩余的数或下表所列出的值之一）。
<paramref name="x" /> 返回值 
<see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /><see cref="F:System.Single.NegativeInfinity" /><see cref="F:System.Single.NegativeInfinity" /><see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="T:System.Net.WebUtility">
      <summary>提供在处理 Web 请求时用于编码和解码 URL 的方法。</summary>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String)">
      <summary>将已经为 HTTP 传输进行过 HTML 编码的字符串转换为已解码的字符串。</summary>
      <param name="value">要解码的字符串。</param>
      <returns>已解码的字符串。</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String,System.IO.TextWriter)">
      <summary>将已经过 HTML 编码的字符串转换为已解码的字符串并将其发送给 <see cref="T:System.IO.TextWriter" /> 输出流。</summary>
      <param name="value">要解码的字符串。</param>
      <param name="output">
        <see cref="T:System.IO.TextWriter" /> 输出流。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="output" /> 参数不为 <see langword="null" />，则 <paramref name="value" /> 参数不能为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String)">
      <summary>将字符串转换为 HTML 编码字符串。</summary>
      <param name="value">要编码的字符串。</param>
      <returns>已编码的字符串。</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String,System.IO.TextWriter)">
      <summary>将字符串转换为 HTML 编码的字符串，并以 <see cref="T:System.IO.TextWriter" /> 输出流的形式返回输出。</summary>
      <param name="value">要编码的字符串。</param>
      <param name="output">
        <see cref="T:System.IO.TextWriter" /> 输出流。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="output" /> 参数不为 <see langword="null" />，则 <paramref name="value" /> 参数不能为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecode(System.String)">
      <summary>将已经为在 URL 中传输而编码的字符串转换为解码的字符串。</summary>
      <param name="encodedValue">要进行解码的 URL 编码的字符串。</param>
      <returns>已解码的字符串。</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>将为通过 URL 传输已编码的已编码字节数组转换为解码的字节数组。</summary>
      <param name="encodedValue">要进行解码的 URL 编码的 <see cref="T:System.Byte" /> 数组。</param>
      <param name="offset">相对于要解码的 <see cref="T:System.Byte" /> 数组的开头的偏移量（以字节为单位）。</param>
      <param name="count">要从 <see cref="T:System.Byte" /> 数组解码的计数（以字节为单位）。</param>
      <returns>一个已解码的 <see cref="T:System.Byte" /> 数组。</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncode(System.String)">
      <summary>将文本字符串转换为 URL 编码的字符串。</summary>
      <param name="value">要进行 URL 编码的文本。</param>
      <returns>URL 编码的字符串。</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>将字节数组转换为 URL 编码的字节数组。</summary>
      <param name="value">要进行 URL 编码的 <see cref="T:System.Byte" /> 数组。</param>
      <param name="offset">相对于要编码的 <see cref="T:System.Byte" /> 数组的开头的偏移量（以字节为单位）。</param>
      <param name="count">要从 <see cref="T:System.Byte" /> 数组编码的计数（以字节为单位）。</param>
      <returns>编码的 <see cref="T:System.Byte" /> 数组。</returns>
    </member>
    <member name="T:System.Numerics.BitOperations">
      <summary>提供固有的 bit-twiddling 操作的实用工具方法。 这些方法在基础平台上可用时使用硬件内部函数；否则，它们使用优化的软件回退。</summary>
    </member>
    <member name="M:System.Numerics.BitOperations.LeadingZeroCount(System.UInt32)">
      <summary>计算无符号 32 位整数掩码中的前导零位数。</summary>
      <param name="value">掩码。</param>
      <returns>掩码中的前导零位数。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.LeadingZeroCount(System.UInt64)">
      <summary>计算无符号 64 位整数掩码中的前导零位数。</summary>
      <param name="value">掩码。</param>
      <returns>掩码中的前导零位数。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.Log2(System.UInt32)">
      <summary>返回指定值以 2为底的对数向下取整的值。</summary>
      <param name="value">要获取对数的数字。</param>
      <returns>指定值的底数为 2 的对数。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.Log2(System.UInt64)">
      <summary>返回指定值以 2为底的对数向下取整的值。</summary>
      <param name="value">要获取对数的数字。</param>
      <returns>指定值的底数为 2 的对数。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.PopCount(System.UInt32)">
      <summary>返回掩码的填充计数（位集数）。</summary>
      <param name="value">掩码。</param>
      <returns>掩码的填充计数。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.PopCount(System.UInt64)">
      <summary>返回无符号 64 位整数掩码的填充计数（位集数）。</summary>
      <param name="value">掩码。</param>
      <returns>掩码的填充计数。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateLeft(System.UInt32,System.Int32)">
      <summary>旋转指定位数左侧的指定值。</summary>
      <param name="value">要旋转的值。</param>
      <param name="offset">要旋转的位数。 范围 [0..31] 之外的任何值都被视为全等 mod 32。</param>
      <returns>旋转的值。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateLeft(System.UInt64,System.Int32)">
      <summary>旋转指定位数左侧的指定值。</summary>
      <param name="value">要旋转的值。</param>
      <param name="offset">要旋转的位数。 范围 [0..63] 之外的任何值都被视为全等 mod 64。</param>
      <returns>旋转的值。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateRight(System.UInt32,System.Int32)">
      <summary>旋转指定位数右侧的指定值。</summary>
      <param name="value">要旋转的值。</param>
      <param name="offset">要旋转的位数。 范围 [0..31] 之外的任何值都被视为全等 mod 32。</param>
      <returns>旋转的值。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateRight(System.UInt64,System.Int32)">
      <summary>旋转指定位数右侧的指定值。</summary>
      <param name="value">要旋转的值。</param>
      <param name="offset">要旋转的位数。 范围 [0..63] 之外的任何值都被视为全等 mod 64。</param>
      <returns>旋转的值。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.Int32)">
      <summary>计算 32 位整数值掩码中的尾随零位数。</summary>
      <param name="value">掩码。</param>
      <returns>整数值中的尾随零位数。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.Int64)">
      <summary>计算 64 位整数值掩码中的尾随零位数。</summary>
      <param name="value">掩码。</param>
      <returns>掩码中的尾随零位数。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.UInt32)">
      <summary>计算无符号 32 位整数值掩码中的尾随零位数。</summary>
      <param name="value">掩码。</param>
      <returns>掩码中的尾随零位数。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.UInt64)">
      <summary>计算无符号 64 位整数值掩码中的尾随零位数。</summary>
      <param name="value">掩码。</param>
      <returns>掩码中的尾随零位数。</returns>
    </member>
    <member name="T:System.OperatingSystem">
      <summary>表示有关操作系统的信息，如版本和平台标识符。 此类不能被继承。</summary>
    </member>
    <member name="M:System.OperatingSystem.#ctor(System.PlatformID,System.Version)">
      <summary>使用指定的平台标识符值和版本对象来初始化 <see cref="T:System.OperatingSystem" /> 类的新实例。</summary>
      <param name="platform">
        <see cref="T:System.PlatformID" /> 值之一，指示操作系统平台。</param>
      <param name="version">
        <see cref="T:System.Version" /> 对象，指示操作系统的版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="platform" /> 不是一个 <see cref="T:System.PlatformID" /> 枚举值。</exception>
    </member>
    <member name="M:System.OperatingSystem.Clone">
      <summary>创建与此实例相同的 <see cref="T:System.OperatingSystem" /> 对象。</summary>
      <returns>
        <see cref="T:System.OperatingSystem" /> 对象，是此实例的副本。</returns>
    </member>
    <member name="M:System.OperatingSystem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用反序列化此实例所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">要用序列化信息填充的对象。</param>
      <param name="context">存储和检索序列化数据的位置。 留待将来使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.OperatingSystem.Platform">
      <summary>获取标识操作系统平台的 <see cref="T:System.PlatformID" /> 枚举值。</summary>
      <returns>
        <see cref="T:System.PlatformID" /> 值之一。</returns>
    </member>
    <member name="P:System.OperatingSystem.ServicePack">
      <summary>获取此 <see cref="T:System.OperatingSystem" /> 对象表示的 Service Pack 版本。</summary>
      <returns>如果支持 Service Pack 并至少安装了一个 Service Pack，则为该 Service Pack 版本；否则为空字符串 ("")。</returns>
    </member>
    <member name="M:System.OperatingSystem.ToString">
      <summary>将此 <see cref="T:System.OperatingSystem" /> 对象的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <see cref="P:System.OperatingSystem.Platform" />、<see cref="P:System.OperatingSystem.Version" /> 和 <see cref="P:System.OperatingSystem.ServicePack" /> 属性的返回值的字符串表示形式。</returns>
    </member>
    <member name="P:System.OperatingSystem.Version">
      <summary>获取标识操作系统的 <see cref="T:System.Version" /> 对象。</summary>
      <returns>
        <see cref="T:System.Version" /> 对象，描述操作系统的主版本号、次版本号、内部版本号和修订版本号。</returns>
    </member>
    <member name="P:System.OperatingSystem.VersionString">
      <summary>获取平台标识符、版本和当前安装在操作系统上的 Service Pack 的连接字符串表示形式。</summary>
      <returns>
        <see cref="P:System.OperatingSystem.Platform" />、<see cref="P:System.OperatingSystem.Version" /> 和 <see cref="P:System.OperatingSystem.ServicePack" /> 属性的返回值的字符串表示形式。</returns>
    </member>
    <member name="T:System.PlatformID">
      <summary>标识程序集所支持的操作系统（或平台）。</summary>
    </member>
    <member name="F:System.PlatformID.MacOSX">
      <summary>操作系统是 Macintosh。 Silverlight 返回此值。 在 .NET Core 上，将替换为 Unix。</summary>
    </member>
    <member name="F:System.PlatformID.Unix">
      <summary>操作系统为 Unix。</summary>
    </member>
    <member name="F:System.PlatformID.Win32NT">
      <summary>操作系统为 Windows NT 或较新的版本。</summary>
    </member>
    <member name="F:System.PlatformID.Win32S">
      <summary>操作系统为 Win32s（Win32 子集）类型。 不再使用此值。</summary>
    </member>
    <member name="F:System.PlatformID.Win32Windows">
      <summary>操作系统为 Windows 95 或 Windows 98。 不再使用此值。</summary>
    </member>
    <member name="F:System.PlatformID.WinCE">
      <summary>操作系统为 Windows CE。 不再使用此值。</summary>
    </member>
    <member name="F:System.PlatformID.Xbox">
      <summary>开发平台为 Xbox 360。 不再使用此值。</summary>
    </member>
    <member name="T:System.Progress`1">
      <summary>提供调用每个报告进度的值的回调的 <see cref="T:System.IProgress`1" /> 。</summary>
      <typeparam name="T">指定进度报表值的类型。</typeparam>
    </member>
    <member name="M:System.Progress`1.#ctor">
      <summary>初始化 <see cref="T:System.Progress`1" /> 对象。</summary>
    </member>
    <member name="M:System.Progress`1.#ctor(System.Action{`0})">
      <summary>用指定的回调初始化 <see cref="T:System.Progress`1" /> 对象。</summary>
      <param name="handler">为每个报告的进度值调用处理程序。 该处理程序会调用除了任何委托 <see cref="E:System.Progress`1.ProgressChanged" /> 事件注册。 根据 <see cref="T:System.Threading.SynchronizationContext" /> 实例， <see cref="T:System.Progress`1" /> 在构造时所捕获的实例, 该处理程序实例很有可能同时调用自身。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> 为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
    </member>
    <member name="M:System.Progress`1.OnReport(`0)">
      <summary>报告进度更改。</summary>
      <param name="value">进度更新之后的值。</param>
    </member>
    <member name="E:System.Progress`1.ProgressChanged">
      <summary>为每个报告进度的值引发。</summary>
    </member>
    <member name="M:System.Progress`1.System#IProgress{T}#Report(`0)">
      <summary>报告进度更改。</summary>
      <param name="value">进度更新之后的值。</param>
    </member>
    <member name="T:System.Random">
      <summary>表示伪随机数生成器，这是一种能够产生满足某些随机性统计需求的数字序列的设备。</summary>
    </member>
    <member name="M:System.Random.#ctor">
      <summary>使用与时间相关的默认种子值，初始化 <see cref="T:System.Random" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Random.#ctor(System.Int32)">
      <summary>使用指定的种子值初始化 <see cref="T:System.Random" /> 类的新实例。</summary>
      <param name="Seed">用来计算伪随机数序列起始值的数字。 如果指定的是负数，则使用其绝对值。</param>
    </member>
    <member name="M:System.Random.Next">
      <summary>返回一个非负随机整数。</summary>
      <returns>大于或等于 0 且小于 <see cref="F:System.Int32.MaxValue" /> 的 32 位有符号整数。</returns>
    </member>
    <member name="M:System.Random.Next(System.Int32)">
      <summary>返回一个小于所指定最大值的非负随机整数。</summary>
      <param name="maxValue">要生成的随机数的上限（随机数不能取该上限值）。 <paramref name="maxValue" /> 必须大于或等于 0。</param>
      <returns>大于或等于零且小于 <paramref name="maxValue" /> 的 32 位有符号整数，即：返回值的范围通常包括零但不包括 <paramref name="maxValue" />。 但是，如果 <paramref name="maxValue" /> 等于 0，则返回 <paramref name="maxValue" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> 小于 0。</exception>
    </member>
    <member name="M:System.Random.Next(System.Int32,System.Int32)">
      <summary>返回在指定范围内的任意整数。</summary>
      <param name="minValue">返回的随机数的下界（随机数可取该下界值）。</param>
      <param name="maxValue">返回的随机数的上界（随机数不能取该上界值）。 <paramref name="maxValue" /> 必须大于或等于 <paramref name="minValue" />。</param>
      <returns>一个大于等于 <paramref name="minValue" /> 且小于 <paramref name="maxValue" /> 的 32 位带符号整数，即：返回的值范围包括 <paramref name="minValue" /> 但不包括 <paramref name="maxValue" />。 如果 <paramref name="minValue" /> 等于 <paramref name="maxValue" />，则返回 <paramref name="minValue" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minValue" /> 大于 <paramref name="maxValue" />。</exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Byte[])">
      <summary>用随机数填充指定字节数组的元素。</summary>
      <param name="buffer">包含随机数的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Span{System.Byte})">
      <param name="buffer" />
    </member>
    <member name="M:System.Random.NextDouble">
      <summary>返回一个大于或等于 0.0 且小于 1.0 的随机浮点数。</summary>
      <returns>大于或等于 0.0 且小于 1.0 的双精度浮点数。</returns>
    </member>
    <member name="M:System.Random.Sample">
      <summary>返回一个介于 0.0 和 1.0 之间的随机浮点数。</summary>
      <returns>大于或等于 0.0 且小于 1.0 的双精度浮点数。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameProxy">
      <summary>提供可远程使用的 <see langword="AssemblyName" /> 版本。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyNameProxy" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)">
      <summary>获取给定文件的 <see langword="AssemblyName" />。</summary>
      <param name="assemblyFile">要为其获取 <see langword="AssemblyName" /> 的程序集文件。</param>
      <returns>表示给定文件的 <see langword="AssemblyName" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> 为空。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> 未找到。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。</exception>
    </member>
    <member name="T:System.ResolveEventHandler">
      <summary>表示处理 <see cref="E:System.AppDomain.TypeResolve" /> 的 <see cref="E:System.AppDomain.ResourceResolve" />、<see cref="E:System.AppDomain.AssemblyResolve" /> 或 <see cref="T:System.AppDomain" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="args">事件数据。</param>
      <returns>解析类型、程序集或资源的程序集；如果无法解析程序集，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.SwitchExpressionException">
      <summary>表示非穷举的 switch 表达式无法在运行时匹配其输入。 异常可能包含表示不匹配值的对象。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> 类的新实例。</summary>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.Object)">
      <summary>使用不匹配的 switch 值初始化 <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> 类的新实例。</summary>
      <param name="unmatchedValue">与任何 switch 用例都不匹配的 switch 值。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> 类的新实例。</summary>
      <param name="message">显示给最终用户的消息。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.String,System.Exception)">
      <summary>使用指定的详细说明和指定的异常初始化 <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> 类的新实例。</summary>
      <param name="message">显示给最终用户的消息。</param>
      <param name="innerException">对导致此异常的内部异常的引用。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用参数名和其他异常信息来设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">存储正用于序列化或反序列化正由 <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> 序列化或反序列化的对象的数据。</param>
      <param name="context">描述生成该异常的流的源和目标，以及用于保留该上下文和附加的由调用方定义的上下文的序列化方法。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.SwitchExpressionException.Message">
      <summary>获取异常消息。</summary>
      <returns>完整的消息字符串。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.SwitchExpressionException.UnmatchedValue">
      <summary>获取与该异常关联的不匹配值。</summary>
      <returns>导致异常的不匹配值。</returns>
    </member>
    <member name="T:System.Runtime.ProfileOptimization">
      <summary>通过基于以前编译中创建的配置文件，执行可能执行的方法的后台编译，提高了需要实时 (JIT) 编译器的应用程序中应用程序域的启动性能。</summary>
    </member>
    <member name="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)">
      <summary>启用当前应用程序域的优化配置，并设置存储优化配置文件的文件夹。 在单核计算机上，此方法被忽略。</summary>
      <param name="directoryPath">指向某个文件夹的完整路径，其中存储了用于当前应用程序域的配置文件。</param>
    </member>
    <member name="M:System.Runtime.ProfileOptimization.StartProfile(System.String)">
      <summary>启动方法的实时 (JIT) 编译，这些方法记录在后台线程上的指定配置文件中。 开始记录当前方法的使用，此记录过程之后将覆盖指定的配置文件。</summary>
      <param name="profile">要使用的配置文件的文件名。</param>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesAttribute">
      <summary>定义可以跨多个版本的组件、类型或类型成员的兼容性保证。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)">
      <summary>使用一个指示某个库、类型或成员保证的跨多个版本的兼容性级别的值初始化 <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" /> 类的新实例。</summary>
      <param name="guarantees">用于指定保证的跨多个版本的兼容性级别的枚举值之一。</param>
    </member>
    <member name="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees">
      <summary>获取一个值，该值指示保证的跨多个版本的库、类型或类型成员的兼容性级别。</summary>
      <returns>用于指定保证的跨多个版本的兼容性级别的枚举值之一。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesOptions">
      <summary>描述可以跨多个版本的组件、类型或类型成员的兼容性保证。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange">
      <summary>开发人员保证该类型具有多版本交换兼容性。 该类型的使用者可以预期在将来的版本间具有兼容性，并可以在其所有接口中使用该类型。 并行执行不能解决版本控制问题。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.None">
      <summary>开发人员不保证版本间的兼容性。 组件、类型或成员的使用者可以预期将来的版本会中断现有客户端。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide">
      <summary>该组件已经过测试，它能够在将程序集的多个版本加载到同一应用程序域时工作。 将来的版本可能会破坏兼容性。 但是，当进行此类破坏性更改时，不会修改旧版本，而是旧版本继续与新版本共存。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable">
      <summary>开发人员保证版本间的稳定兼容性。 该类型的使用者可以预期将来的版本不会中断现有客户端。 但是，如果将来的版本会中断客户端，并且客户端未在其接口中使用该类型，则并行执行可能会解决该问题。</summary>
    </member>
    <member name="T:System.Runtime.Versioning.FrameworkName">
      <summary>表示 .NET Framework 的版本的名称。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)">
      <summary>从包含 .NET Framework 版本信息的字符串初始化 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 类的新实例。</summary>
      <param name="frameworkName">包含 .NET Framework 版本信息的字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="frameworkName" /> 为 <see cref="F:System.String.Empty" />。

或 -
<paramref name="frameworkName" /> 有少于两个组件或多于三个组件。

或
<paramref name="frameworkName" /> 中未包括主要版本号和次要版本号。
或
<paramref name="frameworkName" /> 中未包括有效版本号。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)">
      <summary>从标识 .NET Framework 版本的字符串和 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象初始化 <see cref="T:System.Version" /> 类的新实例。</summary>
      <param name="identifier">标识 .NET Framework 版本的字符串。</param>
      <param name="version">包含 .NET Framework 版本信息的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="identifier" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> 为 <see langword="null" />。
或
<paramref name="version" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)">
      <summary>从字符串、标识 .NET Framework 版本的 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象以及配置文件名称初始化 <see cref="T:System.Version" /> 类的新实例。</summary>
      <param name="identifier">标识 .NET Framework 版本的字符串。</param>
      <param name="version">包含 .NET Framework 版本信息的对象。</param>
      <param name="profile">配置文件名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="identifier" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> 为 <see langword="null" />。

或 -
<paramref name="version" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Object)">
      <summary>返回一个值，该值指示此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 实例是否表示与指定的对象相同的 .NET Framework 版本。</summary>
      <param name="obj">要与当前类型进行比较的对象。</param>
      <returns>如果当前 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的每个部分都与 <paramref name="obj" /> 的相应部分匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)">
      <summary>返回一个值，该值指示此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 实例是否表示与指定的 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 实例相同的 .NET Framework 版本。</summary>
      <param name="other">要与当前类型进行比较的对象。</param>
      <returns>如果当前 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的每个部分都与 <paramref name="other" /> 的相应部分匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.FullName">
      <summary>获取此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的全名。</summary>
      <returns>此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的全名。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.GetHashCode">
      <summary>返回 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的哈希代码。</summary>
      <returns>一个 32 位带符号整数，表示此实例的哈希代码。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Identifier">
      <summary>获取此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的标识符。</summary>
      <returns>此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的标识符。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象是否表示相同的 .NET Framework 版本。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 参数表示同一 .NET Framework 版本，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象是否表示不同的 .NET Framework 版本。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 参数表示不同的 .NET Framework 版本，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Profile">
      <summary>获取此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的配置文件名称。</summary>
      <returns>此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的配置文件名称。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.ToString">
      <summary>返回此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的字符串表示形式。</summary>
      <returns>表示此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的字符串。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Version">
      <summary>获取此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的版本。</summary>
      <returns>包含此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的版本信息的对象。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceConsumptionAttribute">
      <summary>指定由类成员使用的资源。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceConsumptionAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
      <summary>初始化 <see cref="T:System.Runtime.Versioning.ResourceConsumptionAttribute" /> 类的新实例，并指定所用资源的范围。</summary>
      <param name="resourceScope">所用资源的 <see cref="T:System.Runtime.Versioning.ResourceScope" />。</param>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceConsumptionAttribute.#ctor(System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
      <summary>初始化 <see cref="T:System.Runtime.Versioning.ResourceConsumptionAttribute" /> 类的新实例，并指定所用资源的范围及其实际使用范围。</summary>
      <param name="resourceScope">所用资源的 <see cref="T:System.Runtime.Versioning.ResourceScope" />。</param>
      <param name="consumptionScope">此成员使用的 <see cref="T:System.Runtime.Versioning.ResourceScope" />。</param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceConsumptionAttribute.ConsumptionScope">
      <summary>获取此成员的使用范围。</summary>
      <returns>一个 <see cref="T:System.Runtime.Versioning.ResourceScope" /> 对象，指定此成员使用的资源范围。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceConsumptionAttribute.ResourceScope">
      <summary>获取所用资源的资源范围。</summary>
      <returns>一个 <see cref="T:System.Runtime.Versioning.ResourceScope" /> 对象，指定所用成员的资源范围。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceExposureAttribute">
      <summary>指定对类的成员公开的资源范围。 无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceExposureAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
      <summary>使用指定的公开级别初始化 <see cref="T:System.Runtime.Versioning.ResourceExposureAttribute" /> 类的新实例。</summary>
      <param name="exposureLevel">资源的范围。</param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceExposureAttribute.ResourceExposureLevel">
      <summary>获取资源公开范围。</summary>
      <returns>一个 <see cref="T:System.Runtime.Versioning.ResourceScope" /> 对象。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceScope">
      <summary>标识可共享资源的范围。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.AppDomain">
      <summary>该状态由 <see cref="T:System.AppDomain" /> 中的对象共享。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Assembly">
      <summary>该资源在程序集范围内可见。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Library">
      <summary>该状态由库中的对象共享。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Machine">
      <summary>该状态由计算机中的对象共享。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.None">
      <summary>不存在共享的状态。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Private">
      <summary>该资源仅对该类型可见。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Process">
      <summary>该状态在进程内共享。</summary>
    </member>
    <member name="T:System.Runtime.Versioning.VersioningHelper">
      <summary>提供方法以帮助开发人员编写版本安全的代码。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
      <summary>根据指定的资源名称和预期资源消耗源返回版本安全的名称。</summary>
      <param name="name">资源的名称。</param>
      <param name="from">资源的范围。</param>
      <param name="to">所需的资源消耗范围。</param>
      <returns>版本安全的名称。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope,System.Type)">
      <summary>根据指定的资源名称、预期资源消耗源以及使用资源的类型返回版本安全的名称。</summary>
      <param name="name">资源的名称。</param>
      <param name="from">范围的开始。</param>
      <param name="to">范围的结束。</param>
      <param name="type">资源的 <see cref="T:System.Type" />。</param>
      <returns>版本安全的名称。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="from" /> 和 <paramref name="to" /> 的值无效。 <see cref="T:System.Runtime.Versioning.ResourceScope" /> 枚举中的资源类型正从更严格的资源类型向更普通的资源类型发展。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Security.IPermission">
      <summary>定义由权限类型实现的方法。</summary>
    </member>
    <member name="M:System.Security.IPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.IPermission.Demand">
      <summary>如果不满足安全要求，则会在运行时引发 <see cref="T:System.Security.SecurityException" />。</summary>
    </member>
    <member name="M:System.Security.IPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且不是与当前权限属于相同类的实例。</exception>
    </member>
    <member name="M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.IPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="T:System.Security.ISecurityEncodable">
      <summary>定义使权限对象状态与 XML 元素表示形式进行相互转换的方法。</summary>
    </member>
    <member name="M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
    </member>
    <member name="M:System.Security.ISecurityEncodable.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="T:System.Security.IStackWalk">
      <summary>对堆栈遍历进行管理。</summary>
    </member>
    <member name="M:System.Security.IStackWalk.Assert">
      <summary>断言调用代码可以访问当前权限对象所标识的资源，即使尚未对堆栈中的高级调用方授予访问该资源的权限。</summary>
      <exception cref="T:System.Security.SecurityException">调用代码没有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />。</exception>
    </member>
    <member name="M:System.Security.IStackWalk.Demand">
      <summary>在运行时确定调用堆栈中的所有调用方是否已被授予当前权限对象所指定的权限。</summary>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的某个处于较高位置的调用方不拥有当前权限对象所指定的权限。

或 -
调用堆栈中的调用方已调用当前权限对象上的 <see cref="M:System.Security.IStackWalk.Deny" />。</exception>
    </member>
    <member name="M:System.Security.IStackWalk.Deny">
      <summary>导致通过调用代码传递的当前对象的每个 <see cref="M:System.Security.IStackWalk.Demand" /> 失败。</summary>
    </member>
    <member name="M:System.Security.IStackWalk.PermitOnly">
      <summary>导致除当前对象（通过调用代码来传递）以外的所有对象的每个 <see cref="M:System.Security.IStackWalk.Demand" /> 失败，即使调用堆栈中的高级代码已被授权访问其他资源也是如此。</summary>
    </member>
    <member name="T:System.Security.Permissions.CodeAccessSecurityAttribute">
      <summary>为代码访问安全性指定基特性类。</summary>
    </member>
    <member name="M:System.Security.Permissions.CodeAccessSecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>用指定的 <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="T:System.Security.Permissions.PermissionState">
      <summary>指定权限在创建时是否对资源有所有访问权限或没有任何访问权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.PermissionState.None">
      <summary>不能对该权限所保护的资源进行访问。</summary>
    </member>
    <member name="F:System.Security.Permissions.PermissionState.Unrestricted">
      <summary>可以对该权限所保护的资源进行完全访问。</summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAction">
      <summary>指定可以使用声明性安全执行的安全操作。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Assert">
      <summary>调用代码可以访问当前权限对象所标识的资源，即使尚未对堆栈中的高级调用方授予访问该资源的权限（请参阅使用 Assert 方法）。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Demand">
      <summary>要求调用堆栈中的所有高级调用方已被授予当前权限对象所指定的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Deny">
      <summary>即使已向调用方授予访问权限，也会拒绝其访问当前权限对象指定的资源（请参阅使用 Deny 方法）。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <summary>要求继承此类或重写某一方法的派生类已被授予了指定的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.LinkDemand">
      <summary>要求直接调用方已被授予指定的权限。 请不要在 .NET Framework 4 中使用。 对于完全信任，请改用 <see cref="T:System.Security.SecurityCriticalAttribute" />；对于部分信任，请使用 <see cref="F:System.Security.Permissions.SecurityAction.Demand" />。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.PermitOnly">
      <summary>仅可以访问此权限对象所指定的资源，即使代码已被授予访问其他资源的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestMinimum">
      <summary>代码运行所需的最低权限请求。 此操作仅可以在程序集的作用域内使用。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestOptional">
      <summary>可选的其他权限请求（不要求运行）。 此请求隐式拒绝所有未明确请求的其他权限。 此操作仅可以在程序集的作用域内使用。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestRefuse">
      <summary>可能被误用的权限将不授予给调用代码的请求。 此操作仅可以在程序集的作用域内使用。</summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAttribute">
      <summary>为 <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" /> 派生自的声明安全性指定基特性类。</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>用指定的 <see cref="T:System.Security.Permissions.SecurityAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Action">
      <summary>获取或设置安全性操作。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.CreatePermission">
      <summary>当在派生类中重写时，创建一个权限对象，随后可将其序列化为二进制形式并连同 <see cref="T:System.Security.Permissions.SecurityAction" /> 长久存储在程序集的元数据中。</summary>
      <returns>可序列化的权限对象。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Unrestricted">
      <summary>获取或设置一个值，该值指示是否声明了对受该特性保护的资源有完全（无限制的）权限。</summary>
      <returns>如果声明了对受保护资源的完全权限，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.SecurityPermission" /> 执行安全操作。 无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.SecurityPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Assertion">
      <summary>获取或设置一个值，该值指示是否已声明以下要断言的权限：所有此代码的调用方具有此操作的所需权限。</summary>
      <returns>如果声明了要断言的权限，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects">
      <summary>获取或设置一个值，该值表示代码是否具有在应用程序配置文件中执行绑定重定向的权限。</summary>
      <returns>如果代码可以执行绑定重定向，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain">
      <summary>获取或设置一个值，该值指示是否声明了操作 <see cref="T:System.AppDomain" /> 的权限。</summary>
      <returns>如果声明了操作 <see langword="true" /> 的权限，则为 <see cref="T:System.AppDomain" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy">
      <summary>获取或设置一个值，该值指示是否声明改变或操作域安全策略的权限。</summary>
      <returns>如果声明改变或操作应用程序域中的安全策略的权限，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence">
      <summary>获取或设置一个值，该值指示是否声明了改变或操作证据的权限。</summary>
      <returns>如果声明了改变或操作证据的功能，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy">
      <summary>获取或设置一个值，该值指示是否声明了查看和操作安全策略的权限。</summary>
      <returns>如果声明了操作安全策略的权限，则为 <see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal">
      <summary>获取或设置一个值，该值指示是否声明了操作当前主体的权限。</summary>
      <returns>如果声明了操作当前主体的权限，则为 <see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlThread">
      <summary>获取或设置一个值，该值指示是否声明了操作线程的权限。</summary>
      <returns>如果声明了操作线程的权限，则为 <see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.SecurityPermission" />。</summary>
      <returns>与此属性对应的 <see cref="T:System.Security.Permissions.SecurityPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Execution">
      <summary>获取或设置一个值，该值指示是否声明了执行代码的权限。</summary>
      <returns>如果声明了执行代码的权限，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Flags">
      <summary>获取或设置构成 <see cref="T:System.Security.Permissions.SecurityPermission" /> 权限的所有权限标志。</summary>
      <returns>使用按位“或”运算结合的一个或多个 <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />。</returns>
      <exception cref="T:System.ArgumentException">尝试将此属性设置为无效值。 有关有效值，请参阅 <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />。</exception>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Infrastructure">
      <summary>获取或设置一个值，该值指示代码是否可以插入公共语言运行时基础结构中，例如添加远程上下文接收器、特使接收器和动态接收器。</summary>
      <returns>如果代码可以插入公共语言运行时基础结构中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration">
      <summary>获取或设置一个值，该值指示代码是否可以配置远程处理类型和信道。</summary>
      <returns>如果代码可以配置远程处理类型和信道，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter">
      <summary>获取或设置一个值，该值指示代码是否可以使用序列化格式化程序来序列化或反序列化对象。</summary>
      <returns>如果代码可以使用序列化格式化程序来序列化或反序列化对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SkipVerification">
      <summary>获取或设置一个值，该值指示是否声明跳过代码验证的权限。</summary>
      <returns>如果声明跳过代码验证的权限，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode">
      <summary>获取或设置一个值，该值指示是否声明调用非托管代码的权限。</summary>
      <returns>如果声明调用非托管代码的权限，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionFlag">
      <summary>为安全权限对象指定访问标志。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.AllFlags">
      <summary>权限的无限制状态。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Assertion">
      <summary>断言此代码的所有调用方均有该操作所需的权限的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.BindingRedirects">
      <summary>在应用程序配置文件中执行显式绑定重定向所需的权限。 其中包括对某些 .NET Framework 程序集的重定向，这些程序集和 .NET Framework 外的其他程序集都已经被统一。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain">
      <summary>能够创建和操控 <see cref="T:System.AppDomain" />。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlDomainPolicy">
      <summary>能够指定域策略。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence">
      <summary>能够提供证据，包括能够更改公共语言运行时所提供的证据。
这是一种功能强大的权限，只应授予给高度受信任的代码。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy">
      <summary>能够查看并修改策略。
这是一种功能强大的权限，只应授予给高度受信任的代码。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal">
      <summary>能够操控用户对象。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread">
      <summary>能够在线程上使用某些高级操作。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Execution">
      <summary>使代码运行的权限。 如果没有此权限，则托管代码不会执行。
与堆栈修饰符（如 <see cref="M:System.Security.CodeAccessPermission.Deny" />、<see cref="M:System.Security.CodeAccessPermission.Assert" /> 和 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />）一起动态使用时，此标志将不起作用。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure">
      <summary>用于将代码插入公共语言运行时结构的权限，如添加 Remoting Context Sink、Envoy Sink 和 Dynamic Sink。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.NoFlags">
      <summary>无安全性访问。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration">
      <summary>用于配置远程类型和信道的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter">
      <summary>能够提供序列化服务。 由序列化格式化程序使用。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SkipVerification">
      <summary>能够跳过此程序集内对代码的验证。 如果授予此权限，则可以运行无法验证的代码。
这是一种功能强大的权限，只应授予给高度受信任的代码。
与堆栈修饰符（如 <see cref="M:System.Security.CodeAccessPermission.Deny" />、<see cref="M:System.Security.CodeAccessPermission.Assert" /> 和 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />）一起动态使用时，此标志将不起作用。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode">
      <summary>能够调用非托管代码。
 由于非托管代码可能会绕过其他权限，所以这种权限非常危险，仅应授予给高度受信任的代码。 它可用于使用 PInvoke 或使用 COM 互操作调用本机代码的应用程序。</summary>
    </member>
    <member name="T:System.Security.PermissionSet">
      <summary>表示可以包含许多不同类型的权限的集合。</summary>
    </member>
    <member name="M:System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的 <see cref="T:System.Security.PermissionSet" /> 初始化 <see cref="T:System.Security.Permissions.PermissionState" /> 类的新实例。</summary>
      <param name="state">指定资源访问权限集的其中一个枚举值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是有效的 <see cref="T:System.Security.Permissions.PermissionState" />。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.#ctor(System.Security.PermissionSet)">
      <summary>使用从 <see cref="T:System.Security.PermissionSet" /> 参数获取的初始值初始化 <paramref name="permSet" /> 类的新实例。</summary>
      <param name="permSet">若为权限集，则从中获取新 <see cref="T:System.Security.PermissionSet" /> 的值；若为 <see langword="null" />，则创建空的 <see cref="T:System.Security.PermissionSet" />。</param>
    </member>
    <member name="M:System.Security.PermissionSet.AddPermission(System.Security.IPermission)">
      <summary>向 <see cref="T:System.Security.PermissionSet" /> 添加指定的权限。</summary>
      <param name="perm">要添加的权限。</param>
      <returns>添加的权限和 <see cref="T:System.Security.PermissionSet" /> 中已存在的相同类型的任何权限的联合。</returns>
      <exception cref="T:System.InvalidOperationException">从 <see cref="T:System.Security.ReadOnlyPermissionSet" /> 调用方法。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)">
      <summary>向 <see cref="T:System.Security.PermissionSet" /> 添加指定的权限。</summary>
      <param name="perm">要添加的权限。</param>
      <returns>添加的权限和 <see cref="T:System.Security.PermissionSet" /> 中已存在的相同类型的任何权限的联合；如果 <see langword="null" /> 是 <paramref name="perm" />，则为 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">从 <see cref="T:System.Security.ReadOnlyPermissionSet" /> 调用方法。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Assert">
      <summary>声明调用代码能够通过调用此方法的代码，访问受权限请求保护的资源，即使未对堆栈中处于较高位置的调用方授予访问该资源的权限。 使用 <see cref="M:System.Security.PermissionSet.Assert" /> 会产生安全漏洞。</summary>
      <exception cref="T:System.Security.SecurityException">尚未向断言的 <see cref="T:System.Security.PermissionSet" /> 实例授予断言代码。

或 -
已存在一个用于当前帧的活动的 <see cref="M:System.Security.PermissionSet.Assert" />。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.ContainsNonCodeAccessPermissions">
      <summary>获取一个值，它指示 <see cref="T:System.Security.PermissionSet" /> 是否包含不派生自 <see cref="T:System.Security.CodeAccessPermission" /> 的权限。</summary>
      <returns>如果 <see langword="true" /> 包含不派生自 <see cref="T:System.Security.PermissionSet" /> 的权限，则为 <see cref="T:System.Security.CodeAccessPermission" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)">
      <summary>将已编码的 <see cref="T:System.Security.PermissionSet" /> 从一种 XML 编码格式转换为另一种 XML 编码格式。</summary>
      <param name="inFormat">表示以下编码格式之一的字符串：ASCII、Unicode 或二进制。 可能的值为 "XMLASCII" 或 "XML"、"XMLUNICODE" 和 "BINARY"。</param>
      <param name="inData">XML 编码的权限集。</param>
      <param name="outFormat">表示以下编码格式之一的字符串：ASCII、Unicode 或二进制。 可能的值为 "XMLASCII" 或 "XML"、"XMLUNICODE" 和 "BINARY"。</param>
      <returns>具有指定的输出格式的加密权限集。</returns>
      <exception cref="T:System.NotImplementedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Copy">
      <summary>创建 <see cref="T:System.Security.PermissionSet" /> 的副本。</summary>
      <returns>
        <see cref="T:System.Security.PermissionSet" /> 的副本。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.CopyTo(System.Array,System.Int32)">
      <summary>将此权限集的权限对象复制到 <see cref="T:System.Array" /> 中指定的位置。</summary>
      <param name="array">要复制到的目标数组。</param>
      <param name="index">数组中开始复制的起始位置（从零开始）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 参数具有多个维数。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 参数超出 <paramref name="array" /> 参数的范围。</exception>
    </member>
    <member name="P:System.Security.PermissionSet.Count">
      <summary>获取权限集中包含的权限对象的数目。</summary>
      <returns>
        <see cref="T:System.Security.PermissionSet" /> 中包含的权限对象的数目。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Demand">
      <summary>如果未对调用堆栈中所有较高级的调用方授予当前实例所指定的权限，则在运行时强制 <see cref="T:System.Security.SecurityException" />。</summary>
      <exception cref="T:System.Security.SecurityException">调用链中的调用方没有所需的权限。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Deny">
      <summary>导致通过与当前 <see cref="M:System.Security.PermissionSet.Demand" /> 中所含类型的权限具有交集的权限的调用代码的任何 <see cref="T:System.Security.PermissionSet" /> 失败。</summary>
      <exception cref="T:System.Security.SecurityException">对 <see cref="M:System.Security.PermissionSet.Deny" /> 的前一次调用已经限制当前堆栈帧的权限。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Security.PermissionSet" /> 或 <see cref="T:System.Security.NamedPermissionSet" /> 对象是否等于当前的 <see cref="T:System.Security.PermissionSet" />。</summary>
      <param name="o">将与当前 <see cref="T:System.Security.PermissionSet" /> 进行比较的对象。</param>
      <returns>如果指定的对象等于当前 <see langword="true" /> 对象，则为 <see cref="T:System.Security.PermissionSet" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="et">用于重新构造安全对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="et" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="et" /> 参数不是有效的权限元素。

或 -
不支持 <paramref name="et" /> 参数的版本号。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.GetEnumerator">
      <summary>返回集的权限的枚举器。</summary>
      <returns>集的权限的枚举器对象。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetEnumeratorImpl">
      <summary>返回集的权限的枚举器。</summary>
      <returns>集的权限的枚举器对象。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetHashCode">
      <summary>获取 <see cref="T:System.Security.PermissionSet" /> 对象的哈希代码，此代码适合在哈希算法和数据结构（例如哈希表）中使用。</summary>
      <returns>当前 <see cref="T:System.Security.PermissionSet" /> 对象的哈希代码。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetPermission(System.Type)">
      <summary>如果指定类型存在于集中，则获取该类型的权限对象。</summary>
      <param name="permClass">所需权限对象的类型。</param>
      <returns>权限对象的副本，其类型由 <paramref name="permClass" /> 中包含的 <see cref="T:System.Security.PermissionSet" /> 参数指定；如果上述均不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetPermissionImpl(System.Type)">
      <summary>如果指定类型存在于集中，则获取该类型的权限对象。</summary>
      <param name="permClass">权限对象的类型。</param>
      <returns>权限对象的副本，其类型由 <paramref name="permClass" /> 参数指定，且它包含在 <see cref="T:System.Security.PermissionSet" /> 中；如果上述均不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Intersect(System.Security.PermissionSet)">
      <summary>创建并返回一个权限集，此权限集为当前的 <see cref="T:System.Security.PermissionSet" /> 和指定 <see cref="T:System.Security.PermissionSet" /> 的交集。</summary>
      <param name="other">与当前的 <see cref="T:System.Security.PermissionSet" /> 相交的权限集。</param>
      <returns>一个新权限集，它表示当前 <see cref="T:System.Security.PermissionSet" /> 与指定目标的交集。 如果交集为空，则此对象为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsEmpty">
      <summary>获取一个值，该值指示 <see cref="T:System.Security.PermissionSet" /> 是否为空。</summary>
      <returns>如果 <see langword="true" /> 为空，则为 <see cref="T:System.Security.PermissionSet" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.PermissionSet.IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>总是为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)">
      <summary>确定当前 <see cref="T:System.Security.PermissionSet" /> 是否为指定 <see cref="T:System.Security.PermissionSet" /> 的子集。</summary>
      <param name="target">将要测试子集关系的权限集。 它必须是 <see cref="T:System.Security.PermissionSet" /> 或 <see cref="T:System.Security.NamedPermissionSet" />。</param>
      <returns>如果当前 <see langword="true" /> 是 <see cref="T:System.Security.PermissionSet" /> 参数的子集，则为 <paramref name="target" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.PermissionSet.IsSynchronized">
      <summary>获取一个值，该值表示是否保证此集合是线程安全的。</summary>
      <returns>总是为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsUnrestricted">
      <summary>确定 <see cref="T:System.Security.PermissionSet" /> 是否为 <see langword="Unrestricted" />。</summary>
      <returns>如果 <see langword="true" /> 为 <see cref="T:System.Security.PermissionSet" />，则为 <see langword="Unrestricted" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.PermitOnly">
      <summary>导致所有经过调用代码以请求不是当前 <see cref="M:System.Security.PermissionSet.Demand" /> 的子集的任何 <see cref="T:System.Security.PermissionSet" /> 的 <see cref="T:System.Security.PermissionSet" /> 失败。</summary>
    </member>
    <member name="M:System.Security.PermissionSet.RemovePermission(System.Type)">
      <summary>从集中删除某一类型的权限。</summary>
      <param name="permClass">要删除的权限类型。</param>
      <returns>从集中删除了的权限。</returns>
      <exception cref="T:System.InvalidOperationException">从 <see cref="T:System.Security.ReadOnlyPermissionSet" /> 调用方法。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.RemovePermissionImpl(System.Type)">
      <summary>从集中删除某一类型的权限。</summary>
      <param name="permClass">要删除的权限类型。</param>
      <returns>从集中删除了的权限。</returns>
      <exception cref="T:System.InvalidOperationException">从 <see cref="T:System.Security.ReadOnlyPermissionSet" /> 调用方法。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.RevertAssert">
      <summary>导致当前帧以前所有的 <see cref="M:System.Security.CodeAccessPermission.Assert" /> 被删除且不再有效。</summary>
      <exception cref="T:System.InvalidOperationException">当前帧不再具有以前的 <see cref="M:System.Security.CodeAccessPermission.Assert" />。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.SetPermission(System.Security.IPermission)">
      <summary>将权限设置为 <see cref="T:System.Security.PermissionSet" />，替换同一类型的任何现有权限。</summary>
      <param name="perm">要设置的权限。</param>
      <returns>设置的权限。</returns>
      <exception cref="T:System.InvalidOperationException">从 <see cref="T:System.Security.ReadOnlyPermissionSet" /> 调用方法。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)">
      <summary>将权限设置为 <see cref="T:System.Security.PermissionSet" />，替换同一类型的任何现有权限。</summary>
      <param name="perm">要设置的权限。</param>
      <returns>设置的权限。</returns>
      <exception cref="T:System.InvalidOperationException">从 <see cref="T:System.Security.ReadOnlyPermissionSet" /> 调用方法。</exception>
    </member>
    <member name="P:System.Security.PermissionSet.SyncRoot">
      <summary>获取当前集合的根对象。</summary>
      <returns>当前集合的根对象。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>在整个对象图形已经反序列化时运行。</summary>
      <param name="sender">启动回调的对象。 当前未实现该参数的功能。</param>
    </member>
    <member name="M:System.Security.PermissionSet.ToString">
      <summary>返回 <see cref="T:System.Security.PermissionSet" /> 的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Security.PermissionSet" /> 的表示形式。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Union(System.Security.PermissionSet)">
      <summary>创建 <see cref="T:System.Security.PermissionSet" />，它是当前的 <see cref="T:System.Security.PermissionSet" /> 和指定的 <see cref="T:System.Security.PermissionSet" /> 的并集。</summary>
      <param name="other">与当前的 <see cref="T:System.Security.PermissionSet" /> 形成并集的权限集。</param>
      <returns>一个新权限集，它表示当前 <see cref="T:System.Security.PermissionSet" /> 与指定 <see cref="T:System.Security.PermissionSet" /> 的并集。</returns>
    </member>
    <member name="T:System.Security.SecurityElement">
      <summary>表示用于对安全对象进行编码的 XML 对象模型。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String)">
      <summary>使用指定的标记初始化 <see cref="T:System.Security.SecurityElement" /> 类的新实例。</summary>
      <param name="tag">XML 元素的标记名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" /> 参数在 XML 中无效。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String,System.String)">
      <summary>用指定的标记和文本初始化 <see cref="T:System.Security.SecurityElement" /> 类的新实例。</summary>
      <param name="tag">XML 元素的标记名称。</param>
      <param name="text">元素中的文本内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" /> 参数或 <paramref name="text" /> 参数在 XML 中无效。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
      <summary>将名称/值特性添加到 XML 元素。</summary>
      <param name="name">属性名。</param>
      <param name="value">属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数或 <paramref name="value" /> 参数是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数或 <paramref name="value" /> 参数在 XML 中无效。
或
具有由 <paramref name="name" /> 参数指定的名称的特性已存在。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.AddChild(System.Security.SecurityElement)">
      <summary>将子元素添加到 XML 元素。</summary>
      <param name="child">要添加的子元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.Attribute(System.String)">
      <summary>根据名称在 XML 元素中查找特性。</summary>
      <param name="name">要搜索的特性名。</param>
      <returns>与命名特性相关的值，或者，如果不存在与 <paramref name="name" /> 相关的特性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Attributes">
      <summary>以名称/值对形式获取或设置 XML 元素特性。</summary>
      <returns>XML 元素特性值的 <see cref="T:System.Collections.Hashtable" /> 对象。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Collections.Hashtable" /> 对象的名称或值无效。</exception>
      <exception cref="T:System.ArgumentException">该名称不是有效的 XML 特性名称。</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Children">
      <summary>获取或设置 XML 元素子元素的数组。</summary>
      <returns>XML 元素中作为安全元素的已排序的子元素。</returns>
      <exception cref="T:System.ArgumentException">XML 父节点的子级是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.Copy">
      <summary>创建并返回当前 <see cref="T:System.Security.SecurityElement" /> 对象的一个相同副本。</summary>
      <returns>当前 <see cref="T:System.Security.SecurityElement" /> 对象的副本。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.Equal(System.Security.SecurityElement)">
      <summary>比较两个 XML 元素对象，确定它们是否相等。</summary>
      <param name="other">要与当前 XML 元素对象进行比较的 XML 元素对象。</param>
      <returns>如果当前 XML 元素中的标记、特性名和值、子元素以及文本字段与 <paramref name="other" /> 参数中的对等部分相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.Escape(System.String)">
      <summary>将字符串中的无效 XML 字符替换为与其等效的有效 XML 字符。</summary>
      <param name="str">要对其中的无效字符进行转义的字符串。</param>
      <returns>包含无效字符的输入字符串被替换。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.FromString(System.String)">
      <summary>从 XML 编码的字符串创建安全元素。</summary>
      <param name="xml">从其创建安全元素的 XML 编码的字符串。</param>
      <returns>从 XML 创建的 <see cref="T:System.Security.SecurityElement" />。</returns>
      <exception cref="T:System.Security.XmlSyntaxException">
        <paramref name="xml" /> 包含一个或多个单引号字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeName(System.String)">
      <summary>确定字符串是否是有效的特性名。</summary>
      <param name="name">要测试其有效性的特性名。</param>
      <returns>如果 <paramref name="name" /> 参数是有效的 XML 特性名，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeValue(System.String)">
      <summary>确定字符串是否是有效的特性值。</summary>
      <param name="value">要测试其有效性的特性值。</param>
      <returns>如果 <paramref name="value" /> 参数是有效的 XML 特性值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidTag(System.String)">
      <summary>确定字符串是否是有效的标记。</summary>
      <param name="tag">要测试其有效性的标记。</param>
      <returns>如果 <paramref name="tag" /> 参数是有效的 XML 标记，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidText(System.String)">
      <summary>确定字符串是否是 XML 元素中的有效文本。</summary>
      <param name="text">要测试其有效性的文本。</param>
      <returns>如果 <paramref name="text" /> 参数是有效的 XML 文本元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForChildByTag(System.String)">
      <summary>根据标记名查找子级。</summary>
      <param name="tag">要在子元素中搜索的标记。</param>
      <returns>具有指定标记值的第一个子 XML 元素，或者，如果具有 <paramref name="tag" /> 的子元素不存在，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)">
      <summary>根据标记名查找子级并返回所包含的文本。</summary>
      <param name="tag">要在子元素中搜索的标记。</param>
      <returns>具有指定标记值的第一个子元素的文本内容。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Tag">
      <summary>获取或设置 XML 元素的标记名称。</summary>
      <returns>XML 元素的标记名称。</returns>
      <exception cref="T:System.ArgumentNullException">标记为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">标记在 XML 中无效。</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Text">
      <summary>获取或设置 XML 元素中的文本。</summary>
      <returns>XML 元素中文本的值。</returns>
      <exception cref="T:System.ArgumentException">文本在 XML 中无效。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.ToString">
      <summary>产生 XML 元素及其构成特性、子元素和文本的字符串表示法。</summary>
      <returns>XML 元素及其内容。</returns>
    </member>
    <member name="T:System.StringComparer">
      <summary>表示一种字符串比较操作，该操作使用特定的大小写以及基于区域性的比较规则或序号比较规则。</summary>
    </member>
    <member name="M:System.StringComparer.#ctor">
      <summary>初始化 <see cref="T:System.StringComparer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.StringComparer.Compare(System.Object,System.Object)">
      <summary>当在派生类中重写时，将比较两个对象并返回其相对排序顺序的指示。</summary>
      <param name="x">要与 <paramref name="y" /> 比较的对象。</param>
      <param name="y">要与 <paramref name="x" /> 比较的对象。</param>
      <returns>一个有符号整数，指示 <paramref name="x" /> 和 <paramref name="y" /> 的相对值，如下表所示。
  值 
  含义 
  小于零 
 在排序顺序中，<paramref name="x" /> 位于 <paramref name="y" /> 之前。  
  
或 
 <paramref name="x" /> 是 <see langword="null" />，且 <paramref name="y" /> 不是 <see langword="null" />。  
  
  零 
 <paramref name="x" /> 等于 <paramref name="y" />。  
  
或 
 <paramref name="x" /> 和 <paramref name="y" /> 均为 <see langword="null" />。  
  
  大于零 
 <paramref name="x" /> 在排序顺序中位于 <paramref name="y" /> 之后。  
  
或 
 <paramref name="y" /> 是 <see langword="null" />，且 <paramref name="x" /> 不是 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 或 <paramref name="y" /> 都不是 <see cref="T:System.String" /> 对象，并且 <paramref name="x" /> 或 <paramref name="y" /> 都不实现 <see cref="T:System.IComparable" /> 接口。</exception>
    </member>
    <member name="M:System.StringComparer.Compare(System.String,System.String)">
      <summary>当在派生类中重写时，将比较两个字符串并返回其相对排序顺序的指示。</summary>
      <param name="x">要与 <paramref name="y" /> 比较的字符串。</param>
      <param name="y">要与 <paramref name="x" /> 比较的字符串。</param>
      <returns>一个有符号整数，指示 <paramref name="x" /> 和 <paramref name="y" /> 的相对值，如下表所示。
  值 
  含义 
  小于零 
 <paramref name="x" /> 在排序顺序中位于 <paramref name="y" /> 之前。  
  
或 
 <paramref name="x" /> 是 <see langword="null" />，且 <paramref name="y" /> 不是 <see langword="null" />。  
  
  零 
 <paramref name="x" /> 等于 <paramref name="y" />。  
  
或 
 <paramref name="x" /> 和 <paramref name="y" /> 均为 <see langword="null" />。  
  
  大于零 
 <paramref name="x" /> 在排序顺序中位于 <paramref name="y" /> 之后。  
  
或 
 <paramref name="y" /> 是 <see langword="null" />，且 <paramref name="x" /> 不是 <see langword="null" />。</returns>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
      <summary>创建 <see cref="T:System.StringComparer" /> 对象，该对象根据指定区域性的规则对字符串进行比较。</summary>
      <param name="culture">一个区域性，其语言规则用于执行字符串比较。</param>
      <param name="ignoreCase">
        <see langword="true" /> 指定比较操作不区分大小写；<see langword="false" /> 指定比较操作区分大小写。</param>
      <returns>一个新 <see cref="T:System.StringComparer" /> 对象，该对象根据 <paramref name="culture" /> 参数使用的比较规则以及 <paramref name="ignoreCase" /> 参数指定的大小写规则执行字符串比较。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <param name="culture" />
      <param name="options" />
    </member>
    <member name="P:System.StringComparer.CurrentCulture">
      <summary>获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用当前区域性的单词比较规则执行区分大小写的字符串比较。</summary>
      <returns>一个新 <see cref="T:System.StringComparer" /> 对象。</returns>
    </member>
    <member name="P:System.StringComparer.CurrentCultureIgnoreCase">
      <summary>获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用当前区域性的单词比较规则执行不区分大小写的字符串比较。</summary>
      <returns>用于字符串比较的新对象。</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.Object,System.Object)">
      <summary>当在派生类中重写时，指示两个对象是否相等。</summary>
      <param name="x">要与 <paramref name="y" /> 比较的对象。</param>
      <param name="y">要与 <paramref name="x" /> 比较的对象。</param>
      <returns>如果 <paramref name="x" /> 和 <paramref name="y" /> 引用同一对象，或者 <paramref name="x" /> 和 <paramref name="y" /> 是相同的对象类型且这些对象相等，或者 <paramref name="x" /> 和 <paramref name="y" /> 都是 <see langword="null" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.String,System.String)">
      <summary>当在派生类中重写时，指示两个字符串是否相等。</summary>
      <param name="x">要与 <paramref name="y" /> 比较的字符串。</param>
      <param name="y">要与 <paramref name="x" /> 比较的字符串。</param>
      <returns>如果 <paramref name="x" /> 和 <paramref name="y" /> 引用同一对象，或者 <paramref name="x" /> 和 <paramref name="y" /> 相等，或者 <paramref name="x" /> 和 <paramref name="y" /> 均为 <see langword="null" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.StringComparer.FromComparison(System.StringComparison)">
      <param name="comparisonType" />
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.Object)">
      <summary>当在派生类中重写时，将获取指定对象的哈希代码。</summary>
      <param name="obj">一个对象。</param>
      <returns>根据 <paramref name="obj" /> 参数的值计算出的 32 位有符号哈希代码。</returns>
      <exception cref="T:System.ArgumentException">没有足够的内存可用于分配计算哈希代码所需的缓冲区。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.String)">
      <summary>当在派生类中重写时，将获取指定字符串的哈希代码。</summary>
      <param name="obj">一个字符串。</param>
      <returns>根据 <paramref name="obj" /> 参数的值计算出的 32 位有符号哈希代码。</returns>
      <exception cref="T:System.ArgumentException">没有足够的内存可用于分配计算哈希代码所需的缓冲区。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.StringComparer.InvariantCulture">
      <summary>获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用固定区域性的单词比较规则执行区分大小写的字符串比较。</summary>
      <returns>一个新 <see cref="T:System.StringComparer" /> 对象。</returns>
    </member>
    <member name="P:System.StringComparer.InvariantCultureIgnoreCase">
      <summary>获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用固定区域性的单词比较规则执行不区分大小写的字符串比较。</summary>
      <returns>一个新 <see cref="T:System.StringComparer" /> 对象。</returns>
    </member>
    <member name="P:System.StringComparer.Ordinal">
      <summary>获取 <see cref="T:System.StringComparer" /> 对象，该对象执行区分大小写的序号字符串比较。</summary>
      <returns>一个 <see cref="T:System.StringComparer" /> 对象。</returns>
    </member>
    <member name="P:System.StringComparer.OrdinalIgnoreCase">
      <summary>获取 <see cref="T:System.StringComparer" /> 对象，该对象执行不区分大小写的序号字符串比较。</summary>
      <returns>一个 <see cref="T:System.StringComparer" /> 对象。</returns>
    </member>
    <member name="T:System.StringNormalizationExtensions">
      <summary>提供用于字符串规范化的扩展方法。</summary>
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String)">
      <summary>指示指定字符串是否符合 Unicode 范式 C。</summary>
      <param name="value">一个字符串。</param>
      <returns>如果 <paramref name="value" /> 符合范式 C，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 包含无效的 Unicode 字符。</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String,System.Text.NormalizationForm)">
      <summary>指示某一字符串是否符合指定 Unicode 范式。</summary>
      <param name="value">一个字符串。</param>
      <param name="normalizationForm">一个 Unicode 范式。</param>
      <returns>如果 <paramref name="value" /> 符合范式 <paramref name="normalizationForm" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 包含无效的 Unicode 字符。</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String)">
      <summary>将字符串规范化为 Unicode 范式 C。</summary>
      <param name="value">要规范化的字符串。</param>
      <returns>一个新字符串，其文本值与 <paramref name="value" /> 相同，但其二进制表示形式符合 Unicode 范式 C。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 包含无效的 Unicode 字符。</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String,System.Text.NormalizationForm)">
      <summary>将字符串规范化为指定的 Unicode 范式。</summary>
      <param name="value">要规范化的字符串。</param>
      <param name="normalizationForm">Unicode 范式。</param>
      <returns>一个新字符串，其文本值与 <paramref name="value" /> 相同，但其二进制表示形式符合 <paramref name="normalizationForm" /> 范式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 包含无效的 Unicode 字符。</exception>
    </member>
    <member name="T:System.UriBuilder">
      <summary>为统一资源标识符 (URI) 提供自定义构造函数，并修改 <see cref="T:System.Uri" /> 类的 URI。</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>用指定的 URI 初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="uri">一个 URI 字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.UriFormatException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />。  
  

          
          <paramref name="uri" /> 字符串长度为零或只包含空格。  
  
或 
分析例程检测到格式无效的架构。  
  
或 
分析器在不使用 "file" 架构的 URI 中检测到两个以上的连续斜杠。  
  
或 
 <paramref name="uri" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>用指定的方案和主机初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="schemeName">Internet 访问协议。</param>
      <param name="hostName">DNS 样式的域名或 IP 地址。</param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>用指定的方案、主机和端口初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="scheme">Internet 访问协议。</param>
      <param name="host">DNS 样式的域名或 IP 地址。</param>
      <param name="portNumber">服务的 IP 端口号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="portNumber" /> 小于 -1 或大于 65,535。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>用指定的方案、主机、端口号和路径初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="scheme">Internet 访问协议。</param>
      <param name="host">DNS 样式的域名或 IP 地址。</param>
      <param name="port">服务的 IP 端口号。</param>
      <param name="pathValue">Internet 资源的路径。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于 -1 或大于 65,535。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>用指定的方案、主机、端口号、路径和查询字符串或段标识符初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="scheme">Internet 访问协议。</param>
      <param name="host">DNS 样式的域名或 IP 地址。</param>
      <param name="port">服务的 IP 端口号。</param>
      <param name="path">Internet 资源的路径。</param>
      <param name="extraValue">查询字符串或段标识符。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="extraValue" /> 既不是 <see langword="null" /> 也不是 <see cref="F:System.String.Empty" />，既不是以井号 (#) 开始的有效段标识符，也不是以问号 (?) 开始的有效查询字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于 -1 或大于 65,535。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>使用指定的 <see cref="T:System.UriBuilder" /> 实例初始化 <see cref="T:System.Uri" /> 类的新实例。</summary>
      <param name="uri">
        <see cref="T:System.Uri" /> 类的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>比较现有 <see cref="T:System.Uri" /> 实例与 <see cref="T:System.UriBuilder" /> 的内容是否相等。</summary>
      <param name="rparam">要与当前实例进行比较的对象。</param>
      <returns>如果 <paramref name="rparam" /> 表示的 <see cref="T:System.Uri" /> 与此 <see cref="T:System.Uri" /> 实例构造的 <see cref="T:System.UriBuilder" /> 相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>获取或设置 URI 的段部分。</summary>
      <returns>URI 的段部分。 段标识符 ("#") 添加到段的开头。</returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>返回 URI 的哈希代码。</summary>
      <returns>为 URI 生成的哈希代码。</returns>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>获取或设置服务器的域名系统 (DNS) 主机名或 IP 地址。</summary>
      <returns>服务器的域名系统 (DNS) 主机名或 IP 地址。</returns>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>获取或设置与访问 URI 的用户关联的密码。</summary>
      <returns>访问 URI 的用户的密码。</returns>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>获取或设置 URI 引用的资源的路径。</summary>
      <returns>URI 引用的资源的路径。</returns>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>获取或设置 URI 的端口号。</summary>
      <returns>URI 的端口号。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">不能将此端口设为小于 1 或大于 65,535 的值。</exception>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>获取或设置 URI 中包括的任何查询信息。</summary>
      <returns>URI 中包括的查询信息。</returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>获取或设置 URI 的方案名称。</summary>
      <returns>URI 的方案。</returns>
      <exception cref="T:System.ArgumentException">不能将该方案设为无效的方案名称。</exception>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>返回指定 <see cref="T:System.UriBuilder" /> 实例的显示字符串。</summary>
      <returns>包含 <see cref="T:System.UriBuilder" /> 非转义显示字符串的字符串。</returns>
      <exception cref="T:System.UriFormatException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />。  
  

            
  
 <see cref="T:System.UriBuilder" /> 实例包含错误密码。</exception>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>获取由指定的 <see cref="T:System.Uri" /> 实例构造的 <see cref="T:System.UriBuilder" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Uri" />，它包含由 <see cref="T:System.UriBuilder" /> 构造的 URI。</returns>
      <exception cref="T:System.UriFormatException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />。  
  

            
  
 由 <see cref="T:System.UriBuilder" /> 属性构造的 URI 无效。</exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>与访问 URI 的用户关联的用户名。</summary>
      <returns>访问 URI 的用户的用户名。</returns>
    </member>
  </members>
</doc>
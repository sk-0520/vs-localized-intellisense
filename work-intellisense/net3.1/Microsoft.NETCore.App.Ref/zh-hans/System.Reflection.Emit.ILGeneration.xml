<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit.ILGeneration</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.CustomAttributeBuilder">
      <summary vsli:raw="Helps build custom attributes.">帮助生成自定义特性。</summary>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute and the arguments to the constructor.">在给定了自定义属性的构造函数和构造函数的参数的情况下，初始化 <see langword="CustomAttributeBuilder" /> 类的实例。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自定义属性的构造函数。</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">自定义属性的构造函数的参数。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="con" /> 为静态或私有。
或
提供的参数数目与构造函数的调用约定所需的构造函数的参数数目不匹配。
或
提供的参数类型与构造函数中声明的参数类型不匹配。
或
提供的参数是除 <see cref="T:System.String" /> 或 <see cref="T:System.Type" /> 外的引用类型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;constructorArgs&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 或 <paramref name="constructorArgs" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, and a set of named field/value pairs.">已知自定义特性的构造函数、该构造函数的参数以及一组命名的字段/值对，初始化 <see langword="CustomAttributeBuilder" /> 类的实例。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自定义属性的构造函数。</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">自定义属性的构造函数的参数。</param>
      <param name="namedFields" vsli:raw="Named fields of the custom attribute.">自定义属性的命名字段。</param>
      <param name="fieldValues" vsli:raw="Values for the named fields of the custom attribute.">自定义属性的命名字段的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedFields&quot; /&gt; and &lt;paramref name=&quot;fieldValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the field values do not match the types of the named fields.  &#xA;  &#xA; -or-  &#xA;  &#xA; The field does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument or named field is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="namedFields" /> 和 <paramref name="fieldValues" /> 数组的长度不相同。
或
<paramref name="con" /> 为静态或私有。

或 -
提供的参数数目与构造函数的调用约定所需的构造函数的参数数目不匹配。

或 -
提供的参数类型与构造函数中声明的参数类型不匹配。


或
字段值的类型与命名字段的类型不匹配。

或 -
该字段不属于与构造函数相同的类或基类。

或
提供的参数或命名的字段是引用类型，而不是 <see cref="T:System.String" /> 或 <see cref="T:System.Type" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">其中一个参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, and a set of named property or value pairs.">已知自定义特性的构造函数、该构造函数的参数以及一组命名的属性/值对，初始化 <see langword="CustomAttributeBuilder" /> 类的实例。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自定义属性的构造函数。</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">自定义属性的构造函数的参数。</param>
      <param name="namedProperties" vsli:raw="Named properties of the custom attribute.">自定义属性 (Attribute) 的命名属性 (Property)。</param>
      <param name="propertyValues" vsli:raw="Values for the named properties of the custom attribute.">自定义属性 (Attribute) 的命名属性 (Property) 的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedProperties&quot; /&gt; and &lt;paramref name=&quot;propertyValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the property values do not match the types of the named properties.  &#xA;  &#xA; -or-  &#xA;  &#xA; A property has no setter method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument or named property is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="namedProperties" /> 和 <paramref name="propertyValues" /> 数组的长度不相同。

或 -
<paramref name="con" /> 为静态或私有。

或
提供的参数数目与构造函数的调用约定所需的构造函数的参数数目不匹配。

或 -
提供的参数类型与构造函数中声明的参数类型不匹配。

或
属性值的类型与命名属性的类型不匹配。

或 -
属性没有 setter 方法。

或 -
该属性不属于与构造函数相同的类或基类。


或
提供的参数或命名的属性是引用类型，而不是 <see cref="T:System.String" /> 或 <see cref="T:System.Type" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">其中一个参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, a set of named property or value pairs, and a set of named field or value pairs.">已知自定义特性的构造函数、该构造函数的参数、一组命名的属性/值对以及一组命名的字段/值对，初始化 <see langword="CustomAttributeBuilder" /> 类的实例。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自定义属性的构造函数。</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">自定义属性的构造函数的参数。</param>
      <param name="namedProperties" vsli:raw="Named properties of the custom attribute.">自定义属性 (Attribute) 的命名属性 (Property)。</param>
      <param name="propertyValues" vsli:raw="Values for the named properties of the custom attribute.">自定义属性 (Attribute) 的命名属性 (Property) 的值。</param>
      <param name="namedFields" vsli:raw="Named fields of the custom attribute.">自定义属性的命名字段。</param>
      <param name="fieldValues" vsli:raw="Values for the named fields of the custom attribute.">自定义属性的命名字段的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedProperties&quot; /&gt; and &lt;paramref name=&quot;propertyValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; The lengths of the &lt;paramref name=&quot;namedFields&quot; /&gt; and &lt;paramref name=&quot;fieldValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the property values do not match the types of the named properties.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the field values do not match the types of the corresponding field types.  &#xA;  &#xA; -or-  &#xA;  &#xA; A property has no setter.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property or field does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument, named property, or named field is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="namedProperties" /> 和 <paramref name="propertyValues" /> 数组的长度不相同。

或 -
<paramref name="namedFields" /> 和 <paramref name="fieldValues" /> 数组的长度不相同。

或
<paramref name="con" /> 为静态或私有。

或 -
提供的参数数目与构造函数的调用约定所需的构造函数的参数数目不匹配。

或
提供的参数类型与构造函数中声明的参数类型不匹配。
或
属性值的类型与命名属性的类型不匹配。

或 -
字段值的类型与相应的字段类型的类型不匹配。

或
属性没有 setter。

或 -
该属性或字段不属于与构造函数相同的类或基类。

或 -
提供的参数、命名的属性或命名的字段是引用类型，而不是 <see cref="T:System.String" /> 或 <see cref="T:System.Type" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">其中一个参数为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Reflection.Emit.ILGenerator">
      <summary vsli:raw="Generates Microsoft intermediate language (MSIL) instructions.">生成 Microsoft 中间语言 (MSIL) 指令。</summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
      <summary vsli:raw="Begins a catch block.">开始 Catch 块。</summary>
      <param name="exceptionType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the exception.">表示异常的 <see cref="T:System.Type" /> 对象。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The catch block is within a filtered exception.">Catch 块在已筛选的异常中。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;exceptionType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located.">
        <paramref name="exceptionType" /> 为 <see langword="null" />，并且异常筛选器块没有返回一个值，该值指示在找到此 Catch 块之前应一直运行 Finally 块。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.">要生成的 Microsoft 中间语言 (MSIL) 当前不在异常块中。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
      <summary vsli:raw="Begins an exception block for a filtered exception.">开始已筛选异常的异常块。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.  &#xA;  &#xA; -or-  &#xA;  &#xA; This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">要生成的 Microsoft 中间语言 (MSIL) 当前不在异常块中。

或 -
此 <see cref="T:System.Reflection.Emit.ILGenerator" /> 属于某个 <see cref="T:System.Reflection.Emit.DynamicMethod" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
      <summary vsli:raw="Begins an exception block for a non-filtered exception.">开始非筛选异常的异常块。</summary>
      <returns vsli:raw="The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.">块结尾的标签。 这将使你停在正确的位置以执行 Finally 块或完成 Try 块。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
      <summary vsli:raw="Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.">在 Microsoft 中间语言 (MSIL) 流中开始一个异常错误块。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The MSIL being generated is not currently in an exception block.  &#xA;  &#xA; -or-  &#xA;  &#xA; This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">生成的 MSIL 当前不在异常块中。

或 -
此 <see cref="T:System.Reflection.Emit.ILGenerator" /> 属于某个 <see cref="T:System.Reflection.Emit.DynamicMethod" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
      <summary vsli:raw="Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.">在 Microsoft 中间语言 (MSIL) 指令流中开始一个 Finally 块。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The MSIL being generated is not currently in an exception block.">生成的 MSIL 当前不在异常块中。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginScope">
      <summary vsli:raw="Begins a lexical scope.">开始词法范围。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">此 <see cref="T:System.Reflection.Emit.ILGenerator" /> 属于某个 <see cref="T:System.Reflection.Emit.DynamicMethod" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
      <summary vsli:raw="Declares a local variable of the specified type.">声明指定类型的局部变量。</summary>
      <param name="localType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of the local variable.">一个 <see cref="T:System.Type" /> 对象，表示局部变量的类型。</param>
      <returns vsli:raw="The declared local variable.">已声明的局部变量。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">包含类型已由 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法创建。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
      <summary vsli:raw="Declares a local variable of the specified type, optionally pinning the object referred to by the variable.">声明指定类型的局部变量，还可以选择固定该变量所引用的对象。</summary>
      <param name="localType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of the local variable.">一个 <see cref="T:System.Type" /> 对象，表示局部变量的类型。</param>
      <param name="pinned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to pin the object in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果要将对象固定在内存中，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.LocalBuilder&quot; /&gt; object that represents the local variable.">一个 <see cref="T:System.Reflection.Emit.LocalBuilder" /> 对象，表示局部变量。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method body of the enclosing method has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)&quot; /&gt; method.">包含类型已由 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法创建。

或 -
封闭方法的方法体已由 <see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" /> 方法创建。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The method with which this &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; is associated is not represented by a &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">与此 <see cref="T:System.Reflection.Emit.ILGenerator" /> 关联的方法不由 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 来表示。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DefineLabel">
      <summary vsli:raw="Declares a new label.">声明新标签。</summary>
      <returns vsli:raw="A new label that can be used as a token for branching.">可用作分支令牌的新标签。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Puts the specified instruction onto the stream of instructions.">将指定的指令放到指令流上。</summary>
      <param name="opcode" vsli:raw="The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.">要放到流上的 Microsoft 中间语言 (MSIL) 指令。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
      <summary vsli:raw="Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.">将指定的指令和字符参数放到 Microsoft 中间语言 (MSIL) 指令流上。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">要放到流上的 MSIL 指令。</param>
      <param name="arg" vsli:raw="The character argument pushed onto the stream immediately after the instruction.">紧接着该指令推到流中的字符参数。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">将指定的指令和数值参数放到 Microsoft 中间语言 (MSIL) 指令流上。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream. Defined in the &lt;see langword=&quot;OpCodes&quot; /&gt; enumeration.">要放到流上的 MSIL 指令。 在 <see langword="OpCodes" /> 枚举中定义。</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">紧接着该指令推到流中的数字参数。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">将指定的指令和数值参数放到 Microsoft 中间语言 (MSIL) 指令流上。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要发出到流的 MSIL 指令。</param>
      <param name="arg" vsli:raw="The &lt;see langword=&quot;Int&quot; /&gt; argument pushed onto the stream immediately after the instruction.">紧接着该指令推到流中的 <see langword="Int" /> 参数。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">将指定的指令和数值参数放到 Microsoft 中间语言 (MSIL) 指令流上。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">要放到流上的 MSIL 指令。</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">紧接着该指令推到流中的数字参数。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">将指定的指令和数值参数放到 Microsoft 中间语言 (MSIL) 指令流上。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">要放到流上的 MSIL 指令。</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">紧接着该指令推到流中的数字参数。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
      <summary vsli:raw="Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.">将指定构造函数的指定指令和元数据令牌放到 Microsoft 中间语言 (MSIL) 指令流上。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要发出到流的 MSIL 指令。</param>
      <param name="con" vsli:raw="A &lt;see langword=&quot;ConstructorInfo&quot; /&gt; representing a constructor.">表示构造函数的 <see langword="ConstructorInfo" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This exception is new in the .NET Framework 4.">
        <paramref name="con" /> 为 <see langword="null" />。 此异常是 .NET Framework 4 中新出现的。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.">将指定的指令放到 Microsoft 中间语言 (MSIL) 流上，并留出在完成修正时加上标签所需的空白。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要发出到流的 MSIL 指令。</param>
      <param name="label" vsli:raw="The label to which to branch from this location.">从此位置分支到的标签。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.">将指定的指令放到 Microsoft 中间语言 (MSIL) 流上，并留出在完成修正时加上标签所需的空白。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要发出到流的 MSIL 指令。</param>
      <param name="labels" vsli:raw="The array of label objects to which to branch from this location. All of the labels will be used.">从此位置分支到的标签对象的数组。 将使用所有标签。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This exception is new in the .NET Framework 4.">
        <paramref name="con" /> 为 <see langword="null" />。 此异常是 .NET Framework 4 中新出现的。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.">将指定的指令放到 Microsoft 中间语言 (MSIL) 流上，后跟给定局部变量的索引。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要发出到流的 MSIL 指令。</param>
      <param name="local" vsli:raw="A local variable.">局部变量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The parent method of the &lt;paramref name=&quot;local&quot; /&gt; parameter does not match the method associated with this &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;.">
        <paramref name="local" /> 参数的父方法与此 <see cref="T:System.Reflection.Emit.ILGenerator" /> 关联的方法不匹配。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;local&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="local" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;opcode&quot; /&gt; is a single-byte instruction, and &lt;paramref name=&quot;local&quot; /&gt; represents a local variable with an index greater than &lt;see langword=&quot;Byte.MaxValue&quot; /&gt;.">
        <paramref name="opcode" /> 是单字节指令，并且 <paramref name="local" /> 表示索引大于 <see langword="Byte.MaxValue" /> 的局部变量。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
      <summary vsli:raw="Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.">将指定的指令和签名令牌放到 Microsoft 中间语言 (MSIL) 指令流上。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要发出到流的 MSIL 指令。</param>
      <param name="signature" vsli:raw="A helper for constructing a signature token.">用于构造签名令牌的帮助程序。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;signature&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="signature" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
      <summary vsli:raw="Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.">将指定字段的指定指令和元数据令牌放到 Microsoft 中间语言 (MSIL) 指令流上。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要发出到流的 MSIL 指令。</param>
      <param name="field" vsli:raw="A &lt;see langword=&quot;FieldInfo&quot; /&gt; representing a field.">表示字段的 <see langword="FieldInfo" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.">将指定的指令放到 Microsoft 中间语言 (MSIL) 流上，后跟给定方法的元数据令牌。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要发出到流的 MSIL 指令。</param>
      <param name="meth" vsli:raw="A &lt;see langword=&quot;MethodInfo&quot; /&gt; representing a method.">表示方法的 <see langword="MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;meth&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="meth" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;meth&quot; /&gt; is a generic method for which the &lt;see cref=&quot;P:System.Reflection.MethodBase.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="meth" /> 为泛型方法，其 <see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /> 属性为 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
      <summary vsli:raw="Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.">将指定的指令和字符参数放到 Microsoft 中间语言 (MSIL) 指令流上。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">要放到流上的 MSIL 指令。</param>
      <param name="arg" vsli:raw="The character argument pushed onto the stream immediately after the instruction.">紧接着该指令推到流中的字符参数。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">将指定的指令和数值参数放到 Microsoft 中间语言 (MSIL) 指令流上。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">要放到流上的 MSIL 指令。</param>
      <param name="arg" vsli:raw="The &lt;see cref=&quot;T:System.Single&quot; /&gt; argument pushed onto the stream immediately after the instruction.">紧接着该指令推到流中的 <see langword="Single" /> 参数。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.">将指定的指令放到 Microsoft 中间语言 (MSIL) 流上，后跟给定字符串的元数据令牌。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要发出到流的 MSIL 指令。</param>
      <param name="str" vsli:raw="The &lt;see langword=&quot;String&quot; /&gt; to be emitted.">要发出的 <see langword="String" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.">将指定的指令放到 Microsoft 中间语言 (MSIL) 流上，后跟给定类型的元数据令牌。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">要放到流上的 MSIL 指令。</param>
      <param name="cls" vsli:raw="A &lt;see langword=&quot;Type&quot; /&gt;.">
        <see langword="Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;cls&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="cls" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
      <summary vsli:raw="Puts a &lt;see langword=&quot;call&quot; /&gt; or &lt;see langword=&quot;callvirt&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream to call a &lt;see langword=&quot;varargs&quot; /&gt; method.">将 <see langword="call" /> 或 <see langword="callvirt" /> 指令置于 Microsoft 中间语言 (MSIL) 流，以调用 <see langword="varargs" /> 方法。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Call&quot; /&gt;, &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Callvirt&quot; /&gt;, or &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Newobj&quot; /&gt;.">要发出到流的 MSIL 指令。 必须为 <see cref="F:System.Reflection.Emit.OpCodes.Call" />、<see cref="F:System.Reflection.Emit.OpCodes.Callvirt" /> 或 <see cref="F:System.Reflection.Emit.OpCodes.Newobj" />。</param>
      <param name="methodInfo" vsli:raw="The &lt;see langword=&quot;varargs&quot; /&gt; method to be called.">要调用的 <see langword="varargs" /> 方法。</param>
      <param name="optionalParameterTypes" vsli:raw="The types of the optional arguments if the method is a &lt;see langword=&quot;varargs&quot; /&gt; method; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果方法是 <see langword="varargs" /> 方法，则为可选参数的类型；否则为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;opcode&quot; /&gt; does not specify a method call.">
        <paramref name="opcode" /> 未指定方法调用。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;methodInfo&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="methodInfo" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The calling convention for the method is not &lt;see langword=&quot;varargs&quot; /&gt;, but optional parameter types are supplied. This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.">该方法的调用约定不是 <see langword="varargs" />，但提供可选的参数类型。 .NET Framework 版本 1.0 和 1.1 中会引发此异常，后续版本中不会引发异常。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
      <summary vsli:raw="Puts a &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.">将 <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> 指令放到 Microsoft 中间语言 (MSIL) 流，并指定间接调用的托管调用约定。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt;.">要发出到流的 MSIL 指令。 必须为 <see cref="F:System.Reflection.Emit.OpCodes.Calli" />。</param>
      <param name="callingConvention" vsli:raw="The managed calling convention to be used.">要使用的托管调用约定。</param>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the result.">结果的 <see cref="T:System.Type" />。</param>
      <param name="parameterTypes" vsli:raw="The types of the required arguments to the instruction.">指令的必选参数的类型。</param>
      <param name="optionalParameterTypes" vsli:raw="The types of the optional arguments for &lt;see langword=&quot;varargs&quot; /&gt; calls.">
        <see langword="varargs" /> 调用的可选参数的类型。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;optionalParameterTypes&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, but &lt;paramref name=&quot;callingConvention&quot; /&gt; does not include the &lt;see cref=&quot;F:System.Reflection.CallingConventions.VarArgs&quot; /&gt; flag.">
        <paramref name="optionalParameterTypes" /> 不为 <see langword="null" />，但 <paramref name="callingConvention" /> 不包括 <see cref="F:System.Reflection.CallingConventions.VarArgs" /> 标志。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
      <summary vsli:raw="Puts a &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.">将 <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> 指令放到 Microsoft 中间语言 (MSIL) 流，并指定间接调用的非托管调用约定。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt;.">要发出到流的 MSIL 指令。 必须为 <see cref="F:System.Reflection.Emit.OpCodes.Calli" />。</param>
      <param name="unmanagedCallConv" vsli:raw="The unmanaged calling convention to be used.">要使用的非托管调用约定。</param>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the result.">结果的 <see cref="T:System.Type" />。</param>
      <param name="parameterTypes" vsli:raw="The types of the required arguments to the instruction.">指令的必选参数的类型。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) necessary to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with the given local variable.">发出使用给定本地变量调用 <see cref="Overload:System.Console.WriteLine" /> 时必需的 Microsoft 中间语言 (MSIL)。</summary>
      <param name="localBuilder" vsli:raw="The local variable whose value is to be written to the console.">其值将写入控制台的本地变量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The type of &lt;paramref name=&quot;localBuilder&quot; /&gt; is &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;, which are not supported.  &#xA;  &#xA; -or-  &#xA;  &#xA; There is no overload of &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; that accepts the type of &lt;paramref name=&quot;localBuilder&quot; /&gt;.">
        <paramref name="localBuilder" /> 的类型是不受支持的 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 或 <see cref="T:System.Reflection.Emit.EnumBuilder" />。

或 -
没有 <see cref="Overload:System.Console.WriteLine" /> 的重载接受 <paramref name="localBuilder" /> 的类型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localBuilder" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) necessary to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with the given field.">发出用给定字段调用 <see cref="Overload:System.Console.WriteLine" /> 所需的 Microsoft 中间语言 (MSIL)。</summary>
      <param name="fld" vsli:raw="The field whose value is to be written to the console.">其值将写入控制台的字段。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There is no overload of the &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; method that accepts the type of the specified field.">不存在接受指定字段类型的 <see cref="Overload:System.Console.WriteLine" /> 方法重载。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fld&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fld" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The type of the field is &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;, which are not supported.">字段类型为 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 或 <see cref="T:System.Reflection.Emit.EnumBuilder" />，这两种类型都不受支持。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with a string.">发出 Microsoft 中间语言 (MSIL) 以用字符串调用 <see cref="Overload:System.Console.WriteLine" />。</summary>
      <param name="value" vsli:raw="The string to be printed.">要打印的字符串。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
      <summary vsli:raw="Ends an exception block.">结束异常块。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The end exception block occurs in an unexpected place in the code stream.">结束异常块在代码流中的意外位置出现。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.">要生成的 Microsoft 中间语言 (MSIL) 当前不在异常块中。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndScope">
      <summary vsli:raw="Ends a lexical scope.">结束词法范围。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">此 <see cref="T:System.Reflection.Emit.ILGenerator" /> 属于某个 <see cref="T:System.Reflection.Emit.DynamicMethod" />。</exception>
    </member>
    <member name="P:System.Reflection.Emit.ILGenerator.ILOffset">
      <summary vsli:raw="Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;.">获取由 <see cref="T:System.Reflection.Emit.ILGenerator" /> 发出的 Microsoft 中间语言 (MSIL) 流中的当前偏移量（以字节为单位）。</summary>
      <returns vsli:raw="The offset in the MSIL stream at which the next instruction will be emitted.">MSIL 流中的偏移量，将在此处发出下一个指令。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
      <summary vsli:raw="Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.">用给定标签标记 Microsoft 中间语言 (MSIL) 流的当前位置。</summary>
      <param name="loc" vsli:raw="The label for which to set an index.">为其设置索引的标签。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;loc&quot; /&gt; represents an invalid index into the label array.  &#xA;  &#xA; -or-  &#xA;  &#xA; An index for &lt;paramref name=&quot;loc&quot; /&gt; has already been defined.">
        <paramref name="loc" /> 表示标签数组中的无效索引。

或 -
已定义 <paramref name="loc" /> 的索引。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
      <summary vsli:raw="Emits an instruction to throw an exception.">发出指令以引发异常。</summary>
      <param name="excType" vsli:raw="The class of the type of exception to throw.">要引发的异常类型的类。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;excType&quot; /&gt; is not the &lt;see cref=&quot;T:System.Exception&quot; /&gt; class or a derived class of &lt;see cref=&quot;T:System.Exception&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type does not have a parameterless constructor.">
        <paramref name="excType" /> 不是 <see cref="T:System.Exception" /> 类或 <see cref="T:System.Exception" /> 的派生类。

或 -
该类型没有无参数构造函数。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;excType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="excType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
      <summary vsli:raw="Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.">指定用于计算当前活动词法范围的局部变量和监视值的命名空间。</summary>
      <param name="usingNamespace" vsli:raw="The namespace to be used in evaluating locals and watches for the current active lexical scope.">用于计算当前活动词法范围的局部变量和监视值的命名空间</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;usingNamespace&quot; /&gt; is zero.">
        <paramref name="usingNamespace" /> 的长度为零。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;usingNamespace&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="usingNamespace" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">此 <see cref="T:System.Reflection.Emit.ILGenerator" /> 属于某个 <see cref="T:System.Reflection.Emit.DynamicMethod" />。</exception>
    </member>
    <member name="T:System.Reflection.Emit.Label">
      <summary vsli:raw="Represents a label in the instruction stream. &lt;see langword=&quot;Label&quot; /&gt; is used in conjunction with the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; class.">表示指令流中的标签。 <see langword="Label" /> 与 <see cref="T:System.Reflection.Emit.ILGenerator" /> 类一起使用。</summary>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Object)">
      <summary vsli:raw="Checks if the given object is an instance of &lt;see langword=&quot;Label&quot; /&gt; and is equal to this instance.">检查给定对象是否为 <see langword="Label" /> 的实例和是否等于此实例。</summary>
      <param name="obj" vsli:raw="The object to compare with this &lt;see langword=&quot;Label&quot; /&gt; instance.">与此 <see langword="Label" /> 实例进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;Label&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="obj" /> 为 <see langword="Label" /> 的实例并且等于此对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether the current instance is equal to the specified &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt;.">指示当前实例是否等于指定的 <see cref="T:System.Reflection.Emit.Label" />。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to the current instance.">要与当前实例进行比较的 <see cref="T:System.Reflection.Emit.Label" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;obj&quot; /&gt; is equal to the value of the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="obj" /> 的值等于当前实例的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.GetHashCode">
      <summary vsli:raw="Generates a hash code for this instance.">生成此实例的哈希代码。</summary>
      <returns vsli:raw="A hash code for this instance.">此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; structures are equal.">指示两个 <see cref="T:System.Reflection.Emit.Label" /> 结构是否相等。</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">要与 <paramref name="b" /> 进行比较的 <see cref="T:System.Reflection.Emit.Label" />。</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">要与 <paramref name="a" /> 进行比较的 <see cref="T:System.Reflection.Emit.Label" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 等于 <paramref name="a" />，则为 <paramref name="b" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; structures are not equal.">指示两个 <see cref="T:System.Reflection.Emit.Label" /> 结构是否不相等。</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">要与 <paramref name="b" /> 进行比较的 <see cref="T:System.Reflection.Emit.Label" />。</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">要与 <paramref name="a" /> 进行比较的 <see cref="T:System.Reflection.Emit.Label" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is not equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 不等于 <paramref name="a" />，则为 <paramref name="b" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.Emit.LocalBuilder">
      <summary vsli:raw="Represents a local variable within a method or constructor.">表示方法或构造函数内的局部变量。</summary>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.IsPinned">
      <summary vsli:raw="Gets a value indicating whether the object referred to by the local variable is pinned in memory.">获取一个值，该值指示局部变量引用的对象是否固定于内存中。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object referred to by the local variable is pinned in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果局部变量引用的对象固定于内存中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalIndex">
      <summary vsli:raw="Gets the zero-based index of the local variable within the method body.">在方法体中获取局部变量的从零开始的索引。</summary>
      <returns vsli:raw="An integer value that represents the order of declaration of the local variable within the method body.">一个整数值，表示方法体内局部变量的声明顺序。</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalType">
      <summary vsli:raw="Gets the type of the local variable.">获取局部变量的类型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the local variable.">局部变量的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Reflection.Emit.ParameterBuilder">
      <summary vsli:raw="Creates or associates parameter information.">创建或关联参数信息。</summary>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Attributes">
      <summary vsli:raw="Retrieves the attributes for this parameter.">检索此参数的属性。</summary>
      <returns vsli:raw="Read-only. Retrieves the attributes for this parameter.">只读。 检索此参数的属性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsIn">
      <summary vsli:raw="Retrieves whether this is an input parameter.">检索这是否为输入参数。</summary>
      <returns vsli:raw="Read-only. Retrieves whether this is an input parameter.">只读。 检索这是否为输入参数。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOptional">
      <summary vsli:raw="Retrieves whether this parameter is optional.">检索此参数是否为可选的。</summary>
      <returns vsli:raw="Read-only. Specifies whether this parameter is optional.">只读。 指定此参数是否为可选的。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOut">
      <summary vsli:raw="Retrieves whether this parameter is an output parameter.">检索此参数是否为输出参数。</summary>
      <returns vsli:raw="Read-only. Retrieves whether this parameter is an output parameter.">只读。 检索此参数是否为输出参数。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Name">
      <summary vsli:raw="Retrieves the name of this parameter.">检索此参数的名称。</summary>
      <returns vsli:raw="Read-only. Retrieves the name of this parameter.">只读。 检索此参数的名称。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Position">
      <summary vsli:raw="Retrieves the signature position for this parameter.">检索此参数的签名位置。</summary>
      <returns vsli:raw="Read-only. Retrieves the signature position for this parameter.">只读。 检索此参数的签名位置。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of the parameter.">设置该参数的默认值。</summary>
      <param name="defaultValue" vsli:raw="The default value of this parameter.">该参数的默认值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The parameter is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the parameter.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parameter is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">该参数不是受支持的类型之一。
或
<paramref name="defaultValue" /> 的类型与该参数的类型不匹配。
或
该参数的类型为 <see cref="T:System.Object" /> 或其他引用类型，并且 <paramref name="defaultValue" /> 不是 <see langword="null" />，该值无法赋给引用类型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">使用指定的自定义属性 blob 设置自定义属性。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自定义属性的构造函数。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">表示属性的字节 blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">使用自定义属性生成器设置自定义属性。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">用于定义自定义属性的帮助程序类的一个实例。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Reflection.Emit.SignatureHelper">
      <summary vsli:raw="Provides methods for building signatures.">提供生成签名的方法。</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)">
      <summary vsli:raw="Adds an argument to the signature.">为签名添加参数。</summary>
      <param name="clsArgument" vsli:raw="The type of the argument.">自变量类型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.">已完成签名。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;clsArgument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="clsArgument" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)">
      <summary vsli:raw="Adds an argument of the specified type to the signature, specifying whether the argument is pinned.">向签名添加指定类型的参数，指定该参数是否固定。</summary>
      <param name="argument" vsli:raw="The argument type.">参数类型。</param>
      <param name="pinned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the argument is pinned; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果参数固定，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;argument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="argument" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])">
      <summary vsli:raw="Adds an argument to the signature, with the specified custom modifiers.">向签名添加具有指定自定义修饰符的参数。</summary>
      <param name="argument" vsli:raw="The argument type.">参数类型。</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">一个表示参数必需的自定义修饰符的类型数组，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果参数没有必需的自定义修饰符，请指定 <see langword="null" />。</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">一个表示参数的可选自定义修饰符的类型数组，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果参数没有可选的自定义修饰符，请指定 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;argument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="argument" /> 为 <see langword="null" />。
或
<paramref name="requiredCustomModifiers" /> 或 <paramref name="optionalCustomModifiers" /> 的一个元素为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.">已完成签名。

或 -
指定的自定义修饰符之一为数组类型。

或
指定的自定义修饰符之一为开放式泛型类型。 也就是说，<see cref="P:System.Type.ContainsGenericParameters" /> 属性对于自定义修饰符为 <see langword="true" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a set of arguments to the signature, with the specified custom modifiers.">向签名添加具有指定自定义修饰符的一组参数。</summary>
      <param name="arguments" vsli:raw="The types of the arguments to be added.">要添加的参数的类型。</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">由类型数组组成的数组。 每个类型数组均表示相应参数所必需的自定义修饰符，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果某个特定参数没有必需的自定义修饰符，请指定 <see langword="null" />，而不要指定类型数组。 如果所有参数都没有必需的自定义修饰符，请指定 <see langword="null" />，而不要指定由数组组成的数组。</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">由类型数组组成的数组。 每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果某个特定参数没有可选的自定义修饰符，请指定 <see langword="null" />，而不要指定类型数组。 如果所有参数都没有可选的自定义修饰符，请指定 <see langword="null" />，而不要指定由数组组成的数组。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="arguments" /> 的元素为 <see langword="null" />。
或
其中一个指定的自定义修饰符为 <see langword="null" />。 （但是，可为任何参数的自定义修饰符的数组指定 <see langword="null" />。）</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;arguments&quot; /&gt;.">已完成签名。
或
指定的自定义修饰符之一为数组类型。
或
指定的自定义修饰符之一为开放式泛型类型。 也就是说，<see cref="P:System.Type.ContainsGenericParameters" /> 属性对于自定义修饰符为 <see langword="true" />。
或
<paramref name="requiredCustomModifiers" /> 或 <paramref name="optionalCustomModifiers" /> 的大小与 <paramref name="arguments" /> 的大小不相等。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddSentinel">
      <summary vsli:raw="Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.">标记 vararg 固定部分的结尾。 这仅在调用方创建 vararg 签名调用站点时使用。</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)">
      <summary vsli:raw="Checks if this instance is equal to the given object.">检查该实例是否等于给定对象。</summary>
      <param name="obj" vsli:raw="The object with which this instance should be compared.">应与此实例进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given object is a &lt;see langword=&quot;SignatureHelper&quot; /&gt; and represents the same signature; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果给定对象是 <see langword="SignatureHelper" /> 并且表示同一签名，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)">
      <summary vsli:raw="Returns a signature helper for a field.">返回字段的签名帮助程序。</summary>
      <param name="mod" vsli:raw="The dynamic module that contains the field for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">包含为其请求 <see langword="SignatureHelper" /> 的字段的动态模块。</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a field.">字段的 <see langword="SignatureHelper" /> 对象。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetHashCode">
      <summary vsli:raw="Creates and returns a hash code for this instance.">创建并返回此实例的哈希代码。</summary>
      <returns vsli:raw="The hash code based on the name.">基于名称的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper">
      <summary vsli:raw="Returns a signature helper for a local variable.">返回局部变量的签名帮助程序。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; for a local variable.">用于局部变量的 <see cref="T:System.Reflection.Emit.SignatureHelper" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)">
      <summary vsli:raw="Returns a signature helper for a local variable.">返回局部变量的签名帮助程序。</summary>
      <param name="mod" vsli:raw="The dynamic module that contains the local variable for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">包含为其请求 <see langword="SignatureHelper" /> 的局部变量的动态模块。</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a local variable.">局部变量的 <see langword="SignatureHelper" /> 对象。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)">
      <summary vsli:raw="Returns a signature helper for a method given the method's calling convention and return type.">已知方法的调用约定和返回类型，返回方法的签名帮助程序。</summary>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">方法的调用约定。</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">方法的返回类型，对于 void 返回类型为 <see langword="null" />（在 Visual Basic 中为 <see langword="Sub" /> 过程）。</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">方法的 <see langword="SignatureHelper" /> 对象。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)">
      <summary vsli:raw="Returns a signature helper for a method given the method's module, calling convention, and return type.">在给定了方法的模块、调用约定和返回类型的情况下，返回方法的签名帮助程序。</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the method for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">包含 <see langword="SignatureHelper" /> 请求的方法的 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">方法的调用约定。</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">方法的返回类型，对于 void 返回类型为 <see langword="null" />（在 Visual Basic 中为 <see langword="Sub" /> 过程）。</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">方法的 <see langword="SignatureHelper" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary vsli:raw="Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.">已知方法的模块、返回类型和参数类型，返回具有标准调用约定的方法的签名帮助程序。</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the method for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">包含 <see langword="SignatureHelper" /> 请求的方法的 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">方法的返回类型，对于 void 返回类型为 <see langword="null" />（在 Visual Basic 中为 <see langword="Sub" /> 过程）。</param>
      <param name="parameterTypes" vsli:raw="The types of the arguments of the method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no arguments.">方法的参数类型，如果方法没有参数，则为 <see langword="null" />。</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">方法的 <see langword="SignatureHelper" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> 为 <see langword="null" />。
或
<paramref name="parameterTypes" /> 的元素为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the calling convention, the property type, the property arguments, and custom modifiers for the return type and arguments.">已知包含属性、调用约定、属性类型、属性参数以及返回类型和参数的自定义修饰符的动态模块，返回属性的签名帮助程序。</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，其中包含为其请求 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 的属性。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">属性访问器的调用约定。</param>
      <param name="returnType" vsli:raw="The property type.">属性类型。</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">一个表示返回类型必需的自定义修饰符的类型数组，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果返回类型没有所需的自定义修饰符，则指定 <see langword="null" />。</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">一个表示返回类型的可选自定义修饰符的类型数组，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果返回类型没有可选的自定义修饰符，则指定 <see langword="null" />。</param>
      <param name="parameterTypes" vsli:raw="The types of the property's arguments, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">属性的参数类型，如果属性没有参数，则为 <see langword="null" />。</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">由类型数组组成的数组。 每个类型数组均表示属性的相应参数所必需的自定义修饰符。 如果某个特定参数没有必需的自定义修饰符，请指定 <see langword="null" />，而不要指定类型数组。 如果属性没有参数，或者所有参数都没有必需的自定义修饰符，请指定 <see langword="null" />，而不要指定由数组组成的数组。</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">由类型数组组成的数组。 每个类型数组均表示属性的相应参数的可选自定义修饰符。 如果某个特定参数没有可选的自定义修饰符，请指定 <see langword="null" />，而不要指定类型数组。 如果属性没有参数，或者所有参数都没有可选的自定义修饰符，请指定 <see langword="null" />，而不要指定由数组组成的数组。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">属性的 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="mod" /> 为 <see langword="null" />。
或
<paramref name="parameterTypes" /> 的元素为 <see langword="null" />。
或
其中一个指定的自定义修饰符为 <see langword="null" />。 （但是，可为任何参数的自定义修饰符的数组指定 <see langword="null" />。）</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredParameterTypeCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalParameterTypeCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">已完成签名。
或
<paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。
或
指定的自定义修饰符之一为数组类型。
或
指定的自定义修饰符之一为开放式泛型类型。 也就是说，<see cref="P:System.Type.ContainsGenericParameters" /> 属性对于自定义修饰符为 <see langword="true" />。

或 -
<paramref name="requiredParameterTypeCustomModifiers" /> 或 <paramref name="optionalParameterTypeCustomModifiers" /> 的大小与 <paramref name="parameterTypes" /> 的大小不相等。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.">已知包含属性、属性类型和属性参数的动态模块，返回属性的签名帮助程序。</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，其中包含为其请求 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 的属性。</param>
      <param name="returnType" vsli:raw="The property type.">属性类型。</param>
      <param name="parameterTypes" vsli:raw="The argument types, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">参数类型，如果属性没有参数，则为 <see langword="null" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">属性的 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> 为 <see langword="null" />。
或
<paramref name="parameterTypes" /> 的元素为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.">已知包含属性、属性类型、属性参数以及返回类型和参数的自定义修饰符的动态模块，返回属性的签名帮助程序。</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，其中包含为其请求 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 的属性。</param>
      <param name="returnType" vsli:raw="The property type.">属性类型。</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">一个表示返回类型必需的自定义修饰符的类型数组，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果返回类型没有所需的自定义修饰符，则指定 <see langword="null" />。</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">一个表示返回类型的可选自定义修饰符的类型数组，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果返回类型没有可选的自定义修饰符，则指定 <see langword="null" />。</param>
      <param name="parameterTypes" vsli:raw="The types of the property's arguments, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">属性的参数类型，如果属性没有参数，则为 <see langword="null" />。</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">由类型数组组成的数组。 每个类型数组均表示属性的相应参数所必需的自定义修饰符。 如果某个特定参数没有必需的自定义修饰符，请指定 <see langword="null" />，而不要指定类型数组。 如果属性没有参数，或者所有参数都没有必需的自定义修饰符，请指定 <see langword="null" />，而不要指定由数组组成的数组。</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">由类型数组组成的数组。 每个类型数组均表示属性的相应参数的可选自定义修饰符。 如果某个特定参数没有可选的自定义修饰符，请指定 <see langword="null" />，而不要指定类型数组。 如果属性没有参数，或者所有参数都没有可选的自定义修饰符，请指定 <see langword="null" />，而不要指定由数组组成的数组。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">属性的 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="mod" /> 为 <see langword="null" />。
或
<paramref name="parameterTypes" /> 的元素为 <see langword="null" />。

或 -
其中一个指定的自定义修饰符为 <see langword="null" />。 （但是，可为任何参数的自定义修饰符的数组指定 <see langword="null" />。）</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredParameterTypeCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalParameterTypeCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">已完成签名。

或 -
<paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。

或
指定的自定义修饰符之一为数组类型。
或
指定的自定义修饰符之一为开放式泛型类型。 也就是说，<see cref="P:System.Type.ContainsGenericParameters" /> 属性对于自定义修饰符为 <see langword="true" />。

或 -
<paramref name="requiredParameterTypeCustomModifiers" /> 或 <paramref name="optionalParameterTypeCustomModifiers" /> 的大小与 <paramref name="parameterTypes" /> 的大小不相等。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetSignature">
      <summary vsli:raw="Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.">在签名中添加结束令牌并将签名标记为已完成，以确保不能再添加更多的令牌。</summary>
      <returns vsli:raw="A byte array made up of the full signature.">由完整签名组成的字节数组。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.ToString">
      <summary vsli:raw="Returns a string representing the signature arguments.">返回表示签名参数的字符串。</summary>
      <returns vsli:raw="A string representing the arguments of this signature.">一个字符串，它表示此签名的参数。</returns>
    </member>
  </members>
</doc>
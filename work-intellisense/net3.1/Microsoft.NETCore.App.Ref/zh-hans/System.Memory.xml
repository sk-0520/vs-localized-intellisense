<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Memory</name>
  </assembly>
  <members>
    <member name="T:System.Buffers.ArrayBufferWriter`1">
      <summary vsli:raw="Represents a heap-based, array-backed output sink into which &lt;typeparamref name=&quot;T&quot; /&gt; data can be written.">表示基于堆、使用数组的输出接收器，可向其中 <typeparam name="T" /> 写入数据。</summary>
      <typeparam name="T" vsli:raw="The type of the items in this &lt;see cref=&quot;T:System.Buffers.ArrayBufferWriter`1&quot; /&gt; instance.">此 <see cref="T:System.Buffers.ArrayBufferWriter`1" /> 实例中的项的类型。</typeparam>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor">
      <summary vsli:raw="Creates an instance of an &lt;see cref=&quot;T:System.Buffers.ArrayBufferWriter`1&quot; /&gt; to which data can be written, with the default initial capacity.">创建具有默认初始容量的 <see cref="T:System.Buffers.ArrayBufferWriter`1" /> 实例，可向其中写入数据。</summary>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor(System.Int32)">
      <summary vsli:raw="Creates an instance of an &lt;see cref=&quot;T:System.Buffers.ArrayBufferWriter`1&quot; /&gt; to which data can be written, with a specified initial capacity.">创建具有指定初始容量的 <see cref="T:System.Buffers.ArrayBufferWriter`1" /> 实例，可向其中写入数据。</summary>
      <param name="initialCapacity" vsli:raw="The minimum capacity with which to initialize the underlying buffer.">用于初始化基础缓冲区的最小容量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;initialCapacity&quot; /&gt; is less than or equal to 0.">
        <paramref name="initialCapacity" /> 小于或等于 0。</exception>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.Advance(System.Int32)">
      <summary vsli:raw="Notifies the &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; that &lt;paramref name=&quot;count&quot; /&gt; items were written to the output &lt;see cref=&quot;T:System.Span`1&quot; /&gt;/&lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">通知 <see cref="T:System.Buffers.IBufferWriter`1" />，<paramref name="count" /> 个项已写入 <see cref="T:System.Span`1" />/<see cref="T:System.Memory`1" /></summary>
      <param name="count" vsli:raw="The number of items written.">写入的项数。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is negative.">
        <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method call attempts to advance past the end of the underlying buffer.">方法调用尝试向前越过基础缓冲区的末尾。</exception>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.Capacity">
      <summary vsli:raw="Gets the total amount of space within the underlying buffer.">获取基础缓冲区内的空间总量。</summary>
      <returns vsli:raw="The total capacity of the underlying buffer.">基础缓冲区的总容量。</returns>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.Clear">
      <summary vsli:raw="Clears the data written to the underlying buffer.">清除写入基础缓冲区的数据。</summary>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.FreeCapacity">
      <summary vsli:raw="Gets the amount of available space that can be written to without forcing the underlying buffer to grow.">获取可用于写入而不会迫使基础缓冲区增长的空间量。</summary>
      <returns vsli:raw="The space available for writing without forcing the underlying buffer to grow.">可用于写入的空间，无需强制基础缓冲区增长。</returns>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.GetMemory(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; to write to that is at least the length specified by &lt;paramref name=&quot;sizeHint&quot; /&gt;.">返回要向其中写入数据的 <see cref="T:System.Memory`1" />，其长度至少是 <paramref name="sizeHint" /> 指定的长度。</summary>
      <param name="sizeHint" vsli:raw="The minimum requested length of the &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">
        <see cref="T:System.Memory`1" /> 的最短请求长度。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; whose length is at least &lt;paramref name=&quot;sizeHint&quot; /&gt;.  If &lt;paramref name=&quot;sizeHint&quot; /&gt; is not provided or is equal to 0, some non-empty buffer is returned.">一个 <see cref="T:System.Memory`1" />，其长度至少为 <paramref name="sizeHint" />。  如果未提供 <paramref name="sizeHint" /> 或其等于 0，则返回某个非空缓冲区。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sizeHint&quot; /&gt; is negative.">
        <paramref name="sizeHint" /> 为负数。</exception>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.GetSpan(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to write to that is at least a specified length.">返回要向其中写入数据的 <see cref="T:System.Span`1" />，其长度至少为指定长度。</summary>
      <param name="sizeHint" vsli:raw="The minimum requested length of the &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">
        <see cref="T:System.Span`1" /> 的最短请求长度。</param>
      <returns vsli:raw="A span of at least &lt;paramref name=&quot;sizeHint&quot; /&gt; in length. If &lt;paramref name=&quot;sizeHint&quot; /&gt; is not provided or is equal to 0, some non-empty buffer is returned.">一个范围，其长度至少为 <paramref name="sizeHint" />。 如果未提供 <paramref name="sizeHint" /> 或其等于 0，则返回某个非空缓冲区。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sizeHint&quot; /&gt; is negative.">
        <paramref name="sizeHint" /> 为负数。</exception>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenCount">
      <summary vsli:raw="Gets the amount of data written to the underlying buffer.">获取写入基础缓冲区的数据量。</summary>
      <returns vsli:raw="The amount of data written to the underlying buffer.">写入基础缓冲区的数据量。</returns>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenMemory">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; that contains the data written to the underlying buffer so far.">获取 <see cref="T:System.ReadOnlyMemory`1" />，其中包含迄今为止写入基础缓冲区的数据。</summary>
      <returns vsli:raw="The data written to the underlying buffer.">写入基础缓冲区的数据。</returns>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenSpan">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; that contains the data written to the underlying buffer so far.">获取 <see cref="T:System.ReadOnlySpan`1" />，其中包含迄今为止写入基础缓冲区的数据。</summary>
      <returns vsli:raw="The data written to the underlying buffer.">写入基础缓冲区的数据。</returns>
    </member>
    <member name="T:System.Buffers.Binary.BinaryPrimitives">
      <summary vsli:raw="Reads bytes as primitives with specific endianness.">将字节读取为具有特定字节序的基元。</summary>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">从字节只读范围的开头，将 <see cref="T:System.Int16" /> 读取为大字节序。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要读取的只读跨度。</param>
      <returns vsli:raw="The big endian value.">大字节序值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <paramref name="source" /> 太小，无法包含 <see cref="T:System.Int16" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">从字节只读范围的开头，将 <see cref="T:System.Int16" /> 读取为小字节序。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要读取的只读跨度。</param>
      <returns vsli:raw="The little endian value.">小字节序值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <paramref name="source" /> 太小，无法包含 <see cref="T:System.Int16" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">从字节只读范围的开头，将 <see cref="T:System.Int32" /> 读取为大字节序。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要读取的只读跨度。</param>
      <returns vsli:raw="The big endian value.">大字节序值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <paramref name="source" /> 太小，无法包含 <see cref="T:System.Int32" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">从字节只读范围的开头，将 <see cref="T:System.Int32" /> 读取为小字节序。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要读取的只读跨度。</param>
      <returns vsli:raw="The little endian value.">小字节序值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <paramref name="source" /> 太小，无法包含 <see cref="T:System.Int32" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">从字节只读范围的开头，将 <see cref="T:System.Int64" /> 读取为大字节序。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要读取的只读跨度。</param>
      <returns vsli:raw="The big endian value.">大字节序值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <paramref name="source" /> 太小，无法包含 <see cref="T:System.Int64" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">从字节只读范围的开头，将 <see cref="T:System.Int64" /> 读取为小字节序。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要读取的只读跨度。</param>
      <returns vsli:raw="The little endian value.">小字节序值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <paramref name="source" /> 太小，无法包含 <see cref="T:System.Int64" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">从字节只读范围的开头，将 <see cref="T:System.UInt16" /> 读取为大字节序。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要读取的只读跨度。</param>
      <returns vsli:raw="The big endian value.">大字节序值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <paramref name="source" /> 太小，无法包含 <see cref="T:System.UInt16" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">从字节只读范围的开头，将 <see cref="T:System.UInt16" /> 读取为小字节序。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要读取的只读跨度。</param>
      <returns vsli:raw="The little endian value.">小字节序值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <paramref name="source" /> 太小，无法包含 <see cref="T:System.UInt16" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">从字节只读范围的开头，将 <see cref="T:System.UInt32" /> 读取为大字节序。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要读取的只读跨度。</param>
      <returns vsli:raw="The big endian value.">大字节序值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <paramref name="source" /> 太小，无法包含 <see cref="T:System.UInt32" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">从字节只读范围的开头，将 <see cref="T:System.UInt32" /> 读取为小字节序。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要读取的字节只读范围。</param>
      <returns vsli:raw="The little endian value.">小字节序值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <paramref name="source" /> 太小，无法包含 <see cref="T:System.UInt32" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">从字节只读范围的开头，将 <see cref="T:System.UInt64" /> 读取为大字节序。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要读取的字节只读范围。</param>
      <returns vsli:raw="The big endian value.">大字节序值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <paramref name="source" /> 太小，无法包含 <see cref="T:System.UInt64" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">从字节只读范围的开头，将 <see cref="T:System.UInt64" /> 读取为小字节序。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要读取的字节只读范围。</param>
      <returns vsli:raw="The little endian value.">小字节序值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <paramref name="source" /> 太小，无法包含 <see cref="T:System.UInt64" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Byte)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Byte&quot; /&gt; value, which effectively does nothing for a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">对指定 <see cref="T:System.Byte" /> 值执行字节序交换，以反转基元值，这不会影响 <see cref="T:System.Byte" />。</summary>
      <param name="value" vsli:raw="The value to reverse.">要反转的值。</param>
      <returns vsli:raw="The passed-in value, unmodified.">未修改的传入值。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int16)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Int16&quot; /&gt; value.">对指定 <see cref="T:System.Int16" /> 值执行字节序交换，以反转基元值。</summary>
      <param name="value" vsli:raw="The value to reverse.">要反转的值。</param>
      <returns vsli:raw="The reversed value.">已反转的值。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int32)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Int32&quot; /&gt; value.">对指定 <see cref="T:System.Int32" /> 值执行字节序交换，以反转基元值。</summary>
      <param name="value" vsli:raw="The value to reverse.">要反转的值。</param>
      <returns vsli:raw="The reversed value.">已反转的值。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int64)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Int64&quot; /&gt; value.">对指定 <see cref="T:System.Int64" /> 值执行字节序交换，以反转基元值。</summary>
      <param name="value" vsli:raw="The value to reverse.">要反转的值。</param>
      <returns vsli:raw="The reversed value.">已反转的值。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.SByte)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.SByte&quot; /&gt; value, which effectively does nothing for an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">对指定 <see cref="T:System.SByte" /> 值执行字节序交换，以反转基元值，这不会影响 <see cref="T:System.SByte" />。</summary>
      <param name="value" vsli:raw="The value to reverse.">要反转的值。</param>
      <returns vsli:raw="The passed-in value, unmodified.">未修改的传入值。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt16)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.UInt16&quot; /&gt; value.">对指定 <see cref="T:System.UInt16" /> 值执行字节序交换，以反转基元值。</summary>
      <param name="value" vsli:raw="The value to reverse.">要反转的值。</param>
      <returns vsli:raw="The reversed value.">已反转的值。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt32)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value.">对指定 <see cref="T:System.UInt32" /> 值执行字节序交换，以反转基元值。</summary>
      <param name="value" vsli:raw="The value to reverse.">要反转的值。</param>
      <returns vsli:raw="The reversed value.">已反转的值。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt64)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value.">对指定 <see cref="T:System.UInt64" /> 值执行字节序交换，以反转基元值。</summary>
      <param name="value" vsli:raw="The value to reverse.">要反转的值。</param>
      <returns vsli:raw="The reversed value.">已反转的值。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16BigEndian(System.ReadOnlySpan{System.Byte},System.Int16@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">从字节只读范围的开头，将 <see cref="T:System.Int16" /> 读取为大字节序。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要读取的字节只读范围。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">此方法返回时，值作为大字节序从字节只读范围中读取。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int16" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.Int16@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">从字节只读范围的开头，将 <see cref="T:System.Int16" /> 读取为小字节序。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要读取的字节只读范围。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">此方法返回时，值作为小字节序从字节只读范围中读取。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int16" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32BigEndian(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">从字节只读范围的开头，将 <see cref="T:System.Int32" /> 读取为大字节序。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要读取的字节只读范围。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">此方法返回时，值作为大字节序从字节只读范围中读取。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int32" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">从字节只读范围的开头，将 <see cref="T:System.Int32" /> 读取为小字节序。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要读取的字节只读范围。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">此方法返回时，值作为小字节序从字节只读范围中读取。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int32" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64BigEndian(System.ReadOnlySpan{System.Byte},System.Int64@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">从字节只读范围的开头，将 <see cref="T:System.Int64" /> 读取为大字节序。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要读取的字节只读范围。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">此方法返回时，值作为大字节序从字节只读范围中读取。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int64" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.Int64@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">从字节只读范围的开头，将 <see cref="T:System.Int64" /> 读取为小字节序。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要读取的字节只读范围。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">此方法返回时，值作为小字节序从字节只读范围中读取。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int64" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16BigEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">从字节只读范围的开头，将 <see cref="T:System.UInt16" /> 读取为大字节序。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要读取的字节只读范围。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">此方法返回时，值作为大字节序从字节只读范围中读取。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt16" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">从字节只读范围的开头，将 <see cref="T:System.UInt16" /> 读取为小字节序。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要读取的字节只读范围。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">此方法返回时，值作为小字节序从字节只读范围中读取。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt16" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32BigEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">从字节只读范围的开头，将 <see cref="T:System.UInt32" /> 读取为大字节序。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要读取的字节只读范围。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">此方法返回时，值作为大字节序从字节只读范围中读取。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt32" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">从字节只读范围的开头，将 <see cref="T:System.UInt32" /> 读取为小字节序。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要读取的字节只读范围。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">此方法返回时，值作为小字节序从字节只读范围中读取。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt32" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64BigEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">从字节只读范围的开头，将 <see cref="T:System.UInt64" /> 读取为大字节序。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要读取的字节只读范围。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">此方法返回时，值作为大字节序从字节只读范围中读取。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt64" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">从字节只读范围的开头，将 <see cref="T:System.UInt64" /> 读取为小字节序。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要读取的字节只读范围。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">此方法返回时，值作为小字节序从字节只读范围中读取。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt64" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16BigEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as big endian.">将 <see cref="T:System.Int16" /> 以大字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">要以大字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int16" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16LittleEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as little endian.">将 <see cref="T:System.Int16" /> 以小字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">要以小字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int16" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32BigEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as big endian.">将 <see cref="T:System.Int32" /> 以大字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">要以大字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int32" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32LittleEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as little endian.">将 <see cref="T:System.Int32" /> 以小字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">要以小字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int32" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64BigEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as big endian.">将 <see cref="T:System.Int64" /> 以大字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">要以大字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int64" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64LittleEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as little endian.">将 <see cref="T:System.Int64" /> 以小字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">要以小字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.Int64" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as big endian.">将 <see cref="T:System.UInt16" /> 以大字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">要以大字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt16" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as little endian.">将 <see cref="T:System.UInt16" /> 以小字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">要以小字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt16" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as big endian.">将 <see cref="T:System.UInt32" /> 以大字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">要以大字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt32" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as little endian.">将 <see cref="T:System.UInt32" /> 以小字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">要以小字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt32" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as big endian.">将 <see cref="T:System.UInt64" /> 以大字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">要以大字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt64" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as little endian.">将 <see cref="T:System.UInt64" /> 以小字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">要以小字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果范围足够大，可以包含 <see langword="true" />，则为 <see cref="T:System.UInt64" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16BigEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as big endian.">将 <see cref="T:System.Int16" /> 以大字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">要以大字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <paramref name="destination" /> 太小，无法包含 <see cref="T:System.Int16" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16LittleEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as little endian.">将 <see cref="T:System.Int16" /> 以小字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">要以小字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <paramref name="destination" /> 太小，无法包含 <see cref="T:System.Int16" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32BigEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as big endian.">将 <see cref="T:System.Int32" /> 以大字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">要以大字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <paramref name="destination" /> 太小，无法包含 <see cref="T:System.Int32" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32LittleEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as little endian.">将 <see cref="T:System.Int32" /> 以小字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">要以小字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <paramref name="destination" /> 太小，无法包含 <see cref="T:System.Int32" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64BigEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as big endian.">将 <see cref="T:System.Int64" /> 以大字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">要以大字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <paramref name="destination" /> 太小，无法包含 <see cref="T:System.Int64" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64LittleEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as little endian.">将 <see cref="T:System.Int64" /> 以小字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">要以小字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <paramref name="destination" /> 太小，无法包含 <see cref="T:System.Int64" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as big endian.">将 <see cref="T:System.UInt16" /> 以大字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">要以大字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <paramref name="destination" /> 太小，无法包含 <see cref="T:System.UInt16" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as little endian.">将 <see cref="T:System.UInt16" /> 以小字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">要以小字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <paramref name="destination" /> 太小，无法包含 <see cref="T:System.UInt16" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as big endian.">将 <see cref="T:System.UInt32" /> 以大字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">要以大字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <paramref name="destination" /> 太小，无法包含 <see cref="T:System.UInt32" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as little endian.">将 <see cref="T:System.UInt32" /> 以小字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">要以小字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <paramref name="destination" /> 太小，无法包含 <see cref="T:System.UInt32" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as big endian.">将 <see cref="T:System.UInt64" /> 以大字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">要以大字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <paramref name="destination" /> 太小，无法包含 <see cref="T:System.UInt64" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as little endian.">将 <see cref="T:System.UInt64" /> 以小字节序形式写入字节范围。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">要以小字节序形式写入值的字节范围。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要写入到字节范围内的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <paramref name="destination" /> 太小，无法包含 <see cref="T:System.UInt64" />。</exception>
    </member>
    <member name="T:System.Buffers.BuffersExtensions">
      <summary vsli:raw="Provides extension methods for &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">为 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 提供扩展方法。</summary>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.CopyTo``1(System.Buffers.ReadOnlySequence{``0},System.Span{``0})">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; to the specified &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">将 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 复制到所指定的 <see cref="T:System.Span`1" />。</summary>
      <param name="source" vsli:raw="The source &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">源 <see cref="T:System.Buffers.ReadOnlySequence`1" />。</param>
      <param name="destination" vsli:raw="The destination &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">目标 <see cref="T:System.Span`1" />。</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />中的项的类型。</typeparam>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.PositionOf``1(System.Buffers.ReadOnlySequence{``0},``0)">
      <summary vsli:raw="Returns the position of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">返回 <paramref name="item" /> 在 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 中第一次出现的位置。</summary>
      <param name="source" vsli:raw="The source &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">源 <see cref="T:System.Buffers.ReadOnlySequence`1" />。</param>
      <param name="value" vsli:raw="The item to find in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">要在 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 中查找的项。</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />中的项的类型。</typeparam>
      <returns vsli:raw="An object whose &lt;see cref=&quot;M:System.SequencePosition.GetInteger&quot; /&gt; method returns the position of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt;, or an object whose &lt;see langword=&quot;Nullable&amp;lt;SequencePosition&amp;gt;.HasValue&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt; .">一个对象，其 <see cref="M:System.SequencePosition.GetInteger" /> 方法返回第一次出现 <paramref name="item" /> 的位置；或者为一个其 <see langword="Nullable&lt;SequencePosition&gt;.HasValue" /> 属性是 <see langword="false" /> 的对象。</returns>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.ToArray``1(System.Buffers.ReadOnlySequence{``0})">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; to an array.">将 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 转换为数组。</summary>
      <param name="sequence" vsli:raw="The read-only sequence to convert to an array.">要转换为数组的只读序列。</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />中的项的类型。</typeparam>
      <returns vsli:raw="An array containing the data in the current read-only sequence.">包含当前只读序列中数据的数组。</returns>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.Write``1(System.Buffers.IBufferWriter{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Writes the contents of &lt;paramref name=&quot;value&quot; /&gt; to &lt;paramref name=&quot;writer&quot; /&gt;.">将 <paramref name="value" /> 的内容写入到 <paramref name="writer" />。</summary>
      <param name="writer" vsli:raw="The buffer writer to which to write &lt;paramref name=&quot;value&quot; /&gt;.">要将 <paramref name="value" /> 写入到的缓冲区编写器。</param>
      <param name="value" vsli:raw="The read-only span to be written to &lt;paramref name=&quot;writer&quot; /&gt;.">要写入到 <paramref name="writer" /> 的只读跨度。</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt;.">
        <see cref="T:System.ReadOnlySpan`1" />中的项的类型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is shorter than &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="writer" /> 短于 <paramref name="value" />。</exception>
    </member>
    <member name="T:System.Buffers.IBufferWriter`1">
      <summary vsli:raw="Represents an output sink into which &lt;typeparamref name=&quot;T&quot; /&gt; data can be written.">表示可以向其中写入 <typeparamref name="T" /> 数据的输出接收器。</summary>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt;.">中项的类型<see cref="T:System.Buffers.IBufferWriter`1" />。</typeparam>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.Advance(System.Int32)">
      <summary vsli:raw="Notifies the &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; that &lt;paramref name=&quot;count&quot; /&gt; data items were written to the output &lt;see cref=&quot;T:System.Span`1&quot; /&gt; or &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">通知 <see cref="T:System.Buffers.IBufferWriter`1" />，已向输出 <see cref="T:System.Span`1" /> 或 <see cref="T:System.Memory`1" /> 写入 <paramref name="count" /> 数据项。</summary>
      <param name="count" vsli:raw="The number of data items written to the &lt;see cref=&quot;T:System.Span`1&quot; /&gt; or &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">写入 <see cref="T:System.Span`1" /> 或 <see cref="T:System.Memory`1" /> 的数据项数量。</param>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.GetMemory(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; to write to that is at least the requested size (specified by &lt;paramref name=&quot;sizeHint&quot; /&gt;).">返回要向其中写入数据的 <see cref="T:System.Memory`1" />，且大小至少是 <paramref name="sizeHint" /> 指定的请求大小。</summary>
      <param name="sizeHint" vsli:raw="The minimum length of the returned &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;. If 0, a non-empty buffer is returned.">返回的 <see cref="T:System.Memory`1" /> 的长度下限。 如果为 0，返回非空缓冲区。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; of at least the size &lt;paramref name=&quot;sizeHint&quot; /&gt;. If &lt;paramref name=&quot;sizeHint&quot; /&gt; is 0, returns a non-empty buffer.">大小至少是 <paramref name="sizeHint" /> 的 <see cref="T:System.Memory`1" />。 如果 <paramref name="sizeHint" /> 是 0，返回非空缓冲区。</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The requested buffer size is not available.">请求的缓冲区大小不可用。</exception>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.GetSpan(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to write to that is at least the requested size (specified by &lt;paramref name=&quot;sizeHint&quot; /&gt;).">返回要向其中写入数据的 <see cref="T:System.Span`1" />，且大小至少是 <paramref name="sizeHint" /> 指定的请求大小。</summary>
      <param name="sizeHint" vsli:raw="The minimum length of the returned &lt;see cref=&quot;T:System.Span`1&quot; /&gt;. If 0, a non-empty buffer is returned.">返回的 <see cref="T:System.Span`1" /> 的长度下限。 如果为 0，返回非空缓冲区。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Span`1&quot; /&gt; of at least the size &lt;paramref name=&quot;sizeHint&quot; /&gt;. If &lt;paramref name=&quot;sizeHint&quot; /&gt; is 0, returns a non-empty buffer.">大小至少是 <paramref name="sizeHint" /> 的 <see cref="T:System.Span`1" />。 如果 <paramref name="sizeHint" /> 是 0，返回非空缓冲区。</returns>
    </member>
    <member name="T:System.Buffers.MemoryPool`1">
      <summary vsli:raw="Represents a pool of memory blocks.">表示内存块的池。</summary>
      <typeparam name="T" vsli:raw="The type of the items in the memory pool.">内存池中项的类型。</typeparam>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.#ctor">
      <summary vsli:raw="Constructs a new instance of a memory pool.">构造内存池的新实例。</summary>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Dispose">
      <summary vsli:raw="Frees all resources used by the memory pool.">释放内存池使用的所有资源。</summary>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Dispose(System.Boolean)">
      <summary vsli:raw="Frees the unmanaged resources used by the memory pool and optionally releases the managed resources.">释放内存池占用的非托管资源，并有选择地释放托管资源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> 表示释放托管资源和非托管资源； 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.Buffers.MemoryPool`1.MaxBufferSize">
      <summary vsli:raw="Gets the maximum buffer size supported by this pool.">获取此池所支持的最大缓冲区大小。</summary>
      <returns vsli:raw="The maximum buffer size supported by this pool.">此池支持的最大缓冲区大小。</returns>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Rent(System.Int32)">
      <summary vsli:raw="Returns a memory block capable of holding at least &lt;paramref name=&quot;minBufferSize&quot; /&gt; elements of T.">返回至少可容纳 <paramref name="minBufferSize" /> T 元素的内存块。</summary>
      <param name="minBufferSize" vsli:raw="The minimum number of elements of &lt;typeparamref name=&quot;T&quot; /&gt; that the memory pool can hold. A value of -1 returns a memory pool set to the default size for the pool.">内存池可容纳的 <typeparamref name="T" /> 的元素最小数量。 -1 值返回设置为池的默认大小的内存池。</param>
      <returns vsli:raw="A memory block capable of holding at least &lt;paramref name=&quot;minBufferSize&quot; /&gt; elements of T.">至少可容纳 <paramref name="minBufferSize" /> T 元素的内存块。</returns>
    </member>
    <member name="P:System.Buffers.MemoryPool`1.Shared">
      <summary vsli:raw="Gets a singleton instance of a memory pool based on arrays.">获取基于数组的内存池的单一实例。</summary>
      <returns vsli:raw="A singleton instance of a memory pool.">内存池的单独实例。</returns>
    </member>
    <member name="T:System.Buffers.OperationStatus">
      <summary>定义可以从基于范围的操作返回的值，这些操作支持处理多个不连续缓冲区中包含的输入。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.DestinationTooSmall">
      <summary>对输入进行部分处理，直至达到适合目标缓冲区的最大量。 调用方可以扩大目标缓冲区，适当划分该缓冲区，然后重试。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.Done">
      <summary>已完成对整个输入缓冲区的处理操作。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.InvalidData">
      <summary>输入包含无法处理的无效字节。 如果已对输入进行部分处理，则目标包含部分结果。 这将确保任何附加到输入的其他数据都不会使无效序列变得有效。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.NeedMoreData">
      <summary>已对输入进行部分处理，直到可使用的输入的最后一个有效区块。 调用方可以使用更多数据拼结剩余未处理输入，适当划分缓冲区，然后重试。</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySequence`1">
      <summary vsli:raw="Represents a sequence that can read a sequential series of &lt;typeparamref name=&quot;T&quot; /&gt;.">表示可读取 <typeparamref name="T" /> 有序系列的序列。</summary>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only sequence.">只读序列中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(`0[])">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from the &lt;paramref name=&quot;array&quot; /&gt;.">通过 <paramref name="array" /> 创建 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 的实例。</summary>
      <param name="array" vsli:raw="The array from which to create a read-only sequence.">用于创建只读序列的数组。</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from a section of an array.">通过数组的一部分创建 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 的实例。</summary>
      <param name="array" vsli:raw="The array from which to create the read-only sequence.">用于创建只读序列的数组。</param>
      <param name="start" vsli:raw="The zero-based index of the first element in the array to include in the read-only sequence.">数组中要包含在只读序列内的第一个元素的索引（从零开始）。</param>
      <param name="length" vsli:raw="The number of elements to include in the read-only sequence.">要包含在只读序列中的元素数。</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(System.Buffers.ReadOnlySequenceSegment{`0},System.Int32,System.Buffers.ReadOnlySequenceSegment{`0},System.Int32)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from a linked memory list represented by start and end segments and the corresponding indexes in them.">通过由起始段和结束段表示的已链接内存列表及其中的相应索引创建 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 的实例。</summary>
      <param name="startSegment" vsli:raw="The initial node of the linked memory list.">链接内存列表的初始节点。</param>
      <param name="startIndex" vsli:raw="The position to the start of the sequence inside &lt;paramref name=&quot;startSegment&quot; /&gt;.">
        <paramref name="startSegment" /> 内序列的起始位置。</param>
      <param name="endSegment" vsli:raw="The final node of the linked memory list.">链接内存列表的最终节点。</param>
      <param name="endIndex" vsli:raw="The position to the end of the sequence inside &lt;paramref name=&quot;endSegment&quot; /&gt;.">
        <paramref name="endSegment" /> 内序列的结尾位置。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;startSegment&quot; /&gt; or &lt;paramref name=&quot;endSegment&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="startSegment" /> 或 <paramref name="endSegment" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The running index of &lt;paramref name=&quot;startSegment&quot; /&gt; is greater than the running index of &lt;paramref name=&quot;endSegment&quot; /&gt;, even though &lt;paramref name=&quot;startSegment&quot; /&gt; is different to &lt;paramref name=&quot;endSegment&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;startSegment&quot; /&gt; is equal to &lt;paramref name=&quot;endSegment&quot; /&gt; but &lt;paramref name=&quot;endIndex&quot; /&gt; is smaller than &lt;paramref name=&quot;startIndex&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;startIndex&quot; /&gt; is greater than the length of the underlying memory block of &lt;paramref name=&quot;startSegment&quot; /&gt;.">尽管 <paramref name="startSegment" /> 不同于 <paramref name="endSegment" />，<paramref name="startSegment" /> 的运行索引大于 <paramref name="endSegment" /> 的运行索引。
或
<paramref name="startSegment" /> 等于 <paramref name="endSegment" />，但 <paramref name="endIndex" /> 小于 <paramref name="startIndex" />。
或
<paramref name="startIndex" /> 大于 <paramref name="startSegment" /> 的基础内存块的长度。</exception>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(System.ReadOnlyMemory{`0})">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">通过 <see cref="T:System.ReadOnlyMemory`1" /> 创建 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 的实例。</summary>
      <param name="memory" vsli:raw="A read-only block of memory of elements of type &lt;typeparamref name=&quot;T&quot; /&gt;.">类型为 <typeparamref name="T" /> 的元素的只读内存块。</param>
    </member>
    <member name="F:System.Buffers.ReadOnlySequence`1.Empty">
      <summary vsli:raw="Returns an empty &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">返回一个空 <see cref="T:System.Buffers.ReadOnlySequence`1" />。</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.End">
      <summary vsli:raw="Gets the position at the end of the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">获取 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 末尾的位置。</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySequence`1.Enumerator">
      <summary vsli:raw="Represents an enumerator over a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">表示 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 中的枚举器。</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Enumerator.#ctor(System.Buffers.ReadOnlySequence{`0}@)">
      <summary vsli:raw="Initializes the enumerator.">初始化枚举器。</summary>
      <param name="sequence" vsli:raw="The &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; to enumerate.">要枚举的 <see cref="T:System.Buffers.ReadOnlySequence`1" />。</param>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Enumerator.Current">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">获取当前 <see cref="T:System.ReadOnlyMemory`1" />。</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">当前的 <see cref="T:System.ReadOnlyMemory`1" />。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Enumerator.MoveNext">
      <summary vsli:raw="Moves to the next &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">移至 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 中的下一个 <see cref="T:System.ReadOnlyMemory`1" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator successfully advanced to the next item; &lt;see langword=&quot;false&quot; /&gt; if the end of the sequence has been reached.">如果枚举器成功推进到下一项，则为 <see langword="true" />；如果已到达序列的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.First">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; from the first segment.">从第一个段中获取 <see cref="T:System.ReadOnlyMemory`1" />。</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.FirstSpan">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; from the first segment.">从第一个段中获取 <see cref="T:System.ReadOnlySpan`1" />。</summary>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator over the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">返回在 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 上面的枚举数。</summary>
      <returns vsli:raw="Returns an enumerator over the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">返回在 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 上面的枚举数。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetPosition(System.Int64)">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at an &lt;paramref name=&quot;offset&quot; /&gt; from the start of the sequence.">按从序列开头偏移 <paramref name="offset" /> 的量返回一个新的 <see cref="T:System.SequencePosition" />。</summary>
      <param name="offset" vsli:raw="The offset from the start of the sequence.">距离序列开始处的偏移量。</param>
      <returns vsli:raw="An object representing the sequence position that starts at the specified &lt;paramref name=&quot;offset&quot; /&gt; from the start of the sequence.">一个对象，该对象表示从序列开始处的指定 <paramref name="offset" /> 处开始的序列位置。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetPosition(System.Int64,System.SequencePosition)">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; starting at the specified offset from the &lt;paramref name=&quot;origin&quot; /&gt; position.">从 <paramref name="origin" /> 位置的指定偏移量开始，返回新的 <see cref="T:System.SequencePosition" />。</summary>
      <param name="offset" vsli:raw="The offset from the specified &lt;paramref name=&quot;origin&quot; /&gt; sequence position.">距离指定 <paramref name="origin" /> 序列位置的偏移量。</param>
      <param name="origin" vsli:raw="A sequence position representing the point from which to initiate the offset.">表示从其开始偏移的点的序列位置。</param>
      <returns vsli:raw="An object representing the sequence position that starts at the &lt;paramref name=&quot;offset&quot; /&gt; position of the specified &lt;paramref name=&quot;origin&quot; /&gt; position object.">一个对象，该对象表示从指定的 <paramref name="origin" /> 位置对象的 <paramref name="offset" /> 处开始的序列位置。</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; is empty.">获取一个值，该值指示 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 是否为空。</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.IsSingleSegment">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; contains a single &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; segment.">获取一个值，它指示 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 是否包含单个 <see cref="T:System.ReadOnlyMemory`1" /> 段。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read-only sequence is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果只读序列为空，则为 <see langword="true" />;否则，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Length">
      <summary vsli:raw="Gets the length of the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">获取 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 的长度。</summary>
      <returns vsli:raw="The length of the read-only sequence.">只读序列的长度。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int32,System.Int32)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">根据当前 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 形成一个切片，它在 <paramref name="start" /> 处开始且包含 <paramref name="length" /> 个项目。</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">开始切片处的索引。</param>
      <param name="length" vsli:raw="The length of the slice.">切片的长度。</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at index &lt;paramref name=&quot;start&quot; /&gt;.">一个切片，它包含从索引 <paramref name="start" /> 处开始的当前实例中的 <paramref name="length" /> 元素。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int32,System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt; and ending at &lt;paramref name=&quot;end&quot; /&gt; (exclusive).">根据当前 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 形成一个切片，它在 <paramref name="start" /> 处开始并在 <paramref name="end" /> 处（不含）结束。</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">开始切片处的索引。</param>
      <param name="end" vsli:raw="The end (exclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; of the slice.">切片的末尾 <see cref="T:System.SequencePosition" />（不含）。</param>
      <returns vsli:raw="A slice that consists of items from the &lt;paramref name=&quot;start&quot; /&gt; index to, but not including, the &lt;paramref name=&quot;end&quot; /&gt; sequence position in the current read-only sequence.">一个切片，它包含从 <paramref name="start" /> 索引到当前只读序列中的 <paramref name="end" /> 序列位置（不含）之间的项目。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at a specified index and continuing to the end of the read-only sequence.">根据当前 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 形成一个切片，它在所指定的索引处开始并一直到只读序列的末尾。</summary>
      <param name="start" vsli:raw="The start index at which to begin this slice.">开始此切片处的起始索引。</param>
      <returns vsli:raw="A slice starting at index &lt;paramref name=&quot;start&quot; /&gt; and continuing to the end of the current read-only sequence.">一个切片，它在索引 <paramref name="start" /> 处开始并一直到当前只读序列的末尾。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64,System.Int64)">
      <summary vsli:raw="Forms a slice out of the given &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">根据所给定的 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 形成一个切片，它在 <paramref name="start" /> 处开始，并包含 <paramref name="length" /> 个项目。</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">开始切片处的索引。</param>
      <param name="length" vsli:raw="The length of the slice.">切片的长度。</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at index &lt;paramref name=&quot;start&quot; /&gt;.">一个切片，它包含从索引 <paramref name="start" /> 处开始的当前实例中的 <paramref name="length" /> 元素。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64,System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt; and ending at &lt;paramref name=&quot;end&quot; /&gt; (exclusive).">根据当前 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 形成一个切片，它在 <paramref name="start" /> 处开始并在 <paramref name="end" /> 处（不含）结束。</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">开始切片处的索引。</param>
      <param name="end" vsli:raw="The end (exclusive) of the slice.">切片的结尾（不含）。</param>
      <returns vsli:raw="A slice that consists of items from the &lt;paramref name=&quot;start&quot; /&gt; index to, but not including, the &lt;paramref name=&quot;end&quot; /&gt; sequence position in the current read-only sequence.">一个切片，它包含从 <paramref name="start" /> 索引到当前只读序列中的 <paramref name="end" /> 序列位置（不含）之间的项目。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at a specified sequence position and continuing to the end of the read-only sequence.">根据当前 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 形成一个切片，它在所指定的序列位置处开始并一直到只读序列的末尾。</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">开始此切片处的起始（含）<see cref="T:System.SequencePosition" />。</param>
      <returns vsli:raw="A slice starting at sequence position &lt;paramref name=&quot;start&quot; /&gt; and continuing to the end of the current read-only sequence.">一个切片，它在序列位置 <paramref name="start" /> 处开始并一直到当前只读序列的末尾。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.Int32)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">根据当前 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 形成一个切片，它在 <paramref name="start" /> 处开始且包含 <paramref name="length" /> 个项目。</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">开始此切片处的起始（含）<see cref="T:System.SequencePosition" />。</param>
      <param name="length" vsli:raw="The length of the slice.">切片的长度。</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at sequence position &lt;paramref name=&quot;start&quot; /&gt;.">一个切片，它包含从序列位置 <paramref name="start" /> 开始的当前实例中的 <paramref name="length" /> 元素。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.Int64)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">根据当前 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 形成一个切片，它在 <paramref name="start" /> 处开始且包含 <paramref name="length" /> 个项目。</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">开始此切片处的起始（含）<see cref="T:System.SequencePosition" />。</param>
      <param name="length" vsli:raw="The length of the slice.">切片的长度。</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at sequence position &lt;paramref name=&quot;start&quot; /&gt;.">一个切片，它包含从序列位置 <paramref name="start" /> 开始的当前实例中的 <paramref name="length" /> 元素。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt; and ending at &lt;paramref name=&quot;end&quot; /&gt; (exclusive).">根据当前 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 形成一个切片，它在 <paramref name="start" /> 处开始并在 <paramref name="end" /> 处（不含）结束。</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">开始此切片处的起始（含）<see cref="T:System.SequencePosition" />。</param>
      <param name="end" vsli:raw="The ending (exclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; of the slice.">切片的末尾 <see cref="T:System.SequencePosition" />（不含）。</param>
      <returns vsli:raw="A slice that consists of items from the &lt;paramref name=&quot;start&quot; /&gt; sequence position to, but not including, the &lt;paramref name=&quot;end&quot; /&gt; sequence position in the current read-only sequence.">一个切片，它包含从 <paramref name="start" /> 序列位置到当前只读序列中的 <paramref name="end" /> 序列位置（不含）之间的项目。</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Start">
      <summary vsli:raw="Gets the position to the start of the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">获取 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 的开头的位置。</summary>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.ToString">
      <summary vsli:raw="Returns a string that represents the current sequence.">返回表示当前序列的字符串。</summary>
      <returns vsli:raw="A string that represents the current sequence.">表示当前序列的字符串。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.TryGet(System.SequencePosition@,System.ReadOnlyMemory{`0}@,System.Boolean)">
      <summary vsli:raw="Tries to retrieve the next segment after &lt;paramref name=&quot;position&quot; /&gt; and returns a value that indicates whether the operation succeeded.">尝试检索 <paramref name="position" /> 后面的下一段，并返回一个指示操作是否成功的值。</summary>
      <param name="position" vsli:raw="The current sequence position.">当前序列位置。</param>
      <param name="memory" vsli:raw="A read-only memory span that contains the next segment after &lt;paramref name=&quot;position&quot; /&gt;.">一个只读内存跨度，它包含 <paramref name="position" /> 后面的下一段。</param>
      <param name="advance" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;position&quot; /&gt; should to the beginning of next segment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="position" /> 应为下一段的开头，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="Returns &lt;see langword=&quot;true&quot; /&gt; if the method returned the next segment, or &lt;see langword=&quot;false&quot; /&gt; if the end of the read-only sequence was reached.">如果该方法返回下一段，则返回 <see langword="true" />；如果到达只读序列的末尾，则返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Buffers.ReadOnlySequenceSegment`1">
      <summary vsli:raw="Represents a linked list of &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; nodes.">表示 <see cref="T:System.ReadOnlyMemory`1" /> 节点的链接列表。</summary>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only sequence segment.">只读序列段中元素的类型。</typeparam>
    </member>
    <member name="M:System.Buffers.ReadOnlySequenceSegment`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequenceSegment`1&quot; /&gt; class.">初始化 <see cref="T:System.Buffers.ReadOnlySequenceSegment`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.Memory">
      <summary vsli:raw="Gets or sets a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; value for the current node.">获取或设置当前节点的 <see cref="T:System.ReadOnlyMemory`1" /> 值。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; value for the current node.">当前节点 <see cref="T:System.ReadOnlyMemory`1" /> 值。</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.Next">
      <summary vsli:raw="Gets or sets the next node.">获取或设置下一个节点。</summary>
      <returns vsli:raw="The next node.">下一个节点。</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.RunningIndex">
      <summary vsli:raw="Gets or sets the sum of node lengths before the current node.">获取或设置当前节点之前的节点长度之和。</summary>
      <returns vsli:raw="The sum of node lengths before the current node.">当前节点之前的节点长度之和。</returns>
    </member>
    <member name="T:System.Buffers.SequenceReader`1">
      <summary vsli:raw="Provides methods for reading binary and text data out of a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; with a focus on performance and minimal or zero heap allocations.">提供从 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 读取二进制数据和文本数据的方法，重点关注性能和最小或零堆分配。</summary>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">只读序列的类型。</typeparam>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.#ctor(System.Buffers.ReadOnlySequence{`0})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Buffers.SequenceReader`1&quot; /&gt; over a given &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">根据给定 <see cref="T:System.Buffers.SequenceReader`1" /> 创建 <see cref="T:System.Buffers.ReadOnlySequence`1" />。</summary>
      <param name="sequence" vsli:raw="The read-only sequence over which to create the &lt;see cref=&quot;T:System.Buffers.SequenceReader`1&quot; /&gt;.">用于创建 <see cref="T:System.Buffers.SequenceReader`1" /> 的只读序列。</param>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.Advance(System.Int64)">
      <summary vsli:raw="Moves the reader ahead a specified number of items.">将读取器向前移动指定的项数。</summary>
      <param name="count" vsli:raw="The number of items to advance.">要前进的项数。</param>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePast(`0)">
      <summary vsli:raw="Advances past consecutive instances of the given &lt;paramref name=&quot;value&quot; /&gt;.">向前跳过具有给定 <paramref name="value" /> 的连续实例。</summary>
      <param name="value" vsli:raw="The value past which the reader is to advance.">读取器要向前越过的值。</param>
      <returns vsli:raw="The number of positions the reader has advanced.">读取器前进的位置数。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0)">
      <summary vsli:raw="Advances past consecutive instances of either of two specified values.">向前跳过具有两个指定值之一的连续实例。</summary>
      <param name="value0" vsli:raw="The first value to skip.">要跳过的第一个值。</param>
      <param name="value1" vsli:raw="The second value to skip.">要跳过的第二个值。</param>
      <returns vsli:raw="The number of positions the reader has advanced.">读取器前进的位置数。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0)">
      <summary vsli:raw="Advances past consecutive instances of any of three specified values.">向前跳过具有三个指定值之一的连续实例。</summary>
      <param name="value0" vsli:raw="The first value to skip.">要跳过的第一个值。</param>
      <param name="value1" vsli:raw="The second value to skip.">要跳过的第二个值。</param>
      <param name="value2" vsli:raw="The third value to skip.">要跳过的第三个值。</param>
      <returns vsli:raw="The number of positions the reader has advanced.">读取器前进的位置数。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0,`0)">
      <summary vsli:raw="Advances past consecutive instances of any of four specified values.">向前跳过具有四个指定值之一的连续实例。</summary>
      <param name="value0" vsli:raw="The first value to skip.">要跳过的第一个值。</param>
      <param name="value1" vsli:raw="The second value to skip.">要跳过的第二个值。</param>
      <param name="value2" vsli:raw="The third value to skip.">要跳过的第三个值。</param>
      <param name="value3" vsli:raw="The fourth value to skip.">要跳过的第四个值。</param>
      <returns vsli:raw="The number of positions the reader has advanced.">读取器前进的位置数。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(System.ReadOnlySpan{`0})">
      <summary vsli:raw="Skips consecutive instances of any of the specified &lt;paramref name=&quot;values&quot; /&gt;.">跳过具有任何指定 <paramref name="values" /> 的连续实例。</summary>
      <param name="values" vsli:raw="The values to be skipped.">要跳过的值。</param>
      <returns vsli:raw="The number of positions the reader has advanced.">读取器前进的位置数。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Consumed">
      <summary vsli:raw="Gets the total number of &lt;typeparamref name=&quot;T&quot; /&gt; values processed by the reader.">获取由读取器处理的 <typeparamref name="T" /> 值总数。</summary>
      <returns vsli:raw="The total number of values processed by the reader.">读取器处理的值的总数。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.CurrentSpan">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; that contains the current segment in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">获取 <see cref="T:System.Span`1" />，它包含 <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 中的当前段。</summary>
      <returns vsli:raw="A span that contains the current segment in the sequence.">一个包含序列中的当前段的范围。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.CurrentSpanIndex">
      <summary vsli:raw="Gets the index in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">获取 <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" /> 中的索引。</summary>
      <returns vsli:raw="The index in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">
        <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />中的索引。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.End">
      <summary vsli:raw="Gets a value that indicates whether there is no more data in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">获取一个值，该值指示 <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 中是否不再有数据。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; when there is no more data in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">当 <see cref="P:System.Buffers.SequenceReader`1.Sequence" />中没有更多数据时 <see langword="true" />;否则，<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.IsNext(`0,System.Boolean)">
      <summary vsli:raw="Checks whether a specified value is next in the sequence.">检查指定值是否是序列中的下一个值。</summary>
      <param name="next" vsli:raw="The value to compare the next items to.">要与下一项进行比较的值。</param>
      <param name="advancePast" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;next&quot; /&gt; values if they are found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要跳过 <see langword="true" /> 值（如果发现了这些值），则为 <paramref name="next" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are next in sequence; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果这些值是序列中的后续值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Checks whether the values specified in a read-only span are next in the sequence.">检查在只读范围中指定的值是否是序列中的下一个值。</summary>
      <param name="next" vsli:raw="The span to compare the next items to.">要与下一项进行比较的范围。</param>
      <param name="advancePast" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;next&quot; /&gt; values if they are found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要跳过 <see langword="true" /> 值（如果发现了这些值），则为 <paramref name="next" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are next in sequence; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果这些值是序列中的后续值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Length">
      <summary vsli:raw="Gets the count of items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">获取读取器的 <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 中的项数。</summary>
      <returns vsli:raw="The count of items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">读取器 <see cref="P:System.Buffers.SequenceReader`1.Sequence" />中项的计数。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Position">
      <summary vsli:raw="Gets the current position in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">获取 <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 中的当前位置。</summary>
      <returns vsli:raw="The current position in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">
        <see cref="P:System.Buffers.SequenceReader`1.Sequence" />中的当前位置。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Remaining">
      <summary vsli:raw="Gets  the remaining items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">获取读取器的 <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 中的剩余项。</summary>
      <returns vsli:raw="The remaining items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;">读取器的 <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 中的其余项</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.Rewind(System.Int64)">
      <summary vsli:raw="Moves the reader back the specified number of items.">将读取器向后移动指定的项数。</summary>
      <param name="count" vsli:raw="The number of items.">项数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is negative or greater than &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Consumed&quot; /&gt;.">
        <paramref name="count" /> 为负数或大于 <see cref="P:System.Buffers.SequenceReader`1.Consumed" />。</exception>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Sequence">
      <summary vsli:raw="Gets the underlying &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; for the reader.">获取读取器的基础 <see cref="T:System.Buffers.ReadOnlySequence`1" />。</summary>
      <returns vsli:raw="The underlying read-only sequence for the reader.">读取器的基础只读序列。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryAdvanceTo(`0,System.Boolean)">
      <summary vsli:raw="Searches for a specified delimiter and optionally advances past it if it is found.">搜索指定的分隔符，并在找到该分隔符后向前越过它（可选）。</summary>
      <param name="delimiter" vsli:raw="The delimiter to search for.">要搜索的分隔符。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if it is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要越过 <see langword="true" />（如果已发现），则为 <paramref name="delimiter" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果发现了给定 <see langword="true" />，则为 <paramref name="delimiter" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryAdvanceToAny(System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Searches for any of a number of specified delimiters and optionally advances past the first one to be found.">搜索大量指定分隔符中的任意分隔符，并向前越过找到的第一个分隔符（可选）。</summary>
      <param name="delimiters" vsli:raw="The delimiters to search for.">要搜索的分隔符。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the first instance of any of the given &lt;paramref name=&quot;delimiters&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to not move past the delimiter.">若要跳过具有任意给定 <see langword="true" /> 的第一个实例，则为 <paramref name="delimiters" />；若不跳过分隔符，则为 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the given &lt;paramref name=&quot;delimiters&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果发现了任意给定 <see langword="true" />，则为 <paramref name="delimiters" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryCopyTo(System.Span{`0})">
      <summary vsli:raw="Copies data from the current position to the given destination span if there is enough data to fill it.">如果有足够的数据来填充目标范围，则将当前位置的数据复制到目标范围。</summary>
      <param name="destination" vsli:raw="Destination span to copy to.">要复制到的目标范围。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is enough data to completely fill the &lt;paramref name=&quot;destination&quot; /&gt; span; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果有足够的数据来完全填充 <see langword="true" /> 范围，则为 <paramref name="destination" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryPeek(`0@)">
      <summary vsli:raw="Peeks at the next value without advancing the reader.">查看下一个值，而不前移读取器。</summary>
      <param name="value" vsli:raw="The next value, or the default value if at the end of the reader.">下一个值，或默认值（如果在读取器末尾）。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is not at its end and the peek operation succeeded; &lt;see langword=&quot;false&quot; /&gt; if at the end of the reader.">如果读取器未在其末尾且查看操作成功，则为 <see langword="true" />；如果在读取器末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryRead(`0@)">
      <summary vsli:raw="Reads the next value and advance the reader.">读取下一个值，并前移读取器。</summary>
      <param name="value" vsli:raw="The next value, or the default value if at the end of the reader.">下一个值，或默认值（如果在读取器末尾）。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is not at its end and the read operation succeeded; &lt;see langword=&quot;false&quot; /&gt; if at the end of the reader.">如果读取器未在其末尾且读取操作成功，则为 <see langword="true" />；如果在读取器末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;, ignoring delimiters that are preceded by &lt;paramref name=&quot;delimiterEscape&quot; /&gt;.">尝试读取给定 <paramref name="delimiter" /> 之前的所有内容，忽略前面为 <paramref name="delimiterEscape" /> 的分隔符。</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">当方法返回时，包含读取的数据（如果有）。</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">要查找的分隔符。</param>
      <param name="delimiterEscape" vsli:raw="A value that indicates that an immediately following &lt;paramref name=&quot;delimiter&quot; /&gt; is to be skipped.">一个值，指示将跳过紧跟 <paramref name="delimiter" /> 之后的项。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要跳过 <see langword="true" />（如果已发现），则为 <paramref name="delimiter" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果发现了 <see langword="true" />，则为 <paramref name="delimiter" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;.">尝试读取给定 <paramref name="delimiter" /> 之前的所有内容。</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">当方法返回时，包含读取的数据（如果有）。</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">要查找的分隔符。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要跳过 <see langword="true" />（如果已发现），则为 <paramref name="delimiter" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果发现了 <see langword="true" />，则为 <paramref name="delimiter" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Tries to read data until the entire delimiter specified as a read-only span matches.">尝试读取数据，直到指定为只读范围的整个分隔符匹配。</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">当方法返回时，包含读取的数据（如果有）。</param>
      <param name="delimiter" vsli:raw="A read-only span that contains one or more delimiters.">一个只读范围，包含一个或多个分隔符。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要跳过 <see langword="true" />（如果已发现），则为 <paramref name="delimiter" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果发现了 <see langword="true" />，则为 <paramref name="delimiter" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;, ignoring delimiters that are preceded by &lt;paramref name=&quot;delimiterEscape&quot; /&gt;.">尝试读取给定 <paramref name="delimiter" /> 之前的所有内容，忽略前面为 <paramref name="delimiterEscape" /> 的分隔符。</summary>
      <param name="span" vsli:raw="When the method returns, contains the data read, if any.">当方法返回时，包含读取的数据（如果有）。</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">要查找的分隔符。</param>
      <param name="delimiterEscape" vsli:raw="A value that indicates that an immediately following &lt;paramref name=&quot;delimiter&quot; /&gt; is to be skipped.">一个值，指示将跳过紧跟 <paramref name="delimiter" /> 之后的项。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要跳过 <see langword="true" />（如果已发现），则为 <paramref name="delimiter" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果发现了 <see langword="true" />，则为 <paramref name="delimiter" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;.">尝试读取给定 <paramref name="delimiter" /> 之前的所有内容。</summary>
      <param name="span" vsli:raw="When the method returns, contains the data read, if any.">当方法返回时，包含读取的数据（如果有）。</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">要查找的分隔符。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要跳过 <see langword="true" />（如果已发现），则为 <paramref name="delimiter" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果发现了 <see langword="true" />，则为 <paramref name="delimiter" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadToAny(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Tries to read everything up to any of the specified &lt;paramref name=&quot;delimiters&quot; /&gt;.">尝试读取指定的任意 <paramref name="delimiters" /> 之前的所有内容。</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">当方法返回时，包含读取的数据（如果有）。</param>
      <param name="delimiters" vsli:raw="The delimiters to look for.">要查找的分隔符。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the first found instance of any of the given &lt;paramref name=&quot;delimiters&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要跳过找到的第一个具有给定 <see langword="true" /> 的实例，则为 <paramref name="delimiters" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the &lt;paramref name=&quot;delimiters&quot; /&gt; were found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果发现任何 <see langword="true" />，则为 <paramref name="delimiters" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadToAny(System.ReadOnlySpan{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Tries to read everything up to any of the specified &lt;paramref name=&quot;delimiters&quot; /&gt;.">尝试读取指定的任意 <paramref name="delimiters" /> 之前的所有内容。</summary>
      <param name="span" vsli:raw="When the method returns, contains the data read, if any.">当方法返回时，包含读取的数据（如果有）。</param>
      <param name="delimiters" vsli:raw="The delimiters to look for.">要查找的分隔符。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the first found instance of any of the given &lt;paramref name=&quot;delimiters&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要跳过找到的第一个具有给定 <see langword="true" /> 的实例，则为 <paramref name="delimiters" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the &lt;paramref name=&quot;delimiters&quot; /&gt; were found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果发现任何 <see langword="true" />，则为 <paramref name="delimiters" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.UnreadSpan">
      <summary vsli:raw="Gets the unread portion of the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">获取 <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" /> 的未读取部分。</summary>
      <returns vsli:raw="The unread portion of the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">
        <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />的未读部分。</returns>
    </member>
    <member name="T:System.Buffers.SequenceReaderExtensions">
      <summary vsli:raw="Provides extended functionality for the &lt;see cref=&quot;T:System.Buffers.SequenceReader`1&quot; /&gt; class that allows reading of endian specific numeric values from binary data.">为 <see cref="T:System.Buffers.SequenceReader`1" /> 类提供扩展功能，允许从二进制数据读取字节序特定数值。</summary>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int16@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int16&quot; /&gt; as big endian.">尝试将 <see cref="T:System.Int16" /> 读取为大字节序。</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">要从中读取值的字节序列读取器实例。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as big endian.">当该方法返回时，作为大字节序从字节序列读取器读取的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">如果读取操作成功，则为 <see langword="true" />；如果没有足够的数据用于 <see langword="false" />，则为 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int32@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int32&quot; /&gt; as big endian.">尝试将 <see cref="T:System.Int32" /> 读取为大字节序。</summary>
      <param name="reader" vsli:raw="The byte sequence reader from which to read the value.">从中读取值的字节序列读取器。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as big endian.">当该方法返回时，作为大字节序从字节序列读取器读取的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">如果读取操作成功，则为 <see langword="true" />；如果没有足够的数据用于 <see langword="false" />，则为 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int64@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int64&quot; /&gt; as big endian.">尝试将 <see cref="T:System.Int64" /> 读取为大字节序。</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">要从中读取值的字节序列读取器实例。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as big endian.">当该方法返回时，作为大字节序从字节序列读取器读取的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">如果读取操作成功，则为 <see langword="true" />；如果没有足够的数据用于 <see langword="false" />，则为 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int16@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int16&quot; /&gt; as little endian.">尝试将 <see cref="T:System.Int16" /> 读取为小字节序。</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">要从中读取值的字节序列读取器实例。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as little endian.">当该方法返回时，作为小字节序从字节序列读取器读取的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">如果读取操作成功，则为 <see langword="true" />；如果没有足够的数据用于 <see langword="false" />，则为 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int32@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int32&quot; /&gt; as little endian.">尝试将 <see cref="T:System.Int32" /> 读取为小字节序。</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">要从中读取值的字节序列读取器实例。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as little endian.">当该方法返回时，作为小字节序从字节序列读取器读取的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">如果读取操作成功，则为 <see langword="true" />；如果没有足够的数据用于 <see langword="false" />，则为 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int64@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int64&quot; /&gt; as little endian.">尝试将 <see cref="T:System.Int64" /> 读取为小字节序。</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">要从中读取值的字节序列读取器实例。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as little endian.">当该方法返回时，作为小字节序从字节序列读取器读取的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">如果读取操作成功，则为 <see langword="true" />；如果没有足够的数据用于 <see langword="false" />，则为 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="T:System.Buffers.StandardFormat">
      <summary vsli:raw="Represents a standard format string without using an actual string.">表示不使用实际字符串的标准格式字符串。</summary>
    </member>
    <member name="M:System.Buffers.StandardFormat.#ctor(System.Char,System.Byte)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; structure.">初始化 <see cref="T:System.Buffers.StandardFormat" /> 结构的新实例。</summary>
      <param name="symbol" vsli:raw="A type-specific format specifier, such as 'G', 'D', or 'X'.">类型特定的格式说明符，如 G、D 或 X。</param>
      <param name="precision" vsli:raw="An optional precision ranging from 0 to 99, or the special value &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt; (the default).">可选的精度范围从 0 到 99，或者特殊值 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />（默认值）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;symbol&quot; /&gt; is not &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;, and its value is greater than &lt;see cref=&quot;F:System.Buffers.StandardFormat.MaxPrecision&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;symbol&quot; /&gt; cannot be converted to a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">
        <paramref name="symbol" /> 不为 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />，并且其值大于 <see cref="F:System.Buffers.StandardFormat.MaxPrecision" />。
或
<paramref name="symbol" />无法转换为 <see cref="T:System.Byte" />。</exception>
    </member>
    <member name="M:System.Buffers.StandardFormat.Equals(System.Buffers.StandardFormat)">
      <summary vsli:raw="Returns a value that indicates whether the specified &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; is equal to the current instance.">返回一个值，该值指示指定的 <see cref="T:System.Buffers.StandardFormat" /> 是否与当前实例相等。</summary>
      <param name="other" vsli:raw="The format to compare to the current instance.">要与当前实例进行比较的格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the specified object is a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; object that is equal to the current instance.">返回一个值，该值指示指定的对象是否是与当前对象相等的 <see cref="T:System.Buffers.StandardFormat" /> 对象。</summary>
      <param name="obj" vsli:raw="An object to compare to the current instance.">要与当前实例进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="The hash code for this instance.">此实例的哈希代码。</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.HasPrecision">
      <summary vsli:raw="Gets a value that indicates whether a format has a defined precision.">获取一个值，该值指示格式是否已定义精度。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the format has a precision other than &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果格式具有除 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />以外的精度，则 <see langword="true" />;否则，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.IsDefault">
      <summary vsli:raw="Gets a value that indicates whether the current instance is a default format.">获取一个值，该值指示当前实例是否是默认格式。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance is a default format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果当前实例是默认格式，则为; 否则为。否则，<see langword="false" />。</returns>
    </member>
    <member name="F:System.Buffers.StandardFormat.MaxPrecision">
      <summary vsli:raw="Defines the maximum valid precision value.">定义最大的有效精度值。</summary>
    </member>
    <member name="F:System.Buffers.StandardFormat.NoPrecision">
      <summary vsli:raw="Indicates that a format doesn't use a precision or that the precision is unspecified.">指示某个格式不使用精度或未指定精度。</summary>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Equality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)">
      <summary vsli:raw="Returns a value that indicates whether two &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instances are equal.">返回一个值，该值指示两个 <see cref="T:System.Buffers.StandardFormat" /> 实例是否相等。</summary>
      <param name="left" vsli:raw="The first format to compare.">要比较的第一个格式。</param>
      <param name="right" vsli:raw="The second format to compare.">要比较的第二个格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Implicit(System.Char)~System.Buffers.StandardFormat">
      <summary vsli:raw="Converts a character to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance using &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt; precision.">将字符转换为使用 <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> 精度的 <see cref="T:System.Buffers.StandardFormat" /> 实例。</summary>
      <param name="symbol" vsli:raw="The character to convert to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; value.">要转换为 <see cref="T:System.Buffers.StandardFormat" /> 值的字符。</param>
      <returns vsli:raw="A format with a &lt;see cref=&quot;P:System.Buffers.StandardFormat.Symbol&quot; /&gt; property equal to &lt;paramref name=&quot;symbol&quot; /&gt; and a &lt;see cref=&quot;P:System.Buffers.StandardFormat.Precision&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;.">一个格式，其 <see cref="P:System.Buffers.StandardFormat.Symbol" /> 属性等于 <paramref name="symbol" />、<see cref="P:System.Buffers.StandardFormat.Precision" /> 属性等于 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Inequality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instances are unequal.">确定两个 <see cref="T:System.Buffers.StandardFormat" /> 实例是否不相等。</summary>
      <param name="left" vsli:raw="The first format to compare.">要比较的第一个格式。</param>
      <param name="right" vsli:raw="The second format to compare.">要比较的第二个格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two formats are unequal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个格式不相等，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Parse(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Converts a &lt;see langword=&quot;ReadOnlySpan&amp;lt;System.Char&amp;gt;&quot; /&gt; into a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance using &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt; precision.">将 <see langword="ReadOnlySpan&lt;System.Char&gt;" /> 转换为使用 <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> 精度的 <see cref="T:System.Buffers.StandardFormat" /> 实例。</summary>
      <param name="format" vsli:raw="A read-only span that contains the character to parse.">一个只读范围，包含要分析的字符。</param>
      <returns vsli:raw="A value whose &lt;see cref=&quot;P:System.Buffers.StandardFormat.Symbol&quot; /&gt; property value is the character in &lt;paramref name=&quot;format&quot; /&gt; and whose &lt;see cref=&quot;P:System.Buffers.StandardFormat.Precision&quot; /&gt; property value is &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;.">一个值，其 <see cref="P:System.Buffers.StandardFormat.Symbol" /> 属性值是 <paramref name="format" /> 中的字符、<see cref="P:System.Buffers.StandardFormat.Precision" /> 属性值是 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Parse(System.String)">
      <summary vsli:raw="Converts a classic .NET standard format string to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance.">将经典 .NET 标准格式将字符串转换为 <see cref="T:System.Buffers.StandardFormat" /> 实例。</summary>
      <param name="format" vsli:raw="A classic .NET standard format string.">一个经典 .NET 标准格式字符串。</param>
      <returns vsli:raw="A format.">一个格式。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;format&quot; /&gt; is not a valid standard format string.">
        <paramref name="format" /> 不是有效的标准格式字符串。</exception>
    </member>
    <member name="P:System.Buffers.StandardFormat.Precision">
      <summary vsli:raw="Gets the precision component of the format.">获取格式的精度组件。</summary>
      <returns vsli:raw="The precision component, which can be &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;, or can range from 0 to 9.">可以 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />的精度组件，或范围为0到9。</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.Symbol">
      <summary vsli:raw="Gets the character component of the format.">获取格式的字符组件。</summary>
      <returns vsli:raw="The character component of the format.">格式的字符部分。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.ToString">
      <summary vsli:raw="Returns the string representation of this format.">返回此格式的字符串表示形式。</summary>
      <returns vsli:raw="The string representation of this format.">此格式的字符串表示形式。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.TryParse(System.ReadOnlySpan{System.Char},System.Buffers.StandardFormat@)">
      <summary vsli:raw="Attempts to convert a &lt;see langword=&quot;ReadOnlySpan&amp;lt;Char&amp;gt;&quot; /&gt; to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance and returns a value that indicates whether the parsing operation succeeded.">尝试将 <see langword="ReadOnlySpan&lt;Char&gt;" /> 转换为 <see cref="T:System.Buffers.StandardFormat" /> 实例并返回一个值，该值指示分析操作是否成功。</summary>
      <param name="format" vsli:raw="A read-only span that contains the character to convert.">一个只读范围，包含要转换的字符。</param>
      <param name="result" vsli:raw="When the method returns, contains the parsed &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance if the operation was successful.">当方法返回时，如果操作成功，则包含已分析的 <see cref="T:System.Buffers.StandardFormat" /> 实例。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the parsing operation was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果分析操作成功，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Buffers.Text.Base64">
      <summary>在二进制数据和以 base 64 表示的 UTF-8 编码的文本之间转换。</summary>
    </member>
    <member name="M:System.Buffers.Text.Base64.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <summary>将表示为 base 64 的 UTF-8 编码的文本范围解码为二进制数据。 如果输入不是 4 的倍数，则它将尽可能多地解码，直到最接近 4 的倍数。</summary>
      <param name="utf8">包含需要解码的以 base 64 表示的 UTF-8 编码文本的输入范围。</param>
      <param name="bytes">包含操作结果（即解码的二进制数据）的输出范围。</param>
      <param name="bytesConsumed">在操作期间使用的输入字节数。 如有必要，这可用于划分输入以供后续调用。</param>
      <param name="bytesWritten">写入输出范围的字节数。 如有必要，这可用于划分输出以供后续调用。</param>
      <param name="isFinalBlock">如果输入范围包含要解码的整个数据，则为 <see langword="true" />（默认值）。 如果输入范围包含部分数据且将输入更多数据，则为 <see langword="false" />。</param>
      <returns>用于指示解码操作状态的枚举值之一。</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.DecodeFromUtf8InPlace(System.Span{System.Byte},System.Int32@)">
      <summary>将以 base 64（就地）表示的 UTF-8 编码的文本范围解码为二进制数据。 解码的二进制输出小于包含在输入中的文本数据（操作会压缩数据）。 如果输入不是 4 的倍数，该方法将无法解码任何数据。</summary>
      <param name="buffer">包含需要解码的 base-64 文本数据的输入范围。</param>
      <param name="bytesWritten">写入缓冲区的字节数。</param>
      <returns>用于指示解码操作状态的枚举值之一。</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.EncodeToUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <summary>将二进制数据的范围编码为以 base 64 表示的 UTF-8 编码的文本。</summary>
      <param name="bytes">包含需要编码的二进制数据的输入范围。</param>
      <param name="utf8">包含操作结果（即以 base 64 表示的 UTF-8 编码的文本）的输出范围。</param>
      <param name="bytesConsumed">在操作期间使用的输入字节数。 如有必要，这可用于划分输入以供后续调用。</param>
      <param name="bytesWritten">写入输出范围的字节数。 如有必要，这可用于划分输出以供后续调用。</param>
      <param name="isFinalBlock">如果输入范围包含要编码的整个数据，则为 <see langword="true" />（默认值）。 如果输入范围包含部分数据且将输入更多数据，则为 <see langword="false" />。</param>
      <returns>用于指示编码操作状态的枚举值之一。</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.EncodeToUtf8InPlace(System.Span{System.Byte},System.Int32,System.Int32@)">
      <summary>将二进制数据（就地）的范围编码为以 base 64 表示的 UTF-8 编码的文本。 编码的文本输出大于包含在输入中的二进制数据（操作会扩大数据）。</summary>
      <param name="buffer">包含需要编码的二进制数据的输入范围。 由于此方法执行就地转换，因此它需要具有足够大小来存储操作结果。</param>
      <param name="dataLength">包含在需要编码的缓冲区内的二进制数据的字节数。 此值必须小于缓冲区长度。</param>
      <param name="bytesWritten">写入缓冲区的字节数。</param>
      <returns>用于指示编码操作状态的枚举值之一。</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.GetMaxDecodedFromUtf8Length(System.Int32)">
      <summary>如果要解码具有指定长度的字节跨度中的 base-64 编码的文本，则返回结果的最大长度（以字节为单位）。</summary>
      <param name="length">字节跨度的大小。</param>
      <returns>结果的最大长度（以字节为单位）。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小于 0。</exception>
    </member>
    <member name="M:System.Buffers.Text.Base64.GetMaxEncodedToUtf8Length(System.Int32)">
      <summary>如果要解码具有指定长度的字节跨度中的二进制文本，则返回结果的最大长度（以字节为单位）。</summary>
      <param name="length">字节跨度的大小。</param>
      <returns>结果的最大长度（以字节为单位）。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小于 0 或大于 1610612733（因为编码将数据扩大了 4/3）。</exception>
    </member>
    <member name="T:System.Buffers.Text.Utf8Formatter">
      <summary vsli:raw="Provides static methods to format common data types as Utf8 strings.">提供用于将常见数据类型的格式设置为 Utf8 字符串的静态方法。</summary>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Boolean,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; as a UTF8 string.">将 <see cref="T:System.Boolean" /> 的格式设置为 UTF8 字符串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要写入 UTF8 格式的值的缓冲区。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法返回时，包含格式化文本的长度（以字节为单位）。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的标准格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">如果格式设置操作成功，则为 <see langword="true" />；如果 <paramref name="buffer" /> 太小，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Byte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Byte&quot; /&gt; as a UTF8 string.">将 <see cref="T:System.Byte" /> 的格式设置为 UTF8 字符串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要写入 UTF8 格式的值的缓冲区。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法返回时，包含格式化文本的长度（以字节为单位）。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的标准格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">如果格式设置操作成功，则为 <see langword="true" />；如果 <paramref name="buffer" /> 太小，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTime,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; as a UTF8 string.">将 <see cref="T:System.DateTime" /> 的格式设置为 UTF8 字符串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要写入 UTF8 格式的值的缓冲区。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法返回时，包含格式化文本的长度（以字节为单位）。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的标准格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">如果格式设置操作成功，则为 <see langword="true" />；如果 <paramref name="buffer" /> 太小，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTimeOffset,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; as a UTF8 string.">将 <see cref="T:System.DateTimeOffset" /> 的格式设置为 UTF8 字符串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要写入 UTF8 格式的值的缓冲区。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法返回时，包含格式化文本的长度（以字节为单位）。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的标准格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">如果格式设置操作成功，则为 <see langword="true" />；如果 <paramref name="buffer" /> 太小，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Decimal,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; as a UTF8 string.">将 <see cref="T:System.Decimal" /> 的格式设置为 UTF8 字符串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要写入 UTF8 格式的值的缓冲区。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法返回时，包含格式化文本的长度（以字节为单位）。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的标准格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">如果格式设置操作成功，则为 <see langword="true" />；如果 <paramref name="buffer" /> 太小，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Double,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Double&quot; /&gt; as a UTF8 string.">将 <see cref="T:System.Double" /> 的格式设置为 UTF8 字符串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要写入 UTF8 格式的值的缓冲区。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法返回时，包含格式化文本的长度（以字节为单位）。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的标准格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">如果格式设置操作成功，则为 <see langword="true" />；如果 <paramref name="buffer" /> 太小，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Guid,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Guid&quot; /&gt; as a UTF8 string.">将 <see cref="T:System.Guid" /> 的格式设置为 UTF8 字符串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要写入 UTF8 格式的值的缓冲区。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法返回时，包含格式化文本的长度（以字节为单位）。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的标准格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">如果格式设置操作成功，则为 <see langword="true" />；如果 <paramref name="buffer" /> 太小，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.Int16&quot; /&gt; as a UTF8 string.">将 <see cref="T:System.Int16" /> 的格式设置为 UTF8 字符串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要写入 UTF8 格式的值的缓冲区。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法返回时，包含格式化文本的长度（以字节为单位）。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的标准格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">如果格式设置操作成功，则为 <see langword="true" />；如果 <paramref name="buffer" /> 太小，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.Int32&quot; /&gt; as a UTF8 string.">将 <see cref="T:System.Int32" /> 的格式设置为 UTF8 字符串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要写入 UTF8 格式的值的缓冲区。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法返回时，包含格式化文本的长度（以字节为单位）。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的标准格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">如果格式设置操作成功，则为 <see langword="true" />；如果 <paramref name="buffer" /> 太小，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.Int64&quot; /&gt; as a UTF8 string.">将 <see cref="T:System.Int64" /> 的格式设置为 UTF8 字符串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要写入 UTF8 格式的值的缓冲区。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法返回时，包含格式化文本的长度（以字节为单位）。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的标准格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">如果格式设置操作成功，则为 <see langword="true" />；如果 <paramref name="buffer" /> 太小，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.SByte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.SByte&quot; /&gt; as a UTF8 string.">将 <see cref="T:System.SByte" /> 的格式设置为 UTF8 字符串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要写入 UTF8 格式的值的缓冲区。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法返回时，包含格式化文本的长度（以字节为单位）。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的标准格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">如果格式设置操作成功，则为 <see langword="true" />；如果 <paramref name="buffer" /> 太小，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Single,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Single&quot; /&gt; as a UTF8 string.">将 <see cref="T:System.Single" /> 的格式设置为 UTF8 字符串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要写入 UTF8 格式的值的缓冲区。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法返回时，包含格式化文本的长度（以字节为单位）。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的标准格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">如果格式设置操作成功，则为 <see langword="true" />；如果 <paramref name="buffer" /> 太小，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.TimeSpan,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; as a UTF8 string.">将 <see cref="T:System.TimeSpan" /> 的格式设置为 UTF8 字符串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要写入 UTF8 格式的值的缓冲区。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法返回时，包含格式化文本的长度（以字节为单位）。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的标准格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">如果格式设置操作成功，则为 <see langword="true" />；如果 <paramref name="buffer" /> 太小，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; as a UTF8 string.">将 <see cref="T:System.UInt16" /> 的格式设置为 UTF8 字符串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要写入 UTF8 格式的值的缓冲区。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法返回时，包含格式化文本的长度（以字节为单位）。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的标准格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">如果格式设置操作成功，则为 <see langword="true" />；如果 <paramref name="buffer" /> 太小，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; as a UTF8 string.">将 <see cref="T:System.UInt32" /> 的格式设置为 UTF8 字符串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要写入 UTF8 格式的值的缓冲区。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法返回时，包含格式化文本的长度（以字节为单位）。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的标准格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">如果格式设置操作成功，则为 <see langword="true" />；如果 <paramref name="buffer" /> 太小，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; as a UTF8 string.">将 <see cref="T:System.UInt64" /> 的格式设置为 UTF8 字符串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要写入 UTF8 格式的值的缓冲区。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法返回时，包含格式化文本的长度（以字节为单位）。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的标准格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">如果格式设置操作成功，则为 <see langword="true" />；如果 <paramref name="buffer" /> 太小，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Buffers.Text.Utf8Parser">
      <summary vsli:raw="Provides static methods to parse Utf8 strings to common data types.">提供用于将 Utf8 字符串分析为常见数据类型的静态方法。</summary>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; at the start of a Utf8 string.">分析 Utf8 字符串开头的 <see cref="T:System.Boolean" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要分析的 Utf8 字符串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">当方法返回时，如果分析操作成功，则包含从 <paramref name="source" /> 分析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">当方法返回时，如果分析操作成功，则包含已分析的子字符串的字节长度。 如果方法失败，则 <paramref name="bytesConsumed" /> 设置为 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 字符串的预期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">如果成功，则为 <see langword="true" />；如果字符串在语法上无效或者出现溢出或下溢，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Byte&quot; /&gt; at the start of a Utf8 string.">分析 Utf8 字符串开头的 <see cref="T:System.Byte" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要分析的 Utf8 字符串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">当方法返回时，如果分析操作成功，则包含从 <paramref name="source" /> 分析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">当方法返回时，如果分析操作成功，则包含已分析的子字符串的字节长度。 如果方法失败，则 <paramref name="bytesConsumed" /> 设置为 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 字符串的预期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">如果成功，则为 <see langword="true" />；如果字符串在语法上无效或者出现溢出或下溢，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; at the start of a Utf8 string.">分析 Utf8 字符串开头的 <see cref="T:System.DateTime" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要分析的 Utf8 字符串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">当方法返回时，如果分析操作成功，则包含从 <paramref name="source" /> 分析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">当方法返回时，如果分析操作成功，则包含已分析的子字符串的字节长度。 如果方法失败，则 <paramref name="bytesConsumed" /> 设置为 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 字符串的预期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">如果成功，则为 <see langword="true" />；如果字符串在语法上无效或者出现溢出或下溢，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; at the start of a Utf8 string.">分析 Utf8 字符串开头的 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要分析的 Utf8 字符串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">当方法返回时，如果分析操作成功，则包含从 <paramref name="source" /> 分析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">当方法返回时，如果分析操作成功，则包含已分析的子字符串的字节长度。 如果方法失败，则 <paramref name="bytesConsumed" /> 设置为 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 字符串的预期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">如果成功，则为 <see langword="true" />；如果字符串在语法上无效或者出现溢出或下溢，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; at the start of a Utf8 string.">分析 Utf8 字符串开头的 <see cref="T:System.Decimal" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要分析的 Utf8 字符串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">当方法返回时，如果分析操作成功，则包含从 <paramref name="source" /> 分析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">当方法返回时，如果分析操作成功，则包含已分析的子字符串的字节长度。 如果方法失败，则 <paramref name="bytesConsumed" /> 设置为 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 字符串的预期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">如果成功，则为 <see langword="true" />；如果字符串在语法上无效或者出现溢出或下溢，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Double&quot; /&gt; at the start of a Utf8 string.">分析 Utf8 字符串开头的 <see cref="T:System.Double" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要分析的 Utf8 字符串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">当方法返回时，如果分析操作成功，则包含从 <paramref name="source" /> 分析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">当方法返回时，如果分析操作成功，则包含已分析的子字符串的字节长度。 如果方法失败，则 <paramref name="bytesConsumed" /> 设置为 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 字符串的预期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">如果成功，则为 <see langword="true" />；如果字符串在语法上无效或者出现溢出或下溢，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Guid&quot; /&gt; at the start of a Utf8 string.">分析 Utf8 字符串开头的 <see cref="T:System.Guid" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要分析的 Utf8 字符串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">当方法返回时，如果分析操作成功，则包含从 <paramref name="source" /> 分析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">当方法返回时，如果分析操作成功，则包含已分析的子字符串的字节长度。 如果方法失败，则 <paramref name="bytesConsumed" /> 设置为 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 字符串的预期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">如果成功，则为 <see langword="true" />；如果字符串在语法上无效或者出现溢出或下溢，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.Int16&quot; /&gt; at the start of a Utf8 string.">分析 Utf8 字符串开头的 <see cref="T:System.Int16" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要分析的 Utf8 字符串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">当方法返回时，如果分析操作成功，则包含从 <paramref name="source" /> 分析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">当方法返回时，如果分析操作成功，则包含已分析的子字符串的字节长度。 如果方法失败，则 <paramref name="bytesConsumed" /> 设置为 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 字符串的预期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">如果成功，则为 <see langword="true" />；如果字符串在语法上无效或者出现溢出或下溢，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.Int32&quot; /&gt; at the start of a Utf8 string.">分析 Utf8 字符串开头的 <see cref="T:System.Int32" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要分析的 Utf8 字符串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">当方法返回时，如果分析操作成功，则包含从 <paramref name="source" /> 分析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">当方法返回时，如果分析操作成功，则包含已分析的子字符串的字节长度。 如果方法失败，则 <paramref name="bytesConsumed" /> 设置为 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 字符串的预期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">如果成功，则为 <see langword="true" />；如果字符串在语法上无效或者出现溢出或下溢，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.Int64&quot; /&gt; at the start of a Utf8 string.">分析 Utf8 字符串开头的 <see cref="T:System.Int64" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要分析的 Utf8 字符串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">当方法返回时，如果分析操作成功，则包含从 <paramref name="source" /> 分析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">当方法返回时，如果分析操作成功，则包含已分析的子字符串的字节长度。 如果方法失败，则 <paramref name="bytesConsumed" /> 设置为 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 字符串的预期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">如果成功，则为 <see langword="true" />；如果字符串在语法上无效或者出现溢出或下溢，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.SByte&quot; /&gt; at the start of a Utf8 string.">分析 Utf8 字符串开头的 <see cref="T:System.SByte" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要分析的 Utf8 字符串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">当方法返回时，如果分析操作成功，则包含从 <paramref name="source" /> 分析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">当方法返回时，如果分析操作成功，则包含已分析的子字符串的字节长度。 如果方法失败，则 <paramref name="bytesConsumed" /> 设置为 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 字符串的预期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">如果成功，则为 <see langword="true" />；如果字符串在语法上无效或者出现溢出或下溢，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Single&quot; /&gt; at the start of a Utf8 string.">分析 Utf8 字符串开头的 <see cref="T:System.Single" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要分析的 Utf8 字符串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">当方法返回时，如果分析操作成功，则包含从 <paramref name="source" /> 分析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">当方法返回时，如果分析操作成功，则包含已分析的子字符串的字节长度。 如果方法失败，则 <paramref name="bytesConsumed" /> 设置为 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 字符串的预期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">如果成功，则为 <see langword="true" />；如果字符串在语法上无效或者出现溢出或下溢，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; at the start of a Utf8 string.">分析 Utf8 字符串开头的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要分析的 Utf8 字符串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">当方法返回时，如果分析操作成功，则包含从 <paramref name="source" /> 分析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">当方法返回时，如果分析操作成功，则包含已分析的子字符串的字节长度。 如果方法失败，则 <paramref name="bytesConsumed" /> 设置为 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 字符串的预期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">如果成功，则为 <see langword="true" />；如果字符串在语法上无效或者出现溢出或下溢，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; at the start of a Utf8 string.">分析 Utf8 字符串开头的 <see cref="T:System.UInt16" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要分析的 Utf8 字符串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">当方法返回时，如果分析操作成功，则包含从 <paramref name="source" /> 分析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">当方法返回时，如果分析操作成功，则包含已分析的子字符串的字节长度。 如果方法失败，则 <paramref name="bytesConsumed" /> 设置为 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 字符串的预期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">如果成功，则为 <see langword="true" />；如果字符串在语法上无效或者出现溢出或下溢，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; at the start of a Utf8 string.">分析 Utf8 字符串开头的 <see cref="T:System.UInt32" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要分析的 Utf8 字符串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">当方法返回时，如果分析操作成功，则包含从 <paramref name="source" /> 分析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">当方法返回时，如果分析操作成功，则包含已分析的子字符串的字节长度。 如果方法失败，则 <paramref name="bytesConsumed" /> 设置为 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 字符串的预期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">如果成功，则为 <see langword="true" />；如果字符串在语法上无效或者出现溢出或下溢，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; at the start of a Utf8 string.">分析 Utf8 字符串开头的 <see cref="T:System.UInt64" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要分析的 Utf8 字符串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">当方法返回时，如果分析操作成功，则包含从 <paramref name="source" /> 分析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">当方法返回时，如果分析操作成功，则包含已分析的子字符串的字节长度。 如果方法失败，则 <paramref name="bytesConsumed" /> 设置为 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 字符串的预期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">如果成功，则为 <see langword="true" />；如果字符串在语法上无效或者出现溢出或下溢，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.MemoryExtensions">
      <summary vsli:raw="Provides extension methods for the memory- and span-related types, such as &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;, &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;, &lt;see cref=&quot;T:System.Span`1&quot; /&gt;, and &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt;.">为内存相关类型和跨度相关类型提供扩展方法（例如，<see cref="T:System.Memory`1" />、<see cref="T:System.ReadOnlyMemory`1" />、<see cref="T:System.Span`1" /> 和 <see cref="T:System.ReadOnlySpan`1" />）。</summary>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over the portion of the target string.">在目标字符串的一部分上创建新的 <see langword="ReadOnlyMemory&lt;Char&gt;" />。</summary>
      <param name="text" vsli:raw="The target string.">目标字符串。</param>
      <returns vsli:raw="The read-only character memory representation of the string, or &lt;see langword=&quot;default&quot; /&gt; if &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">如果 <paramref name="text" /> 为 <see langword="null" />则为字符串的只读字符内存表示形式或 <see langword="default" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Index)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a portion of the target string starting at a specified index.">从指定索引处开始，在目标字符串的一部分上创建新的 <see langword="ReadOnlyMemory&lt;Char&gt;" />。</summary>
      <param name="text" vsli:raw="The target string.">目标字符串。</param>
      <param name="startIndex" vsli:raw="The index at which to begin this slice.">开始切片处的索引。</param>
      <returns vsli:raw="The read-only character memory representation of the string.">字符串的只读字符内存表示形式。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Int32)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a portion of the target string starting at a specified character position.">从指定字符串位置开始，在目标字符串的一部分上创建新的 <see langword="ReadOnlyMemory&lt;Char&gt;" />。</summary>
      <param name="text" vsli:raw="The target string.">目标字符串。</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">开始切片处的索引。</param>
      <returns vsli:raw="The read-only character memory representation of the string, or &lt;see langword=&quot;default&quot; /&gt; if &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">如果 <paramref name="text" /> 为 <see langword="null" />则为字符串的只读字符内存表示形式或 <see langword="default" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt; (&lt;paramref name=&quot;start&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;c&gt;text.Length&lt;/c&gt;).">
        <paramref name="start" /> 不在 <paramref name="text" /> 的范围内（<paramref name="start" /> 为 &lt; 0 或 &gt; <c>text.Length</c>）。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a portion of the target string beginning at a specified position with a length.">从带有长度的指定位置开始，在目标字符串的一部分上创建新的 <see langword="ReadOnlyMemory&lt;Char&gt;" />。</summary>
      <param name="text" vsli:raw="The target string.">目标字符串。</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">开始切片处的索引。</param>
      <param name="length" vsli:raw="The desired length for the slice.">切片所需的长度。</param>
      <returns vsli:raw="The read-only character memory representation of the string, or &lt;see langword=&quot;default&quot; /&gt; if &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">如果 <paramref name="text" /> 为 <see langword="null" />则为字符串的只读字符内存表示形式或 <see langword="default" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="text" /> 的范围内。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Range)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a specified range of the target string.">在目标字符串的指定范围内创建新的 <see langword="ReadOnlyMemory&lt;Char&gt;" />。</summary>
      <param name="text" vsli:raw="The target string.">目标字符串。</param>
      <param name="range" vsli:raw="The range that indicates the start and length of the sliced string.">表示切片后的字符串的起始和长度的范围。</param>
      <returns vsli:raw="The read-only character memory representation of the string.">字符串的只读字符内存表示形式。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[])">
      <summary vsli:raw="Creates a new memory region over the target array.">在目标数组上创建新的内存区域。</summary>
      <param name="array" vsli:raw="The array to convert.">要转换的数组。</param>
      <typeparam name="T" vsli:raw="The type of the array.">数组的类型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">整个或部分数组的内存表示形式。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Index)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array starting at a specified index to the end of the array.">从指定索引开始到数组的结尾，在目标数组的一部分上创建一个新的内存区域。</summary>
      <param name="array" vsli:raw="The array to convert.">要转换的数组。</param>
      <param name="startIndex" vsli:raw="The first position of the array.">数组的第一个位置。</param>
      <typeparam name="T" vsli:raw="The type of the array.">数组的类型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">整个或部分数组的内存表示形式。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array starting at a specified position to the end of the array.">从指定位置开始到数组的结尾，在目标数组的一部分上创建一个新的内存区域。</summary>
      <param name="array" vsli:raw="The target array.">目标数组。</param>
      <param name="start" vsli:raw="The index at which to begin the memory.">开始内存的索引。</param>
      <typeparam name="T" vsli:raw="The type of the array.">数组的类型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">整个或部分数组的内存表示形式。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="array" /> 是协变的，数组的类型不完全是 <see langword="T[]" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; index less than 0 or greater than &lt;see langword=&quot;array.Length&quot; /&gt;.">
        <paramref name="start" /> 索引小于 0 或大于 <see langword="array.Length" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array beginning at a specified position with a specified length.">从具有指定长度的指定位置开始，在目标数组的一部分上创建新的内存区域。</summary>
      <param name="array" vsli:raw="The target array.">目标数组。</param>
      <param name="start" vsli:raw="The index at which to begin the memory region.">开始内存区域的索引。</param>
      <param name="length" vsli:raw="The number of items in the memory region.">内存区域中的项数。</param>
      <typeparam name="T" vsli:raw="The type of the array.">数组的类型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">整个或部分数组的内存表示形式。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="array" /> 是协变的，数组的类型不完全是 <see langword="T[]" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="array" /> 的范围内。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Range)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array beginning at inclusive start index of the range and ending at the exclusive end index of the range.">从范围的包含起始索引开始，到范围的不包含结束索引结束，在目标数组的一部分上创建新的内存区域。</summary>
      <param name="array" vsli:raw="The array to convert.">要转换的数组。</param>
      <param name="range" vsli:raw="The range to convert from the array.">要从数组转换的范围。</param>
      <typeparam name="T" vsli:raw="The type of the array.">数组的类型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">整个或部分数组的内存表示形式。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0})">
      <summary vsli:raw="Creates a new memory region over the portion of the target array segment.">在目标数组段的一部分上创建新的内存区域。</summary>
      <param name="segment" vsli:raw="The segment to convert.">要转换的段。</param>
      <typeparam name="T" vsli:raw="The type of the segment.">段的类型。</typeparam>
      <returns vsli:raw="The memory representation of the segment.">段的内存表示形式。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array segment starting at a specified position to the end of the segment.">从指定位置开始到段的结尾，在目标数组段的一部分上创建新的内存区域。</summary>
      <param name="segment" vsli:raw="The target array segment.">目标数组段。</param>
      <param name="start" vsli:raw="The index at which to begin the memory.">开始内存的索引。</param>
      <typeparam name="T" vsli:raw="The type of the array.">数组的类型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">整个或部分数组的内存表示形式。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the type of &lt;paramref name=&quot;segment&quot; /&gt; is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="segment" /> 是协变，<paramref name="segment" /> 的类型并不是 <see langword="T[]" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is less than 0 or greater than &lt;see langword=&quot;segment.Count&quot; /&gt;.">
        <paramref name="start" /> 小于 0 或大于 <see langword="segment.Count" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array segment beginning at a specified position with a specified length.">从具有指定长度的指定位置开始，在目标数组段的一部分上创建新的内存区域。</summary>
      <param name="segment" vsli:raw="The target array segment.">目标数组段。</param>
      <param name="start" vsli:raw="The index at which to begin the memory.">开始内存的索引。</param>
      <param name="length" vsli:raw="The number of items in the memory.">内存中的项数。</param>
      <typeparam name="T" vsli:raw="The type of the array.">数组的类型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">整个或部分数组的内存表示形式。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="segment" /> 是协变的，数组的类型不完全是 <see langword="T[]" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;segment&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="segment" /> 的范围内。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String)">
      <summary vsli:raw="Creates a new read-only span over a string.">从指定字符数量的指定位置在目标字符串的一部分上创建新的只读跨度。</summary>
      <param name="text" vsli:raw="The target string.">目标字符串。</param>
      <returns vsli:raw="The read-only span representation of the string.">字符串的只读跨度表示形式。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String,System.Int32)">
      <summary vsli:raw="Creates a new read-only span over a portion of the target string from a specified position to the end of the string.">从指定位置到字符串结尾，在目标字符串的一部分上创建新的只读跨度。</summary>
      <param name="text" vsli:raw="The target string.">目标字符串。</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">开始切片处的索引。</param>
      <returns vsli:raw="The read-only span representation of the string.">字符串的只读跨度表示形式。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Thrown when &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="text" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is less than 0 or greater than &lt;see langword=&quot;text.Length&quot; /&gt;.">
        <paramref name="start" /> 小于 0 或大于 <see langword="text.Length" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new read-only span over a portion of the target string from a specified position for a specified number of characters.">在字符串上创建新的只读跨度。</summary>
      <param name="text" vsli:raw="The target string.">目标字符串。</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">开始切片处的索引。</param>
      <param name="length" vsli:raw="The desired length for the slice.">切片所需的长度。</param>
      <returns vsli:raw="The read-only span representation of the string.">字符串的只读跨度表示形式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="text" /> 的范围内。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[])">
      <summary vsli:raw="Creates a new span over a target array.">在目标数组上创建新的跨度。</summary>
      <param name="array" vsli:raw="The array to convert.">要转换的数组。</param>
      <typeparam name="T" vsli:raw="The type of the array.">数组的类型。</typeparam>
      <returns vsli:raw="The span representation of the array.">数组的跨度表示形式。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Index)">
      <summary vsli:raw="Creates a new span over the portion of the target array defined by an &lt;see cref=&quot;T:System.Index&quot; /&gt; value.">在由 <see cref="T:System.Index" /> 值定义的目标数组部分上创建新的跨度。</summary>
      <param name="array" vsli:raw="The array to convert.">要转换的数组。</param>
      <param name="startIndex" vsli:raw="The starting index.">起始索引。</param>
      <typeparam name="T" vsli:raw="The array type.">数组类型。</typeparam>
      <returns vsli:raw="The span representation of the array.">数组的跨度表示形式。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of the target array starting at a specified position to the end of the array.">从指定位置开始到数组的结尾，在目标数组的一部分上创建一个新的跨度。</summary>
      <param name="array" vsli:raw="The array to convert.">要转换的数组。</param>
      <param name="start" vsli:raw="The initial index from which the array will be converted.">转换数组的初始索引。</param>
      <typeparam name="T" vsli:raw="The type of the array.">数组的类型。</typeparam>
      <returns vsli:raw="The span representation of the array.">数组的跨度表示形式。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new span over the portion of the target array beginning at a specified position for a specified length.">从指定长度的指定位置在目标数组的一部分上创建新的跨度。</summary>
      <param name="array" vsli:raw="The target array.">目标数组。</param>
      <param name="start" vsli:raw="The index at which to begin the span.">开始跨度处的索引。</param>
      <param name="length" vsli:raw="The number of items in the span.">跨度中的项数。</param>
      <typeparam name="T" vsli:raw="The type of the array.">数组的类型。</typeparam>
      <returns vsli:raw="The span representation of the array.">数组的跨度表示形式。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;&quot;.">
        <paramref name="array" /> 是协变的，数组的类型不完全是 <see langword="T[]" />"。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="text" /> 的范围内。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Range)">
      <summary vsli:raw="Creates a new span over a portion of a target array defined by a &lt;see cref=&quot;T:System.Range&quot; /&gt; value.">在由 <see cref="T:System.Range" /> 值定义的目标数组部分上创建新的跨度。</summary>
      <param name="array" vsli:raw="The array to convert.">要转换的数组。</param>
      <param name="range" vsli:raw="The range of the array to convert.">要转换的数组范围。</param>
      <typeparam name="T" vsli:raw="The type of the array.">数组的类型。</typeparam>
      <returns vsli:raw="The span representation of the array.">数组的跨度表示形式。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0})">
      <summary vsli:raw="Creates a new span over a target array segment.">在目标数组段上创建新的跨度。</summary>
      <param name="segment" vsli:raw="The array segment to convert.">要写入的数组段。</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">数组段的类型。</typeparam>
      <returns vsli:raw="The span representation of the array segment.">数组段的跨度表示形式。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Index)">
      <summary vsli:raw="Creates a new span over a portion of the target array segment beginning at a specified index and ending at the end of the segment.">在目标数组段的一部分上创建新的跨度，从指定的索引开始，以段的末尾结束。</summary>
      <param name="segment" vsli:raw="The target array segment.">目标数组段。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the Span.">开始跨度处的索引。</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">数组段的类型。</typeparam>
      <returns vsli:raw="The span representation of the array segment.">数组段的跨度表示形式。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of a target array segment from a specified position to the end of the segment.">从指定位置到段的结尾，在目标数组段的一部分上创建新的跨度。</summary>
      <param name="segment" vsli:raw="The target array segment.">目标数组段。</param>
      <param name="start" vsli:raw="The index at which to begin the san.">开始跨度处的索引。</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">数组段的类型。</typeparam>
      <returns vsli:raw="The span representation of the array segment.">数组段的跨度表示形式。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="segment" /> 是协变的，数组的类型不完全是 <see langword="T[]" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is less than 0 or greater than &lt;see langword=&quot;segment.Count&quot; /&gt;.">
        <paramref name="start" /> 小于 0 或大于 <see langword="segment.Count" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of a target array segment from a specified position for a specified length.">从指定长度的指定位置在目标数组段的一部分上创建新的跨度。</summary>
      <param name="segment" vsli:raw="The target array segment.">目标数组段。</param>
      <param name="start" vsli:raw="The index at which to begin the span.">开始跨度处的索引。</param>
      <param name="length" vsli:raw="The number of items in the span.">跨度中的项数。</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">数组段的类型。</typeparam>
      <returns vsli:raw="The span representation of the array.">数组的跨度表示形式。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="segment" /> 是协变的，数组的类型不完全是 <see langword="T[]" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;segment&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="segment" /> 的范围内。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Range)">
      <summary vsli:raw="Creates a new span over a portion of a target array segment using the range start and end indexes.">使用范围起始和结束索引在目标数组段的一部分上创建新的跨度。</summary>
      <param name="segment" vsli:raw="The target array segment.">目标数组段。</param>
      <param name="range" vsli:raw="The range which has start and end indexes to use for slicing the array.">带有开始和结束索引的范围，用于对数组进行切片。</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">数组段的类型。</typeparam>
      <returns vsli:raw="The span representation of the array segment.">数组段的跨度表示形式。</returns>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``1(System.ReadOnlySpan{``0},System.IComparable{``0})">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; for a value using the specified &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface.">使用指定的 <see cref="T:System.IComparable`1" /> 泛型接口，在整个已排序的 <see cref="T:System.ReadOnlySpan`1" /> 中搜索值。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; to search.">要搜索的已排序 <see cref="T:System.ReadOnlySpan`1" />。</param>
      <param name="comparable" vsli:raw="The &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; to use when comparing.">比较时要使用的 <see cref="T:System.IComparable`1" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">跨度的元素类型。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt;.">如果找到 <paramref name="comparable" />，则为已排序的 <paramref name="span" /> 中 <paramref name="comparable" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="comparable" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.ReadOnlySpan`1.Length" /> 的按位求补。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; for a value using the specified &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface.">使用指定的 <see cref="T:System.IComparable`1" /> 泛型接口，在整个已排序的 <see cref="T:System.Span`1" /> 中搜索值。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to search.">要搜索的已排序 <see cref="T:System.Span`1" />。</param>
      <param name="comparable" vsli:raw="The &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; to use when comparing.">比较时要使用的 <see cref="T:System.IComparable`1" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">跨度的元素类型。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Span`1.Length&quot; /&gt;.">如果找到 <paramref name="comparable" />，则为已排序的 <paramref name="span" /> 中 <paramref name="comparable" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="comparable" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Span`1.Length" /> 的按位求补。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``0,``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; for a specified value using the specified &lt;typeparamref name=&quot;TComparer&quot; /&gt; generic type.">使用指定的 <typeparamref name="TComparer" /> 泛型类型，在整个已排序的 <see cref="T:System.ReadOnlySpan`1" /> 中搜索指定值。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; to search.">要搜索的已排序 <see cref="T:System.ReadOnlySpan`1" />。</param>
      <param name="value" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要定位的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <param name="comparer" vsli:raw="The &lt;typeparamref name=&quot;TComparer&quot; /&gt; to use when comparing.">比较时要使用的 <typeparamref name="TComparer" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">跨度的元素类型。</typeparam>
      <typeparam name="TComparer" vsli:raw="The specific type of &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IComparer`1" />的特定类型。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;value&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;value&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt;.">如果找到 <paramref name="value" />，则为已排序的 <paramref name="span" /> 中 <paramref name="value" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="value" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.ReadOnlySpan`1.Length" /> 的按位求补。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; for a value using the specified &lt;typeparamref name=&quot;TComparable&quot; /&gt; generic type.">使用指定的 <typeparamref name="TComparable" /> 泛型类型，在整个已排序的 <see cref="T:System.ReadOnlySpan`1" /> 中搜索值。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; to search.">要搜索的已排序 <see cref="T:System.ReadOnlySpan`1" />。</param>
      <param name="comparable" vsli:raw="The &lt;typeparamref name=&quot;TComparable&quot; /&gt; to use when comparing.">比较时要使用的 <typeparamref name="TComparable" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">跨度的元素类型。</typeparam>
      <typeparam name="TComparable" vsli:raw="The specific type of &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt;.">
        <see cref="T:System.IComparable`1" />的特定类型。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt;.">如果找到 <paramref name="comparable" />，则为已排序的 <paramref name="span" /> 中 <paramref name="comparable" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="comparable" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.ReadOnlySpan`1.Length" /> 的按位求补。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; for a specified value using the specified &lt;typeparamref name=&quot;TComparer&quot; /&gt; generic type.">使用指定的 <typeparamref name="TComparer" /> 泛型类型，在整个已排序的 <see cref="T:System.Span`1" /> 中搜索指定值。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to search.">要搜索的已排序 <see cref="T:System.Span`1" />。</param>
      <param name="value" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要定位的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <param name="comparer" vsli:raw="The &lt;typeparamref name=&quot;TComparer&quot; /&gt; to use when comparing.">比较时要使用的 <typeparamref name="TComparer" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">跨度的元素类型。</typeparam>
      <typeparam name="TComparer" vsli:raw="The specific type of &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IComparer`1" />的特定类型。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;value&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;value&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Span`1.Length&quot; /&gt;.">如果找到 <paramref name="value" />，则为已排序的 <paramref name="span" /> 中 <paramref name="value" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="value" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Span`1.Length" /> 的按位求补。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; for a value using the specified &lt;typeparamref name=&quot;TComparable&quot; /&gt; generic type.">使用指定的 <typeparamref name="TComparable" /> 泛型类型，在整个已排序的 <see cref="T:System.Span`1" /> 中搜索值。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to search.">要搜索的已排序 <see cref="T:System.Span`1" />。</param>
      <param name="comparable" vsli:raw="The &lt;typeparamref name=&quot;TComparable&quot; /&gt; to use when comparing.">比较时要使用的 <typeparamref name="TComparable" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">跨度的元素类型。</typeparam>
      <typeparam name="TComparable" vsli:raw="The specific type of &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt;.">
        <see cref="T:System.IComparable`1" />的特定类型。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Span`1.Length&quot; /&gt;.">如果找到 <paramref name="comparable" />，则为已排序的 <paramref name="span" /> 中 <paramref name="comparable" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="comparable" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Span`1.Length" /> 的按位求补。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.CompareTo(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Compares one character span with another using a specified string comparison, and returns an integer that indicates their relative position in the sort order.">使用指定的字符串比较将一个字符跨度与另一个字符跨度进行比较，并返回表示其在排序顺序中的相对位置的整数。</summary>
      <param name="span" vsli:raw="The source span.">源跨度。</param>
      <param name="other" vsli:raw="The value to compare with the source span.">要与源跨度进行比较的值。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt; are compared.">用于确定如何比较 <paramref name="span" /> 和 <paramref name="other" /> 的枚举值。</param>
      <returns vsli:raw="A signed integer that indicates the relative order of &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;:&lt;br /&gt;   - If less than 0, &lt;paramref name=&quot;span&quot; /&gt; precedes than &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If 0, &lt;paramref name=&quot;span&quot; /&gt; equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If greater than 0, &lt;paramref name=&quot;span&quot; /&gt; follows &lt;paramref name=&quot;other&quot; /&gt;.">一个带符号整数，表示 <paramref name="span" /> 和<paramref name="other" /> 的相对顺序：   - 如果小于 0，则 <paramref name="span" /> 在 <paramref name="other" /> 之前。   - 如果为 0，则 <paramref name="span" /> 等于 <paramref name="other" />。   - 如果大于 0，则 <paramref name="span" /> 在 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Indicates whether a specified value occurs within a read-only character span.">指示指定值是否出现在只读字符跨度内。</summary>
      <param name="span" vsli:raw="The source span.">源跨度。</param>
      <param name="value" vsli:raw="The value to seek within the source span.">要在源跨度中查找的值。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how the characters in &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">用于确定如何比较 <paramref name="span" /> 和 <paramref name="value" /> 中的字符的枚举值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; occurs within the span, &lt;see langword=&quot;false&quot; /&gt; otherwise.">如果在跨度内出现 <paramref name="value" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Indicates whether a specified value is found in a read-only span. Values are compared using IEquatable{T}.Equals(T).">指示是否在只读跨度内找到指定的值。 使用 IEquatable{T}.Equals(T) 比较各值。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value" vsli:raw="The value to search for.">要搜索的值。</param>
      <typeparam name="T" vsli:raw="The type of the span.">范围的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if found, &lt;see langword=&quot;false&quot; /&gt; otherwise.">如果找到，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains``1(System.Span{``0},``0)">
      <summary vsli:raw="Indicates whether a specified value is found in a span. Values are compared using IEquatable{T}.Equals(T).">指示是否在跨度内找到指定的值。 使用 IEquatable{T}.Equals(T) 比较各值。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value" vsli:raw="The value to search for.">要搜索的值。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">范围中元素的类型。</typeparam>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if found, &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; otherwise.">如果找到，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.CopyTo``1(``0[],System.Memory{``0})">
      <summary vsli:raw="Copies the contents of the array into a memory region.">将数组的内容复制到内存区域。</summary>
      <param name="source" vsli:raw="The array to copy items from.">要从中复制项的数组。</param>
      <param name="destination" vsli:raw="The memory to copy items into.">要将项复制到其中的内存。</param>
      <typeparam name="T" vsli:raw="The type of the array.">数组的类型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination is shorter than the source array.">目标比源数组短。</exception>
    </member>
    <member name="M:System.MemoryExtensions.CopyTo``1(``0[],System.Span{``0})">
      <summary vsli:raw="Copies the contents of the array into the span.">将数组的内容复制到跨度中。</summary>
      <param name="source" vsli:raw="The array to copy items from.">要从中复制项的数组。</param>
      <param name="destination" vsli:raw="The span to copy items into.">要将项复制到的范围。</param>
      <typeparam name="T" vsli:raw="The type of the array.">数组的类型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination Span is shorter than the source array.">目标跨度比源数组短。</exception>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Determines whether the end of the &lt;paramref name=&quot;span&quot; /&gt; matches the specified &lt;paramref name=&quot;value&quot; /&gt; when compared using the specified &lt;paramref name=&quot;comparisonType&quot; /&gt; option.">使用指定的 <paramref name="comparisonType" /> 选项进行比较时，确定 <paramref name="span" /> 的结尾是否与指定的 <paramref name="value" /> 匹配。</summary>
      <param name="span" vsli:raw="The source span.">源跨度。</param>
      <param name="value" vsli:raw="The sequence to compare to the end of the source span.">要与源跨度的结尾进行比较的序列。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">用于确定如何比较 <paramref name="span" /> 和 <paramref name="value" /> 的枚举值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the end of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 与 <paramref name="span" /> 的结尾匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether the specified sequence appears at the end of a read-only span.">确定指定的序列是否出现在只读跨度的结尾。</summary>
      <param name="span" vsli:raw="The source span.">源跨度。</param>
      <param name="value" vsli:raw="The sequence to compare to the end of the source span.">要与源跨度的结尾进行比较的序列。</param>
      <typeparam name="T" vsli:raw="The type of the span.">范围的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the end of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 与 <paramref name="span" /> 的结尾匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether the specified sequence appears at the end of a span.">确定指定的序列是否出现在跨度的结尾。</summary>
      <param name="span" vsli:raw="The source span.">源跨度。</param>
      <param name="value" vsli:raw="The sequence to compare to the end of the source span.">要与源跨度的结尾进行比较的序列。</param>
      <typeparam name="T" vsli:raw="The type of the span.">范围的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the end of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 与 <paramref name="span" /> 的结尾匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.EnumerateRunes(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Returns an enumeration of &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; from the provided read-only span.">从提供的只读跨度返回 <see cref="T:System.Text.Rune" /> 的枚举。</summary>
      <param name="span" vsli:raw="The source span.">源跨度。</param>
      <returns vsli:raw="A rune enumerator.">Rune 枚举器。</returns>
    </member>
    <member name="M:System.MemoryExtensions.EnumerateRunes(System.Span{System.Char})">
      <summary vsli:raw="Returns an enumeration of &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; from the provided span.">从提供的跨度返回 <see cref="T:System.Text.Rune" /> 的枚举。</summary>
      <param name="span" vsli:raw="The source span.">源跨度。</param>
      <returns vsli:raw="A rune enumerator.">Rune 枚举器。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Equals(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Determines whether this &lt;paramref name=&quot;span&quot; /&gt; and the specified &lt;paramref name=&quot;other&quot; /&gt; span have the same characters when compared using the specified &lt;paramref name=&quot;comparisonType&quot; /&gt; option.">使用指定的 <paramref name="comparisonType" /> 选项进行比较时，确定此 <paramref name="span" /> 和指定的 <paramref name="other" /> 跨度是否具有相同的字符。</summary>
      <param name="span" vsli:raw="The source span.">源跨度。</param>
      <param name="other" vsli:raw="The value to compare with the source span.">要与源跨度进行比较的值。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt; are compared.">用于确定如何比较 <paramref name="span" /> 和 <paramref name="other" /> 的枚举值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if equal, &lt;see langword=&quot;false&quot; /&gt; otherwise.">如果相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Reports the zero-based index of the first occurrence of the specified &lt;paramref name=&quot;value&quot; /&gt; in the current &lt;paramref name=&quot;span&quot; /&gt;.">报告当前 <paramref name="span" /> 中第一次出现的指定 <paramref name="value" /> 的从零开始的索引。</summary>
      <param name="span" vsli:raw="The source span.">源跨度。</param>
      <param name="value" vsli:raw="The value to seek within the source span.">要在源跨度中查找的值。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">用于确定如何比较 <paramref name="span" /> 和 <paramref name="value" /> 的枚举值。</param>
      <returns vsli:raw="The index of the occurrence of the value in the span.">跨度中的值出现的索引。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">搜索指定值并返回其第一次出现的索引。 使用 IEquatable{T}.Equals(T) 比较各值。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value" vsli:raw="The value to search for.">要搜索的值。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">范围和值的类型。</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">跨度中的值出现的索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">搜索指定的序列并返回其第一次出现的索引。 使用 IEquatable{T}.Equals(T) 比较各值。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value" vsli:raw="The sequence to search for.">要搜索的序列。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">范围和值的类型。</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">跨度中的值出现的索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">搜索指定值并返回其第一次出现的索引。 使用 IEquatable{T}.Equals(T) 比较各值。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value" vsli:raw="The value to search for.">要搜索的值。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">范围和值的类型。</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">跨度中的值出现的索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">搜索指定的序列并返回其第一次出现的索引。 使用 IEquatable{T}.Equals(T) 比较各值。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value" vsli:raw="The sequence to search for.">要搜索的序列。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">范围和值的类型。</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">跨度中的值出现的索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">搜索任何指定值的第一个索引，其方式类似于使用逻辑 OR 运算符多次调用 IndexOf。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value0" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <param name="value1" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">范围和值的类型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">跨度中任何值出现的第一个索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">搜索任何指定值的第一个索引，其方式类似于使用逻辑 OR 运算符多次调用 IndexOf。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value0" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <param name="value1" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <param name="value2" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">范围和值的类型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">跨度中任何值出现的第一个索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">搜索任何指定值的第一个索引，其方式类似于使用逻辑 OR 运算符多次调用 IndexOf。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="values" vsli:raw="The set of values to search for.">要搜索的值集。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">范围和值的类型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">跨度中任何值出现的第一个索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">搜索任何指定值的第一个索引，其方式类似于使用逻辑 OR 运算符多次调用 IndexOf。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value0" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <param name="value1" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">范围和值的类型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">跨度中任何值出现的第一个索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">搜索任何指定值的第一个索引，其方式类似于使用逻辑 OR 运算符多次调用 IndexOf。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value0" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <param name="value1" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <param name="value2" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">范围和值的类型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">跨度中任何值出现的第一个索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">搜索任何指定值的第一个索引，其方式类似于使用逻辑 OR 运算符多次调用 IndexOf。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="values" vsli:raw="The set of values to search for.">要搜索的值集。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">范围和值的类型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">跨度中任何值出现的第一个索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IsWhiteSpace(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Indicates whether the specified span contains only whitespace characters.">指示指定的跨度是否仅包含空格字符。</summary>
      <param name="span" vsli:raw="The source span.">源跨度。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span contains only whitespace characters, &lt;see langword=&quot;false&quot; /&gt; otherwise.">如果跨度仅包含空格字符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Reports the zero-based index of the last occurrence of the specified &lt;paramref name=&quot;value&quot; /&gt; in the current &lt;paramref name=&quot;span&quot; /&gt;.">报告当前 <paramref name="span" /> 中最后一次出现的指定 <paramref name="value" /> 的从零开始的索引。</summary>
      <param name="span" vsli:raw="The source span.">源跨度。</param>
      <param name="value" vsli:raw="The value to seek within the source span.">要在源跨度中查找的值。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">用于确定如何比较 <paramref name="span" /> 和 <paramref name="value" /> 的枚举值。</param>
      <returns vsli:raw="The index of the last occurrence of the value in the span.">跨度中最后一次出现的值的索引。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">搜索指定值并返回其最后一次出现的索引。 使用 IEquatable{T}.Equals(T) 比较各值。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value" vsli:raw="The value to search for.">要搜索的值。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">范围和值的类型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">跨度中最后一次出现的值的索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">搜索指定的序列并返回其最后一次出现的索引。 使用 IEquatable{T}.Equals(T) 比较各值。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value" vsli:raw="The sequence to search for.">要搜索的序列。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">范围和值的类型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">跨度中最后一次出现的值的索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">搜索指定值并返回其最后一次出现的索引。 使用 IEquatable{T}.Equals(T) 比较各值。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value" vsli:raw="The value to search for.">要搜索的值。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">范围和值的类型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">跨度中最后一次出现的值的索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">搜索指定的序列并返回其最后一次出现的索引。 使用 IEquatable{T}.Equals(T) 比较各值。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value" vsli:raw="The sequence to search for.">要搜索的序列。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">范围和值的类型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">跨度中最后一次出现的值的索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">搜索任何指定值的最后一个索引，其方式类似于使用逻辑 OR 运算符多次调用 LastIndexOf。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value0" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <param name="value1" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">范围和值的类型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">跨度中最后一次出现的任何值的索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">搜索任何指定值的最后一个索引，其方式类似于使用逻辑 OR 运算符多次调用 LastIndexOf。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value0" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <param name="value1" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <param name="value2" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">范围和值的类型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">跨度中最后一次出现的任何值的索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">搜索任何指定值的最后一个索引，其方式类似于使用逻辑 OR 运算符多次调用 LastIndexOf。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="values" vsli:raw="The set of values to search for.">要搜索的值集。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">范围和值的类型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">跨度中最后一次出现的任何值的索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">搜索任何指定值的最后一个索引，其方式类似于使用逻辑 OR 运算符多次调用 LastIndexOf。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value0" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <param name="value1" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">范围和值的类型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">跨度中最后一次出现的任何值的索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">搜索任何指定值的最后一个索引，其方式类似于使用逻辑 OR 运算符多次调用 LastIndexOf。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value0" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <param name="value1" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <param name="value2" vsli:raw="One of the values to search for.">要搜索的其中某个值。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">范围和值的类型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">跨度中最后一次出现的任何值的索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">搜索任何指定值的最后一个索引，其方式类似于使用逻辑 OR 运算符多次调用 LastIndexOf。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="values" vsli:raw="The set of values to search for.">要搜索的值集。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">范围和值的类型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">跨度中最后一次出现的任何值的索引。 如果未找到，则返回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether two read-only sequences overlap in memory.">确定两个只读序列是否在内存中重叠。</summary>
      <param name="span" vsli:raw="The first sequence.">第一个序列。</param>
      <param name="other" vsli:raw="The second sequence.">第二个序列。</param>
      <typeparam name="T" vsli:raw="The type of elements in the read-only sequence.">只读序列中要的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个序列重叠，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32@)">
      <summary vsli:raw="Determines whether two read-only sequences overlap in memory and outputs the element offset.">确定两个只读序列是否在内存中重叠且输出元素偏移。</summary>
      <param name="span" vsli:raw="The first sequence.">第一个序列。</param>
      <param name="other" vsli:raw="The second sequence.">第二个序列。</param>
      <param name="elementOffset" vsli:raw="When the method returns, contains the offset between &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;." />
      <typeparam name="T" vsli:raw="The type of elements in the span.">范围中元素的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个序列重叠，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a span and a read-only span overlap in memory.">确定跨度和只读跨度是否在内存中重叠。</summary>
      <param name="span" vsli:raw="The span to compare.">要比较的跨度。</param>
      <param name="other" vsli:raw="The read-only span to compare.">要比较的只读跨度。</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">范围中元素的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个序列重叠，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)">
      <summary vsli:raw="Determines whether a span and a read-only span overlap in memory and outputs the element offset.">确定跨度和只读跨度是否在内存中重叠且输出元素偏移。</summary>
      <param name="span" vsli:raw="The first sequence to compare.">要比较的第一个序列。</param>
      <param name="other" vsli:raw="The second sequence to compare.">要比较的第二个序列。</param>
      <param name="elementOffset" vsli:raw="When the method returns, contains the offset between &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;.">方法返回时，包含 <paramref name="span" /> 和 <paramref name="other" /> 之间的偏移。</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">范围中元素的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个序列重叠，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Reverse``1(System.Span{``0})">
      <summary vsli:raw="Reverses the sequence of the elements in the entire span.">反转整个跨度中元素的序列。</summary>
      <param name="span" vsli:raw="The span to reverse.">要反转的跨度。</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">范围中元素的类型。</typeparam>
    </member>
    <member name="M:System.MemoryExtensions.SequenceCompareTo``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines the relative order of two read-only sequences by comparing their elements using IComparable{T}.CompareTo(T).">通过使用 IComparable{T}.CompareTo(T) 比较它们的元素，确定两个只读序列的相对顺序。</summary>
      <param name="span" vsli:raw="The first sequence to compare.">要比较的第一个序列。</param>
      <param name="other" vsli:raw="The second sequence to compare.">要比较的第二个序列。</param>
      <typeparam name="T" vsli:raw="The type of elements in the sequence.">序列中的元素的类型。</typeparam>
      <returns vsli:raw="A signed integer that indicates the relative order of &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;:&lt;br /&gt;   - If less than 0, &lt;paramref name=&quot;span&quot; /&gt; precedes than &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If 0, &lt;paramref name=&quot;span&quot; /&gt; equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If greater than 0, &lt;paramref name=&quot;span&quot; /&gt; follows &lt;paramref name=&quot;other&quot; /&gt;.">一个带符号整数，表示 <paramref name="span" /> 和<paramref name="other" /> 的相对顺序：   - 如果小于 0，则 <paramref name="span" /> 在 <paramref name="other" /> 之前。   - 如果为 0，则 <paramref name="span" /> 等于 <paramref name="other" />。   - 如果大于 0，则 <paramref name="span" /> 在 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceCompareTo``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines the relative order of a span and a read-only span by comparing the elements using IComparable{T}.CompareTo(T).">通过使用 IComparable{T}.CompareTo(T) 比较它们的元素，确定跨度和只读跨度的相对顺序。</summary>
      <param name="span" vsli:raw="The span to compare.">要比较的跨度。</param>
      <param name="other" vsli:raw="The read-only span to compare.">要比较的只读跨度。</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">范围中元素的类型。</typeparam>
      <returns vsli:raw="A signed integer that indicates the relative order of &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;:&lt;br /&gt;   - If less than 0, &lt;paramref name=&quot;span&quot; /&gt; precedes than &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If 0, &lt;paramref name=&quot;span&quot; /&gt; equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If greater than 0, &lt;paramref name=&quot;span&quot; /&gt; follows &lt;paramref name=&quot;other&quot; /&gt;.">一个带符号整数，表示 <paramref name="span" /> 和<paramref name="other" /> 的相对顺序：   - 如果小于 0，则 <paramref name="span" /> 在 <paramref name="other" /> 之前。   - 如果为 0，则 <paramref name="span" /> 等于 <paramref name="other" />。   - 如果大于 0，则 <paramref name="span" /> 在 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether two read-only sequences are equal by comparing the elements using IEquatable{T}.Equals(T).">通过使用 IEquatable{T}.Equals(T) 比较元素，确定两个只读序列是否相等。</summary>
      <param name="span" vsli:raw="The first sequence to compare.">要比较的第一个序列。</param>
      <param name="other" vsli:raw="The second sequence to compare.">要比较的第二个序列。</param>
      <typeparam name="T" vsli:raw="The type of elements in the sequence.">序列中的元素的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个序列相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a span and a read-only span are equal by comparing the elements using IEquatable{T}.Equals(T).">通过使用 IEquatable{T}.Equals(T) 比较元素，确定跨度和只读跨度是否相等。</summary>
      <param name="span" vsli:raw="The span to compare.">要比较的跨度。</param>
      <param name="other" vsli:raw="The read-only span to compare.">要比较的只读跨度。</param>
      <typeparam name="T" vsli:raw="The type of elements in the sequence.">序列中的元素的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个序列相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Determines whether a read-only character span begins with a specified value when compared using a specified &lt;see cref=&quot;T:System.StringComparison&quot; /&gt; value.">使用指定的 <see cref="T:System.StringComparison" /> 值进行比较时，确定只读字符跨度是否以指定值开头。</summary>
      <param name="span" vsli:raw="The source span.">源跨度。</param>
      <param name="value" vsli:raw="The sequence to compare to the beginning of the source span.">要与源跨度的开头进行比较的序列。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">用于确定如何比较 <paramref name="span" /> 和 <paramref name="value" /> 的枚举值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the beginning of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 与 <paramref name="span" /> 的开头匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a specified sequence appears at the start of a read-only span.">确定指定的序列是否出现在只读跨度的开头。</summary>
      <param name="span" vsli:raw="The read-only character span to search.">要搜索的只读字符跨度。</param>
      <param name="value" vsli:raw="A sequence to search for at the start of &lt;paramref name=&quot;span&quot; /&gt;.">要在 <paramref name="span" /> 的开头搜索的序列。</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">范围中元素的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the beginning of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 与 <paramref name="span" /> 的开头匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a specified sequence appears at the start of a span.">确定指定的序列是否出现在跨度的开头。</summary>
      <param name="span" vsli:raw="The span to search.">要搜索的跨度。</param>
      <param name="value" vsli:raw="A sequence to search for at the start of &lt;paramref name=&quot;span&quot; /&gt;.">要在 <paramref name="span" /> 的开头搜索的序列。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">范围中元素的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the beginning of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 与 <paramref name="span" /> 的开头匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.ToLower(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the specified culture.">请将源跨度中的字符复制到目标中，并使用指定区域性的大小写规则将每个字符都转换为小写。</summary>
      <param name="source" vsli:raw="The source span.">源跨度。</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">包含转换后的字符的目标跨度。</param>
      <param name="culture" vsli:raw="An object that supplies culture-specific casing rules.">一个对象，用于提供区域性特定的大小写规则。</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">写入目标跨度的字符数。 如果目标太小，则返回 -1。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">源和目标缓冲区重叠。</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToLowerInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the invariant culture.">请将源跨度中的字符复制到目标中，并使用固定区域性的大小写规则将每个字符都转换为小写。</summary>
      <param name="source" vsli:raw="The source span.">源跨度。</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">包含转换后的字符的目标跨度。</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">写入目标跨度的字符数。 如果目标太小，则返回 -1。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">源和目标缓冲区重叠。</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToUpper(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to uppercase, using the casing rules of the specified culture.">请将源跨度中的字符复制到目标中，并使用指定区域性的大小写规则将每个字符都转换为大写。</summary>
      <param name="source" vsli:raw="The source span.">源跨度。</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">包含转换后的字符的目标跨度。</param>
      <param name="culture" vsli:raw="An object that supplies culture-specific casing rules.">一个对象，用于提供区域性特定的大小写规则。</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">写入目标跨度的字符数。 如果目标太小，则返回 -1。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">源和目标缓冲区重叠。</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToUpperInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to uppercase using the casing rules of the invariant culture.">请将源跨度中的字符复制到目标中，并使用固定区域性的大小写规则将每个字符都转换为大写。</summary>
      <param name="source" vsli:raw="The source span.">源跨度。</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">包含转换后的字符的目标跨度。</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">写入目标跨度的字符数。 如果目标太小，则返回 -1。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">源和目标缓冲区重叠。</exception>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.Memory{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a character memory region.">删除字符内存区域中的所有前导和尾随空格字符。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">从中删除字符的源内存。</param>
      <returns vsli:raw="The trimmed character memory region.">剪裁后的字符内存区域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlyMemory{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a read-only character memory region.">删除只读字符内存区域中的所有前导和尾随空格字符。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">从中删除字符的源内存。</param>
      <returns vsli:raw="The trimmed character memory region.">剪裁后的字符内存区域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a read-only character span.">删除只读字符跨度中的所有前导和尾随空格字符。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">从中删除字符的源跨度。</param>
      <returns vsli:raw="The trimmed read-only character span.">剪裁后的只读字符范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.Char)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified character from a read-only character span.">删除只读字符跨度中的指定字符的所有前导和尾随出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the character is removed.">从中删除字符的源跨度。</param>
      <param name="trimChar" vsli:raw="The specified character to look for and remove.">要查找和删除的指定字符。</param>
      <returns vsli:raw="The trimmed read-only character span.">剪裁后的只读字符范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of characters specified in a read-only span from a read-only character span.">从只读字符跨度中删除在只读跨度中指定的一组字符的所有前导和尾随出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">从中删除字符的源跨度。</param>
      <param name="trimChars" vsli:raw="The span which contains the set of characters to remove.">包含要删除的字符集的跨度。</param>
      <returns vsli:raw="The trimmed read-only character span.">剪裁后的只读字符范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.Span{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a character span.">删除字符跨度中的所有前导和尾随空格字符。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">从中删除字符的源跨度。</param>
      <returns vsli:raw="The trimmed character span.">剪裁后的字符范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Memory{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a memory region.">删除内存区域中的指定元素的所有前导和尾随出现次数。</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">从中删除元素的源内存。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要查找和删除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">内存区域中的元素的类型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">剪裁后的内存区域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a memory region.">从内存区域中删除在只读跨度中指定的一组元素的所有前导和尾随出现次数。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">从中删除元素的源内存。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">包含要删除的元素集的跨度。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">内存区域中的元素的类型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">剪裁后的内存区域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a read-only memory region.">删除只读内存区域中的指定元素的所有前导和尾随出现次数。</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">从中删除元素的源内存。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要查找和删除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">只读内存区域中的元素的类型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">剪裁后的只读内存区域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a read-only memory region.">从只读内存区域中删除在只读跨度中指定的一组元素的所有前导和尾随出现次数。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">从中删除元素的源内存。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">包含要删除的元素集的跨度。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">只读内存区域中的元素的类型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">剪裁后的只读内存区域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a read-only span.">删除只读跨度中的指定元素的所有前导和尾随出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">从中删除元素的源跨度。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要查找和删除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">只读范围中元素的类型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">剪裁后的只读范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a read-only span.">从只读跨度中删除在只读跨度中指定的一组元素的所有前导和尾随出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">从中删除元素的源跨度。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">包含要删除的元素集的跨度。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">只读范围中元素的类型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">剪裁后的只读范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Span{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a span.">删除跨度中的指定元素的所有前导和尾随出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">从中删除元素的源跨度。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要查找和删除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">范围中元素的类型。</typeparam>
      <returns vsli:raw="The trimmed span.">剪裁后的范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a span.">从跨度中删除在只读跨度中指定的一组元素的所有前导和尾随出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">从中删除元素的源跨度。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">包含要删除的元素集的跨度。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">范围中元素的类型。</typeparam>
      <returns vsli:raw="The trimmed span.">剪裁后的范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.Memory{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a character memory region.">删除字符内存区域中的所有前导空格字符。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">从中删除字符的源内存。</param>
      <returns vsli:raw="The trimmed character memory region.">剪裁后的字符内存区域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlyMemory{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a read-only character memory region.">删除只读字符内存区域中的所有前导空格字符。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">从中删除字符的源内存。</param>
      <returns vsli:raw="The trimmed read-only character span.">剪裁后的只读字符范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a read-only character span.">删除只读字符跨度中的所有前导空格字符。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">从中删除字符的源跨度。</param>
      <returns vsli:raw="The trimmed read-only character span.">剪裁后的只读字符范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.Char)">
      <summary vsli:raw="Removes all trailing occurrences of a specified character from a read-only span.">删除只读跨度中的指定字符的所有尾随出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the character is removed.">从中删除字符的源跨度。</param>
      <param name="trimChar" vsli:raw="The specified character to look for and remove.">要查找和删除的指定字符。</param>
      <returns vsli:raw="The trimmed read-only character span.">剪裁后的只读字符范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all trailing occurrences of a set of characters specified in a read-only span from a read-only character span.">从只读字符跨度中删除在只读跨度中指定的一组字符的所有尾随出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">从中删除字符的源跨度。</param>
      <param name="trimChars" vsli:raw="The span which contains the set of characters to remove.">包含要删除的字符集的跨度。</param>
      <returns vsli:raw="The trimmed read-only character span.">剪裁后的只读字符范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.Span{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a character span.">删除字符跨度中的所有前导空格字符。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">从中删除字符的源跨度。</param>
      <returns vsli:raw="The trimmed character span.">剪裁后的字符范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a character memory region.">删除字符内存区域中的指定元素的所有尾随出现次数。</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">从中删除元素的源内存。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要查找和删除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">内存区域中的元素的类型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">剪裁后的内存区域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a memory region.">从内存区域中删除在只读跨度中指定的一组元素的所有尾随出现次数。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">从中删除元素的源内存。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">包含要删除的元素集的跨度。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">内存区域中的元素的类型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">剪裁后的内存区域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a read-only memory region.">删除只读内存区域中的指定元素的所有尾随出现次数。</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">从中删除元素的源内存。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要查找和删除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">只读内存区域中的元素的类型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">剪裁后的只读内存区域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a read-only memory region.">从只读内存区域中删除在只读跨度中指定的一组元素的所有尾随出现次数。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">从中删除元素的源内存。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">包含要删除的元素集的跨度。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">只读内存区域中的元素的类型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">剪裁后的只读内存区域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a read-only span.">删除只读跨度中的指定元素的所有尾随出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">从中删除元素的源跨度。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要查找和删除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">只读范围中元素的类型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">剪裁后的只读范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a read-only span.">从只读跨度中删除在只读跨度中指定的一组元素的所有尾随出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">从中删除元素的源跨度。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">包含要删除的元素集的跨度。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">只读范围中元素的类型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">剪裁后的只读范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a span.">删除跨度中的指定元素的所有尾随出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">从中删除元素的源跨度。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要查找和删除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">范围中元素的类型。</typeparam>
      <returns vsli:raw="The trimmed span.">剪裁后的范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a span.">从跨度中删除在只读跨度中指定的一组元素的所有尾随出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">从中删除元素的源跨度。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">包含要删除的元素集的跨度。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">范围中元素的类型。</typeparam>
      <returns vsli:raw="The trimmed span.">剪裁后的范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.Memory{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a memory region.">删除内存区域中的所有前导空格字符。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">从中删除字符的源内存。</param>
      <returns vsli:raw="The trimmed character memory region.">剪裁后的字符内存区域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlyMemory{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a read-only memory region.">删除只读内存区域中的所有前导空格字符。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">从中删除字符的源内存。</param>
      <returns vsli:raw="The trimmed read-only character memory region.">剪裁后的只读字符内存区域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a read-only span.">删除只读跨度中的所有前导空格字符。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">从中删除字符的源跨度。</param>
      <returns vsli:raw="The trimmed read-only character span.">剪裁后的只读字符范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.Char)">
      <summary vsli:raw="Removes all leading occurrences of a specified character from the span.">删除跨度中的指定字符的所有前导出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the character is removed.">从中删除字符的源跨度。</param>
      <param name="trimChar" vsli:raw="The specified character to look for and remove.">要查找和删除的指定字符。</param>
      <returns vsli:raw="The trimmed read-only character span.">剪裁后的只读字符范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading occurrences of a set of characters specified in a read-only span from the span.">从跨度中删除在只读跨度中指定的一组字符的所有前导出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">从中删除字符的源跨度。</param>
      <param name="trimChars" vsli:raw="The span which contains the set of characters to remove.">包含要删除的字符集的跨度。</param>
      <returns vsli:raw="The trimmed read-only character span.">剪裁后的只读字符范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.Span{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a span.">删除跨度中的所有前导空格字符。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">从中删除字符的源跨度。</param>
      <returns vsli:raw="The trimmed character span.">剪裁后的字符范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from a memory region.">删除内存区域中的指定元素的所有前导出现次数。</summary>
      <param name="memory" vsli:raw="The source memory region from which the element is removed.">从中删除元素的源内存区域。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要查找和删除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">内存区域中的元素的类型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">剪裁后的内存区域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from a memory region.">从内存区域中删除在只读跨度中指定的一组元素的所有前导出现次数。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">从中删除元素的源内存。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">包含要删除的元素集的跨度。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">内存区域中的元素的类型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">剪裁后的内存区域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from a memory region.">删除内存区域中的指定元素的所有前导出现次数。</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">从中删除元素的源内存。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要查找和删除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">只读内存区域中的元素的类型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">剪裁后的只读内存区域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from a memory region.">从内存区域中删除在只读跨度中指定的一组元素的所有前导出现次数。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">从中删除元素的源内存。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">包含要删除的元素集的跨度。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">只读内存区域中的元素的类型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">剪裁后的只读内存区域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from the span.">删除跨度中的指定元素的所有前导出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">从中删除元素的源跨度。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要查找和删除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">只读范围中元素的类型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">剪裁后的只读范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from the span.">从跨度中删除在只读跨度中指定的一组元素的所有前导出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">从中删除元素的源跨度。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">包含要删除的元素集的跨度。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">只读范围中元素的类型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">剪裁后的只读范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from the span.">删除跨度中的指定元素的所有前导出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">从中删除元素的源跨度。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要查找和删除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">范围中元素的类型。</typeparam>
      <returns vsli:raw="The trimmed span.">剪裁后的范围。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from the span.">从跨度中删除在只读跨度中指定的一组元素的所有前导出现次数。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">从中删除元素的源跨度。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">包含要删除的元素集的跨度。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">范围中元素的类型。</typeparam>
      <returns vsli:raw="The trimmed span.">剪裁后的范围。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MemoryMarshal">
      <summary vsli:raw="Provides methods to interoperate with &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;, &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;,  &lt;see cref=&quot;T:System.Span`1&quot; /&gt;, and  &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt;.">提供与 <see cref="T:System.Memory`1" />、<see cref="T:System.ReadOnlyMemory`1" />、<see cref="T:System.Span`1" /> 和 <see cref="T:System.ReadOnlySpan`1" /> 进行交互操作的方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})">
      <summary vsli:raw="Casts a &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; of one primitive type, &lt;paramref name=&quot;T&quot; /&gt;, to a &lt;see langword=&quot;ReadOnlySpan&amp;lt;Byte&amp;gt;&quot; /&gt;.">将一种基元类型 <see cref="T:System.ReadOnlySpan`1" /> 的 <paramref name="T" /> 强制转换为 <see langword="ReadOnlySpan&lt;Byte&gt;" />。</summary>
      <param name="span" vsli:raw="The source slice to convert.">要转换的源切片。</param>
      <typeparam name="T" vsli:raw="The type of items in the read-only span.">只读范围内的项的类型。</typeparam>
      <returns vsli:raw="A read-only span of type &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">类型 <see cref="T:System.Byte" /> 的只读范围。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> 包含引用或指针。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt; property of the new &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; would exceed &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;">新 <see cref="P:System.ReadOnlySpan`1.Length" /> 的 <see cref="T:System.ReadOnlySpan`1" /> 属性将超过 <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})">
      <summary vsli:raw="Casts a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; of one primitive type, &lt;paramref name=&quot;T&quot; /&gt;, to a &lt;see langword=&quot;Span&amp;lt;Byte&amp;gt;&quot; /&gt;.">将一种基元类型 <see cref="T:System.Span`1" /> 的 <paramref name="T" /> 强制转换为 <see langword="Span&lt;Byte&gt;" />。</summary>
      <param name="span" vsli:raw="The source slice to convert.">要转换的源切片。</param>
      <typeparam name="T" vsli:raw="The type of items in the span.">范围中的项的类型。</typeparam>
      <returns vsli:raw="A span of type &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">类型 <see cref="T:System.Byte" /> 的范围。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> 包含引用或指针。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt; property of the new &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; would exceed &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;">新 <see cref="P:System.Span`1.Length" /> 的 <see cref="T:System.Span`1" /> 属性将超过 <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; instance from a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">通过 <see cref="T:System.Memory`1" /> 创建 <see cref="T:System.ReadOnlyMemory`1" /> 实例。</summary>
      <param name="memory" vsli:raw="The read-only memory buffer.">只读内存缓冲区。</param>
      <typeparam name="T" vsli:raw="The type of items in the read-only memory buffer.">只读内存缓冲区中的项的类型。</typeparam>
      <returns vsli:raw="A memory block that represents the same memory as the &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">表示与 <see cref="T:System.ReadOnlyMemory`1" /> 相同的内存的内存块。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reinterprets a read-only span of bytes as a read-only reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">将字节的只读跨度重新解释为对 <paramref name="T" /> 类型结构的只读引用。</summary>
      <param name="span" vsli:raw="The read-only span to reinterpret.">要重新解释的只读跨度。</param>
      <typeparam name="T" vsli:raw="The type of the returned reference.">返回的引用的类型。</typeparam>
      <returns vsli:raw="The read-only reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">对 <paramref name="T" /> 类型结构的只读引用。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.Span{System.Byte})">
      <summary vsli:raw="Reinterprets a span of bytes as a reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">将字节跨度重新解释为对 <paramref name="T" /> 类型结构的引用。</summary>
      <param name="span" vsli:raw="The span to reinterpret.">要重新解释的跨度。</param>
      <typeparam name="T" vsli:raw="The type of the returned reference.">返回的引用的类型。</typeparam>
      <returns vsli:raw="The reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">对 <paramref name="T" /> 类型结构的引用。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})">
      <summary vsli:raw="Casts a read-only span of one primitive type to a read-only span of another primitive type.">将一种基元类型的只读范围强制转换为另一种基元类型的只读范围。</summary>
      <param name="span" vsli:raw="The source slice to convert.">要转换的源切片。</param>
      <typeparam name="TFrom" vsli:raw="The type of the source span.">源范围的类型。</typeparam>
      <typeparam name="TTo" vsli:raw="The type of the target span.">目标范围的类型。</typeparam>
      <returns vsli:raw="The converted read-only span.">转换后的只读范围。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;TFrom&quot; /&gt; or &lt;paramref name=&quot;TTo&quot; /&gt; contains managed object references.">
        <paramref name="TFrom" /> 或 <paramref name="TTo" /> 包含引用或指针。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})">
      <summary vsli:raw="Casts a span of one primitive type to a span of another primitive type.">将一种基元类型的范围强制转换为另一种基元类型的范围。</summary>
      <param name="span" vsli:raw="The source slice to convert.">要转换的源切片。</param>
      <typeparam name="TFrom" vsli:raw="The type of the source span.">源范围的类型。</typeparam>
      <typeparam name="TTo" vsli:raw="The type of the target span.">目标范围的类型。</typeparam>
      <returns vsli:raw="The converted span.">转换后的范围。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;TFrom&quot; /&gt; or &lt;paramref name=&quot;TTo&quot; /&gt; contains managed object references.">
        <paramref name="TFrom" /> 或 <paramref name="TTo" /> 包含引用或指针。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new memory buffer over the portion of the pre-pinned target array beginning at the &lt;paramref name=&quot;start&quot; /&gt; index and consisting of &lt;paramref name=&quot;length&quot; /&gt; items.">从 <paramref name="start" /> 索引开始并包含 <paramref name="length" /> 项，在预固定目标数组的一部分之上创建新的内存缓冲区。</summary>
      <param name="array" vsli:raw="The pre-pinned source array.">预固定的源数组。</param>
      <param name="start" vsli:raw="The index of &lt;paramref name=&quot;array&quot; /&gt; at which to begin the memory block.">开始内存块的 <paramref name="array" /> 的索引。</param>
      <param name="length" vsli:raw="The number of items to include in the memory block.">要包括在内存块中的项数。</param>
      <typeparam name="T" vsli:raw="The type of the array.">数组的类型。</typeparam>
      <returns vsli:raw="A block of memory over the specified elements of &lt;paramref name=&quot;array&quot; /&gt;. If &lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or if &lt;paramref name=&quot;start&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are 0, the method returns a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; instance of &lt;see cref=&quot;P:System.Memory`1.Length&quot; /&gt; zero.">
        <paramref name="array" /> 的指定元素之上的内存块。 如果 <paramref name="array" /> 是 <see langword="null" />，或者如果 <paramref name="start" /> 和 <paramref name="length" /> 为 0，则此方法将返回 <see cref="T:System.Memory`1" /> 为零的 <see cref="P:System.Memory`1.Length" /> 实例。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the type of &lt;paramref name=&quot;array&quot; /&gt; is not exactly &lt;paramref name=&quot;T[]&quot; /&gt;.">
        <paramref name="array" /> 是协变，<paramref name="array" /> 的类型并不是 <paramref name="T[]" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;start&quot; /&gt; or the end index is not in the range of 0 to &lt;see cref=&quot;P:System.Array.Length&quot; /&gt;.">
        <paramref name="start" /> 或结束索引不在 0 到 <see cref="P:System.Array.Length" /> 的范围内。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)">
      <summary vsli:raw="Creates a new read-only span over a portion of a regular managed object.">在常规托管对象的一个部分上创建新的只读范围。</summary>
      <param name="reference" vsli:raw="A reference to data.">对数据的引用。</param>
      <param name="length" vsli:raw="The number of &lt;paramref name=&quot;T&quot; /&gt; elements that &lt;paramref name=&quot;reference&quot; /&gt; contains.">
        <paramref name="T" /> 包含的 <paramref name="reference" /> 元素数。</param>
      <typeparam name="T" vsli:raw="The type of the data items.">数据项的类型。</typeparam>
      <returns vsli:raw="A read-only span.">只读范围。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of a regular managed object.">在常规托管对象的一个部分上创建新的范围。</summary>
      <param name="reference" vsli:raw="A reference to data.">对数据的引用。</param>
      <param name="length" vsli:raw="The number of &lt;paramref name=&quot;T&quot; /&gt; elements that &lt;paramref name=&quot;reference&quot; /&gt; contains.">
        <paramref name="T" /> 包含的 <paramref name="reference" /> 元素数。</param>
      <typeparam name="T" vsli:raw="The type of the data items.">数据项的类型。</typeparam>
      <returns vsli:raw="A span.">范围。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})">
      <summary vsli:raw="Returns a reference to the element of the read-only span at index 0.">返回对索引为 0 处只读范围元素的引用。</summary>
      <param name="span" vsli:raw="The read-only span from which the reference is retrieved.">从中检索引用的只读范围。</param>
      <typeparam name="T" vsli:raw="The type of items in the span.">范围中的项的类型。</typeparam>
      <returns vsli:raw="A reference to the element at index 0.">对索引为 0 处元素的引用。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})">
      <summary vsli:raw="Returns a reference to the element of the span at index 0.">返回对索引为 0 处范围元素的引用。</summary>
      <param name="span" vsli:raw="The span from which the reference is retrieved.">从中检索引用的范围。</param>
      <typeparam name="T" vsli:raw="The type of items in the span.">范围中的项的类型。</typeparam>
      <returns vsli:raw="A reference to the element at index 0.">对索引为 0 处元素的引用。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a structure of type &lt;typeparamref name=&quot;T&quot; /&gt; out of a read-only span of bytes.">读取类型的结构 <param name="T" /> 字节的只读范围之外。</summary>
      <param name="source" vsli:raw="A read-only span.">只读范围。</param>
      <typeparam name="T" vsli:raw="The type of the item to retrieve from the read-only span.">要从只读范围中检索的项的类型。</typeparam>
      <returns vsli:raw="The structure retrieved from the read-only span.">从只读范围中检索的结构。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> 包含引用或指针。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is smaller than &lt;paramref name=&quot;T&quot; /&gt;'s length in bytes.">
        <paramref name="source" /> 小于 <paramref name="T" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; view of the given read-only memory buffer.">创建给定的只读内存缓冲区的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 视图。</summary>
      <param name="memory" vsli:raw="A read-only memory buffer.">只读内存缓冲区。</param>
      <typeparam name="T" vsli:raw="The type of the items in the read-only memory buffer.">只读内存缓冲区中的项的类型。</typeparam>
      <returns vsli:raw="An enumerable view of &lt;paramref name=&quot;memory&quot; /&gt;.">
        <paramref name="memory" /> 的可枚举视图。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)">
      <summary vsli:raw="Tries to get an array segment from the underlying memory buffer. The return value indicates the success of the operation.">尝试从基础内存缓冲区获取数组段。 返回值指示操作是否成功。</summary>
      <param name="memory" vsli:raw="A read-only memory buffer.">只读内存缓冲区。</param>
      <param name="segment" vsli:raw="When this method returns, contains the array segment retrieved from the underlying read-only memory buffer. If the method fails, the method returns a default array segment.">此方法返回时，将包含从基础只读内存缓冲区中检索的数组段。 如果此方法失败，则将返回默认数组段。</param>
      <typeparam name="T" vsli:raw="The type of items in the read-only memory buffer.">只读内存缓冲区中的项的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method call succeeds; &lt;see langword=&quot;false&quot; /&gt; otherwise.">如果方法调用成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)">
      <summary vsli:raw="Tries to retrieve a &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt; from the underlying read-only memory buffer.">尝试从基础只读内存缓冲区中检索 <see cref="T:System.Buffers.MemoryManager`1" />。</summary>
      <param name="memory" vsli:raw="The read-only memory buffer for which to get the memory manager.">为其获取内存管理器的只读内存缓冲区。</param>
      <param name="manager" vsli:raw="When the method returns, the manager of &lt;paramref name=&quot;memory&quot; /&gt;.">此方法返回时，为 <paramref name="memory" /> 管理器。</param>
      <typeparam name="T" vsli:raw="The type of the items in the read-only memory buffer.">只读内存缓冲区中的项的类型。</typeparam>
      <typeparam name="TManager" vsli:raw="The type of the &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt; to retrieve.">要检索的 <see cref="T:System.Buffers.MemoryManager`1" /> 的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method retrieved the memory manager; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此方法检索到内存管理器，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)">
      <summary vsli:raw="Tries to retrieve a &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt;, start index, and length from the underlying read-only memory buffer.">尝试从基础只读内存缓冲区中检索 <see cref="T:System.Buffers.MemoryManager`1" />、起始索引和长度。</summary>
      <param name="memory" vsli:raw="The read-only memory buffer for which to get the memory manager.">为其获取内存管理器的只读内存缓冲区。</param>
      <param name="manager" vsli:raw="When the method returns, the manager of &lt;paramref name=&quot;memory&quot; /&gt;.">此方法返回时，为 <paramref name="memory" /> 管理器。</param>
      <param name="start" vsli:raw="When the method returns, the offset from the start of the &lt;paramref name=&quot;manager&quot; /&gt; that the &lt;paramref name=&quot;memory&quot; /&gt; represents.">此方法返回时，距离 <paramref name="manager" /> 表示的 <paramref name="memory" /> 的开头的偏移量。</param>
      <param name="length" vsli:raw="When the method returns, the length of the &lt;paramref name=&quot;manager&quot; /&gt; that the &lt;paramref name=&quot;memory&quot; /&gt; represents.">此方法返回时，<paramref name="manager" /> 表示的 <paramref name="memory" /> 的长度。</param>
      <typeparam name="T" vsli:raw="The type of the items in the read-only memory buffer.">只读内存缓冲区中的项的类型。</typeparam>
      <typeparam name="TManager" vsli:raw="The type of the &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt; to retrieve.">要检索的 <see cref="T:System.Buffers.MemoryManager`1" /> 的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeded; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此方法成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)">
      <summary vsli:raw="Tries to get the underlying string from a &lt;see langword=&quot;System.ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt;.">尝试从 <see langword="System.ReadOnlyMemory&lt;Char&gt;" /> 中获取基础字符串。</summary>
      <param name="memory" vsli:raw="Read-only memory containing a block of characters.">包含字符块的只读内存。</param>
      <param name="text" vsli:raw="When the method returns, the string contained in the memory buffer.">此方法返回时，字符串将包含在内存缓冲区中。</param>
      <param name="start" vsli:raw="The starting location in &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="text" /> 中的起始位置。</param>
      <param name="length" vsli:raw="The number of characters in &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="text" /> 中的字符数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method successfully retrieves the underlying string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此方法成功检索到基础字符串，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)">
      <summary vsli:raw="Tries to read a structure of type &lt;paramref name=&quot;T&quot; /&gt; from a read-only span of bytes.">尝试从字节的只读范围中读取 <paramref name="T" /> 类型的结构。</summary>
      <param name="source" vsli:raw="A read-only span of bytes.">字节的只读范围。</param>
      <param name="value" vsli:raw="When the method returns, an instance of &lt;paramref name=&quot;T&quot; /&gt;.">此方法返回时，为 <paramref name="T" /> 的实例。</param>
      <typeparam name="T" vsli:raw="The type of the structure to retrieve.">要检索的结构的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeds in retrieving an instance of the structure; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此方法成功检索到结构的实例，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> 包含引用或指针。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)">
      <summary vsli:raw="Tries to write a structure of type &lt;paramref name=&quot;T&quot; /&gt; into a span of bytes.">尝试将类型为 <paramref name="T" /> 的结构写入到字节的跨度中。</summary>
      <param name="destination" vsli:raw="The span of bytes to contain the structure.">要包含结构的字节范围。</param>
      <param name="value" vsli:raw="The structure to be written to the span.">要写入到范围的结构。</param>
      <typeparam name="T" vsli:raw="The type of the structure.">结构的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the write operation succeeded; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The method returns &lt;see langword=&quot;false&quot; /&gt; if the span is too small to contain &lt;paramref name=&quot;T&quot; /&gt;.">如果写入操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。 如果范围太小无法包含 <see langword="false" />，则此方法返回 <paramref name="T" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> 包含引用或指针。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)">
      <summary vsli:raw="Writes a structure of type &lt;paramref name=&quot;T&quot; /&gt; into a span of bytes.">将 <paramref name="T" /> 类型的结构写入字节范围内。</summary>
      <param name="destination" vsli:raw="The span of bytes to contain the structure.">要包含结构的字节范围。</param>
      <param name="value" vsli:raw="The structure to be written to the span.">要写入到范围的结构。</param>
      <typeparam name="T" vsli:raw="The type of the structure.">结构的类型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> 包含引用或指针。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="destination" /> 太小，无法包含 <paramref name="value" />。</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SequenceMarshal">
      <summary vsli:raw="Provides a collection of methods for interoperating with &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">提供与 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 进行互操作的方法集合。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetArray``1(System.Buffers.ReadOnlySequence{``0},System.ArraySegment{``0}@)">
      <summary vsli:raw="Gets an array segment from the underlying read-only sequence.">获取基础只读序列中的数组段。</summary>
      <param name="sequence" vsli:raw="The read-only sequence from which the array segment will be retrieved.">要从中检索数组段的只读序列。</param>
      <param name="segment" vsli:raw="The returned array segment.">返回的数组段。</param>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">只读序列的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if it's possible to retrieve the array segment; otherwise, &lt;see langword=&quot;false&quot; /&gt; and a default array segment is returned.">如果可以检索数组段，则为 <see langword="true" />；否则为 <see langword="false" /> 且返回默认数组段。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlyMemory``1(System.Buffers.ReadOnlySequence{``0},System.ReadOnlyMemory{``0}@)">
      <summary vsli:raw="Attempts to retrieve a read-only memory from the specified read-only sequence.">尝试检索指定的只读序列中的只读内存。</summary>
      <param name="sequence" vsli:raw="The read-only sequence from which the memory will be retrieved.">要从中检索内存的只读序列。</param>
      <param name="memory" vsli:raw="The returned read-only memory of type T.">返回的类型为 T 的只读内存。</param>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">只读序列的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read-only memory can be retrieved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以检索只读内存，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlySequenceSegment``1(System.Buffers.ReadOnlySequence{``0},System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@,System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@)">
      <summary vsli:raw="Attempts to retrieve a read-only sequence segment from the specified read-only sequence.">尝试检索指定的只读序列中的只读序列段。</summary>
      <param name="sequence" vsli:raw="The read-only sequence from which the read-only sequence segment will be retrieved.">从中检索只读序列段的只读序列。</param>
      <param name="startSegment" vsli:raw="The beginning read-only sequence segment.">只读序列段的开头。</param>
      <param name="startIndex" vsli:raw="The initial position.">初始位置。</param>
      <param name="endSegment" vsli:raw="The ending read-only sequence segment.">只读序列段的结尾。</param>
      <param name="endIndex" vsli:raw="The final position.">最终位置。</param>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">只读序列的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read-only sequence segment can be retrieved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以检索只读序列段，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryRead``1(System.Buffers.SequenceReader{System.Byte}@,``0@)">
      <summary vsli:raw="Attempts to read the specified type out of the buffer. It's dangerous to use this method with arbitrary structs - see remarks for more information.">尝试读取缓冲区外的指定类型。 将此方法与任意结构一起使用不太安全 - 请参阅注释以获取详细信息。</summary>
      <param name="reader" vsli:raw="A reference to the sequence reader.">对序列读取器的引用。</param>
      <param name="value" vsli:raw="The returned value if the read was successful. &lt;paramref name=&quot;value&quot; /&gt; will be &lt;see langword=&quot;default&quot; /&gt; if failed (due to lack of space).">如果读取成功，则为返回值。 如果（由于空间不足）失败，<paramref name="value" /> 将为 <see langword="default" />。</param>
      <typeparam name="T" vsli:raw="The type of the value.">值的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read attempt was successful, &lt;see langword=&quot;false&quot; /&gt; otherwise.">如果读取尝试成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.SequencePosition">
      <summary vsli:raw="Represents a position in a non-contiguous set of memory. Properties of this type should not be interpreted by anything but the type that created it.">表示非连续内存集中的一个位置。 此类型的属性只能由创建它的类型来解释。</summary>
    </member>
    <member name="M:System.SequencePosition.#ctor(System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; struct.">初始化 <see cref="T:System.SequencePosition" /> 结构的新实例。</summary>
      <param name="object" vsli:raw="A non-contiguous set of memory.">一个非连续的内存集。</param>
      <param name="integer" vsli:raw="The position in &lt;paramref name=&quot;object&quot; /&gt;.">
        <paramref name="object" /> 中的位置。</param>
    </member>
    <member name="M:System.SequencePosition.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the current instance is equal to another object.">返回一个值，该值指示当前实例是否与另一个对象相等。</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">要与当前实例进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is of type &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; and is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="obj" /> 为 <see cref="T:System.SequencePosition" /> 类型，并且等于当前的实例，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.SequencePosition.Equals(System.SequencePosition)">
      <summary vsli:raw="Indicates whether the current instance is equal to another &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt;.">指示当前实例是否与另一个 <see cref="T:System.SequencePosition" /> 相等。</summary>
      <param name="other" vsli:raw="The sequence position to compare with the current instance.">要与当前实例进行比较的序列位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; &lt;see langword=&quot;false&quot; /&gt; otherwise.">如果这两个实例相等，则为 <see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.SequencePosition.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="The hash code for this instance.">此实例的哈希代码。</returns>
    </member>
    <member name="M:System.SequencePosition.GetInteger">
      <summary vsli:raw="Returns the integer part of this &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt;.">返回此 <see cref="T:System.SequencePosition" /> 的整数部分。</summary>
      <returns vsli:raw="The integer part of this sequence position.">此序列位置的整数部分。</returns>
    </member>
    <member name="M:System.SequencePosition.GetObject">
      <summary vsli:raw="Returns the object part of this &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt;.">返回此 <see cref="T:System.SequencePosition" /> 的对象部分。</summary>
      <returns vsli:raw="The object part of this sequence position.">此序列位置的对象部分。</returns>
    </member>
    <member name="T:System.Text.SpanRuneEnumerator">
      <summary vsli:raw="Provides an enumerator for the &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; values represented by a span containing UTF-16 text.">为由包含 UTF-16 文本的范围表示的 <see cref="T:System.Text.Rune" /> 值提供枚举器。</summary>
    </member>
    <member name="P:System.Text.SpanRuneEnumerator.Current">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; at the current position of the enumerator.">获取枚举数当前位置的 <see cref="T:System.Text.Rune" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Text.Rune" />位于枚举数当前位置的。</returns>
    </member>
    <member name="M:System.Text.SpanRuneEnumerator.GetEnumerator">
      <summary vsli:raw="Returns the current enumerator instance.">返回当前枚举器实例。</summary>
      <returns vsli:raw="The current enumerator instance.">当前枚举器实例。</returns>
    </member>
    <member name="M:System.Text.SpanRuneEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; of the span.">将枚举器推进到范围的下一个 <see cref="T:System.Text.Rune" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator successfully advanced to the next item; &lt;see langword=&quot;false&quot; /&gt; if the end of the span has been reached.">如果枚举器成功推进到下一项，则为 <see langword="true" />；如果已到达范围的末尾，则为 <see langword="false" />。</returns>
    </member>
  </members>
</doc>
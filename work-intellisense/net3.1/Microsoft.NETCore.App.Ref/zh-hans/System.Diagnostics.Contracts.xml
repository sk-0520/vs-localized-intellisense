<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Diagnostics.Contracts</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.Contracts.Contract">
      <summary vsli:raw="Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.">包含用于表示程序协定（如前置条件、后置条件和对象固定）的静态方法。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set for the analyzer.">检查条件；如果条件为 <see langword="false" />，则遵循为分析器设置的升级策略。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要测试的条件表达式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set by the analyzer and displays the specified message.">检查条件；如果条件为 <see langword="false" />，则遵循由分析器设置的升级策略，并显示指定的消息。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要测试的条件表达式。</param>
      <param name="userMessage" vsli:raw="A message to display if the condition is not met.">在不满足条件时要显示的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
      <summary vsli:raw="Instructs code analysis tools to assume that the specified condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;.">指示代码分析工具假设指定的条件为 <see langword="true" />（即使无法静态地证明该条件始终为 <see langword="true" />）。</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">假设为 <see langword="true" /> 的条件表达式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
      <summary vsli:raw="Instructs code analysis tools to assume that a condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;, and displays a message if the assumption fails.">指示代码分析工具假设某个条件为 <see langword="true" />（即使无法静态地证明该条件始终为 <see langword="true" />），并在假设失败时显示一条消息。</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">假设为 <see langword="true" /> 的条件表达式。</param>
      <param name="userMessage" vsli:raw="The message to post if the assumption fails.">假设失败时要发布的消息。</param>
    </member>
    <member name="E:System.Diagnostics.Contracts.Contract.ContractFailed">
      <summary vsli:raw="Occurs when a contract fails.">协定失败时发生。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
      <summary vsli:raw="Marks the end of the contract section when a method's contracts contain only preconditions in the &lt;see langword=&quot;if&quot; /&gt;-&lt;see langword=&quot;then&quot; /&gt;-&lt;see langword=&quot;throw&quot; /&gt; form.">当方法的协定仅包含 <see langword="if" />-<see langword="then" />-<see langword="throw" /> 形式的前置条件时，标记协定部分的结尾。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property.">为封闭方法或属性指定一个后置条件协定。</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt;, &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)&quot; /&gt;, and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">要测试的条件表达式。 该表达式可以包括 <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" />、<see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" /> 和 <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> 值。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract for a provided exit condition and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">为提供的退出条件指定后置条件协定，并指定条件为 <see langword="false" /> 时要显示的消息。</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt; and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">要测试的条件表达式。 该表达式可以包括 <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /> 和 <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> 值。</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is not &lt;see langword=&quot;true&quot; /&gt;.">表达式不为 <see langword="true" /> 时要显示的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.">基于提供的异常和条件为封闭方法或属性指定一个后置条件协定。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要测试的条件表达式。</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">引发后置条件检查的异常的类型。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt; for the enclosing method or property, based on the provided exception and condition.">基于提供的异常和条件为封闭方法或属性指定后置条件协定，并指定条件为 <see langword="false" /> 时要显示的消息。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要测试的条件表达式。</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is &lt;see langword=&quot;false&quot; /&gt;.">表达式为 <see langword="false" /> 时要显示的消息。</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">引发后置条件检查的异常的类型。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a specified test is true for any integer within a range of integers.">确定指定的测试对某个整数范围中的任何整数是否为 true。</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">要传递给 <paramref name="predicate" /> 的第一个整数。</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">要传递给 <paramref name="predicate" /> 的最后一个整数加一。</param>
      <param name="predicate" vsli:raw="The function to evaluate for any value of the integer in the specified range.">用于计算指定范围内整数的任何值的函数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any integer starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">如果 <paramref name="predicate" /> 对于从 <paramref name="fromInclusive" /> 开始到 <paramref name="toExclusive" /> - 1 的范围内的任何整数都返回 <see langword="true" />，则为 <see langword="true" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" /> 小于 <paramref name="fromInclusive" />。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether an element within a collection of elements exists within a function.">确定函数中是否存在某个元素集合中的元素。</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">将从中提取 <c>T</c> 类型的元素以将其传递给 <paramref name="predicate" /> 的集合。</param>
      <param name="predicate" vsli:raw="The function to evaluate for an element in &lt;paramref name=&quot;collection&quot; /&gt;.">用于计算 <paramref name="collection" /> 中某个元素的函数。</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <paramref name="collection" /> 中包含的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any element of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">当且仅当 <paramref name="predicate" /> 对于 <paramref name="T" /> 中的 <paramref name="collection" /> 类型的任何元素都返回 <see langword="true" /> 时，才为 <see langword="true" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a particular condition is valid for all integers in a specified range.">确定某个特定条件是否对指定范围内的所有整数都有效。</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">要传递给 <paramref name="predicate" /> 的第一个整数。</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">要传递给 <paramref name="predicate" /> 的最后一个整数加一。</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of the integers in the specified range.">要计算其中是否存在指定范围内的整数的函数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all integers starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">如果 <paramref name="predicate" /> 对于从 <paramref name="fromInclusive" /> 开始到 <paramref name="toExclusive" /> - 1 的范围内的所有整数都返回 <see langword="true" />，则为 <see langword="true" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" /> 小于 <paramref name="fromInclusive" />。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether all the elements in a collection exist within a function.">确定函数中是否存在某个集合中的所有元素。</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">将从中提取 <c>T</c> 类型的元素以将其传递给 <paramref name="predicate" /> 的集合。</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of all the elements in &lt;paramref name=&quot;collection&quot; /&gt;.">用于计算 <paramref name="collection" /> 中所有元素是否存在的函数。</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <paramref name="collection" /> 中包含的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all elements of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">当且仅当 <paramref name="predicate" /> 对于 <paramref name="T" /> 中的 <paramref name="collection" /> 类型的所有元素都返回 <see langword="true" /> 时，才为 <see langword="true" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property.">为封闭方法或属性指定一个固定的协定。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要测试的条件表达式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.">为封闭方法或属性指定一个固定协定，并在该协定的条件失败时显示一条消息。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要测试的条件表达式。</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">条件为 <see langword="false" /> 时要显示的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
      <summary vsli:raw="Represents values as they were at the start of a method or property.">表示方法或属性开始时的值。</summary>
      <param name="value" vsli:raw="The value to represent (field or parameter).">要表示的值（字段或参数）。</param>
      <typeparam name="T" vsli:raw="The type of value.">值的类型。</typeparam>
      <returns vsli:raw="The value of the parameter or field at the start of a method or property.">一个方法或属性开始处的参数或字段的值。</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property.">为封闭方法或属性指定一个前置条件协定。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要测试的条件表达式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.">为封闭方法或属性指定一个前置条件协定，并在该协定的条件失败时显示一条消息。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要测试的条件表达式。</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">条件为 <see langword="false" /> 时要显示的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.">为封闭方法或属性指定一个前置条件协定，并在该协定的条件失败时引发异常。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要测试的条件表达式。</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">条件为 <see langword="false" /> 时要引发的异常。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.">为封闭方法或属性指定一个前置条件协定，并在该协定的条件失败时引发包含提供的消息的异常。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要测试的条件表达式。</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">条件为 <see langword="false" /> 时要显示的消息。</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">条件为 <see langword="false" /> 时要引发的异常。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
      <summary vsli:raw="Represents the return value of a method or property.">表示一个方法或属性的返回值。</summary>
      <typeparam name="T" vsli:raw="Type of return value of the enclosing method or property.">封闭方法或属性的返回值的类型。</typeparam>
      <returns vsli:raw="Return value of the enclosing method or property.">封闭方法或属性的返回值。</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
      <summary vsli:raw="Represents the final (output) value of an &lt;see langword=&quot;out&quot; /&gt; parameter when returning from a method.">表示从一个方法返回时 <see langword="out" /> 参数的最终（输出）值。</summary>
      <param name="value" vsli:raw="The &lt;see langword=&quot;out&quot; /&gt; parameter.">
        <see langword="out" /> 参数。</param>
      <typeparam name="T" vsli:raw="The type of the &lt;see langword=&quot;out&quot; /&gt; parameter.">
        <see langword="out" /> 参数的类型。</typeparam>
      <returns vsli:raw="The output value of the &lt;see langword=&quot;out&quot; /&gt; parameter.">
        <see langword="out" /> 参数的输出值。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
      <summary vsli:raw="Defines abbreviations that you can use in place of the full contract syntax.">定义您可用于替代完整协定语法的缩写。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractAbbreviatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
      <summary vsli:raw="Enables the factoring of legacy &lt;see langword=&quot;if-then-throw&quot; /&gt; code into separate methods for reuse, and provides full control over thrown exceptions and arguments.">启用 <see langword="if-then-throw" /> 旧代码分离为单独的方法，用以重用，并提供对引发的异常和参数的完全控制。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
      <summary vsli:raw="Specifies that a separate type contains the code contracts for this type.">指示单独的类型包含此类型的代码协定。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractClassAttribute" /> 类的新实例。</summary>
      <param name="typeContainingContracts" vsli:raw="The type that contains the code contracts for this type.">包含此类型的代码协定的类型。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassAttribute.TypeContainingContracts">
      <summary vsli:raw="Gets the type that contains the code contracts for this type.">获取包含此类型的代码协定的类型。</summary>
      <returns vsli:raw="The type that contains the code contracts for this type.">包含此类型的代码协定的类型。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
      <summary vsli:raw="Specifies that a class is a contract for a type.">指定类是类型的协定。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassForAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassForAttribute&quot; /&gt; class, specifying the type the current class is a contract for.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractClassForAttribute" /> 类的新实例，并指定使用当前类作为协定的类型。</summary>
      <param name="typeContractsAreFor" vsli:raw="The type the current class is a contract for.">使用当前类作为协定的类型。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassForAttribute.TypeContractsAreFor">
      <summary vsli:raw="Gets the type that this code contract applies to.">获取此代码协定应用于的类型。</summary>
      <returns vsli:raw="The type that this contract applies to.">此协定应用于的类型。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailedEventArgs">
      <summary vsli:raw="Provides methods and data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">为 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件提供方法和数据。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">为 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件提供数据。</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the contract that failed.">用于指定失败的协定的枚举值之一。</param>
      <param name="message" vsli:raw="The message for the event.">事件的消息。</param>
      <param name="condition" vsli:raw="The condition for the event.">事件的条件。</param>
      <param name="originalException" vsli:raw="The exception that caused the event.">导致事件的异常。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition">
      <summary vsli:raw="Gets the condition for the failure of the contract.">获取协定失败的条件。</summary>
      <returns vsli:raw="The condition for the failure.">失败的条件。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind">
      <summary vsli:raw="Gets the type of contract that failed.">获取失败的协定的类型。</summary>
      <returns vsli:raw="One of the enumeration values that specifies the type of contract that failed.">用于指定失败的协定的类型的枚举值之一。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event has been handled.">指示是否已处理 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果事件已被处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message">
      <summary vsli:raw="Gets the message that describes the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">获取描述 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件的消息。</summary>
      <returns vsli:raw="The message that describes the event.">描述事件的消息。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException">
      <summary vsli:raw="Gets the original exception that caused the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">获取导致 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件的原始异常。</summary>
      <returns vsli:raw="The exception that caused the event.">导致事件的异常。</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">将 <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled" /> 属性设置为 <see langword="true" />。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">将 <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind" /> 属性设置为 <see langword="true" />。</summary>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind">
      <summary vsli:raw="Indicates whether the code contract escalation policy should be applied.">指示是否应该应用代码协定升级策略。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to apply the escalation policy; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">若为 <see langword="true" />，则应用升级策略；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailureKind">
      <summary vsli:raw="Specifies the type of contract that failed.">指定失败的协定的类型。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assert">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assert&quot; /&gt; contract failed.">一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.Assert" /> 协定。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assume">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assume&quot; /&gt; contract failed.">一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.Assume" /> 协定。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Invariant">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Invariant&quot; /&gt; contract failed.">一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.Invariant" /> 协定。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Ensures&quot; /&gt; contract failed.">一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.Ensures" /> 协定。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow&quot; /&gt; contract failed.">一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow" /> 协定。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Precondition">
      <summary vsli:raw="A &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Requires&quot; /&gt; contract failed.">一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.Requires" /> 协定。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
      <summary vsli:raw="Marks a method as being the invariant method for a class.">将方法标记为类的固定条件方法。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractInvariantMethodAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
      <summary vsli:raw="Enables you to set contract and tool options at assembly, type, or method granularity.">可以在程序集、类型或方法粒度方面设置协定和工具选项。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and enable/disable value.">使用提供的类别，设置和可用或禁用值初始化 <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> 类的新实例。</summary>
      <param name="category" vsli:raw="The category for the option to be set.">要设置的选项的类别。</param>
      <param name="setting" vsli:raw="The option setting.">选项设置。</param>
      <param name="enabled" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enable the option; &lt;see langword=&quot;false&quot; /&gt; to disable the option.">启用选择，则为 <see langword="true" />；禁用选择，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and value.">使用提供的类别，设置和可用或禁用值初始化 <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> 类的新实例。</summary>
      <param name="category" vsli:raw="The category of the option to be set.">要设置的选项的类别。</param>
      <param name="setting" vsli:raw="The option setting.">选项设置。</param>
      <param name="value" vsli:raw="The value for the setting.">此设置的值。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Category">
      <summary vsli:raw="Gets the category of the option.">获取选项的类别。</summary>
      <returns vsli:raw="The category of the option.">选项的类别。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Enabled">
      <summary vsli:raw="Determines if an option is enabled.">确定选项是否启用。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the option is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果启用该选项，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Setting">
      <summary vsli:raw="Gets the setting for the option.">获得选项的设置。</summary>
      <returns vsli:raw="The setting for the option.">此选项的设置。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Value">
      <summary vsli:raw="Gets the value for the option.">获取选项的值。</summary>
      <returns vsli:raw="The value for the option.">选项的值。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
      <summary vsli:raw="Specifies that a field can be used in method contracts when the field has less visibility than the method.">指定在某个字段的可见性低于方法时可在方法协定中使用该字段。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The property name to apply to the field.">要应用于字段的属性名称。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the property name to be applied to the field.">获取要应用于字段的属性名称。</summary>
      <returns vsli:raw="The property name to be applied to the field.">要应用于字段的属性名称。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
      <summary vsli:raw="Specifies that an assembly is a reference assembly that contains contracts.">指定一个程序集是包含协定的引用程序集。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
      <summary vsli:raw="Identifies a member that has no run-time behavior.">标识没有运行时行为的成员。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
      <summary vsli:raw="Instructs analysis tools to assume the correctness of an assembly, type, or member without performing static verification.">指示分析工具假定程序集、类型或成员的正确性，而不执行静态验证。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractVerificationAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractVerificationAttribute" /> 类的新实例。</summary>
      <param name="value" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to require verification; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若为 <see langword="true" />，则需要验证；否则为 <see langword="false" />。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractVerificationAttribute.Value">
      <summary vsli:raw="Gets the value that indicates whether to verify the contract of the target.">获取指示是否验证目标的协定的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if verification is required; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果需要验证，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.PureAttribute">
      <summary vsli:raw="Indicates that a type or method is pure, that is, it does not make any visible state changes.">指示类型或方法是纯函数，即它不会执行任何可见状态更改。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.PureAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.PureAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.PureAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ContractHelper">
      <summary vsli:raw="Provides methods that the binary rewriter uses to handle contract failures.">提供二进制重写工具用来处理协定失败的方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Used by the binary rewriter to activate the default failure behavior.">由二进制重写工具用来激活默认失败行为。</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the type of failure.">指定故障类型的枚举值之一。</param>
      <param name="userMessage" vsli:raw="Additional user information.">其他用户信息。</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">对导致失败的条件的说明。</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">导致当前异常的内部异常。</param>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) if the event was handled and should not trigger a failure; otherwise, returns the localized failure message.">如果事件已经过处理且不应触发失败，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）；否则返回本地化的失败消息。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;failureKind&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractFailureKind&quot; /&gt; value.">
        <paramref name="failureKind" /> 不是有效的 <see cref="T:System.Diagnostics.Contracts.ContractFailureKind" /> 值。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
      <summary vsli:raw="Triggers the default failure behavior.">触发默认失败行为。</summary>
      <param name="kind" vsli:raw="One of the enumeration values that specifies the type of failure.">指定故障类型的枚举值之一。</param>
      <param name="displayMessage" vsli:raw="The message to display.">要显示的消息。</param>
      <param name="userMessage" vsli:raw="Additional user information.">其他用户信息。</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">对导致失败的条件的说明。</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">导致当前异常的内部异常。</param>
    </member>
  </members>
</doc>
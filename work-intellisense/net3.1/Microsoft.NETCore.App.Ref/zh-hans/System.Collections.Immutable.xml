<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable collection of key/value pairs.  &#xA;&#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示键/值对的不可变集合。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">字典中键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">字典中值的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the dictionary.">将具有指定键和值的元素添加到字典。</summary>
      <param name="key" vsli:raw="The key of the element to add.">要添加的元素的键。</param>
      <param name="value" vsli:raw="The value of the element to add.">要添加的元素的值。</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">一个新的不可变字典，其中包含其他键/值对。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">字典中已存在给定的键，但具有不同的值。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the dictionary.">将指定的键/值对添加到字典中。</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">要添加的键/值对。</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">一个新的不可变字典，其中包含其他键/值对。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">字典中已存在其中一个给定的键，但具有不同的值。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">检索排序规则和键/值比较规则与此字典实例相同的空字典。</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">具有等效排序规则和键/值比较规则的空字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains the specified key/value pair.">确定不可变字典是否包含指定的键/值对。</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">要查找的键/值对。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在字典中找到指定的键/值对，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">从不可变字典中移除具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的元素的键。</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">已移除指定元素的新不可变字典；如果在字典中找不到指定的键，则为此实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">从不可变字典中移除具有指定键的元素。</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">要移除的元素的键。</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">已移除指定键的新不可变字典；如果在字典中找不到指定的键，则为此实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">在不可变字典中设置指定的键和值，可能的设置方法是覆盖该键的现有值。</summary>
      <param name="key" vsli:raw="The key of the entry to add.">要添加的条目的键。</param>
      <param name="value" vsli:raw="The key value to set.">要设置的键值。</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">一个新的不可变字典，其中包含指定的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">在不可变字典中设置指定的键/值对，可能的设置方法是覆盖键的现有值。</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">要在字典中设置的键/值对。 如果字典中已存在任何键，则此方法将覆盖这些键的先前值。</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">一个新的不可变字典，其中包含指定的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">确定此字典是否包含指定的键。</summary>
      <param name="equalKey" vsli:raw="The key to search for.">要搜索的键。</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">如果已在字典中找到匹配键，则为该匹配键；如果找不到任何匹配键，则为 <c>equalkey</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到了 <see langword="true" /> 的匹配项，则为 <paramref name="equalKey" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary vsli:raw="Represents a list of elements that cannot be modified.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示无法修改的元素的列表。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">列表中元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary vsli:raw="Makes a copy of the list, and adds the specified object to the end of the copied list.">生成列表的副本，并将指定的对象添加到所复制列表的末尾。</summary>
      <param name="value" vsli:raw="The object to add to the list.">要添加到列表中的对象。</param>
      <returns vsli:raw="A new list with the object added.">已添加对象的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Makes a copy of the list and adds the specified objects to the end of the copied list.">生成列表的副本，并将指定的对象添加到所复制列表的末尾。</summary>
      <param name="items" vsli:raw="The objects to add to the list.">要添加到列表中的对象。</param>
      <returns vsli:raw="A new list with the elements added.">已添加元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary vsli:raw="Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.">创建一个已移除所有项，但排序和顺序语义与此列表相同的列表。</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">排序和顺序语义与此实例相同的空列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">搜索指定对象并返回 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中从指定索引开始并包含指定元素数的这部分元素中第一个匹配项的从零开始索引。</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;. This value can be null for reference types.">要在 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中定位的对象。 对于引用类型，此值可以为 null。</param>
      <param name="index" vsli:raw="The zero-based starting indexes of the search. 0 (zero) is valid in an empty list.">搜索从零开始的起始索引。 空列表中 0（零）为有效值。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">要搜索的部分中的元素数。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;item&quot; /&gt;.">用于查找 <paramref name="item" /> 的相等性比较器。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements if found; otherwise -1.">如果在 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中从 <paramref name="index" /> 开始并包含 <paramref name="count" /> 个元素的元素范围内找到 <paramref name="item" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">将指定元素插入到不可变列表中的指定索引位置。</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the value.">从零开始的索引，值将插入到此处。</param>
      <param name="element" vsli:raw="The object to insert.">要插入的对象。</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">包含指定元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">将指定元素插入到不可变列表中的指定索引位置。</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">应在此处插入新元素的从零开始的索引。</param>
      <param name="items" vsli:raw="The elements to insert.">要插入的元素。</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">包含指定元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">搜索指定对象并返回 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中到指定索引为止包含指定元素数的这部分元素中最后一个匹配项的从零开始索引。</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要在列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">要搜索的部分中的元素数。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to match &lt;paramref name=&quot;item&quot; /&gt;.">用于匹配 <paramref name="item" /> 的相等性比较器。</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of a specified object from this immutable list.">从此不可变列表中移除指定对象的第一个匹配项。</summary>
      <param name="value" vsli:raw="The object to remove from the list.">要从列表中移除的对象。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;value&quot; /&gt;.">用于查找 <paramref name="value" /> 的相等性比较器。</param>
      <returns vsli:raw="A new list with the specified object removed.">删除了指定对象的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">移除与指定的谓词所定义的条件相匹配的所有元素。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">用于定义要移除的元素应满足的条件的委托。</param>
      <returns vsli:raw="A new immutable list with the elements removed.">已移除元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">移除不可变列表中指定索引处的元素。</summary>
      <param name="index" vsli:raw="The index of the element to remove.">要移除的元素的索引。</param>
      <returns vsli:raw="A new list with the element removed.">已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified object from the list.">从列表中移除指定的对象。</summary>
      <param name="items" vsli:raw="The objects to remove from the list.">要从列表中移除的对象。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to determine if &lt;paramref name=&quot;items&quot; /&gt; match any objects in the list.">用于确定 <paramref name="items" /> 是否与列表中的任何对象相匹配的相等性比较器。</param>
      <returns vsli:raw="A new immutable list with the specified objects removed, if &lt;paramref name=&quot;items&quot; /&gt; matched objects in the list.">如果 <paramref name="items" /> 与列表中的对象匹配，则返回已移除指定对象的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements from the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;.">从 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中移除一定范围的元素。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range of elements to remove.">要移除的元素范围的从零开始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements to remove.">要移除的元素数。</param>
      <returns vsli:raw="A new immutable list with the elements removed.">已移除元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns a new list with the first matching element in the list replaced with the specified element.">返回一个新列表，其中的第一个匹配元素已被替换为指定的元素。</summary>
      <param name="oldValue" vsli:raw="The element to be replaced.">要替换的元素。</param>
      <param name="newValue" vsli:raw="The element to replace the first occurrence of &lt;paramref name=&quot;oldValue&quot; /&gt; with.">用于替换 <paramref name="oldValue" /> 第一个匹配项的元素</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use for matching &lt;paramref name=&quot;oldValue&quot; /&gt;.">用于匹配 <paramref name="oldValue" /> 的相等性比较器。</param>
      <returns vsli:raw="A new list that contains &lt;paramref name=&quot;newValue&quot; /&gt;, even if &lt;paramref name=&quot;oldvalue&quot; /&gt; is the same as &lt;paramref name=&quot;newValue&quot; /&gt;.">一个新列表，即使 <paramref name="oldvalue" /> 与 <paramref name="newValue" /> 相同，该列表也包含 <paramref name="newValue" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">列表中不存在 <paramref name="oldValue" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">将列表中位于给定位置的元素替换为指定的元素。</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">要替换的元素在列表中的位置。</param>
      <param name="value" vsli:raw="The element to replace the old element with.">用于替换旧元素的元素。</param>
      <returns vsli:raw="A new list that contains the new element, even if the element at the specified location is the same as the new element.">一个新列表，即使位于指定位置的元素与新元素相同，该列表也包含新元素。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary vsli:raw="Represents an immutable first-in, first-out collection of objects.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示对象的不可变先进先出集合。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">队列中元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary vsli:raw="Returns a new queue with all the elements removed.">返回已移除所有元素的新队列。</summary>
      <returns vsli:raw="An empty immutable queue.">空的不可变队列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the first element in the immutable queue, and returns the new queue.">移除不可变队列中的第一个元素，并返回新队列。</summary>
      <returns vsli:raw="The new immutable queue with the first element removed. This value is never &lt;see langword=&quot;null&quot; /&gt;.">新的不可变队列，其第一个元素已被移除。 此值永不为 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">队列为空。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">将元素添加到不可变队列的末尾，并返回新队列。</summary>
      <param name="value" vsli:raw="The element to add.">要添加的元素。</param>
      <returns vsli:raw="The new immutable queue with the specified element added.">新的不可变队列，其中已添加指定的元素。</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.">获取一个值，该值指示此不可变队列是否为空。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此队列为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">返回位于不可变队列开始处的元素但不将其移除。</summary>
      <returns vsli:raw="The element at the beginning of the queue.">位于队列开始处的元素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">队列为空。</exception>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary vsli:raw="Represents a set of elements that can only be modified by creating a new instance of the set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示一个只能通过创建集的新实例进行修改的元素集。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="The type of element stored in the set.">集内存储的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">将指定的元素添加到此不可变集。</summary>
      <param name="value" vsli:raw="The element to add.">要添加的元素。</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">已添加元素的新集，或者此集（如果该元素已在此集内）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">检索排序和顺序语义与此实例相同的空不可变集。</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">排序和顺序语义与此实例相同的空集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable set contains a specified element.">确定此不可变集是否包含指定的元素。</summary>
      <param name="value" vsli:raw="The element to locate in the set.">要在集内定位的元素。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该集包含指定值，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">从当前不可变集内移除指定集合中的元素。</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">要从此集内移除的项的集合。</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">已移除项的新集；如果原始集不包含任何项，则为原始集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that exist in this set and the specified set.">创建一个不可变集，其中只包含存在于此集和指定集内的元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableSet`1&quot; /&gt;.">要与当前 <see cref="T:System.Collections.Immutable.IImmutableSet`1" /> 进行比较的集合。</param>
      <returns vsli:raw="A new immutable set that contains elements that exist in both sets.">一个新的不可变集，其中包含同时存在于两个集内的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) subset of the specified collection.">确定当前不可变集是否为指定集合的真（严格）子集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是指定集合的真子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) superset of the specified collection.">确定当前不可变集是否为指定集合的真（严格）超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是指定集合的真超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a subset of a specified collection.">确定当前不可变集是否为指定集合的子集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是指定集合的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a superset of a specified collection.">确定当前不可变集是否为指定集合的超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是指定集合的超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set overlaps with the specified collection.">确定当前不可变集是否与指定的集合重叠。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集与指定的集合至少共享一个通用元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">从此不可变集内移除指定的元素。</summary>
      <param name="value" vsli:raw="The element to remove.">要移除的元素。</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">已移除指定元素的新集，或者当前集（如果在该集内找不到该元素）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set and the specified collection contain the same elements.">确定当前不可变集与指定的集合是否包含相同的元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">创建一个不可变集，该集仅包含存在于当前集或指定集合（但不同时存在于两者中）中的元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">一个新集，该集包含仅存在于当前集或指定集合中（但不同时存在于两者中）的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Determines whether the set contains a specified value.">确定集是否包含指定的值。</summary>
      <param name="equalValue" vsli:raw="The value to search for.">要搜索的值。</param>
      <param name="actualValue" vsli:raw="The matching value from the set, if found, or &lt;c&gt;equalvalue&lt;/c&gt; if there are no matches.">集内的匹配值（如果已找到）；如果未找到匹配项，则为 <c>equalvalue</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching value was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到了匹配值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">创建一个新的不可变集，该集包含存在于当前集或指定集合中的所有元素。</summary>
      <param name="other" vsli:raw="The collection to add elements from.">从中添加元素的集合。</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">已添加项的新不可变集；或者原始集（如果所有项已在该集内）。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary vsli:raw="Represents an immutable last-in-first-out (LIFO) collection.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示一个不可变后进先出 (LIFO) 集合。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="The type of elements in the stack.">堆栈中元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">从不可变堆栈中移除所有对象。</summary>
      <returns vsli:raw="An empty immutable stack.">空的不可变堆栈。</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable stack is empty.">获取一个值，该值指示此不可变堆栈是否为空。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this stack is empty; otherwise,&lt;see langword=&quot;false&quot; /&gt;.">如果此堆栈为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary vsli:raw="Returns the element at the top of the immutable stack without removing it.">返回位于不可变堆栈顶部的元素但不将其移除。</summary>
      <returns vsli:raw="The element at the top of the stack.">位于堆栈顶部的元素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">堆栈为空。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">移除位于不可变堆栈顶部的元素，并返回新堆栈。</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">新堆栈；永不为 <see langword="null" /></returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">堆栈为空。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">在不可变堆栈顶部插入一个元素，并返回新堆栈。</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">要推送到堆栈中的元素。</param>
      <returns vsli:raw="The new stack.">新堆栈。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary vsli:raw="Provides methods for creating an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">提供用于创建不可变数组的方法；这意味着，该数组在创建后不可更改。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary vsli:raw="Searches the sorted immutable array for a specified element using the default comparer and returns the zero-based index of the element, if it's found.">使用默认比较器在已排序的数组中搜索指定的元素，如果已找到，则返回该元素的从零开始的索引。</summary>
      <param name="array" vsli:raw="The sorted array to search.">要搜索的已排序数组。</param>
      <param name="value" vsli:raw="The object to search for.">要搜索的对象。</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">数组中存储的元素的类型。</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">如果找到该项，则为数组中项的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="value" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.ICollection`1.Count" /> 的按位求补。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> 不实现 <see cref="T:System.IComparable" />或搜索遇到不实现 <see cref="T:System.IComparable" /> 的元素。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">在已排序的不可变数组中搜索指定的元素，如果已找到，则返回该元素的从零开始的索引。</summary>
      <param name="array" vsli:raw="The sorted array to search.">要搜索的已排序数组。</param>
      <param name="value" vsli:raw="The object to search for.">要搜索的对象。</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or null to use the default comparer.">比较元素时要使用的比较器实现，或者为 null，表示使用默认比较器。</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">数组中存储的元素的类型。</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">如果找到该项，则为数组中项的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="value" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.ICollection`1.Count" /> 的按位求补。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> 为 null，且 <paramref name="value" /> 不实现 <see cref="T:System.IComparable" /> 或搜索遇到不实现 <see cref="T:System.IComparable" /> 的元素。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">在已排序的不可变数组中搜索指定的元素，如果已找到，则返回该元素的从零开始的索引。</summary>
      <param name="array" vsli:raw="The sorted array to search.">要搜索的已排序数组。</param>
      <param name="index" vsli:raw="The starting index of the range to search.">要搜索的范围的起始索引。</param>
      <param name="length" vsli:raw="The length of the range to search.">要搜索的范围的长度。</param>
      <param name="value" vsli:raw="The object to search for.">要搜索的对象。</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">数组中存储的元素的类型。</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">如果找到该项，则为数组中项的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="value" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.ICollection`1.Count" /> 的按位求补。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> 不实现 <see cref="T:System.IComparable" />或搜索遇到不实现 <see cref="T:System.IComparable" /> 的元素。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="array" /> 中指定有效范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。

或 -

<paramref name="length" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element.">在已排序的不可变数组中搜索指定的元素，并返回该元素的从零开始的索引。</summary>
      <param name="array" vsli:raw="The sorted array to search.">要搜索的已排序数组。</param>
      <param name="index" vsli:raw="The starting index of the range to search.">要搜索的范围的起始索引。</param>
      <param name="length" vsli:raw="The length of the range to search.">要搜索的范围的长度。</param>
      <param name="value" vsli:raw="The object to search for.">要搜索的对象。</param>
      <param name="comparer" vsli:raw="The comparer to use when comparing elements for equality or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">比较元素的相等性时要使用的比较器，或者为 <see langword="null" />，表示使用默认比较器。</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">数组中存储的元素的类型。</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">如果找到该项，则为数组中项的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="value" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.ICollection`1.Count" /> 的按位求补。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> 为 null，且 <paramref name="value" /> 不实现 <see cref="T:System.IComparable" /> 或搜索遇到不实现 <see cref="T:System.IComparable" /> 的元素。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not compatible with the elements of &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="array" /> 中指定有效范围。

或 -

<paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="value" /> 的类型与 <paramref name="array" /> 的元素不兼容。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。

或 -

<paramref name="length" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary vsli:raw="Creates an empty immutable array.">创建一个空的不可变数组。</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">数组中存储的元素的类型。</typeparam>
      <returns vsli:raw="An empty immutable array.">空的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified object.">创建一个包含指定对象的不可变数组。</summary>
      <param name="item" vsli:raw="The object to store in the array.">要存储在数组中的对象。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">数组中存储的元素的类型。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified object.">一个包含指定对象的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">创建一个包含指定对象的不可变数组。</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">要存储在数组中的第一个对象。</param>
      <param name="item2" vsli:raw="The second object to store in the array.">要存储在数组中的第二个对象。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">数组中存储的元素的类型。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">一个包含指定对象的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">创建一个包含指定对象的不可变数组。</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">要存储在数组中的第一个对象。</param>
      <param name="item2" vsli:raw="The second object to store in the array.">要存储在数组中的第二个对象。</param>
      <param name="item3" vsli:raw="The third object to store in the array.">要存储在数组中的第三个对象。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">数组中存储的元素的类型。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">一个包含指定对象的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">创建一个包含指定对象的不可变数组。</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">要存储在数组中的第一个对象。</param>
      <param name="item2" vsli:raw="The second object to store in the array.">要存储在数组中的第二个对象。</param>
      <param name="item3" vsli:raw="The third object to store in the array.">要存储在数组中的第三个对象。</param>
      <param name="item4" vsli:raw="The fourth object to store in the array.">要存储在数组中的第四个对象。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">数组中存储的元素的类型。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">一个包含指定对象的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary vsli:raw="Creates an immutable array from the specified array of objects.">从指定的对象数组创建一个不可变数组。</summary>
      <param name="items" vsli:raw="The array of objects to populate the array with.">用于填充该数组的对象的数组。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">数组中存储的元素的类型。</typeparam>
      <returns vsli:raw="An immutable array that contains the array of items.">包含项数组的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with specified objects from another array.">从另一个数组创建包含指定对象的不可变数组。</summary>
      <param name="items" vsli:raw="The source array of objects.">对象的源数组。</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">要从 <paramref name="items" /> 复制的第一个元素的索引。</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">
        <paramref name="items" /> 中要包括在此不可变数组内的元素数。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">数组中存储的元素的类型。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">一个不可变数组，其中包含源数组中的指定对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with the specified objects from another immutable array.">从另一个不可变数组创建包含指定对象的不可变数组。</summary>
      <param name="items" vsli:raw="The source array of objects.">对象的源数组。</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">要从 <paramref name="items" /> 复制的第一个元素的索引。</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">
        <paramref name="items" /> 中要包括在此不可变数组内的元素数。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">数组中存储的元素的类型。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">一个不可变数组，其中包含源数组中的指定对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">创建无需分配新内存就能转换为 <see cref="T:System.Collections.Immutable.ImmutableArray" /> 的可变数组。</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">生成器中存储的元素的类型。</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">可以有效地转换为不可变数组的、指定类型的可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">创建无需分配新内存就能转换为 <see cref="T:System.Collections.Immutable.ImmutableArray" /> 的可变数组。</summary>
      <param name="initialCapacity" vsli:raw="The initial capacity of the builder.">生成器的初始容量。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">生成器中存储的元素的类型。</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">可以有效地转换为不可变数组的、指定类型的可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; populated with the specified items.">创建一个填充了指定项的新 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />。</summary>
      <param name="items" vsli:raw="The elements to add to the array.">要添加到数组中的元素。</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">数组中存储的元素的类型。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified items.">一个包含指定项的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 结构的新实例。</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">用于初始化所生成数组的源数组。</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">应用于源数组的每个元素的函数。</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 结构的新实例。</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">用于初始化所生成数组的源数组。</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">源数组中要包括在所生成数组内的第一个元素的索引。</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">源数组中要包括在所生成数组内的元素数。</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">应用于源数组中要包括在所生成数组内的每个元素的函数。</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 结构的新实例。</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">用于初始化所生成数组的源数组。</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">应用于源数组的每个元素的函数。</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">要传递到选择器映射函数的参数。</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to pass to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 结构的新实例。</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">用于初始化所生成数组的源数组。</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">源数组中要包括在所生成数组内的第一个元素的索引。</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">源数组中要包括在所生成数组内的元素数。</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">应用于源数组中要包括在所生成数组内的每个元素的函数。</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">要传递到选择器映射函数的参数。</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to be passed to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to be stored in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates an immutable array from the specified collection.">从指定的集合创建一个不可变数组。</summary>
      <param name="items" vsli:raw="The collection of objects to copy to the immutable array.">要复制到不可变数组的对象集合。</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="items" /> 中包含的元素的类型。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified collection of objects.">一个包含指定对象集合的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Creates an immutable array from the current contents of the builder's array.">从生成器数组的当前内容创建不可变数组。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable array from.">要从中创建不可变数组的生成器。</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in the immutable array.">不可变数组中包含的元素的类型。</typeparam>
      <returns vsli:raw="An immutable array that contains the current contents of the builder's array.">包含生成器数组的当前内容的不可变数组。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary vsli:raw="Represents an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示不可变的数组；这意味着，该数组在创建后不可更改。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">数组存储的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">返回末尾添加了指定项的原始数组的副本。</summary>
      <param name="item" vsli:raw="The item to be added to the end of the array.">要添加到数组末尾的项。</param>
      <returns vsli:raw="A new array with the specified item added to the end.">末尾添加了指定项的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">返回原始数组的副本，该数组的末尾添加了指定项。</summary>
      <param name="items" vsli:raw="The elements to add to the array.">要添加到数组中的元素。</param>
      <returns vsli:raw="A new array with the elements added.">包含所添加元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">返回原始数组的副本，该数组的末尾添加了指定项。</summary>
      <param name="items" vsli:raw="The elements to add to the array.">要添加到数组中的元素。</param>
      <returns vsli:raw="A new array with the elements added.">包含所添加元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary vsli:raw="Returns a new immutable array that contains the elements of this array cast to a different type.">返回一个新的不可变数组，其中包含此数组的已转换成不同类型的元素。</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return.">要返回的数组元素类型。</typeparam>
      <returns vsli:raw="An immutable array that contains the elements of this array, cast to a different type. If the cast fails, returns an array whose &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">一个不可变数组，其中包含此数组的已转换成不同类型的元素。 如果转换失败，则返回其 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 属性将返回 <see langword="true" /> 的数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary vsli:raw="Creates a new read-only memory region over this immutable array.">通过此不可变数组创建新的只读内存区域。</summary>
      <returns vsli:raw="The read-only memory representation of this immutable array.">此不可变数组的只读内存表示形式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary vsli:raw="Creates a new read-only span over this immutable array.">通过此不可变数组创建新的只读范围。</summary>
      <returns vsli:raw="The read-only span representation of this immutable array.">此不可变数组的只读范围表示形式。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary vsli:raw="A writable array accessor that can be converted into an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; instance without allocating extra memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">无需分配额外的内存就能转换为 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 实例的可写数组访问器。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the array.">将指定项添加到数组。</summary>
      <param name="item" vsli:raw="The object to add to the array.">要添加到数组中的对象。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary vsli:raw="Adds the specified items to the end of the array.">将指定项添加到数组的末尾。</summary>
      <param name="items" vsli:raw="The items to add to the array.">要添加到数组中的项。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">将指定项添加到数组的末尾。</summary>
      <param name="items" vsli:raw="The items to add to the array.">要添加到数组中的项。</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">要从源数组中添加的元素数。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">将指定项添加到数组的末尾。</summary>
      <param name="items" vsli:raw="The items to add to the array.">要添加到数组中的项。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">将指定项添加到数组的末尾。</summary>
      <param name="items" vsli:raw="The items to add to the array.">要添加到数组中的项。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">将指定项添加到数组的末尾。</summary>
      <param name="items" vsli:raw="The items to add to the array.">要添加到数组中的项。</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">要从源数组中添加的元素数。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary vsli:raw="Adds the specified items to the end of the array.">将指定项添加到数组的末尾。</summary>
      <param name="items" vsli:raw="The items to add to the array.">要添加到数组中的项。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">将派生自当前位于数组中的类型的指定项添加到数组末尾。</summary>
      <param name="items" vsli:raw="The items to add to end of the array.">要添加到数组末尾的项。</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">派生自数组中已存在的项类型的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">将派生自当前位于数组中的类型的指定项添加到数组末尾。</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">要添加到数组末尾的项。</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">派生自数组中已存在的项类型的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">将派生自当前位于数组中的类型的指定项添加到数组末尾。</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">要添加到数组末尾的项。</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">派生自数组中已存在的项类型的类型。</typeparam>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary vsli:raw="Gets or sets the length of the internal array. When set, the internal array is reallocated to the given capacity if it is not already the specified length.">获取或设置内部数组的长度。 设置后，如果内部数组已不是指定长度，则重新分配给定容量。</summary>
      <returns vsli:raw="The length of the internal array.">内部数组的长度。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the array.">从数组中移除所有项。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the array contains a specific value.">确定数组是否包含特定值。</summary>
      <param name="item" vsli:raw="The object to locate in the array.">要在数组中查找的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到该对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the current contents to the specified array.">将当前内容复制到指定的数组。</summary>
      <param name="array" vsli:raw="The array to copy to.">要复制到的数组。</param>
      <param name="index" vsli:raw="The index to start the copy operation.">开始复制操作的索引。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary vsli:raw="Gets or sets the number of items in the array.">获取或设置数组中的项数。</summary>
      <returns vsli:raw="The number of items in the array.">数组中的项数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary vsli:raw="Gets an object that can be used to iterate through the collection.">获取一个可用于循环访问集合的对象。</summary>
      <returns vsli:raw="An object that can be used to iterate through the collection.">一个可用于循环访问集合的对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Determines the index of a specific item in the array.">确定数组中特定项的索引。</summary>
      <param name="item" vsli:raw="The item to locate in the array.">要在数组中查找的项。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">确定指定项的索引。</summary>
      <param name="item" vsli:raw="The item to locate in the array.">要在数组中查找的项。</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">搜索的起始位置。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">确定指定项的索引。</summary>
      <param name="item" vsli:raw="The item to locate in the array.">要在数组中查找的项。</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">搜索的起始位置。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜索的元素数。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the index for the specified item.">确定指定项的索引。</summary>
      <param name="item" vsli:raw="The item to locate in the array.">要在数组中查找的项。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">在其处开始搜索的索引。</param>
      <param name="count" vsli:raw="The starting position of the search.">搜索的起始位置。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">要在搜索中使用的相等性比较器</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the array at the specified index.">在数组中指定索引的位置插入项。</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the item.">从零开始的索引，项将插入到此处。</param>
      <param name="item" vsli:raw="The object to insert into the array.">要插入到数组中的对象。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the item at the specified index.">获取或设置指定索引处的项。</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">要获取或设置的项的索引。</param>
      <returns vsli:raw="The item at the specified index.">指定索引处的项。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The specified index is not in the array.">指定的索引不在数组内。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified index.">获取对指定索引处的元素的只读引用。</summary>
      <param name="index" vsli:raw="The item index.">项索引。</param>
      <returns vsli:raw="The read-only reference to the element at the specified index.">对指定索引处的元素的只读引用。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is greater or equal to the array count.">
        <paramref name="index" /> 大于或等于数组计数。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">确定此数组中指定项的最后一个匹配项的从 0 开始的索引。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜索的项。</param>
      <returns vsli:raw="The 0-based index where the item was found; or -1 if it could not be found.">在其中找到了项的从 0 开始的索引；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">确定此数组中指定项的最后一个匹配项的从 0 开始的索引。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜索的项。</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">搜索的起始位置。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">在其中找到了项的数组的从 0 开始的索引；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">确定此数组中指定项的最后一个匹配项的从 0 开始的索引。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜索的项。</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">搜索的起始位置。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜索的元素数。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">在其中找到了项的数组的从 0 开始的索引；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">确定此数组中指定项的最后一个匹配项的从 0 开始的索引。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜索的项。</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">搜索的起始位置。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜索的元素数。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">要在搜索中使用的相等性比较器。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">在其中找到了项的数组的从 0 开始的索引；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary vsli:raw="Extracts the internal array as an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; and replaces it              with a zero length array.">将内部数组提取为 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />，并替换为零长度数组。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="When &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Count&quot; /&gt; doesn't              equal &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> 不等于 <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" /> 时。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the specified element.">移除指定的元素。</summary>
      <param name="element" vsli:raw="The item to remove.">要移除的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;element&quot; /&gt; was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到并移除了 <paramref name="element" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index from the array.">从数组中移除指定索引位置的项。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除的项的从零开始的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of elements in the collection.">将集合中元素的顺序反转。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary vsli:raw="Sorts the contents of the array.">对数组的内容进行排序。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">对数组的内容进行排序。</summary>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">用于排序的比较器。 如果比较器是 <see langword="null" />，将使用数组中元素类型的默认比较器。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire array using the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">使用指定的 <see cref="T:System.Comparison`1" />，对整个数组中的元素进行排序。</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">比较元素时要使用的 <see cref="T:System.Comparison`1" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">对数组的内容进行排序。</summary>
      <param name="index" vsli:raw="The starting index for the sort.">排序起始索引。</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">要包括在排序中的元素数。</param>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">用于排序的比较器。 如果比较器是 <see langword="null" />，将使用数组中元素类型的默认比较器。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">返回循环访问数组的枚举器。</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">一个循环访问数组的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">返回循环访问数组的枚举器。</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">一个循环访问数组的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary vsli:raw="Creates a new array with the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">创建一个新数组，其中包含此 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> 的当前内容。</summary>
      <returns vsli:raw="A new array with the contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">一个新数组，其中包含此 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> 的内容。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary vsli:raw="Returns an immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">返回一个不可变数组，其中包含此 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> 的当前内容。</summary>
      <returns vsli:raw="An immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">一个不可变数组，其中包含此 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> 的当前内容。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct by casting the underlying array to an array of type &lt;typeparamref name=&quot;TOther&quot; /&gt;.">通过将基础数组转换为 <typeparamref name="TOther" /> 类型的数组，初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 结构的新实例。</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return." />
      <exception cref="T:System.InvalidCastException" vsli:raw="The cast is illegal.">当转换非法时引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct based on the contents of an existing instance, allowing a covariant static cast to efficiently reuse the existing array.">基于现有实例的内容，初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 结构的新实例，允许协变静态转换，以便高效重用现有数组。</summary>
      <param name="items" vsli:raw="The array to initialize the array with. No copy is made.">用于初始化该数组的数组。 不创建任何副本。</param>
      <typeparam name="TDerived" vsli:raw="The type of array element to return." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">返回已移除所有元素的数组。</summary>
      <returns vsli:raw="An array with all of the elements removed.">已移除所有元素的数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary vsli:raw="Determines whether the specified item exists in the array.">确定指定的项是否存在于数组中。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜索的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified item was found in the array; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果在数组中找到了指定的项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the contents of this array to the specified array.">将此数组的内容复制到指定的数组。</summary>
      <param name="destination" vsli:raw="The array to copy to.">要复制到的数组。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the contents of this array to the specified array starting at the specified destination index.">从指定目标索引处开始，将此数组的内容复制到指定的数组。</summary>
      <param name="destination" vsli:raw="The array to copy to.">要复制到的数组。</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">
        <paramref name="array" /> 中复制开始处的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the specified items in this array to the specified array at the specified starting index.">将此数组中的指定项复制到指定数组中的指定起始索引处。</summary>
      <param name="sourceIndex" vsli:raw="The index of this array where copying begins.">此数组中复制开始处的索引。</param>
      <param name="destination" vsli:raw="The array to copy to.">要复制到的数组。</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">
        <paramref name="array" /> 中复制开始处的索引。</param>
      <param name="length" vsli:raw="The number of elements to copy from this array.">要从此数组中复制的元素数。</param>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary vsli:raw="Gets an empty immutable array.">获取空的不可变数组。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary vsli:raw="An array enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">数组枚举器。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary vsli:raw="Gets the current item.">获取当前项。</summary>
      <returns vsli:raw="The current item.">当前项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances to the next value in the array.">推进到数组中的下一个值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if another item exists in the array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果数组中存在另一个项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Indicates whether specified array is equal to this array.">指示指定的数组是否等于此数组。</summary>
      <param name="other" vsli:raw="An object to compare with this object.">一个与此对象进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; is equal to this array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="other" /> 等于此数组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary vsli:raw="Determines if this array is equal to the specified object.">确定此数组是否等于指定的对象。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this array.">要与此数组进行比较的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this array is equal to &lt;paramref name=&quot;obj&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此数组等于 <paramref name="obj" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the contents of the array.">返回循环访问数组内容的枚举器。</summary>
      <returns vsli:raw="An enumerator.">枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary vsli:raw="Returns a hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.">此实例的哈希代码，适合在哈希算法和类似哈希表的数据结构中使用。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item.">搜索指定项的数组。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜索的项。</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">如果找到该项，则为该项的从零开始的索引位置；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">搜索指定项的数组。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜索的项。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">在其处开始搜索的索引。</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">如果找到该项，则为该项的从零开始的索引位置；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">搜索指定项的数组。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜索的项。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">在其处开始搜索的索引。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">要在搜索中使用的相等性比较器。</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">如果找到该项，则为该项的从零开始的索引位置；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">搜索指定项的数组。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜索的项。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">在其处开始搜索的索引。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜索的元素数。</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">如果找到该项，则为该项的从零开始的索引位置；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">搜索指定项的数组。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜索的项。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">在其处开始搜索的索引。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜索的元素数。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">要在搜索中使用的相等性比较器。</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">如果找到该项，则为该项的从零开始的索引位置；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">返回一个新数组，指定的值已插入到该数组的指定位置。</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">数组中从 0 开始的索引，新项应插入到该位置。</param>
      <param name="item" vsli:raw="The item to insert at the start of the array.">要插入到数组开始处的项。</param>
      <returns vsli:raw="A new array with the item inserted at the specified index.">一个新数组，项已插入到该数组的指定索引处。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">在指定索引处插入指定的值。</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">插入值的索引位置。</param>
      <param name="items" vsli:raw="The elements to insert.">要插入的元素。</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">一个新的不可变数组，项已插入到该数组的指定索引处。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">在指定索引处插入指定的值。</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">插入值的索引位置。</param>
      <param name="items" vsli:raw="The elements to insert.">要插入的元素。</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">一个新的不可变数组，项已插入到该数组的指定索引处。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary vsli:raw="Gets a value indicating whether this array was declared but not initialized.">获取一个值，该值指示此数组是否已声明但未初始化。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 为 <see langword="null" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty or is not initialized.">获取一个值，该值指示此 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 是否为空或未初始化。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.Collections.Immutable.ImmutableArray`1.Empty&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /><see langword="null" /> 或 <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" />，则 <see langword="true" />;否则，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty.">获取一个值，该值指示此 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 是否为空。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 为空，则为 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index in the immutable array.">获取位于不可变数组中指定索引处的元素。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">要获取的元素的索引(索引从零开始)。</param>
      <returns vsli:raw="The element at the specified index in the immutable array.">位于不可变数组中指定索引处的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">获取对位于只读列表中指定 <paramref name="index" /> 处的元素的只读索引。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get a reference to.">要获取其引用的元素的从零开始的索引。</param>
      <returns vsli:raw="A read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">对位于只读列表中指定 <paramref name="index" /> 处的元素的只读索引。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">搜索指定项的数组；从该数组的末尾处开始。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜索的项。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">在其中找到了项的数组的从 0 开始的索引；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">搜索指定项的数组；从该数组的末尾处开始。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜索的项。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">在其处开始搜索的索引。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">在其中找到了项的数组的从 0 开始的索引；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">搜索指定项的数组；从该数组的末尾处开始。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜索的项。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">在其处开始搜索的索引。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜索的元素数。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">在其中找到了项的数组的从 0 开始的索引；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">搜索指定项的数组；从该数组的末尾处开始。</summary>
      <param name="item" vsli:raw="The item to search for.">要搜索的项。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">在其处开始搜索的索引。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜索的元素数。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">要在搜索中使用的相等性比较器。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">在其中找到了项的数组的从 0 开始的索引；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary vsli:raw="Gets the number of elements in the array.">获取数组中的元素数。</summary>
      <returns vsli:raw="The number of elements in the array.">数组中的元素数</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary vsli:raw="Filters the elements of this array to those assignable to the specified type.">筛选此数组的元素，以仅显示可分配给指定类型的元素。</summary>
      <typeparam name="TResult" vsli:raw="The type to filter the elements of the sequence on.">筛选序列元素所根据的类型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; that contains elements from the input sequence of type of &lt;paramref name=&quot;TResult&quot; /&gt;.">一个 <see cref="T:System.Collections.IEnumerable" />，其中包含类型为 <paramref name="TResult" /> 的输入序列中的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">返回一个值，该值指示两个数组是否相等。</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">运算符左边的数组。</param>
      <param name="right" vsli:raw="The array to the right of the operator.">运算符右边的数组。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果数组相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">返回一个值，该值指示两个数组是否相等。</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">运算符左边的数组。</param>
      <param name="right" vsli:raw="The array to the right of the operator.">运算符右边的数组。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果数组相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates whether two arrays are not equal.">返回一个值，该值指示两个数组是否不相等。</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">运算符左边的数组。</param>
      <param name="right" vsli:raw="The array to the right of the operator.">运算符右边的数组。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果数组不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Checks for inequality between two array.">检查两个数组是否不相等。</summary>
      <param name="left" vsli:raw="The object to the left of the operator.">运算符左边的对象。</param>
      <param name="right" vsli:raw="The object to the right of the operator.">运算符右边的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个数组不相等，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array. If no match is found, the current array is returned.">返回一个数组，其中包含已从数组中移除的指定元素的第一个匹配项。 如果未找到匹配项，则返回当前的数组。</summary>
      <param name="item" vsli:raw="The item to remove.">要移除的项。</param>
      <returns vsli:raw="A new array with the item removed.">已移除项的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array.  &#xA;  &#xA; If no match is found, the current array is returned.">返回一个数组，其中包含已从数组中移除的指定元素的第一个匹配项。
如果未找到匹配项，则返回当前的数组。</summary>
      <param name="item" vsli:raw="The item to remove.">要移除的项。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">要在搜索中使用的相等性比较器。</param>
      <returns vsli:raw="A new array with the specified item removed.">已移除指定项的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">从数组中移除满足指定条件的所有项。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">用于定义要移除的元素应满足的条件的委托。</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">一个新数组，其中满足指定条件的项已被移除。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">返回一个数组，其中位于指定位置的元素已被移除。</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">要从返回的数组中移除的元素的从 0 开始的索引。</param>
      <returns vsli:raw="A new array with the item at the specified index removed.">一个新数组，其中位于指定索引处的项已被移除。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified items from this array.">从此数组中移除指定的项。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">在此列表中找到匹配项时要移除的项。</param>
      <returns vsli:raw="A new array with the elements removed.">已移除元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">从此数组中移除指定的项。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">在此列表中找到匹配项时要移除的项。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">要在搜索中使用的相等性比较器。</param>
      <returns vsli:raw="A new array with the elements removed.">已移除元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Removes the specified values from this list.">从此列表中移除指定的值。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">在此列表中找到匹配项时要移除的项。</param>
      <returns vsli:raw="A new list with the elements removed.">已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this list.">从此列表中移除指定的项。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">在此列表中找到匹配项时要移除的项。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">要在搜索中使用的相等性比较器。</param>
      <returns vsli:raw="A new array with the elements removed.">已移除元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">返回一个数组，其中位于指定位置的元素已被移除。</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">要从数组中移除的起始元素的从 0 开始的索引。</param>
      <param name="length" vsli:raw="The number of elements to remove from the array.">要从数组中移除的元素数。</param>
      <returns vsli:raw="The new array with the specified elements removed.">已移除指定元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">查找数组中与指定值相等的第一个元素，并将该值替换为指定的新值。</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">要在数组中查找并替换的值。</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">用于替换 <c>oldvalue</c> 的值。</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">一个新数组，即使新值和旧值相同，该数组也包含 <paramref name="newValue" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">在数组中找不到 <paramref name="oldValue" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">查找数组中与指定值相等的第一个元素，并将该值替换为指定的新值。</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">要在数组中查找并替换的值。</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">用于替换 <c>oldvalue</c> 的值。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">用于比较值的相等性比较器。</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">一个新数组，即使新值和旧值相同，该数组也包含 <paramref name="newValue" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">在数组中找不到 <paramref name="oldValue" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">使用指定项替换指定索引处的项。</summary>
      <param name="index" vsli:raw="The index of the item to replace.">要替换的项的索引。</param>
      <param name="item" vsli:raw="The item to add to the list.">要添加到列表的项。</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">一个新数组，其指定索引处包含 <paramref name="item" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary vsli:raw="Sorts the elements in the immutable array using the default comparer.">使用默认比较器对不可变数组中的元素进行排序。</summary>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">一个新的不可变数组，其中包含已排序的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the immutable array using the specified comparer.">使用指定的比较器对不可变数组中的元素进行排序。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">比较元素时要使用的实现，若要使用默认比较器，则为 <see langword="null" /></param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">一个新的不可变数组，其中包含已排序的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; using             the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">使用指定的 <see cref="T:System.Comparison`1" />，对整个 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 中的元素进行排序。</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">比较元素时要使用的 <see cref="T:System.Comparison`1" />。</param>
      <returns vsli:raw="The sorted list.">已排序的列表。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the specified elements in the immutable array using the specified comparer.">使用指定的比较器对不可变数组中的指定元素进行排序。</summary>
      <param name="index" vsli:raw="The index of the first element to sort.">要排序的第一个元素的索引。</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">要包括在排序中的元素数。</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">比较元素时要使用的实现，若要使用默认比较器，则为 <see langword="null" /></param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">一个新的不可变数组，其中包含已排序的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item" vsli:raw="The item to add to the end of the array.">要添加到数组末尾的项。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">获取集合中的数组数。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 属性返回 true 时引发。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">获取一个值，该值指示此实例是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此实例为只读，则 <see langword="true" />;否则，<see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item" vsli:raw="The object to remove from the array.">要从数组中移除的对象。</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">返回循环访问数组的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">一个可用于循环访问数组的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index" vsli:raw="The index of the location to insert the item.">要插入项的位置的索引。</param>
      <param name="item" vsli:raw="The item to insert.">要插入的项。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index in the read-only list.">获取或设置位于只读列表中指定索引处的元素。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">要获取的元素的索引(索引从零开始)。</param>
      <returns vsli:raw="The element at the specified index in the read-only list.">在只读列表中指定索引处的元素。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">始终从资源库引发。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 属性返回 true 时引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index" vsli:raw="The index.">索引。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">获取集合中的数组数。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 属性返回 true 时引发。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index.">获取指定索引处的元素。</summary>
      <param name="index" vsli:raw="The index.">索引。</param>
      <returns vsli:raw="The element.">元素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 属性返回 true 时引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies this array to another array starting at the specified index.">从指定的索引开始，将此数组复制到另一个数组。</summary>
      <param name="array" vsli:raw="The array to copy this array to.">此数组要复制到的数组。</param>
      <param name="index" vsli:raw="The index in the destination array to start the copy operation.">目标数组中开始复制操作处的索引。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the size of the array.">获取数组的大小。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 属性返回 true 时引发。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface. Always returns &lt;see langword=&quot;true&quot; /&gt; since since immutable collections are thread-safe.">请参阅 <see cref="T:System.Collections.ICollection" /> 接口。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the sync root.">获取同步根目录。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable array.">返回一个循环访问不可变数组的枚举器。</summary>
      <returns vsli:raw="An enumerator that iterates through the immutable array.">一个循环访问不可变数组的枚举器。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 属性返回 <see langword="true" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value" vsli:raw="The value to add to the array.">要添加到数组中的值。</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">在所有情况下均引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">在所有情况下均引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value" vsli:raw="The value to check for.">要检查的值。</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Gets the value at the specified index.">获取位于指定索引处的值。</summary>
      <param name="value" vsli:raw="The value to return the index of.">要返回其索引的值。</param>
      <returns vsli:raw="The value of the element at the specified index.">位于指定索引处的元素的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index" vsli:raw="Index that indicates where to insert the item.">指示项插入位置的索引。</param>
      <param name="value" vsli:raw="The value to insert.">要插入的值。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">在所有情况下均引发。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether this instance is fixed size.">获取一个值，该值指示此实例是否为固定大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此实例为固定大小，则为 <see langword="true" />;否则，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">获取一个值，该值指示此实例是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此实例为只读，则 <see langword="true" />;否则，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">获取或设置指定索引处的 <see cref="T:System.Object" />。</summary>
      <param name="index" vsli:raw="The index.">索引。</param>
      <returns vsli:raw="The object at the specified index.">指定索引处的对象。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">始终从资源库引发。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 属性返回 true 时引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value" vsli:raw="The value to remove from the array.">要从数组中移除的值。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">在所有情况下均引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index" vsli:raw="The index of the item to remove.">要移除的项的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">在所有情况下均引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">返回末尾添加了指定项的原始数组的副本。</summary>
      <param name="value" vsli:raw="The value to add to the end of the array.">要添加到数组末尾的值。</param>
      <returns vsli:raw="A new array with the specified item added to the end.">末尾添加了指定项的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">返回原始数组的副本，该数组的末尾添加了指定项。</summary>
      <param name="items" vsli:raw="The elements to add to the end of the array.">要添加到数组末尾的元素。</param>
      <returns vsli:raw="A new array with the elements added to the end.">一个新数组，其末尾已添加了元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">返回已移除所有元素的数组。</summary>
      <returns vsli:raw="An array with all the elements removed.">已移除所有元素的数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">返回一个新数组，指定的值已插入到该数组的指定位置。</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">数组中从 0 开始的索引，新项应插入到该位置。</param>
      <param name="element" vsli:raw="The item to insert at the start of the array.">要插入到数组开始处的项。</param>
      <returns vsli:raw="A new array with the specified value inserted.">已插入指定值的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">在指定索引处插入指定的值。</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">插入值的索引位置。</param>
      <param name="items" vsli:raw="The elements to insert.">要插入的元素。</param>
      <returns vsli:raw="A new array with the specified values inserted.">已插入指定值的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array; if no match is found, the current array is returned.">返回一个数组，其中包含已从数组中移除的指定元素的第一个匹配项；如果未找到匹配项，则返回当前数组。</summary>
      <param name="value" vsli:raw="The value to remove from the array.">要从数组中移除的值。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">要在搜索中使用的相等性比较器。</param>
      <returns vsli:raw="A new array with the value removed.">已移除值的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">从数组中移除满足指定条件的所有项。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">用于定义要移除的元素应满足的条件的委托。</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">一个新数组，其中满足指定条件的项已被移除。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">返回一个数组，其中位于指定位置的元素已被移除。</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">要从返回的数组中移除的元素的从 0 开始的索引。</param>
      <returns vsli:raw="A new array with the specified item removed.">已移除指定项的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">从此数组中移除指定的项。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">在此列表中找到匹配项时要移除的项。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">要在搜索中使用的相等性比较器。</param>
      <returns vsli:raw="A new array with the elements removed.">已移除元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">返回一个数组，其中位于指定位置的元素已被移除。</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">要从数组中移除的起始元素的从 0 开始的索引。</param>
      <param name="count" vsli:raw="The number of elements to remove from the array.">要从数组中移除的元素数。</param>
      <returns vsli:raw="The new array with the specified elements removed.">已移除指定元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">查找数组中与指定值相等的第一个元素，并将该值替换为指定的新值。</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">要在数组中查找并替换的值。</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">用于替换 <c>oldvalue</c> 的值。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">用于比较值的相等性比较器。</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">一个新数组，即使新值和旧值相同，该数组也包含 <paramref name="newValue" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">在数组中找不到 <paramref name="oldValue" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">使用指定项替换指定索引处的项。</summary>
      <param name="index" vsli:raw="The index of the item to replace.">要替换的项的索引。</param>
      <param name="value" vsli:raw="The value to add to the list.">要添加到列表中的值。</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">一个新数组，其指定索引处包含 <paramref name="item" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary vsli:raw="Determines whether the current collection element precedes, occurs in the same position as, or follows another element in the sort order.">确定当前集合元素在排序顺序中的位置是位于另一个元素之前、之后还是与其位置相同。</summary>
      <param name="other" vsli:raw="The element to compare with the current instance.">要与当前实例进行比较的元素。</param>
      <param name="comparer" vsli:raw="The object used to compare members of the current array with the corresponding members of other array.">用于将当前数组的成员与另一个数组的对应成员进行比较的对象。</param>
      <returns vsli:raw="An integer that indicates whether the current element precedes, is in the same position or follows the other element.">一个整数，指示当前元素是位于另一个元素之前、之后还是与其位置相同。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The arrays are not the same length.">该数组的长度不同。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary vsli:raw="Determines whether this array is structurally equal to the specified array.">确定此数组在结构上是否等于指定的数组。</summary>
      <param name="other" vsli:raw="The array to compare with the current instance.">与当前实例进行比较的数组。</param>
      <param name="comparer" vsli:raw="An object that determines whether the current instance and other are structurally equal.">一个对象，用于确定当前实例在结构上是否与另一个实例相等。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are structurally equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个数组在结构上相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary vsli:raw="Returns a hash code for the current instance.">返回当前实例的哈希代码。</summary>
      <param name="comparer" vsli:raw="An object that computes the hash code of the current object.">一个计算当前对象的哈希代码的对象。</param>
      <returns vsli:raw="The hash code for the current instance.">当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary vsli:raw="Creates a mutable array that has the same contents as this array and can be efficiently mutated across multiple operations using standard mutable interfaces.">创建一个其内容与此数组相同，并且可使用标准可变接口在多个操作之间有效转变的不可变数组。</summary>
      <returns vsli:raw="The new builder with the same contents as this array.">内容与此数组相同的新生成器。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">针对 <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" /> 类的实例提供一组初始化方法。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Determines whether the specified immutable dictionary contains the specified key/value pair.">确定指定的不可变字典是否包含指定的键/值对。</summary>
      <param name="map" vsli:raw="The immutable dictionary to search.">要搜索的不可变字典。</param>
      <param name="key" vsli:raw="The key to locate in the immutable dictionary.">要在不可变字典中查找的键。</param>
      <param name="value" vsli:raw="The value to locate on the specified key, if the key is found.">找到指定的键时，要在该键中查找的值。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the immutable dictionary.">不可变字典中键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the immutable dictionary.">不可变字典中值的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this map contains the specified key/value pair; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此映射包含指定的键/值对，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable dictionary.">创建一个空的不可变字典。</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典存储的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典存储的值的类型。</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">空的不可变字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key comparer.">创建使用指定键比较器的空不可变字典。</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">用于确定字典中键的相等性的实现。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典存储的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典存储的值的类型。</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">空的不可变字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key and value comparers.">创建使用指定键和值比较器的空不可变字典。</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">用于确定字典中键的相等性的实现。</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">用于确定字典中值的相等性的实现。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典存储的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典存储的值的类型。</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">空的不可变字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable dictionary builder.">创建一个新的不可变字典生成器。</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典存储的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典存储的值的类型。</typeparam>
      <returns vsli:raw="The new builder.">新的生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">创建一个新的不可变字典生成器。</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">键比较器。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典存储的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典存储的值的类型。</typeparam>
      <returns vsli:raw="The new builder.">新的生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">创建一个新的不可变字典生成器。</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">键比较器。</param>
      <param name="valueComparer" vsli:raw="The value comparer.">值比较器。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典存储的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典存储的值的类型。</typeparam>
      <returns vsli:raw="The new builder.">新的生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items.">创建包含指定项的新不可变字典。</summary>
      <param name="items" vsli:raw="The items used to populate the dictionary before it's immutable.">在字典不可变之前用于填充该字典的项。</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">字典中键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">字典中值的类型。</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items.">包含指定项的新不可变字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">创建包含指定项并使用指定键比较器的新不可变字典。</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">用于比较键的相等性的比较器实现。</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">在字典不可变之前要添加到该字典中的项。</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">字典中键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">字典中值的类型。</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">包含指定项并使用指定比较器的新不可变字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">创建包含指定项并使用指定键比较器的新不可变字典。</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">用于比较键的相等性的比较器实现。</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">用于比较值的相等性的比较器实现。</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">在字典不可变之前要添加到该字典中的项。</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">字典中键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">字典中值的类型。</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">包含指定项并使用指定比较器的新不可变字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">如果字典中存在匹配的键，则获取给定键的值。</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">要从中检索值的字典。</param>
      <param name="key" vsli:raw="The key to search for.">要搜索的键。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">值的类型。</typeparam>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">该键的值；如果找不到匹配的键，则为 <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">如果字典中存在匹配的键，则获取给定键的值。</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">要从中检索值的字典。</param>
      <param name="key" vsli:raw="The key to search for.">要搜索的键。</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">在字典中找不到匹配键时返回的默认值。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">值的类型。</typeparam>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">该键的值；如果找不到匹配的键，则为 <paramref name="defaultValue" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Constructs an immutable dictionary from an existing collection of elements, applying a transformation function to the source keys.">通过向源键应用转换函数，从现有元素集合构造一个不可变字典。</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">用于生成不可变字典的源集合。</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">用于转换不可变字典键的函数。</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">源集合中元素的类型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">生成的不可变字典中键的类型。</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">包含 <paramref name="source" /> 中的元素的不可变字典，其键已通过应用 <paramref name="keySelector" /> 进行转换。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Constructs an immutable dictionary based on some transformation of a sequence.">基于对序列进行某种形式的转换来构造一个不可变字典。</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">用于生成不可变字典的源集合。</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">用于转换不可变字典键的函数。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">用于字典的键比较器。</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">源集合中元素的类型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">生成的不可变字典中键的类型。</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">包含 <paramref name="source" /> 中的元素的不可变字典，其键已通过应用 <paramref name="keySelector" /> 进行转换。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents.">枚举键/值对的序列，并生成其内容的不可变字典。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">要枚举的键/值对的序列。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值的类型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">一个不可变字典，其中包含指定序列中的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">枚举键/值对的序列，并使用指定的键比较器生成其内容的不可变字典。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">要枚举的键/值对的序列。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">生成不可变字典时要使用的键比较器。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值的类型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">一个不可变字典，其中包含指定序列中的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key and value comparers.">枚举键/值对的序列，并使用指定的键和值比较器生成其内容的不可变字典。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">要枚举的键/值对的序列。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">生成不可变字典时要使用的键比较器。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">用于不可变字典的值比较器。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值的类型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">一个不可变字典，其中包含指定序列中的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable dictionary from the current contents of the builder's dictionary.">从生成器字典的当前内容创建不可变字典。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable dictionary from.">要从中创建不可变字典的生成器。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值的类型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the current contents in the builder's dictionary.">包含生成器字典中当前内容的不可变字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents.">枚举并转换序列，然后生成其内容的不可变字典。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">为生成字典而要枚举的序列。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">用于从每个序列元素生成字典键的函数。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">用于从每个序列元素生成字典值的函数。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中元素的类型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">生成的字典中键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">生成的字典中值的类型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">一个不可变字典，其中包含指定序列中的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key comparer.">枚举并转换序列，然后使用指定的键比较器生成其内容的不可变字典。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">为生成字典而要枚举的序列。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">用于从每个序列元素生成字典键的函数。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">用于从每个序列元素生成字典值的函数。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">用于字典的键比较器。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中元素的类型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">生成的字典中键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">生成的字典中值的类型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">一个不可变字典，其中包含指定序列中的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key and value comparers.">枚举并转换序列，然后使用指定的键和值比较器生成其内容的不可变字典。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">为生成字典而要枚举的序列。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">用于从每个序列元素生成字典键的函数。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">用于从每个序列元素生成字典值的函数。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">用于字典的键比较器。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">用于字典的值比较器。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中元素的类型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">生成的字典中键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">生成的字典中值的类型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">一个不可变字典，其中包含指定序列中的项。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable, unordered collection of keys and values.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示键和值的不可变未排序集合。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable dictionary.">将具有指定键和值的元素添加到不可变字典。</summary>
      <param name="key" vsli:raw="The key of the element to add.">要添加的元素的键。</param>
      <param name="value" vsli:raw="The value of the element to add.">要添加的元素的值。</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">一个新的不可变字典，其中包含其他键/值对。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">字典中已存在给定的键，但具有不同的值。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the immutable dictionary.">将指定的键/值对添加到不可变字典。</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">要添加的键/值对。</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">一个新的不可变字典，其中包含其他键/值对。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">字典中已存在其中一个给定的键，但具有不同的值。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary vsli:raw="Represents a hash map that mutates with little or no memory allocations and that can produce or build on immutable hash map instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示一个只需少量或者无需内存分配就能转变，并且可以有效生成不可变哈希映射实例或者构建于此类实例之上的哈希映射。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable dictionary.">将具有指定键和值的元素添加到不可变字典。</summary>
      <param name="key" vsli:raw="The key of the element to add.">要添加的元素的键。</param>
      <param name="value" vsli:raw="The value of the element to add.">要添加的元素的值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the dictionary.">字典中已存在具有相同键的元素。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">字典为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable dictionary.">将指定项添加到不可变字典。</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">要添加到字典中的对象。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">字典为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to this collection.">将值序列添加到此集合中。</summary>
      <param name="items" vsli:raw="The items to add to this collection.">要添加到此集合中的项。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable dictionary.">从不可变字典中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">字典为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains a specific value.">确定不可变字典是否包含特定值。</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">要在字典中查找的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在字典中找到 <see langword="true" />，则为 <paramref name="item" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified key.">确定不可变字典是否包含具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">要在字典中查找的键。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典包含具有该键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified value.">确定不可变字典是否包含具有指定值的元素。</summary>
      <param name="value" vsli:raw="The value to locate in the immutable dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要在不可变字典中查找的值。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典包含具有指定值的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable dictionary.">获取不可变字典中包含的元素数。</summary>
      <returns vsli:raw="The number of elements contained in the immutable dictionary.">不可变字典中包含的元素数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">返回一个循环访问不可变字典的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">如果字典中存在匹配的键，则获取给定键的值。</summary>
      <param name="key" vsli:raw="The key to search for.">要搜索的键。</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">该键的值；如果找不到匹配的键，则为 <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">如果字典中存在匹配的键，则获取给定键的值。</summary>
      <param name="key" vsli:raw="The key to search for.">要搜索的键。</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">在字典中找不到匹配键时返回的默认值。</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">该键的值；如果找不到匹配的键，则为 <paramref name="defaultValue" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the element with the specified key.">获取或设置具有指定键的元素。</summary>
      <param name="key" vsli:raw="The element to get or set.">要获取或设置的元素。</param>
      <returns vsli:raw="The element that has the specified key.">具有指定键的元素。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is being retrieved, and &lt;paramref name=&quot;key&quot; /&gt; is not found.">正在检索该属性，但找不到 <paramref name="key" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The property is being set, and the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only.">正在设置该属性，但 <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">获取或设置键比较器。</summary>
      <returns vsli:raw="The key comparer.">键比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a collection that contains the keys of the immutable dictionary.">获取包含不可变字典中的键的集合。</summary>
      <returns vsli:raw="A collection that contains the keys of the object that implements the immutable dictionary.">一个集合，其中包含实现不可变字典的对象的键。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">从不可变字典中移除具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的元素的键。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the dictionary.">如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。  如果在字典中未找到 <see langword="false" />，此方法也会返回 <paramref name="key" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">字典为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable dictionary.">从不可变字典中移除特定对象的第一个匹配项。</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">要从字典中移除的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns false if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">如果从字典中成功移除了 <see langword="true" />，则为 <paramref name="item" />；否则为 <see langword="false" />。 如果在字典中未找到 <paramref name="item" />，此方法也会返回 false。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">字典为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable dictionary.">从不可变字典中移除其键与指定序列中找到的键相匹配的所有条目。</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">要从字典中移除的条目的键。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, starting at the specified array index.">从指定的数组索引开始，将字典中的元素复制到 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 类型的数组中。</summary>
      <param name="array" vsli:raw="The one-dimensional array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 类型的一维数组，它是从字典复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">获取一个值，该值指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否同步（线程安全）。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">将具有所提供键和值的元素添加到字典对象。</summary>
      <param name="key" vsli:raw="The key of the element to add.">要添加的元素的键。</param>
      <param name="value" vsli:raw="The value of the element to add.">要添加的元素的值。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">确定字典对象是否包含具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key to locate.">要定位的键。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典包含具有该键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">返回字典的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">字典的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否具有固定大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Collections.IDictionary" /> 对象具有固定大小，则为 <see langword="true" />;否则，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">获取或设置具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key.">键。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" />的对象的键。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">从字典中移除具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的元素的键。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">获取一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" />的对象中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">返回循环访问集合的枚举数。</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">可用于循环访问集合的枚举器对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable dictionary based on the contents of this instance.">基于此实例的内容创建一个不可变字典。</summary>
      <returns vsli:raw="An immutable dictionary.">不可变字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">确定此字典是否包含指定的键。</summary>
      <param name="equalKey" vsli:raw="The key to search for.">要搜索的键。</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">如果已在字典中找到匹配键，则为该匹配键；如果找不到任何匹配键，则为 <c>equalkey</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到了 <see langword="true" /> 的匹配项，则为 <paramref name="equalKey" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Returns the value associated with the specified key.">返回与指定键关联的值。</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">将检索其值的键。</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, returns the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">当此方法返回时，如果找到指定键，则包含与该键关联的值；否则返回 <paramref name="value" /> 参数类型的默认值。 此参数未经初始化即被传递。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果实现不可变字典的对象包含具有指定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">获取或设置值比较器。</summary>
      <returns vsli:raw="The value comparer.">值比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable dictionary.">获取包含不可变字典值的集合。</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">一个集合，其中包含实现字典的对象的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">检索排序规则和键/值比较规则与此字典实例相同的空不可变字典。</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">具有等效排序规则和键/值比较规则的空字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable dictionary contains the specified key/value pair.">确定此不可变字典是否包含指定的键/值对。</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">要查找的键/值对。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在字典中找到指定的键/值对，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified key.">确定不可变字典是否包含具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key to locate.">要定位的键。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果不可变字典包含具有指定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified value.">确定不可变字典是否包含具有指定值的元素。</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要查找的值。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典包含具有指定值的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable dictionary.">获取不可变字典中键/值对的数目。</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">字典中键/值对的数目。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable dictionary.">获取空的不可变字典。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable dictionary without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">枚举不可变字典的内容，而无需分配任何内存。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">获取枚举数当前位置的元素。</summary>
      <returns vsli:raw="The element in the dictionary at the current position of the enumerator.">字典中位于枚举器当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator&quot; /&gt; class.">释放 <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" /> 类的当前实例使用的资源。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable dictionary.">将枚举器推进到不可变字典的下一个元素。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the dictionary.">如果枚举器已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举器已传递到字典的末尾，则为 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">在创建枚举器后修改了字典。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the dictionary.">将枚举器设置到其初始位置，该位置位于字典中的第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">在创建枚举器后修改了字典。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">获取当前元素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">返回一个循环访问不可变字典的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">一个可用于循环访问字典的枚举器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable dictionary is empty.">获取一个值，该值指示此不可变字典实例是否为空。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此实例为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">获取与指定键关联的 <paramref name="TValue" />。</summary>
      <param name="key" vsli:raw="The type of the key.">键的类型。</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">与指定的键相关联的值。 如果未找到任何结果，该操作将引发异常。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable dictionary.">获取不可变字典的键比较器。</summary>
      <returns vsli:raw="The key comparer.">键比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable dictionary.">获取不可变字典中的键。</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">不可变字典中的键。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">从不可变字典中移除具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的元素的键。</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">已移除指定元素的新不可变字典；如果在字典中找不到指定的键，则为此实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">从不可变字典中移除具有指定键的元素。</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">要移除的元素的键。</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">已移除指定键的新不可变字典；如果在字典中找不到指定的键，则为此实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">在不可变字典中设置指定的键和值，可能的设置方法是覆盖该键的现有值。</summary>
      <param name="key" vsli:raw="The key of the entry to add.">要添加的条目的键。</param>
      <param name="value" vsli:raw="The key value to set.">要设置的键值。</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">一个新的不可变字典，其中包含指定的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">在不可变字典中设置指定的键/值对，可能的设置方法是覆盖键的现有值。</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">要在字典中设置的键/值对。 如果字典中已存在任何键，则此方法将覆盖这些键的先前值。</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">一个新的不可变字典，其中包含指定的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The type of the key." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">从特定的数组索引开始，将字典的元素复制到数组中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">作为从字典复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">获取可用于同步对 <see cref="T:System.Collections.ICollection" />的访问的对象。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the immutable dictionary object.">将具有所提供键和值的元素添加到不可变字典对象。</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">用作要添加的元素的键的对象。</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">用作要添加的元素的值的对象。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">清除此实例。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">字典对象为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">确定不可变字典对象是否包含具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">要在字典对象中查找的键。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典包含具有该键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">返回不可变字典对象的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">字典对象的枚举器对象。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否具有固定大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Collections.IDictionary" /> 对象具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">获取或设置具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key.">键。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象的键。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">从不可变字典对象中移除具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的元素的键。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">获取一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">返回循环访问集合的枚举数。</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">可用于循环访问集合的枚举器对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added to the dictionary." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of the entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="The key-value pairs to set on the map. Any keys that conflict with existing keys will replace the previous values." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">创建一个其内容与此字典相同，并且可使用标准可变接口在多个操作之间有效转变的不可变字典。</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">一个其内容与此字典相同，并且可使用标准可变接口在多个操作之间有效转变的集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">确定此字典是否包含指定的键。</summary>
      <param name="equalKey" vsli:raw="The key to search for.">要搜索的键。</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">如果已在字典中找到匹配键，则为该匹配键；如果找不到任何匹配键，则为 <c>equalkey</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到了 <paramref name="equalKey" /> 的匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">获取与指定键关联的值。</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">将检索其值的键。</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">当此方法返回时，如果找到该键，则包含与指定的键相关联的值；否则将包含 <paramref name="value" /> 参数的类型默认值。 此参数未经初始化即被传递。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果实现字典的对象包含具有指定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">获取用于确定值是否相等的值比较器。</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">用于确定值是否相等的值比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable dictionary.">获取不可变字典中的值。</summary>
      <returns vsli:raw="The values in the immutable dictionary.">不可变字典中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key comparer.">获取使用指定键比较器的不可变字典实例。</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">要使用的键比较器。</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">使用给定比较器的不可变字典实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key and value comparers.">获取使用指定键和值比较器的不可变字典实例。</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">要使用的键比较器。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">要使用的值比较器。</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">使用给定比较器的不可变字典实例。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">针对 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> 类的实例提供一组初始化方法。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary vsli:raw="Creates an empty immutable hash set.">创建一个空的不可变哈希集。</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable hash set.">要存储在不可变哈希集内的项的类型。</typeparam>
      <returns vsli:raw="An empty immutable hash set.">空的不可变哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item.">创建包含指定项的新不可变哈希集。</summary>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">用于预先填充哈希集的项。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">不可变哈希集内的项的类型。</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">包含指定项的新不可变哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified array of items.">创建包含指定项数组的新不可变哈希集。</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">一个数组，其中包含用于预先填充哈希集的项。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">不可变哈希集内的项的类型。</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">包含指定项的新不可变哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable hash set that uses the specified equality comparer.">创建使用指定相等性比较器的空不可变哈希集。</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">用于比较集内对象相等性的对象。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">不可变哈希集内的项的类型。</typeparam>
      <returns vsli:raw="An empty immutable hash set.">空的不可变哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item and uses the specified equality comparer for the set type.">创建一个包含指定项并为集类型使用指定相等性比较器的新不可变哈希集。</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">用于比较集内对象相等性的对象。</param>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">用于预先填充哈希集的项。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">不可变哈希集内的项的类型。</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">包含指定项的新不可变哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the items in the specified collection and uses the specified equality comparer for the set type.">创建一个包含指定集合中的项并为集类型使用指定相等性比较器的新不可变哈希集。</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">用于比较集内对象相等性的对象。</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">一个数组，其中包含用于预先填充哈希集的项。</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable hash set.">存储在不可变哈希集内的项的类型。</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">包含指定项的新不可变哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable hash set builder.">创建一个新的不可变哈希集生成器。</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">集合存储的项的类型。</typeparam>
      <returns vsli:raw="The immutable hash set builder.">不可变哈希集生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable hash set builder.">创建一个新的不可变哈希集生成器。</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">用于比较集内对象相等性的对象。</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">集合存储的项的类型。</typeparam>
      <returns vsli:raw="The new immutable hash set builder.">新的不可变哈希集生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set prefilled with the specified items.">创建已预先填充了指定项的新不可变哈希集。</summary>
      <param name="items" vsli:raw="The items to add to the hash set.">要添加到哈希集内的项。</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">集合存储的项的类型。</typeparam>
      <returns vsli:raw="The new immutable hash set that contains the specified items.">包含指定项的新不可变哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified items and uses the specified equality comparer for the set type.">创建一个包含指定项并为集类型使用指定相等性比较器的新不可变哈希集。</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">用于比较集内对象相等性的对象。</param>
      <param name="items" vsli:raw="The items add to the collection before immutability is applied.">在应用不可变性之前要添加到集合中的项。</param>
      <typeparam name="T" vsli:raw="The type of items stored in the collection.">集合中存储的项的类型。</typeparam>
      <returns vsli:raw="The new immutable hash set.">新的不可变哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable hash set of its contents.">枚举序列，并生成其内容的不可变哈希集。</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">要枚举的序列。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中元素的类型。</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence.">一个不可变哈希集，其中包含指定序列中的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable hash set of its contents, and uses the specified equality comparer for the set type.">枚举序列，生成其内容的不可变哈希集，并为集类型使用指定的相等性比较器。</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">要枚举的序列。</param>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">用于比较集内对象相等性的对象。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中元素的类型。</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence and uses the specified equality comparer.">一个不可变哈希集，该集包含指定序列中的项，并使用指定的相等性比较器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable hash set from the current contents of the builder's set.">从生成器集的当前内容创建不可变哈希集。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable hash set from.">要从中创建不可变哈希集的生成器。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the hash set.">哈希集中元素的类型。</typeparam>
      <returns vsli:raw="An immutable hash set that contains the current contents in the builder's set.">包含生成器集中的当前内容的不可变哈希集。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary vsli:raw="Represents an immutable, unordered hash set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示不可变未排序哈希集。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="The type of elements in the hash set.">哈希集中的元素类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to the hash set.">将指定的元素添加到哈希集。</summary>
      <param name="item" vsli:raw="The element to add to the set.">要添加到集中的元素。</param>
      <returns vsli:raw="A hash set that contains the added value and any values previously held by the  &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; object.">包含添加的值和之前由 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> 对象保存的任何值的哈希集。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary vsli:raw="Represents a hash set that mutates with little or no memory allocations and that can produce or build on immutable hash set instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示一个只需少量或者无需内存分配就能转变，并且可以有效生成不可变哈希集实例或者构建于此类实例之上的哈希集。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable hash set.">将指定项添加到不可变哈希集。</summary>
      <param name="item" vsli:raw="The item to add.">要添加的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item did not already belong to the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该项尚不属于集合，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable hash set.">从不可变哈希集内移除所有项。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The hash set is read-only.">哈希集为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable hash set contains a specific value.">确定不可变哈希集是否包含特定值。</summary>
      <param name="item" vsli:raw="The object to locate in the hash set.">要在哈希集内查找的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the hash set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在哈希集内找到 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable hash set.">获取不可变哈希集包含的元素数。</summary>
      <returns vsli:raw="The number of elements contained in the immutable hash set.">不可变哈希集包含的元素数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current hash set.">从当前哈希集内移除指定集合中的所有元素。</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">要从集内移除的项的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable hash set.">返回一个循环访问不可变哈希集的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">一个可用于循环访问集的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">修改当前集，使该集仅包含也存在在指定集合中的元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">确定当前集是否为指定集合的真（严格）子集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是 <paramref name="other" /> 的真子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">确定当前集是否为指定集合的真（严格）超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是 <paramref name="other" /> 的真超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">确定当前集是否为指定集合的子集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是 <paramref name="other" /> 的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">确定当前集是否为指定集合的超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是 <paramref name="other" /> 的超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">获取或设置键比较器。</summary>
      <returns vsli:raw="The key comparer.">键比较器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">确定当前集是否与指定的集合重叠。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集与 <paramref name="other" /> 至少共享一个通用元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable hash set.">从不可变哈希集内移除特定对象的第一个匹配项。</summary>
      <param name="item" vsli:raw="The object to remove from the set.">要从集内移除的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original set.">如果从集内成功移除了 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。 如果在原始集内未找到 <paramref name="item" />，此方法也会返回 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">该集为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">确定当前集与指定的集合是否包含相同的元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集等于 <paramref name="other" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">修改当前集，使该集仅包含存在于当前集或指定集合中的元素（但不同时存在于两者中）。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the hash set.">将某个项添加到哈希集。</summary>
      <param name="item" vsli:raw="The object to add to the set.">要添加到集内的对象。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">该集为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the hash set to an array, starting at a particular array index.">从特定的数组索引开始，将哈希集的元素复制到一个数组中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the hash set. The array must have zero-based indexing.">作为从哈希集复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">返回一个循环访问集合的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">返回循环访问集合的枚举数。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable hash set based on the contents of this instance.">基于此实例的内容创建一个不可变哈希集。</summary>
      <returns vsli:raw="An immutable set.">不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">修改当前集，使该集包含同时存在于当前集和指定集合中的所有元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable hash set that has the same sorting and ordering semantics as this instance.">检索排序和顺序语义与此实例相同的空不可变哈希集。</summary>
      <returns vsli:raw="An empty hash set that has the same sorting and ordering semantics as this instance.">排序和顺序语义与此实例相同的空哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable hash set contains the specified element.">确定此不可变哈希集是否包含指定的元素。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable hash set.">要在不可变哈希集中查找的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable hash set.">获取不可变哈希集内的元素数。</summary>
      <returns vsli:raw="The number of elements in the hash set.">哈希集内的元素数。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary vsli:raw="Gets an immutable hash set for this type that uses the default &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">获取此类型的、使用默认 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 的不可变哈希集。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable hash set without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">枚举不可变哈希集的内容，而无需分配任何内存。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">获取枚举数当前位置的元素。</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">位于枚举器当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator&quot; /&gt; class.">释放 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" /> 类的当前实例使用的资源。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable hash set.">将枚举器推进到不可变哈希集的下一个元素。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the hash set.">如果枚举器已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举器已传递到哈希集的末尾，则为 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">创建枚举器后修改了哈希集。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the hash set.">将枚举器设置到其初始位置，该位置位于哈希集内的第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">创建枚举器后修改了哈希集。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">获取当前元素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable hash set.">从当前不可变哈希集内移除指定集合中的元素。</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">要从此集内移除的项的集合。</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">已移除项的新集；如果原始集不包含任何项，则为原始集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">返回一个循环访问集合的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains elements that exist in both this set and the specified set.">创建一个不可变哈希集，其中包含同时存在于此集和指定集内的元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">一个新的不可变集，其中包含同时存在于两个集内的所有元素。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the current immutable hash set is empty.">获取一个值，该值指示当前不可变哈希集是否为空。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此实例为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) subset of a specified collection.">确定当前不可变哈希集是否为指定集合的真（严格）子集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是指定集合的真子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) superset of a specified collection.">确定当前不可变哈希集是否为指定集合的真（严格）超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是指定集合的真超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a subset of a specified collection.">确定当前不可变哈希集是否为指定集合的子集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是指定集合的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a superset of a specified collection.">确定当前不可变哈希集是否为指定集合的超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是指定集合的超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary vsli:raw="Gets the object that is used to obtain hash codes for the keys and to check the equality of values in the immutable hash set.">获取用于获得键的哈希代码，以及用于检查不可变哈希集内值的相等性的对象。</summary>
      <returns vsli:raw="The comparer used to obtain hash codes for the keys and check equality.">用于获取键的哈希代码以及检查相等性的比较器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set overlaps with the specified collection.">确定当前不可变哈希集是否与指定的集合重叠。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集与指定的集合至少共享一个通用元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable hash set.">从此不可变哈希集内移除指定的元素。</summary>
      <param name="item" vsli:raw="The element to remove.">要移除的元素。</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">已移除指定元素的新集，或者当前集（如果在该集内找不到该元素）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set and the specified collection contain the same elements.">确定当前不可变哈希集与指定的集合是否包含相同的元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains only elements that are present either in the current set or in the specified collection, but not both.">创建一个不可变哈希集，该集仅包含存在于当前集或指定集合（但不同时存在于两者中）中的元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">一个新集，该集包含仅存在于当前集或指定集合中（但不同时存在于两者中）的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the set.">将某项添加到集内。</summary>
      <param name="item" vsli:raw="The object to add to the set.">要添加到集内的对象。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">该集为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from this set.">从此集内移除所有项。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">该集为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">从特定的索引开始，将集的元素复制到一个数组中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">一维数组，它是从集内复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">请参阅 <see cref="T:System.Collections.Generic.ICollection`1" /> 接口。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">从集内移除特定对象的第一个匹配项。</summary>
      <param name="item" vsli:raw="The object to remove from the set.">要从集内移除的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">返回一个循环访问集合的枚举器。</summary>
      <returns vsli:raw="An enumerator that iterates through the collection.">一个循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value that indicates whether the element was successfully added.">向当前集内添加元素，并返回一个指示是否已成功添加元素的值。</summary>
      <param name="item" vsli:raw="The element to add to the collection.">要添加到集合中的元素。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">如果该元素已添加到集内，则为 <see langword="true" />；如果该元素已在集内，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">从当前集内移除指定集合中的所有元素。</summary>
      <param name="other" vsli:raw="The collection of items to remove.">要移除的项的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">修改当前集，使该集仅包含也存在在指定集合中的元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current collection.">要与当前集合进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">修改当前集，使该集仅包含存在于当前集或指定集合中的元素（但不同时存在于两者中）。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or in the specified collection.">修改当前集，使该集包含当前集或指定集合中存在的所有元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">从特定的索引开始，将集的元素复制到一个数组中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">一维数组，它是从集内复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">请参阅 <see cref="T:System.Collections.ICollection" /> 接口。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">请参阅 <see cref="T:System.Collections.ICollection" />。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a set.">返回一个循环访问集的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">一个可用于循环访问集的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">将指定的元素添加到此不可变集。</summary>
      <param name="item" vsli:raw="The element to add.">要添加的元素。</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">已添加元素的新集，或者此集（如果该元素已在此集内）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty set that has the same sorting and ordering semantics as this instance.">检索排序和顺序语义与此实例相同的空集。</summary>
      <returns vsli:raw="An empty set that has the same sorting or ordering semantics as this instance.">排序或顺序语义与此实例相同的空集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current set.">从当前集内移除指定集合中的元素。</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">要从此集内移除的项的集合。</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">已移除项的新集；如果原始集不包含任何项，则为原始集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">创建一个不可变集，其中包含同时存在于此集和指定集内的元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">一个新的不可变集，其中包含同时存在于两个集内的所有元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">从此不可变集内移除指定的元素。</summary>
      <param name="item" vsli:raw="The element to remove.">要移除的元素。</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">已移除指定元素的新集，或者当前集（如果在该集内找不到该元素）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">创建一个不可变集，该集仅包含存在于当前集或指定集合（但不同时存在于两者中）中的元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">一个新集，该集包含仅存在于当前集或指定集合中（但不同时存在于两者中）的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">创建一个新的不可变集，该集包含存在于当前集或指定集合中的所有元素。</summary>
      <param name="other" vsli:raw="The collection to add elements from.">从中添加元素的集合。</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">已添加项的新不可变集；或者原始集（如果所有项已在该集内）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary vsli:raw="Creates an immutable hash set that has the same contents as this set and can be efficiently mutated across multiple operations by using standard mutable interfaces.">创建一个其内容与此集相同，并且可使用标准可变接口在多个操作之间有效转变的不可变哈希集。</summary>
      <returns vsli:raw="A set with the same contents as this set that can be efficiently mutated across multiple operations by using standard mutable interfaces.">一个其内容与此集相同，并且可使用标准可变接口在多个操作之间有效转变的集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">在集内搜索给定的值，并返回所找到的相等值（如果有）。</summary>
      <param name="equalValue" vsli:raw="The value to search for.">要搜索的值。</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">搜索操作在集内找到的值；如果搜索操作未生成任何匹配项，则返回原始值。</param>
      <returns vsli:raw="A value indicating whether the search was successful.">一个指示搜索是否成功的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable hash set that contains all elements that are present in either the current set or in the specified collection.">创建一个新的不可变哈希集，该集包含存在于当前集或指定集合中的所有元素。</summary>
      <param name="other" vsli:raw="The collection to add elements from.">从中添加元素的集合。</param>
      <returns vsli:raw="A new immutable hash set with the items added; or the original set if all the items were already in the set.">已添加项的新不可变哈希集；或者原始集（如果所有项已在该集内）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable hash set that uses the specified equality comparer for its search methods.">获取将指定的相等性比较器用于其搜索方法的不可变哈希集实例。</summary>
      <param name="equalityComparer" vsli:raw="The equality comparer to use.">要使用的相等性比较器。</param>
      <returns vsli:raw="An instance of this immutable hash set that uses the given comparer.">此不可变哈希集的、使用给定比较器的实例。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary vsli:raw="Contains interlocked exchange mechanisms for immutable collections.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">包含不可变集合的联锁交换机制。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">从添加值或更新现有条目后从字典中获取该值。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">当指定的值不在字典中时以原子方式更新的变量或字段。</param>
      <param name="key" vsli:raw="The key for the value to add or update.">要添加或更新的值的键。</param>
      <param name="addValue" vsli:raw="The value to use if no previous value exists.">以前的值不存在时要使用的值。</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">用于接收键和先前值，并返回用于更新字典的新值的函数。</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">字典存储的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">字典存储的值的类型。</typeparam>
      <returns vsli:raw="The added or updated value.">添加或更新的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">从添加值或更新现有条目后从字典中获取该值。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">当指定的值不在字典中时以原子方式更新的变量或字段。</param>
      <param name="key" vsli:raw="The key for the value to add or update.">要添加或更新的值的键。</param>
      <param name="addValueFactory" vsli:raw="The function that receives the key and returns a new value to add to the dictionary when no value previously exists.">用于接收键，并在以前不存在任何值时返回要添加到字典中的新值的函数。</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">用于接收键和先前值，并返回用于更新字典的新值的函数。</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">字典存储的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">字典存储的值的类型。</typeparam>
      <returns vsli:raw="The added or updated value.">添加或更新的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary vsli:raw="Atomically enqueues an element to the end of a queue.">以原子方式将某个元素排到队列的末尾。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">以原子方式更新的变量或字段。</param>
      <param name="value" vsli:raw="The value to enqueue.">要排队的值。</param>
      <typeparam name="T" vsli:raw="The type of items contained in the collection.">集合中包含的项的类型</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">从字典中获取指定键的值；如果未找到该键，则向字典中添加新值。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified key is not in the dictionary.">当指定的键不在字典中时以原子方式更新的变量或字段。</param>
      <param name="key" vsli:raw="The key for the value to get or add.">要获取或添加的值的键。</param>
      <param name="value" vsli:raw="The value to add to the dictionary the key is not found.">未找到键时要添加到字典中的值。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">集合中包含的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">集合中包含的值的类型。</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">位于指定键处的值；如果该键不存在，则为 <paramref name="valueFactory" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">从字典中获取指定键的值；如果未找到该键，则向字典中添加新值。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">当指定的值不在字典中时以原子方式更新的变量或字段。</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">要检索或添加的值的键。</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found. This delegate will not be invoked more than once.">在未找到键时，为了获取要插入到字典中的值而要执行的函数。 将不会多次调用此委托。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">集合中包含的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">集合中包含的值的类型。</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">位于指定键处的值；如果该键不存在，则为 <paramref name="valueFactory" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">从字典中获取指定键的值；如果未找到该键，则向字典中添加新值。</summary>
      <param name="location" vsli:raw="The variable or field to update if the specified is not in the dictionary.">当指定的值不在字典中时要更新的变量或字段。</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">要检索或添加的值的键。</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found.">在未找到键时，为了获取要插入到字典中的值而要执行的函数。</param>
      <param name="factoryArgument" vsli:raw="The argument to pass to the value factory.">要传递给值工厂的参数。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">集合中包含的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">集合中包含的值的类型。</typeparam>
      <typeparam name="TArg" vsli:raw="The type of the argument supplied to the value factory.">提供给值工厂的自变量的类型。</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">位于指定键处的值；如果该键不存在，则为 <paramref name="valueFactory" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.">比较两个不可变数组是否相等，如果相等，则替换其中一个数组。</summary>
      <param name="location" vsli:raw="The destination, whose value is compared with &lt;paramref name=&quot;comparand&quot; /&gt; and possibly replaced.">其值将与 <paramref name="comparand" /> 进行比较并且可能被替换的目标。</param>
      <param name="value" vsli:raw="The value that replaces the destination value if the comparison results in equality.">比较结果相等时替换目标值的值。</param>
      <param name="comparand" vsli:raw="The value that is compared to the value at &lt;paramref name=&quot;location&quot; /&gt;.">与位于 <paramref name="location" /> 处的值进行比较的值。</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">数组存储的元素的类型。</typeparam>
      <returns vsli:raw="The original value in &lt;paramref name=&quot;location&quot; /&gt;.">
        <paramref name="location" /> 中的原始值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array and returns a reference to the original array, as an atomic operation.">以原子操作的形式将某个数组设置为指定的数组，并返回对原始数组的引用。</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">要设置为指定值的数组。</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set.">
        <paramref name="location" /> 参数要设置成的值。</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">数组存储的元素的类型。</typeparam>
      <returns vsli:raw="The original value of &lt;paramref name=&quot;location&quot; /&gt;.">
        <paramref name="location" /> 的原始值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array if the array has not been initialized.">如果某个数组尚未初始化，则将该数组设置为指定的数组。</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">要设置为指定值的数组。</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set, if it's not initialized.">
        <paramref name="location" /> 参数要设置成的值（如果该参数尚未初始化）。</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">数组存储的元素的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array was assigned the specified value;  otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果为数组分配了指定的值，则为 <see langword="true" />； 否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary vsli:raw="Pushes a new element onto the stack.">将新元素推送到堆栈。</summary>
      <param name="location" vsli:raw="The stack to update.">要更新的堆栈。</param>
      <param name="value" vsli:raw="The value to push on the stack.">要推送到堆栈的值。</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">堆栈中项的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Adds the specified key and value to the dictionary if the key is not in the dictionary.">将指定的键和值添加到字典（如果该键不在字典中）。</summary>
      <param name="location" vsli:raw="The dictionary to update with the specified key and value.">要使用指定的键和值更新的字典。</param>
      <param name="key" vsli:raw="The key to add, if is not already defined in the dictionary.">要添加的键（如果字典中尚未定义该键）。</param>
      <param name="value" vsli:raw="The value to add.">要添加的值。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">集合中包含的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">集合中包含的值的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is not in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该键不在字典中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary vsli:raw="Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.">以原子方式移除和返回位于队列开头处的指定元素（如果队列不为空）。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">以原子方式更新的变量或字段。</param>
      <param name="value" vsli:raw="Set to the value from the head of the queue, if the queue not empty.">设置为队列开头位置的值（如果队列不为空）。</param>
      <typeparam name="T" vsli:raw="The type of items in the queue.">队列中项的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the queue is not empty and the head element is removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果队列不为空并且已移除头元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary vsli:raw="Removes an element from the top of the stack, if there is an element to remove.">如果有要移除的元素，则从堆栈顶部移除一个元素。</summary>
      <param name="location" vsli:raw="The stack to update.">要更新的堆栈。</param>
      <param name="value" vsli:raw="Receives the value removed from the stack, if the stack is not empty.">如果堆栈不为空，则接收已从堆栈中移除的值。</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">堆栈中项的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element is removed from the stack; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果从堆栈中移除了一个元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary vsli:raw="Removes the element with the specified key, if the key exists.">移除具有指定键的元素（如果该键存在）。</summary>
      <param name="location" vsli:raw="The dictionary to update.">要更新的字典。</param>
      <param name="key" vsli:raw="The key to remove.">要移除的键。</param>
      <param name="value" vsli:raw="Receives the value of the removed item, if the dictionary is not empty.">如果字典不为空，则接收已移除项的值。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">集合中包含的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">集合中包含的值的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到并移除了该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary vsli:raw="Sets the specified key to the specified value if the specified key already is set to a specific value.">如果指定的键已设置为特定值，则将指定的键设置为指定的值。</summary>
      <param name="location" vsli:raw="The dictionary to update.">要更新的字典。</param>
      <param name="key" vsli:raw="The key to update.">要更新的键。</param>
      <param name="newValue" vsli:raw="The new value to set.">要设置的新值。</param>
      <param name="comparisonValue" vsli:raw="The current value for &lt;paramref name=&quot;key&quot; /&gt; in order for the update to succeed.">返回 <paramref name="key" /> 的当前值，以便更新能够成功。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">集合中包含的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">集合中包含的值的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; and &lt;paramref name=&quot;comparisonValue&quot; /&gt; are present in the dictionary and comparison was updated to &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 和 <paramref name="key" /> 在字典中存在并且比较已更新为 <paramref name="comparisonValue" />，则为 <paramref name="newValue" />； 否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">通过指定转换函数使用乐观锁定事务语义就地改变值。             可根据需要多次重试转换，以赢取乐观锁定争用。</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">要更改的变量或字段，可通过多个线程进行访问。</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">可改变值的函数。 此函数应无任何副作用，因为在与其他线程发生争用时，该函数可能运行多次。</param>
      <typeparam name="T" vsli:raw="The type of data.">数据的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">如果位置值是通过应用 <see langword="true" /> 函数的结果而更改，则为 <paramref name="transformer" />；如果位置值因上次调用 <see langword="false" /> 返回的现有值而保持不变，则为 <paramref name="transformer" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">通过指定转换函数使用乐观锁定事务语义就地改变值。             可根据需要多次重试转换，以赢取乐观锁定争用。</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">要更改的变量或字段，可通过多个线程进行访问。</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">可改变值的函数。 此函数应无任何副作用，因为在与其他线程发生争用时，该函数可能运行多次。</param>
      <param name="transformerArgument" vsli:raw="The argument to pass to &lt;paramref name=&quot;transformer&quot; /&gt;.">要传递给 <paramref name="transformer" /> 的参数。</param>
      <typeparam name="T" vsli:raw="The type of data.">数据的类型。</typeparam>
      <typeparam name="TArg" vsli:raw="The type of argument passed to the &lt;paramref name=&quot;transformer&quot; /&gt;.">传递给 <paramref name="transformer" />的参数的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">如果位置值是通过应用 <see langword="true" /> 函数的结果而更改，则为 <paramref name="transformer" />；如果位置值因上次调用 <see langword="false" /> 返回的现有值而保持不变，则为 <paramref name="transformer" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">针对 <see cref="T:System.Collections.Immutable.ImmutableList`1" /> 类的实例提供一组初始化方法。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary vsli:raw="Creates an empty immutable list.">创建一个空的不可变列表。</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the .">要存储在  中的项的类型。</typeparam>
      <returns vsli:raw="An empty immutable list.">空的不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable list that contains the specified item.">创建包含指定项的新不可变列表。</summary>
      <param name="item" vsli:raw="The item to prepopulate the list with.">用于预先填充列表的项。</param>
      <typeparam name="T" vsli:raw="The type of items in the .">中项的类型。</typeparam>
      <returns vsli:raw="A new  that contains the specified item.">一个包含指定项的新  。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable list that contains the specified array of items.">创建包含指定项数组的新不可变列表。</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the list with.">一个数组，其中包含用于预先填充列表的项。</param>
      <typeparam name="T" vsli:raw="The type of items in the .">中项的类型。</typeparam>
      <returns vsli:raw="A new immutable list that contains the specified items.">包含指定项的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable list builder.">创建一个新的不可变列表生成器。</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">集合存储的项的类型。</typeparam>
      <returns vsli:raw="The immutable collection builder.">不可变集合生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable list that contains the specified items.">创建包含指定项的新不可变列表。</summary>
      <param name="items" vsli:raw="The items to add to the list.">要添加到列表中的项。</param>
      <typeparam name="T" vsli:raw="The type of items in the .">中项的类型。</typeparam>
      <returns vsli:raw="An immutable list that contains the specified items.">包含指定项的不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">搜索指定的对象，并返回列表中第一个匹配项的从零开始的索引。</summary>
      <param name="list" vsli:raw="The list to search.">要搜索的列表。</param>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">要在列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">列表中项的类型。</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that extends from index to the last element, if found; otherwise, -1.">如果在列表中从索引到最后一个元素的元素范围内找到项的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">搜索指定的对象，并返回列表中第一个匹配项的从零开始的索引。</summary>
      <param name="list" vsli:raw="The list to search.">要搜索的列表。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">要在不可变列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">要在搜索中使用的相等性比较器。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">列表中项的类型。</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from index to the last element, if found; otherwise, -1.">如果在不可变列表中从索引到最后一个元素的元素范围内找到第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">搜索指定对象并返回不可变列表中从指定索引到最后一个元素这部分元素中第一个匹配项的从零开始索引。</summary>
      <param name="list" vsli:raw="The list to search.">要搜索的列表。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">要在不可变列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">列表中项的类型。</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">如果在不可变列表中从索引到最后一个元素的元素范围内找到第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">搜索指定对象并返回不可变列表中从指定索引到最后一个元素这部分元素中第一个匹配项的从零开始索引。</summary>
      <param name="list" vsli:raw="The list to search.">要搜索的列表。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">要在不可变列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">要搜索的部分中的元素数。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">列表中项的类型。</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">如果在不可变列表中从索引到最后一个元素的元素范围内找到第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">搜索指定的对象，并返回整个不可变列表中最后一个匹配项的从零开始的索引。</summary>
      <param name="list" vsli:raw="The list to search.">要搜索的列表。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">要在不可变列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">列表中项的类型。</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">如果找到，则为整个不可变列表中项的最后一个匹配项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">搜索指定的对象，并返回整个不可变列表中最后一个匹配项的从零开始的索引。</summary>
      <param name="list" vsli:raw="The list to search.">要搜索的列表。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">要在不可变列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">要在搜索中使用的相等性比较器。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">列表中项的类型。</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">如果找到，则为整个不可变列表中项的最后一个匹配项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">搜索指定对象并返回不可变列表中从第一个元素到指定索引这部分元素中最后一个匹配项的从零开始的索引。</summary>
      <param name="list" vsli:raw="The list to search.">要搜索的列表。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">要在不可变列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">向后搜索的从零开始的起始索引。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">列表中项的类型。</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">如果在不可变列表中从第一个元素到索引的元素范围内找到项的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">搜索指定对象并返回不可变列表中从第一个元素到指定索引这部分元素中最后一个匹配项的从零开始的索引。</summary>
      <param name="list" vsli:raw="The list to search.">要搜索的列表。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">要在不可变列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">向后搜索的从零开始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">要搜索的部分中的元素数。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">列表中项的类型。</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">如果在不可变列表中从第一个元素到索引的元素范围内找到项的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Removes the specified value from this list.">从此列表中移除指定的值。</summary>
      <param name="list" vsli:raw="The list to search.">要搜索的列表。</param>
      <param name="value" vsli:raw="The value to remove.">要移除的值。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">列表中项的类型。</typeparam>
      <returns vsli:raw="A new immutable list with the element removed, or this list if the element is not in this list.">已移除元素的新不可变列表，或者此列表（如果该元素不在此列表中）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Removes the specified values from this list.">从此列表中移除指定的值。</summary>
      <param name="list" vsli:raw="The list to search.">要搜索的列表。</param>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">在此列表中找到匹配项时要移除的项。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">列表中项的类型。</typeparam>
      <returns vsli:raw="A new immutable list with the elements removed.">已移除元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary vsli:raw="Replaces the first equal element in the list with the specified element.">将列表中第一个相等的元素替换为指定的元素。</summary>
      <param name="list" vsli:raw="The list to search.">要搜索的列表。</param>
      <param name="oldValue" vsli:raw="The element to replace.">要替换的元素。</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">用于替换旧元素的元素。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">列表中项的类型。</typeparam>
      <returns vsli:raw="The new list -- even if the value being replaced is equal to the new value for that position.">新列表 - 即使被替换的值等于该位置的新值。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">在列表中不存在旧值时引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable list of its contents.">枚举序列，并生成其内容的不可变列表。</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">要枚举的序列。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中元素的类型。</typeparam>
      <returns vsli:raw="An immutable list that contains the items in the specified sequence.">一个不可变列表，其中包含指定序列中的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary vsli:raw="Creates an immutable list from the current contents of the builder's collection.">从生成器集合的当前内容创建不可变列表。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable list from.">要从中创建不可变列表的生成器。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the list.">列表中元素的类型。</typeparam>
      <returns vsli:raw="An immutable list that contains the current contents in the builder's collection.">包含生成器集合中的当前内容的不可变列表。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary vsli:raw="Represents an immutable list, which is a strongly typed list of objects that can be accessed by index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示一个不可变列表，该列表是可按索引访问的对象的强类型列表。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">列表中元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary vsli:raw="Adds the specified object to the end of the immutable list.">将指定的对象添加到不可变列表末尾。</summary>
      <param name="value" vsli:raw="The object to add.">要添加的对象。</param>
      <returns vsli:raw="A new immutable list with the object added.">已添加对象的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the elements of the specified collection to the end of the immutable list.">将指定集合的元素添加到不可变列表的末尾。</summary>
      <param name="items" vsli:raw="The collection whose elements will be added to the end of the list.">其元素应添加到列表末尾的集合。</param>
      <returns vsli:raw="A new immutable list with the elements added.">已添加元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire sorted list for an element using the default comparer and returns the zero-based index of the element.">使用默认的比较器在整个已排序的列表中搜索元素，并返回该元素从零开始的索引。</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要定位的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">如果找到项，则为已排序的列表中项的从零开始的索引；否则为一个负数，该负数是大于项的第一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.ICollection.Count" /> 的按位求补。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer cannot find a comparer implementation of the for type T.">默认比较器找不到 T 类型的比较器实现。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire sorted list for an element using the specified comparer and returns the zero-based index of the element.">使用指定的比较器在整个已排序的列表中搜索元素，并返回该元素从零开始的索引。</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">要定位的对象。 对于引用类型，该值可以为 null。</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements or null to use the default comparer.">比较元素时要使用的比较器实现，或者为 null，表示使用默认比较器。</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">如果找到项，则为已排序的列表中项的从零开始的索引；否则为一个负数，该负数是大于项的第一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.ICollection.Count" /> 的按位求补。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="comparer is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">比较器为 <see langword="null" />，默认比较器找不到 T 类型的比较器实现。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches a range of elements in the sorted list for an element using the specified comparer and returns the zero-based index of the element.">使用指定的比较器在已排序列表的某个元素范围中搜索元素，并返回该元素从零开始的索引。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">要搜索范围的从零开始的起始索引。</param>
      <param name="count" vsli:raw="The length of the range to search.">要搜索的范围的长度。</param>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">要定位的对象。 对于引用类型，该值可以为 null。</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">比较元素时要使用的比较器实现，或者为 <see langword="null" />，表示使用默认比较器。</param>
      <returns vsli:raw="The zero-based index of item in the sorted list, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;paramref name=&quot;count&quot; /&gt;.">如果找到项，则为已排序的列表中项的从零开始的索引；否则为一个负数，该负数是大于项的第一个元素的索引的按位求补。如果没有更大的元素，则为 <paramref name="count" /> 的按位求补。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="index is less than 0 or &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">索引小于 0，或 <paramref name="count" />小于 0。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="index and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the list.">索引和 <paramref name="count" /> 不表示列表中的有效范围。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">
        <paramref name="comparer" /> 为 <see langword="null" />，默认比较器找不到 T 类型的比较器实现。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary vsli:raw="Represents a list that mutates with little or no memory allocations and that can produce or build on immutable list instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示一个只需少量或者无需内存分配就能转变，并且可以有效生成不可变列表实例或者构建于此类实例之上的列表。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an item to the immutable list.">将项添加到不可变列表。</summary>
      <param name="item" vsli:raw="The item to add to the list.">要添加到列表的项。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a series of elements to the end of this list.">将一系列元素添加到此列表的末尾。</summary>
      <param name="items" vsli:raw="The elements to add to the end of the list.">要添加到列表末尾的元素。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the default comparer and returns the zero-based index of the element.">使用默认比较器在整个 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中搜索元素，并返回该元素的从零开始的索引。</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">要定位的对象。 对于引用类型，该值可以为 null。</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">如果找到项，则为 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中项的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item" /> 的下一个元素的索引的按位求补。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">此默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 无法找到 <see cref="T:System.IComparable`1" /> 泛型接口或类型 T 的 <see cref="T:System.IComparable" /> 接口的实现。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">使用指定的比较器在整个 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中搜索元素，并返回该元素从零开始的索引。</summary>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">要定位的对象。 对于引用类型，此值可以为 null。</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">比较元素时要使用的实现，若要使用默认比较器，则为 <see langword="null" />。</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">如果找到项，则为 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中项的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item" /> 的下一个元素的索引的按位求补。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> 为 <see langword="null" />，并且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型接口或类型 T 的 <see cref="T:System.IComparable" /> 接口的实现。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the specified range of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">使用指定的比较器在 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 的指定范围内搜索元素，并返回该元素从零开始的索引。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">要搜索范围的从零开始的起始索引。</param>
      <param name="count" vsli:raw="The length of the range to search.">要搜索的范围的长度。</param>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">要定位的对象。 对于引用类型，此值可以为 null。</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">比较元素时要使用的实现，若要使用默认比较器，则为 <see langword="null" />。</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">如果找到项，则为 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中项的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item" /> 的下一个元素的索引的按位求补。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> 小于 0。

或 -

<paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.Generic.List`1" /> 中的有效范围。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> 为 <see langword="null" />，并且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型接口或类型 T 的 <see cref="T:System.IComparable" /> 接口的实现。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable list.">从不可变列表中移除所有项。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">确定不可变列表是否包含特定值。</summary>
      <param name="item" vsli:raw="The object to locate in the list.">要在列表中查找的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在列表中找到该项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Creates a new immutable list from the list represented by this builder by using the converter function.">使用转换器函数从此生成器表示的列表创建一个新的不可变列表。</summary>
      <param name="converter" vsli:raw="The converter function.">转换器函数。</param>
      <typeparam name="TOutput" vsli:raw="The type of the output of the delegate converter function.">委托转换器函数的输出的类型。</typeparam>
      <returns vsli:raw="A new immutable list from the list represented by this builder.">从此生成器表示的列表创建的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">从目标数组的开头开始，将整个不可变列表复制到兼容的一维数组。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">一维数组，它是从不可变列表复制的元素的目标。 该数组的索引必须从零开始。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">从目标数组的指定索引处开始，将整个不可变列表复制到兼容的一维数组。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">一维数组，它是从不可变列表复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">数组中从零开始的索引，在此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">从目标数组的指定索引处开始，将整个不可变列表复制到兼容的一维数组。</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">源不可变列表中从零开始的索引，在此处开始复制。</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">一维数组，它是从不可变列表复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <param name="count" vsli:raw="The number of elements to copy.">要复制的元素数。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable list.">获取此不可变列表中的元素数。</summary>
      <returns vsli:raw="The number of elements in this list.">此列表中的元素数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">确定不可变列表是否包含与指定谓词定义的条件匹配的元素。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">委托，用于定义要搜索的元素应满足的条件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果不可变列表包含一个或多个元素与指定谓词定义的条件匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">搜索与指定谓词所定义的条件相匹配的元素，并返回整个不可变列表中的第一个匹配元素。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">如果找到与指定谓词定义的条件匹配的第一个元素，则为该元素；否则为类型 <paramref name="T" /> 的默认值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">检索与指定谓词定义的条件匹配的所有元素。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">委托，用于定义要搜索的元素应满足的条件。</param>
      <returns vsli:raw="An immutable list containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">如果找到一个其中所有元素均与指定谓词定义的条件匹配的不可变列表，则为该数组；否则为一个空不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">搜索与指定谓词所定义的条件相匹配的一个元素，并返回不可变列表中从指定的索引开始、包含指定元素个数的元素范围内第一个匹配项的从零开始的索引。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">从零开始的搜索的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">要搜索的部分中的元素数。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">搜索与指定谓词所定义的条件相匹配的元素，并返回不可变列表中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">从零开始的搜索的起始索引。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">搜索与指定谓词所定义的条件相匹配的元素，并返回整个不可变列表中第一个匹配元素的从零开始的索引。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">搜索与指定谓词所定义的条件相匹配的元素，并返回整个不可变列表中的最后一个匹配元素。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">如果找到，则为与指定谓词所定义的条件相匹配的最后一个元素；否则为类型 <paramref name="T" /> 的默认值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">搜索与指定谓词所定义的条件相匹配的元素，并返回不可变列表中包含指定元素个数、到指定索引结束的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">向后搜索的从零开始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">要搜索的部分中的元素数。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">搜索与指定谓词所定义的条件相匹配的元素，并返回不可变列表中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">向后搜索的从零开始的起始索引。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">搜索与指定谓词所定义的条件相匹配的元素，并返回整个不可变列表中最后一个匹配元素的从零开始的索引。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the list.">对列表的每个元素执行指定操作。</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the list.">要对列表的每个元素执行的委托。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">返回一个循环访问集合的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">一个可用于循环访问列表的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">在源不可变列表中创建元素范围的浅表复制。</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">范围开始处的从零开始的索引。</param>
      <param name="count" vsli:raw="The number of elements in the range.">范围中的元素数。</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">在源不可变列表中元素范围的浅表复制。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list.">搜索指定的对象，并返回不可变列表中元素范围内第一个匹配项的从零开始的索引。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list, if found; otherwise, -1.">如果找到，则为不可变列表中元素范围内第一个 <paramref name="item" /> 的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">搜索指定对象并返回不可变列表中从指定索引到最后一个元素这部分元素中第一个匹配项的从零开始索引。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from &lt;paramref name=&quot;index&quot; /&gt; to the last element, if found; otherwise, -1.">如果在不可变列表中从 <paramref name="index" /> 到最后一个元素的元素范围内找到项的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">搜索指定对象并返回不可变列表中从指定索引开始并包含指定元素数的这部分元素中第一个匹配项的从零开始的索引。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">要搜索的部分中的元素数。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1.">如果在不可变列表中从 <paramref name="index" /> 开始并包含 <paramref name="count" /> 个元素的元素范围内找到项的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; that starts at the specified index and contains the specified number of elements.">搜索指定对象并返回 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中从指定索引开始并包含指定元素数的这部分元素中第一个匹配项的从零开始索引。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜索的元素数。</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">用于比较元素相等性的值比较器。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">如果在不可变列表中从 <paramref name="index" /> 开始并包含 <paramref name="count" /> 个元素的元素范围内找到项的第一个匹配项，则为该项的从零开始的索引；否则为 -1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item to the immutable list at the specified index.">将项插入到不可变列表中的指定索引处。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">应插入 <paramref name="item" /> 的从零开始的索引。</param>
      <param name="item" vsli:raw="The object to insert into the immutable list.">要插入到不可变列表中的对象。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">将集合的元素插入不可变列表的指定索引处。</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">应在此处插入新元素的从零开始的索引。</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted into the immutable list. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are null, if type &lt;c&gt;T&lt;/c&gt; is a reference type.">应将其元素插入到不可变列表中的集合。 集合自身不能为 <see langword="null" />，但它可以包含为 null 的元素（如果类型 <c>T</c> 为引用类型）。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value for a given index in the list.">获取或设置列表中给定索引的值。</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">要获取或设置的项的索引。</param>
      <returns vsli:raw="The value at the specified index.">位于指定索引处的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the value for a given &lt;paramref name=&quot;index&quot; /&gt; into the list.">获取对列表中给定 <paramref name="index" /> 的值的只读引用。</summary>
      <param name="index" vsli:raw="The index of the desired element.">所需元素的索引。</param>
      <returns vsli:raw="A read-only reference to the value at the specified &lt;paramref name=&quot;index&quot; /&gt;.">对指定 <paramref name="index" /> 处的值的只读引用。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">搜索指定的对象，并返回整个不可变列表中最后一个匹配项的从零开始的索引。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire immutable list, if found; otherwise, -1.">如果找到，则为整个不可变列表中 <paramref name="item" /> 最后一个匹配项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">搜索指定对象并返回不可变列表中从第一个元素到指定索引这部分元素中最后一个匹配项的从零开始的索引。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">向后搜索的从零开始的起始索引。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that extends from the first element to &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">如果在不可变列表中从第一个元素到 <paramref name="item" /> 的元素范围内找到 <paramref name="index" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">搜索指定对象并返回不可变列表中到指定索引为止包含指定元素数的这部分元素中最后一个匹配项的从零开始的索引。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">向后搜索的从零开始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">要搜索的部分中的元素数。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that contains &lt;paramref name=&quot;count&quot; /&gt; number of elements and ends at &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">如果找到包含 <paramref name="item" /> 个元素、到 <paramref name="count" /> 为止的索引，则为不可变列表中元素范围内 <paramref name="index" /> 的最后一个匹配项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">搜索指定对象并返回不可变列表中到指定索引为止包含指定元素数的这部分元素中最后一个匹配项的从零开始的索引。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <param name="count" vsli:raw="The number of elements to search.">要搜索的元素数。</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">用于比较元素相等性的值比较器。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">如果在不可变列表中从 <paramref name="index" /> 开始并包含 <paramref name="count" /> 个元素的元素范围内找到项的第一个匹配项，则为该项的从零开始的索引；否则为 -1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">从不可变列表中移除特定对象的第一个匹配项。</summary>
      <param name="item" vsli:raw="The object to remove from the list.">要从列表中移除的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item is not found in the list.">如果从列表中成功移除了该项，则为 <see langword="true" />；否则为 <see langword="false" />。 如果在列表未找到该项，此方法也会返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">移除与指定的谓词所定义的条件相匹配的所有元素。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">用于定义要移除的元素应满足的条件的委托。</param>
      <returns vsli:raw="The number of elements removed from the immutable list.">从不可变列表中移除的元素数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">移除不可变列表中指定索引处的项。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove from the list.">要从列表中移除的项的从零开始的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">将整个不可变列表中元素的顺序反转。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">将不可变列表的指定范围中元素的顺序反转。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">要反转的范围的从零开始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">要反转的范围内的元素数。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the default comparer.">使用默认比较器对整个不可变列表中的元素进行排序。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparer.">使用指定的比较器对整个不可变列表中的元素进行排序。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">比较元素时要使用的实现，若要使用默认比较器 (<see langword="null" />)，则为 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparison object.">使用指定的比较对象对整个不可变列表中的元素进行排序。</summary>
      <param name="comparison" vsli:raw="The object to use when comparing elements.">比较元素时要使用的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in a range of elements in the immutable list  by using the specified comparer.">使用指定的比较器对不可变列表中某个范围内的元素进行排序。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">要排序范围的从零开始的起始索引。</param>
      <param name="count" vsli:raw="The length of the range to sort.">要排序的范围的长度。</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">比较元素时要使用的实现，若要使用默认比较器 (<see langword="null" />)，则为 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">获取一个值，该值指示此实例是否为只读。</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">总是为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">返回一个循环访问集合的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the list to an array, starting at a particular array index.">从特定的数组索引开始，将列表的元素复制到一个数组中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the list. The array must have zero-based indexing.">一维数组，它是从列表中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">获取一个值，该值指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否同步（线程安全）。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">返回一个循环访问集合的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the list.">将某项添加到列表中。</summary>
      <param name="value" vsli:raw="The object to add to the list.">要添加到列表中的对象。</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">插入了新元素的位置，-1 指示该项未插入到集合中。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the list.">从列表中移除所有项。</summary>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the list contains a specific value.">确定列表是否包含特定值。</summary>
      <param name="value" vsli:raw="The object to locate in the list.">要在列表中查找的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在列表中找到 <see langword="true" />，则为 <see cref="T:System.Object" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the list.">确定列表中特定项的索引。</summary>
      <param name="value" vsli:raw="The object to locate in the list.">要在列表中查找的对象。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the list at the specified index.">将某项插入列表中指定的索引处。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value" vsli:raw="The object to insert into the list.">要插入到列表中的对象。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">获取或设置指定索引处的 <see cref="T:System.Object" />。</summary>
      <param name="index" vsli:raw="The index.">索引。</param>
      <returns vsli:raw="The object at the specified index.">指定索引处的对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the list.">从列表中移除特定对象的第一个匹配项。</summary>
      <param name="value" vsli:raw="The object to remove from the list.">要从列表中移除的对象。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable list based on the contents of this instance.">基于此实例的内容创建一个不可变列表。</summary>
      <returns vsli:raw="An immutable list.">不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">确定不可变列表中的每个元素是否都与指定谓词定义的条件匹配。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">用于定义检查元素时要对照条件的委托。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">如果不可变列表中的每个元素都与指定的谓词所定义的条件相匹配，则为 <see langword="true" />；否则为 <see langword="false" />。 如果列表没有元素，则返回值为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable list.">从不可变列表中移除所有元素。</summary>
      <returns vsli:raw="An empty list that retains the same sort or unordered semantics that this instance has.">一个空列表，其中保留此实例具有的相同排序或未排序语义。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable list contains the specified value.">确定此不可变列表是否包含指定的值。</summary>
      <param name="value" vsli:raw="The value to locate.">要查找的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果列表包含指定的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Converts the elements in the current immutable list to another type, and returns a list containing the converted elements.">将当前不可变列表中的元素转换为另一种类型，并返回包含已转换元素的列表。</summary>
      <param name="converter" vsli:raw="A delegate that converts each element from one type to another type.">一个委托，可将每个元素从一种类型转换为另一种类型。</param>
      <typeparam name="TOutput" vsli:raw="The type of the elements of the target array.">目标数组元素的类型。</typeparam>
      <returns vsli:raw="A list of the target type containing the converted elements from the current &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt;.">目标类型的列表，包含当前 <see cref="T:System.Collections.Immutable.ImmutableList`1" /> 中转换后的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">从目标数组的开头开始，将整个不可变列表复制到兼容的一维数组。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">一维数组，它是从不可变列表复制的元素的目标。 该数组的索引必须从零开始。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">从目标数组的指定索引处开始，将整个不可变列表复制到兼容的一维数组。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">一维数组，它是从不可变列表复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a range of elements from the immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">从目标数组的指定索引处开始，将一系列元素从不可变列表复制到兼容的一维数组。</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">源不可变列表中从零开始的索引，在此处开始复制。</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">一维数组，它是从不可变列表复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">数组中从零开始的索引，在此处开始复制。</param>
      <param name="count" vsli:raw="The number of elements to copy.">要复制的元素数。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the list.">获取列表中包含的元素数。</summary>
      <returns vsli:raw="The number of elements in the list.">列表中元素的数目。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary vsli:raw="Gets an empty immutable list.">获取使用默认排序比较器的空集。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">枚举二进制树的内容。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">获取枚举数当前位置的元素。</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">位于枚举器当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Enumerator&quot; /&gt; class.">释放 <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" /> 类的当前实例使用的资源。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances enumeration to the next element of the immutable list.">将枚举推进到不可变列表的下一个元素。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the list.">如果枚举器已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举器已传递到列表的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable list.">将枚举器设置到其初始位置，该位置位于不可变列表中的第一个元素之前。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">当前元素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">确定不可变列表是否包含与指定谓词定义的条件匹配的元素。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">委托，用于定义要搜索的元素应满足的条件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果不可变列表包含一个或多个元素与指定谓词定义的条件匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">搜索与指定谓词所定义的条件相匹配的元素，并返回整个不可变列表中的第一个匹配元素。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">如果找到与指定谓词定义的条件匹配的第一个元素，则为该元素；否则为类型 <paramref name="T" /> 的默认值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">检索与指定谓词定义的条件匹配的所有元素。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">委托，用于定义要搜索的元素应满足的条件。</param>
      <returns vsli:raw="An immutable list that contains all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">如果找到一个其中所有元素均与指定谓词定义的条件匹配的 不可变列表，则为该数组；否则为一个空不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">搜索与指定谓词所定义的条件相匹配的一个元素，并返回不可变列表中从指定的索引开始、包含指定元素个数的元素范围内第一个匹配项的从零开始的索引。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">从零开始的搜索的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">要搜索的部分中的元素数。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">如果找到与 match 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 ?1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">搜索与指定谓词所定义的条件相匹配的元素，并返回不可变列表中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">从零开始的搜索的起始索引。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">如果找到与 match 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 ?1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">搜索与指定谓词所定义的条件相匹配的元素，并返回整个不可变列表中第一个匹配元素的从零开始的索引。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, -1.">如果找到与 match 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 ?1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">搜索与指定谓词所定义的条件相匹配的元素，并返回整个不可变列表中的最后一个匹配元素。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">如果找到，则为与指定谓词所定义的条件相匹配的最后一个元素；否则为类型 <paramref name="T" /> 的默认值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">搜索与指定谓词所定义的条件相匹配的元素，并返回不可变列表中包含指定元素个数、到指定索引结束的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">向后搜索的从零开始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">要搜索的部分中的元素数。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 ?1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">搜索与指定谓词所定义的条件相匹配的元素，并返回不可变列表中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">向后搜索的从零开始的起始索引。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 ?1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">搜索与指定谓词所定义的条件相匹配的元素，并返回整个不可变列表中最后一个匹配元素的从零开始的索引。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 ?1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the immutable list.">对不可变列表的每个元素执行指定的操作。</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the immutable list.">要对不可变列表的每个元素执行的委托。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">返回一个循环访问不可变列表的枚举器。</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the immutable list.">可用于循环访问不可变列表的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">在源不可变列表中创建元素范围的浅表复制。</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">范围开始处的从零开始的索引。</param>
      <param name="count" vsli:raw="The number of elements in the range.">范围中的元素数。</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">在源不可变列表中元素范围的浅表复制。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the entire immutable list.">搜索指定的对象，并返回整个不可变列表中第一个匹配项的从零开始的索引。</summary>
      <param name="value" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;value&quot; /&gt; within the entire immutable list, if found; otherwise, ?1.">如果找到，则为整个不可变列表中 <paramref name="value" /> 第一个匹配项的从零开始的索引；否则为 ?1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the list that starts at the specified index and contains the specified number of elements.">搜索指定对象并返回列表中从指定索引开始并包含指定元素数的这部分元素中第一个匹配项的从零开始的索引。</summary>
      <param name="item" vsli:raw="The object to locate in the list The value can be null for reference types.">要在列表中找到的对象。对于引用类型，该值可以为 null。</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">要搜索的部分中的元素数。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">要在搜索中使用的相等性比较器。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that starts at index and contains count number of elements, if found; otherwise, -1.">如果在列表中从 index 开始并包含 count 个元素的元素范围内找到 item 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified object into the immutable list at the specified index.">将指定对象插入到不可变列表中的指定索引位置。</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the object.">从零开始的索引，对象将插入到此处。</param>
      <param name="item" vsli:raw="The object to insert.">要插入的对象。</param>
      <returns vsli:raw="The new immutable list after the object is inserted.">插入对象后新的不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">将集合的元素插入不可变列表的指定索引处。</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the elements.">从零开始的索引，元素将插入到此处。</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted.">应插入其元素的集合。</param>
      <returns vsli:raw="The new immutable list after the elements are inserted.">插入元素后新的不可变列表。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this list is empty.">获取一个值，该值指示此列表是否为空。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果列表为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index of the list.">获取位于列表指定索引处的元素。</summary>
      <param name="index" vsli:raw="The index of the element to retrieve.">要检索的元素的索引。</param>
      <returns vsli:raw="The element at the specified index.">指定索引处的元素。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="In a get operation, &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">在 get 操作中，<paramref name="index" /> 为负或不小于 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">获取对给定 <paramref name="index" /> 处的集元素的只读引用。</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">要返回集中的元素从零开始的索引。</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">对给定位置处的元素的只读引用。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">
        <paramref name="index" /> 为负或不小于 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the list that contains the specified number of elements and ends at the specified index.">搜索指定对象并返回列表中到指定索引为止包含指定元素数的这部分元素中最后一个匹配项的从零开始的索引。</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">要在列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">向后搜索的从零开始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">要搜索的部分中的元素数。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">要在搜索中使用的相等性比较器。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the list that contains count number of elements and ends at index, if found; otherwise, -1.">如果找到包含 count 个元素和到 index 为止的索引，则为列表中元素范围内 item 最后一个匹配项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from this immutable list.">从此不可变列表中移除所指定对象的第一个匹配项。</summary>
      <param name="value" vsli:raw="The object to remove.">要移除的对象。</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">已移除对象的新列表，或者此列表（如果指定的对象不在此列表中）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of the object that matches the specified value from this immutable list.">从此不可变列表中移除与指定值匹配的对象的第一个匹配项。</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">要从列表中移除的元素的值。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">要在搜索中使用的相等性比较器。</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">已移除对象的新列表，或者此列表（如果指定的对象不在此列表中）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">移除与指定的谓词所定义的条件相匹配的所有元素。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">用于定义要移除的元素应满足的条件的委托。</param>
      <returns vsli:raw="The new list with the elements removed.">已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index.">移除指定索引处的元素。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">要移除的元素的从零开始的索引。</param>
      <returns vsli:raw="A new list with the element removed.">已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list.">从此不可变列表中移除一系列元素。</summary>
      <param name="items" vsli:raw="The collection whose elements should be removed if matches are found in this list.">在此列表中找到匹配项时应删除其元素的集合。</param>
      <returns vsli:raw="A new list with the elements removed.">已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified values from this list.">从此列表中移除指定的值。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">在此列表中找到匹配项时要移除的项。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">要在搜索中使用的相等性比较器。</param>
      <returns vsli:raw="A new list with the elements removed.">已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements, starting from the specified index and containing the specified number of elements, from this immutable list.">从此不可变列表中移除一系列元素，从指定的索引处开始，并包含指定数量的元素。</summary>
      <param name="index" vsli:raw="The starting index to begin removal.">要从其开始移除的起始索引。</param>
      <param name="count" vsli:raw="The number of elements to remove.">要移除的元素数。</param>
      <returns vsli:raw="A new list with the elements removed.">已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">将不可变列表中的指定元素替换为新元素。</summary>
      <param name="oldValue" vsli:raw="The element to replace.">要替换的元素。</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">用于替换 <paramref name="oldValue" /> 的元素。</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element.">包含被替换元素的新列表，即使该元素等同于旧元素。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the immutable list.">不可变列表中不存在 <paramref name="oldValue" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">将不可变列表中的指定元素替换为新元素。</summary>
      <param name="oldValue" vsli:raw="The element to replace in the list.">列表中要替换的元素。</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">用于替换 <paramref name="oldValue" /> 的元素。</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to check for equality.">用于检查相等性的比较器。</param>
      <returns vsli:raw="A new list with the object replaced, or this list if the specified object is not in this list.">已替换对象的新列表，或者此列表（如果指定的对象不在此列表中）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">将整个不可变列表中元素的顺序反转。</summary>
      <returns vsli:raw="The reversed list.">反向列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">将不可变列表的指定范围中元素的顺序反转。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">要反转的范围的从零开始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">要反转的范围内的元素数。</param>
      <returns vsli:raw="The reversed list.">反向列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element at a given position in the immutable list with the specified element.">将不可变列表中位于给定位置处的元素替换为指定的元素。</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">要替换的元素在列表中的位置。</param>
      <param name="value" vsli:raw="The element to replace the old element with.">用于替换旧元素的元素。</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element at that position.">包含被替换元素的新列表，即使该元素等同于位于该位置的旧元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the default comparer.">使用默认比较器对整个不可变列表中的元素进行排序。</summary>
      <returns vsli:raw="The sorted list.">已排序的列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">使用指定的比较器对整个不可变列表中的元素进行排序。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">比较元素时要使用的实现，或者为 <see langword="null" />，表示使用默认比较器 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />)。</param>
      <returns vsli:raw="The sorted list.">已排序的列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">使用指定的比较器对整个不可变列表中的元素进行排序。</summary>
      <param name="comparison" vsli:raw="The delegate to use when comparing elements.">比较元素时要使用的委托。</param>
      <returns vsli:raw="The sorted list.">已排序的列表。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts a range of elements in the immutable list using the specified comparer.">使用指定的比较器对不可变列表中的一系列元素进行排序。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">要排序范围的从零开始的起始索引。</param>
      <param name="count" vsli:raw="The length of the range to sort.">要排序的范围的长度。</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">比较元素时要使用的实现，若要使用默认比较器 (<see langword="null" />)，则为 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
      <returns vsli:raw="The sorted list.">已排序的列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable list.">将指定项添加到不可变列表。</summary>
      <param name="item" vsli:raw="The item to add.">要添加的项。</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">从不可变列表中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">从不可变列表中移除特定对象的第一个匹配项。</summary>
      <param name="item" vsli:raw="The object to remove.">要移除的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original list.">如果从列表中成功移除了 <see langword="true" />，则为 <paramref name="item" />；否则为 <see langword="false" />。 如果在原始列表中未找到 <see langword="false" />，该方法也会返回 <paramref name="item" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">返回一个循环访问不可变列表的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">一个可用于循环访问列表的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an object in the immutable list at the specified index.">将对象插入到不可变列表中的指定索引位置。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">应插入 <paramref name="item" /> 的从零开始的索引。</param>
      <param name="item" vsli:raw="The object to insert.">要插入的对象。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value at the specified index.">获取或设置指定索引处的值。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">当 <paramref name="index" /> 为负或小于 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> 时，从 Getter 引发。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">始终从资源库引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the value at the specified index.">移除位于指定索引处的值。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified array index.">从指定的数组索引处开始，将整个不可变列表复制到兼容的一维目标数组。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from immutable list.">一维数组，它是从不可变列表复制的元素的目标。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="This type is immutable, so it is always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">请参阅 <see cref="T:System.Collections.ICollection" /> 接口。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">请参阅 <see cref="T:System.Collections.ICollection" />。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">返回一个循环访问不可变列表的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">一个可用于循环访问列表的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the immutable list.">将项添加到不可变列表。</summary>
      <param name="value" vsli:raw="The object to add to the list.">要添加到列表中的对象。</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the list.">新元素插入到的位置，或者为 -1，表示该项未插入到列表中。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">始终引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">从不可变列表中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">始终引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">确定不可变列表是否包含特定值。</summary>
      <param name="value" vsli:raw="The object to locate in the list.">要在列表中查找的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在列表中找到该对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the immutable list.">确定不可变列表中特定项的索引。</summary>
      <param name="value" vsli:raw="The object to locate in the list.">要在列表中查找的对象。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the immutable list at the specified index.">将项插入到不可变列表中的指定索引处。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value" vsli:raw="The object to insert into the list.">要插入到列表中的对象。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">始终引发。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">获取或设置指定索引处的 <see cref="T:System.Object" />。</summary>
      <param name="index" vsli:raw="The index.">索引。</param>
      <returns vsli:raw="The value at the specified index.">位于指定索引处的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">当 <paramref name="index" /> 为负或小于 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> 时，从 Getter 引发。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">始终从资源库引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">从不可变列表中移除特定对象的第一个匹配项。</summary>
      <param name="value" vsli:raw="The object to remove from the list.">要从列表中移除的对象。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">始终引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">移除不可变列表中指定索引处的项。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">始终引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable list.">将指定的值添加到此不可变列表中。</summary>
      <param name="value" vsli:raw="The value to add.">要相加的值。</param>
      <returns vsli:raw="A new list with the element added.">已添加元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified values to this immutable list.">将指定的值添加到此不可变列表中。</summary>
      <param name="items" vsli:raw="The values to add.">要添加的值。</param>
      <returns vsli:raw="A new list with the elements added.">已添加元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Retrieves an empty list that has the same sorting and ordering semantics as this instance.">检索排序和顺序语义与此实例相同的空列表。</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">排序和顺序语义与此实例相同的空列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">将指定元素插入到不可变列表中的指定索引位置。</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">插入值的索引位置。</param>
      <param name="item" vsli:raw="The element to insert.">要插入的元素。</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">包含指定元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">将指定元素插入到不可变列表中的指定索引位置。</summary>
      <param name="index" vsli:raw="The index at which to insert the elements.">元素要插入到的索引位置。</param>
      <param name="items" vsli:raw="The elements to insert.">要插入的元素。</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">包含指定元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the element with the specified value from the list.">从列表中移除具有指定值的元素。</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">要从列表中移除的元素的值。</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to compare elements for equality.">用于比较元素相等性的比较器。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; with the specified element removed.">一个新的 <see cref="T:System.Collections.Immutable.ImmutableList`1" />，其中已删除指定元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">移除与指定的谓词所定义的条件相匹配的所有元素。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">用于定义要移除的元素应满足的条件的委托。</param>
      <returns vsli:raw="A new immutable list with the elements removed.">已移除元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">移除不可变列表中指定索引处的元素。</summary>
      <param name="index" vsli:raw="The index of the element to remove.">要移除的元素的索引。</param>
      <returns vsli:raw="A new list with the element removed.">已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list that match the items specified.">从此不可变列表中移除与指定项匹配的一系列元素。</summary>
      <param name="items" vsli:raw="The range of items to remove from the list, if found.">要从列表中移除的项的范围（如果已找到）。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare elements.">用于比较元素的相等性比较器。</param>
      <returns vsli:raw="An immutable list with the items removed.">已移除项的不可变列表。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; or &lt;paramref name=&quot;equalityComparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="items" /> 或 <paramref name="equalityComparer" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the specified number of elements at the specified location from this list.">从此列表中的指定位置移除指定数量的元素。</summary>
      <param name="index" vsli:raw="The starting index of the range of elements to remove.">要移除的一系列元素的起始索引。</param>
      <param name="count" vsli:raw="The number of elements to remove.">要移除的元素数。</param>
      <returns vsli:raw="A new list with the elements removed.">已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces an element in the list with the specified element.">将列表中的某个元素替换为指定的元素。</summary>
      <param name="oldValue" vsli:raw="The element to replace.">要替换的元素。</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">用于替换旧元素的元素。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">要在搜索中使用的相等性比较器。</param>
      <returns vsli:raw="The new list.">新列表。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">在列表中不存在旧值时引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">将列表中位于给定位置的元素替换为指定的元素。</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">要替换的元素在列表中的位置。</param>
      <param name="value" vsli:raw="The element to replace the old element with.">用于替换旧元素的元素。</param>
      <returns vsli:raw="The new list.">新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary vsli:raw="Creates a list that has the same contents as this list and can be efficiently mutated across multiple operations using standard mutable interfaces.">创建一个其内容与此列表相同，并且可使用标准可变接口在多个操作之间有效转变的列表。</summary>
      <returns vsli:raw="The created list with the same contents as this list.">内容与此列表相同的所创建列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">确定不可变列表中的每个元素是否都与指定谓词定义的条件匹配。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">用于定义检查元素时要对照条件的委托。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">如果不可变列表中的每个元素都与指定的谓词所定义的条件相匹配，则为 <see langword="true" />；否则为 <see langword="false" />。 如果列表没有元素，则返回值为 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableQueue`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">针对 <see cref="T:System.Collections.Immutable.ImmutableQueue`1" /> 类的实例提供一组初始化方法。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary vsli:raw="Creates an empty immutable queue.">创建一个空的不可变队列。</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable queue.">要存储在不可变队列中的项的类型。</typeparam>
      <returns vsli:raw="An empty immutable queue.">空的不可变队列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable queue that contains the specified item.">创建包含指定项的新不可变队列。</summary>
      <param name="item" vsli:raw="The item to prepopulate the queue with.">用于预先填充队列的项。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">不可变队列中项的类型。</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified item.">包含指定项的新不可变队列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable queue that contains the specified array of items.">创建包含指定项数组的新不可变队列。</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the queue with.">一个数组，其中包含用于预先填充队列的项。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">不可变队列中项的类型。</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified items.">包含指定项的新不可变队列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable queue that contains the specified items.">创建包含指定项的新不可变队列。</summary>
      <param name="items" vsli:raw="The items to add to the queue before immutability is applied.">在应用不可变性之前要添加到队列中的项。</param>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">队列中元素的类型。</typeparam>
      <returns vsli:raw="An immutable queue that contains the specified items.">包含指定项的不可变队列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">移除位于不可变队列开始处的项，并返回新队列。</summary>
      <param name="queue" vsli:raw="The queue to remove the item from.">要从中移除项的队列。</param>
      <param name="value" vsli:raw="When this method returns, contains the item from the beginning of the queue.">此方法返回时，将包含位于队列开始处的项。</param>
      <typeparam name="T" vsli:raw="The type of elements in the immutable queue.">不可变队列中元素的类型。</typeparam>
      <returns vsli:raw="The new queue with the item removed.">已移除项的新队列。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">堆栈为空。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary vsli:raw="Represents an immutable queue.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示不可变队列。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">队列中元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable queue.">从不可变队列中移除所有对象。</summary>
      <returns vsli:raw="The empty immutable queue.">空的不可变队列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">移除位于不可变队列开始处的元素，并返回新队列。</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">新的不可变队列；永不为 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">队列为空。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">移除位于不可变队列开始处的项，并返回新队列。</summary>
      <param name="value" vsli:raw="When this method returns, contains the element from the beginning of the queue.">此方法返回时，将包含位于队列开始处的元素。</param>
      <returns vsli:raw="The new immutable queue with the beginning element removed.">新的不可变队列，其开头元素已被移除。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">队列为空。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary vsli:raw="Gets an empty immutable queue.">获取空的不可变队列。</summary>
      <returns vsli:raw="An empty immutable queue.">空的不可变队列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">将元素添加到不可变队列的末尾，并返回新队列。</summary>
      <param name="value" vsli:raw="The element to add.">要添加的元素。</param>
      <returns vsli:raw="The new immutable queue.">新的不可变队列。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable queue without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">枚举不可变队列的内容，而无需分配任何内存。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">获取枚举数当前位置的元素。</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">位于枚举器当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable queue.">将枚举器推进到不可变队列的下一个元素。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the queue.">如果枚举器已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举器已传递到队列的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable queue.">返回一个循环访问不可变队列的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the queue.">一个可用于循环访问队列的枚举器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">获取一个值，该值指示此不可变队列是否为空。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此队列为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">返回位于不可变队列开始处的元素但不将其移除。</summary>
      <returns vsli:raw="The element at the beginning of the queue.">位于队列开始处的元素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">队列为空。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element at the front of the queue.">获取对队列前部元素的只读引用。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">队列为空。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">返回一个循环访问集合的枚举器。</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">返回循环访问集合的枚举数。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable queue.">从不可变队列中移除所有元素。</summary>
      <returns vsli:raw="The empty immutable queue.">空的不可变队列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">移除位于不可变队列开始处的元素，并返回新队列。</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">新的不可变队列；永不为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">将元素添加到不可变队列的末尾，并返回新队列。</summary>
      <param name="value" vsli:raw="The element to add.">要添加的元素。</param>
      <returns vsli:raw="The new immutable queue.">新的不可变队列。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">针对 <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" /> 类的实例提供一组初始化方法。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable sorted dictionary.">创建一个空的不可变排序字典。</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典存储的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典存储的值的类型。</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">空的不可变排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key comparer.">创建使用指定键比较器的空不可变排序字典。</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">用于确定字典中键的相等性的实现。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典存储的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典存储的值的类型。</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">空的不可变排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key and value comparers.">创建使用指定键和值比较器的空不可变排序字典。</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">用于确定字典中键的相等性的实现。</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">用于确定字典中值的相等性的实现。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典存储的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典存储的值的类型。</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">空的不可变排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">创建一个新的不可变排序字典生成器。</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典存储的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典存储的值的类型。</typeparam>
      <returns vsli:raw="The immutable collection builder.">不可变集合生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">创建一个新的不可变排序字典生成器。</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">键比较器。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典存储的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典存储的值的类型。</typeparam>
      <returns vsli:raw="The immutable collection builder.">不可变集合生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">创建一个新的不可变排序字典生成器。</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">键比较器。</param>
      <param name="valueComparer" vsli:raw="The value comparer.">值比较器。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">字典存储的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">字典存储的值的类型。</typeparam>
      <returns vsli:raw="The immutable collection builder.">不可变集合生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key comparer.">使用指定的键比较器从指定的项范围创建新的不可变排序字典。</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to evaluate keys for equality and sorting.">用于评估键的相等性和排序的比较器实现。</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary.">要添加到排序字典中的项。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">字典中存储的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">字典中存储的值的类型。</typeparam>
      <returns vsli:raw="The new immutable sorted dictionary that contains the specified items and uses the specified key comparer.">包含指定项并使用指定键比较器的新不可变排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key and value comparers.">使用指定的键和值比较器从指定的项范围创建新的不可变排序字典。</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality and sorting.">用于比较键的相等性和排序的比较器实现。</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">用于比较值的相等性和排序的比较器实现。</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">在排序字典不可变之前要添加到该字典中的项。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">字典中存储的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">字典中存储的值的类型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items and uses the specified comparers.">包含指定项并使用指定比较器的不可变排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates an immutable sorted dictionary that contains the specified items and uses the default comparer.">创建包含指定项并使用默认比较器的不可变排序字典。</summary>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">在排序字典不可变之前要添加到该字典中的项。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">字典中存储的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">字典中存储的值的类型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items.">一个不可变排序字典，其中包含指定的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents.">枚举键/值对的序列，并生成其内容的不可变排序字典。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">要枚举的键/值对的序列。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值的类型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">一个不可变排序字典，其中包含指定序列中的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">枚举键/值对的序列，并使用指定的键比较器生成其内容的不可变字典。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">要枚举的键/值对的序列。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">生成不可变字典时要使用的键比较器。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值的类型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">一个不可变排序字典，其中包含指定序列中的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">枚举键/值对的序列，并使用指定的键和值比较器生成其内容的不可变排序字典。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">要枚举的键/值对的序列。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">生成不可变字典时要使用的键比较器。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">用于不可变字典的值比较器。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值的类型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">一个不可变排序字典，其中包含指定序列中的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable sorted dictionary from the current contents of the builder's dictionary.">从生成器字典的当前内容创建不可变排序字典。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted dictionary from.">要从中创建不可变排序字典的生成器。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值的类型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the current contents in the builder's dictionary.">包含生成器字典中当前内容的不可变排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents.">枚举并转换序列，然后生成其内容的不可变排序字典。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">为生成字典而要枚举的序列。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">用于从每个序列元素生成字典键的函数。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">用于从每个序列元素生成字典值的函数。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中元素的类型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">生成的字典中键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">生成的字典中值的类型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">一个不可变排序字典，其中包含指定序列中的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key comparer.">枚举并转换序列，然后使用指定的键比较器生成其内容的不可变排序字典。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">为生成字典而要枚举的序列。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">用于从每个序列元素生成字典键的函数。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">用于从每个序列元素生成字典值的函数。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">用于字典的键比较器。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中元素的类型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">生成的字典中键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">生成的字典中值的类型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">一个不可变字典，其中包含指定序列中的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">枚举并转换序列，然后使用指定的键和值比较器生成其内容的不可变排序字典。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">为生成字典而要枚举的序列。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">用于从每个序列元素生成字典键的函数。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">用于从每个序列元素生成字典值的函数。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">用于字典的键比较器。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">用于字典的值比较器。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中元素的类型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">生成的字典中键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">生成的字典中值的类型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">一个不可变排序字典，其中包含指定序列中的项。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary vsli:raw="Represents an immutable sorted dictionary.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示一个不可变排序字典。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="TKey" vsli:raw="The type of the key contained in the dictionary.">字典中包含的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value contained in the dictionary.">字典中包含的值的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable sorted dictionary.">将具有指定键和值的元素添加到不可变排序字典。</summary>
      <param name="key" vsli:raw="The key of the entry to add.">要添加的条目的键。</param>
      <param name="value" vsli:raw="The value of entry to add.">要添加的条目的值。</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the additional key/value pair.">一个新的不可变排序字典，其中包含其他键/值对。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">字典中已存在给定的键，但具有不同的值。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specific key/value pairs to the immutable sorted dictionary.">将指定的键/值对添加到不可变排序字典。</summary>
      <param name="items" vsli:raw="The key/value pairs to add.">要添加的键/值对。</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">一个新的不可变字典，其中包含其他键/值对。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">字典中已存在其中一个给定的键，但具有不同的值。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary vsli:raw="Represents a sorted dictionary that mutates with little or no memory allocations and that can produce or build on immutable sorted dictionary instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示一个只需少量或者无需内存分配就能转变，并且可以有效生成不可变排序字典实例或者构建于此类实例之上的排序字典。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable sorted dictionary.">将具有指定键和值的元素添加到不可变排序字典。</summary>
      <param name="key" vsli:raw="The key of the element to add.">要添加的元素的键。</param>
      <param name="value" vsli:raw="The value of the element to add.">要添加的元素的值。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable sorted dictionary.">将指定项添加到不可变排序字典。</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">要添加到字典中的对象。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to the immutable sorted dictionary.">将值序列添加到不可变排序字典。</summary>
      <param name="items" vsli:raw="The items to add to the dictionary.">要添加到字典中的项。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable sorted dictionary.">从不可变排序字典中移除所有项。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains a specific value.">确定不可变排序字典是否包含特定值。</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">要在字典中查找的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在字典中找到 <see langword="true" />，则为 <paramref name="item" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified key.">确定不可变排序字典是否包含具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">要在字典中查找的键。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典包含具有该键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">确定不可变排序字典是否包含具有指定值的元素。</summary>
      <param name="value" vsli:raw="The value to locate in the dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要在字典中查找的值。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable sorted dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果不可变排序字典包含具有指定值的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable sorted dictionary.">获取此不可变排序字典中的元素数。</summary>
      <returns vsli:raw="The number of elements in this dictionary.">此字典中的元素数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">返回一个循环访问不可变排序字典的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">一个可用于循环访问字典的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">如果字典中存在匹配的键，则获取给定键的值；否则获取默认值。</summary>
      <param name="key" vsli:raw="The key to search for.">要搜索的键。</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">该键的值；如果找不到匹配的键，则为 <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">如果字典中存在匹配的键，则获取给定键的值；否则获取默认值。</summary>
      <param name="key" vsli:raw="The key to search for.">要搜索的键。</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">在字典中找不到匹配键时返回的默认值。</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">该键的值；如果找不到匹配的键，则为 <paramref name="defaultValue" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the value for a specified key in the immutable sorted dictionary.">获取或设置不可变排序字典中指定键的值。</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">要检索其值的键。</param>
      <returns vsli:raw="The value associated with the given key.">与给定键关联的值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">获取或设置键比较器。</summary>
      <returns vsli:raw="The key comparer.">键比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a strongly typed, read-only collection of elements.">获取元素的强类型化只读集合。</summary>
      <returns vsli:raw="A strongly typed, read-only collection of elements.">元素的强类型化只读集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable sorted dictionary.">从不可变排序字典中移除具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的元素的键。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original dictionary.">如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。 如果在原始字典中未找到 <see langword="false" />，则此方法也会返回 <paramref name="key" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable sorted dictionary.">从不可变排序字典中移除特定对象的第一个匹配项。</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">要从字典中移除的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">如果从字典中成功移除了 <see langword="true" />，则为 <paramref name="item" />；否则为 <see langword="false" />。 如果在字典中未找到 <see langword="false" />，此方法也会返回 <paramref name="item" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable sorted dictionary.">从不可变排序字典中移除其键与指定序列中找到的键相匹配的所有条目。</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">要从字典中移除的条目的键。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">从特定的数组索引开始，将字典的元素复制到数组中。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">作为从字典复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">获取一个值，该值指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否同步（线程安全）。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">将具有所提供键和值的元素添加到字典对象。</summary>
      <param name="key" vsli:raw="The key of the element to add.">要添加的元素的键。</param>
      <param name="value" vsli:raw="The value of the element to add.">要添加的元素的值。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">确定字典对象是否包含具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key to locate.">要定位的键。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典包含具有该键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">返回字典的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">字典的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否具有固定大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Collections.IDictionary" /> 对象具有固定大小，则为 <see langword="true" />;否则，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">获取或设置具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key.">键。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" />的对象的键。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">从字典中移除具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的元素的键。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">获取一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" />的对象中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">返回循环访问集合的枚举数。</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">可用于循环访问集合的枚举器对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted dictionary based on the contents of this instance.">基于此实例的内容创建一个不可变排序字典。</summary>
      <returns vsli:raw="An immutable sorted dictionary.">不可变排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">确定此字典是否包含指定的键。</summary>
      <param name="equalKey" vsli:raw="The key to search for.">要搜索的键。</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">如果已在字典中找到匹配键，则为该匹配键；如果找不到任何匹配键，则为 <c>equalkey</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到了 <see langword="true" /> 的匹配项，则为 <paramref name="equalKey" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">获取与指定键关联的值。</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">将检索其值的键。</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">当此方法返回时，如果找到该键，则包含与指定的键相关联的值；否则将包含 <paramref name="value" /> 参数的类型默认值。 此参数未经初始化即被传递。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果实现字典的对象包含具有指定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">获取或设置值比较器。</summary>
      <returns vsli:raw="The value comparer.">值比较器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">返回对该值的只读引用，该值与提供的 <paramref name="key" /> 相关联。</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">
        <paramref name="key" /> 不存在。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable sorted dictionary.">获取包含不可变排序字典值的集合。</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">一个集合，其中包含实现字典的对象的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable sorted dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">检索排序规则和键/值比较规则与此字典实例相同的空不可变排序字典。</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">具有等效排序规则和键/值比较规则的空字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable sorted dictionary contains the specified key/value pair.">确定此不可变排序字典是否包含指定的键/值对。</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">要查找的键/值对。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在字典中找到指定的键/值对，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether this immutable sorted map contains the specified key.">确定此不可变排序映射是否包含指定的键。</summary>
      <param name="key" vsli:raw="The key to locate.">要定位的键。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果不可变字典包含指定键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">确定不可变排序字典是否包含具有指定值的元素。</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要查找的值。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典包含具有指定值的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable sorted dictionary.">获取不可变排序字典中键/值对的数目。</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">字典中键/值对的数目。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable sorted dictionary.">获取空的不可变排序字典。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">枚举二进制树的内容。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">获取枚举数当前位置的元素。</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">位于枚举器当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator&quot; /&gt; class.">释放 <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" /> 类的当前实例使用的资源。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted dictionary.">将枚举器推进到不可变排序字典的下一个元素。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted dictionary.">如果枚举器已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举器已传递到排序字典的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted dictionary.">将枚举器设置到其初始位置，该位置位于不可变排序字典中的第一个元素之前。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">当前元素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">返回一个循环访问不可变排序字典的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">一个可用于循环访问字典的枚举器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable sorted dictionary is empty.">获取一个值，该值指示此不可变排序字典实例是否为空。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此实例为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">获取与指定键关联的 <paramref name="TValue" />。</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">要检索其值的键。</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">与指定的键相关联的值。 如果未找到任何结果，该操作将引发异常。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable sorted dictionary.">获取不可变排序字典的键比较器。</summary>
      <returns vsli:raw="The key comparer for the dictionary.">字典的键比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable sorted dictionary.">获取不可变排序字典中的键。</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">不可变字典中的键。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified value from the immutable sorted dictionary.">从不可变排序字典中移除具有指定值的元素。</summary>
      <param name="value" vsli:raw="The value of the element to remove.">要移除的元素的值。</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified value cannot be found in the dictionary.">已移除指定元素的新不可变字典；如果在字典中找不到指定的值，则为此实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable sorted dictionary.">从不可变排序字典中移除具有指定键的元素。</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">要移除的元素的键。</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">已移除指定键的新不可变字典；如果在字典中找不到指定的键，则为此实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable sorted dictionary, possibly overwriting an existing value for the given key.">在不可变排序字典中设置指定的键和值，可能的设置方法是覆盖给定键的现有值。</summary>
      <param name="key" vsli:raw="The key of the entry to add.">要添加的条目的键。</param>
      <param name="value" vsli:raw="The key value to set.">要设置的键值。</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the specified key/value pair.">一个新的不可变排序字典，其中包含指定的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable sorted dictionary, possibly overwriting existing values for the keys.">在不可变排序字典中设置指定的键/值对，可能的设置方法是覆盖键的现有值。</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">要在字典中设置的键/值对。 如果字典中已存在任何键，则此方法将覆盖这些键的先前值。</param>
      <returns vsli:raw="An immutable dictionary that contains the specified key/value pairs.">一个不可变字典，其中包含指定的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The object to use as the key of the element to access." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">从特定的数组索引开始，将字典的元素复制到数组中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">作为从字典复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全），则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">将具有所提供键和值的元素添加到字典对象。</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">用作要添加的元素的键的对象。</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">用作要添加的元素的值的对象。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">清除此实例。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">字典对象为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">确定不可变字典对象是否包含具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">要在字典对象中查找的键。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典包含具有该键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">返回不可变字典对象的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">字典对象的枚举器对象。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否具有固定大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Collections.IDictionary" /> 对象具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">获取或设置具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key of the element to be accessed.">键。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象的键。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">从不可变字典对象中移除具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的元素的键。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">获取一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">返回循环访问集合的枚举数。</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">可用于循环访问集合的枚举器对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be updated." />
      <param name="value" vsli:raw="Value of entry to be updated." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="A set of key-value pairs to set on the map." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable sorted dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">创建一个其内容与此字典相同，并且可使用标准可变接口在多个操作之间有效转变的不可变排序字典。</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary.">内容与此字典相同的集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">确定此字典是否包含指定的键。</summary>
      <param name="equalKey" vsli:raw="The key to search for.">要搜索的键。</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">如果已在字典中找到匹配键，则为该匹配键；如果找不到任何匹配键，则为 <c>equalkey</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到了 <paramref name="equalKey" /> 的匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">获取与指定键关联的值。</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">将检索其值的键。</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">当此方法返回时，如果找到该键，则包含与指定的键相关联的值；否则将包含 <paramref name="value" /> 参数的类型默认值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字典包含具有指定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">获取用于确定值是否相等的值比较器。</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">用于确定值是否相等的值比较器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">返回对该值的只读引用，该值与提供的 <paramref name="key" /> 相关联。</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">
        <paramref name="key" /> 不存在。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable sorted dictionary.">获取不可变排序字典中的值。</summary>
      <returns vsli:raw="The values in the dictionary.">字典中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key comparer.">获取使用指定键比较器的不可变排序字典实例。</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">要使用的键比较器。</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">使用给定比较器的不可变字典实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key and value comparers.">获取使用指定键和值比较器的不可变排序字典实例。</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">要使用的键比较器。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">要使用的值比较器。</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">使用给定比较器的不可变字典实例。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">针对 <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" /> 类的实例提供一组初始化方法。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary vsli:raw="Creates an empty immutable sorted set.">创建一个空的不可变排序集。</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable set.">要存储在不可变集内的项的类型。</typeparam>
      <returns vsli:raw="An empty immutable sorted set.">空的不可变排序集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item.">创建包含指定项的新不可变排序集。</summary>
      <param name="item" vsli:raw="The item to prepopulate the set with.">用于预先填充集的项。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">不可变集内的项的类型。</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">包含指定项的新不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items.">创建包含指定项数组的新不可变排序集。</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">一个数组，其中包含用于预先填充集的项。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">不可变集内的项的类型。</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">包含指定项的新不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted set that uses the specified comparer.">创建使用指定比较器的空不可变排序集。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">比较集内的项时要使用的实现。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">不可变集内的项的类型。</typeparam>
      <returns vsli:raw="An empty immutable set.">空的不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item and uses the specified comparer.">创建包含指定项并使用指定比较器的新不可变排序集。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">比较集内的项时要使用的实现。</param>
      <param name="item" vsli:raw="The item to prepopulate the set with.">用于预先填充集的项。</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable set.">存储在不可变集内的项的类型。</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">包含指定项的新不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items and uses the specified comparer.">创建包含指定项数组并使用指定比较器的新不可变排序集。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">比较集内的项时要使用的实现。</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">一个数组，其中包含用于预先填充集的项。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">不可变集内的项的类型。</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">包含指定项的新不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">返回可用于生成不可变排序集的集合。</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">集合存储的项的类型。</typeparam>
      <returns vsli:raw="The immutable collection builder.">不可变集合生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">返回可用于生成不可变排序集的集合。</summary>
      <param name="comparer" vsli:raw="The comparer used to compare items in the set for equality.">用于比较集内项的相等性的比较器。</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">集合存储的项的类型。</typeparam>
      <returns vsli:raw="The immutable collection.">不可变集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">创建包含指定项的新不可变集合。</summary>
      <param name="comparer" vsli:raw="The comparer to use to compare elements in this set.">用于比较此集内的元素的比较器。</param>
      <param name="items" vsli:raw="The items to add to the set before it's immutable.">在集不可变之前要添加到该集内的项。</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">集合存储的项的类型。</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">包含指定项的新不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">创建包含指定项的新不可变集合。</summary>
      <param name="items" vsli:raw="The items to add to the set with before it's immutable.">在集不可变之前要添加到该集内的项。</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">集合存储的项的类型。</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">包含指定项的新不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable sorted set of its contents.">枚举序列，并生成其内容的不可变排序集。</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">要枚举的序列。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中元素的类型。</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">一个不可变排序集，其中包含指定序列中的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable sorted set of its contents, and uses the specified comparer.">枚举序列，生成其内容的不可变排序集，并使用指定的比较器。</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">要枚举的序列。</param>
      <param name="comparer" vsli:raw="The comparer to use for initializing and adding members to the sorted set.">用于初始化排序集并向其中添加成员的比较器。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">序列中元素的类型。</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">一个不可变排序集，其中包含指定序列中的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable sorted set from the current contents of the builder's set.">从生成器集的当前内容创建不可变排序集。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted set from.">要从中创建不可变排序集的生成器。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the immutable sorted set.">不可变排序集中元素的类型。</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the current contents in the builder's set.">包含生成器集中的当前内容的不可变排序集。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary vsli:raw="Represents an immutable sorted set implementation.&#xA;&#xA;NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示不可变的排序集实现。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="The type of elements in the set.">集内元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable sorted set.">将指定的值添加到此不可变排序集。</summary>
      <param name="value" vsli:raw="The value to add.">要相加的值。</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in this set.">已添加元素的新集，或者此集（如果该元素已在此集内）。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary vsli:raw="Represents a sorted set that enables changes with little or no memory allocations, and efficiently manipulates or builds immutable sorted sets.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示一个只需少量或者无需内存分配就能启用更改，并且可以有效地操作或生成不可变排序集的排序集。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">向当前集内添加元素，并返回一个指示是否已成功添加元素的值。</summary>
      <param name="item" vsli:raw="The element to add to the set.">要添加到集中的元素。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">如果该元素已添加到集内，则为 <see langword="true" />；如果该元素已在集内，则为 <see langword="false" /></returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary vsli:raw="Removes all elements from this set.">从此集内移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the set contains the specified object.">确定集是否包含指定的对象。</summary>
      <param name="item" vsli:raw="The object to locate in the set.">要在集内查找的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在集内找到 <see langword="true" />，则为 <paramref name="item" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">获取不可变排序集内的元素数。</summary>
      <returns vsli:raw="The number of elements in this set.">此集内的元素数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified set of items from the current set.">从当前集内移除指定的项集。</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">要从集内移除的项的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the set.">返回循环访问集的枚举器。</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the set.">一个可用于循环访问集的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">修改当前集，使该集仅包含也存在在指定集合中的元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">确定当前集是否为指定集合的真（严格）子集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是 <see langword="true" /> 的真子集，则为 <paramref name="other" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">确定当前集是否为指定集合的真（严格）超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是 <see langword="true" /> 的真超集，则为 <paramref name="other" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">确定当前集是否为指定集合的子集。</summary>
      <param name="other" vsli:raw="The collection is compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是 <see langword="true" /> 的子集，则为 <paramref name="other" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">确定当前集是否为指定集合的超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是 <see langword="true" /> 的超集，则为 <paramref name="other" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the set at the given index.">获取给定索引的集元素。</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">要返回集中的元素从零开始的索引。</param>
      <returns vsli:raw="The element at the given position.">位于给定位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">获取对给定 <paramref name="index" /> 处的集元素的只读引用。</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">要返回集中的元素从零开始的索引。</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">对给定位置处的元素的只读引用。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the object that is used to determine equality for the values in the immutable sorted set.">获取或设置用于确定不可变排序集内的值是否相等的对象。</summary>
      <returns vsli:raw="The comparer that is used to determine equality for the values in the set.">用于确定集内的值是否相等的比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">根据比较器的定义，获取不可变排序集内的最大值。</summary>
      <returns vsli:raw="The maximum value in the set.">集内的最大值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">根据比较器的定义，获取不可变排序集内的最小值。</summary>
      <returns vsli:raw="The minimum value in the set.">集内的最小值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">确定当前集是否与指定的集合重叠。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集与 <see langword="true" /> 至少共享一个通用元素，则为 <paramref name="other" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from the set.">从集内移除指定对象的第一个匹配项。</summary>
      <param name="item" vsli:raw="The object to remove from the set.">要从集内移除的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was removed from the set; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the set.">如果从集内移除了 <see langword="true" />，则为 <paramref name="item" />；如果在集内找不到 <see langword="false" />，则为 <paramref name="item" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary vsli:raw="Returns an enumerator that iterates over the immutable sorted set in reverse order.">返回一个枚举器，该枚举器按逆序循环访问不可变排序集。</summary>
      <returns vsli:raw="An enumerator that iterates over the set in reverse order.">一个枚举器，它按逆序循环访问集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">确定当前集与指定的集合是否包含相同的元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集等于 <see langword="true" />，则为 <paramref name="other" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">修改当前集，使该集仅包含存在于当前集或指定集合中的元素（但不同时存在于两者中）。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">向当前集内添加元素，并返回一个指示是否已成功添加元素的值。</summary>
      <param name="item" vsli:raw="The element to add to the set.">要添加到集中的元素。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">从特定的数组索引开始，将集合的元素复制到数组中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">作为从集合复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">获取一个值，该值指示此实例是否为只读。</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">总是为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">返回一个循环访问集合的枚举器。</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">从特定的数组索引开始，将集的元素复制到一个数组中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">一维数组，它是从集内复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe).">获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 <see langword="true" />;否则，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">返回一个循环访问集合的枚举器。</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted set based on the contents of this instance.">基于此实例的内容创建一个不可变排序集。</summary>
      <returns vsli:raw="An immutable set.">不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">修改当前集，使该集包含同时存在于当前集和指定集合中的所有元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current state.">要与当前状态进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable sorted set.">从不可变排序集内移除所有元素。</summary>
      <returns vsli:raw="An empty set with the elements removed.">已移除元素的空集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable sorted set contains the specified value.">确定此不可变排序集是否包含指定的值。</summary>
      <param name="value" vsli:raw="The value to check for.">要检查的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该集包含指定值，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">获取不可变排序集内的元素数。</summary>
      <returns vsli:raw="The number of elements in the immutable sorted set.">不可变排序集内的元素数。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary vsli:raw="Gets an empty immutable sorted set.">获取空的不可变排序集。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">枚举二进制树的内容。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">获取枚举数当前位置的元素。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">位于枚举器当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">释放 <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" /> 类的当前实例使用的资源。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">将枚举器推进到不可变排序集的下一个元素。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted set.">如果枚举器已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举器已传递到排序集的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">将枚举器设置到其初始位置，该位置位于不可变排序集内的第一个元素之前。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">当前元素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a specified set of items from this immutable sorted set.">从此不可变排序集内移除一组指定项。</summary>
      <param name="other" vsli:raw="The items to remove from this set.">要从此集内移除的项。</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">已移除项的新集；如果原始集不包含任何项，则为原始集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted set.">返回一个循环访问不可变排序集的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">一个可用于循环访问集的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary vsli:raw="Gets the position within this immutable sorted set that the specified value appears in.">获取指定值在此不可变排序集内的出现位置。</summary>
      <param name="item" vsli:raw="The value whose position is being sought.">正在查找其位置的值。</param>
      <returns vsli:raw="The index of the specified &lt;paramref name=&quot;item&quot; /&gt; in the sorted set, if &lt;paramref name=&quot;item&quot; /&gt; is found. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is less than one or more elements in this set, this method returns a negative number that is the bitwise complement of the index of the first element that is larger than value. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is greater than any of the elements in the set, this method returns a negative number that is the bitwise complement of the index of the last element plus 1.">如果找到 <paramref name="item" />，则为排序集内指定 <paramref name="item" /> 的索引。 如果 <paramref name="item" /> 未找到且小于此集内的一个或多个元素，此方法将返回一个负数，该负数是大于 value 的第一个元素的索引的按位求补。 如果 <paramref name="item" /> 未找到且大于此集内的任何元素，此方法将返回一个负数，该负数是最后一个元素的索引的按位求补加 1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist both in this set and in the specified set.">创建一个不可变排序集，其中包含同时存在于此集和指定集内的元素。</summary>
      <param name="other" vsli:raw="The set to intersect with this one.">要与此集相交的集。</param>
      <returns vsli:raw="A new immutable sorted set that contains any elements that exist in both sets.">一个新的不可变排序集，其中包含同时存在于两个集内的所有元素。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable sorted set is empty.">获取一个值，该值指示此不可变排序集是否为空。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this set is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此集为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper (strict) subset of the specified collection.">确定当前不可变排序集是否为指定集合的真（严格）子集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是 <paramref name="other" /> 的真子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper superset of a specified collection.">确定当前不可变排序集是否为指定集合的真超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是 <paramref name="other" /> 的真超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a subset of a specified collection.">确定当前不可变排序集是否为指定集合的子集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是 <paramref name="other" /> 的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a superset of a specified collection.">确定当前不可变排序集是否为指定集合的超集。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集是 <paramref name="other" /> 的超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the immutable sorted set at the given index.">获取不可变排序集中位于给定索引处的元素。</summary>
      <param name="index" vsli:raw="The index of the element to retrieve from the sorted set.">要从排序集中检索的元素的索引。</param>
      <returns vsli:raw="The element at the given index.">给定索引处的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference of the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">获取给定 <paramref name="index" /> 处的集元素的只读引用。</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">要返回集中的元素从零开始的索引。</param>
      <returns vsli:raw="A read-only reference of the element at the given position.">给定位置处的元素的只读引用。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary vsli:raw="Gets the comparer used to sort keys in the immutable sorted set.">获取用于对不可变排序集中的键进行排序的比较器。</summary>
      <returns vsli:raw="The comparer used to sort keys.">用于对键进行排序的比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">根据比较器的定义，获取不可变排序集内的最大值。</summary>
      <returns vsli:raw="The maximum value in the set.">集内的最大值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">根据比较器的定义，获取不可变排序集内的最小值。</summary>
      <returns vsli:raw="The minimum value in the set.">集内的最小值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and a specified collection share common elements.">确定当前的不可变排序集和指定的集合是否共享通用元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前集与 <paramref name="other" /> 至少共享一个通用元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified value from this immutable sorted set.">从此不可变排序集中移除指定的值。</summary>
      <param name="value" vsli:raw="The element to remove.">要移除的元素。</param>
      <returns vsli:raw="A new immutable sorted set with the element removed, or this set if the element was not found in the set.">已移除元素的新不可变排序集；如果在此集内找不到元素，则为此集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that iterates over this immutable sorted set in reverse order.">返回一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它按逆序循环访问此不可变排序集。</summary>
      <returns vsli:raw="An enumerator that iterates over the immutable sorted set in reverse order.">一个枚举器，它按逆序循环访问不可变排序集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and the specified collection contain the same elements.">确定当前不可变排序集与指定的集合是否包含相同的元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist either in this set or in a given sequence, but not both.">创建一个不可变排序集，其中包含存在于此集内或者给定序列内（但不同时存在于两者中）的元素。</summary>
      <param name="other" vsli:raw="The other sequence of items.">项的另一个序列。</param>
      <returns vsli:raw="The new immutable sorted set.">新的不可变排序集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to the collection.">将指定值添加到集合。</summary>
      <param name="item" vsli:raw="The value to add.">要相加的值。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all the items from the collection.">从集合中移除所有项。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">从特定的数组索引开始，将集合的元素复制到数组中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">作为从集合复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Returns true, since immutable collections are always read-only. See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">请参阅 <see cref="T:System.Collections.Generic.ICollection`1" /> 接口。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">从集合中移除特定对象的第一个匹配项。</summary>
      <param name="item" vsli:raw="The object to remove from the collection.">要从集合中移除的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果从集合中成功移除了 <see langword="true" />，则为 <paramref name="item" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">返回一个循环访问集合的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the set at the specified index.">在集内指定索引的位置插入项。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">应插入 <paramref name="item" /> 的从零开始的索引。</param>
      <param name="item" vsli:raw="The object to insert into the set.">要插入到集内的对象。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; interface.">请参阅 <see cref="T:System.Collections.Generic.IList`1" /> 接口。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">移除指定索引处的项。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除的项的从零开始的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate if the element was successfully added.">向当前集内添加元素，并返回一个指示是否已成功添加元素的值。</summary>
      <param name="item" vsli:raw="The element to add to the set.">要添加到集中的元素。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">如果该元素已添加到集内，则为 <see langword="true" />；如果该元素已在集内，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">从当前集内移除指定集合中的所有元素。</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">要从集内移除的项的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">修改当前集，使该集仅包含也存在在指定集合中的元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">修改当前集，使该集仅包含存在于当前集或指定集合中的元素（但不同时存在于两者中）。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or the specified collection.">修改当前集，使该集包含当前集或指定集合中存在的所有元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">从特定的数组索引开始，将集的元素复制到一个数组中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">一维数组，它是从集内复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Returns true, since immutable collections are always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">请参阅 <see cref="T:System.Collections.ICollection" /> 接口。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">请参阅 <see cref="T:System.Collections.ICollection" />。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">返回循环访问集合的枚举数。</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">可用于循环访问集合的枚举器对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the set.">将某项添加到集内。</summary>
      <param name="value" vsli:raw="The object to add to the set.">要添加到集内的对象。</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">插入了新元素的位置，-1 指示该项未插入到集合中。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">该集为只读，或具有固定大小。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the set.">从集内中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">在所有情况下均引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the set contains a specific value.">确定集是否包含特定值。</summary>
      <param name="value" vsli:raw="The object to locate in the set.">要在集内查找的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在集内找到该对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the set.">确定集内特定项的索引。</summary>
      <param name="value" vsli:raw="The object to locate in the set.">要在集内查找的对象。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the set at the specified index.">在集内指定索引的位置插入项。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value" vsli:raw="The object to insert into the set.">要插入到集内的对象。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">该集为只读，或具有固定大小。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">获取或设置指定索引处的 <see cref="T:System.Object" />。</summary>
      <param name="index" vsli:raw="The index.">索引。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt;.">
        <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">从集内移除特定对象的第一个匹配项。</summary>
      <param name="value" vsli:raw="The object to remove from the set.">要从集内移除的对象。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">该集为只读，或具有固定大小。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the set.">移除集内指定索引处的项。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">该集为只读，或具有固定大小。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">将指定的元素添加到此不可变集。</summary>
      <param name="value" vsli:raw="The element to add.">要添加的元素。</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">已添加元素的新集，或者此集（如果该元素已在此集内）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">检索排序和顺序语义与此实例相同的空不可变集。</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">排序和顺序语义与此实例相同的空集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">从当前不可变集内移除指定集合中的元素。</summary>
      <param name="other" vsli:raw="The items to remove from this set.">要从此集内移除的项。</param>
      <returns vsli:raw="The new set with the items removed; or the original set if none of the items were in the set.">已移除项的新集；如果原始集不包含任何项，则为原始集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">创建一个不可变集，其中包含同时存在于此集和指定集内的元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">一个新的不可变集，其中包含同时存在于两个集内的所有元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">从此不可变集内移除指定的元素。</summary>
      <param name="value" vsli:raw="The element to remove.">要移除的元素。</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">已移除指定元素的新集，或者当前集（如果在该集内找不到该元素）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">创建一个不可变集，该集仅包含存在于当前集或指定集合（但不同时存在于两者中）中的元素。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">要与当前集进行比较的集合。</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">一个新集，该集包含仅存在于当前集或指定集合中（但不同时存在于两者中）的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">创建一个新的不可变集，该集包含存在于当前集或指定集合中的所有元素。</summary>
      <param name="other" vsli:raw="The collection to add elements from.">从中添加元素的集合。</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">已添加项的新不可变集；或者原始集（如果所有项已在该集内）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary vsli:raw="Creates a collection that has the same contents as this immutable sorted set that can be efficiently manipulated by using standard mutable interfaces.">创建一个其内容与此不可变排序集相同，并且可使用标准可变接口有效操作的集合。</summary>
      <returns vsli:raw="The sorted set builder.">排序集生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">在集内搜索给定的值，并返回所找到的相等值（如果有）。</summary>
      <param name="equalValue" vsli:raw="The value to search for.">要搜索的值。</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">搜索操作在集内找到的值；如果搜索操作未生成任何匹配项，则返回原始值。</param>
      <returns vsli:raw="A value indicating whether the search was successful.">一个指示搜索是否成功的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a given set of items to this immutable sorted set.">将一组给定项添加到此不可变排序集。</summary>
      <param name="other" vsli:raw="The items to add.">要添加的项。</param>
      <returns vsli:raw="The new set with the items added; or the original set if all the items were already in the set.">已添加项的新集；或者原始集（如果所有项已在该集内）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Returns the immutable sorted set that has the specified key comparer.">返回具有指定键比较器的不可变排序集。</summary>
      <param name="comparer" vsli:raw="The comparer to check for.">要检查的比较器。</param>
      <returns vsli:raw="The immutable sorted set that has the specified key comparer.">具有指定键比较器的不可变排序集。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableStack`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">针对 <see cref="T:System.Collections.Immutable.ImmutableStack`1" /> 类的实例提供一组初始化方法。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary vsli:raw="Creates an empty immutable stack.">创建一个空的不可变堆栈。</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable stack.">要存储在不可变堆栈中的项的类型。</typeparam>
      <returns vsli:raw="An empty immutable stack.">空的不可变堆栈。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable stack that contains the specified item.">创建包含指定项的新不可变堆栈。</summary>
      <param name="item" vsli:raw="The item to prepopulate the stack with.">用于预先填充堆栈的项。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">不可变堆栈中项的类型。</typeparam>
      <returns vsli:raw="A new immutable collection that contains the specified item.">包含指定项的新不可变集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable stack that contains the specified array of items.">创建包含指定项数组的新不可变堆栈。</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the stack with.">一个数组，其中包含用于预先填充堆栈的项。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">不可变堆栈中项的类型。</typeparam>
      <returns vsli:raw="A new immutable stack that contains the specified items.">包含指定项的新不可变堆栈。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable stack that contains the specified items.">创建包含指定项的新不可变堆栈。</summary>
      <param name="items" vsli:raw="The items to add to the stack before it's immutable.">在堆栈不可变之前要添加到该堆栈的项。</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">堆栈中项的类型。</typeparam>
      <returns vsli:raw="An immutable stack that contains the specified items.">包含指定项的不可变堆栈。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary vsli:raw="Removes the specified item from an immutable stack.">从不可变堆栈中移除指定的项。</summary>
      <param name="stack" vsli:raw="The stack to modify.">要修改的堆栈。</param>
      <param name="value" vsli:raw="The item to remove from the stack.">要从堆栈中移除的项。</param>
      <typeparam name="T" vsli:raw="The type of items contained in the stack.">堆栈中包含的项的类型。</typeparam>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">一个堆栈；永不为 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">堆栈为空。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary vsli:raw="Represents an immutable stack.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">表示不可变堆栈。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="The type of element on the stack.">堆栈上的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">从不可变堆栈中移除所有对象。</summary>
      <returns vsli:raw="An empty immutable stack.">空的不可变堆栈。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary vsli:raw="Gets an empty immutable stack.">获取空的不可变堆栈。</summary>
      <returns vsli:raw="An empty immutable stack.">空的不可变堆栈。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable stack without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">枚举不可变堆栈的内容，而无需分配任何内存。
NuGet 包：System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">获取枚举数当前位置的元素。</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">位于枚举器当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable stack.">将枚举器推进到不可变堆栈的下一个元素。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the stack.">如果枚举器已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举器已传递到堆栈的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable stack.">返回一个循环访问不可变堆栈的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the stack.">一个可用于循环访问堆栈的枚举器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable stack is empty.">获取一个值，该值指示此不可变堆栈实例是否为空。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此实例为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary vsli:raw="Returns the object at the top of the stack without removing it.">返回位于堆栈顶部的对象但不将其移除。</summary>
      <returns vsli:raw="The object at the top of the stack.">位于堆栈顶部的对象。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">堆栈为空。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element on the top of the stack.">获取对堆栈顶部的元素的只读引用。</summary>
      <returns vsli:raw="A read-only reference to the element on the top of the stack.">对堆栈顶部的元素的只读引用。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">在堆栈为空时引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the stack after the removal.">移除位于不可变堆栈顶部的元素，并返回完成移除操作后的堆栈。</summary>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">一个堆栈；永不为 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">堆栈为空。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary vsli:raw="Removes the specified element from the immutable stack and returns the stack after the removal.">从不可变堆栈中移除指定的元素，并返回完成移除操作后的堆栈。</summary>
      <param name="value" vsli:raw="The value to remove from the stack.">要从堆栈中移除的值。</param>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">一个堆栈；永不为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an object at the top of the immutable stack and returns the new stack.">将对象插入到不可变堆栈的顶部，并返回新堆栈。</summary>
      <param name="value" vsli:raw="The object to push onto the stack.">要推送到堆栈中的对象。</param>
      <returns vsli:raw="The new stack.">新堆栈。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">返回一个循环访问集合的枚举器。</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">返回循环访问集合的枚举数。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable stack.">从不可变堆栈中移除所有元素。</summary>
      <returns vsli:raw="The empty immutable stack.">空的不可变堆栈。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">移除位于不可变堆栈顶部的元素，并返回新堆栈。</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">新堆栈；永不为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">在不可变堆栈顶部插入一个元素，并返回新堆栈。</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">要推送到堆栈中的元素。</param>
      <returns vsli:raw="The new stack.">新堆栈。</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary vsli:raw="LINQ extension method overrides that offer greater efficiency for &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; than the standard LINQ methods  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">LINQ 扩展方法重写，它们为 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 提供的效率高于标准 LINQ 方法。
NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">以累加方式向元素序列应用函数。</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">要将函数应用到的集合。</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">要以累加方式对每个元素调用的函数。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The final value after the cumulative function has been applied to all elements.">向所有元素应用累加函数后得到的最终值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">以累加方式向元素序列应用函数。</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">要将函数应用到的集合。</param>
      <param name="seed" vsli:raw="The initial accumulator value.">累加器的初始值。</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">要以累加方式对每个元素调用的函数。</param>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">累加值的类型。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The final accumulator value.">累加器的最终值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">以累加方式向元素序列应用函数。</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">要将函数应用到的集合。</param>
      <param name="seed" vsli:raw="The initial accumulator value.">累加器的初始值。</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">要以累加方式对每个元素调用的函数。</param>
      <param name="resultSelector" vsli:raw="A function to transform the final accumulator value into the result type." />
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">累加值的类型。</typeparam>
      <typeparam name="TResult" vsli:raw="The type of result returned by the result selector.">结果选择器返回的结果类型。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The final accumulator value.">累加器的最终值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether all elements in this array match a given condition.">获取一个值，该值指示此数组中的所有元素是否与给定的条件匹配。</summary>
      <param name="immutableArray" vsli:raw="The array to check for matches.">要在其中检查匹配项的数组。</param>
      <param name="predicate" vsli:raw="The predicate.">谓词。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element of the source sequence passes the test in the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果源序列的每个元素都通过了指定谓词中的测试，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements.">获取一个值，该值指示数组是否包含任何元素。</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">要在其中检查元素的数组。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array contains an elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果数组包含元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements that match a specified condition.">获取一个值，该值指示数组是否包含与指定条件匹配的任何元素。</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">要在其中检查元素的数组。</param>
      <param name="predicate" vsli:raw="The delegate that defines the condition to match to an element.">用于定义匹配元素时要应用的条件的委托。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element matches the specified condition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果某个元素与指定的条件匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns a value indicating whether this collection contains any elements.">返回一个值，该值指示此集合是否包含任何元素。</summary>
      <param name="builder" vsli:raw="The builder to check for matches.">要在其中检查匹配项的生成器。</param>
      <typeparam name="T" vsli:raw="The type of elements in the array.">数组中元素的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array builder contains any elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果数组生成器包含任何元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in the array.">返回数组中指定索引处的元素。</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">要在其中查找元素的数组。</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">要检索的元素的索引。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The item at the specified index.">指定索引处的项。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence or a default value if the index is out of range.">返回序列中指定索引处的元素；如果索引超出范围，则返回默认值。</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">要在其中查找元素的数组。</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">要检索的元素的索引。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The item at the specified index, or the default value if the index is not found.">指定索引处的项；如果找不到该索引，则为默认值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element in an array.">返回数组中的第一个元素。</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">要从中获取项的数组。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The first item in the array.">数组中的第一个项。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">如果数组为空。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element in a sequence that satisfies a specified condition.">返回序列中满足指定条件的第一个元素。</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">要从中获取项的数组。</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The first item in the list if it meets the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">列表中的第一个项（如果该项满足 <paramref name="predicate" /> 指定的条件）。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">如果数组为空。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection.">返回集合中的第一个元素。</summary>
      <param name="builder" vsli:raw="The builder to retrieve an item from.">要从中检索项的生成器。</param>
      <typeparam name="T" vsli:raw="The type of items in the array.">数组中项的类型。</typeparam>
      <returns vsli:raw="The first item in the list.">列表中的第一个项。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">如果数组为空。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element of a sequence, or a default value if the sequence contains no elements.">返回序列中的第一个元素；如果序列中不包含任何元素，则返回默认值。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">要从中检索项的数组。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">列表中的第一个项（如果已找到）；否则，为项类型的默认值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.">返回序列中满足条件的第一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">要从中检索元素的数组。</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">列表中的第一个项（如果已找到）；否则，为项类型的默认值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection, or the default value if the collection is empty.">返回集合中的第一个元素；如果集合为空，则返回默认值。</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">要从中检索元素的生成器。</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">生成器中的项类型。</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">列表中的第一个项（如果已找到）；否则，为项类型的默认值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of the array.">返回数组的最后一个元素。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">要从中检索项的数组。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the array.">数组包含的元素的类型。</typeparam>
      <returns vsli:raw="The last element in the array.">数组中的最后一个元素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">在集合为空时引发。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a specified condition.">返回序列中满足指定条件的最后一个元素。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">要从中检索元素的数组。</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to retrieve.">委托，用于定义要检索的元素的条件。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The last element of the array that satisfies the &lt;paramref name=&quot;predicate&quot; /&gt; condition.">数组中满足 <paramref name="predicate" /> 条件的最后一个元素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">在集合为空时引发。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection.">返回集合中的最后一个元素。</summary>
      <param name="builder" vsli:raw="The builder to retrieve elements from.">要从中检索元素的生成器。</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">生成器中的项类型。</typeparam>
      <returns vsli:raw="The last element in the builder.">生成器中的最后一个元素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">在集合为空时引发。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of a sequence, or a default value if the sequence contains no elements.">返回序列中的最后一个元素；如果序列中不包含任何元素，则返回默认值。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">要从中检索项的数组。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">序列中的最后一个元素；如果序列中不包含任何元素，则为默认值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.">返回序列中满足条件的最后一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve an element from.">要从中检索元素的数组。</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">委托，用于定义要搜索的元素的条件。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">序列中的最后一个元素；如果序列中不包含任何元素，则为默认值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection, or the default value if the collection is empty.">返回集合中的最后一个元素；如果集合为空，则返回默认值。</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">要从中检索元素的生成器。</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">生成器中的项类型。</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">序列中的最后一个元素；如果序列中不包含任何元素，则为默认值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Projects each element of a sequence into a new form.">将序列中的每个元素投影到新表单。</summary>
      <param name="immutableArray" vsli:raw="The immutable array to select items from.">要从中选择项的不可变数组。</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">应用于每个元素的转换函数。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result element.">结果元素的类型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the transform function on each element of source.">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素为对源的每个元素调用转换函数的结果。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;,             flattens the resulting sequences into one sequence, and invokes a result             selector function on each element therein.">将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" />，并将结果序列合并为一个序列，并对其中每个元素调用结果选择器函数。</summary>
      <param name="immutableArray" vsli:raw="The immutable array.">不可变数组。</param>
      <param name="collectionSelector" vsli:raw="A transform function to apply to each element of the input sequence.">应用于输入序列的每个元素的转换函数。</param>
      <param name="resultSelector" vsli:raw="A transform function to apply to each element of the intermediate sequence.">应用于中间序列的每个元素的转换函数。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;immutableArray&quot; /&gt;.">
        <paramref name="immutableArray" /> 的元素类型。</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">
        <paramref name="collectionSelector" />收集的中间元素的类型。</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">所生成序列的元素的类型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result             of invoking the one-to-many transform function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each             element of &lt;paramref name=&quot;immutableArray&quot; /&gt; and then mapping each of those sequence elements and their             corresponding source element to a result element.">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是通过以下方法得到的：对 <paramref name="collectionSelector" /> 的每个元素调用一对多转换函数 <paramref name="immutableArray" />，然后将这些序列元素中的每一个元素及其相应的源元素映射到一个结果元素。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">根据相等比较器确定两个序列是否相等。</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">用于比较的数组。</param>
      <param name="items" vsli:raw="The items to use for comparison.">用于比较的项。</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">用于检查相等性的比较器。</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">要比较的数组中元素的类型。</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指示序列相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">根据相等比较器确定两个序列是否相等。</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">用于比较的数组。</param>
      <param name="items" vsli:raw="The items to use for comparison.">用于比较的项。</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">用于检查相等性的比较器。</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">要比较的数组中元素的类型。</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指示序列相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">根据相等比较器确定两个序列是否相等。</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">用于比较的数组。</param>
      <param name="items" vsli:raw="The items to use for comparison.">用于比较的项。</param>
      <param name="predicate" vsli:raw="The comparer to use to check for equality.">用于检查相等性的比较器。</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">要比较的数组中元素的类型。</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指示序列相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.">返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve the element from.">要从中检索元素的数组。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The element in the sequence.">序列中的元素。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.">返回序列中满足指定条件的唯一元素；如果有多个这样的元素存在，则会引发异常。</summary>
      <param name="immutableArray" vsli:raw="The immutable array to return a single element from." />
      <param name="predicate" vsli:raw="The function to test whether an element should be returned." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of the array, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.">返回数组中的唯一元素；如果序列为空，则返回默认值；如果序列包含多个元素，此方法将引发异常。</summary>
      <param name="immutableArray" vsli:raw="The array.">数组。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The element in the array, or the default value if the array is empty.">数组中的元素；如果数组为空，则为默认值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains more than one element.">
        <paramref name="source" /> 包含多个元素。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.">返回序列中满足指定条件的唯一元素；如果这类元素不存在，则返回默认值；如果有多个元素满足该条件，此方法将引发异常。</summary>
      <param name="immutableArray" vsli:raw="The array to get the element from.">要从中获取元素的数组。</param>
      <param name="predicate" vsli:raw="The condition the element must satisfy.">元素必须满足的条件。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The element if it satisfies the specified condition; otherwise the default element.">如果该元素满足指定的条件，则返回该元素；否则返回默认元素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">多个元素满足 <paramref name="predicate" /> 中的条件。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Copies the contents of this array to a mutable array.">将此数组的内容复制到不可变数组。</summary>
      <param name="immutableArray" vsli:raw="The immutable array to copy into a mutable one." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The newly instantiated array.">新实例化的数组。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">基于此数组的内容创建字典。</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">要从其创建字典的数组。</param>
      <param name="keySelector" vsli:raw="The key selector.">键选择器。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">键的类型。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">新初始化的字典。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">基于此数组的内容创建字典。</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">要从其创建字典的数组。</param>
      <param name="keySelector" vsli:raw="The key selector.">键选择器。</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">用于初始化字典的比较器。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">键的类型。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">新初始化的字典。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">基于此数组的内容创建字典。</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">要从其创建字典的数组。</param>
      <param name="keySelector" vsli:raw="The key selector.">键选择器。</param>
      <param name="elementSelector" vsli:raw="The element selector.">元素选择器。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">键的类型。</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">元素的类型。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">新初始化的字典。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">基于此数组的内容创建字典。</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">要从其创建字典的数组。</param>
      <param name="keySelector" vsli:raw="The key selector.">键选择器。</param>
      <param name="elementSelector" vsli:raw="The element selector.">元素选择器。</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">用于初始化字典的比较器。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">键的类型。</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">元素的类型。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">新初始化的字典。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Filters a sequence of values based on a predicate.">基于谓词筛选值序列。</summary>
      <param name="immutableArray" vsli:raw="The array to filter.">要筛选的数组。</param>
      <param name="predicate" vsli:raw="The condition to use for filtering the array content.">用于筛选数组内容的条件。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">集合包含的元素的类型。</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements that meet the condition.">返回 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含满足条件的元素。</returns>
    </member>
  </members>
</doc>
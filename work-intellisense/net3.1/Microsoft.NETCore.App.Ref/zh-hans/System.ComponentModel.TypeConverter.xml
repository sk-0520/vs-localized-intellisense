<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">为 <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using no parameters.">不使用任何参数初始化 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using the specified object as the new item.">使用指定的对象作为新项初始化 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 类的新实例。</summary>
      <param name="newObject" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the new item value.">要用作新项的值的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary vsli:raw="Gets or sets the object to be added to the binding list.">获取或设置要添加到绑定列表的对象。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to be added as a new item to the associated collection.">要作为新项添加到关联的集合中的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">表示用来处理 <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event, typically a data container or data-bound collection.">事件的源，通常为数据容器或数据绑定集合。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">包含事件数据的 <see cref="T:System.ComponentModel.AddingNewEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary vsli:raw="Specifies the value to pass to a property to cause the property to get its value from another source. This is known as ambience. This class cannot be inherited.">指定要传递给属性的值，以使该属性从另一个源中获取其值。 这称为“环境”。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Boolean value for its value.">在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个布尔值的情况下，初始化该实例。</summary>
      <param name="value" vsli:raw="The value of this attribute.">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an 8-bit unsigned integer for its value.">在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个 8 位无符号整数的情况下，初始化该实例。</summary>
      <param name="value" vsli:raw="The value of this attribute.">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Unicode character for its value.">在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个 Unicode 字符的情况下，初始化该实例。</summary>
      <param name="value" vsli:raw="The value of this attribute.">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a double-precision floating-point number for its value.">在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个双精度浮点数字的情况下，初始化该实例。</summary>
      <param name="value" vsli:raw="The value of this attribute.">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 16-bit signed integer for its value.">在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个 16 位有符号整数的情况下，初始化该实例。</summary>
      <param name="value" vsli:raw="The value of this attribute.">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 32-bit signed integer for its value.">在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个 32 位有符号整数的情况下，初始化该实例。</summary>
      <param name="value" vsli:raw="The value of this attribute.">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 64-bit signed integer for its value.">在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个 64 位有符号整数的情况下，初始化该实例。</summary>
      <param name="value" vsli:raw="The value of this attribute.">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an object for its value.">在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个对象的情况下，初始化该实例。</summary>
      <param name="value" vsli:raw="The value of this attribute.">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a single-precision floating point number for its value.">在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个单精度浮点数字的情况下，初始化该实例。</summary>
      <param name="value" vsli:raw="The value of this attribute.">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a string for its value.">在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个字符串的情况下，初始化该实例。</summary>
      <param name="value" vsli:raw="The value of this attribute.">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given the value and its type.">在提供值和其类型的情况下，初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">
        <paramref name="value" /> 参数的 <see cref="T:System.Type" />。</param>
      <param name="value" vsli:raw="The value for this attribute.">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">确定指定的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 是否等同于当前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">要与当前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 进行比较的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />，则为 <see cref="T:System.ComponentModel.AmbientValueAttribute" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">当前 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary vsli:raw="Gets the object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">获取对象，该对象是此 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 的值。</summary>
      <returns vsli:raw="The object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">是此 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 的值的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Array&quot; /&gt; objects to and from various other representations.">提供将 <see cref="T:System.Array" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ArrayConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ArrayConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">将给定的值对象转换为指定的目标类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" /> 将要转换到的区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">要将值转换成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter.">获取由值参数指定的数组类型的属性集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组的类型。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">一个将用作筛选器的 <see cref="T:System.Attribute" /> 类型的数组。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for an array, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">一个具有为数组公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties.">获取一个值，该值指示此对象是否支持属性。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">由于应调用 <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 来查找此对象的属性，因此为 <see langword="true" />。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary vsli:raw="Represents a collection of attributes.">表示特性的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.AttributeCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.AttributeCollection" /> 类的新实例。</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection.">一个为此集合提供特性的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributes" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary vsli:raw="Gets the attribute collection.">获取特性集合。</summary>
      <returns vsli:raw="The attribute collection.">特性集合。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary vsli:raw="Determines whether this collection of attributes has the specified attribute.">确定该特性集合是否具有指定的特性。</summary>
      <param name="attribute" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">要在集合中查找的 <see cref="T:System.Attribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合包含该特性或是该类型特性的默认特性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary vsli:raw="Determines whether this attribute collection contains all the specified attributes in the attribute array.">确定该特性集合是否包含特性数组中所有指定的特性。</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">要在集合中查找的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains all the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该集合包含所有特性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the collection to an array, starting at the specified index.">从指定的索引开始，将集合复制到数组。</summary>
      <param name="array" vsli:raw="The &lt;see cref=&quot;T:System.Array&quot; /&gt; to copy the collection to.">要将集合复制到的 <see cref="T:System.Array" />。</param>
      <param name="index" vsli:raw="The index to start from.">从其开始的索引。</param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary vsli:raw="Gets the number of attributes.">获取特性的数目。</summary>
      <returns vsli:raw="The number of attributes.">特性的数目。</returns>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use, rather than creating a new one. This field is read-only.">指定一个可以使用的空集合，而不是创建一个新集合。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from an existing &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">从现有的 <see cref="T:System.ComponentModel.AttributeCollection" /> 创建新的 <see cref="T:System.ComponentModel.AttributeCollection" />。</summary>
      <param name="existing" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from which to create the copy.">要从其创建副本的 <see cref="T:System.ComponentModel.AttributeCollection" />。</param>
      <param name="newAttributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection. Can be &lt;see langword=&quot;null&quot; /&gt;.">一个为此集合提供特性的类型 <see cref="T:System.Attribute" /> 的数组。 可以为 <see langword="null" />。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that is a copy of &lt;paramref name=&quot;existing&quot; /&gt;.">新的 <see cref="T:System.ComponentModel.AttributeCollection" />，它是 <paramref name="existing" /> 的副本。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;existing&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="existing" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;see cref=&quot;T:System.Type&quot; /&gt;.">返回给定 <see cref="T:System.Attribute" /> 的默认 <see cref="T:System.Type" />。</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the attribute to retrieve.">要检索的特性的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="The default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;paramref name=&quot;attributeType&quot; /&gt;.">给定 <paramref name="attributeType" /> 的默认 <see cref="T:System.Attribute" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this collection.">获取此集合的枚举器。</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 类型的枚举数。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the attribute with the specified index number.">获取具有指定索引号的特性。</summary>
      <param name="index" vsli:raw="The zero-based index of &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">
        <see cref="T:System.ComponentModel.AttributeCollection" /> 的从零开始的索引。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified index number.">具有指定索引号的 <see cref="T:System.Attribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary vsli:raw="Gets the attribute with the specified type.">获取具有指定类型的特性。</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to get from the collection.">要从集合中获取的 <see cref="T:System.Type" /> 的 <see cref="T:System.Attribute" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified type or, if the attribute does not exist, the default value for the attribute type.">具有指定类型的 <see cref="T:System.Attribute" />；如果该特性不存在，则为该特性类型的默认值。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary vsli:raw="Determines whether a specified attribute is the same as an attribute in the collection.">确定指定的特性是否与集合中的特性相同。</summary>
      <param name="attribute" vsli:raw="An instance of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to compare with the attributes in this collection.">要与集合中的特性进行比较的 <see cref="T:System.Attribute" /> 的实例。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果特性包含在集合中，且其值与集合中该特性的值相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary vsli:raw="Determines whether the attributes in the specified array are the same as the attributes in the collection.">确定指定数组中的特性是否与集合中的特性相同。</summary>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.MemberAttributes&quot; /&gt; to compare with the attributes in this collection.">要与此集合中的特性进行比较的 <see cref="T:System.CodeDom.MemberAttributes" /> 的数组。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果数组中的所有特性都包含在集合中，且其值与集合中特性的值相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">获取集合中包含的元素数。</summary>
      <returns vsli:raw="The number of elements contained in the collection.">集合中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread-safe).">获取一个值，该值指示对集合的访问是否已同步（线程安全）。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果对该集合的访问是同步的（线程安全），则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">获取可用于同步对集合的访问的对象。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">可用于同步集合访问的对象。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">返回 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 的一个 <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary vsli:raw="Enables attribute redirection. This class cannot be inherited.">启用特性重定向。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name.">用给定的类型名称初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 类的新实例。</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">要指定的类型的名称。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name and property name.">用给定的类型名称和属性名称初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 类的新实例。</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">要指定的类型的名称。</param>
      <param name="propertyName" vsli:raw="The name of the property for which attributes will be retrieved.">将为其检索特性的属性的名称。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type.">用给定的类型初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 类的新实例。</summary>
      <param name="type" vsli:raw="The type to specify.">要指定的类型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary vsli:raw="Gets the name of the property for which attributes will be retrieved.">获取将为其检索特性的属性的名称。</summary>
      <returns vsli:raw="The name of the property for which attributes will be retrieved.">将为其检索特性的属性的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary vsli:raw="Gets the assembly qualified type name passed into the constructor.">获取传入构造函数的程序集限定类型名称。</summary>
      <returns vsli:raw="The assembly qualified name of the type specified in the constructor.">构造函数中指定的类型的程序集限定名称。</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary vsli:raw="Provides a base type converter for nonfloating-point numerical types.">提供非浮点数字类型的基类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">确定该转换器是否可以将给定源类型的对象转换为转换器的本机类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type from which you want to convert.">
        <see cref="T:System.Type" />，它表示要对其进行转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此转换器能够执行该操作，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">返回指示该转换器能否使用上下文将对象转换为给定目标类型的值。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="t">表示要转换为的类型的<see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此转换器能够执行该操作，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">将给定对象转换为转换器的本机类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">指定表示数字的区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.Exception" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">将指定的对象转换为其他类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">指定表示数字的区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">对象要转换为的类型。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary vsli:raw="Specifies whether a member is typically used for binding. This class cannot be inherited.">指定成员是否通常用于绑定。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with a Boolean value.">用布尔值初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的新实例。</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要将属性用于绑定，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的新实例。</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要将属性用于绑定，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.BindingDirection" /> 值之一。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with one of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">使用其中一个 <see cref="T:System.ComponentModel.BindableSupport" /> 值初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的新实例。</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.BindableSupport" /> 值之一。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的新实例。</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.BindableSupport" /> 值之一。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.BindingDirection" /> 值之一。</param>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating that a property is typically used for binding.">获取指示某个属性通常用于绑定的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is typically used for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该属性通常用于绑定，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.BindableAttribute.No&quot; /&gt;. This field is read-only.">指定 <see cref="T:System.ComponentModel.BindableAttribute" /> 的默认值，即 <see cref="F:System.ComponentModel.BindableAttribute.No" />。 此字段为只读。</summary>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary vsli:raw="Gets a value indicating the direction or directions of this property's data binding.">获取指示此属性的数据绑定方向的值。</summary>
      <returns vsli:raw="The direction of this property's data binding.">此属性的数据绑定的方向。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; objects are equal.">确定两个 <see cref="T:System.ComponentModel.BindableAttribute" /> 对象是否相等。</summary>
      <param name="obj" vsli:raw="The object to compare.">要比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if it is not equal.">如果指定的 <see cref="T:System.ComponentModel.BindableAttribute" /> 等于当前的 <see cref="T:System.ComponentModel.BindableAttribute" />，则为 <see langword="true" />；如果不等，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary vsli:raw="Serves as a hash function for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">用作 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的哈希函数。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;.">当前 <see cref="T:System.ComponentModel.BindableAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">确定此特性是否为默认特性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此特性是此特性类的默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not typically used for binding. This field is read-only.">指定属性通常不用于绑定。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is typically used for binding. This field is read-only.">指定属性通常用于绑定。 此字段为只读。</summary>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary vsli:raw="Specifies values to indicate whether a property can be bound to a data element or another property.">指定值来表示是否可以将属性绑定到数据元素或另一个属性。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary vsli:raw="The property is set to the default.">该属性被设置为默认值。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary vsli:raw="The property is not bindable at design time.">该属性在设计时不可绑定。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary vsli:raw="The property is bindable at design time.">该属性在设计时可绑定。</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary vsli:raw="Specifies whether the template can be bound one way or two ways.">指定模板是否可以用一种方式或两种方式绑定。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary vsli:raw="The template can only accept property values. Used with a generic &lt;see cref=&quot;T:System.Web.UI.ITemplate&quot; /&gt;.">该模板只能接受属性值。 与泛型 <see cref="T:System.Web.UI.ITemplate" /> 一起使用。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary vsli:raw="The template can accept and expose property values. Used with an &lt;see cref=&quot;T:System.Web.UI.IBindableTemplate&quot; /&gt;.">该模板可以接受和公开属性值。 与 <see cref="T:System.Web.UI.IBindableTemplate" /> 一起使用。</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary vsli:raw="Provides a generic collection that supports data binding.">提供支持数据绑定的泛型集合。</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">列表中元素的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class using default values.">使用默认值初始化 <see cref="T:System.ComponentModel.BindingList`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class with the specified list.">使用指定列表初始化 <see cref="T:System.ComponentModel.BindingList`1" /> 类的新实例。</summary>
      <param name="list" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; of items to be contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">要包含在 <see cref="T:System.Collections.Generic.IList`1" /> 中的项的 <see cref="T:System.ComponentModel.BindingList`1" />。</param>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary vsli:raw="Occurs before an item is added to the list.">在将项添加到该列表之前发生。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary vsli:raw="Adds a new item to the collection.">将新项添加到集合中。</summary>
      <returns vsli:raw="The item added to the list.">添加到列表的项。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Forms.BindingSource.AllowNew&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A public parameterless constructor could not be found for the current item type.">
        <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> 属性设置为 <see langword="false" />。
或
未能找到当前项目类型的公共无参数构造函数。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary vsli:raw="Adds a new item to the end of the collection.">将新项添加到集合末尾。</summary>
      <returns vsli:raw="The item that was added to the collection.">已添加到集合中的项。</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="The new item is not the same type as the objects contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">新项的类型与包含在 <see cref="T:System.ComponentModel.BindingList`1" /> 中的对象的类型不同。</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary vsli:raw="Gets or sets a value indicating whether items in the list can be edited.">获取或设置一个值，该值指示该列表中的项是否可以编辑。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果列表项可以编辑，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary vsli:raw="Gets or sets a value indicating whether you can add items to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">获取或设置一个值，该值指示是否可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法向列表中添加项。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">如果可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法向列表中添加项，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值视列表中所包含的基础类型而定。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary vsli:raw="Gets or sets a value indicating whether you can remove items from the collection.">获取或设置一个值，该值指示是否可以从集合中移除项。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果可以使用 <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 方法从列表中移除项，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the items if overridden in a derived class; otherwise, throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">如果已在派生类中重写，则对项进行排序；否则将引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that specifies the property to sort on.">指定要用于排序的属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">方法未在派生类中重写。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item.">丢弃挂起的新项。</summary>
      <param name="itemIndex" vsli:raw="The index of the of the new item to be added.">要添加的新项的索引</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary vsli:raw="Removes all elements from the collection.">移除集合中的所有元素。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">向集合提交挂起的新项。</summary>
      <param name="itemIndex" vsli:raw="The index of the new item to be added.">要添加的新项的索引。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Searches for the index of the item that has the specified property descriptor with the specified value, if searching is implemented in a derived class; otherwise, a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">如果在派生类中实现了搜索，则用指定值搜索具有指定属性说明符的项的索引；否则将引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search for.">要搜索的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key" vsli:raw="The value of &lt;paramref name=&quot;prop&quot; /&gt; to match.">要匹配的 <paramref name="prop" /> 值。</param>
      <returns vsli:raw="The zero-based index of the item that matches the property descriptor and contains the specified value.">与属性说明符匹配并包含指定值的项的从零开始的索引。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; is not overridden in a derived class.">
        <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" /> 未在派生类中重写。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified item in the list at the specified index.">将指定的项插入到列表中的指定索引位置。</summary>
      <param name="index" vsli:raw="The zero-based index where the item is to be inserted.">要插入该项的位置的从零开始的索引。</param>
      <param name="item" vsli:raw="The item to insert in the list.">要插入列表的项。</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary vsli:raw="Gets a value indicating whether the list is sorted.">获取一个值，指示列表是否已排序。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is sorted; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果列表已排序，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary vsli:raw="Occurs when the list or an item in the list changes.">当列表或列表中的项更改时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.AddingNew&quot; /&gt; event.">引发 <see cref="E:System.ComponentModel.BindingList`1.AddingNew" /> 事件。</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">包含事件数据的 <see cref="T:System.ComponentModel.AddingNewEventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event.">引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary vsli:raw="Gets or sets a value indicating whether adding or removing items within the list raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events.">获取或设置一个值，该值指示在列表中添加或移除项时是否会引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if adding or removing items raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果添加或移除项时引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">移除指定索引处的项。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="You are removing a newly added item and &lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowRemove&quot; /&gt; is set to &lt;see langword=&quot;false&quot; /&gt;.">您正在移除一个新添加的项而 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> 设置为 <see langword="false" />。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary vsli:raw="Removes any sort applied with &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; if sorting is implemented in a derived class; otherwise, raises &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">如果在派生类中实现排序，则移除通过 <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 应用的任何排序；否则将引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">方法未在派生类中重写。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.Reset&quot; /&gt;.">引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 类型的 <see cref="F:System.ComponentModel.ListChangedType.Reset" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt; for the item at the specified position.">为位于指定位置的项引发类型为 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 的 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> 事件。</summary>
      <param name="position" vsli:raw="A zero-based index of the item to be reset.">要重置的项的从零开始的索引。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">使用指定项替换指定索引处的项。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to replace.">要替换的项的从零开始的索引。</param>
      <param name="item" vsli:raw="The new value for the item at the specified index. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">位于指定索引处的项的新值。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.ObjectModel.Collection`1.Count&quot; /&gt;.">
        <paramref name="index" /> 小于零。

或 -
<paramref name="index" /> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary vsli:raw="Gets the direction the list is sorted.">获取列表的排序方向。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.ComponentModel.ListSortDirection.Ascending&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。 默认值为 <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary vsli:raw="Gets the property descriptor that is used for sorting the list if sorting is implemented in a derived class; otherwise, returns &lt;see langword=&quot;null&quot; /&gt;.">如果在派生类中实现了排序，则获取用于对列表排序的属性说明符；否则返回 <see langword="null" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; used for sorting the list.">用于对列表排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary vsli:raw="Gets a value indicating whether &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are enabled.">获取一个值，该值指示是否启用 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果支持 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports searching.">获取一个值，该值指示列表是否支持搜索。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果列表支持搜索，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports sorting.">获取一个值，该值指示列表是否支持排序。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果列表支持排序，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add as a search criteria.">要作为搜索条件添加的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary vsli:raw="Adds a new item to the list. For more information, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">将新项添加到列表。 有关详细信息，请参阅 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。</summary>
      <returns vsli:raw="The item added to the list.">添加到列表的项。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">不支持此方法。</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary vsli:raw="Gets a value indicating whether items in the list can be edited.">获取一个值，该值指示是否可以编辑列表中的项。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果列表项可以编辑，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary vsli:raw="Gets a value indicating whether new items can be added to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">获取一个值，该值指示是否可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法向列表中添加新项。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">如果可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法向列表中添加项，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值视列表中所包含的基础类型而定。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary vsli:raw="Gets a value indicating whether items can be removed from the list.">获取一个值，该值指示是否可以从列表中移除项。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果可以使用 <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 方法从列表中移除项，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;. For a complete description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">根据 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" /> 对列表进行排序。 有关此成员的完整说明，请参见 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />。</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">以其为根据进行排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt;.">有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />。</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">要对其进行搜索的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;prop&quot; /&gt; parameter to search for.">要搜索的 <paramref name="prop" /> 参数的值。</param>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">具有给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的行的索引。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.IsSorted&quot; /&gt;.">有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已调用 <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" /> 并且未调用 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">要从用于搜索的索引中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt;.">有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /></summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortDirection&quot; /&gt;.">有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortProperty&quot; /&gt;.">有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">正在用于排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsChangeNotification&quot; /&gt;.">有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当列表更改或项更改时引发了 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt;.">有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果列表支持使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法进行搜索，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt;.">有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果列表支持排序，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether item property value changes raise &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt;. This member cannot be overridden in a derived class.">获取一个值，该值指示项属性值更改是否会引发类型为 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 的 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> 事件。 不能在派生类中重写此成员。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list type implements &lt;see cref=&quot;T:System.ComponentModel.INotifyPropertyChanged&quot; /&gt;, otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果列表类型实现<see cref="T:System.ComponentModel.INotifyPropertyChanged" />，则<see langword="false" />为; 否则为。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Boolean&quot; /&gt; objects to and from various other representations.">提供将 <see cref="T:System.Boolean" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BooleanConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.BooleanConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Boolean object using the specified context.">获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为布尔对象。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此对象可以执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a Boolean object.">将给定值对象转换为布尔对象。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">指定要转换成的区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the Boolean data type.">获取布尔数据类型的标准值的集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，它包含一组标准有效值。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">获取一个值，该值指示从 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 方法返回的标准值的列表是否为独占列表。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">返回 <see langword="true" />，因为从 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 返回的 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能的值的穷举列表。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">获取一个值，该值指示此对象是否支持可从列表中选取的标准值集。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">返回 <see langword="true" />，因为可调用 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 来查找对象支持的一组公共值。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from various other representations.">提供用于在 8 位无符号整数对象与其他各种表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ByteConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ByteConverter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary vsli:raw="Represents the method that handles a cancelable event.">表示处理可取消事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CancelEventArgs&quot; /&gt; that contains the event data.">包含事件数据的 <see cref="T:System.ComponentModel.CancelEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary vsli:raw="Provides a type converter to convert Unicode character objects to and from various other representations.">提供将 Unicode 字符对象与各种其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CharConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.CharConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Unicode character object using the specified context.">获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为 Unicode 字符对象。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a Unicode character object.">将给定对象转换为 Unicode 字符对象。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" /> 将要转换到的区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a Unicode character object using the arguments.">使用这些参数将给定值对象转换为 Unicode 字符对象。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" /> 将要转换到的区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">要将值转换成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary vsli:raw="Specifies how the collection is changed.">指定如何更改集合。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary vsli:raw="Specifies that an element was added to the collection.">指定已将某个元素添加到集合。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary vsli:raw="Specifies that the entire collection has changed. This is caused by using methods that manipulate the entire collection, such as &lt;see cref=&quot;M:System.Collections.CollectionBase.Clear&quot; /&gt;.">指定已更改整个集合。 使用操作整个集合的方法（如 <see cref="M:System.Collections.CollectionBase.Clear" />）时会导致此情况。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary vsli:raw="Specifies that an element was removed from the collection.">指定已从集合中移除一个元素。</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event.">为 <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> 类的新实例。</summary>
      <param name="action" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values that specifies how the collection changed.">指定集合如何更改的 <see cref="T:System.ComponentModel.CollectionChangeAction" /> 值之一。</param>
      <param name="element" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the instance of the collection where the change occurred.">
        <see cref="T:System.Object" />，它指定发生更改的集合实例。</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary vsli:raw="Gets an action that specifies how the collection changed.">获取指定集合如何更改的操作。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.CollectionChangeAction" /> 值之一。</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary vsli:raw="Gets the instance of the collection with the change.">获取包含更改的集合实例。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the instance of the collection with the change, or &lt;see langword=&quot;null&quot; /&gt; if you refresh the collection.">表示包含更改的集合实例的 <see cref="T:System.Object" />；如果刷新集合，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event raised when adding elements to or removing elements from a collection.">表示处理将元素添加到集合中或从集合中移除元素时引发的 <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; that contains the event data.">包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary vsli:raw="Provides a type converter to convert collection objects to and from various other representations.">提供将集合对象与各种其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.CollectionConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">将给定的值对象转换为指定的目标类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="The culture to which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">要将 <paramref name="value" /> 转换成的区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This parameter must inherit from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">要转换的 <see cref="T:System.Object" />。 此参数必须从 <see cref="T:System.Collections.ICollection" /> 继承。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">要将值转换成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter using the specified context and attributes.">使用指定的上下文和特性获取由值参数指定的数组类型的属性集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组的类型。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">一个将用作筛选器的 <see cref="T:System.Attribute" /> 类型的数组。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 <see langword="null" />。 此方法始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持属性。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>返回 <see langword="false" />，因为不应调用 <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 来查找此对象的属性。 此方法从不返回 <see langword="true" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the data source and data member properties for a component that supports complex data binding. This class cannot be inherited.">指定一个组件的数据源和数据成员属性，该组件支持复杂数据绑定。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using no parameters.">不使用任何参数初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source.">使用指定的数据源初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类的新实例。</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">要用作数据源的属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source and data member.">使用指定的数据源和数据成员初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类的新实例。</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">要用作数据源的属性的名称。</param>
      <param name="dataMember" vsli:raw="The name of the property to be used as the source for data.">要用作数据源的属性的名称。</param>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary vsli:raw="Gets the name of the data member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">获取 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所绑定组件的数据成员属性的名称。</summary>
      <returns vsli:raw="The name of the data member property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所绑定组件的数据成员属性的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">获取 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所绑定组件的数据源属性的名称。</summary>
      <returns vsli:raw="The name of the data source property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所绑定组件的数据源属性的名称。</returns>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class.">表示 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">确定指定的 <see cref="T:System.Object" /> 是否等同于当前的 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 实例。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">要与当前的 <see cref="T:System.Object" /> 实例进行比较的 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">如果该对象等同于当前的实例，则为 <see langword="true" />；否则为 <see langword="false" />，指示两者不等同。</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位有符号整数哈希代码。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary vsli:raw="Provides a type converter to convert components to and from various other representations.">提供将组件与各种其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ComponentConverter" /> 类的新实例。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this component converter.">一个 <see cref="T:System.Type" />，它表示与此组件转换器关联的类型。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of component specified by the value parameter.">获取由值参数指定的组件类型的属性集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of component to get the properties for.">一个 <see cref="T:System.Object" />，它指定要获取其属性的组件类型。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">一个将用作筛选器的 <see cref="T:System.Attribute" /> 类型的数组。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">具有为此组件公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">获取一个值，该值指示此对象是否使用指定的上下文支持属性。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">由于应调用 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 来查找此对象的属性，因此为 <see langword="true" />。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary vsli:raw="Provides the base class for a custom component editor.">提供自定义组件编辑器的基类。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentEditor&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ComponentEditor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified based upon a given context.">编辑组件并返回一个值，用以指示是否已根据给定上下文修改了组件。</summary>
      <param name="context" vsli:raw="An optional context object that can be used to obtain further information about the edit.">可用于获得有关编辑更多信息的可选上下文对象。</param>
      <param name="component" vsli:raw="The component to be edited.">要编辑的组件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果组件已被修改，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified.">编辑该组件并返回一个表示是否修改了该组件的值。</summary>
      <param name="component" vsli:raw="The component to be edited.">要编辑的组件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果组件已被修改，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary vsli:raw="Provides simple functionality for enumerating resources for a component or object. The &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class is a &lt;see cref=&quot;T:System.Resources.ResourceManager&quot; /&gt;.">提供组件或对象的枚举资源的简单功能。 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 类是一个 <see cref="T:System.Resources.ResourceManager" />。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class with default values.">使用默认值初始化 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; that looks up resources in satellite assemblies based on information from the specified &lt;see cref=&quot;T:System.Type&quot; /&gt;.">创建一个 <see cref="T:System.ComponentModel.ComponentResourceManager" />，它根据指定的 <see cref="T:System.Type" /> 中的信息在附属程序集内查找资源。</summary>
      <param name="t" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; from which the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; derives all information for finding resource files.">一个 <see cref="T:System.Type" />，<see cref="T:System.ComponentModel.ComponentResourceManager" /> 将从其中派生所有用于查找资源文件的信息。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">将资源的值应用于对象相应的属性。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">一个 <see cref="T:System.Object" />，它包含要应用的属性值。</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">一个 <see cref="T:System.String" />，它包含要在资源中查找的对象名称。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 或 <paramref name="objectName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">将资源的值应用于对象相应的属性。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">一个 <see cref="T:System.Object" />，它包含要应用的属性值。</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">一个 <see cref="T:System.String" />，它包含要在资源中查找的对象名称。</param>
      <param name="culture" vsli:raw="The culture for which to apply resources.">要应用资源的区域性。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 或 <paramref name="objectName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary vsli:raw="Encapsulates zero or more components.">封装零个或更多个组件。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Container" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;. The component is unnamed.">将指定的 <see cref="T:System.ComponentModel.Component" /> 添加到 <see cref="T:System.ComponentModel.Container" />。 该组件未命名。</summary>
      <param name="component" vsli:raw="The component to add.">要添加的组件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; and assigns it a name.">将指定的 <see cref="T:System.ComponentModel.Component" /> 添加到 <see cref="T:System.ComponentModel.Container" /> 并为其分配名称。</summary>
      <param name="component" vsli:raw="The component to add.">要添加的组件。</param>
      <param name="name" vsli:raw="The unique, case-insensitive name to assign to the component.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt;, which leaves the component unnamed.">要给该组件分配的唯一的、区分大小写的名称。

或 -
<see langword="null" />，它使组件保持未命名状态。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">
        <paramref name="name" /> 不是唯一的。</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary vsli:raw="Gets all the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">获取 <see cref="T:System.ComponentModel.Container" /> 中的所有组件。</summary>
      <returns vsli:raw="A collection that contains the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">包含 <see cref="T:System.ComponentModel.Container" /> 中的组件的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; for the given &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and assigns the given name to the site.">为给定的 <see cref="T:System.ComponentModel.ISite" /> 创建一个站点 <see cref="T:System.ComponentModel.IComponent" />，并将给定名称分配给该站点。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">要为其创建站点的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">要分配给 <paramref name="component" /> 的名称，或者为 <see langword="null" /> 以跳过名称分配。</param>
      <returns vsli:raw="The newly created site.">新创建的站点。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">释放由 <see cref="T:System.ComponentModel.Container" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;, and optionally releases the managed resources.">释放由 <see cref="T:System.ComponentModel.Container" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary vsli:raw="Releases unmanaged resources and performs other cleanup operations before the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; is reclaimed by garbage collection.">在通过垃圾回收将 <see cref="T:System.ComponentModel.Container" /> 回收之前，释放非托管资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">获取指定类型的服务对象（如果可用）。</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">要检索的服务的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; implementing the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">实现所请求服务的 <see cref="T:System.Object" />；或者在无法解决服务的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">从 <see cref="T:System.ComponentModel.Container" /> 中移除组件。</summary>
      <param name="component" vsli:raw="The component to remove.">要移除的组件。</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; without setting &lt;see cref=&quot;P:System.ComponentModel.IComponent.Site&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;.">从 <see cref="T:System.ComponentModel.Container" /> 中移除组件，不将 <see cref="P:System.ComponentModel.IComponent.Site" /> 设置为 <see langword="null" />。</summary>
      <param name="component" vsli:raw="The component to remove.">要移除的组件。</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Determines whether the component name is unique for this container.">确定组件名称对此容器是否唯一。</summary>
      <param name="component" vsli:raw="The named component.">命名的组件。</param>
      <param name="name" vsli:raw="The component name to validate.">要验证的组件名称。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">
        <paramref name="name" /> 不是唯一的。</exception>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary vsli:raw="Provides a base class for the container filter service.">为容器筛选服务提供基类。</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ContainerFilterService&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ContainerFilterService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary vsli:raw="Filters the component collection.">筛选组件集合。</summary>
      <param name="components" vsli:raw="The component collection to filter.">要筛选的组件集合。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ComponentCollection&quot; /&gt; that represents a modified collection.">表示已修改集合的 <see cref="T:System.ComponentModel.ComponentCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; objects to and from various other representations.">提供将 <see cref="T:System.Globalization.CultureInfo" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CultureInfoConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.CultureInfoConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; using the specified context.">获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;.">将指定的值对象转换为 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">指定要转换成的区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; specifies a culture that is not valid.">
        <paramref name="value" /> 指定无效的区域性。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">将给定的值对象转换为指定的目标类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">指定要转换成的区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">要将值转换成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary vsli:raw="Retrieves the name of the specified culture.">检索指定区域性的名称。</summary>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to get the name for.">
        <see cref="T:System.Globalization.CultureInfo" />，它指定要获取其名称的区域性。</param>
      <returns vsli:raw="The name of the specified culture.">指定区域性的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object using the specified context.">使用指定的上下文获取 <see cref="T:System.Globalization.CultureInfo" /> 对象的标准值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">含有一组标准的有效值的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，或者如果数据类型不支持一组标准值，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list.">获取一个值，该值指示从 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 返回的标准值的列表是否为穷举列表。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is not an exhaustive list of possible values (that is, other values are possible). This method never returns &lt;see langword=&quot;true&quot; /&gt;.">返回 <see langword="false" />，因为从 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 返回的 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 不是可能的值的穷举列表（换言之，其他值也是可能的）。 此方法从不返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">获取一个值，该值指示此对象是否支持可使用指定上下文从列表中选取的标准值集。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">返回 <see langword="true" />，因为应当调用 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 来查找对象支持的一组公共值。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary vsli:raw="Provides a simple default implementation of the &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; interface.">提供 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 接口的简单默认实现。</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class using a parent custom type descriptor.">使用父级自定义类型说明符初始化 <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 类的新实例。</summary>
      <param name="parent" vsli:raw="The parent custom type descriptor.">父级自定义类型说明符。</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for the type represented by this type descriptor.">返回此类型说明符表示的类型的自定义特性集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the type. The default is &lt;see cref=&quot;F:System.ComponentModel.AttributeCollection.Empty&quot; /&gt;.">一个 <see cref="T:System.ComponentModel.AttributeCollection" />，包含该类型的特性。 默认值为 <see cref="F:System.ComponentModel.AttributeCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the fully qualified name of the class represented by this type descriptor.">返回由此类型描述符表示的类的完全限定名。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the fully qualified class name of the type this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">包含此类型描述符所描述类型的完全限定类名的 <see cref="T:System.String" />。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of the class represented by this type descriptor.">返回此类型说明符表示的类的名称。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the component instance this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">一个 <see cref="T:System.String" />，包含此类型说明符说明的组件实例的名称。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for the type represented by this type descriptor.">返回此类型说明符表示的类型的类型转换器。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the type represented by this type descriptor. The default is a newly created &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt;.">此类型说明符表示的类型的 <see cref="T:System.ComponentModel.TypeConverter" />。 默认为新创建的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the event descriptor for the default event of the object represented by this type descriptor.">返回此类型说明符表示的对象的默认事件的事件说明符。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the default event on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">此类型说明符表示的对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" />。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the property descriptor for the default property of the object represented by this type descriptor.">返回此类型说明符表示的对象的默认属性的属性描述符。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; for the default property on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">此类型说明符表示的对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type that is to be associated with the class represented by this type descriptor.">返回要与此类型说明符表示的类关联的指定类型的编辑器。</summary>
      <param name="editorBaseType" vsli:raw="The base type of the editor to retrieve.">要检索的编辑器的基类型。</param>
      <returns vsli:raw="An editor of the given type that is to be associated with the class represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">要与此类型说明符表示的类关联的给定类型的编辑器。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns a collection of event descriptors for the object represented by this type descriptor.">返回此类型说明符所表示对象的事件说明符的集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptors for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，包含此类型说明符所表示的对象的事件说明符。 默认值为 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of event descriptors for the object represented by this type descriptor.">返回此类型说明符所表示的对象的已筛选事件说明符集合。</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">用作筛选器的特性数组。 它可以是 <see langword="null" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，包含此类型说明符所表示的对象的事件说明。 默认值为 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns a collection of property descriptors for the object represented by this type descriptor.">返回此类型说明符所表示对象的属性说明符的集合。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含此类型说明符所表示的对象的属性说明。 默认值为 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of property descriptors for the object represented by this type descriptor.">返回此类型说明符所表示的对象的已筛选属性描述符的集合。</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">用作筛选器的特性数组。 它可以是 <see langword="null" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含此类型说明符所表示的对象的属性说明。 默认值为 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">返回一个对象，该对象包含指定的属性描述符所描述的属性。</summary>
      <param name="pd" vsli:raw="The property descriptor for which to retrieve the owning object.">要检索其所属对象的属性描述符。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that owns the given property specified by the type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">一个 <see cref="T:System.Object" />，拥有该类型说明符指定的给定属性。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary vsli:raw="Identifies a type as an object suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object. This class cannot be inherited.">将某一类型标识为适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象的对象。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class and indicates whether an object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object.">初始化 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 类的新实例，并指示某一对象是否适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。</summary>
      <param name="isDataObject" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该对象适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary vsli:raw="Indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">指示该类适合在设计时绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary vsli:raw="Represents the default value of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class, which indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">表示 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 类的默认值，该值指示该类适合在设计时绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; fits the pattern of another object.">确定此 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 实例是否符合另一对象的模式。</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt;.">与 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 实例进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该实例与 <paramref name="obj" /> 参数所指定的实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary vsli:raw="Gets a value indicating whether an object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time.">获取一个值，该值指示是否应将某一对象视为适合在设计时绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果将该对象视为适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">获取一个值，该值指示该特性的当前值是否为该特性的默认值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该特性的当前值是默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary vsli:raw="Indicates that the class is not suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">指定该类不适合在设计时绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。 此字段为只读。</summary>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary vsli:raw="Provides metadata for a property representing a data field. This class cannot be inherited.">为表示数据字段的属性提供元数据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row.">初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类的新实例，并指示该字段是否是数据行的主键。</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">为 <see langword="true" /> 指示该字段在数据行的主键中；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, and whether the field is a database identity field.">初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类的新实例，并指示该字段是否是数据行的主键，以及该字段是否是数据库标识字段。</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">为 <see langword="true" /> 指示该字段在数据行的主键中；否则为 <see langword="false" />。</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">为 <see langword="true" /> 指示该字段是唯一标识数据行的标识字段；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether the field is a database identity field, and whether the field can be null.">初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类的新实例，并指示该字段是否是数据行的主键，该字段是否是数据库标识字段，以及该字段是否可以为空。</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">为 <see langword="true" /> 指示该字段在数据行的主键中；否则为 <see langword="false" />。</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">为 <see langword="true" /> 指示该字段是唯一标识数据行的标识字段；否则为 <see langword="false" />。</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">为 <see langword="true" /> 指示该字段在数据存储区中可以为空；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether it is a database identity field, and whether it can be null and sets the length of the field.">初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类的新实例，指示该字段是否是数据行的主键，该字段是否是数据库标识字段以及该字段是否可以为空，并设置该字段的长度。</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">为 <see langword="true" /> 指示该字段在数据行的主键中；否则为 <see langword="false" />。</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">为 <see langword="true" /> 指示该字段是唯一标识数据行的标识字段；否则为 <see langword="false" />。</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">为 <see langword="true" /> 指示该字段在数据存储区中可以为空；否则为 <see langword="false" />。</param>
      <param name="length" vsli:raw="The length of the field in bytes.">字段的长度（以字节为单位）。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt;.">与 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 实例进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该实例与 <paramref name="obj" /> 参数所指定的实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary vsli:raw="Gets a value indicating whether a property represents an identity field in the underlying data.">获取一个值，该值指示某一属性是否表示基础数据中的标识字段。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents an identity field in the underlying data; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;false&quot; /&gt;.">如果该属性表示基础数据中的标识字段，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary vsli:raw="Gets a value indicating whether a property represents a field that can be null in the underlying data store.">获取一个值，该值指示某一属性表示的字段在基础数据存储区中是否可以为空。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents a field that can be null in the underlying data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该属性表示的字段在基础数据存储区中可以为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary vsli:raw="Gets the length of the property in bytes.">获取属性的长度（以字节为单位）。</summary>
      <returns vsli:raw="The length of the property in bytes, or -1 if not set.">该属性的长度（以字节为单位）；如果未设置，则为 -1。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary vsli:raw="Gets a value indicating whether a property is in the primary key in the underlying data.">获取一个值，该值指示某一属性是否在基础数据的主键中。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is in the primary key of the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该属性在数据存储区的主键中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary vsli:raw="Identifies a data operation method exposed by a type, what type of operation the method performs, and whether the method is the default data method. This class cannot be inherited.">标识由某一类型公开的数据操作方法，该方法所执行的操作类型以及该方法是否是默认的数据方法。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class and identifies the type of data operation the method performs.">初始化 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 类的新实例，并标识该方法所执行的数据操作类型。</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">
        <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值之一，这些值描述该方法所执行的数据操作。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class, identifies the type of data operation the method performs, and identifies whether the method is the default data method that the data object exposes.">初始化 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 类的新实例，标识该方法所执行的数据操作类型，并标识该方法是否是该数据对象公开的默认数据方法。</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">
        <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值之一，这些值描述该方法所执行的数据操作。</param>
      <param name="isDefault" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the method that the attribute is applied to is the default method of the data object for the specified &lt;paramref name=&quot;methodType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">为 <see langword="true" /> 指示该特性所应用于的方法是指定的 <paramref name="methodType" /> 的数据对象的默认方法；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">与 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 实例进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该实例与 <paramref name="obj" /> 参数所指定的实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary vsli:raw="Gets a value indicating whether the method that the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied to is the default data method exposed by the data object for a specific method type.">获取一个值，该值指示 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 所应用于的方法是否是由特定方法类型的数据对象所公开的默认数据方法。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is the default method exposed by the object for a method type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该方法是由方法类型的对象所公开的默认方法，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary vsli:raw="Gets a value indicating whether this instance shares a common pattern with a specified attribute.">获取一个值，该值指示此实例是否与指定特性共享一个通用模式。</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">与 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 实例进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该实例与 <paramref name="obj" /> 参数所指定的实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; value indicating the type of data operation the method performs.">获取一个 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值，该值指示该方法所执行的数据操作类型。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that identifies the type of data operation performed by the method to which the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied.">
        <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值之一，这些值标识 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 所应用于的方法所执行的数据操作类型。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary vsli:raw="Identifies the type of data operation performed by a method, as specified by the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; applied to the method.">根据应用于某方法的 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 的指定，标识该方法所执行的数据操作类型。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary vsli:raw="Indicates that a method is used for a data operation that deletes data.">指示某一方法是否用于删除数据的数据操作。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary vsli:raw="Indicates that a method is used for a data operation that fills a &lt;see cref=&quot;T:System.Data.DataSet&quot; /&gt; object.">指示某一方法是否用于填充 <see cref="T:System.Data.DataSet" /> 对象的数据操作。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary vsli:raw="Indicates that a method is used for a data operation that inserts data.">指示某一方法是否用于插入数据的数据操作。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary vsli:raw="Indicates that a method is used for a data operation that retrieves data.">指示某一方法是否用于检索数据的数据操作。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary vsli:raw="Indicates that a method is used for a data operation that updates data.">指示某一方法是否用于更新数据的数据操作。</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTime&quot; /&gt; objects to and from various other representations.">提供将 <see cref="T:System.DateTime" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.DateTimeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the specified context.">获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为 <see cref="T:System.DateTime" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此对象可以执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">将给定的值对象转换为 <see cref="T:System.DateTime" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the arguments.">使用这些参数将给定的值对象转换为 <see cref="T:System.DateTime" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">要将值转换成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; structures to and from various other representations.">提供将 <see cref="T:System.DateTimeOffset" /> 结构与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeOffsetConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.DateTimeOffsetConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether an object of the specified source type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">返回一个值，该值指示是否可将指定源类型的对象转换为 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="context" vsli:raw="The date format context.">日期格式上下文。</param>
      <param name="sourceType" vsli:raw="The source type to check.">要检查的源类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将指定的类型转换为 <see cref="T:System.DateTimeOffset" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to an object of the specified type.">返回一个值，该值指示是否可将 <see cref="T:System.DateTimeOffset" /> 转换为指定类型的对象。</summary>
      <param name="context" vsli:raw="The date format context.">日期格式上下文。</param>
      <param name="destinationType" vsli:raw="The destination type to check.">要检查的目标类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将 <see cref="T:System.DateTimeOffset" /> 转换为指定的类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">将指定对象转换为 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="context" vsli:raw="The date format context.">日期格式上下文。</param>
      <param name="culture" vsli:raw="The date culture.">日期区域性。</param>
      <param name="value" vsli:raw="The object to be converted.">要转换的对象。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; that represents the specified object.">表示指定对象的 <see cref="T:System.DateTimeOffset" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to an object of the specified type.">将 <see cref="T:System.DateTimeOffset" /> 转换为指定类型的对象。</summary>
      <param name="context" vsli:raw="The date format context.">日期格式上下文。</param>
      <param name="culture" vsli:raw="The date culture.">日期区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to be converted.">要转换的 <see cref="T:System.DateTimeOffset" />。</param>
      <param name="destinationType" vsli:raw="The type to convert to.">要转换为的类型。</param>
      <returns vsli:raw="An object of the specified type that represents the &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">一个表示 <see cref="T:System.DateTimeOffset" /> 的指定类型的对象。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Decimal&quot; /&gt; objects to and from various other representations.">提供将 <see cref="T:System.Decimal" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DecimalConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.DecimalConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; using the arguments.">使用这些参数将给定的值对象转换为 <see cref="T:System.Decimal" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">要将值转换成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary vsli:raw="Specifies the default binding property for a component. This class cannot be inherited.">指定组件的默认绑定属性。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using no parameters.">不使用任何参数初始化 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using the specified property name.">使用指定的属性名称初始化 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The name of the default binding property.">默认绑定属性的名称。</param>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class.">表示 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 类的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">确定指定的 <see cref="T:System.Object" /> 是否等同于当前的 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 实例。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">要与当前的 <see cref="T:System.Object" /> 实例进行比较的 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">如果该对象等同于当前的实例，则为 <see langword="true" />；否则为 <see langword="false" />，指示两者不等同。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">获取 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 所绑定组件的默认绑定属性的名称。</summary>
      <returns vsli:raw="The name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 所绑定组件的默认绑定属性的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary vsli:raw="Specifies the default event for a component.">指定组件的默认事件。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.DefaultEventAttribute" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The name of the default event for the component this attribute is bound to.">该特性所绑定到组件的默认事件的名称。</param>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定 <see cref="T:System.ComponentModel.DefaultEventAttribute" /> 的默认值，即 <see langword="null" />。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;.">返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DefaultEventAttribute" />。</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">要进行值的相等性测试的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果给定对象的值等于当前对象的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary vsli:raw="Gets the name of the default event for the component this attribute is bound to.">获取该特性所绑定到组件的默认事件的名称。</summary>
      <returns vsli:raw="The name of the default event for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">该特性所绑定到组件的默认事件的名称。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary vsli:raw="Specifies the default property for a component.">指定组件的默认属性。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The name of the default property for the component this attribute is bound to.">该特性所绑定到组件的默认属性的名称。</param>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> 的默认值，即 <see langword="null" />。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;.">返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />。</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">要进行值的相等性测试的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果给定对象的值等于当前对象的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default property for the component this attribute is bound to.">获取该特性所绑定到组件的默认属性的名称。</summary>
      <returns vsli:raw="The name of the default property for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">该特性所绑定到组件的默认属性的名称。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner&quot; /&gt; event.">为 <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> 类的新实例。</summary>
      <param name="oldDesigner" vsli:raw="The document that is losing activation.">正在失活的文档。</param>
      <param name="newDesigner" vsli:raw="The document that is gaining activation.">正在激活的文档。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary vsli:raw="Gets the document that is gaining activation.">获取正在激活的文档。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document gaining activation.">此 <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 表示正在激活的文档。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary vsli:raw="Gets the document that is losing activation.">获取正在失活的文档。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document losing activation.">此 <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 表示正在失活的文档。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged&quot; /&gt; event.">表示用来处理 <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件源。</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; that contains the event data.">包含事件数据的 <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary vsli:raw="The exception that is thrown when an attempt to check out a file that is checked into a source code management program is canceled or fails.">当签出已签入源代码管理程序中的文件的尝试已取消或失败时将引发的异常。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with no associated message or error code.">在不使用任何关联消息或错误代码的情况下初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class using the specified serialization data and context.">使用指定的序列化数据和上下文初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">要用于反序列化的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">用于反序列化的目标。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message.">使用指定的消息初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="A message describing the exception.">描述异常的消息。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified detailed description and the specified exception.">使用指定的详细说明和指定的异常初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="A detailed description of the error.">该错误的详细说明。</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">对导致此异常的内部异常的引用。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message and error code.">使用指定的消息和错误代码初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="A message describing the exception.">描述异常的消息。</param>
      <param name="errorCode" vsli:raw="The error code to pass.">要传递的错误代码。</param>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class that specifies that the check out was canceled. This field is read-only.">初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例，该类指定签出已取消。 此字段为只读。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary vsli:raw="Represents a unique command identifier that consists of a numeric command ID and a GUID menu group identifier.">表示唯一的命令标识符，此标识符由一个命令 ID 数字和一个 GUID 菜单组标识符组成。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; class using the specified menu group GUID and command ID number.">使用指定的菜单组 GUID 和命令 ID 号初始化 <see cref="T:System.ComponentModel.Design.CommandID" /> 类的新实例。</summary>
      <param name="menuGroup" vsli:raw="The GUID of the group that this menu command belongs to.">此菜单命令所属组的 GUID。</param>
      <param name="commandID" vsli:raw="The numeric identifier of this menu command.">此菜单命令的数字标识符。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; instances are equal.">确定两个 <see cref="T:System.ComponentModel.Design.CommandID" /> 实例是否相等。</summary>
      <param name="obj" vsli:raw="The object to compare.">要比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is equivalent to this one; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的对象与其相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary vsli:raw="Serves as a hash function for a particular type.">用作特定类型的哈希函数。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">当前 <see cref="T:System.Object" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary vsli:raw="Gets the GUID of the menu group that the menu command identified by this &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; belongs to.">获取由此 <see cref="T:System.ComponentModel.Design.CommandID" /> 标识的菜单命令所属菜单组的 GUID。</summary>
      <returns vsli:raw="The GUID of the command group for this command.">此命令所属命令组的 GUID。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary vsli:raw="Gets the numeric command ID.">获取命令数字 ID。</summary>
      <returns vsli:raw="The command ID number.">命令 ID 号。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current object.">返回表示当前对象的 <see cref="T:System.String" />。</summary>
      <returns vsli:raw="A string that contains the command ID information, both the GUID and integer identifier.">包含命令 ID 信息（包括 GUID 和整数标识符）的字符串。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event. This class cannot be inherited.">为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件提供数据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> 类的新实例。</summary>
      <param name="component" vsli:raw="The component that was changed.">已更改的组件。</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that represents the member that was changed.">表示已更改的成员的 <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
      <param name="oldValue" vsli:raw="The old value of the changed member.">已更改成员的旧值。</param>
      <param name="newValue" vsli:raw="The new value of the changed member.">已更改成员的新值。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary vsli:raw="Gets the component that was modified.">获取已修改的组件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the component that was modified.">表示已修改的组件的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary vsli:raw="Gets the member that has been changed.">获取已更改的成员。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that indicates the member that has been changed.">指示已更改的成员的 <see cref="T:System.ComponentModel.MemberDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary vsli:raw="Gets the new value of the changed member.">获取已更改成员的新值。</summary>
      <returns vsli:raw="The new value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">已更改成员的新值。 此属性可为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary vsli:raw="Gets the old value of the changed member.">获取已更改成员的旧值。</summary>
      <returns vsli:raw="The old value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">已更改成员的旧值。 此属性可为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">表示用来处理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; that contains the event data.">包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event. This class cannot be inherited.">为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件提供数据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 类的新实例。</summary>
      <param name="component" vsli:raw="The component that is about to be changed.">将要更改的组件。</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member of the component that is about to be changed.">指示将要更改的组件成员的 <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary vsli:raw="Gets the component that is about to be changed or the component that is the parent container of the member that is about to be changed.">获取将要更改的组件或作为将要更改的成员的父容器的组件。</summary>
      <returns vsli:raw="The component that is about to have a member changed.">将要更改成员的组件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary vsli:raw="Gets the member that is about to be changed.">获取将要更改的成员。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member that is about to be changed, if known, or &lt;see langword=&quot;null&quot; /&gt; otherwise.">指示将要更改的成员的 <see cref="T:System.ComponentModel.MemberDescriptor" />（如果已知），或者为 <see langword="null" />（如果未知）。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">表示用来处理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; event that contains the event data.">包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 事件。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt; events.">为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> 和 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> 类的新实例。</summary>
      <param name="component" vsli:raw="The component that is the source of the event.">作为事件源的组件。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary vsli:raw="Gets the component associated with the event.">获取与该事件关联的组件。</summary>
      <returns vsli:raw="The component associated with the event.">与该事件关联的组件。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt; events raised for component-level events.">表示将处理为组件级事件引发的下列事件的方法：<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> 和 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" />。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; that contains the event data.">包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> 类的新实例。</summary>
      <param name="component" vsli:raw="The component to be renamed.">要重命名的组件。</param>
      <param name="oldName" vsli:raw="The old name of the component.">组件的旧名称。</param>
      <param name="newName" vsli:raw="The new name of the component.">组件的新名称。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary vsli:raw="Gets the component that is being renamed.">获取所命名的组件。</summary>
      <returns vsli:raw="The component that is being renamed.">所命名的组件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary vsli:raw="Gets the name of the component after the rename event.">获取组件在重命名事件发生后的名称。</summary>
      <returns vsli:raw="The name of the component after the rename event.">组件在重命名事件发生后的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary vsli:raw="Gets the name of the component before the rename event.">获取组件在重命名事件发生前的名称。</summary>
      <returns vsli:raw="The previous name of the component.">组件先前的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">表示用来处理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; that contains the event data.">包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary vsli:raw="Represents a collection of designers.">表示设计器的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified set of designers.">初始化包含指定设计器集的 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 类的新实例。</summary>
      <param name="designers" vsli:raw="A list that contains the collection of designers to add.">包含要添加的设计器集合的列表。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified designers.">初始化包含指定设计器的 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 类的新实例。</summary>
      <param name="designers" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; objects to store.">要存储的 <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 对象数组。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary vsli:raw="Gets the number of designers in the collection.">获取集合中的设计器数。</summary>
      <returns vsli:raw="The number of designers in the collection.">集合中的设计器数。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">获取此集合的新枚举数。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">枚举集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the designer at the specified index.">获取指定索引处的设计器。</summary>
      <param name="index" vsli:raw="The index of the designer to return.">要返回的设计器的索引。</param>
      <returns vsli:raw="The designer at the specified index.">指定索引处的设计器。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">将该集合的元素复制到 <see cref="T:System.Array" />（从特定的 <see cref="T:System.Array" /> 索引开始）。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">一维 <see cref="T:System.Array" />，用作从集合复制的元素的目标数组。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">获取集合中包含的元素数。</summary>
      <returns vsli:raw="The number of elements contained in the collection.">集合中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">获取可用于同步对集合的访问的对象。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">可用于同步集合访问的对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">获取此集合的新枚举数。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">枚举集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events.">提供有关 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 事件的数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> 类的新实例。</summary>
      <param name="host" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">文档的 <see cref="T:System.ComponentModel.Design.IDesignerHost" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary vsli:raw="Gets the host of the document.">获取文档的宿主。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">文档的 <see cref="T:System.ComponentModel.Design.IDesignerHost" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events that are raised when a document is created or disposed of.">表示要处理 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 事件的方法，这两种事件在创建或释放文档时引发。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; that contains the event data.">包含事件数据的 <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary vsli:raw="Provides a base class for getting and setting option values for a designer.">提供用于获取和设置设计器选项值的基类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.DesignerOptionService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name and adds it to the given parent.">使用给定名称创建新的 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 并将其添加到给定父级。</summary>
      <param name="parent" vsli:raw="The parent designer option collection. All collections have a parent except the root object collection.">父设计器选项集合。 除根对象集合外，所有集合都有父项。</param>
      <param name="name" vsli:raw="The name of this collection.">此集合的名称。</param>
      <param name="value" vsli:raw="The object providing properties for this collection. Can be &lt;see langword=&quot;null&quot; /&gt; if the collection should not provide any properties.">提供此集合的属性的对象。 如果集合不应提供任何属性，则可以是 <see langword="null" />。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name.">具有给定名称的新 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;parent&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="parent" /> 或 <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is an empty string.">
        <paramref name="name" /> 是一个空字符串。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary vsli:raw="Contains a collection of designer options. This class cannot be inherited.">包含设计器选项的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to a compatible one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified index of the target array.">从目标数组的指定索引处开始，将整个集合复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the collection. The &lt;paramref name=&quot;array&quot; /&gt; must have zero-based indexing.">一维 <see cref="T:System.Array" />，用作从集合复制的元素的目标数组。 <paramref name="array" /> 必须具有从零开始的索引。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary vsli:raw="Gets the number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">获取此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 包含的子选项集合的数量。</summary>
      <returns vsli:raw="The number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 包含的子选项集合的数量。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">返回可用于循环访问此集合的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">可用于循环访问此集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Returns the index of the first occurrence of a given value in a range of this collection.">返回在此集合范围内给定值的第一个匹配项的索引。</summary>
      <param name="value" vsli:raw="The object to locate in the collection.">要在集合中定位的对象。</param>
      <returns vsli:raw="The index of the first occurrence of value within the entire collection, if found; otherwise, the lower bound of the collection minus 1.">如果在整个集合中找到匹配项，则为第一个匹配项的索引；否则为该集合的下限减 1。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the child collection at the given index.">在给定索引处获取子集合。</summary>
      <param name="index" vsli:raw="The zero-based index of the child collection to get.">要获取的子集合的索引（索引从零开始）。</param>
      <returns vsli:raw="The child collection at the specified index.">指定索引处的子集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary vsli:raw="Gets the child collection at the given name.">在给定名称处获取子集合。</summary>
      <param name="name" vsli:raw="The name of the child collection.">子集合的名称。</param>
      <returns vsli:raw="The child collection with the name specified by the &lt;paramref name=&quot;name&quot; /&gt; parameter, or &lt;see langword=&quot;null&quot; /&gt; if the name is not found.">带有由 <paramref name="name" /> 参数指定的名称的子集合，如果未找到该名称，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary vsli:raw="Gets the name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">获取此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 的名称。</summary>
      <returns vsli:raw="The name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary vsli:raw="Gets the parent collection object.">获取父集合对象。</summary>
      <returns vsli:raw="The parent collection object, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">父集合对象，如果不存在父级，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary vsli:raw="Gets the collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">获取由此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 提供的属性集合，以及它的所有子级。</summary>
      <returns vsli:raw="The collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">由此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 提供的属性集合，以及它的所有子级。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary vsli:raw="Displays a dialog box user interface (UI) with which the user can configure the options in this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">显示对话框用户界面 (UI)，用户可以通过它配置此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 中的选项。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box can be displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以显示对话框，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized and, therefore, thread safe.">获取一个值，该值指示对集合的访问是否经过同步因而是线程安全的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果对集合的访问是同步的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">获取可用于同步对集合的访问的对象。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">可用于同步集合访问的对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">要添加到 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns vsli:raw="The position into which the new element was inserted.">新元素的插入位置。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">从集合中移除所有项。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">确定集合中是否包含特定值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">要在集合中定位的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在集合中找到 <see cref="T:System.Object" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">确定集合中特定项的索引。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">要在集合中查找的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at the specified index.">将一项插入集合中指定索引处。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">要插入到集合中的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该集合具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">获取一个值，该值指示集合是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">获取或设置指定索引处的元素。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">要获取或设置的元素的从零开始的索引。</param>
      <returns vsli:raw="The element at the specified index.">指定索引处的元素。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">从集合中移除特定对象的第一个匹配项。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">要从该集合中移除的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the collection item at the specified index.">移除指定索引处的集合项。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除的项的从零开始的索引。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary vsli:raw="Gets the options collection for this service.">获取此服务的选项集合。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; populated with available designer options.">用可用的设计器选项进行填充的 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Populates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">填充 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</summary>
      <param name="options" vsli:raw="The collection to populate.">要填充的集合。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary vsli:raw="Shows the options dialog box for the given object.">显示给定对象的选项对话框。</summary>
      <param name="options" vsli:raw="The options collection containing the object to be invoked.">包含要调用的对象的选项集合。</param>
      <param name="optionObject" vsli:raw="The actual options object.">实际选项对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box is shown; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果显示对话框，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of an option defined in this package.">获取在此包中定义的选项的值。</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">将选项绑定到的页面。</param>
      <param name="valueName" vsli:raw="The name of the option value.">选项值的名称。</param>
      <returns vsli:raw="The value of the option named &lt;paramref name=&quot;valueName&quot; /&gt;.">名为 <paramref name="valueName" /> 的选项的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="pageName" /> 或 <paramref name="valueName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of an option defined in this package.">设置在此包中定义的选项的值。</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">将选项绑定到的页面。</param>
      <param name="valueName" vsli:raw="The name of the option value.">选项值的名称。</param>
      <param name="value" vsli:raw="The value of the option.">选项的值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="pageName" /> 或 <paramref name="valueName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary vsli:raw="Provides a way to group a series of design-time actions to improve performance and enable most types of changes to be undone.">提供一种方法来对一系列的设计时操作进行分组，从而提高性能并能撤销大多数类型的更改。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class with no description.">在不使用说明的情况下初始化 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class using the specified transaction description.">使用指定的事务说明初始化 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 类的新实例。</summary>
      <param name="description" vsli:raw="A description for this transaction.">此事务的说明。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary vsli:raw="Cancels the transaction and attempts to roll back the changes made by the events of the transaction.">取消事务并尝试回滚由事务的事件作出的更改。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary vsli:raw="Gets a value indicating whether the transaction was canceled.">获取一个值，该值指示是否已取消事务。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was canceled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果事务已取消，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary vsli:raw="Commits this transaction.">提交此事务。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary vsli:raw="Gets a value indicating whether the transaction was committed.">获取一个值，该值指示是否已提交事务。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was committed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果事务已提交，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary vsli:raw="Gets a description for the transaction.">获取事务的说明。</summary>
      <returns vsli:raw="A description for the transaction.">事务的说明。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; and optionally releases the managed resources.">释放由 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary vsli:raw="Releases the resources associated with this object. This override commits this transaction if it was not already committed.">释放与此对象关联的资源。 如果此事务尚未提交，则此重写方法将提交此事务。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Cancel&quot; /&gt; event.">引发 <see langword="Cancel" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary vsli:raw="Performs the actual work of committing a transaction.">执行提交事务的实际工作。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;.">释放由 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 使用的所有资源。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events.">提供有关 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件的数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class, using the specified value that indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">使用指示设计器是否已对事务调用 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> 的指定值来初始化 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> 类的新实例。</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">指示事务是否已提交的值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> 类的新实例。</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">指示事务是否已提交的值。</param>
      <param name="lastTransaction" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果这是最后要关闭的事务，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary vsli:raw="Gets a value indicating whether this is the last transaction to close.">获取一个值，该值指示这是不是最后要关闭的事务。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果这是最后要关闭的事务，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary vsli:raw="Indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">指示设计器是否已对事务调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果设计器已对事务调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events of a designer.">表示处理设计器的 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; that contains the event data.">包含事件数据的 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary vsli:raw="Represents a verb that can be invoked from a designer.">表示可从设计器中调用的谓词。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 类的新实例。</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">显示给用户的菜单命令的文本。</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">执行谓词的操作的事件处理程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 类的新实例。</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">显示给用户的菜单命令的文本。</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">执行谓词的操作的事件处理程序。</param>
      <param name="startCommandID" vsli:raw="The starting command ID for this verb. By default, the designer architecture sets aside a range of command IDs for verbs. You can override this by providing a custom command ID.">此谓词的起始命令 ID。 默认情况下，设计器结构将为谓词保留一系列命令 ID。 您可以通过提供自定义的命令 ID 来将其重写。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary vsli:raw="Gets or sets the description of the menu item for the verb.">获取或设置谓词菜单项的说明。</summary>
      <returns vsli:raw="A string describing the menu item.">描述菜单项的字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary vsli:raw="Gets the text description for the verb command on the menu.">获取菜单上的谓词命令的文本说明。</summary>
      <returns vsli:raw="A description for the verb command.">谓词命令的说明。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary vsli:raw="Overrides &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt;.">重写 <see cref="M:System.Object.ToString" />。</summary>
      <returns vsli:raw="The verb's text, or an empty string (&quot;&quot;) if the text field is empty.">谓词的文本，如果文本字段为空，则为空字符串 ("")。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">表示 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 对象集合。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class using the specified array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">使用指定的 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 对象的数组，初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 类的新实例。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array that indicates the verbs to contain within the collection.">指示要在集合中包含的谓词的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 数组。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to the collection.">将指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 添加到集合。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add to the collection.">要添加到集合中的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns vsli:raw="The index in the collection at which the verb was added.">集合中添加谓词处的索引。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Adds the specified set of designer verbs to the collection.">向集合中添加指定的设计器谓词组。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects to add to the collection.">要添加到集合中的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary vsli:raw="Adds the specified collection of designer verbs to the collection.">将指定的设计器谓词集合添加到集合中。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; to add to the collection.">要添加到集合中的 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets a value indicating whether the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; exists in the collection.">获取一个值，用以指示集合中是否存在指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to search for in the collection.">要在集合中搜索的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object exists in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合中存在指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary vsli:raw="Copies the collection members to the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array beginning at the specified destination index.">从指定的目标索引开始，将集合成员复制到指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 数组中。</summary>
      <param name="array" vsli:raw="The array to copy collection members to.">要将集合成员复制到的数组。</param>
      <param name="index" vsli:raw="The destination index to begin copying to.">开始复制的目标索引。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">获取指定 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 的索引。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; whose index to get in the collection.">要在集合中获取索引的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns vsli:raw="The index of the specified object if it is found in the list; otherwise, -1.">指定对象的索引（如果在列表中找到）；否则为 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">在指定索引处插入指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <param name="index" vsli:raw="The index in the collection at which to insert the verb.">集合中要插入谓词的索引。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to insert in the collection.">要在集合中插入的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">获取或设置指定索引处的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <param name="index" vsli:raw="The index at which to get or set the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">获取或设置 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 处的索引。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at each valid index in the collection.">集合中每个有效索引处的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>引发 <see langword="Clear" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>引发 <see langword="Insert" /> 事件。</summary>
      <param name="index">插入项处的索引。</param>
      <param name="value">要插入的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>引发 <see langword="Remove" /> 事件。</summary>
      <param name="index">移除项处的索引。</param>
      <param name="value">要移除的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>引发 <see langword="Set" /> 事件。</summary>
      <param name="index">设置项处的索引。</param>
      <param name="oldValue">旧对象。</param>
      <param name="newValue">新对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Validate&quot; /&gt; event.">引发 <see langword="Validate" /> 事件。</summary>
      <param name="value" vsli:raw="The object to validate.">要验证的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; from the collection.">从集合中移除指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove from the collection.">要从该集合中移除的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary vsli:raw="Represents a design-time license context that can support a license provider at design time.">表示可在设计时支持许可证提供程序的设计时许可证上下文。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="Gets a saved license key.">获取已保存的许可证密钥。</summary>
      <param name="type" vsli:raw="The type of the license key.">许可证密钥的类型。</param>
      <param name="resourceAssembly" vsli:raw="The assembly to get the key from.">要从其中获取密钥的程序集。</param>
      <returns vsli:raw="The saved license key that matches the specified type.">匹配指定类型且已保存的许可证密钥。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="Sets a saved license key.">获取已保存的许可证密钥。</summary>
      <param name="type" vsli:raw="The type of the license key.">许可证密钥的类型。</param>
      <param name="key" vsli:raw="The license key.">许可证密钥。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary vsli:raw="Gets the license usage mode.">获取许可证用法模式。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; indicating the licensing mode for the context.">指示上下文的许可模式的 <see cref="T:System.ComponentModel.LicenseUsageMode" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary vsli:raw="Provides support for design-time license context serialization.">为设计时许可证上下文序列化提供支持。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary vsli:raw="Serializes the licenses within the specified design-time license context using the specified key and output stream.">使用指定的密钥和输出流将指定设计时许可证上下文中的许可证序列化。</summary>
      <param name="o" vsli:raw="The stream to output to.">要输出到的流。</param>
      <param name="cryptoKey" vsli:raw="The key to use for encryption.">要用于加密的密钥。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; indicating the license context.">指示许可证上下文的 <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary vsli:raw="Defines identifiers that indicate information about the context in which a request for Help information originated.">定义标识符，用以指示有关帮助信息请求所源自的上下文的信息。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary vsli:raw="A general context.">常规上下文。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary vsli:raw="A selection.">选项。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary vsli:raw="A tool window selection.">工具窗口选项。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary vsli:raw="A window.">窗口。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary vsli:raw="Specifies the context keyword for a class or member. This class cannot be inherited.">指定类或成员的上下文关键字。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 类的新实例。</summary>
      <param name="keyword" vsli:raw="The Help keyword value.">“帮助”关键字值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;keyword&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyword" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class from the given type.">初始化给定类型的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 类的新实例。</summary>
      <param name="t" vsli:raw="The type from which the Help keyword will be taken.">将采用“帮助”关键字的类型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;. This field is read-only.">表示 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 的默认值。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; instances are equal.">确定两个 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 实例是否相等。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">要与当前的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 进行比较的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />，则为 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">当前 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary vsli:raw="Gets the Help keyword supplied by this attribute.">获取由此特性提供的“帮助”关键字。</summary>
      <returns vsli:raw="The Help keyword supplied by this attribute.">此特性提供的“帮助”关键字。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines whether the Help keyword is &lt;see langword=&quot;null&quot; /&gt;.">确定“帮助”关键字是否为 <see langword="null" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the Help keyword is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果“帮助”关键字为 <see langword="true" />，则为 <see langword="null" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary vsli:raw="Defines identifiers that indicate the type of a Help keyword.">定义用于指示帮助关键字类型的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary vsli:raw="A keyword that F1 was pressed to request help about.">按 F1 请求其帮助的关键字。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary vsli:raw="A filter keyword.">筛选关键字。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary vsli:raw="A general keyword.">常规关键字。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary vsli:raw="Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; or &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">提供一个接口来为添加、更改、移除或重命名组件的事件添加和移除事件处理程序，并提供方法来引发 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 或 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary vsli:raw="Occurs when a component has been added.">在组件已添加时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary vsli:raw="Occurs when a component is in the process of being added.">在添加组件的过程中发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary vsli:raw="Occurs when a component has been changed.">在组件已更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary vsli:raw="Occurs when a component is in the process of being changed.">在更改组件的过程中发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary vsli:raw="Occurs when a component has been removed.">在组件已移除时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary vsli:raw="Occurs when a component is in the process of being removed.">在移除组件的过程中发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary vsli:raw="Occurs when a component is renamed.">在组件已重命名时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Announces to the component change service that a particular component has changed.">向组件更改服务通知特定组件已更改。</summary>
      <param name="component" vsli:raw="The component that has changed.">已更改的组件。</param>
      <param name="member" vsli:raw="The member that has changed. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">已更改的成员。 如果此更改与单个成员无关，则它将为 <see langword="null" />。</param>
      <param name="oldValue" vsli:raw="The old value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">该成员的旧值。 仅当成员不为 <see langword="null" /> 时它才有效。</param>
      <param name="newValue" vsli:raw="The new value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">该成员的新值。 仅当成员不为 <see langword="null" /> 时它才有效。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Announces to the component change service that a particular component is changing.">向组件更改服务通知特定组件正在发生更改。</summary>
      <param name="component" vsli:raw="The component that is about to change.">将要更改的组件。</param>
      <param name="member" vsli:raw="The member that is changing. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">正在更改的成员。 如果此更改与单个成员无关，则它将为 <see langword="null" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary vsli:raw="Enables enumeration of components at design time.">启用组件的设计时枚举。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary vsli:raw="Gets the list of available component types.">获取可用组件类型的列表。</summary>
      <param name="designerHost" vsli:raw="The designer host providing design-time services. Can be &lt;see langword=&quot;null&quot; /&gt;.">提供设计时服务的设计器宿主。 可以为 <see langword="null" />。</param>
      <param name="baseType" vsli:raw="The base type specifying the components to retrieve. Can be &lt;see langword=&quot;null&quot; /&gt;.">指定要检索的组件的基类型。 可以为 <see langword="null" />。</param>
      <returns vsli:raw="The list of available component types.">可用组件类型的列表。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary vsli:raw="Provides a set of recommended default values during component creation.">在组件创建期间提供一组推荐的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Restores an instance of a component to its default state.">将组件的实例还原为其默认状态。</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to reset the component's state.">默认属性值（即名称/值对）的字典，用于重置组件的状态。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Initializes a new component using a set of recommended values.">使用一组推荐值初始化新组件。</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to initialize the component's state.">默认属性值（即名称/值对）的字典，用于初始化组件的状态。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary vsli:raw="Provides the basic framework for building a custom designer.">提供用于生成自定义设计器的基本框架。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary vsli:raw="Gets the base component that this designer is designing.">获取此设计器正在设计的基组件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; indicating the base component that this designer is designing.">表示此设计器所设计的基组件的 <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary vsli:raw="Performs the default action for this designer.">执行此设计器的默认行为。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes the designer with the specified component.">用指定的组件初始化设计器。</summary>
      <param name="component" vsli:raw="The component to associate with this designer.">与此设计器相关联的组件。</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary vsli:raw="Gets a collection of the design-time verbs supported by the designer.">获取设计器支持的设计时谓词的集合。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the verbs supported by the designer, or &lt;see langword=&quot;null&quot; /&gt; if the component has no verbs.">包含设计器支持的谓词的 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />；如果组件没有谓词，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary vsli:raw="Provides event notifications when root designers are added and removed, when a selected component changes, and when the current root designer changes.">出现以下情况时提供事件通知：添加和移除根设计器、选定的组件已更改、当前的根设计器已更改。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary vsli:raw="Gets the root designer for the currently active document.">获取当前处于活动状态的文档的根设计器。</summary>
      <returns vsli:raw="The currently active document, or &lt;see langword=&quot;null&quot; /&gt; if there is no active document.">当前处于活动状态的文档，在没有活动文档的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary vsli:raw="Occurs when the current root designer changes.">在更改当前根设计器时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary vsli:raw="Occurs when a root designer is created.">在创建根设计器时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary vsli:raw="Occurs when a root designer for a document is disposed.">在释放文档的根设计器时发生。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary vsli:raw="Gets a collection of root designers for design documents that are currently active in the development environment.">获取开发环境中当前处于活动状态的设计文档的根设计器的集合。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; containing the root designers that have been created and not yet disposed.">包含已创建且尚未释放的根设计器的 <see cref="T:System.ComponentModel.Design.DesignerCollection" />。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary vsli:raw="Occurs when the current design-view selection changes.">在当前的设计器视图选择出现更改时发生。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary vsli:raw="Provides an interface that enables a designer to access and filter the dictionaries of a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that stores the property, attribute, and event descriptors that a component designer can expose to the design-time environment.">提供使设计器能够访问和筛选 <see cref="T:System.ComponentModel.TypeDescriptor" /> 字典的接口，它存储组件设计器可以向设计时环境公开的属性、特性和事件说明符。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">当在派生类中被重写后，允许设计器更改或移除它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的特性集中的项。</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">组件的类的 <see cref="T:System.Attribute" /> 对象。 特性字典中的关键字是特性的 <see cref="P:System.Attribute.TypeId" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">当在派生类中重写后，允许设计器更改或移除它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的事件集中的项。</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 对象，它表示组件的类的事件。 事件字典中的关键字是事件名。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">当在派生类中重写后，允许设计器更改或移除它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性集中的项。</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象，它表示组件的类的属性。 属性字典中的关键字是属性名。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">当在派生类中被重写时，允许设计器将项添加到它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的特性集中。</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">组件的类的 <see cref="T:System.Attribute" /> 对象。 特性字典中的关键字是特性的 <see cref="P:System.Attribute.TypeId" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">当在派生类中被重写时，允许设计器将项添加到它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的事件集中。</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 对象，它表示组件的类的事件。 事件字典中的关键字是事件名。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">当在派生类中被重写时，允许设计器将项添加到它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性集中。</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象，它表示组件的类的属性。 属性字典中的关键字是属性名。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary vsli:raw="Provides an interface for managing designer transactions and components.">提供用于管理设计器事务和组件的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary vsli:raw="Activates the designer that this host is hosting.">激活此宿主所承载的设计器。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary vsli:raw="Occurs when this designer is activated.">在激活此设计器时发生。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary vsli:raw="Gets the container for this designer host.">获取此设计器宿主的容器。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; for this host.">此宿主的 <see cref="T:System.ComponentModel.IContainer" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary vsli:raw="Creates a component of the specified type and adds it to the design document.">创建指定类型的组件，并将其添加到设计文档中。</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">要创建的组件的类型。</param>
      <returns vsli:raw="The newly created component.">新创建的组件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary vsli:raw="Creates a component of the specified type and name, and adds it to the design document.">创建指定类型和名称的组件，并将其添加到设计文档中。</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">要创建的组件的类型。</param>
      <param name="name" vsli:raw="The name for the component.">组件的名称。</param>
      <returns vsli:raw="The newly created component.">新创建的组件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality.">创建 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />，它可封装事件序列以提高性能并启用撤消和重复支持功能。</summary>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you complete the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 的新实例。 在完成事务中的步骤后，应对此对象调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality, using the specified transaction description.">使用指定的事务说明创建 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />，它可封装事件序列以提高性能并启用撤消和重复支持功能。</summary>
      <param name="description" vsli:raw="A title or description for the newly created transaction.">新创建的事务的标题或说明。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you have completed the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">一个新的 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />。 在完成事务中的步骤后，应对此对象调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary vsli:raw="Occurs when this designer is deactivated.">在停用此设计器时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary vsli:raw="Destroys the specified component and removes it from the designer container.">销毁指定组件并将其从设计器容器中移除。</summary>
      <param name="component" vsli:raw="The component to destroy.">要销毁的组件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the designer instance that contains the specified component.">获取包含指定组件的设计器实例。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to retrieve the designer for.">要为其检索设计器的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if there is no designer for the specified component.">
        <see cref="T:System.ComponentModel.Design.IDesigner" />；或者在指定组件没有设计器的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary vsli:raw="Gets an instance of the specified, fully qualified type name.">获取指定的完全限定类型名称的实例。</summary>
      <param name="typeName" vsli:raw="The name of the type to load.">要加载的类型的名称。</param>
      <returns vsli:raw="The type object for the specified type name, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be found.">指定类型名称的类型对象，或者在无法找到该类型的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently in a transaction.">获取一个值，该值指示设计器宿主当前是否在事务中。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a transaction is in progress; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果事务正在进行，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary vsli:raw="Occurs when this designer completes loading its document.">在此设计器加载完文档时发生。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently loading the document.">获取一个值，该值指示设计器宿主当前是否正在加载文档。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer host is currently loading the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果设计器宿主当前正在加载文档，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary vsli:raw="Gets the instance of the base class used as the root component for the current design.">获取用作当前设计的根组件的基类的实例。</summary>
      <returns vsli:raw="The instance of the root component class.">根组件类的实例。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary vsli:raw="Gets the fully qualified name of the class being designed.">获取所设计的类的完全限定名。</summary>
      <returns vsli:raw="The fully qualified name of the base component class.">基组件类的完全限定名。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; event.">添加 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 事件的事件处理程序。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; event.">添加 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件的事件处理程序。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary vsli:raw="Gets the description of the current transaction.">获取当前事务的说明。</summary>
      <returns vsli:raw="A description of the current transaction.">当前事务的说明。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpened&quot; /&gt; event.">添加 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" /> 事件的事件处理程序。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpening&quot; /&gt; event.">添加 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" /> 事件的事件处理程序。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary vsli:raw="Specifies methods for the designer host to report on the state of transactions.">指定设计器宿主用于报告事务状态的方法。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is closing a transaction.">获取一个值，该值指示设计器宿主是否正在关闭事务。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is closing a transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果设计器正在关闭事务，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary vsli:raw="Provides access to the designer options located on the Tools menu under the Options command in the Visual Studio development environment.">提供对设计器选项的访问；在 Visual Studio 开发环境中，设计器选项位于“选项”命令下的“工具”菜单上。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of the specified Windows Forms Designer option.">获取指定的 Windows 窗体设计器选项的值。</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">定义该选项的页的名称。</param>
      <param name="valueName" vsli:raw="The name of the option property.">该选项属性的名称。</param>
      <returns vsli:raw="The value of the specified option.">指定选项的值。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of the specified Windows Forms Designer option.">设置指定的 Windows 窗体设计器选项的值。</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">定义该选项的页的名称。</param>
      <param name="valueName" vsli:raw="The name of the option property.">该选项属性的名称。</param>
      <param name="value" vsli:raw="The new value.">新值。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary vsli:raw="Provides a basic, component site-specific, key-value pair dictionary through a service that a designer can use to store user-defined data.">在设计器可用来存储用户定义数据的服务中提供基本的、组件站点特定的键值对字典。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary vsli:raw="Gets the key corresponding to the specified value.">获取对应于指定值的键。</summary>
      <param name="value" vsli:raw="The value to look up in the dictionary.">要在字典中查找的值。</param>
      <returns vsli:raw="The associated key, or &lt;see langword=&quot;null&quot; /&gt; if no key exists.">关联键，或者在不存在关联键的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary vsli:raw="Gets the value corresponding to the specified key.">获取对应于指定键的值。</summary>
      <param name="key" vsli:raw="The key to look up the value for.">要为其查找值的键。</param>
      <returns vsli:raw="The associated value, or &lt;see langword=&quot;null&quot; /&gt; if no value exists.">关联值，或者在不存在关联值的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary vsli:raw="Sets the specified key-value pair.">设置指定的键值对。</summary>
      <param name="key" vsli:raw="An object to use as the key to associate the value with.">用作与值相关联的键的对象。</param>
      <param name="value" vsli:raw="The value to store.">要存储的值。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary vsli:raw="Provides a service for registering event handlers for component events.">为注册组件事件的事件处理程序提供服务。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Creates a unique name for an event-handler method for the specified component and event.">为指定组件和事件的事件处理程序方法创建唯一的名称。</summary>
      <param name="component" vsli:raw="The component instance the event is connected to.">事件连接到的组件实例。</param>
      <param name="e" vsli:raw="The event to create a name for.">要为其创建名称的事件。</param>
      <returns vsli:raw="The recommended name for the event-handler method for this event.">为此事件的事件处理程序方法建议的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Gets a collection of event-handler methods that have a method signature compatible with the specified event.">获取其方法签名与指定事件兼容的事件处理程序方法的集合。</summary>
      <param name="e" vsli:raw="The event to get the compatible event-handler methods for.">要为其获取兼容事件处理程序方法的事件。</param>
      <returns vsli:raw="A collection of strings.">字符串的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the specified property descriptor represents, if it represents an event.">为指定属性说明符（如果它表示事件）所表示的事件获取 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="property" vsli:raw="The property that represents an event.">表示事件的属性。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the property represents, or &lt;see langword=&quot;null&quot; /&gt; if the property does not represent an event.">属性所表示的事件的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者在属性不表示事件的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary vsli:raw="Converts a set of event descriptors to a set of property descriptors.">将一组事件说明符转换为一组属性说明符。</summary>
      <param name="events" vsli:raw="The events to convert to properties.">要转换为属性的事件。</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that describe the event set.">对事件集进行描述的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象数组。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Converts a single event descriptor to a property descriptor.">将单个事件说明符转换为属性说明符。</summary>
      <param name="e" vsli:raw="The event to convert.">要转换的事件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the event.">对事件进行描述的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary vsli:raw="Displays the user code for the designer.">显示设计器的用户代码。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果显示该代码，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Displays the user code for the specified event.">显示指定事件的用户代码。</summary>
      <param name="component" vsli:raw="The component that the event is connected to.">事件要连接到组件。</param>
      <param name="e" vsli:raw="The event to display.">要显示的事件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果显示该代码，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary vsli:raw="Displays the user code for the designer at the specified line.">在指定行显示设计器的用户代码。</summary>
      <param name="lineNumber" vsli:raw="The line number to place the caret on.">要放置插入符号的行号。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果显示该代码，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary vsli:raw="Provides an interface that can list extender providers.">提供可列出扩展程序提供程序的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary vsli:raw="Gets the set of extender providers for the component.">获取组件的扩展程序提供程序集。</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that lists the active extender providers. If there are no providers, an empty array is returned.">列出处于活动状态的扩展程序提供程序的 <see cref="T:System.ComponentModel.IExtenderProvider" /> 类型的数组。 如果没有提供程序，则返回空数组。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary vsli:raw="Provides an interface for adding and removing extender providers at design time.">提供一个接口，用于在设计时添加和移除扩展程序提供程序。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Adds the specified extender provider.">添加指定的扩展程序提供程序。</summary>
      <param name="provider" vsli:raw="The extender provider to add.">要添加的扩展程序提供程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Removes the specified extender provider.">移除指定的扩展程序提供程序。</summary>
      <param name="provider" vsli:raw="The extender provider to remove.">要移除的扩展程序提供程序。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary vsli:raw="Provides methods for showing Help topics and adding and removing Help keywords at design time.">提供在设计时显示“帮助”主题和添加及移除“帮助”关键字的方法。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary vsli:raw="Adds a context attribute to the document.">向该文档添加上下文特性。</summary>
      <param name="name" vsli:raw="The name of the attribute to add.">要添加的特性的名称。</param>
      <param name="value" vsli:raw="The value of the attribute.">属性的值。</param>
      <param name="keywordType" vsli:raw="The type of the keyword, from the enumeration &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordType&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.HelpKeywordType" /> 枚举中的关键字类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary vsli:raw="Removes all existing context attributes from the document.">从文档中移除所有现有的上下文特性。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary vsli:raw="Creates a local &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to manage subcontexts.">创建用于管理子上下文的局部 <see cref="T:System.ComponentModel.Design.IHelpService" />。</summary>
      <param name="contextType" vsli:raw="The priority type of the subcontext to add.">要添加的子上下文的优先级类型。</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt;.">新创建的 <see cref="T:System.ComponentModel.Design.IHelpService" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary vsli:raw="Removes a previously added context attribute.">移除先前添加的上下文特性。</summary>
      <param name="name" vsli:raw="The name of the attribute to remove.">要移除的属性的名称。</param>
      <param name="value" vsli:raw="The value of the attribute to remove.">要移除的特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary vsli:raw="Removes a context created with &lt;see cref=&quot;M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)&quot; /&gt;.">移除用 <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" /> 创建的上下文。</summary>
      <param name="localContext" vsli:raw="The local context &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to remove.">要移除的局部上下文 <see cref="T:System.ComponentModel.Design.IHelpService" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified keyword.">显示对应于指定关键字的帮助主题。</summary>
      <param name="helpKeyword" vsli:raw="The keyword of the Help topic to display.">要显示的帮助主题的关键字。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified URL.">显示对应于指定 URL 的帮助主题。</summary>
      <param name="helpUrl" vsli:raw="The URL of the Help topic to display.">要显示帮助主题的 URL。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary vsli:raw="Provides methods for identifying the components of a component.">提供了一组用于标识组件中所含组件的方法。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary vsli:raw="Searches the specified component for fields that implement the &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; interface and adds each to the specified container, storing the inheritance level of each which can be retrieved using the &lt;see cref=&quot;M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)&quot; /&gt; method.">在指定的组件中搜索实现 <see cref="T:System.ComponentModel.IComponent" /> 接口的字段，并将它们逐一添加到指定的容器，同时存储它们的继承级别，继承级别可以使用 <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" /> 方法检索。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to search. Searching begins with this component.">要搜索的 <see cref="T:System.ComponentModel.IComponent" />。 从这个组件开始搜索。</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to add components to.">要向其添加组件的 <see cref="T:System.ComponentModel.IContainer" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the inheritance attribute for the specified component.">获取指定组件的继承特性。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for which to retrieve the inheritance attribute.">要为其检索继承特性的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; that describes the level of inheritance of the specified component.">一个 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的实例，用于描述指定组件的继承级别。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary vsli:raw="Provides methods to manage the global designer verbs and menu commands available in design mode, and to show some types of shortcut menus.">提供的方法用于管理设计模式下可用的全局设计器谓词和菜单命令，以及显示某些类型的快捷菜单。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Adds the specified standard menu command to the menu.">将指定的标准菜单命令添加到菜单中。</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to add.">要添加的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; is already present on a menu.">菜单上已存在指定 <see cref="T:System.ComponentModel.Design.CommandID" /> 的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified designer verb to the set of global designer verbs.">将指定的设计器谓词添加到全局设计器谓词集中。</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add.">要添加的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Searches for the specified command ID and returns the menu command associated with it.">搜索指定的命令 ID 并返回与之关联的菜单命令。</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; to search for.">要搜索的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; associated with the command ID, or &lt;see langword=&quot;null&quot; /&gt; if no command is found.">与该命令 ID 相关联的 <see cref="T:System.ComponentModel.Design.MenuCommand" />，或者在未找到命令的情况下返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Invokes a menu or designer verb command matching the specified command ID.">调用与指定的命令 ID 匹配的菜单或设计器谓词命令。</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the command to search for and execute.">要搜索和执行的命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the command was found and invoked successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功地找到并调用命令，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Removes the specified standard menu command from the menu.">从菜单移除指定的标准菜单命令。</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to remove.">要移除的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified designer verb from the collection of global designer verbs.">从全局设计器谓词的集合中移除指定的设计器谓词。</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove.">要移除的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary vsli:raw="Shows the specified shortcut menu at the specified location.">在指定位置显示指定的快捷菜单。</summary>
      <param name="menuID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the shortcut menu to show.">要显示的快捷菜单的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <param name="x" vsli:raw="The x-coordinate at which to display the menu, in screen coordinates.">屏幕上的 x 坐标，菜单此处显示。</param>
      <param name="y" vsli:raw="The y-coordinate at which to display the menu, in screen coordinates.">屏幕上的 y 坐标，菜单此处显示。</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary vsli:raw="Gets a collection of the designer verbs that are currently available.">获取当前可用的设计器谓词的集合。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the designer verbs that are currently available.">包含当前可用的设计器谓词的 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary vsli:raw="Provides an interface for obtaining references to objects within a project by name or type, obtaining the name of a specified object, and for locating the parent of a specified object within a designer project.">提供的接口用于：按名称或类型获取对项目内对象的引用、获取指定对象的名称、在设计器项目内定位指定对象的父对象。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary vsli:raw="Gets the component that contains the specified component.">获取包含指定组件的组件。</summary>
      <param name="reference" vsli:raw="The object to retrieve the parent component for.">为其检索父组件的对象。</param>
      <returns vsli:raw="The base &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that contains the specified object, or &lt;see langword=&quot;null&quot; /&gt; if no parent component exists.">包含指定对象的基 <see cref="T:System.ComponentModel.IComponent" />，如果不存在父组件，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">获取指定组件的名称。</summary>
      <param name="reference" vsli:raw="The object to return the name of.">要返回其名称的对象。</param>
      <returns vsli:raw="The name of the object referenced, or &lt;see langword=&quot;null&quot; /&gt; if the object reference is not valid.">所引用对象的名称，或者在对象引用无效的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary vsli:raw="Gets a reference to the component whose name matches the specified name.">获取对其名称与指定名称匹配的组件的引用。</summary>
      <param name="name" vsli:raw="The name of the component to return a reference to.">要返回其引用的组件的名称。</param>
      <returns vsli:raw="An object the specified name refers to, or &lt;see langword=&quot;null&quot; /&gt; if no reference is found.">指定名称所引用的对象，或者在未找到引用的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary vsli:raw="Gets all available references to project components.">获取对项目组件的所有可用的引用。</summary>
      <returns vsli:raw="An array of all objects with references available to the &lt;see cref=&quot;T:System.ComponentModel.Design.IReferenceService&quot; /&gt;.">带有可用于 <see cref="T:System.ComponentModel.Design.IReferenceService" /> 的引用的所有对象的数组。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary vsli:raw="Gets all available references to components of the specified type.">获取对指定类型组件的所有可用引用。</summary>
      <param name="baseType" vsli:raw="The type of object to return references to instances of.">要返回对其实例引用的对象类型。</param>
      <returns vsli:raw="An array of all available objects of the specified type.">指定类型的所有可用对象的数组。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary vsli:raw="Provides an interface for designers to access resource readers and writers for specific &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; resource types.">为设计器提供访问特定 <see cref="T:System.Globalization.CultureInfo" /> 资源类型的资源读取器和编写器的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource reader for the specified culture and returns it.">查找并返回指定区域性的资源阅读器。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to retrieve a resource reader.">要为其检索资源阅读器的资源的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceReader&quot; /&gt; interface that contains the resources for the culture, or &lt;see langword=&quot;null&quot; /&gt; if no resources for the culture exist.">包含区域性资源的 <see cref="T:System.Resources.IResourceReader" /> 接口，或者在区域性没有相应资源的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource writer for the specified culture and returns it.">查找并返回指定区域性的资源编写器。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to create a resource writer.">要为其创建资源编写器的资源的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceWriter&quot; /&gt; interface for the specified culture.">指定区域性的 <see cref="T:System.Resources.IResourceWriter" /> 接口。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary vsli:raw="Provides support for root-level designer view technologies.">提供对根级设计器视图技术的支持。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary vsli:raw="Gets a view object for the specified view technology.">获取指定视图技术的视图对象。</summary>
      <param name="technology" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; that indicates a particular view technology.">指示特定视图技术的 <see cref="T:System.ComponentModel.Design.ViewTechnology" />。</param>
      <returns vsli:raw="An object that represents the view for this designer.">表示此设计器的视图的对象。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified view technology is not supported or does not exist.">指定的视图技术不受支持或不存在。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary vsli:raw="Gets the set of technologies that this designer can support for its display.">获取此设计器可为其显示提供支持的技术集。</summary>
      <returns vsli:raw="An array of supported &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; values.">受支持的 <see cref="T:System.ComponentModel.Design.ViewTechnology" /> 值的数组。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary vsli:raw="Provides an interface for a designer to select components.">为设计器提供用于选择组件的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary vsli:raw="Gets a value indicating whether the specified component is currently selected.">获取一个值，该值指示当前是否选定指定组件。</summary>
      <param name="component" vsli:raw="The component to test.">要测试的组件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is part of the user's current selection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该组件是用户当前选择的一部分，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary vsli:raw="Gets a collection of components that are currently selected.">获取当前选定的组件的集合。</summary>
      <returns vsli:raw="A collection that represents the current set of components that are selected.">表示当前选定的组件集的集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary vsli:raw="Gets the object that is currently the primary selected object.">获取当前为主选定对象的对象。</summary>
      <returns vsli:raw="The object that is currently the primary selected object.">当前为主选定对象的对象。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary vsli:raw="Occurs when the current selection changes.">当前所选内容更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary vsli:raw="Occurs when the current selection is about to change.">在将要更改当前选择时发生。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary vsli:raw="Gets the count of selected objects.">获取选定对象的计数。</summary>
      <returns vsli:raw="The number of selected objects.">选定对象的数目。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary vsli:raw="Selects the specified collection of components.">选择指定的组件集合。</summary>
      <param name="components" vsli:raw="The collection of components to select.">要选择的组件的集合。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary vsli:raw="Selects the components from within the specified collection of components that match the specified selection type.">从匹配指定选择类型的指定组件集合中选择组件。</summary>
      <param name="components" vsli:raw="The collection of components to select.">要选择的组件的集合。</param>
      <param name="selectionType" vsli:raw="A value from the &lt;see cref=&quot;T:System.ComponentModel.Design.SelectionTypes&quot; /&gt; enumeration. The default is &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.SelectionTypes" /> 枚举中的一个值。 默认值为 <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary vsli:raw="Provides a container for services.">提供服务的容器。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">将指定的服务添加到服务容器中。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">要添加的服务类型。</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">用于创建服务的回调对象。 这允许将服务声明为可用，但将对象的创建延迟到请求该服务之后。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to parent service containers.">将指定服务添加到服务容器中，并可选择将该服务提升到父服务容器。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">要添加的服务类型。</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">用于创建服务的回调对象。 这允许将服务声明为可用，但将对象的创建延迟到请求该服务之后。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />，则将此请求提升到任何父服务容器；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">将指定的服务添加到服务容器中。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">要添加的服务类型。</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">要添加的服务类型的实例。 此对象必须实现 <paramref name="serviceType" /> 参数所指示的类型或从其继承。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to any parent service containers.">将指定服务添加到服务容器中，并可选择将该服务提升到任何父服务容器。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">要添加的服务类型。</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">要添加的服务类型的实例。 此对象必须实现 <paramref name="serviceType" /> 参数所指示的类型或从其继承。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />，则将此请求提升到任何父服务容器；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">从服务容器中移除指定的服务类型。</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">要移除的服务类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container, and optionally promotes the service to parent service containers.">从服务容器中移除指定的服务类型，并可选择将该服务提升到父服务容器。</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">要移除的服务类型。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />，则将此请求提升到任何父服务容器；否则为 <see langword="false" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary vsli:raw="Provides support for building a set of related custom designers.">为建立一组相关的自定义设计器提供支持。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary vsli:raw="Gets a collection of child designers.">获取子设计器的集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;, containing the collection of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; child objects of the current designer.">
        <see cref="T:System.Collections.ICollection" />，其中包含当前设计器的 <see cref="T:System.ComponentModel.Design.IDesigner" /> 子对象的集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary vsli:raw="Gets the parent designer.">获取父设计器。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; representing the parent designer, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">表示父设计器的 <see cref="T:System.ComponentModel.Design.IDesigner" />，如果没有父设计器，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary vsli:raw="Provides an interface to modify the set of member descriptors for a component in design mode.">提供在设计模式下修改组件的成员说明符集的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the attributes that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">筛选组件通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的特性。</summary>
      <param name="component" vsli:raw="The component to filter the attributes of.">要筛选其特性的组件。</param>
      <param name="attributes" vsli:raw="A dictionary of attributes that can be modified.">可修改的特性字典。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered attributes is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">如果将缓存经过筛选的特性集，则为 <see langword="true" />；如果筛选服务必须再次查询，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the events that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">筛选组件通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的事件。</summary>
      <param name="component" vsli:raw="The component to filter events for.">要为其筛选事件的组件。</param>
      <param name="events" vsli:raw="A dictionary of events that can be modified.">可修改的事件字典。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered events is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">如果将缓存经过筛选的事件集，则为 <see langword="true" />；如果筛选服务必须再次查询，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the properties that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">筛选组件通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性。</summary>
      <param name="component" vsli:raw="The component to filter properties for.">要筛选其属性的组件。</param>
      <param name="properties" vsli:raw="A dictionary of properties that can be modified.">可修改的属性字典。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered properties is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">如果将缓存经过筛选的属性集，则为 <see langword="true" />；如果筛选服务必须再次查询，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary vsli:raw="Discovers available types at design time.">发现设计时可用的类型。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary vsli:raw="Retrieves the list of available types.">检索可用类型的列表。</summary>
      <param name="baseType" vsli:raw="The base type to match. Can be &lt;see langword=&quot;null&quot; /&gt;.">要匹配的基类型。 可以为 <see langword="null" />。</param>
      <param name="excludeGlobalTypes" vsli:raw="Indicates whether types from all referenced assemblies should be checked.">指示是否应检查来自所有引用程序集的类型。</param>
      <returns vsli:raw="A collection of types that match the criteria specified by &lt;paramref name=&quot;baseType&quot; /&gt; and &lt;paramref name=&quot;excludeGlobalTypes&quot; /&gt;.">与 <paramref name="baseType" /> 和 <paramref name="excludeGlobalTypes" /> 指定的条件相匹配的类型的集合。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary vsli:raw="Provides an interface to retrieve an assembly or type by name.">提供按名称检索程序集或类型的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the requested assembly.">获取请求的程序集。</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">要检索的程序集的名称。</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">所请求的程序集的实例，或者如果找不到任何程序集，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary vsli:raw="Gets the requested assembly.">获取请求的程序集。</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">要检索的程序集的名称。</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">如果在无法找到程序集时此方法应引发异常，则为 <see langword="true" />；否则为 <see langword="false" />，而且当无法找到程序集时，此方法将返回 <see langword="null" />。</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">所请求的程序集的实例，或者如果找不到任何程序集，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the path to the file from which the assembly was loaded.">获取从中加载程序集的文件的路径。</summary>
      <param name="name" vsli:raw="The name of the assembly.">程序集的名称。</param>
      <returns vsli:raw="The path to the file from which the assembly was loaded.">从中加载程序集的文件的路径。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary vsli:raw="Loads a type with the specified name.">用指定的名称加载类型。</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">类型的名称。 如果类型名不是指示程序集的完全限定名，则此服务将搜索其引用的程序集的内部集合。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">与指定名称对应的 <see cref="T:System.Type" /> 的实例，或者如果找不到任何类型，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">用指定的名称加载类型。</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">类型的名称。 如果类型名不是指示程序集的完全限定名，则此服务将搜索其引用的程序集的内部集合。</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">如果在无法找到程序集时此方法应引发异常，则为 <see langword="true" />；否则为 <see langword="false" />，而且当无法找到程序集时，此方法将返回 <see langword="null" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">与指定名称对应的 <see cref="T:System.Type" /> 的实例，或者如果找不到任何类型，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">用指定的名称加载类型。</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">类型的名称。 如果类型名不是指示程序集的完全限定名，则此服务将搜索其引用的程序集的内部集合。</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">如果在无法找到程序集时此方法应引发异常，则为 <see langword="true" />；否则为 <see langword="false" />，而且当无法找到程序集时，此方法将返回 <see langword="null" />。</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore case when searching for types; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，则在搜索类型时忽略大小写；否则为 <see langword="false" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">与指定名称对应的 <see cref="T:System.Type" /> 的实例，或者如果找不到任何类型，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Adds a reference to the specified assembly.">将引用添加到指定程序集中。</summary>
      <param name="name" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; that indicates the assembly to reference.">此 <see cref="T:System.Reflection.AssemblyName" /> 指示要引用的程序集。</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary vsli:raw="Represents a Windows menu or toolbar command item.">表示 Windows 菜单项或工具栏命令项。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 类的新实例。</summary>
      <param name="handler" vsli:raw="The event to raise when the user selects the menu item or toolbar button.">在用户选择菜单项或工具栏按钮时引发的事件。</param>
      <param name="command" vsli:raw="The unique command ID that links this menu command to the environment's menu.">将此菜单命令链接到环境菜单的唯一命令 ID。</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is checked.">获取或设置一个值，用以指示是否选中此菜单项。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is checked; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果选中该项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary vsli:raw="Occurs when the menu command changes.">在菜单命令出现更改时发生。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with this menu command.">获取与此菜单命令相关联的 <see cref="T:System.ComponentModel.Design.CommandID" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with the menu command.">与此菜单命令相关联的 <see cref="T:System.ComponentModel.Design.CommandID" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary vsli:raw="Gets a value indicating whether this menu item is available.">获取一个值，该值指示此菜单项是否可用。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已启用此项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary vsli:raw="Invokes the command.">调用该命令。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary vsli:raw="Invokes the command with the given parameter.">使用给定参数调用命令。</summary>
      <param name="arg" vsli:raw="An optional argument for use by the command.">供该命令使用的可选参数。</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary vsli:raw="Gets the OLE command status code for this menu item.">获取此菜单项的 OLE 命令状态代码。</summary>
      <returns vsli:raw="An integer containing a mixture of status flags that reflect the state of this menu item.">一个整数，由反映此菜单项状态的状态标志组合而成。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.MenuCommand.CommandChanged&quot; /&gt; event.">引发 <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" /> 事件。</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary vsli:raw="Gets the public properties associated with the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">获取与 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 关联的公共属性。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing the public properties of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> 包含 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 的公共属性。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is supported.">获取或设置一个值，用以指示是否支持此菜单项。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is supported, which is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果支持此项（默认情况），则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary vsli:raw="Returns a string representation of this menu command.">返回此菜单命令的字符串表示形式。</summary>
      <returns vsli:raw="A string containing the value of the &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.CommandID&quot; /&gt; property appended with the names of any flags that are set, separated by pipe bars (|). These flag properties include &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Checked&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Enabled&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Supported&quot; /&gt;, and &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Visible&quot; /&gt;.">一个字符串，它包含 <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> 属性的值并附加所设置的任何标志的名称，两者用竖线 (|) 分隔。 这些标志属性包括 <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />、<see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />、<see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /> 和 <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is visible.">获取或设置一个值，用以指示此菜单项是否可见。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is visible; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此项可见，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary vsli:raw="Defines identifiers that indicate the type of a selection.">定义用于指示选择类型的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary vsli:raw="Represents an add selection that adds the selected components to the current selection, maintaining the current set of selected components.">表示添加所选内容，它向当前所选内容中添加选择的组件，以保持当前选定组件的集合。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">表示常规选择。 此选择服务对 Ctrl 和 Shift 键作出响应，以支持在所选内容中添加或移除组件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary vsli:raw="Represents a selection that occurs when a user clicks a component. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">表示当用户单击组件时发生的选择。 如果新选择的组件已被选定，则将该组件提升为主选定组件，而不是取消选择。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary vsli:raw="Represents a selection that occurs when the user presses on the mouse button while the mouse pointer is over a component. If the component under the pointer is already selected, it is promoted to become the primary selected component rather than being canceled.">表示当鼠标指针位于组件上时，用户按下鼠标按钮所发生的选择。 如果已选定指针下的组件，则将该组件提升为主选定组件，而不是取消选择。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary vsli:raw="Represents a selection that occurs when the user releases the mouse button immediately after a component has been selected. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">表示选定组件后用户立即释放鼠标按钮时发生的选择。 如果新选择的组件已被选定，则将该组件提升为主选定组件，而不是取消选择。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">表示常规选择。 此选择服务对 Ctrl 和 Shift 键作出响应，以支持在所选内容中添加或移除组件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary vsli:raw="Represents a primary selection that occurs when a user clicks on a component. If a component in the selection list is already selected, the component is promoted to be the primary selection.">表示当用户单击组件时发生的主选择。 如果所选内容列表中的组件已被选定，则将该组件提升为主所选内容。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary vsli:raw="Represents a remove selection that removes the selected components from the current selection, maintaining the current set of selected components.">表示移除所选内容，它从当前所选内容中移除选择的组件，以保持当前选定组件的集合。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary vsli:raw="Represents a selection that occurs when the content of a selection is replaced. The selection service replaces the current selection with the replacement.">表示当选择的内容被替换时发生的选择。 此选择服务用替换内容替换当前选定的内容。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary vsli:raw="Represents a toggle selection that switches between the current selection and the provided selection. If a component is already selected and is passed into &lt;see cref=&quot;Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents&quot; /&gt; with a selection type of &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Toggle&quot; /&gt;, the component selection will be canceled.">表示切换所选内容，它在当前所选内容与所提供的所选内容之间切换。 如果组件已被选定并且以选择类型 <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> 传入 <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" />，则该组件选择将被取消。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary vsli:raw="Identifies the valid selection types as &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Replace&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseDown&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseUp&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Click&quot; /&gt;.">将有效选择类型标识为 <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" /> 或 <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" />。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary vsli:raw="Provides the base class for serializing a set of components or serializable objects into a serialization store.">提供用于将一组组件或可序列化的对象序列化到序列化存储区的基类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">创建一个新的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</summary>
      <returns vsli:raw="A new created serialization store.">一个新创建的序列化存储区。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary vsli:raw="Deserializes the given store to produce a collection of objects.">将给定存储区反序列化以产生一个对象集合。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">要反序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <returns vsli:raw="A collection of objects created according to the stored state.">根据存储状态创建的对象集合。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> 不包含任何具有序列化容器可以处理的格式的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given store and populates the given &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with deserialized &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects.">将给定存储区反序列化，并使用反序列化的 <see cref="T:System.ComponentModel.IContainer" /> 对象填充给定的 <see cref="T:System.ComponentModel.IComponent" />。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">要反序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">
        <see cref="T:System.ComponentModel.IContainer" /> 对象将要添加到的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <returns vsli:raw="A collection of objects created according to the stored state.">根据存储状态创建的对象集合。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 或 <paramref name="container" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> 不包含任何具有序列化容器可以处理的格式的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container.">将给定的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 反序列化为给定的容器。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">要反序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">
        <see cref="T:System.ComponentModel.IComponent" /> 对象将要添加到的容器。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 或 <paramref name="container" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> 不包含任何具有序列化容器可以处理的格式的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally validating recycled types.">将给定 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 反序列化为给定容器，还可以验证回收类型。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">要反序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">
        <see cref="T:System.ComponentModel.IComponent" /> 对象将要添加到的容器。</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">为 <see langword="true" /> 时，保证只有在应用于同类型对象时，反序列化才起作用。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 或 <paramref name="container" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> 不包含任何具有序列化容器可以处理的格式的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally applying default property values.">将给定 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 反序列化为给定容器，还可以应用默认属性值。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">要反序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">
        <see cref="T:System.ComponentModel.IComponent" /> 对象将要添加到的容器。</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">为 <see langword="true" /> 时，保证只有在应用于同类型对象时，反序列化才起作用。</param>
      <param name="applyDefaults" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the default property values should be applied.">为 <see langword="true" /> 时，表示应当应用默认属性值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 或 <paramref name="container" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> 不包含任何具有序列化容器可以处理的格式的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary vsli:raw="Loads a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; from a stream.">从流中加载 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</summary>
      <param name="stream" vsli:raw="The &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; from which the store will be loaded.">将要从中加载存储区的 <see cref="T:System.IO.Stream" />。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; instance.">新 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; does not contain data saved by a previous call to &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)&quot; /&gt;.">
        <paramref name="stream" /> 不包含由前面某个对 <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" /> 的调用保存的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object to the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">将给定的对象序列化为给定的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be written.">
        <paramref name="value" /> 的状态将写入的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="value" vsli:raw="The object to serialize.">要序列化的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> 已关闭，或者 <paramref name="store" /> 不是序列化存储区的支持类型。 使用 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 返回的存储区。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object, accounting for default property values.">根据默认属性值序列化给定对象。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be serialized.">
        <paramref name="value" /> 的状态将序列化到的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="value" vsli:raw="The object to serialize.">要序列化的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> 已关闭，或者 <paramref name="store" /> 不是序列化存储区的支持类型。 使用 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 返回的存储区。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object.">在给定对象上序列化给定成员。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">
        <paramref name="member" /> 的状态将序列化到的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">在其上附加 <paramref name="member" /> 的对象。</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; specifying the member to serialize.">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> 指定要序列化的成员。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> 已关闭，或者 <paramref name="store" /> 不是序列化存储区的支持类型。 使用 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 返回的存储区。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object, accounting for the default property value.">根据默认属性值，序列化给定对象上的给定成员。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">
        <paramref name="member" /> 的状态将序列化到的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">在其上附加 <paramref name="member" /> 的对象。</param>
      <param name="member" vsli:raw="The member to serialize.">要序列化的成员。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> 已关闭，或者 <paramref name="store" /> 不是序列化存储区的支持类型。 使用 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 返回的存储区。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary vsli:raw="Provides a stack object that can be used by a serializer to make information available to nested serializers.">提供堆栈对象，序列化程序可使用该对象向嵌套的序列化程序提供信息。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary vsli:raw="Appends an object to the end of the stack, rather than pushing it onto the top of the stack.">将对象追加到堆栈的结尾，而不是将其推到堆栈的顶部。</summary>
      <param name="context" vsli:raw="A context object to append to the stack.">要追加到堆栈中的上下文对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary vsli:raw="Gets the current object on the stack.">获取堆栈上的当前对象。</summary>
      <returns vsli:raw="The current object on the stack, or &lt;see langword=&quot;null&quot; /&gt; if no objects were pushed.">堆栈上的当前对象，或者如果未推入任何对象则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary vsli:raw="Gets the object on the stack at the specified level.">获取堆栈上指定级别的对象。</summary>
      <param name="level" vsli:raw="The level of the object to retrieve on the stack. Level 0 is the top of the stack, level 1 is the next down, and so on. This level must be 0 or greater. If level is greater than the number of levels on the stack, it returns &lt;see langword=&quot;null&quot; /&gt;.">要在堆栈上检索的对象的级别。 级别 0 是堆栈的顶级，级别 1 是接下来的一级，依次类推。 此级别必须大于或等于 0。 如果级别大于该堆栈上的级别数，它返回 <see langword="null" />。</param>
      <returns vsli:raw="The object on the stack at the specified level, or &lt;see langword=&quot;null&quot; /&gt; if no object exists at that level.">堆栈上指定级别的对象，或者在该级别不存在任何对象则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;level&quot; /&gt; is less than 0.">
        <paramref name="level" /> 小于 0。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary vsli:raw="Gets the first object on the stack that inherits from or implements the specified type.">获取堆栈上从指定类型继承或者实现指定类型的第一个对象。</summary>
      <param name="type" vsli:raw="A type to retrieve from the context stack.">要从上下文堆栈检索的类型。</param>
      <returns vsli:raw="The first object on the stack that inherits from or implements the specified type, or &lt;see langword=&quot;null&quot; /&gt; if no object on the stack implements the type.">堆栈上从指定类型继承或者实现指定类型的第一个对象，或者如果在堆栈上没有任何对象实现此类型则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary vsli:raw="Removes the current object off of the stack, returning its value.">从堆栈中移除当前对象并返回其值。</summary>
      <returns vsli:raw="The object removed from the stack; &lt;see langword=&quot;null&quot; /&gt; if no objects are on the stack.">已从堆栈中移除的对象；如果堆栈中没有对象，则返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary vsli:raw="Pushes, or places, the specified object onto the stack.">将指定对象推入（即放置）到堆栈上。</summary>
      <param name="context" vsli:raw="The context object to push onto the stack.">推入到堆栈上的上下文对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; attribute is placed on a serializer to indicate the class to use as a default provider of that type of serializer.">
        <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 特性被放置在序列化程序上，以指示要用作该类型序列化程序的默认提供程序的类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the named provider type.">用命名的提供程序类型初始化 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 类的新实例。</summary>
      <param name="providerTypeName" vsli:raw="The name of the serialization provider type.">序列化提供程序类型的名称。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerTypeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerTypeName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the given provider type.">使用给定的提供程序类型初始化 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 类的新实例。</summary>
      <param name="providerType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the serialization provider.">序列化提供程序的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary vsli:raw="Gets the type name of the serialization provider.">获取序列化提供程序的类型名。</summary>
      <returns vsli:raw="A string containing the name of the provider.">包含提供程序名称的字符串。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary vsli:raw="Provides a basic designer loader interface that can be used to implement a custom designer loader.">提供可用于实现自定义设计器加载程序的基本设计器加载程序接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary vsli:raw="Begins loading a designer.">开始加载一个设计器。</summary>
      <param name="host" vsli:raw="The loader host through which this loader loads components.">此加载程序用来加载组件的加载程序宿主。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt;.">释放由 <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary vsli:raw="Writes cached changes to the location that the designer was loaded from.">将缓存的更改写入设计器的加载位置。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary vsli:raw="Gets a value indicating whether the loader is currently loading a document.">获取一个值，该值指示加载程序当前是否正在加载文档。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the loader is currently loading a document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果加载程序当前正加载一个文档，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>指示某个序列化管理器的序列化程序，它将用于序列化此特性所应用到的类型的值。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerTypeName">序列化程序的数据类型的完全限定名。</param>
      <param name="baseSerializerTypeName">序列化程序的基数据类型的完全限定名。 只要序列化程序具有不同的基类型，就可以为一个类提供多个序列化程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerTypeName">序列化程序的数据类型的完全限定名。</param>
      <param name="baseSerializerType">序列化程序的基数据类型。 只要序列化程序具有不同的基类型，就可以为一个类提供多个序列化程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerType">序列化程序的数据类型。</param>
      <param name="baseSerializerType">序列化程序的基数据类型。 只要序列化程序具有不同的基类型，就可以为一个类提供多个序列化程序。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>获取序列化程序基类型的完全限定类型名。</summary>
      <returns>序列化程序基类型的完全限定类型名。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>获取序列化程序的完全限定类型名。</summary>
      <returns>序列化程序的完全限定类型名。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId">
      <summary>指示此特性类型的唯一 ID。</summary>
      <returns>此特性类型的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary vsli:raw="Provides an interface that can extend a designer host to support loading from a serialized state.">提供一个接口，该接口可扩展设计器宿主以支持从序列化状态加载。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Ends the designer loading operation.">结束设计器加载操作。</summary>
      <param name="baseClassName" vsli:raw="The fully qualified name of the base class of the document that this designer is designing.">此设计器正在设计的文档的基类的完全限定名。</param>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is successfully loaded; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果设计器已成功加载，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="errorCollection" vsli:raw="A collection containing the errors encountered during load, if any. If no errors were encountered, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">包含加载期间遇到的错误（如果有的话）的集合。 如果没有遇到任何错误，则传递空集合或 <see langword="null" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary vsli:raw="Reloads the design document.">重新加载设计文档。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary vsli:raw="Provides an interface that extends &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&quot; /&gt; to specify whether errors are tolerated while loading a design document.">提供扩展 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> 的接口，以指定在加载设计文档时是否允许发生错误。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary vsli:raw="Gets or sets a value indicating whether it is possible to reload with errors.">获取或设置一个值，以指示发生错误时是否可以重新加载。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader can reload the design document when errors are detected; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果设计器加载程序在检测到错误时可以重新加载设计文档，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary vsli:raw="Gets or sets a value indicating whether errors should be ignored when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload&quot; /&gt; is called.">获取或设置一个值，以指示在调用 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" /> 时是否应忽略错误。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader will ignore errors when it reloads; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果设计器加载程序在重新加载时将忽略错误，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary vsli:raw="Provides an interface that can extend a designer loader to support asynchronous loading of external components.">提供一个接口，该接口可以扩展设计器加载程序以支持外部组件的异步加载。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary vsli:raw="Registers an external component as part of the load process managed by this interface.">将外部组件注册为由此接口管理的加载进程的一部分。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Signals that a dependent load has finished.">发出信号表示已完成依赖加载。</summary>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the load of the designer is successful; &lt;see langword=&quot;false&quot; /&gt; if errors prevented the load from finishing.">如果设计器的加载成功，则为 <see langword="true" />；如果出现的错误阻止了加载完成，则为 <see langword="false" />。</param>
      <param name="errorCollection" vsli:raw="A collection of errors that occurred during the load, if any. If no errors occurred, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">加载期间发生的错误（如果有的话）的集合。 如果没有发生任何错误，则传递空集合或 <see langword="null" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary vsli:raw="Reloads the design document.">重新加载设计文档。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reload request is accepted, or &lt;see langword=&quot;false&quot; /&gt; if the loader does not allow the reload.">如果接受重新加载请求，则为 <see langword="true" />；如果加载程序不允许重新加载，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary vsli:raw="Provides an interface that can manage design-time serialization.">提供可以管理设计时序列化的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Adds the specified serialization provider to the serialization manager.">向序列化管理器添加指定的序列化提供程序。</summary>
      <param name="provider" vsli:raw="The serialization provider to add.">要添加的序列化提供程序。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary vsli:raw="Gets a stack-based, user-defined storage area that is useful for communication between serializers.">获取基于堆栈的、用户定义的存储区域，该区域对于序列化程序之间的通信十分有用。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; that stores data.">存储数据的 <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary vsli:raw="Creates an instance of the specified type and adds it to a collection of named instances.">创建指定类型的实例并将其添加到已命名实例的集合中。</summary>
      <param name="type" vsli:raw="The data type to create.">要创建的数据类型。</param>
      <param name="arguments" vsli:raw="The arguments to pass to the constructor for this type.">要传递到此类型的构造函数的参数。</param>
      <param name="name" vsli:raw="The name of the object. This name can be used to access the object later through &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the object is still created but cannot be accessed by name.">对象的名称。 此名称可用于以后通过 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" /> 访问该对象。 如果传递了 <see langword="null" />，则仍将创建该对象，但无法按名称访问它。</param>
      <param name="addToContainer" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, this object is added to the design container. The object must implement &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for this to have any effect.">如果为 <see langword="true" />，则该对象将被添加到设计容器中。 该对象必须实现 <see cref="T:System.ComponentModel.IComponent" /> 才能使此功能生效。</param>
      <returns vsli:raw="The newly created object instance.">新创建的对象实例。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary vsli:raw="Gets an instance of a created object of the specified name, or &lt;see langword=&quot;null&quot; /&gt; if that object does not exist.">获取指定名称的已创建对象的实例，如果该对象不存在则为 <see langword="null" />。</summary>
      <param name="name" vsli:raw="The name of the object to retrieve.">要检索的对象名。</param>
      <returns vsli:raw="An instance of the object with the given name, or &lt;see langword=&quot;null&quot; /&gt; if no object by that name can be found.">具有给定名称的对象的实例，如果按该名称无法找到任何对象则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified object, or &lt;see langword=&quot;null&quot; /&gt; if the object has no name.">获取指定对象的名称，如果该对象不具有名称则为 <see langword="null" />。</summary>
      <param name="value" vsli:raw="The object to retrieve the name for.">要检索其名称的对象。</param>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object is unnamed.">对象的名称，如果对象是未命名的，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer of the requested type for the specified object type.">为指定对象类型获取所请求类型的序列化程序。</summary>
      <param name="objectType" vsli:raw="The type of the object to get the serializer for.">要为其获取序列化程序的对象类型。</param>
      <param name="serializerType" vsli:raw="The type of the serializer to retrieve.">要检索的序列化程序的类型。</param>
      <returns vsli:raw="An instance of the requested serializer, or &lt;see langword=&quot;null&quot; /&gt; if no appropriate serializer can be located.">请求的序列化程序的实例，如果不能找到任何适当的序列化程序，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary vsli:raw="Gets a type of the specified name.">获取指定名称的类型。</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the type to load.">要加载的类型的完全限定名。</param>
      <returns vsli:raw="An instance of the type, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be loaded.">该类型的实例，如果无法加载该类型，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary vsli:raw="Indicates custom properties that can be serializable with available serializers.">指示可利用可用序列化程序进行序列化的自定义属性。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties to be serialized.">包含要进行序列化的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Removes a custom serialization provider from the serialization manager.">从序列化管理器移除自定义的序列化提供程序。</summary>
      <param name="provider" vsli:raw="The provider to remove. This object must have been added using &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)&quot; /&gt;.">要移除的提供程序。 该对象必须已使用 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" /> 添加过。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary vsli:raw="Reports an error in serialization.">报告序列化中的错误。</summary>
      <param name="errorInformation" vsli:raw="The error to report. This information object can be of any object type. If it is an exception, the message of the exception is extracted and reported to the user. If it is any other type, &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt; is called to display the information to the user.">要报告的错误。 该信息对象可以是任何对象类型。 如果它是一个异常，则将提取该异常的消息并报告给用户。 如果它是任何其他类型，则将调用 <see cref="M:System.Object.ToString" /> 以向用户显示该信息。</param>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary vsli:raw="Occurs when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)&quot; /&gt; cannot locate the specified name in the serialization manager's name table.">当 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> 无法在序列化管理器的名称表中找到指定名称时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary vsli:raw="Occurs when serialization is complete.">在序列化完成时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary vsli:raw="Sets the name of the specified existing object.">设置指定的现有对象的名称。</summary>
      <param name="instance" vsli:raw="The object instance to name.">要命名的对象实例。</param>
      <param name="name" vsli:raw="The name to give the instance.">提供给实例的名称。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary vsli:raw="Provides an interface that enables access to a serializer.">提供一个支持访问序列化程序的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer using the specified attributes.">获取使用指定特性的序列化程序。</summary>
      <param name="manager" vsli:raw="The serialization manager requesting the serializer.">请求序列化程序的序列化管理器。</param>
      <param name="currentSerializer" vsli:raw="An instance of the current serializer of the specified type. This can be &lt;see langword=&quot;null&quot; /&gt; if no serializer of the specified type exists.">指定类型的当前序列化程序的实例。 如果不存在指定类型的序列化程序，则这可能为 <see langword="null" />。</param>
      <param name="objectType" vsli:raw="The data type of the object to serialize.">要序列化的对象的数据类型。</param>
      <param name="serializerType" vsli:raw="The data type of the serializer to create.">要创建的序列化程序的数据类型。</param>
      <returns vsli:raw="An instance of a serializer of the type requested, or &lt;see langword=&quot;null&quot; /&gt; if the request cannot be satisfied.">所请求类型的序列化程序的实例，如果不能满足该请求则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary vsli:raw="Provides an interface that can invoke serialization and deserialization.">提供一个可调用序列化和反序列化的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary vsli:raw="Deserializes the specified serialization data object and returns a collection of objects represented by that data.">反序列化指定的序列化数据对象并返回由这些数据表示的对象的集合。</summary>
      <param name="serializationData" vsli:raw="An object consisting of serialized data.">包含序列化的数据的对象。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of objects rebuilt from the specified serialization data object.">从指定的序列化数据对象重新生成的对象的 <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary vsli:raw="Serializes the specified collection of objects and stores them in a serialization data object.">序列化指定的对象集合并将其存储在序列化数据对象中。</summary>
      <param name="objects" vsli:raw="A collection of objects to serialize.">要序列化的对象的集合。</param>
      <returns vsli:raw="An object that contains the serialized state of the specified collection of objects.">包含指定的对象集合的序列化状态的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary vsli:raw="Provides a service that can generate unique names for objects.">提供可以生成对象的唯一名称的服务。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary vsli:raw="Creates a new name that is unique to all components in the specified container.">创建一个新名称，该名称对于指定容器中的所有组件来说是唯一的。</summary>
      <param name="container" vsli:raw="The container where the new object is added.">将新对象添加到的容器。</param>
      <param name="dataType" vsli:raw="The data type of the object that receives the name.">接收该名称的对象的数据类型。</param>
      <returns vsli:raw="A unique name for the data type.">数据类型的唯一名称。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">获取一个值，该值指示指定名称是否有效。</summary>
      <param name="name" vsli:raw="The name to validate.">要验证的名称。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name is valid; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该名称有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">获取一个值，该值指示指定名称是否有效。</summary>
      <param name="name" vsli:raw="The name to validate.">要验证的名称。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary vsli:raw="Provides the information necessary to create an instance of an object. This class cannot be inherited.">提供创建对象的实例所需的信息。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information and arguments.">使用指定的成员信息和参数初始化 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 类的新实例。</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">说明符的成员信息。 它可以是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.ConstructorInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />。 如果这是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，则它必须表示 <see langword="static" /> 成员。</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">要向该成员传递的参数的集合。 如果没有自变量，则此参数可以为 <see langword="null" /> 或空集合。 该集合也可以由 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 的其他实例组成。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">
        <paramref name="member" /> 的类型为 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，并不表示一个 <see langword="static" /> 成员。
或
<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.PropertyInfo" /> 而且不可读。
或
<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.MethodInfo" /> 或 <see cref="T:System.Reflection.ConstructorInfo" />，而且 <paramref name="arguments" /> 中的参数数目与 <paramref name="member" /> 的签名不匹配。

或 -

<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.ConstructorInfo" /> 并表示一个 <see langword="static" /> 成员。

或 -
<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.FieldInfo" />，而且 <paramref name="arguments" /> 中的参数数目不为零。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information, arguments, and value indicating whether the specified information completely describes the instance.">使用指定的成员信息、参数以及指示指定的信息是否完全描述该实例的值，初始化 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 类的新实例。</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">说明符的成员信息。 它可以是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.ConstructorInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />。 如果这是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，则它必须表示 <see langword="static" /> 成员。</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">要向该成员传递的参数的集合。 如果没有自变量，则此参数可以为 <see langword="null" /> 或空集合。 该集合也可以由 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 的其他实例组成。</param>
      <param name="isComplete" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified information completely describes the instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的信息完全描述该实例，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">
        <paramref name="member" /> 的类型为 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，并不表示一个 <see langword="static" /> 成员
<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.PropertyInfo" /> 而且不可读。
<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.MethodInfo" /> 或 <see cref="T:System.Reflection.ConstructorInfo" />，而且 <paramref name="arguments" /> 中的参数数目与 <paramref name="member" /> 的签名不匹配。
<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.ConstructorInfo" /> 并表示一个 <see langword="static" /> 成员。
<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.FieldInfo" />，而且 <paramref name="arguments" /> 中的参数数目不为零。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary vsli:raw="Gets the collection of arguments that can be used to reconstruct an instance of the object that this instance descriptor represents.">获取参数的集合，这些参数可用于重新构造此实例说明符所表示的对象的实例。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of arguments that can be used to create the object.">可用于创建该对象的参数的 <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary vsli:raw="Invokes this instance descriptor and returns the object the descriptor describes.">调用此实例说明符并返回该说明符所描述的对象。</summary>
      <returns vsli:raw="The object this instance descriptor describes.">该实例说明符所描述的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary vsli:raw="Gets a value indicating whether the contents of this &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; completely identify the instance.">获取一个值，该值指示此 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 的内容是否完全标识该实例。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance is completely described; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该实例被完全描述，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary vsli:raw="Gets the member information that describes the instance this descriptor is associated with.">获取描述与此说明符关联的实例的成员信息。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that describes the instance that this object is associated with.">一个 <see cref="T:System.Reflection.MemberInfo" />，描述与此对象关联的实例。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary vsli:raw="Represents a single relationship between an object and a member.">表示某个对象和某个成员之间的单一关系。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 类的新实例。</summary>
      <param name="owner" vsli:raw="The object that owns &lt;paramref name=&quot;member&quot; /&gt;.">拥有 <paramref name="member" /> 的对象。</param>
      <param name="member" vsli:raw="The member which is to be related to &lt;paramref name=&quot;owner&quot; /&gt;.">要与 <paramref name="owner" /> 相关的成员。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; or &lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="owner" /> 或 <paramref name="member" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary vsli:raw="Represents the empty member relationship. This field is read-only.">表示空成员关系。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance is equal to the specified object representing a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance.">确定两个 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 实例是否相等。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">要与当前的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 进行比较的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance and is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />，则为 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">当前 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship.">获取一个值，指示该关系是否等同于 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 关系。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该关系等同于 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 关系，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary vsli:raw="Gets the related member.">获取相关成员。</summary>
      <returns vsli:raw="The member that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">传递至 <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" /> 的成员。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equivalent.">测试两个指定的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构是否等效。</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the equality operator.">相等运算符左侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the equality operator.">相等运算符右侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果这两个 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构等同，则此运算符返回 <see langword="true" />；否则返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different.">测试两个指定的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构是否不同。</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the inequality operator.">不等运算符左侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the inequality operator.">不等运算符右侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果这两个 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构不同，则此运算符返回 <see langword="true" />；否则返回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary vsli:raw="Gets the owning object.">获取所属对象。</summary>
      <returns vsli:raw="The owning object that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">传递至 <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" /> 的所属对象。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary vsli:raw="Provides the base class for relating one member to another.">提供用于将一个成员与另一个成员相关的基类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationshipService&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a relationship to the given source relationship.">获取到给定源关系的关系。</summary>
      <param name="source" vsli:raw="The source relationship.">源关系。</param>
      <returns vsli:raw="A relationship to &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if no relationship exists.">到 <paramref name="source" /> 的关系，如果不存在关系，则为 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">建立源对象与目标对象之间的关系。</summary>
      <param name="source" vsli:raw="The source relationship. This is the left-hand side of a relationship assignment.">源关系。 这是关系分配的左侧。</param>
      <returns vsli:raw="The current relationship associated with &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if there is no relationship.">与 <paramref name="source" /> 关联的当前关系，如果不存在关系，则为 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is empty, or the relationship is not supported by the service.">
        <paramref name="source" /> 为空，或者该服务不支持这种关系。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">建立源对象与目标对象之间的关系。</summary>
      <param name="sourceOwner" vsli:raw="The owner of a source relationship.">源关系的所有者。</param>
      <param name="sourceMember" vsli:raw="The member of a source relationship.">源关系的成员。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure encapsulating the relationship between a source and target object, or &lt;see langword=&quot;null&quot; /&gt; if there is no relationship.">封装源对象和目标对象之间关系的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构，如果不存在关系，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="sourceOwner" /> 或 <paramref name="sourceMember" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is empty, or the relationship is not supported by the service.">
        <paramref name="sourceOwner" /> 或 <paramref name="sourceMember" /> 为空，或者该服务不支持这种关系。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Creates a relationship between the source object and target relationship.">在源对象和目标关系之间创建关系。</summary>
      <param name="source" vsli:raw="The source relationship.">源关系。</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">要设置到源中的关系。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The relationship is not supported by the service.">服务不支持该关系。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a value indicating whether the given relationship is supported.">获取一个值，指示是否支持给定关系。</summary>
      <param name="source" vsli:raw="The source relationship.">源关系。</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">要设置到源中的关系。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a relationship between the given two objects is supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果支持给定的两个对象之间的关系，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event.">为 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The name to resolve.">要解析的名称。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary vsli:raw="Gets the name of the object to resolve.">获取要解析的对象的名称。</summary>
      <returns vsli:raw="The name of the object to resolve.">要解析的对象的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary vsli:raw="Gets or sets the object that matches the name.">获取或设置与该名称匹配的对象。</summary>
      <returns vsli:raw="The object that the name is associated with.">与该名称相关联的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event of a serialization manager.">表示处理序列化管理器的 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; that contains the event data.">包含事件数据的 <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary vsli:raw="Indicates the base serializer to use for a root designer object. This class cannot be inherited.">指示用于根设计器对象的基序列化程序。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">使用指定特性初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">序列化程序的数据类型的完全限定名。</param>
      <param name="baseSerializerTypeName" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers as they all have different base types.">序列化程序的基类型的名称。 一个类可以包含多个序列化程序，因为所有序列化程序都具有不同的基类型。</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此序列化程序支持动态重新加载文档，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">使用指定特性初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">序列化程序的数据类型的完全限定名。</param>
      <param name="baseSerializerType" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers, as they all have different base types.">序列化程序的基类型的名称。 一个类可以包含多个序列化程序，因为所有序列化程序都具有不同的基类型。</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此序列化程序支持动态重新加载文档，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">使用指定特性初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerType" vsli:raw="The data type of the serializer.">序列化程序的数据类型。</param>
      <param name="baseSerializerType" vsli:raw="The base type of the serializer. A class can include multiple serializers as they all have different base types.">序列化程序的基类型。 一个类可以包含多个序列化程序，因为所有序列化程序都具有不同的基类型。</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此序列化程序支持动态重新加载文档，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary vsli:raw="Gets a value indicating whether the root serializer supports reloading of the design document without first disposing the designer host.">获取一个值，该值指示根序列化程序是否支持在不首先释放设计器宿主的条件下即可重新加载设计文档。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the root serializer supports reloading; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果根序列化程序支持重新加载，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the base type of the serializer.">获取序列化程序的基类型的完全限定类型名。</summary>
      <returns vsli:raw="The name of the base type of the serializer.">序列化程序的基类型的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the serializer.">获取序列化程序的完全限定类型名。</summary>
      <returns vsli:raw="The name of the type of the serializer.">序列化程序的类型的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary vsli:raw="Gets a unique ID for this attribute type.">获取此特性类型的唯一 ID。</summary>
      <returns vsli:raw="An object containing a unique ID for this attribute type.">一个包含此特性类型的唯一 ID 的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary vsli:raw="Provides the base class for storing serialization data for the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt;.">提供用于存储 <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> 序列化数据的基类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary vsli:raw="Closes the serialization store.">关闭序列化存储区。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; and optionally releases the managed resources.">释放由 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary vsli:raw="Gets a collection of errors that occurred during serialization or deserialization.">获取序列化或反序列化过程中发生的错误集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that contains errors that occurred during serialization or deserialization.">包含序列化或反序列化过程中发生的错误的 <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary vsli:raw="Saves the store to the given stream.">将存储区保存到给定流。</summary>
      <param name="stream" vsli:raw="The stream to which the store will be serialized.">作为存储区序列化目标的流。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">释放由 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 使用的所有资源。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary vsli:raw="Provides a simple implementation of the &lt;see cref=&quot;T:System.ComponentModel.Design.IServiceContainer&quot; /&gt; interface. This class cannot be inherited.">提供 <see cref="T:System.ComponentModel.Design.IServiceContainer" /> 接口的简单实现。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class using the specified parent service provider.">使用指定的父服务提供程序初始化 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 类的新实例。</summary>
      <param name="parentProvider" vsli:raw="A parent service provider.">父服务提供程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">将指定的服务添加到服务容器中。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">要添加的服务类型。</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">可创建该服务的回调对象。 它允许将服务声明为可用，但是会将对象的创建延迟到请求该服务之后。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> 或 <paramref name="callback" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">容器中已存在类型为 <paramref name="serviceType" /> 的服务。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">将指定的服务添加到服务容器中。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">要添加的服务类型。</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">可创建该服务的回调对象。 它允许将服务声明为可用，但是会将对象的创建延迟到请求该服务之后。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果应将此服务添加到任何父服务容器，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> 或 <paramref name="callback" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">容器中已存在类型为 <paramref name="serviceType" /> 的服务。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">将指定的服务添加到服务容器中。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">要添加的服务类型。</param>
      <param name="serviceInstance" vsli:raw="An instance of the service to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">要添加的服务的实例。 此对象必须实现 <paramref name="serviceType" /> 参数所指示的类型或从其继承。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> 或 <paramref name="serviceInstance" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">容器中已存在类型为 <paramref name="serviceType" /> 的服务。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">将指定的服务添加到服务容器中。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">要添加的服务类型。</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">要添加的服务类型的实例。 此对象必须实现 <paramref name="serviceType" /> 参数所指示的类型或从其继承。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果应将此服务添加到任何父服务容器，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> 或 <paramref name="serviceInstance" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">容器中已存在类型为 <paramref name="serviceType" /> 的服务。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary vsli:raw="Gets the default services implemented directly by &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt;.">获取由 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 直接实现的默认服务。</summary>
      <returns vsli:raw="The default services.">默认服务。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary vsli:raw="Disposes this service container.">释放此服务容器。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Disposes this service container.">释放此服务容器。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; is in the process of being disposed of; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 正在被释放的过程中，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service.">获取请求的服务。</summary>
      <param name="serviceType" vsli:raw="The type of service to retrieve.">要检索的服务类型。</param>
      <returns vsli:raw="An instance of the service if it could be found, or &lt;see langword=&quot;null&quot; /&gt; if it could not be found.">如果可以找到服务，则为该服务的实例；如果未能找到服务，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">从服务容器中移除指定的服务类型。</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">要移除的服务类型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container.">从服务容器中移除指定的服务类型。</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">要移除的服务类型。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be removed from any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果应该从任何父服务容器中移除此服务，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary vsli:raw="Provides a callback mechanism that can create an instance of a service on demand.">提供一种回调机制，它可以即需创建服务的实例。</summary>
      <param name="container" vsli:raw="The service container that requested the creation of the service.">请求创建服务的服务容器。</param>
      <param name="serviceType" vsli:raw="The type of service to create.">要创建的服务的类型。</param>
      <returns vsli:raw="The service specified by &lt;paramref name=&quot;serviceType&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the service could not be created.">由 <paramref name="serviceType" /> 指定的服务；如果未能创建服务，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary vsli:raw="Defines identifiers for the standard set of commands that are available to most applications.">定义可用于大多数应用程序的标准命令集的标识符。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardCommands&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.StandardCommands" /> 类的新实例。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignBottom command. This field is read-only.">获取“AlignBottom”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignHorizontalCenters command. This field is read-only.">获取“AlignHorizontalCenters”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignLeft command. This field is read-only.">获取“AlignLeft”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignRight command. This field is read-only.">获取“AlignRight”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignToGrid command. This field is read-only.">获取“AlignToGrid”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignTop command. This field is read-only.">获取“AlignTop”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignVerticalCenters command. This field is read-only.">获取“AlignVerticalCenters”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeBottom command. This field is read-only.">获取“ArrangeBottom”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeIcons command. This field is read-only.">获取“ArrangeIcons”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeRight command. This field is read-only.">获取“ArrangeRight”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringForward command. This field is read-only.">获取“BringForward”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringToFront command. This field is read-only.">获取“BringToFront”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterHorizontally command. This field is read-only.">获取“CenterHorizontally”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterVertically command. This field is read-only.">获取“CenterVertically”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Copy command. This field is read-only.">获取“Copy”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Cut command. This field is read-only.">获取“Cut”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Delete command. This field is read-only.">获取“Delete”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Document Outline command. This field is read-only.">获取“Document Outline”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the F1Help command. This field is read-only.">获取“F1Help”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Group command. This field is read-only.">获取“Group”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceConcatenate command. This field is read-only.">获取“HorizSpaceConcatenate”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceDecrease command. This field is read-only.">获取“HorizSpaceDecrease”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceIncrease command. This field is read-only.">获取“HorizSpaceIncrease”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceMakeEqual command. This field is read-only.">获取“HorizSpaceMakeEqual”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LineupIcons command. This field is read-only.">获取“LineupIcons”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LockControls command. This field is read-only.">获取“LockControls”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelRedo command. This field is read-only.">获取“MultiLevelRedo”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelUndo command. This field is read-only.">获取“MultiLevelUndo”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Paste command. This field is read-only.">获取“Paste”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Properties command. This field is read-only.">获取“Properties”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the PropertiesWindow command. This field is read-only.">获取“PropertiesWindow”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Redo command. This field is read-only.">获取“Redo”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Replace command. This field is read-only.">获取“Replace”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SelectAll command. This field is read-only.">获取“SelectAll”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendBackward command. This field is read-only.">获取“SendBackward”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendToBack command. This field is read-only.">获取“SendToBack”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowGrid command. This field is read-only.">获取“ShowGrid”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowLargeIcons command. This field is read-only.">获取“ShowLargeIcons”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControl command. This field is read-only.">获取“SizeToControl”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlHeight command. This field is read-only.">获取“SizeToControlHeight”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlWidth command. This field is read-only.">获取“SizeToControlWidth”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToFit command. This field is read-only.">获取“SizeToFit”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToGrid command. This field is read-only.">获取“SizeToGrid”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SnapToGrid command. This field is read-only.">获取“SnapToGrid”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the TabOrder command. This field is read-only.">获取“TabOrder”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Undo command. This field is read-only.">获取“Undo”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Ungroup command. This field is read-only.">获取“Ungroup”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary vsli:raw="Gets the first of a set of verbs. This field is read-only.">获取一组谓词中的第一个。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary vsli:raw="Gets the last of a set of verbs. This field is read-only.">获取一组谓词中的最后一个。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceConcatenate command. This field is read-only.">获取“VertSpaceConcatenate”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceDecrease command. This field is read-only.">获取“VertSpaceDecrease”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceIncrease command. This field is read-only.">获取“VertSpaceIncrease”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceMakeEqual command. This field is read-only.">获取“VertSpaceMakeEqual”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewCode command. This field is read-only.">获取“ViewCode”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewGrid command. This field is read-only.">获取“ViewGrid”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary vsli:raw="Defines GUID identifiers that correspond to the standard set of tool windows that are available in the design environment.">定义 GUID 标识符，它们对应于在设计环境中提供的标准工具窗口集。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardToolWindows&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.StandardToolWindows" /> 类的新实例。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary vsli:raw="Gets the GUID for the object browser. This field is read-only.">获取对象浏览器的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary vsli:raw="Gets the GUID for the output window. This field is read-only.">获取输出窗口的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary vsli:raw="Gets the GUID for the solution explorer. This field is read-only.">获取解决方案资源管理器的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary vsli:raw="Gets the GUID for the Properties window. This field is read-only.">获取“属性”窗口的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary vsli:raw="Gets the GUID for the related links frame. This field is read-only.">获取相关链接框架的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary vsli:raw="Gets the GUID for the server explorer. This field is read-only.">获取服务器资源管理器的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary vsli:raw="Gets the GUID for the task list. This field is read-only.">获取任务列表的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary vsli:raw="Gets the GUID for the Toolbox. This field is read-only.">获取工具箱的 GUID。 此字段为只读。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary vsli:raw="Provides a type description provider for a specified type.">为指定类型提供类型说明提供程序。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.TypeDescriptionProviderService&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary vsli:raw="Gets a type description provider for the specified object.">获取指定对象的类型说明提供程序。</summary>
      <param name="instance" vsli:raw="The object to get a type description provider for.">要获取其类型说明提供程序的对象。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;instance&quot; /&gt;.">与 <paramref name="instance" /> 相对应的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary vsli:raw="Gets a type description provider for the specified type.">获取指定类型的类型说明提供程序。</summary>
      <param name="type" vsli:raw="The type to get a type description provider for.">要获取其类型说明提供程序的类型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;type&quot; /&gt;.">与 <paramref name="type" /> 相对应的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary vsli:raw="Defines identifiers for a set of technologies that designer hosts support.">定义设计器宿主所支持的技术集的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary vsli:raw="Specifies the default view technology support.&#xA;        &#xA;The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host. Hosting environments such as Visual Studio provide a way to plug in new view technology adapters. The default view object for the Windows Forms designer is a &lt;see cref=&quot;T:System.Windows.Forms.Control&quot; /&gt; instance.">指定默认的视图技术支持。
根设计器可以返回任何类型的对象，但该对象必须与用于宿主技术的适配器兼容。 诸如 Visual Studio 之类的托管环境提供了一种插入新视图技术适配器的方法。 Windows 窗体设计器的默认视图对象是 <see cref="T:System.Windows.Forms.Control" /> 实例。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary vsli:raw="Represents a mode in which the view object is passed directly to the development environment.&#xA;        &#xA;The view object must implement any interfaces the development environment requires. The Visual Studio development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through the Visual Studio VSI (Visual Studio Integration) program. The Visual Studio development environment provides support for this view technology. Support for this view technology is not necessarily available in all development environments.">表示将视图对象直接传递给开发环境的模式。
视图对象必须实现开发环境所需的任何接口。 Visual Studio 开发环境支持以下视图对象：ActiveX 控件、活动文档，或实现 IVsWindowPane 接口的对象，该接口通过 Visual Studio VSI（Visual Studio 集成）程序提供。 Visual Studio 开发环境为此视图技术提供支持。 并非所有开发环境都支持此视图技术。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary vsli:raw="Represents a mode in which a Windows Forms control object provides the display for the root designer. The designer host fills the development environment document window with the Windows Forms control.">表示由 Windows 窗体控件对象为根设计器提供显示的模式。 设计器宿主使用 Windows 窗体控件填充开发环境文档窗口。</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>指定用于为组件实现设计时服务的类。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>使用提供设计时服务的类型的名称初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类的新实例。</summary>
      <param name="designerTypeName">将类型（该类型为此特性所绑定到的组件提供设计时服务）的完全限定名称和此类型所驻留的程序集的名称串联后得到的结果。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>使用设计器类型和设计器的基类初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类的新实例。</summary>
      <param name="designerTypeName">将类型（该类型为此特性所绑定到的组件提供设计时服务）的完全限定名称和此类型所驻留的程序集的名称串联后得到的结果。</param>
      <param name="designerBaseTypeName">要与设计器类关联的基类的完全限定名。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>使用设计器类的名称和设计器的基类初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类的新实例。</summary>
      <param name="designerTypeName">将类型（该类型为此特性所绑定到的组件提供设计时服务）的完全限定名称和此类型所驻留的程序集的名称串联后得到的结果。</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" />，表示要与 <paramref name="designerTypeName" /> 关联的基类。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>使用提供设计时服务的类型初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类的新实例。</summary>
      <param name="designerType">
        <see cref="T:System.Type" />，表示为该特性所绑定到的组件提供设计时服务的类。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>使用设计器类型和设计器基类的类型初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类的新实例。</summary>
      <param name="designerType">
        <see cref="T:System.Type" />，表示为该特性所绑定到的组件提供设计时服务的类。</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" />，表示要与 <paramref name="designerType" /> 关联的基类。</param>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>获取此设计器的基类型名。</summary>
      <returns>此设计器的基类型名。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>获取与此设计器特性关联的设计器类型名。</summary>
      <returns>与此设计器特性关联的设计器类型名。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DesignerAttribute" />。</summary>
      <param name="obj">要进行值的相等性测试的对象。</param>
      <returns>如果给定对象的值等于当前对象的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.TypeId">
      <summary>获取此特性类型的唯一 ID。</summary>
      <returns>此特性类型的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary vsli:raw="&lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; marks a component's visibility. If &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Yes&quot; /&gt; is present, a visual designer can show this component on a designer.">
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> 标记组件的可见性。 如果存在 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" />，可视化设计器即可在设计器上显示该组件。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; set to the default value of &lt;see langword=&quot;false&quot; /&gt;.">新建一个默认值设置为 <see langword="false" /> 的 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" />。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; with the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property set to the given value in &lt;paramref name=&quot;visible&quot; /&gt;.">创建新的 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" />，并将 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> 属性设为 <paramref name="visible" /> 中的给定值。</summary>
      <param name="visible" vsli:raw="The value that the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property will be set against.">与 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> 属性的设置值相反的值。</param>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary vsli:raw="The default visibility which is &lt;see langword=&quot;Yes&quot; /&gt;.">默认可见性是 <see langword="Yes" />。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj" vsli:raw="An Object to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">要与此实例或 null 引用（ Visual Basic 中的 <see langword="Nothing" />）进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value.">获取一个值，该值指示此实例是否与 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 值相等。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此实例等于 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary vsli:raw="Marks a component as not visible in a visual designer.">将组件标记为在可视化设计器中不可见。</summary>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary vsli:raw="Gets or sets whether the component should be shown at design time.">获取或设置该组件是否应在设计时显示。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this component should be shown at design time, or &lt;see langword=&quot;false&quot; /&gt; if it shouldn't.">如果该组件应在设计时显示，则为 <see langword="true" />，如果不应在设计时显示，则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary vsli:raw="Marks a component as visible in a visual designer.">将组件标记为在可视化设计器中可见。</summary>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary vsli:raw="Provides a type converter to convert double-precision, floating point number objects to and from various other representations.">提供将双精度浮点数字对象与各种其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DoubleConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.DoubleConverter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>指定用于更改属性的编辑器。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>用默认的编辑器（即不使用任何编辑器）初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>用编辑器的类型名称和基类型名称初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 类的新实例。</summary>
      <param name="typeName">编辑器的完全限定的类型名。</param>
      <param name="baseTypeName">用作编辑器查找键的基类或接口的完全限定类型名。 此类必须是 <see cref="T:System.Drawing.Design.UITypeEditor" /> 或是从它派生的。</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>用类型名和基类型来初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 类的新实例。</summary>
      <param name="typeName">编辑器的完全限定的类型名。</param>
      <param name="baseType">用作编辑器查找键的基类或接口的 <see cref="T:System.Type" />。 此类必须是 <see cref="T:System.Drawing.Design.UITypeEditor" /> 或是从它派生的。</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>用类型和基类型初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 类的新实例。</summary>
      <param name="type">一个表示编辑器类型的 <see cref="T:System.Type" />。</param>
      <param name="baseType">用作编辑器查找键的基类或接口的 <see cref="T:System.Type" />。 此类必须是 <see cref="T:System.Drawing.Design.UITypeEditor" /> 或是从它派生的。</param>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>获取作为此编辑器查找键的基类或接口的名称。</summary>
      <returns>作为此编辑器查找键的基类或接口的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>获取 <see cref="P:System.Type.AssemblyQualifiedName" /> 格式的编辑器类的名称。</summary>
      <returns>
        <see cref="P:System.Type.AssemblyQualifiedName" /> 格式的编辑器类的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.EditorAttribute" />。</summary>
      <param name="obj">要进行值的相等性测试的对象。</param>
      <returns>如果给定对象的值等于当前对象的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.TypeId">
      <summary>获取此特性类型的唯一 ID。</summary>
      <returns>此特性类型的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Enum&quot; /&gt; objects to and from various other representations.">提供将 <see cref="T:System.Enum" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EnumConverter&quot; /&gt; class for the given type.">为给定类型初始化 <see cref="T:System.ComponentModel.EnumConverter" /> 类的新实例。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of enumeration to associate with this enumeration converter.">
        <see cref="T:System.Type" /> 表示与此枚举转换器关联的枚举类型。</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to an enumeration object using the specified context.">获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为枚举对象。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; that can be used to sort the values of the enumeration.">获取可用于对枚举的值进行排序的 <see cref="T:System.Collections.IComparer" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; for sorting the enumeration values.">一个用于对枚举值进行排序的 <see cref="T:System.Collections.IComparer" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to an enumeration object.">将指定的值对象转换为枚举对象。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">将给定的值对象转换为指定的目标类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">要将值转换成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the enumeration.">
        <paramref name="value" /> 不是枚举的有效值。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary vsli:raw="Specifies the type of the enumerator this converter is associated with.">指定与此转换器关联的枚举数的类型。</summary>
      <returns vsli:raw="The type of the enumerator this converter is associated with.">与此转换器关联的枚举数的类型。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">获取此验证器设计用于的数据类型的标准值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list using the specified context.">获取一个值，该值指示从 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的标准值的列表是不是使用指定上下文的独占列表。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">如果从 <see langword="true" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；如果还可能有其他值，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">获取一个值，该值指示此对象是否支持可使用指定上下文从列表中选取的标准值集。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">返回 <see langword="true" />，因为应当调用 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 来查找对象支持的一组公共值。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Gets a value indicating whether the given object value is valid for this type.">获取一个用于指示给定对象值是否对此类型有效的值。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test.">要测试的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定值对于该对象有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary vsli:raw="Gets or sets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">获取或设置一个 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，用来为枚举指定可能的值。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">一个 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，用来为枚举指定可能的值。</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary vsli:raw="Provides information about an event.">提供有关事件的信息。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">使用指定 <see cref="T:System.ComponentModel.EventDescriptor" /> 中的名称和特性初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类的新实例。</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the event and its attributes.">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，它包含该事件的名称及其特性。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">使用指定 <see cref="T:System.ComponentModel.EventDescriptor" /> 中的名称以及同时出现在 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.ComponentModel.MemberDescriptor" /> 数组中的特性初始化 <see cref="T:System.Attribute" /> 类的新实例。</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，它具有该成员的名称及其特性。</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes you want to add to this event description.">一个 <see cref="T:System.Attribute" /> 数组，具有要添加到此事件说明的特性。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the specified name and attribute array.">用指定的名称和特性数组初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The name of the event.">事件的名称。</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the event attributes.">包含事件特性的类型 <see cref="T:System.Attribute" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, binds the event to the component.">当在派生类中被重写时，将事件绑定到组件。</summary>
      <param name="component" vsli:raw="A component that provides events to the delegate.">向委托提供事件的组件。</param>
      <param name="value" vsli:raw="A delegate that represents the method that handles the event.">表示处理事件的方法的委托。</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of component this event is bound to.">当在派生类中被重写时，获取该事件绑定到的组件的类型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component the event is bound to.">一个 <see cref="T:System.Type" />，表示该事件绑定到的组件的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary vsli:raw="When overridden in a derived class, gets the type of delegate for the event.">当在派生类中被重写时，获取该事件的委托的类型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of delegate for the event.">一个 <see cref="T:System.Type" />，表示该事件的委托的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the event delegate is a multicast delegate.">当在派生类中被重写时，获取指示该事件委托是否是多路广播委托的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event delegate is multicast; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果事件委托是多路广播的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, unbinds the delegate from the component so that the delegate will no longer receive events from the component.">当在派生类中被重写时，解除委托与组件的绑定，使委托将不再从组件接收事件。</summary>
      <param name="component" vsli:raw="The component that the delegate is bound to.">委托要绑定到的组件。</param>
      <param name="value" vsli:raw="The delegate to unbind from the component.">要解除组件绑定的委托。</param>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">表示 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象集合。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">用给定的 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 对象的数组初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 类的新实例。</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">为该集合提供事件的类型 <see cref="T:System.ComponentModel.EventDescriptor" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects. The collection is optionally read-only.">用给定的 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 对象的数组初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 类的新实例。 该集合可以是只读的。</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">为该集合提供事件的类型 <see cref="T:System.ComponentModel.EventDescriptor" /> 的数组。</param>
      <param name="readOnly" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify a read-only collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定一个只读集合，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Adds an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the end of the collection.">将 <see cref="T:System.ComponentModel.EventDescriptor" /> 添加到集合的末尾。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to add to the collection.">要添加到集合的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns vsli:raw="The position of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 在集合中的位置。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary vsli:raw="Removes all objects from the collection.">从集合中删除所有对象。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">返回集合是否包含给定的 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">要在集合内查找的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the &lt;paramref name=&quot;value&quot; /&gt; parameter given; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该集合包含 <paramref name="value" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of event descriptors in the collection.">获取集合中事件说明符的数目。</summary>
      <returns vsli:raw="The number of event descriptors in the collection.">集合中事件说明符的数目。</returns>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection to use, rather than creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定要使用的空集合，而不是创建不具有任何项的新集合。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Gets the description of the event with the specified name in the collection.">获取集合中具有指定名称的事件的说明。</summary>
      <param name="name" vsli:raw="The name of the event to get from the collection.">要从集合中获取的事件的名称。</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the event; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果要忽略事件的大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">具有指定名称的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者如果该事件不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">获取此 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的枚举器。</summary>
      <returns vsli:raw="An enumerator that implements &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">实现 <see cref="T:System.Collections.IEnumerator" /> 的枚举数。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">返回给定 <see cref="T:System.ComponentModel.EventDescriptor" /> 的索引。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">要在集合内查找的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">集合中给定 <see cref="T:System.ComponentModel.EventDescriptor" /> 的索引。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Inserts an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the collection at a specified index.">将 <see cref="T:System.ComponentModel.EventDescriptor" /> 插入集合中指定的索引位置。</summary>
      <param name="index" vsli:raw="The index within the collection in which to insert the &lt;paramref name=&quot;value&quot; /&gt; parameter.">集合中插入 <paramref name="value" /> 参数的索引位置。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to insert into the collection.">要插入到集合的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">使用指定的 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 将此 <see cref="T:System.Collections.IComparer" /> 的成员排序。</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">用来将此集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象排序的比较器。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">将此 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成员排序。 首先应用指定的顺序，然后应用此集合的默认排序，后者通常为字母顺序。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">字符串的数组，描述此集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象的排序顺序。</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the event with the specified index number.">获取或设置具有指定索引号的事件。</summary>
      <param name="index" vsli:raw="The zero-based index number of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">要获取或设置的 <see cref="T:System.ComponentModel.EventDescriptor" /> 的从零开始的索引号。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified index number.">具有指定索引号的 <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)&quot; /&gt;.">
        <paramref name="index" /> 不是 <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" /> 的有效索引。</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the event with the specified name.">获取或设置具有指定名称的事件。</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">要获取或设置的 <see cref="T:System.ComponentModel.EventDescriptor" /> 的名称。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">具有指定名称的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者如果该事件不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; from the collection.">从集合中移除指定的 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove from the collection.">要从该集合中移除的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; at the specified index from the collection.">从集合中移除指定索引位置的 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove.">要移除的 <see cref="T:System.ComponentModel.EventDescriptor" /> 的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the default sort for this collection, which is usually alphabetical.">使用集合的默认排序（通常为字母顺序）对此 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成员进行排序。</summary>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">使用指定的 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 将此 <see cref="T:System.Collections.IComparer" /> 的成员排序。</summary>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">一个 <see cref="T:System.Collections.IComparer" />，用来对此集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象排序。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order.">按照指定的排序顺序对此 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成员进行排序。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">字符串的数组，描述集合中 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象的排序顺序。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order and an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">按照指定的排序顺序和 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 对此 <see cref="T:System.Collections.IComparer" /> 的成员进行排序。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">字符串的数组，描述集合中 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象的排序顺序。</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">一个 <see cref="T:System.Collections.IComparer" />，用来对此集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象排序。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">将该集合的元素复制到 <see cref="T:System.Array" />（从特定的 <see cref="T:System.Array" /> 索引开始）。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">一维 <see cref="T:System.Array" />，用作从集合复制的元素的目标数组。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">获取集合中包含的元素数。</summary>
      <returns vsli:raw="The number of elements contained in the collection.">集合中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized.">获取一个值，它指示对集合的访问是否同步。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已同步对集合的访问，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">获取可用于同步对集合的访问的对象。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">可用于同步集合访问的对象。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">返回循环访问集合的枚举数。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">向集合中添加一项。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the collection.">要添加到集合中的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="The position into which the new element was inserted.">新元素的插入位置。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all the items from the collection.">从集合中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">确定集合中是否包含特定值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">要在集合中查找的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在集合中找到 <see cref="T:System.Object" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">确定集合中特定项的索引。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">要在集合中查找的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the collection at the specified index.">将一个项插入到集合中指定的索引处。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">要插入到集合中的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该集合具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">获取一个值，该值指示集合是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">获取或设置指定索引处的元素。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">要获取或设置的元素的从零开始的索引。</param>
      <returns vsli:raw="The element at the specified index.">指定索引处的元素。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">
        <paramref name="index" /> 小于 0。
或
<paramref name="index" /> 等于或大于 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">从集合中移除特定对象的第一个匹配项。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">要从该集合中移除的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">移除指定索引处的项。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary vsli:raw="Provides a type converter to convert expandable objects to and from various other representations.">提供在可扩展对象与其他各种表示形式之间实现转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExpandableObjectConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ExpandableObjectConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of object specified by the value parameter.">获取由值参数指定的对象类型的属性集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of object to get the properties for.">一个 <see cref="T:System.Object" />，它指定要获取其属性的对象类型。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">一个将用作筛选器的 <see cref="T:System.Attribute" /> 类型的数组。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">具有为此组件公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">获取一个值，该值指示此对象是否使用指定的上下文支持属性。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">由于应调用 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 来查找此对象的属性，因此为 <see langword="true" />。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary vsli:raw="Specifies a property that is offered by an extender provider. This class cannot be inherited.">指定由扩展程序提供程序提供的属性。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExtenderProvidedPropertyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">要与此实例或 null 引用 （Visual Basic 中的 <see langword="Nothing" />）进行比较的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary vsli:raw="Gets the property that is being provided.">获取正被提供的属性。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; encapsulating the property that is being provided.">封装正被提供的属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary vsli:raw="Provides an indication whether the value of this instance is the default value for the derived class.">指示此实例的值是否是派生类的默认值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此实例是该类的默认属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary vsli:raw="Gets the extender provider that is providing the property.">获取正在提供属性的扩展程序提供程序。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that is providing the property.">正在提供属性的 <see cref="T:System.ComponentModel.IExtenderProvider" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary vsli:raw="Gets the type of object that can receive the property.">获取可接收属性的对象的类型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; describing the type of object that can receive the property.">一个 <see cref="T:System.Type" />，它描述可接收属性的对象的类型。</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Guid&quot; /&gt; objects to and from various other representations.">提供将 <see cref="T:System.Guid" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.GuidConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.GuidConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a GUID object using the context.">获取一个值，该值指示此转换器是否可使用上下文将给定源类型的对象转换为 GUID 对象。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a GUID object.">将给定对象转换为 GUID 对象。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">将给定对象转换为其他类型。</summary>
      <param name="context" vsli:raw="A formatter context.">格式化程序上下文。</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" /> 将要转换到的区域性。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">对象要转换为的类型。</param>
      <returns vsli:raw="The converted object.">被转换的对象。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary vsli:raw="Provides data for events that can be handled completely in an event handler.">为可在事件处理程序中完整处理的事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with a default &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property value of &lt;see langword=&quot;false&quot; /&gt;.">用 <see cref="T:System.ComponentModel.HandledEventArgs" /> 属性的默认值 <see langword="false" /> 初始化 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with the specified default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">用 <see cref="T:System.ComponentModel.HandledEventArgs" /> 属性的指定默认值初始化 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 类的新实例。</summary>
      <param name="defaultHandledValue" vsli:raw="The default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">
        <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 属性的默认值。</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary vsli:raw="Gets or sets a value that indicates whether the event handler has completely handled the event or whether the system should continue its own processing.">获取或设置一个值，该值指示事件处理程序是否已完整处理事件，或者系统是否应该继续本身的处理。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been completely handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果事件已完整地被处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary vsli:raw="Represents a method that can handle events which may or may not require further processing after the event handler has returned.">表示可以处理事件的方法，这些事件在事件处理程序返回后可能需要或不需要进行进一步处理。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; that contains the event data.">包含事件数据的 <see cref="T:System.ComponentModel.HandledEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary vsli:raw="Provides the features required to support both complex and simple scenarios when binding to a data source.">提供在绑定到数据源时支持复杂方案和简单方案所需的功能。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the indexes used for searching.">将 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加到用于搜索的索引。</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the indexes used for searching.">将 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加到用于搜索的索引。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary vsli:raw="Adds a new item to the list.">将新项添加到列表。</summary>
      <returns vsli:raw="The item added to the list.">添加到列表的项。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowNew&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> 为 <see langword="false" />。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary vsli:raw="Gets whether you can update items in the list.">获取是否可更新列表中的项。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can update the items in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以更新列表中的项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary vsli:raw="Gets whether you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">获取是否可以使用 <see cref="M:System.ComponentModel.IBindingList.AddNew" /> 向列表中添加项。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以使用 <see cref="M:System.ComponentModel.IBindingList.AddNew" /> 向列表中添加项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary vsli:raw="Gets whether you can remove items from the list, using &lt;see cref=&quot;M:System.Collections.IList.Remove(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.Collections.IList.RemoveAt(System.Int32)&quot; /&gt;.">获取是否可以使用 <see cref="M:System.Collections.IList.Remove(System.Object)" /> 或 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" /> 从列表中移除项。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以从列表中移除项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;.">根据 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" /> 对列表进行排序。</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">以其为根据进行排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 <see langword="false" />。</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Returns the index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">返回具有给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的行的索引。</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">要对其进行搜索的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;property&quot; /&gt; parameter to search for.">要搜索的 <paramref name="property" /> 参数的值。</param>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">具有给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的行的索引。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> 为 <see langword="false" />。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary vsli:raw="Gets whether the items in the list are sorted.">获取是否对列表中的项进行排序。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已调用 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 并且未调用 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 <see langword="false" />。</exception>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary vsli:raw="Occurs when the list changes or an item in the list changes.">当列表更改或列表中的项更改时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the indexes used for searching.">将 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 从用于搜索的索引中移除。</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">要从用于搜索的索引中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary vsli:raw="Removes any sort applied using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">使用 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 移除任何已应用的排序。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 <see langword="false" />。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary vsli:raw="Gets the direction of the sort.">获取排序的方向。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 <see langword="false" />。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">获取正在用于排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">正在用于排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 <see langword="false" />。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary vsli:raw="Gets whether a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or an item in the list changes.">获取当列表更改或列表中的项更改时是否引发 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当列表更改或项更改时引发了 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary vsli:raw="Gets whether the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method.">获取列表是否支持使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法进行搜索。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果列表支持使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法进行搜索，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary vsli:raw="Gets whether the list supports sorting.">获取列表是否支持排序。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果列表支持排序，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary vsli:raw="Extends the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; interface by providing advanced sorting and filtering capabilities.">通过提供高级排序和筛选功能来扩展 <see cref="T:System.ComponentModel.IBindingList" /> 接口。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary vsli:raw="Sorts the data source based on the given &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">根据给定的 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 对数据源进行排序。</summary>
      <param name="sorts" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; containing the sorts to apply to the data source.">包含要应用于数据源的顺序的 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />。</param>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary vsli:raw="Gets or sets the filter to be used to exclude items from the collection of items returned by the data source.">获取或设置筛选器，以用于从数据源返回的项的集合中排除项。</summary>
      <returns vsli:raw="The string used to filter items out in the item collection returned by the data source.">用于在数据源返回的项集合中筛选掉项的字符串。</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary vsli:raw="Removes the current filter applied to the data source.">移除应用于数据源的当前筛选器。</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary vsli:raw="Gets the collection of sort descriptions currently applied to the data source.">获取当前应用于数据源的排序说明的集合。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; currently applied to the data source.">当前应用于数据源的 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary vsli:raw="Gets a value indicating whether the data source supports advanced sorting.">获取一个值，指示数据源是否支持高级排序。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports advanced sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果数据源支持高级排序，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary vsli:raw="Gets a value indicating whether the data source supports filtering.">获取一个值，该值指示数据源是否支持筛选。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports filtering; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果数据源支持筛选，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary vsli:raw="Adds transactional capability when adding a new item to a collection.">在向集合添加新项时添加事务性功能。</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item from the collection.">丢弃集合中挂起的新项。</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">先前添加到集合的项的索引。</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">向集合提交挂起的新项。</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">先前添加到集合的项的索引。</param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary vsli:raw="Provides a top-level mapping layer between a COM object and a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">提供 COM 对象和 <see cref="T:System.ComponentModel.TypeDescriptor" /> 之间的顶级映射层。</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary vsli:raw="Gets the attributes for the specified component.">获取指定组件的特性。</summary>
      <param name="component" vsli:raw="The component to get attributes for.">要获取其特性的组件。</param>
      <returns vsli:raw="A collection of attributes for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> 的特性的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary vsli:raw="Gets the class name for the specified component.">获取指定组件的类名称。</summary>
      <param name="component" vsli:raw="The component to get the class name for.">要获取其类名称的组件。</param>
      <returns vsli:raw="The name of the class that corresponds with &lt;paramref name=&quot;component&quot; /&gt;.">与 <paramref name="component" /> 对应的类的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary vsli:raw="Gets the type converter for the specified component.">获取指定组件的类型转换器。</summary>
      <param name="component" vsli:raw="The component to get the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for.">要获取其 <see cref="T:System.ComponentModel.TypeConverter" /> 的组件。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> 的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Gets the default event for the specified component.">获取指定组件的默认事件。</summary>
      <param name="component" vsli:raw="The component to get the default event for.">要获取其默认事件的组件。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default event.">一个 <see cref="T:System.ComponentModel.EventDescriptor" />，表示 <paramref name="component" /> 的默认事件。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Gets the default property for the specified component.">获取指定组件的默认属性。</summary>
      <param name="component" vsli:raw="The component to get the default property for.">要获取其默认属性的组件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default property.">一个 <see cref="T:System.ComponentModel.PropertyDescriptor" />，表示 <paramref name="component" /> 的默认属性。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets the editor for the specified component.">获取指定组件的编辑器。</summary>
      <param name="component" vsli:raw="The component to get the editor for.">要为其获取编辑器的组件。</param>
      <param name="baseEditorType" vsli:raw="The base type of the editor for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> 的编辑器的基类型。</param>
      <returns vsli:raw="The editor for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> 的编辑器。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary vsli:raw="Gets the events for the specified component.">获取指定组件的事件。</summary>
      <param name="component" vsli:raw="The component to get events for.">要获取其事件的组件。</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> 的事件描述符的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the events with the specified attributes for the specified component.">获取指定组件的具有指定特性的事件。</summary>
      <param name="component" vsli:raw="The component to get events for.">要获取其事件的组件。</param>
      <param name="attributes" vsli:raw="The attributes used to filter events.">用于筛选事件的特性。</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> 的事件描述符的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">获取指定组件的名称。</summary>
      <param name="component" vsli:raw="The component to get the name of.">要获取其名称的组件。</param>
      <returns vsli:raw="The name of &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> 的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the properties with the specified attributes for the specified component.">获取指定组件的具有指定特性的属性。</summary>
      <param name="component" vsli:raw="The component to get events for.">要获取其事件的组件。</param>
      <param name="attributes" vsli:raw="The attributes used to filter properties.">用于筛选属性的特性。</param>
      <returns vsli:raw="A collection of property descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> 的属性描述符的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified dispatch identifier.">获取具有指定调度标识符的属性的值。</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">属性所属的对象。</param>
      <param name="dispid" vsli:raw="The dispatch identifier.">调度标识符。</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">一个通过引用传递的 <see cref="T:System.Boolean" />，表示是否检索了属性。</param>
      <returns vsli:raw="The value of the property that has the specified dispatch identifier.">具有指定调度标识符的属性的值。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified name.">获取具有指定名称的属性的值。</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">属性所属的对象。</param>
      <param name="propertyName" vsli:raw="The name of the property.">属性的名称。</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">一个通过引用传递的 <see cref="T:System.Boolean" />，表示是否检索了属性。</param>
      <returns vsli:raw="The value of the property that has the specified name.">具有指定名称的属性的值。</returns>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary vsli:raw="Provides an interface that supplies dynamic custom type information for an object.">提供为对象提供动态自定义类型信息的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for this instance of a component.">返回此组件实例的自定义属性的集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for this object.">包含此对象的属性的 <see cref="T:System.ComponentModel.AttributeCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the class name of this instance of a component.">返回此组件实例的类名称。</summary>
      <returns vsli:raw="The class name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the class does not have a name.">对象的类名称，如果该类没有名称，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of this instance of a component.">返回某个组件的此实例的名称。</summary>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object does not have a name.">对象的名称，如果该对象不具有名称，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for this instance of a component.">返回此组件实例的类型转换器。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is the converter for this object, or &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for this object.">作为此对象转换器的 <see cref="T:System.ComponentModel.TypeConverter" />，或为 <see langword="null" />（如果此对象不存在任何 <see cref="T:System.ComponentModel.TypeConverter" />）。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the default event for this instance of a component.">返回某个组件的此实例的默认事件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents the default event for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have events.">表示此对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" /> ；如果该对象没有事件，则为 <see langword="null" /> 。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the default property for this instance of a component.">返回此组件实例的默认属性。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the default property for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have properties.">表示此对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果该对象没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type for this instance of a component.">返回此组件实例的指定类型的编辑器。</summary>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the editor for this object.">表示该对象的编辑器的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type that is the editor for this object, or &lt;see langword=&quot;null&quot; /&gt; if the editor cannot be found.">表示该对象编辑器的指定类型的 <see cref="T:System.Object" />；如果无法找到编辑器，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns the events for this instance of a component.">返回此组件实例的事件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the events for this component instance.">一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，表示此组件实例的事件。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns the events for this instance of a component using the specified attribute array as a filter.">使用指定的属性数组作为筛选器，返回此组件实例的事件。</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the filtered events for this component instance.">表示此组件实例的已筛选事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns the properties for this instance of a component.">返回此组件实例的属性。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties for this component instance.">表示此组件实例的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns the properties for this instance of a component using the attribute array as a filter.">使用特性数组作为筛选器，返回此组件实例的属性。</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the filtered properties for this component instance.">一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它表示此组件实例的已筛选属性。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">返回一个对象，该对象包含指定的属性描述符所描述的属性。</summary>
      <param name="pd" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the property whose owner is to be found.">一个 <see cref="T:System.ComponentModel.PropertyDescriptor" />，表示要查找其所有者的属性。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the owner of the specified property.">一个 <see cref="T:System.Object" />，表示指定属性的所有者。</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary vsli:raw="Provides the functionality to offer custom error information that a user interface can bind to.">提供功能，该功能提供用户界面可以绑定的自定义错误信息。</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary vsli:raw="Gets an error message indicating what is wrong with this object.">获取指示对象何处出错的错误信息。</summary>
      <returns vsli:raw="An error message indicating what is wrong with this object. The default is an empty string (&quot;&quot;).">指示对象何处出错的错误信息。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary vsli:raw="Gets the error message for the property with the given name.">获取具有给定名称的属性的错误信息。</summary>
      <param name="columnName" vsli:raw="The name of the property whose error message to get.">要获取其错误信息的属性的名称。</param>
      <returns vsli:raw="The error message for the property. The default is an empty string (&quot;&quot;).">该属性的错误信息。 默认值为空字符串("")。</returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary vsli:raw="Defines the interface for extending properties to other components in a container.">定义将属性扩展到容器中的其他组件的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary vsli:raw="Specifies whether this object can provide its extender properties to the specified object.">指定此对象是否可以将其扩展程序属性提供给指定的对象。</summary>
      <param name="extendee" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to receive the extender properties.">要接收扩展程序属性的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can provide extender properties to the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此对象可以扩展程序属性提供给指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary vsli:raw="Provides an interface to facilitate the retrieval of the builder's name and to display the builder.">提供便于检索生成器的名称并显示该生成器的界面。</summary>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary vsli:raw="Gets a localized name.">获取本地化的名称。</summary>
      <returns vsli:raw="A localized name.">本地化的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary vsli:raw="Shows the builder.">显示生成器。</summary>
      <param name="language" vsli:raw="The language service that is calling the builder.">正在调用生成器的语言服务。</param>
      <param name="value" vsli:raw="The expression being edited.">正在被编辑的表达式。</param>
      <param name="newValue" vsli:raw="The new value.">新值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value should be replaced with &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt; (if the user cancels, for example).">如果应将该值替换为 <paramref name="newValue" />，则为 <see langword="true" />；否则为 <see langword="false" />（例如，如果用户取消）。</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary vsli:raw="Provides functionality to an object to return a list that can be bound to a data source.">向对象提供返回可以绑定到数据源列表的功能。</summary>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary vsli:raw="Gets a value indicating whether the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects.">获取表示集合是否是 <see cref="T:System.Collections.IList" /> 对象集合的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合是 <see cref="T:System.Collections.IList" /> 对象集合，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from an object that does not implement an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; itself.">从不实现 <see cref="T:System.Collections.IList" /> 本身的对象返回可以绑定到数据源的 <see cref="T:System.Collections.IList" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from the object.">对象中可以绑定到数据源的 <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary vsli:raw="Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.">提供嵌套容器的功能，嵌套容器逻辑上可包含零个或多个其他组件，且这类容器由父组件拥有。</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for the nested container.">获取嵌套容器的所属组件。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns the nested container.">拥有该嵌套容器的 <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary vsli:raw="Provides the ability to retrieve the full nested name of a component.">提供检索组件的完全嵌套名称的能力。</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary vsli:raw="Gets the full name of the component in this site.">获取此站点内的组件的全名。</summary>
      <returns vsli:raw="The full name of the component in this site.">此站点内的组件的全名。</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary vsli:raw="Indicates whether the component associated with this attribute has been inherited from a base class. This class cannot be inherited.">指示是否已从基类继承与此特性关联的组件。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class with the specified inheritance level.">使用指定的继承级别初始化 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 类的新实例。</summary>
      <param name="inheritanceLevel" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; that indicates the level of inheritance to set this attribute to.">一个 <see cref="T:System.ComponentModel.InheritanceLevel" />，指示要将此特性设置成的继承级别。</param>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary vsli:raw="Specifies that the default value for &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; is &lt;see cref=&quot;F:System.ComponentModel.InheritanceAttribute.NotInherited&quot; /&gt;. This field is read-only.">指定 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的默认值为 <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" />。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary vsli:raw="Override to test for equality.">重写以测试等同性。</summary>
      <param name="value" vsli:raw="The object to test.">要测试的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is the same; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果对象相同，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">返回该对象的哈希代码。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">当前 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary vsli:raw="Gets or sets the current inheritance level stored in this attribute.">获取或设置存储在此特性中的当前继承级别。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; stored in this attribute.">存储在此特性中的 <see cref="T:System.ComponentModel.InheritanceLevel" />。</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary vsli:raw="Specifies that the component is inherited. This field is read-only.">指定该组件会被继承。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary vsli:raw="Specifies that the component is inherited and is read-only. This field is read-only.">指定该组件会被继承并且是只读的。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">获取一个值，该值指示该特性的当前值是否为该特性的默认值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该特性的当前值是默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary vsli:raw="Specifies that the component is not inherited. This field is read-only.">指定组件不被继承。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary vsli:raw="Converts this attribute to a string.">将此特性转换为一个字符串。</summary>
      <returns vsli:raw="A string that represents this &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">表示此 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的字符串。</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary vsli:raw="Defines identifiers for types of inheritance levels.">定义继承级别类型的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary vsli:raw="The object is inherited.">该对象会被继承。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary vsli:raw="The object is inherited, but has read-only access.">该对象会被继承，但具有只读访问权限。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary vsli:raw="The object is not inherited.">该对象不被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary vsli:raw="Specifies the installer for a type that installs components.">为安装组件的类型指定安装程序。</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class with the name of the component's installer type.">用组件的安装程序的类型名称初始化 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 类的新实例。</summary>
      <param name="typeName" vsli:raw="The name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">表示此特性绑定到的组件安装程序的 <see cref="T:System.Type" /> 名称。 此类必须实现 <see cref="T:System.ComponentModel.Design.IDesigner" />。</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class, when given a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for a component.">当给定表示组件安装程序的 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 时，初始化 <see cref="T:System.Type" /> 类的新实例。</summary>
      <param name="installerType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">
        <see cref="T:System.Type" />，表示此特性绑定到的组件的安装程序。 此类必须实现 <see cref="T:System.ComponentModel.Design.IDesigner" />。</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.InstallerTypeAttribute" />。</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">要进行值的相等性测试的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果给定对象的值等于当前对象的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">返回该对象的哈希代码。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">当前 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary vsli:raw="Gets the type of installer associated with this attribute.">获取与此特性关联的安装程序类型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of installer associated with this attribute, or &lt;see langword=&quot;null&quot; /&gt; if an installer does not exist.">
        <see cref="T:System.Type" />，表示与此特性关联的安装程序类型；如果安装程序不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary vsli:raw="Creates an instance of a particular type of property from a drop-down box within the &lt;see cref=&quot;T:System.Windows.Forms.PropertyGrid&quot; /&gt;.">从 <see cref="T:System.Windows.Forms.PropertyGrid" /> 中的下拉框中创建特定类型属性的实例。</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstanceCreationEditor&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.InstanceCreationEditor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="When overridden in a derived class, returns an instance of the specified type.">在派生类中重写时，返回指定类型的实例。</summary>
      <param name="context" vsli:raw="The context information.">上下文信息。</param>
      <param name="instanceType" vsli:raw="The specified type.">指定的类型。</param>
      <returns vsli:raw="An instance of the specified type or &lt;see langword=&quot;null&quot; /&gt;.">指定类型的实例或为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary vsli:raw="Gets the specified text.">获取指定的文本。</summary>
      <returns vsli:raw="The specified text.">指定的文本。</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit signed integer objects to and from other representations.">提供将 16 位有符号整数对象与其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int16Converter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Int16Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit signed integer objects to and from other representations.">提供将 32 位有符号整数对象与其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int32Converter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Int32Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit signed integer objects to and from various other representations.">提供将 64 位有符号整数对象与各种其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int64Converter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Int64Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.InvalidAsynchronousStateException">
      <summary>当应执行某个操作的线程不再存在或者没有消息循环时，将引发此异常。</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用给定的 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="info">要用于反序列化的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">用于反序列化的目标。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)">
      <summary>使用指定的详细说明初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 类的新实例。</summary>
      <param name="message">该错误的详细说明。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)">
      <summary>使用指定的详细说明和指定的异常初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 类的新实例。</summary>
      <param name="message">该错误的详细说明。</param>
      <param name="innerException">对导致此异常的内部异常的引用。</param>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary vsli:raw="Indicates whether a class converts property change events to &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">指示类是否将属性更改事件转换为 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">获取一个值，该值指示 <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 对象是否引发 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events when one of its property values changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 对象在它的一个属性值发生更改时引发 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary vsli:raw="Allows coordination of initialization for a component and its dependent properties.">允许协调组件及其依赖属性的初始化。</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary vsli:raw="Occurs when initialization of the component is completed.">组件初始化完成时出现。</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary vsli:raw="Gets a value indicating whether the component is initialized.">获取一个值，该值指示是否初始化组件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the component has completed initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，说明组件已完成初始化；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary vsli:raw="Provides contextual information about a component, such as its container and property descriptor.">提供有关组件的上下文信息，如其容器和属性描述符。</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary vsli:raw="Gets the container representing this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; request.">获取表示此 <see cref="T:System.ComponentModel.TypeDescriptor" /> 请求的容器。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with the set of objects for this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no container or if the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; does not use outside objects.">包含此 <see cref="T:System.ComponentModel.IContainer" /> 的对象集的 <see cref="T:System.ComponentModel.TypeDescriptor" />；否则，如果不存在容器，或者如果 <see cref="T:System.ComponentModel.TypeDescriptor" /> 不使用外部对象，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary vsli:raw="Gets the object that is connected with this type descriptor request.">获取与此类型说明符请求相连接的对象。</summary>
      <returns vsli:raw="The object that invokes the method on the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no object responsible for the call.">调用 <see cref="T:System.ComponentModel.TypeDescriptor" /> 的方法的对象；否则，如果不存在负责调用的对象，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">引发 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">引发 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can be changed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该对象可以更改，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is associated with the given context item.">获取与给定上下文项相关联的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the given context item; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; responsible for the call.">描述给定上下文项的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；否则，如果不存在负责调用的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary vsli:raw="Provides functionality to discover the schema for a bindable list, where the properties available for binding differ from the public properties of the object to bind to.">提供发现可绑定列表架构的功能，其中可用于绑定的属性不同于要绑定到的对象的公共属性。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，其表示每一项上用于绑定数据的属性。</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to find in the collection as bindable. This can be &lt;see langword=&quot;null&quot; /&gt;.">要在组合中查找的可绑定的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的数组。 它可以是 <see langword="null" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，其表示每一项上用于绑定数据的属性。</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the name of the list.">返回列表名称。</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects, for which the list name is returned. This can be &lt;see langword=&quot;null&quot; /&gt;.">为其返回列表名称的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的数组。 它可以是 <see langword="null" />。</param>
      <returns vsli:raw="The name of the list.">列表名称。</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for all licenses. A license is granted to a specific instance of a component.">为所有许可证提供 <see langword="abstract" /> 基类。 对组件的特定实例授予许可证。</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.License" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary vsli:raw="When overridden in a derived class, disposes of the resources used by the license.">当在派生类中被重写时，释放该许可证使用的资源。</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary vsli:raw="When overridden in a derived class, gets the license key granted to this component.">当在派生类中被重写时，获取授予该组件的许可证密钥。</summary>
      <returns vsli:raw="A license key granted to this component.">授予该组件的许可证密钥。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary vsli:raw="Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.">指定何时可使用授权的对象，并且提供一种方法，用以获取为支持在其域内运行的许可证所需要的附加服务。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.LicenseContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.">当在派生类中被重写时，从指定的资源程序集中为指定类型返回已保存的许可证密钥。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component.">表示组件类型的 <see cref="T:System.Type" />。</param>
      <param name="resourceAssembly" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; with the license key.">带有许可证密钥的 <see cref="T:System.Reflection.Assembly" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type. This method returns &lt;see langword=&quot;null&quot; /&gt; unless you override it.">指定类型的 <see cref="P:System.ComponentModel.License.LicenseKey" />。 该方法返回 <see langword="null" />，除非您将其重写。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service, if it is available.">获取请求的服务（如果该服务可用的话）。</summary>
      <param name="type" vsli:raw="The type of service to retrieve.">要检索的服务类型。</param>
      <returns vsli:raw="An instance of the service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be found.">该服务的实例；或者如果找不到该服务，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="When overridden in a derived class, sets a license key for the specified type.">当在派生类中被重写时，为指定的类型设置许可证密钥。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component associated with the license key.">一个 <see cref="T:System.Type" />，表示与该许可证密钥相关联的组件。</param>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to save for the type of component.">为该类型组件保存的 <see cref="P:System.ComponentModel.License.LicenseKey" />。</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary vsli:raw="When overridden in a derived class, gets a value that specifies when you can use a license.">当在派生类中被重写时，获取一个指定何时可使用许可证的值。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values that specifies when you can use a license. The default is &lt;see cref=&quot;F:System.ComponentModel.LicenseUsageMode.Runtime&quot; /&gt;.">
        <see cref="T:System.ComponentModel.LicenseUsageMode" /> 值之一，指定您何时可以使用许可证。 默认值为 <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary vsli:raw="Represents the exception thrown when a component cannot be granted a license.">表示当组件不能被授予许可证时引发的异常。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class with the given &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">使用给定的 <see cref="T:System.ComponentModel.LicenseException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">要用于反序列化的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">用于反序列化的目标。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type of component that was denied a license.">为拒绝向其授予许可证的组件的类型初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的新实例。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">一个 <see cref="T:System.Type" />，表示未被授予许可证的组件的类型。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license.">为拒绝向其授予许可证的组件的类型和实例初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的新实例。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">一个 <see cref="T:System.Type" />，表示未被授予许可证的组件的类型。</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">未被授予许可证的组件的实例。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display.">为拒绝向其授予许可证的组件的类型和实例以及要显示的消息初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的新实例。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">一个 <see cref="T:System.Type" />，表示未被授予许可证的组件的类型。</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">未被授予许可证的组件的实例。</param>
      <param name="message" vsli:raw="The exception message to display.">要显示的异常消息。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display and the original exception thrown.">为拒绝向其授予许可证的组件的类型和实例以及要显示的消息和最初引发的异常初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的新实例。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">一个 <see cref="T:System.Type" />，表示未被授予许可证的组件的类型。</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">未被授予许可证的组件的实例。</param>
      <param name="message" vsli:raw="The exception message to display.">要显示的异常消息。</param>
      <param name="innerException" vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the original exception.">一个 <see cref="T:System.Exception" />，表示最初的异常。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">使用关于异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">要用于反序列化的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">用于反序列化的目标。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary vsli:raw="Gets the type of the component that was not granted a license.">获取未被授予许可证的组件的类型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">一个 <see cref="T:System.Type" />，表示未被授予许可证的组件的类型。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary vsli:raw="Provides properties and methods to add a license to a component and to manage a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. This class cannot be inherited.">提供属性和方法，用以将许可证添加到组件和管理 <see cref="T:System.ComponentModel.LicenseProvider" />。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary vsli:raw="Creates an instance of the specified type, given a context in which you can use the licensed instance.">根据可在其中使用已授权实例的上下文，创建指定类型的实例。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">一个 <see cref="T:System.Type" />，表示要创建的类型。</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">一个 <see cref="T:System.ComponentModel.LicenseContext" />，指定何时可以使用已授权的实例。</param>
      <returns vsli:raw="An instance of the specified type.">指定类型的实例。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary vsli:raw="Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.">根据可在其中使用已授权实例的上下文，用指定的参数创建指定类型的实例。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">一个 <see cref="T:System.Type" />，表示要创建的类型。</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">一个 <see cref="T:System.ComponentModel.LicenseContext" />，指定何时可以使用已授权的实例。</param>
      <param name="args" vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the arguments for the type.">表示该类型参数的类型 <see cref="T:System.Object" /> 的数组。</param>
      <returns vsli:raw="An instance of the specified type with the given array of arguments.">具有给定参数数组的指定类型的实例。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary vsli:raw="Gets or sets the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt;, which specifies when you can use the licensed object.">获取或设置当前的 <see cref="T:System.ComponentModel.LicenseContext" />，它指定您何时可以使用已授权的对象。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed object.">一个 <see cref="T:System.ComponentModel.LicenseContext" />，指定何时可以使用已授权的对象。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property is currently locked and cannot be changed.">
        <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 属性当前被锁定，因而无法更改它。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary vsli:raw="Returns whether the given type has a valid license.">返回给定的类型是否具有有效许可证。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to find a valid license for.">为其查找有效许可证的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given type is licensed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果给定的类型已授权，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified type.">确定是否可以为指定类型授予有效的许可证。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">一个 <see cref="T:System.Type" />，表示请求 <see cref="T:System.ComponentModel.License" /> 的对象的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid license can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以授予有效许可证，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">确定是否可以为该类型的指定实例授予有效的许可证。 该方法创建有效的 <see cref="T:System.ComponentModel.License" />。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">一个 <see cref="T:System.Type" />，表示请求许可证的对象的类型。</param>
      <param name="instance" vsli:raw="An object of the specified type or a type derived from the specified type.">指定类型的对象或从指定类型派生的类型的对象。</param>
      <param name="license" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; that is a valid license, or &lt;see langword=&quot;null&quot; /&gt; if a valid license cannot be granted.">一个作为有效许可证的 <see cref="T:System.ComponentModel.License" />；如果无法颁发有效许可证，则为 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以颁发有效的 <see cref="T:System.ComponentModel.License" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary vsli:raw="Prevents changes being made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">防止对给定对象当前的 <see cref="T:System.ComponentModel.LicenseContext" /> 进行更改。</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to lock.">要锁定其当前上下文的对象。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The context is already locked.">上下文已被锁定。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary vsli:raw="Allows changes to be made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">允许对给定对象当前的 <see cref="T:System.ComponentModel.LicenseContext" /> 进行更改。</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to unlock.">要取消锁定其当前上下文的对象。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;contextUser&quot; /&gt; represents a different user than the one specified in a previous call to &lt;see cref=&quot;M:System.ComponentModel.LicenseManager.LockContext(System.Object)&quot; /&gt;.">
        <paramref name="contextUser" /> 不表示在前面对 <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" /> 的调用中指定的用户，而表示另外一个用户。</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; which specifies when you can use the licensed object for the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt;.">获取 <see cref="T:System.ComponentModel.LicenseUsageMode" />，它指定何时可以使用 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 的已授权对象。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values, as specified in the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property.">
        <see cref="T:System.ComponentModel.LicenseUsageMode" /> 值之一，这些值是在 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 属性中指定的。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary vsli:raw="Determines whether a license can be granted for the specified type.">确定是否可以为指定类型授予许可证。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">一个 <see cref="T:System.Type" />，表示请求许可证的对象的类型。</param>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">不能授予 <see cref="T:System.ComponentModel.License" />。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary vsli:raw="Determines whether a license can be granted for the instance of the specified type.">确定是否可以为指定类型的实例授予许可证。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">一个 <see cref="T:System.Type" />，表示请求许可证的对象的类型。</param>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type or a type derived from the specified type.">指定类型的，或从指定类型派生的类型的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">有效的 <see cref="T:System.ComponentModel.License" />。</returns>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="The type is licensed, but a &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">该类型已被授权，但是不能授予 <see cref="T:System.ComponentModel.License" />。</exception>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for implementing a license provider.">提供 <see langword="abstract" /> 基类以便实现许可证提供程序。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.LicenseProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.">当在派生类中被重写时，获取组件的实例或类型的许可证（如果已给定上下文并确定拒绝许可证是否引发异常）。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">一个 <see cref="T:System.ComponentModel.LicenseContext" />，指定可在何处使用已授权的对象。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the license.">一个 <see cref="T:System.Type" />，表示请求许可证的组件。</param>
      <param name="instance" vsli:raw="An object that is requesting the license.">请求许可证的对象。</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when the component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果组件无法授予许可证时应引发 <see cref="T:System.ComponentModel.LicenseException" />，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">有效的 <see cref="T:System.ComponentModel.License" />。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary vsli:raw="Specifies the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; to use with a class. This class cannot be inherited.">指定要与类一起使用的 <see cref="T:System.ComponentModel.LicenseProvider" />。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class without a license provider.">在没有许可证提供程序的情况下，初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type.">使用指定的类型初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 类的新实例。</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the license provider class.">许可证提供程序类的完全限定名。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type of license provider.">使用指定类型的许可证提供程序初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 类的新实例。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider class.">
        <see cref="T:System.Type" />，表示许可证提供程序类的类型。</param>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary vsli:raw="Specifies the default value, which is no provider. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定默认值，即无提供程序。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">指示此实例与指定对象是否相等。</summary>
      <param name="value" vsli:raw="Another object to compare to.">要比较的另一个对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 与此实例相等，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt;.">当前 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary vsli:raw="Gets the license provider that must be used with the associated class.">获取必须与该关联类一起使用的许可证提供程序。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider. The default value is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Type" />，表示许可证提供程序的类型。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary vsli:raw="Indicates a unique ID for this attribute type.">指示此特性类型的唯一 ID。</summary>
      <returns vsli:raw="A unique ID for this attribute type.">此特性类型的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary vsli:raw="Specifies when the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be used.">指定何时可以使用 <see cref="T:System.ComponentModel.License" />。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary vsli:raw="Used during design time by a visual designer or the compiler.">在设计时由可视化设计器或编译器使用。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary vsli:raw="Used during runtime.">在运行时使用。</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary vsli:raw="Provides an implementation of a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.">提供 <see cref="T:System.ComponentModel.LicenseProvider" /> 的实现。 提供程序与 Microsoft .NET Framework 标准授权模型的工作方式相似。</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicFileLicenseProvider&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.LicFileLicenseProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary vsli:raw="Returns a key for the specified type.">返回指定类型的密钥。</summary>
      <param name="type" vsli:raw="The object type to return the key.">要返回密钥的对象类型。</param>
      <returns vsli:raw="A confirmation that the &lt;paramref name=&quot;type&quot; /&gt; parameter is licensed.">对 <paramref name="type" /> 参数已被授权的确认。</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Returns a license for the instance of the component, if one is available.">返回组件实例的许可证（如果有一个可用的话）。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">一个 <see cref="T:System.ComponentModel.LicenseContext" />，指定可在何处使用已授权的对象。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">一个 <see cref="T:System.Type" />，表示请求 <see cref="T:System.ComponentModel.License" /> 的组件。</param>
      <param name="instance" vsli:raw="An object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">请求 <see cref="T:System.ComponentModel.License" /> 的对象。</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when a component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果无法授予组件许可证时应引发 <see cref="T:System.ComponentModel.LicenseException" />，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;. If this method cannot find a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; or a valid &lt;paramref name=&quot;context&quot; /&gt; parameter, it returns &lt;see langword=&quot;null&quot; /&gt;.">有效的 <see cref="T:System.ComponentModel.License" />。 如果该方法未能找到有效的 <see cref="T:System.ComponentModel.License" /> 或有效的 <paramref name="context" /> 参数，它返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary vsli:raw="Determines whether the key that the &lt;see cref=&quot;M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)&quot; /&gt; method retrieves is valid for the specified type.">确定 <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> 方法检索的密钥对指定的类型是否有效。</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to check.">要检查的 <see cref="P:System.ComponentModel.License.LicenseKey" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">一个 <see cref="T:System.Type" />，表示请求 <see cref="T:System.ComponentModel.License" /> 的组件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is a valid &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该密钥是指定类型的有效 <see cref="P:System.ComponentModel.License.LicenseKey" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary vsli:raw="Specifies that a list can be used as a data source. A visual designer should use this attribute to determine whether to display a particular list in a data-binding picker. This class cannot be inherited.">指定列表可被用作数据源。 可视化设计器应该使用该特性来确定是否在数据绑定选择器中显示特定的列表。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using a value to indicate whether the list is bindable.">通过使用值指示该列表是否可绑定来初始化 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 类的新实例。</summary>
      <param name="listBindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该列表为可绑定的，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; to indicate whether the list is bindable.">通过使用 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 指示该列表是否可绑定来初始化 <see cref="T:System.ComponentModel.BindableSupport" /> 类的新实例。</summary>
      <param name="flags" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; that indicates whether the list is bindable.">一个 <see cref="T:System.ComponentModel.BindableSupport" />，指示该列表是否可绑定。</param>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">表示 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">返回指示所传递对象是否等同于此 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 的值。</summary>
      <param name="obj" vsli:raw="The object to test equality with.">要用于测试是否相等的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果传递的对象等同于此 <see cref="T:System.ComponentModel.ListBindableAttribute" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">当前 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns whether &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value.">返回 <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> 是否被设置为默认值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> 被设置为默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary vsli:raw="Gets whether the list is bindable.">获取该列表是否可以绑定。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该列表为可绑定的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary vsli:raw="Specifies that the list is not bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定该列表不可绑定。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary vsli:raw="Specifies that the list is bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定该列表可绑定。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event.">为 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected.">如果给定更改类型和受影响的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />，则初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 类的新实例。</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">指示更改类型的 <see cref="T:System.ComponentModel.ListChangedType" /> 值。</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, removed, or changed.">添加、移除或更改的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the index of the affected item.">如果给定更改类型和受影响项的索引，则初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 类的新实例。</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">指示更改类型的 <see cref="T:System.ComponentModel.ListChangedType" /> 值。</param>
      <param name="newIndex" vsli:raw="The index of the item that was added, changed, or removed.">添加、更改或移除的项的索引。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change, the index of the affected item, and a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the affected item.">如果给定更改类型、受影响项的索引以及描述受影响项的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />，则初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 类的新实例。</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">指示更改类型的 <see cref="T:System.ComponentModel.ListChangedType" /> 值。</param>
      <param name="newIndex" vsli:raw="The index of the item that was added or changed.">添加或更改的项的索引。</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the item.">描述该项的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the old and new index of the item that was moved.">如果给定更改类型以及被移动项的新索引和旧索引，则初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 类的新实例。</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">指示更改类型的 <see cref="T:System.ComponentModel.ListChangedType" /> 值。</param>
      <param name="newIndex" vsli:raw="The new index of the item that was moved.">被移动项的新索引。</param>
      <param name="oldIndex" vsli:raw="The old index of the item that was moved.">被移动项的旧索引。</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary vsli:raw="Gets the type of change.">获取更改类型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">指示更改类型的 <see cref="T:System.ComponentModel.ListChangedType" /> 值。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary vsli:raw="Gets the index of the item affected by the change.">获取受更改影响的项的索引。</summary>
      <returns vsli:raw="The index of the affected by the change.">受更改影响的项的索引。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary vsli:raw="Gets the old index of an item that has been moved.">获取已移动的项的旧索引。</summary>
      <returns vsli:raw="The old index of the moved item.">已移动的项的旧索引。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, changed, or deleted.">获取添加、更改或删除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected by the change.">受此更改影响的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event of the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; class.">表示将处理 <see cref="T:System.ComponentModel.IBindingList" /> 类的 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary vsli:raw="Specifies how the list changed.">指定列表的更改方式。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary vsli:raw="An item added to the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was added.">添加到列表的项。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含被添加项的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary vsli:raw="An item changed in the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was changed.">列表中更改的项。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含被更改项的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary vsli:raw="An item deleted from the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was deleted.">从列表中删除的项。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含被删除项的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary vsli:raw="An item moved within the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.OldIndex&quot; /&gt; contains the previous index for the item, whereas &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the new index for the item.">列表中移动的项。 <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> 包含该项以前的索引，而 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含该项的新索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was added, which changed the schema.">已添加 <see cref="T:System.ComponentModel.PropertyDescriptor" />，这更改了架构。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was changed, which changed the schema.">已更改 <see cref="T:System.ComponentModel.PropertyDescriptor" />，这更改了架构。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was deleted, which changed the schema.">已删除 <see cref="T:System.ComponentModel.PropertyDescriptor" />，这更改了架构。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary vsli:raw="Much of the list has changed. Any listening controls should refresh all their data from the list.">已更改了列表的许多内容。 任何侦听控件都应该根据该列表刷新其所有数据。</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary vsli:raw="Provides a description of the sort operation applied to a data source.">提供对应用于数据源的排序操作的说明。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; class with the specified property description and direction.">使用指定的属性说明和方向初始化 <see cref="T:System.ComponentModel.ListSortDescription" /> 类的新实例。</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the property by which the data source is sorted.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，描述作为数据源排序依据的属性。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDescription" /> 值之一。</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary vsli:raw="Gets or sets the abstract description of a class property associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">获取或设置与此 <see cref="T:System.ComponentModel.ListSortDescription" /> 关联的类属性的抽象说明</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">与此 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 关联的 <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary vsli:raw="Gets or sets the direction of the sort operation associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">获取或设置与此 <see cref="T:System.ComponentModel.ListSortDescription" /> 关联的排序操作的方向。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">表示 <see cref="T:System.ComponentModel.ListSortDescription" /> 对象集合。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class with the specified array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">用 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 对象的指定数组初始化 <see cref="T:System.ComponentModel.ListSortDescription" /> 类的新实例。</summary>
      <param name="sorts" vsli:raw="The array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects to be contained in the collection.">要包含在集合中的 <see cref="T:System.ComponentModel.ListSortDescription" /> 对象的数组。</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary vsli:raw="Determines if the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; contains a specific value.">确定 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 是否包含特定值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">要在集合中查找的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在集合中找到 <see cref="T:System.Object" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of the collection to the specified array, starting at the specified destination array index.">从指定目标数组索引处开始，将集合中的内容复制到指定数组中。</summary>
      <param name="array" vsli:raw="The destination array for the items copied from the collection.">从集合复制的项的目标数组。</param>
      <param name="index" vsli:raw="The index of the destination array at which copying begins.">开始复制的目标数组的索引。</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary vsli:raw="Gets the number of items in the collection.">获取集合中的项数。</summary>
      <returns vsli:raw="The number of items in the collection.">集合中项的数目。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary vsli:raw="Returns the index of the specified item in the collection.">返回集合中指定项的索引。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">要在集合中查找的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">获取或设置指定的 <see cref="T:System.ComponentModel.ListSortDescription" />。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">要在集合中获取或设置的 <see cref="T:System.ComponentModel.ListSortDescription" /> 的从零开始的索引。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">具有指定索引的 <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An item is set in the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;, which is read-only.">在 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />（只读）中设置项。</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is thread safe.">获取一个值，用于指示对集合的访问是否是线程安全的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">在所有情况下均为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the current instance that can be used to synchronize access to the collection.">获取可用于同步对集合的访问的当前实例。</summary>
      <returns vsli:raw="The current instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 的当前实例。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">获取可用于循环访问该集合的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">向集合中添加一项。</summary>
      <param name="value" vsli:raw="The item to add to the collection.">要添加到集合中的项。</param>
      <returns vsli:raw="The position into which the new element was inserted.">新元素的插入位置。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">在所有情况下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">从集合中移除所有项。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">在所有情况下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">将某个项插入到集合中的指定索引处。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">要在集合中获取或设置的 <see cref="T:System.ComponentModel.ListSortDescription" /> 的从零开始的索引</param>
      <param name="value" vsli:raw="The item to insert into the collection.">要插入到集合中的项。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">在所有情况下。</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">在所有情况下均为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">获取一个值，该值指示集合是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">在所有情况下均为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">获取指定的 <see cref="T:System.ComponentModel.ListSortDescription" />。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get in the collection.">要从集合中获取的 <see cref="T:System.ComponentModel.ListSortDescription" /> 的从零开始的索引</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">具有指定索引的 <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of an item from the collection.">从集合中移除某项的第一个匹配项。</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">要从集合中移除的项。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">在所有情况下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes an item from the collection at a specified index.">移除集合中指定索引处的项。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to remove from the collection.">要从集合中移除的 <see cref="T:System.ComponentModel.ListSortDescription" /> 的从零开始的索引</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">在所有情况下。</exception>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary vsli:raw="Specifies the direction of a sort operation.">指定排序操作的方向。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary vsli:raw="Sorts in ascending order.">按升序排序。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary vsli:raw="Sorts in descending order.">按降序排序。</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the properties that support lookup-based binding. This class cannot be inherited.">指定支持基于查找的绑定的属性。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class using no parameters.">不使用任何参数初始化 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 类的新实例。</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">要用作数据源的属性的名称。</param>
      <param name="displayMember" vsli:raw="The name of the property to be used for the display name.">要用作显示名称的属性的名称。</param>
      <param name="valueMember" vsli:raw="The name of the property to be used as the source for values.">要用作值的源的属性的名称。</param>
      <param name="lookupMember" vsli:raw="The name of the property to be used for lookups.">要用于查找的属性的名称。</param>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">获取 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的数据源属性的名称。</summary>
      <returns vsli:raw="The data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的数据源属性。</returns>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">表示 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 类的默认值。</summary>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary vsli:raw="Gets the name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">获取 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的显示成员属性的名称。</summary>
      <returns vsli:raw="The name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的显示成员属性的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">确定指定的 <see cref="T:System.Object" /> 是否等同于当前的 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 实例。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">要与当前的 <see cref="T:System.Object" /> 实例进行比较的 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">如果该对象等同于当前的实例，则为 <see langword="true" />；否则为 <see langword="false" />，指示两者不等同。</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt;.">当前 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary vsli:raw="Gets the name of the lookup member for the component to which this attribute is bound.">获取此特性所绑定组件的查找成员的名称。</summary>
      <returns vsli:raw="The name of the lookup member for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的查找成员的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary vsli:raw="Gets the name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">获取 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的值成员属性的名称。</summary>
      <returns vsli:raw="The name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的值成员属性的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary vsli:raw="Implements &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and provides the base implementation for remotable components that are marshaled by value (a copy of the serialized object is passed).">实现 <see cref="T:System.ComponentModel.IComponent" /> 并提供可远程控制的组件的基实现，该组件是由值封送的（传递序列化对象的副本）。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary vsli:raw="Gets the container for the component.">获取组件的容器。</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; interface that represents the component's container, or &lt;see langword=&quot;null&quot; /&gt; if the component does not have a site.">实现表示组件容器的 <see cref="T:System.ComponentModel.IContainer" /> 接口的对象；如果组件不具有位置，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary vsli:raw="Gets a value indicating whether the component is currently in design mode.">获取指示组件当前是否处于设计模式的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is in design mode; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果组件处于设计模式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt;.">释放由 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; and optionally releases the managed resources.">释放由 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary vsli:raw="Adds an event handler to listen to the &lt;see cref=&quot;E:System.ComponentModel.MarshalByValueComponent.Disposed&quot; /&gt; event on the component.">添加事件处理程序以侦听组件上的 <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> 事件。</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary vsli:raw="Gets the list of event handlers that are attached to this component.">获取附加到该组件的事件处理程序的列表。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventHandlerList&quot; /&gt; that provides the delegates for this component.">一个 <see cref="T:System.ComponentModel.EventHandlerList" />，它提供此组件的委托。</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary vsli:raw="Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.">在垃圾回收将某一对象回收前允许该对象尝试释放资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary vsli:raw="Gets the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">获取 <see cref="T:System.IServiceProvider" /> 的实施者。</summary>
      <param name="service" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of service you want.">一个 <see cref="T:System.Type" />，表示所需服务的类型。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">一个 <see cref="T:System.Object" />，表示 <see cref="T:System.IServiceProvider" /> 的实施者。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary vsli:raw="Gets or sets the site of the component.">获取或设置组件的位置。</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface that represents the site of the component.">实现表示组件位置的 <see cref="T:System.ComponentModel.ISite" /> 接口的对象。</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any. This method should not be overridden.">返回包含 <see cref="T:System.ComponentModel.Component" /> 的名称的 <see cref="T:System.String" />（如果有）。 不应重写此方法。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any.  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; is unnamed.">包含该 <see cref="T:System.String" /> 的名称的 <see cref="T:System.ComponentModel.Component" />（如果有的话）。
如果 <see cref="T:System.ComponentModel.Component" /> 未命名，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary vsli:raw="Represents a mask-parsing service that can be used by any number of controls that support masking, such as the &lt;see cref=&quot;T:System.Windows.Forms.MaskedTextBox&quot; /&gt; control.">表示可由支持掩码的任何数量的控件（如 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 控件）使用的掩码分析服务。</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask.">使用指定的掩码初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">一个表示输入掩码的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and ASCII restriction value.">使用指定的掩码和 ASCII 限制值初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">一个表示输入掩码的 <see cref="T:System.String" />。</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">如果将输入限制为与 ASCII 兼容的字符，则为 <see langword="true" />；如果允许使用整个 Unicode 字符集，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, password character, and prompt usage value.">使用指定的掩码、密码字符和用法提示值初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">一个表示输入掩码的 <see cref="T:System.String" />。</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">将为输入到密码字符串中的字符显示的 <see cref="T:System.Char" />。</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果允许将提示字符作为输入，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and culture.">使用指定的掩码和区域性初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">一个表示输入掩码的 <see cref="T:System.String" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">
        <see cref="T:System.Globalization.CultureInfo" />，用于设置区分区域的分隔符。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, and ASCII restriction value.">使用指定的掩码、区域性和 ASCII 限制值初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">一个表示输入掩码的 <see cref="T:System.String" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">
        <see cref="T:System.Globalization.CultureInfo" />，用于设置区分区域的分隔符。</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">如果将输入限制为与 ASCII 兼容的字符，则为 <see langword="true" />；如果允许使用整个 Unicode 字符集，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, prompt usage value, prompt character, password character, and ASCII restriction value.">使用指定的掩码、区域性、用法提示值、提示字符、密码字符和 ASCII 限制值初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">一个表示输入掩码的 <see cref="T:System.String" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">
        <see cref="T:System.Globalization.CultureInfo" />，用于设置区分区域的分隔符。</param>
      <param name="allowPromptAsInput" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value that specifies whether the prompt character should be allowed as a valid input character.">一个 <see cref="T:System.Boolean" /> 值，指定是否应允许提示字符作为有效的输入字符。</param>
      <param name="promptChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed as a placeholder for user input.">一个将显示为用户输入占位符的 <see cref="T:System.Char" />。</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">将为输入到密码字符串中的字符显示的 <see cref="T:System.Char" />。</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">如果将输入限制为与 ASCII 兼容的字符，则为 <see langword="true" />；如果允许使用整个 Unicode 字符集，则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The mask parameter is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The mask contains one or more non-printable characters.">掩码参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
或
掩码包含一个或多个不可打印字符。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, password character, and prompt usage value.">使用指定的掩码、区域性、密码字符和用法提示值初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">一个表示输入掩码的 <see cref="T:System.String" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">
        <see cref="T:System.Globalization.CultureInfo" />，用于设置区分区域的分隔符。</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">将为输入到密码字符串中的字符显示的 <see cref="T:System.Char" />。</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果允许将提示字符作为输入，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string.">将指定的输入字符添加到带格式字符串的末尾。</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">一个要追加到带格式字符串的 <see cref="T:System.Char" /> 值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果输入字符添加成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string, and then outputs position and descriptive information.">将指定输入字符添加到带格式字符串的末尾，然后输出位置和描述性信息。</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">一个要追加到带格式字符串的 <see cref="T:System.Char" /> 值。</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">带格式的字符串中尝试添加字符的位置（从零开始计）。 一个输出参数。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。 输出参数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果输入字符添加成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string.">将指定输入字符串中的字符添加到带格式字符串的末尾。</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">一个 <see cref="T:System.String" />，包含要追加到带格式字符串的字符值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">如果已成功添加输入字符串中的所有字符，则为 <see langword="true" />；否则为 <see langword="false" />，以指示没有添加任何字符。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string, and then outputs position and descriptive information.">将指定的输入字符串中的字符添加到带格式字符串的末尾，然后输出位置和描述性信息。</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">一个 <see cref="T:System.String" />，包含要追加到带格式字符串的字符值。</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">带格式的字符串中尝试添加字符的位置（从零开始计）。 一个输出参数。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。 一个输出参数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">如果已成功添加输入字符串中的所有字符，则为 <see langword="true" />；否则为 <see langword="false" />，以指示没有添加任何字符。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary vsli:raw="Gets a value indicating whether the prompt character should be treated as a valid input character or not.">获取一个值，该值指示是否应将提示字符视为有效的输入字符。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the user can enter &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt; into the control; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果用户可将 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> 输入到控件，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary vsli:raw="Gets a value indicating whether the mask accepts characters outside of the ASCII character set.">获取一个值，指示掩码是否接受 ASCII 字符集之外的字符。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if only ASCII is accepted; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; can accept any arbitrary Unicode character. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果仅接受 ASCII，则为 <see langword="true" />；如果 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 可接受任意 Unicode 字符，则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions that have already been successfully assigned an input value.">获取已成功赋予输入值的可编辑字符位置的数目。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions in the input mask that have already been assigned a character value in the formatted string.">一个 <see cref="T:System.Int32" />，包含输入掩码中的可编辑字符位置数（这些字符位置已在带格式字符串中赋予了字符值）。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions in the input mask that have not yet been assigned an input value.">获取输入掩码中尚未赋予输入值的可编辑字符位置的数目。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions that not yet been assigned a character value.">一个 <see cref="T:System.Int32" />，包含尚未赋予字符值的可编辑字符位置的数目。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters.">通过用提示字符替换可编辑输入字符，从带格式字符串中清除所有可编辑输入字符。</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters, and then outputs descriptive information.">通过用提示字符替换可编辑输入字符，从带格式字符串中清除所有可编辑输入字符，然后输出描述性信息。</summary>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。 一个输出参数。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary vsli:raw="Creates a copy of the current &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt;.">创建当前 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 的副本。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; object this method creates, cast as an object.">此方法创建的强制转换为某对象的 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 对象。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary vsli:raw="Gets the culture that determines the value of the localizable separators and placeholders in the input mask.">获取输入掩码中确定可本地化的分隔符和占位符的值的区域性。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; containing the culture information associated with the input mask.">一个 <see cref="T:System.Globalization.CultureInfo" />，包含与输入掩码关联的区域性信息。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary vsli:raw="Gets the default password character used obscure user input.">获取用于遮盖用户输入的默认密码字符。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that represents the default password character.">一个表示默认的密码字符的 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary vsli:raw="Gets the number of editable positions in the formatted string.">获取带格式字符串中的可编辑位置数。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable positions in the formatted string.">包含带格式字符串中可编辑位置数的 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary vsli:raw="Gets a newly created enumerator for the editable positions in the formatted string.">获取为带格式字符串中的可编辑位置新创建的枚举数。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that supports enumeration over the editable positions in the formatted string.">一个 <see cref="T:System.Collections.IEnumerator" />，支持对带格式字符串中的可编辑位置进行枚举。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position after the specified position using the specified search direction.">使用指定的搜索方向，返回指定位置之后第一个已赋值的可编辑位置的位置。</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">
        <see cref="T:System.Boolean" />，用于指示搜索方向；<see langword="true" /> 表示向前搜索，<see langword="false" /> 表示向后搜索。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个已赋值可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position between the specified positions using the specified search direction.">使用指定的搜索方向，返回指定位置之间第一个赋值可编辑位置的位置。</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">带格式的字符串中的搜索结束位置（从零开始计）。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">
        <see cref="T:System.Boolean" />，用于指示搜索方向；<see langword="true" /> 表示向前搜索，<see langword="false" /> 表示向后搜索。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个已赋值可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position after the specified position using the specified search direction.">使用指定的搜索方向，返回指定位置之后第一个可编辑位置的位置。</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">
        <see cref="T:System.Boolean" />，用于指示搜索方向；<see langword="true" /> 表示向前搜索，<see langword="false" /> 表示向后搜索。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position between the specified positions using the specified search direction.">使用指定的搜索方向，返回指定位置之间第一个可编辑位置的位置。</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">带格式的字符串中的搜索结束位置（从零开始计）。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">
        <see cref="T:System.Boolean" />，用于指示搜索方向；<see langword="true" /> 表示向前搜索，<see langword="false" /> 表示向后搜索。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position after the specified position using the specified search direction.">使用指定的搜索方向，返回指定位置之后第一个不可编辑位置的位置。</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">
        <see cref="T:System.Boolean" />，用于指示搜索方向；<see langword="true" /> 表示向前搜索，<see langword="false" /> 表示向后搜索。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个原义字符的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position between the specified positions using the specified search direction.">使用指定的搜索方向，返回指定位置之间第一个不可编辑位置的位置。</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">带格式的字符串中的搜索结束位置（从零开始计）。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">
        <see cref="T:System.Boolean" />，用于指示搜索方向；<see langword="true" /> 表示向前搜索，<see langword="false" /> 表示向后搜索。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个原义字符的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position after the specified position using the specified search direction.">使用指定的搜索方向，返回指定位置之后第一个未赋值可编辑位置的位置。</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">
        <see cref="T:System.Boolean" />，用于指示搜索方向；<see langword="true" /> 表示向前搜索，<see langword="false" /> 表示向后搜索。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个未赋值可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position between the specified positions using the specified search direction.">使用指定的搜索方向，返回指定位置之间第一个未赋值可编辑位置的位置。</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">带格式的字符串中的搜索结束位置（从零开始计）。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">
        <see cref="T:System.Boolean" />，用于指示搜索方向；<see langword="true" /> 表示向前搜索，<see langword="false" /> 表示向后搜索。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个未赋值可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; denotes success or failure.">确定指定的 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 表示成功还是失败。</summary>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value typically obtained as an output parameter from a previous operation.">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 值，通常作为上一个操作的输出参数获取。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value represents a success; otherwise, &lt;see langword=&quot;false&quot; /&gt; if it represents failure.">如果指定的 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 值表示成功，则为 <see langword="true" />；如果表示失败，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary vsli:raw="Gets or sets a value that indicates whether literal characters in the input mask should be included in the formatted string.">获取或设置一个值，该值指示输入掩码中的原义字符是否应包含在带格式的字符串中。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if literals are included; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果包含原义字符，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary vsli:raw="Gets or sets a value indicating whether &lt;see cref=&quot;P:System.Windows.Forms.MaskedTextBox.PromptChar&quot; /&gt; is used to represent the absence of user input when displaying the formatted string.">获取或设置一个值，该值指示当显示带格式的字符串时是否使用 <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> 来表示缺少的用户输入。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character is used to represent the positions where no user input was provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果提示字符用于表示未提供用户输入的位置，则为 <see langword="true" />；否则为 <see langword="false" />. 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string.">在带格式字符串中的指定位置插入指定字符。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">要插入的 <see cref="T:System.Char" />。</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">带格式的字符串中要插入字符的位置（从零开始计）。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果插入成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string, returning the last insertion position and the status of the operation.">在带格式字符串中的指定位置插入指定的字符，同时返回最后一个插入位置和操作的状态。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">要插入的 <see cref="T:System.Char" />。</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">带格式的字符串中要插入字符的位置（从零开始计）。</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">如果该方法成功，则为最后一个插入字符的位置；否则为第一次插入失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述插入操作的结果。 一个输出参数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果插入成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string.">在带格式字符串中的指定位置插入指定的字符串。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">要插入的 <see cref="T:System.String" />。</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">带格式的字符串中要插入输入字符串的位置（从零开始计）。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果插入成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string, returning the last insertion position and the status of the operation.">将指定的字符串插入到带格式字符串中的指定位置，同时返回最后一个插入位置和操作的状态。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">要插入的 <see cref="T:System.String" />。</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">带格式的字符串中要插入输入字符串的位置（从零开始计）。</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">如果该方法成功，则为最后一个插入字符的位置；否则为第一次插入失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述插入操作的结果。 一个输出参数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果插入成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary vsli:raw="Gets the upper bound of the range of invalid indexes.">获取无效索引范围的上限。</summary>
      <returns vsli:raw="A value representing the largest invalid index, as determined by the provider implementation. For example, if the lowest valid index is 0, this property will return -1.">一个表示最大无效索引的值，由提供程序实现确定。 例如，如果最小的有效索引为 0，则此属性将返回 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is available for assignment.">确定指定位置是否可赋值。</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">掩码中要测试的位置（从零开始计）。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable and has not been assigned to yet; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果带格式字符串中的指定位置为可编辑并且尚未赋值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is editable.">确定指定的位置是否为可编辑。</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">掩码中要测试的位置（从零开始计）。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果带格式字符串中的指定位置为可编辑，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary vsli:raw="Gets or sets a value that determines whether password protection should be applied to the formatted string.">获取或设置一个值，该值确定是否应将密码保护应用于带格式的字符串。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input string is to be treated as a password string; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果要将输入字符串作为密码字符串进行处理，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid input character.">确定指定的字符是否为有效的输入字符。</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">要测试的 <see cref="T:System.Char" /> 值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid input value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果指定的字符包含有效的输入值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid mask character.">确定指定的字符是否为有效的掩码字符。</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">要测试的 <see cref="T:System.Char" /> 值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid mask value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果指定的字符包含有效的掩码值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid password character.">确定指定的字符是否为有效的密码字符。</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">要测试的 <see cref="T:System.Char" /> 值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid password value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果指定的字符包含有效的密码值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified position in the formatted string.">获取带格式字符串中位于指定位置的元素。</summary>
      <param name="index" vsli:raw="A zero-based index of the element to retrieve.">要检索的元素的从零开始的索引。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; at the specified position in the formatted string.">带格式字符串中位于指定位置的 <see cref="T:System.Char" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero or greater than or equal to the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.Length&quot; /&gt; of the mask.">
        <paramref name="index" /> 小于零或大于等于掩码的 <see cref="P:System.ComponentModel.MaskedTextProvider.Length" />。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary vsli:raw="Gets the index in the mask of the rightmost input character that has been assigned to the mask.">获取已赋给掩码的最靠右的输入字符在掩码中的索引。</summary>
      <returns vsli:raw="If at least one input character has been assigned to the mask, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the index of rightmost assigned position; otherwise, if no position has been assigned, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果已为掩码至少赋予了一个输入字符，则为包含最靠右的已赋值位置的索引的 <see cref="T:System.Int32" />；如果没有已赋值的位置，则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary vsli:raw="Gets the length of the mask, absent any mask modifier characters.">获取掩码的长度，不包括任何掩码修饰符字符。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of positions in the mask, excluding characters that modify mask input.">一个包含掩码中位置数（不包括修改掩码输入的字符）的 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary vsli:raw="Gets the input mask.">获取输入掩码。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the full mask.">一个包含完整掩码的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary vsli:raw="Gets a value indicating whether all required inputs have been entered into the formatted string.">获取一个值，该值指示是否所有必需的输入均已输入到带格式的字符串中。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required input has been entered into the mask; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果所有的必需输入均已输入到掩码中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary vsli:raw="Gets a value indicating whether all required and optional inputs have been entered into the formatted string.">获取一个值，该值指示是否所有必需和可选的输入均已输入到带格式的字符串中。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required and optional inputs have been entered; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果所有的必需和可选输入均已输入，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary vsli:raw="Gets or sets the character to be substituted for the actual input characters.">获取或设置要替代实际输入字符的字符。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value used as the password character.">用作密码字符的 <see cref="T:System.Char" /> 值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The password character specified when setting this property is the same as the current prompt character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt;. The two are required to be different.">设置此属性时指定的密码字符与当前提示字符 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> 相同。 这两者之间必须存在差异。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">根据 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 方法判定，设置此属性时指定的字符不是有效的密码字符。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary vsli:raw="Gets or sets the character used to represent the absence of user input for all available edit positions.">为所有可用的编辑位置获取或设置用于表示缺少用户输入的字符。</summary>
      <returns vsli:raw="The character used to prompt the user for input. The default is an underscore (_).">用于提示用户进行输入的字符。 默认为下划线 (_)。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The prompt character specified when setting this property is the same as the current password character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt;. The two are required to be different.">设置此属性时指定的提示字符与当前密码字符 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 相同。 这两者之间必须存在差异。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">根据 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 方法判定，设置此属性时指定的字符不是有效的密码字符。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary vsli:raw="Removes the last assigned character from the formatted string.">从带格式的字符串中移除最后一个赋值的字符。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该字符已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the last assigned character from the formatted string, and then outputs the removal position and descriptive information.">从带格式字符串中移除最后一个赋值的字符，然后输出移除位置和描述性信息。</summary>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the character was actually removed. An output parameter.">带格式字符串中实际移除字符的位置（从零开始计）。 一个输出参数。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。 一个输出参数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该字符已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the assigned character at the specified position from the formatted string.">从带格式的字符串中移除位于指定位置的赋值字符。</summary>
      <param name="position" vsli:raw="The zero-based position of the assigned character to remove.">要移除的赋值字符的位置（从零开始计）。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该字符已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string.">从带格式的字符串中移除指定位置之间的赋值的字符。</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">要移除的第一个赋值的字符的从零开始的索引。</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">要移除的最后一个赋值的字符的从零开始的索引。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该字符已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string, and then outputs the removal position and descriptive information.">从带格式的字符串中移除指定位置之间的赋值的字符，然后输出移除位置和描述性信息。</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">要移除的第一个赋值的字符的从零开始的索引。</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">要移除的最后一个赋值的字符的从零开始的索引。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string of where the characters were actually removed; otherwise, the first position where the operation failed. An output parameter.">如果成功，则为带格式的字符串中实际移除字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。 一个输出参数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该字符已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value.">用指定的字符值替换指定位置或指定位置后面的单个字符。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">用于替换现有值的 <see cref="T:System.Char" /> 值。</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">用于搜索将要替换的第一个可编辑字符的位置（从零开始计）。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功替换该字符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character between the specified starting and ending positions with the specified character value, and then outputs the removal position and descriptive information.">在指定的开始和结束位置之间使用指定的字符值替换单个字符，然后输出移除位置和描述性信息。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">用于替换现有值的 <see cref="T:System.Char" /> 值。</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">带格式的字符串中的替换起始位置（从零开始计）。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">带格式的字符串中的替换结束位置（从零开始计）。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">如果成功，则为带格式字符串中实际替换最后一个字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述替换操作的结果。 一个输出参数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功替换该字符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value, and then outputs the removal position and descriptive information.">用指定的字符值替换指定位置或指定位置后面的单个字符，然后输出移除位置和描述性信息。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">用于替换现有值的 <see cref="T:System.Char" /> 值。</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">用于搜索将要替换的第一个可编辑字符的位置（从零开始计）。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">如果成功，则为带格式字符串中实际替换最后一个字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述替换操作的结果。 一个输出参数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功替换该字符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string.">从指定位置开始使用指定字符串替换一定范围的可编辑字符。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">用于替换现有可编辑字符的 <see cref="T:System.String" /> 值。</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">用于搜索将要替换的第一个可编辑字符的位置（从零开始计）。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果所有的字符已成功替换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters between the specified starting and ending positions with the specified string, and then outputs the removal position and descriptive information.">在指定的开始位置和结束位置之间的范围内使用指定的字符串替换可编辑字符，然后输出移除位置和描述性信息。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">用于替换现有可编辑字符的 <see cref="T:System.String" /> 值。</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">带格式的字符串中的替换起始位置（从零开始计）。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">带格式的字符串中的替换结束位置（从零开始计）。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">如果成功，则为带格式字符串中实际替换最后一个字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述替换操作的结果。 一个输出参数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果所有的字符已成功替换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string, and then outputs the removal position and descriptive information.">从指定位置开始使用指定字符串替换一定范围的可编辑字符，然后输出移除位置和描述性信息。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">用于替换现有可编辑字符的 <see cref="T:System.String" /> 值。</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">用于搜索将要替换的第一个可编辑字符的位置（从零开始计）。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">如果成功，则为带格式字符串中实际替换最后一个字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述替换操作的结果。 一个输出参数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果所有的字符已成功替换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary vsli:raw="Gets or sets a value that determines how an input character that matches the prompt character should be handled.">获取或设置一个值，该值确定应如何处理与提示字符匹配的输入字符。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character entered as input causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the prompt character is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果输入的提示字符会导致掩码中的当前可编辑位置被重置，则为 <see langword="true" />；否则为 <see langword="false" />，以指示要将提示字符作为正常输入字符进行处理。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary vsli:raw="Gets or sets a value that determines how a space input character should be handled.">获取或设置一个值，该值确定应如何处理空白输入字符。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the space input character causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that it is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果空白输入字符将导致重置掩码中的当前可编辑位置，则为 <see langword="true" />；否则为 <see langword="false" />，以指示要将其作为正常输入字符进行处理。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary vsli:raw="Sets the formatted string to the specified input string.">将带格式的字符串设置为指定的输入字符串。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">用于设置带格式字符串的 <see cref="T:System.String" /> 值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果所有的字符已成功设置，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Sets the formatted string to the specified input string, and then outputs the removal position and descriptive information.">将带格式的字符串设置为指定的输入字符串，然后输出移除位置和描述性信息。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">用于设置带格式字符串的 <see cref="T:System.String" /> 值。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually set; otherwise, the first position where the operation failed. An output parameter.">如果成功，则为带格式字符串中实际设置最后一个字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the set operation. An output parameter.">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述设置操作的结果。 一个输出参数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果所有的字符已成功设置，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary vsli:raw="Gets or sets a value indicating whether literal character positions in the mask can be overwritten by their same values.">获取或设置一个值，该值指示掩码中的原义字符位置是否可由其相同的值覆盖。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow literals to be added back; otherwise, &lt;see langword=&quot;false&quot; /&gt; to not allow the user to overwrite literal characters. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果允许往回添加原义字符，则为 <see langword="true" />；如果不允许用户覆盖原义字符，则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary vsli:raw="Returns the formatted string in a displayable form.">以可显示的形式返回带格式字符串。</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes prompts and mask literals.">带格式的 <see cref="T:System.String" />，包含提示和掩码原义字符。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary vsli:raw="Returns the formatted string that includes all the assigned character values.">返回包含所有赋值的字符值的带格式字符串。</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values.">带格式的 <see cref="T:System.String" />，其中包含所有赋值的字符值。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including password characters.">返回带格式的字符串，还可以选择包含密码字符。</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">如果为 <see langword="true" />，则返回实际的可编辑字符；如果为 <see langword="false" />，则指示将接受 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 属性。</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes literals, prompts, and optionally password characters.">带格式的 <see cref="T:System.String" />，包含原义字符、提示字符，还可以选择包含密码字符。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including prompt and literal characters.">返回带格式的字符串，还可以选择包含提示字符和原义字符。</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在返回字符串中包括提示字符，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在返回字符串中包括原义字符，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values and optionally includes literals and prompts.">带格式的 <see cref="T:System.String" />，包含所有赋值的字符值，还可以选择包含原义字符和提示字符。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt, literal, and password characters.">返回带格式字符串的子字符串，可以选择包含提示字符、原义字符和密码字符。</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">如果为 <see langword="true" />，则返回实际的可编辑字符；如果为 <see langword="false" />，则指示将接受 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 属性。</param>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在返回字符串中包括提示字符，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在返回字符串中包括原义字符，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">带格式的字符串中的起始输出位置（从零开始计）。</param>
      <param name="length" vsli:raw="The number of characters to return.">要返回的字符数。</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals, prompts, and password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">如果成功，则返回带格式的 <see cref="T:System.String" /> 的子字符串（包含所有赋值的字符值，还可以选择包含原义字符、提示字符和密码字符）；否则返回 <see cref="F:System.String.Empty" /> 字符串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt and literal characters.">返回带格式字符串的子字符串，也可以选择包含提示字符和原义字符。</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在返回字符串中包括提示字符，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在返回字符串中包括原义字符，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">带格式的字符串中的起始输出位置（从零开始计）。</param>
      <param name="length" vsli:raw="The number of characters to return.">要返回的字符数。</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals and prompts; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">如果成功，则返回带格式的 <see cref="T:System.String" /> 的子字符串（包含所有赋值的字符值，还可以选择包含原义字符和提示字符）；否则返回 <see cref="F:System.String.Empty" /> 字符串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including password characters.">返回带格式字符串的子字符串，也可以选择包含密码字符。</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">如果为 <see langword="true" />，则返回实际的可编辑字符；如果为 <see langword="false" />，则指示将接受 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 属性。</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">带格式的字符串中的起始输出位置（从零开始计）。</param>
      <param name="length" vsli:raw="The number of characters to return.">要返回的字符数。</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes literals, prompts, and optionally password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">如果成功，则返回带格式的 <see cref="T:System.String" /> 的子字符串（包含原义字符、提示字符，还可以选择包含密码字符）；否则返回 <see cref="F:System.String.Empty" /> 字符串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string.">返回带格式字符串的子字符串。</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">带格式的字符串中的起始输出位置（从零开始计）。</param>
      <param name="length" vsli:raw="The number of characters to return.">要返回的字符数。</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">如果成功，则返回带格式的 <see cref="T:System.String" /> 的子字符串（包含所有赋值的字符值），否则返回 <see cref="F:System.String.Empty" /> 字符串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified character could be set successfully at the specified position.">测试指定的字符是否可以在指定位置成功设置。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">要测试的 <see cref="T:System.Char" /> 值。</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">测试输入字符时所根据的掩码位置。</param>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。 一个输出参数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character is valid for the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的字符对指定位置有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary vsli:raw="Tests whether the specified character would be escaped at the specified position.">测试指定的字符是否将在指定位置转义。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">要测试的 <see cref="T:System.Char" /> 值。</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">测试输入字符时所根据的掩码位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character would be escaped at the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的字符将在指定位置转义，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary vsli:raw="Tests whether the specified string could be set successfully.">测试指定的字符串是否可以成功设置。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">要测试的 <see cref="T:System.String" /> 值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的字符串表示有效输入，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified string could be set successfully, and then outputs position and descriptive information.">测试指定的字符串是否可以成功设置，然后输出位置和描述性信息。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">要测试的 <see cref="T:System.String" /> 值。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position of the last character actually tested; otherwise, the first position where the test failed. An output parameter.">如果成功，则为实际测试的最后一个字符的位置（从零开始计）；否则为测试第一次失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the test operation. An output parameter.">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述测试操作的结果。 一个输出参数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的字符串表示有效输入，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary vsli:raw="Specifies values that succinctly describe the results of a masked text parsing operation.">指定简洁描述掩码文本分析操作结果的值。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not alphanumeric. .">操作未成功。输入字符中包含非字母数字字符。 。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not a member of the ASCII character set.">操作未成功。输入字符中包含非 ASCII 字符集成员的字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary vsli:raw="Success. The operation succeeded because a literal, prompt or space character was an escaped character. For more information about escaped characters, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)&quot; /&gt; method.">成功。 操作成功，因为文本、提示或空格字符是转义字符。 有关转义字符的更多信息，请参见 <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" /> 方法。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a digit.">操作未成功。 输入字符中包含非数字字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary vsli:raw="Operation did not succeed. The program encountered an input character that was not valid. For more information about characters that are not valid, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)&quot; /&gt; method.">操作未成功。 程序遇到无效的输入字符。 有关无效字符的更多信息，请参见 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" /> 方法。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a letter.">操作未成功。 输入字符中包含非字母字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed; therefore, no side effect was produced.">成功。 主操作未执行，因为不需要；因此，未产生任何副作用。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary vsli:raw="Operation did not succeed. The current position in the formatted string is a literal character.">操作未成功。 格式化字符串中的当前位置为原义字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary vsli:raw="Operation did not succeed. The specified position is not in the range of the target string; typically it is either less than zero or greater then the length of the target string.">操作未成功。 指定的位置未在目标字符串范围内；通常小于零或大于目标字符串的长度。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary vsli:raw="Operation did not succeed. The prompt character is not valid at input, perhaps because the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.">操作未成功。 输入的提示字符无效，可能是由于 <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> 属性设置为 <see langword="false" /> 所致。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed, but the method produced a side effect. For example, the &lt;see cref=&quot;Overload:System.ComponentModel.MaskedTextProvider.RemoveAt&quot; /&gt; method can delete an unassigned edit position, which causes left-shifting of subsequent characters in the formatted string.">成功。 主操作未执行，因为不需要，但该方法产生了副作用。 例如，<see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> 方法可能删除未赋值的编辑位置，这会引起格式化字符串中顺序字符的左移。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a signed digit.">操作未成功。 输入字符中包含不是有符号数字的字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary vsli:raw="Success. The primary operation succeeded.">成功。 主操作成功。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary vsli:raw="Operation did not succeed. There were not enough edit positions available to fulfill the request.">操作未成功。 没有足够的可用编辑位置来满足请求。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary vsli:raw="Unknown. The result of the operation could not be determined.">未知。 操作结果未能确定。</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary vsli:raw="Represents a class member, such as a property or event. This is an abstract base class.">表示一个类成员，例如某个属性或事件。 这是一个抽象基类。</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">使用指定的 <see cref="T:System.ComponentModel.MemberDescriptor" /> 初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类的新实例。</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the member and its attributes.">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，它包含该成员的名称及其特性。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the old &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">用指定的 <see cref="T:System.ComponentModel.MemberDescriptor" /> 中的名称以及同时出现在旧 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.ComponentModel.MemberDescriptor" /> 数组中的特性初始化 <see cref="T:System.Attribute" /> 类的新实例。</summary>
      <param name="oldMemberDescriptor" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，它具有该成员的名称及其特性。</param>
      <param name="newAttributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects with the attributes you want to add to the member.">
        <see cref="T:System.Attribute" /> 对象的数组，这些对象具有要添加到成员的特性。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member.">用指定的成员名称初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The name of the member.">成员名。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">该名称为空字符串 ("") 或 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member and an array of attributes.">用指定的成员名称和特性数组初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The name of the member.">成员名。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the member attributes.">包含成员特性的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">该名称为空字符串 ("") 或 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary vsli:raw="Gets or sets an array of attributes.">获取或设置特性数组。</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the attributes of this member.">包含成员特性的类型 <see cref="T:System.Attribute" /> 的数组。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary vsli:raw="Gets the collection of attributes for this member.">获取该成员的特性集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that provides the attributes for this member, or an empty collection if there are no attributes in the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt;.">一个提供此成员的特性的 <see cref="T:System.ComponentModel.AttributeCollection" />；如果 <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> 中没有特性，则为空集合。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary vsli:raw="Gets the name of the category to which the member belongs, as specified in the &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;.">获取该成员所属的类别的名称，如 <see cref="T:System.ComponentModel.CategoryAttribute" /> 中所指定的。</summary>
      <returns vsli:raw="The name of the category to which the member belongs. If there is no &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;, the category name is set to the default category, &lt;see langword=&quot;Misc&quot; /&gt;.">该成员所属的类别的名称。 如果没有 <see cref="T:System.ComponentModel.CategoryAttribute" />，类别名将被设置为默认类别 <see langword="Misc" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary vsli:raw="Creates a collection of attributes using the array of attributes passed to the constructor.">使用传递到构造函数的特性数组创建特性的集合。</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that contains the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt; attributes.">一个新 <see cref="T:System.ComponentModel.AttributeCollection" />，包含 <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> 特性。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary vsli:raw="Gets the description of the member, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;.">获取成员的说明，如 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 中所指定的。</summary>
      <returns vsli:raw="The description of the member. If there is no &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;, the property value is set to the default, which is an empty string (&quot;&quot;).">成员的说明。 如果没有 <see cref="T:System.ComponentModel.DescriptionAttribute" />，属性值被设置为默认值，它是一个空字符串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary vsli:raw="Gets whether this member should be set only at design time, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignOnlyAttribute&quot; /&gt;.">获取是否只能在设计时设置该成员，如 <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> 中所指定的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this member should be set only at design time; &lt;see langword=&quot;false&quot; /&gt; if the member can be set during run time.">如果只能在设计时设置该成员，则为 <see langword="true" />；如果可以在运行时设置该成员，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary vsli:raw="Gets the name that can be displayed in a window, such as a Properties window.">获取可以显示在窗口（如“属性”窗口）中的名称。</summary>
      <returns vsli:raw="The name to display for the member.">为该成员显示的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this instance to the given object to see if they are equivalent.">将该实例与给定的对象进行比较以了解它们是否等效。</summary>
      <param name="obj" vsli:raw="The object to compare to the current instance.">要与当前类型进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果等效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="When overridden in a derived class, adds the attributes of the inheriting class to the specified list of attributes in the parent class.">当在派生类中被重写时，将继承类的特性添加到父类中指定的特性列表。</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">一个列出父类中特性的 <see cref="T:System.Collections.IList" />。 最初，它是空的。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary vsli:raw="Finds the given method through reflection, searching only for public methods.">通过反射查找给定的方法，只搜索公共方法。</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">包含该方法的组件。</param>
      <param name="name" vsli:raw="The name of the method to find.">要查找的方法的名称。</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">该方法的参数数组，用于在重载方法之间进行选择。</param>
      <param name="returnType" vsli:raw="The type to return for the method.">为该方法返回的类型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">一个表示该方法的 <see cref="T:System.Reflection.MethodInfo" />；如果找不到该方法，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary vsli:raw="Finds the given method through reflection, with an option to search only public methods.">带一个仅搜索公共方法的选项，通过反射查找给定的方法。</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">包含该方法的组件。</param>
      <param name="name" vsli:raw="The name of the method to find.">要查找的方法的名称。</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">该方法的参数数组，用于在重载方法之间进行选择。</param>
      <param name="returnType" vsli:raw="The type to return for the method.">为该方法返回的类型。</param>
      <param name="publicOnly" vsli:raw="Whether to restrict search to public methods.">是否限制搜索公共方法。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">一个表示该方法的 <see cref="T:System.Reflection.MethodInfo" />；如果找不到该方法，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">当前 <see cref="T:System.ComponentModel.MemberDescriptor" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="Retrieves the object that should be used during invocation of members.">检索应在成员调用期间使用的对象。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">调用目标的 <see cref="T:System.Type" />。</param>
      <param name="instance" vsli:raw="The potential invocation target.">潜在的调用目标。</param>
      <returns vsli:raw="The object to be used during member invocations.">成员调用期间使用的对象。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 或 <paramref name="instance" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary vsli:raw="Gets the component on which to invoke a method.">获取在其上调用方法的组件。</summary>
      <param name="componentClass" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of component this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; is bound to. For example, if this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; describes a property, this parameter should be the class that the property is declared on.">一个 <see cref="T:System.Type" />，表示该 <see cref="T:System.ComponentModel.MemberDescriptor" /> 要绑定到的组件的类型。 例如，如果此 <see cref="T:System.ComponentModel.MemberDescriptor" /> 描述一个属性，则该参数应该是在其上声明属性的类。</param>
      <param name="component" vsli:raw="An instance of the object to call.">要调用的对象的实例。</param>
      <returns vsli:raw="An instance of the component to invoke. This method returns a visual designer when the property is attached to a visual designer.">要调用的组件的实例。 当属性附加到可视化设计器时，此方法返回一个可视化设计器。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentClass&quot; /&gt; or &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentClass" /> 或 <paramref name="component" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary vsli:raw="Gets a component site for the given component.">获取给定组件的组件位置。</summary>
      <param name="component" vsli:raw="The component for which you want to find a site.">要查找其位置的组件。</param>
      <returns vsli:raw="The site of the component, or &lt;see langword=&quot;null&quot; /&gt; if a site does not exist.">该组件的位置，或者如果位置不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary vsli:raw="Gets a value indicating whether the member is browsable, as specified in the &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;.">获取一个指示该成员是否可浏览的值，如 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 中所指定的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is browsable; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If there is no &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;, the property value is set to the default, which is &lt;see langword=&quot;true&quot; /&gt;.">如果成员可以浏览，则为 <see langword="true" />；否则为 <see langword="false" />。 如果没有 <see cref="T:System.ComponentModel.BrowsableAttribute" />，则将属性值设置为默认值 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary vsli:raw="Gets the name of the member.">获取此成员的名称。</summary>
      <returns vsli:raw="The name of the member.">成员名。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary vsli:raw="Gets the hash code for the name of the member, as specified in &lt;see cref=&quot;M:System.String.GetHashCode&quot; /&gt;.">获取此成员名称的哈希代码，如 <see cref="M:System.String.GetHashCode" /> 中所指定的。</summary>
      <returns vsli:raw="The hash code for the name of the member.">该成员名称的哈希代码。</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary vsli:raw="Provides a type converter to convert multiline strings to a simple string.">提供将多行字符串转换为单行字符串的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MultilineStringConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.MultilineStringConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">使用指定的上下文和区域性信息将给定值对象转换为指定的类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 如果传递 <see langword="null" />，则采用当前区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">值参数所要转换成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the &lt;paramref name=&quot;value&quot; /&gt; parameter, using the specified context and attributes.">使用指定的上下文和特性返回由 <paramref name="value" /> 参数指定的数组类型的属性的集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">一个 <see cref="T:System.Object" /> ，它指定要为其获取属性的数组类型。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">使用指定的上下文返回该对象是否支持属性。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.ComponentModel.MultilineStringConverter.GetProperties&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果应调用 <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" /> 来查找此对象的属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary vsli:raw="Provides the base implementation for the &lt;see cref=&quot;T:System.ComponentModel.INestedContainer&quot; /&gt; interface, which enables containers to have an owning component.">提供 <see cref="T:System.ComponentModel.INestedContainer" /> 接口的基实现，该接口使容器可以拥有一个所属组件。</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NestedContainer&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.NestedContainer" /> 类的新实例。</summary>
      <param name="owner" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">拥有此嵌套容器的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="owner" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site for the component within the container.">为容器中的组件创建站点。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">要为其创建站点的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">要分配给 <paramref name="component" /> 的名称，或者为 <see langword="null" /> 以跳过名称分配。</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt;.">新创建的 <see cref="T:System.ComponentModel.ISite" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the resources used by the nested container.">释放由嵌套容器使用的资源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">获取指定类型的服务对象（如果可用）。</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">要检索的服务的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that implements the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">实现所请求服务的 <see cref="T:System.Object" />，或者，如果无法解析服务，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for this nested container.">获取此嵌套容器的所属组件。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">拥有此嵌套容器的 <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary vsli:raw="Gets the name of the owning component.">获取所属组件的名称。</summary>
      <returns vsli:raw="The name of the owning component.">所属组件的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary vsli:raw="Provides automatic conversion between a nullable type and its underlying primitive type.">提供可以为 null 的类型与其基础基元类型之间的自动转换。</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NullableConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.NullableConverter" /> 类的新实例。</summary>
      <param name="type" vsli:raw="The specified nullable type.">指定的可以为 null 的类型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is not a nullable type.">
        <paramref name="type" /> 不是可以为 null 的类型。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">返回该转换器是否可以使用指定上下文将给定类型的对象转换为此转换器的类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">返回此转换器能否使用指定上下文将对象转换为指定类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">一个 <see cref="T:System.Type" />，表示你希望转换为的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">使用指定的上下文和区域性信息将给定对象转换为此转换器的类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">使用指定的上下文和区域性信息将给定值对象转换为指定的类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">值参数所要转换成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">给定该对象的一组属性值，使用指定上下文创建与此 <see cref="T:System.ComponentModel.TypeConverter" /> 相关联的类型的实例。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">新属性值的 <see cref="T:System.Collections.IDictionary" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">如果表示给定 <see cref="T:System.Collections.IDictionary" />，则为 <see cref="T:System.Object" />，或如果无法创建对象，则为 <see langword="null" />。 此方法始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">返回有关更改该对象上的某个值是否需要使用指定的上下文调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 以创建新值的情况。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果更改此对象上的某属性需要调用 <see langword="true" /> 以创建新值，则为 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">使用指定的上下文和特性返回由 value 参数指定的数组类型的属性的集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">一个 <see cref="T:System.Object" /> ，它指定要为其获取属性的数组类型。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">使用指定的上下文返回该对象是否支持属性。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果应调用 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 来查找此对象的属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">当与格式上下文一起提供时，返回此类型转换器设计用于的数据类型的标准值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用来提取有关从中调用此转换器的环境的附加信息。 此参数或其属性可以为 <see langword="null" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;Overload:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">使用指定的上下文返回从 <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的标准值的集合是否为可能值的独占列表。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">如果从 <see langword="true" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；如果还可能有其他值，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">使用指定的上下文返回此对象是否支持可以从列表中选取的标准值集。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果应调用 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 来查找对象支持的一组公共值，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">返回给定值对象对于此类型和此指定的上下文是否有效。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">要测试其有效性的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定值对于该对象有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary vsli:raw="Gets the nullable type.">获取可以为 null 的类型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the nullable type.">表示可以为 null 的类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary vsli:raw="Gets the underlying type.">获取基础类型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the underlying type.">表示基础类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary vsli:raw="Gets the underlying type converter.">获取基础类型转换器。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that represents the underlying type converter.">表示基础类型转换器的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary vsli:raw="Indicates that an object's text representation is obscured by characters such as asterisks. This class cannot be inherited.">指示对象的文本表示形式被星号等字符隐匿。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class, optionally showing password text.">初始化 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 类的新实例，有选择地显示密码文本。</summary>
      <param name="password" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">若要指示属性应作为密码文本显示，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</param>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">指定 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; instances are equal.">确定两个 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 实例是否相等。</summary>
      <param name="o" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">要与当前的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 进行比较的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />，则为 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">当前 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns an indication whether the value of this instance is the default value.">返回此实例值是否为默认值的指示。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此实例是该类的默认属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary vsli:raw="Specifies that a text property is not used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">指定文本属性并不作为密码使用。 此 <see langword="static" />（在 Visual Basic 中为 <see langword="Shared" />）字段为只读字段。</summary>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary vsli:raw="Gets a value indicating if the property for which the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is defined should be shown as password text.">获取一个值，该值指示为其定义了 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 的属性是否应作为密码文本显示。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果属性应作为密码文本显示，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary vsli:raw="Specifies that a text property is used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">指定将文本属性作为密码使用。 此 <see langword="static" />（在 Visual Basic 中为 <see langword="Shared" />）字段为只读字段。</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary vsli:raw="Provides an abstraction of a property on a class.">提供类的属性的抽象。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">使用指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 中的名称和特性初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类的新实例。</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the property and its attributes.">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，它包含该属性的名称及其特性。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">使用指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 中的名称以及同时出现在 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.ComponentModel.MemberDescriptor" /> 数组中的特性初始化 <see cref="T:System.Attribute" /> 类的新实例。</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; containing the name of the member and its attributes.">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，包含成员的名称及其特性。</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array containing the attributes you want to associate with the property.">一个 <see cref="T:System.Attribute" /> 数组，包含要和该属性关联的特性。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the specified name and attributes.">使用指定的名称和特性来初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The name of the property.">属性的名称。</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the property attributes.">包含属性特性的类型 <see cref="T:System.Attribute" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">使其他对象在此属性更改时能得到通知。</summary>
      <param name="component" vsli:raw="The component to add the handler for.">为其添加处理程序的组件。</param>
      <param name="handler" vsli:raw="The delegate to add as a listener.">要作为侦听器添加的委托。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 或 <paramref name="handler" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, returns whether resetting an object changes its value.">当在派生类中被重写时，返回重置对象时是否更改其值。</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">要测试重置功能的组件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes its value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果重置组件更改其值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the component this property is bound to.">当在派生类中被重写时，获取该属性绑定到的组件的类型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component this property is bound to. When the &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)&quot; /&gt; methods are invoked, the object specified might be an instance of this type.">一个 <see cref="T:System.Type" />，表示该属性绑定到的组件的类型。 当调用 <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> 或 <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> 方法时，指定的对象可以是此类型的实例。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary vsli:raw="Gets the type converter for this property.">获取该属性的类型转换器。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is used to convert the &lt;see cref=&quot;T:System.Type&quot; /&gt; of this property.">一个 <see cref="T:System.ComponentModel.TypeConverter" />，用于转换该属性的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary vsli:raw="Creates an instance of the specified type.">创建指定类型的实例。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">一个 <see cref="T:System.Type" />，表示要创建的类型。</param>
      <returns vsli:raw="A new instance of the type.">该类型的新实例。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this to another object to see if they are equivalent.">将此对象与另一个对象进行比较，看看它们是否相等。</summary>
      <param name="obj" vsli:raw="The object to compare to this &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">与此 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果值相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="Adds the attributes of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the specified list of attributes in the parent class.">将 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的特性添加到父类中的指定特性列表中。</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">一个列出父类中特性的 <see cref="T:System.Collections.IList" />。 最初，它是空的。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt;.">返回默认的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <returns vsli:raw="A collection of property descriptor.">属性描述符的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; using a specified array of attributes as a filter.">通过将指定的特性数组用作筛选器，返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">要用作筛选器的类型 <see cref="T:System.Attribute" /> 数组。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes.">一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有与指定的特性匹配的属性。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object.">返回给定对象的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">要为其获取属性的组件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">具有指定组件的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object using a specified array of attributes as a filter.">通过将指定的特性数组用作筛选器，返回给定对象的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">要为其获取属性的组件。</param>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">具有与指定组件的指定属性相匹配的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Gets an editor of the specified type.">获取指定类型的编辑器。</summary>
      <param name="editorBaseType" vsli:raw="The base type of editor, which is used to differentiate between multiple editors that a property supports.">编辑器的基类型，用于区分属性所支持的多个编辑器。</param>
      <returns vsli:raw="An instance of the requested editor type, or &lt;see langword=&quot;null&quot; /&gt; if an editor cannot be found.">请求的编辑器类型的实例，或者，如果未能找到编辑器，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">返回该对象的哈希代码。</summary>
      <returns vsli:raw="The hash code for this object.">此对象的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="This method returns the object that should be used during invocation of members.">此方法返回应在成员调用期间使用的对象。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">调用目标的 <see cref="T:System.Type" />。</param>
      <param name="instance" vsli:raw="The potential invocation target.">潜在的调用目标。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; that should be used during invocation of members.">应在成员调用期间使用的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary vsli:raw="Returns a type using its name.">返回使用其名称的类型。</summary>
      <param name="typeName" vsli:raw="The assembly-qualified name of the type to retrieve.">要检索的类型的程序集限定名称。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that matches the given type name, or &lt;see langword=&quot;null&quot; /&gt; if a match cannot be found.">与给定类型名称匹配的 <see cref="T:System.Type" />，或者，如果未能找到匹配，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, gets the current value of the property on a component.">当在派生类中被重写时，获取组件上的属性的当前值。</summary>
      <param name="component" vsli:raw="The component with the property for which to retrieve the value.">具有为其检索值的属性的组件。</param>
      <returns vsli:raw="The value of a property for a given component.">给定组件的属性的值。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary vsli:raw="Retrieves the current set of &lt;c&gt;ValueChanged&lt;/c&gt; event handlers for a specific component.">检索特定组件的 <c>ValueChanged</c> 事件处理程序的当前集合。</summary>
      <param name="component" vsli:raw="The component for which to retrieve event handlers.">要为其检索事件处理程序的组件。</param>
      <returns vsli:raw="A combined multicast event handler, or &lt;see langword=&quot;null&quot; /&gt; if no event handlers are currently assigned to &lt;paramref name=&quot;component&quot; /&gt;.">一个组合多路广播事件处理程序，如果当前没有为 <paramref name="component" /> 分配的事件处理程序，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary vsli:raw="Gets a value indicating whether this property should be localized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt;.">获取指示是否应该本地化该属性的值，如 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 中所指定的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is marked with the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt; set to &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在标记成员时将 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 设置为 <see langword="true" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether this property is read-only.">当在派生类中被重写时，获取指示该属性是否为只读的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该属性为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary vsli:raw="Raises the &lt;c&gt;ValueChanged&lt;/c&gt; event that you implemented.">引发已实现的 <c>ValueChanged</c> 事件。</summary>
      <param name="component" vsli:raw="The object that raises the event.">引发事件的对象。</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the property.">当在派生类中被重写时，获取该属性的类型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">一个 <see cref="T:System.Type" />，表示属性的类型。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">使其他对象在此属性更改时能得到通知。</summary>
      <param name="component" vsli:raw="The component to remove the handler for.">要移除其处理程序的组件。</param>
      <param name="handler" vsli:raw="The delegate to remove as a listener.">要作为侦听器移除的委托。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 或 <paramref name="handler" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, resets the value for this property of the component to the default value.">当在派生类中被重写时，将组件的此属性的值重置为默认值。</summary>
      <param name="component" vsli:raw="The component with the property value that is to be reset to the default value.">具有要重置为默认值的属性值的组件。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary vsli:raw="Gets a value indicating whether this property should be serialized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibilityAttribute&quot; /&gt;.">获取指示是否应该序列化该属性的值，如 <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> 中所指定的值。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibility&quot; /&gt; enumeration values that specifies whether this property should be serialized.">
        <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 枚举值之一，指定是否应该序列化该属性。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary vsli:raw="When overridden in a derived class, sets the value of the component to a different value.">当在派生类中被重写时，将组件的值设置为一个不同的值。</summary>
      <param name="component" vsli:raw="The component with the property value that is to be set.">具有要进行设置的属性值的组件。</param>
      <param name="value" vsli:raw="The new value.">新值。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.">当在派生类中被重写时，确定一个值，该值指示是否需要永久保存此属性的值。</summary>
      <param name="component" vsli:raw="The component with the property to be examined for persistence.">具有要检查其持久性的属性的组件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be persisted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果属性应该被永久保存，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary vsli:raw="Gets a value indicating whether value change notifications for this property may originate from outside the property descriptor.">获取一个值，该值指示此属性的值更改通知是否源自属性说明符的外部。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if value change notifications may originate from outside the property descriptor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果值更改通知可能源自属性说明符的外部，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">表示 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象集合。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 类的新实例。</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">提供该集合属性的类型 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class, which is optionally read-only.">初始化 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 类的新实例，该类可以是只读类。</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">提供该集合属性的类型 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的数组。</param>
      <param name="readOnly" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, specifies that the collection cannot be modified.">如果为 <see langword="true" />，则指定该集合无法修改。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection.">将指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加到集合。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">要添加到集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added to the collection.">要添加到集合的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary vsli:raw="Removes all &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects from the collection.">从集合中删除所有 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">返回集合是否包含给定的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to find in the collection.">要在集合中查找的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该集合包含给定的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to an array, starting at the specified index number.">从指定的索引号开始，将整个集合复制到数组。</summary>
      <param name="array" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to copy elements of the collection to.">要将集合元素复制到的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的数组。</param>
      <param name="index" vsli:raw="The index of the &lt;paramref name=&quot;array&quot; /&gt; parameter at which copying begins.">
        <paramref name="array" /> 参数的索引，复制从此位置开始。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of property descriptors in the collection.">获取集合中属性说明符的数目。</summary>
      <returns vsli:raw="The number of property descriptors in the collection.">集合中属性说明符的数目。</returns>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use instead of creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定一个可以使用的空集合，而不是创建一个不带任何项的新集合。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, using a Boolean to indicate whether to ignore case.">返回具有指定名称的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，使用布尔值指示是否忽略大小写。</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return from the collection.">要从集合中返回的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的名称。</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the property name; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果要忽略属性名称的大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">具有指定名称的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，或者如果该属性不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">返回该类的枚举数。</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 类型的枚举数。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">返回给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return the index of.">要返回其索引的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection at the specified index number.">将 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加到集合中指定的索引号位置。</summary>
      <param name="index" vsli:raw="The index at which to add the &lt;paramref name=&quot;value&quot; /&gt; parameter to the collection.">向集合中其所在位置添加 <paramref name="value" /> 参数的索引。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">要添加到集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">使用指定的 <see cref="T:System.Collections.IComparer" /> 对此集合中的成员排序。</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">用来将此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象排序的比较器。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">对此集合中的成员排序。 首先应用指定的顺序，然后应用此集合的默认排序，后者通常为字母顺序。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">字符串的数组，描述此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的排序顺序。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index number.">获取或设置指定索引处的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get or set.">要获取或设置的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的从零开始的索引。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified index number.">具有指定索引号的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)&quot; /&gt;.">
        <paramref name="index" /> 参数不是 <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" /> 的有效索引。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name.">获取或设置具有指定名称的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get from the collection.">要从集合中获取的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的名称。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">具有指定名称的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，或者如果该属性不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the collection.">从集合中移除指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">要从该集合中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index from the collection.">从集合中移除指定索引位置的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">要从集合中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this collection, using the default sort for this collection, which is usually alphabetical.">使用该集合的默认排序（通常为字母顺序）对集合中的成员进行排序。</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它包含排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">使用指定的 <see cref="T:System.Collections.IComparer" /> 对此集合中的成员排序。</summary>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">用来将此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象排序的比较器。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它包含排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">对此集合中的成员排序。 首先应用指定的顺序，然后应用此集合的默认排序，后者通常为字母顺序。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">字符串的数组，描述此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的排序顺序。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它包含排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the sort using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">对此集合中的成员排序。 首先应用指定的顺序，然后使用指定的 <see cref="T:System.Collections.IComparer" /> 进行排序。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">字符串的数组，描述此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的排序顺序。</param>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">用来将此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象排序的比较器。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它包含排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">获取集合中包含的元素数。</summary>
      <returns vsli:raw="The number of elements contained in the collection.">集合中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread safe).">获取一个值，该值指示对集合的访问是否为同步的（线程安全）。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果对集合的访问是同步的（线程安全），则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">获取可用于同步对集合的访问的对象。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">可用于同步集合访问的对象。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">向 <see cref="T:System.Collections.IDictionary" /> 添加一个带有所提供的键和值的元素。</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the key of the element to add.">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the value of the element to add.">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">从 <see cref="T:System.Collections.IDictionary" /> 中移除所有元素。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">确定是否 <see cref="T:System.Collections.IDictionary" /> 包含带有指定键的元素。</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">要在 <see cref="T:System.Collections.IDictionary" /> 中定位的键。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 包含具有键的元素，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">返回该类的枚举数。</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 类型的枚举数。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否具有固定大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">获取或设置具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key of the element to get or set.">要获取或设置的元素的键。</param>
      <returns vsli:raw="The element with the specified key.">带有指定键的元素。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">获取包含 <see cref="T:System.Collections.ICollection" /> 的键的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 的键。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">从 <see cref="T:System.Collections.IDictionary" /> 中移除包含指定键的元素。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的元素的键。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">返回 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 的一个 <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <param name="value" vsli:raw="The item to add to the collection.">要添加到集合中的项。</param>
      <returns vsli:raw="The position into which the new element was inserted.">新元素的插入位置。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">从集合中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">确定集合中是否包含特定值。</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">要在集合中定位的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在集合中找到该项，为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specified item in the collection.">确定集合中指定项的索引。</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">要在集合中定位的项。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list, otherwise -1.">如果在列表中找到了，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">将某个项插入到集合中的指定索引处。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value" vsli:raw="The item to insert into the collection.">要插入到集合中的项。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该集合具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">获取一个值，该值指示集合是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets an item from the collection at a specified index.">获取或设置指定索引处的集合中的项。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to get or set.">要获取或设置的项的从零开始的索引。</param>
      <returns vsli:raw="The element at the specified index.">指定索引处的元素。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">
        <paramref name="value" /> 不是 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">
        <paramref name="index" /> 小于 0。
或
<paramref name="index" /> 等于或大于 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specified value from the collection.">从集合中移除指定的值的第一个匹配项。</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">要从集合中移除的项。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">移除指定索引处的项。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">该集合是只读的。</exception>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary vsli:raw="Identifies the property tab or tabs to display for the specified class or classes.">标识要为指定的类显示的属性选项卡。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name.">使用指定的选项卡类名称初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类的新实例。</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">要创建的选项卡类型的程序集限定名。 有关这种格式约定的示例，请参见 <see cref="P:System.Type.AssemblyQualifiedName" />。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name and tab scope.">使用指定的选项卡类名和选项卡范围初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类的新实例。</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">要创建的选项卡类型的程序集限定名。 有关这种格式约定的示例，请参见 <see cref="P:System.Type.AssemblyQualifiedName" />。</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">一个 <see cref="T:System.ComponentModel.PropertyTabScope" />，指示此选项卡的范围。如果范围是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />，则只为具有相应 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 的组件显示它。 如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，则将为该文档的所有组件显示它。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">
        <paramref name="tabScope" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab.">使用指定的选项卡类型初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类的新实例。</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">要创建的选项卡的类型。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab and tab scope.">使用指定的选项卡类型和选项卡范围初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类的新实例。</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">要创建的选项卡的类型。</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">一个 <see cref="T:System.ComponentModel.PropertyTabScope" />，指示此选项卡的范围。如果范围是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />，则只为具有相应 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 的组件显示它。 如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，则将为该文档的所有组件显示它。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">
        <paramref name="tabScope" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified attribute.">返回一个值，该值指示此实例是否与指定的特性相等。</summary>
      <param name="other" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">要与此实例进行比较的 <see cref="T:System.ComponentModel.PropertyTabAttribute" />，或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 实例相等，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter cannot be found.">找不到 <paramref name="other" /> 参数的 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 属性指定的类型。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="other" vsli:raw="An object to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">要与此示例比较的对象，或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; refers to the same &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="other" /> 引用相同的 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 实例，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter could not be found.">未能找到 <paramref name="other" /> 参数的 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 属性指定的类型。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary vsli:raw="Gets the hash code for this object.">获取此对象的哈希代码。</summary>
      <returns vsli:raw="The hash code for the object the attribute belongs to.">该特性所属对象的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">使用指定的选项卡类名称和选项卡范围数组初始化该特性。</summary>
      <param name="tabClassNames" vsli:raw="An array of fully qualified type names of the types to create for tabs on the Properties window.">类型的完全限定类型名的数组，这些类型是为“属性”窗口上的选项卡创建的。</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">每个选项卡的范围。如果范围是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />，则只为具有相应 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 的组件显示它。 如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，则将为该文档的所有组件显示它。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="tabScopes" /> 中的一个或多个值不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。
或
<paramref name="tabClassNames" /> 的长度和 <paramref name="tabScopes" /> 数组的长度不匹配。

或 -
<paramref name="tabClassNames" /> 或 <paramref name="tabScopes" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">使用指定的选项卡类名称和选项卡范围数组初始化该特性。</summary>
      <param name="tabClasses" vsli:raw="The types of tabs to create.">要创建的选项卡的类型。</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">每个选项卡的范围。如果范围是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />，则只为具有相应 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 的组件显示它。 如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，则将为该文档的所有组件显示它。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="tabScopes" /> 中的一个或多个值不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。
或
<paramref name="tabClassNames" /> 的长度和 <paramref name="tabScopes" /> 数组的长度不匹配。
或
<paramref name="tabClassNames" /> 或 <paramref name="tabScopes" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary vsli:raw="Gets the types of tabs that this attribute uses.">获取此特性使用的选项卡的类型。</summary>
      <returns vsli:raw="An array of types indicating the types of tabs that this attribute uses.">指示此特性使用的选项卡类型的类型数组。</returns>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property could not be found.">未能找到 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 属性指定的类型。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary vsli:raw="Gets the names of the tab classes that this attribute uses.">获取此特性使用的选项卡类的名称。</summary>
      <returns vsli:raw="The names of the tab classes that this attribute uses.">此特性使用的选项卡类的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary vsli:raw="Gets an array of tab scopes of each tab of this &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;.">获取该 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 的每个选项卡的选项卡范围数组。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; objects that indicate the scopes of the tabs.">指示选项卡范围的 <see cref="T:System.ComponentModel.PropertyTabScope" /> 对象的数组。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary vsli:raw="Defines identifiers that indicate the persistence scope of a tab in the Properties window.">定义指示“属性”窗口中选项卡的持续范围的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary vsli:raw="This tab is specific to the current component. This tab is added to the Properties window for the current component only and is removed when the component is no longer selected.">此选项卡是当前组件专用的。 此选项卡只被添加到当前组件的“属性”窗口中，当不再选定该组件时，此选项卡被移除。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary vsli:raw="This tab is specific to the current document. This tab is added to the Properties window and is removed when the currently selected document changes.">此选项卡是当前文档专用的。 此选项卡被添加到“属性”窗口中，在当前选定文档更改时，此选项卡被移除。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary vsli:raw="This tab is added to the Properties window and can only be removed explicitly by a parent component.">此选项卡被添加到“属性”窗口中，并且只能由父组件将其显式移除。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary vsli:raw="This tab is added to the Properties window and cannot be removed.">此选项卡被添加到“属性”窗口中，并且不能被移除。</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary vsli:raw="Specifies the name of the property that an implementer of &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; offers to other components. This class cannot be inherited.">指定 <see cref="T:System.ComponentModel.IExtenderProvider" /> 的实施者提供给其他组件的属性的名称。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and the type of its receiver.">用该属性的名称和它的接收器类型初始化 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 类的新实例。</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">扩展到指定类型对象的属性名称。</param>
      <param name="receiverTypeName" vsli:raw="The name of the data type this property can extend.">此属性可以扩展的数据类型的名称。</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and its &lt;see cref=&quot;T:System.Type&quot; /&gt;.">用该属性的名称和它的 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 初始化 <see cref="T:System.Type" /> 类的新实例。</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">扩展到指定类型对象的属性名称。</param>
      <param name="receiverType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the data type of the object that can receive the property.">可以接收此属性的对象的数据类型的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />。</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">要进行值的相等性测试的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果给定对象的值等于当前对象的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">当前 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary vsli:raw="Gets the name of a property that this class provides.">获取该类提供的属性的名称。</summary>
      <returns vsli:raw="The name of a property that this class provides.">该类提供的属性的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary vsli:raw="Gets the name of the data type this property can extend.">获取此属性可以扩展的数据类型的名称。</summary>
      <returns vsli:raw="The name of the data type this property can extend.">此属性可以扩展的数据类型的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary vsli:raw="Gets a unique identifier for this attribute.">获取此特性的唯一标识符。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that is a unique identifier for the attribute.">一个表示该属性的唯一标识符的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary vsli:raw="Specifies that the property can be used as an application setting.">指定该属性可以用作应用程序设置。</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 类的新实例。</summary>
      <param name="recommendedAsConfigurable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该特性所绑定到的属性可以作为应用程序设置使用，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.RecommendedAsConfigurableAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 的默认值，即 <see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">指示此实例与指定对象是否相等。</summary>
      <param name="obj" vsli:raw="Another object to compare to.">要比较的另一个对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 与此实例相等，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;.">当前 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Indicates whether the value of this instance is the default value for the class.">指示此实例的值是否为该类的默认值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此实例是该类的默认属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary vsli:raw="Specifies that a property cannot be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定属性不能用作应用程序设置。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary vsli:raw="Gets a value indicating whether the property this attribute is bound to can be used as an application setting.">获取一个值，该值指示该特性绑定到的属性是否可用作应用程序设置。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该特性所绑定到的属性可以作为应用程序设置使用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary vsli:raw="Specifies that a property can be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定属性能用作应用程序设置。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary vsli:raw="Provides a type converter to convert object references to and from other representations.">提供将对象引用与其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ReferenceConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ReferenceConverter" /> 类的新实例。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this reference converter.">
        <see cref="T:System.Type" />，它表示与此引用转换器关联的类型。</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a reference object using the specified context.">获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为引用对象。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此对象可以执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the reference type.">将给定对象转换为引用类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">
        <see cref="T:System.Globalization.CultureInfo" />，它指定用于表示该字体的区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the reference type using the specified context and arguments.">使用指定上下文和参数将给定值对象转换为引用类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">
        <see cref="T:System.Globalization.CultureInfo" />，它指定用于表示该字体的区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">对象要转换为的类型。</param>
      <returns vsli:raw="The converted object.">被转换的对象。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the reference data type.">获取引用数据类型的标准值的集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exclusive list.">获取一个值，该值指示从 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 返回的标准值的列表是否为独占列表。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">返回 <see langword="true" />，因为从 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 返回的 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能的值的穷举列表。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">获取一个值，该值指示此对象是否支持可从列表中选取的标准值集。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">返回 <see langword="true" />，因为可调用 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 来查找对象支持的一组公共值。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value indicating whether a particular value can be added to the standard values collection.">返回一个值，该值指示某个特定值是否可以添加到标准值集合中。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides an additional context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供附加上下文。</param>
      <param name="value" vsli:raw="The value to check.">要检查的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is allowed and can be added to the standard values collection; &lt;see langword=&quot;false&quot; /&gt; if the value cannot be added to the standard values collection.">如果该值是允许值并可以添加到标准值集合中，则为 <see langword="true" />；如果该值不能添加到标准值集合中，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event.">为 <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the component that has changed.">用已更改的组件初始化 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 类的新实例。</summary>
      <param name="componentChanged" vsli:raw="The component that changed.">已更改的组件。</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the type of component that has changed.">用已更改的组件类型初始化 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 类的新实例。</summary>
      <param name="typeChanged" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">已更改的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary vsli:raw="Gets the component that changed its properties, events, or extenders.">获取已更改属性、事件或扩展程序的组件。</summary>
      <returns vsli:raw="The component that changed its properties, events, or extenders, or &lt;see langword=&quot;null&quot; /&gt; if all components of the same type have changed.">已更改其属性、事件或扩展程序的组件；如果同一类型的所有组件都已更改，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">获取已更改属性或事件的 <see cref="T:System.Type" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">已更改属性或事件的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event raised when a &lt;see cref=&quot;T:System.Type&quot; /&gt; or component is changed during design time.">表示处理当 <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 或组件在设计时被更改时引发的 <see cref="T:System.Type" /> 事件的方法。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; that contains the component or &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">包含被更改的组件或 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary vsli:raw="Specifies whether the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed.">指定在安装程序集时是否应调用 Visual Studio 自定义操作安装程序或 Installutil.exe （安装程序工具）。</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 类的新实例。</summary>
      <param name="runInstaller" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在程序集安装过程中应调用某安装程序，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary vsli:raw="Specifies the default visibility, which is &lt;see cref=&quot;F:System.ComponentModel.RunInstallerAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定默认可见性，即 <see cref="F:System.ComponentModel.RunInstallerAttribute.No" />。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the value of the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equivalent to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">确定指定的 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 的值是否与当前的 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 等效。</summary>
      <param name="obj" vsli:raw="The object to compare.">要比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.ComponentModel.RunInstallerAttribute" />，则为 <see cref="T:System.ComponentModel.RunInstallerAttribute" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary vsli:raw="Generates a hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">生成当前 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 的哈希代码。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">当前 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">确定此特性是否为默认特性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此特性是此特性类的默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should not be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定在安装程序集时不应调用 Visual Studio 自定义操作安装程序或 Installutil.exe （安装程序工具）。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary vsli:raw="Gets a value indicating whether an installer should be invoked during installation of an assembly.">获取一个值，该值指示在程序集安装期间是否调用某安装程序。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在程序集安装过程中应调用某安装程序，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定在安装程序集时应调用 Visual Studio 自定义操作安装程序或 Installutil.exe （安装程序工具）。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from a string.">提供将 8 位无符号整数对象与字符串相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SByteConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.SByteConverter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary vsli:raw="Specifies when a component property can be bound to an application setting.">指定何时可将组件属性绑定到应用程序设置。</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SettingsBindableAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.SettingsBindableAttribute" /> 类的新实例。</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that a property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要指定适合将属性绑定到设置，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating whether a property is appropriate to bind settings to.">获取一个值，该值指示是否适合将属性绑定到设置。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果适合将属性绑定到设置，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">要与此实例或 null 引用 （Visual Basic 中的 <see langword="Nothing" />）进行比较的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位有符号整数哈希代码。</returns>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not appropriate to bind settings to.">指定不适合将属性绑定到设置。</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is appropriate to bind settings to.">指定适合将属性绑定到设置。</summary>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary vsli:raw="Provides a type converter to convert single-precision, floating point number objects to and from various other representations.">提供将单精度浮点数字对象与各种其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SingleConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.SingleConverter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary vsli:raw="Provides a type converter to convert string objects to and from other representations.">提供在字符串对象与其他表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.StringConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.StringConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a string using the specified context.">获取一个值，该值指示此转换器是否可以使用指定的上下文将给定源类型中的对象转换为字符串。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">将指定的值对象转换为 <see cref="T:System.String" /> 对象。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use.">要使用的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">转换未能执行。</exception>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary vsli:raw="Provides methods to verify the machine name and path conform to a specific syntax. This class cannot be inherited.">提供方法来验证计算机名称和路径是否符合特定语法。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary vsli:raw="Checks the syntax of the machine name to confirm that it does not contain &quot;\&quot;.">检查计算机名称的语法以确认它不包含“\”。</summary>
      <param name="value" vsli:raw="A string containing the machine name to check.">一个字符串，包含要检查的计算机名称。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper machine name format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 与正确的计算机名称格式匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see whether it starts with &quot;\\&quot;.">检查路径的语法以查看它是否以“\\”开头。</summary>
      <param name="value" vsli:raw="A string containing the path to check.">一个字符串，包含要检查的路径。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 与正确的路径格式匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see if it starts with &quot;\&quot; or drive letter &quot;C:&quot;.">检查路径的语法以查看它是否以“\”或驱动器号“C:”开头。</summary>
      <param name="value" vsli:raw="A string containing the path to check.">一个字符串，包含要检查的路径。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 与正确的路径格式匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; objects to and from other representations.">提供将 <see cref="T:System.TimeSpan" /> 对象与其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TimeSpanConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.TimeSpanConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; using the specified context.">获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为 <see cref="T:System.TimeSpan" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;.">将给定对象转换为 <see cref="T:System.TimeSpan" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">将给定对象转换为其他类型。</summary>
      <param name="context" vsli:raw="A formatter context.">格式化程序上下文。</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" /> 将要转换到的区域性。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">对象要转换为的类型。</param>
      <returns vsli:raw="The converted object.">被转换的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary vsli:raw="Represents an attribute of a toolbox item.">表示工具箱项的特性。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and specifies whether to use default initialization values.">初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类的新实例，并指定是否使用默认初始化值。</summary>
      <param name="defaultType" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to create a toolbox item attribute for a default type; &lt;see langword=&quot;false&quot; /&gt; to associate no default toolbox item support for this attribute.">如果为 <see langword="true" />，则创建默认类型的工具箱项特性；如果为 <see langword="false" />，则不为该特性关联默认工具箱项支持。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified name of the type.">使用指定的类型名称初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类的新实例。</summary>
      <param name="toolboxItemTypeName" vsli:raw="The names of the type of the toolbox item and of the assembly that contains the type.">工具箱项的类型名称和包含该类型的程序集的名称。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified type of the toolbox item.">使用工具箱项的指定类型初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类的新实例。</summary>
      <param name="toolboxItemType" vsli:raw="The type of the toolbox item.">工具箱项的类型。</param>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to the default, &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;. This field is read-only.">初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类的新实例并将类型设置为默认值 <see cref="T:System.Drawing.Design.ToolboxItem" />。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">要与此实例或 null 引用 （Visual Basic 中的 <see langword="Nothing" />）进行比较的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">获取一个值，该值指示该特性的当前值是否为该特性的默认值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该特性的当前值是默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to &lt;see langword=&quot;null&quot; /&gt;. This field is read-only.">初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类的新实例并将类型设置为 <see langword="null" />。 此字段为只读。</summary>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary vsli:raw="Gets or sets the type of the toolbox item.">获取或设置工具箱项的类型。</summary>
      <returns vsli:raw="The type of the toolbox item.">工具箱项的类型。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The type cannot be found.">找不到此类型。</exception>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary vsli:raw="Gets or sets the name of the type of the current &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;.">获取或设置当前 <see cref="T:System.Drawing.Design.ToolboxItem" /> 的类型名称。</summary>
      <returns vsli:raw="The fully qualified type name of the current toolbox item.">当前工具箱项的完全限定类型名称。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary vsli:raw="Specifies the filter string and filter type to use for a toolbox item.">为工具箱项指定要使用的筛选器字符串和筛选器类型。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string.">使用指定的筛选器字符串初始化 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 类的新实例。</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">工具箱项的筛选器字符串。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string and type.">使用指定的筛选器字符串和类型初始化 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 类的新实例。</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">工具箱项的筛选器字符串。</param>
      <param name="filterType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; indicating the type of the filter.">
        <see cref="T:System.ComponentModel.ToolboxItemFilterType" />，它指示筛选器的类型。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">要与此实例或 null 引用 （Visual Basic 中的 <see langword="Nothing" />）进行比较的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary vsli:raw="Gets the filter string for the toolbox item.">获取工具箱项的筛选器字符串。</summary>
      <returns vsli:raw="The filter string for the toolbox item.">工具箱项的筛选器字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary vsli:raw="Gets the type of the filter.">获取筛选器的类型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; that indicates the type of the filter.">
        <see cref="T:System.ComponentModel.ToolboxItemFilterType" />，它指示筛选器的类型。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">返回此实例的哈希代码。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary vsli:raw="Indicates whether the specified object has a matching filter string.">指示指定对象是否有匹配的筛选器字符串。</summary>
      <param name="obj" vsli:raw="The object to test for a matching filter string.">针对其是否有匹配的筛选器字符串来进行测试的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object has a matching filter string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定对象有匹配的筛选器字符串，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary vsli:raw="Returns a string that represents the current object.">返回表示当前对象的字符串。</summary>
      <returns vsli:raw="A string that represents the current object.">表示当前对象的字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary vsli:raw="Gets the type ID for the attribute.">获取特性的类型 ID。</summary>
      <returns vsli:raw="The type ID for this attribute. All &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; objects with the same filter string return the same type ID.">此特性的类型 ID。 所有带有相同 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 筛选器字符串的对象都返回相同的类型 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary vsli:raw="Defines identifiers used to indicate the type of filter that a &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; uses.">定义用于指示 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 使用的筛选器类型的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary vsli:raw="Indicates that a toolbox item filter string is allowed, but not required.">指示某个工具箱项筛选器字符串是允许的，但不是必需的。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary vsli:raw="Indicates that custom processing is required to determine whether to use a toolbox item filter string. It is typically specified on a root designer class to indicate that the designer wishes to accept or reject a toolbox item through code. The designer must implement the &lt;see cref=&quot;M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)&quot; /&gt; method of the &lt;see cref=&quot;T:System.Drawing.Design.IToolboxUser&quot; /&gt; interface.">指示需要自定义处理来确定是否使用工具箱项筛选器字符串。 它通常在根设计器类上指定，用于指示设计器希望通过代码接受或拒绝工具箱项。 设计器必须实现 <see cref="T:System.Drawing.Design.IToolboxUser" /> 接口的 <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" /> 方法。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary vsli:raw="Indicates that a toolbox item filter string is not allowed. If a designer and a component class both have a filter string and the value of one is &lt;c&gt;ToolboxItemFilterType.Prevent&lt;/c&gt;, the toolbox item will not be available.">指示某个工具箱项筛选器字符串不被允许。 如果设计器和组件类都具有筛选器字符串，并且其中一个的值为 <c>ToolboxItemFilterType.Prevent</c>，则工具箱项将不可用。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary vsli:raw="Indicates that a toolbox item filter string must be present for a toolbox item to be enabled.  For a toolbox item with a filter type of &lt;c&gt;Require&lt;/c&gt; to be enabled, the designer and the component class must have a matching filter string. Additionally, neither the designer or component class can have a filter type of &lt;c&gt;Prevent&lt;/c&gt; for the toolbox item to be enabled.">指示若要启用工具箱项，必须存在工具箱项筛选器字符串。  若要启用筛选器类型为 <c>Require</c> 的工具箱项，设计器和组件类都必须具有匹配的筛选字符串。 此外，若要启用工具箱项，设计器或组件类都不能具有 <c>Prevent</c> 筛选器类型。</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary vsli:raw="Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.">提供一种将值的类型转换为其他类型以及访问标准值和子属性的统一方法。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.TypeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">返回该转换器是否可以使用指定上下文将给定类型的对象转换为此转换器的类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">返回该转换器是否可以将给定类型的对象转换为此转换器的类型。</summary>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">返回此转换器能否使用指定上下文将对象转换为指定类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">一个 <see cref="T:System.Type" />，表示你希望转换为的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">返回此转换器是否可将该对象转换为指定的类型。</summary>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">一个 <see cref="T:System.Type" />，表示你希望转换为的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">使用指定的上下文和区域性信息将给定对象转换为此转换器的类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary vsli:raw="Converts the given value to the type of this converter.">将给定值转换为此转换器的类型。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture and the specified context.">使用不变区域性和指定上下文将给定字符串转换为此转换器的类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">要转换的 <see cref="T:System.String" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">一个 <see cref="T:System.Object" />，表示已转换的文本。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture.">使用不变区域性将给定字符串转换为此转换器的类型。</summary>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">要转换的 <see cref="T:System.String" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">一个 <see cref="T:System.Object" />，表示已转换的文本。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context and culture information.">使用指定的上下文和区域性信息将给定的文本转换为对象。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 如果传递 <see langword="null" />，则采用当前区域性。</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">要转换的 <see cref="T:System.String" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">一个 <see cref="T:System.Object" />，表示已转换的文本。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context.">使用指定的上下文将给定的文本转换为对象。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">要转换的 <see cref="T:System.String" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">一个 <see cref="T:System.Object" />，表示已转换的文本。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary vsli:raw="Converts the specified text to an object.">将指定文本转换为对象。</summary>
      <param name="text" vsli:raw="The text representation of the object to convert.">要转换的对象的文本表示形式。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">一个 <see cref="T:System.Object" />，表示已转换的文本。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The string cannot be converted into the appropriate object.">该字符串不能转换为适当的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">使用指定的上下文和区域性信息将给定值对象转换为指定的类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 如果传递 <see langword="null" />，则采用当前区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <paramref name="value" /> 参数要转换成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the arguments.">使用参数将给定的值对象转换为指定的类型。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <paramref name="value" /> 参数要转换成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation, using the specified context.">使用指定的上下文将指定的值转换为区域性不变的字符串表示形式。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">
        <see cref="T:System.String" />，表示已转换的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation.">将指定值转换为区域性不变的字符串表示形式。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">
        <see cref="T:System.String" />，表示已转换的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the specified context and culture information.">使用指定的上下文和区域性信息将给定的值转换为字符串表示形式。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 如果传递 <see langword="null" />，则采用当前区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the given context.">使用给定的上下文将给定的值转换为字符串表示形式。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary vsli:raw="Converts the specified value to a string representation.">将指定值转换为字符串表示形式。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary vsli:raw="Re-creates an &lt;see cref=&quot;T:System.Object&quot; /&gt; given a set of property values for the object.">在给定 <see cref="T:System.Object" /> 的一组属性值的情况下重新创建该对象。</summary>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; that represents a dictionary of new property values.">一个 <see cref="T:System.Collections.IDictionary" />，表示新属性值的字典。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">如果表示给定 <see cref="T:System.Collections.IDictionary" />，则为 <see cref="T:System.Object" />，或如果无法创建对象，则为 <see langword="null" />。 此方法始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">给定该对象的一组属性值，使用指定上下文创建与此 <see cref="T:System.ComponentModel.TypeConverter" /> 相关联的类型的实例。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">新属性值的 <see cref="T:System.Collections.IDictionary" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">如果表示给定 <see cref="T:System.Collections.IDictionary" />，则为 <see cref="T:System.Object" />，或如果无法创建对象，则为 <see langword="null" />。 此方法始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">返回无法执行转换时引发的异常。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">要转换的 <see cref="T:System.Object" />，或者，如果该对象不可用，则为 <see langword="null" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">一个 <see cref="T:System.Exception" />，表示当无法执行转换时引发的异常。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">由此方法自动引发。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">返回无法执行转换时引发的异常。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">要转换的 <see cref="T:System.Object" />，或者，如果该对象不可用，则为 <see langword="null" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type the conversion was trying to convert to.">一个 <see cref="T:System.Type" />，表示转换尝试转换到的类型。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">一个 <see cref="T:System.Exception" />，表示当无法执行转换时引发的异常。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">由此方法自动引发。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to the &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; method to create a new value.">返回更改此对象的值是否求调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 方法来创建新值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果更改此对象的属性需要调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 来创建新值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">返回有关更改该对象上的某个值是否需要使用指定的上下文调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 以创建新值的情况。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果更改此对象的属性需要调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 来创建新值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context.">使用指定的上下文返回值参数指定的数组类型的属性的集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">一个 <see cref="T:System.Object" />，指定要为其获取属性的数组类型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">使用指定的上下文和特性返回由 value 参数指定的数组类型的属性的集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">一个 <see cref="T:System.Object" /> ，它指定要为其获取属性的数组类型。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter.">返回由值参数指定的数组类型的属性集合。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">一个 <see cref="T:System.Object" />，指定要为其获取属性的数组类型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary vsli:raw="Returns whether this object supports properties.">返回此对象是否支持属性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果应调用 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 来查找此对象的属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">使用指定的上下文返回该对象是否支持属性。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果应调用 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 来查找此对象的属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary vsli:raw="Returns a collection of standard values from the default context for the data type this type converter is designed for.">从默认的上下文返回此类型转换器设计用于的数据类型的标准值集合。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">含有一组标准的有效值的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，或者如果数据类型不支持一组标准值，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">当与格式上下文一起提供时，返回此类型转换器设计用于的数据类型的标准值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用来提取有关从中调用此转换器的环境的附加信息。 此参数或其属性可以为 <see langword="null" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list.">返回从 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的标准值的集合是否为独占列表。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">如果从 <see langword="true" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；如果还可能有其他值，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">使用指定的上下文返回从 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的标准值的集合是否为可能值的独占列表。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">如果从 <see langword="true" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；如果还可能有其他值，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list.">返回此对象是否支持可以从列表中选取的标准值集。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果应调用 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 来查找对象支持的一组公共值，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">使用指定的上下文返回此对象是否支持可以从列表中选取的标准值集。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果应调用 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 来查找对象支持的一组公共值，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">返回给定值对象对于此类型和此指定的上下文是否有效。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">要测试其有效性的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定值对于该对象有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type.">返回给定值对象对于此类型是否有效。</summary>
      <param name="value" vsli:raw="The object to test for validity.">要测试其有效性的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定值对于该对象有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary vsli:raw="Represents an &lt;see langword=&quot;abstract&quot; /&gt; class that provides properties for objects that do not have properties.">表示一个 <see langword="abstract" /> 类，该类为没有属性的对象提供属性。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 类的新实例。</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">一个 <see cref="T:System.Type" />，表示此属性说明符绑定到的组件的类型。</param>
      <param name="name" vsli:raw="The name of the property.">属性的名称。</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">一个 <see cref="T:System.Type" />，表示此属性的数据类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 类的新实例。</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">一个 <see cref="T:System.Type" />，表示此属性说明符绑定到的组件的类型。</param>
      <param name="name" vsli:raw="The name of the property.">属性的名称。</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">一个 <see cref="T:System.Type" />，表示此属性的数据类型。</param>
      <param name="attributes" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes to associate with the property.">一个 <see cref="T:System.Attribute" /> 数组，具有要与该属性关联的特性。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="Returns whether resetting the component changes the value of the component.">返回重置组件是否会更改该组件的值。</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">要测试重置功能的组件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes the value of the component; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果重置组件更改该组件的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary vsli:raw="Gets the type of component to which this property description binds.">获取该属性说明符绑定到的组件的类型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property binds.">一个 <see cref="T:System.Type" />，表示此属性绑定到的组件的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this property is read-only.">获取指示该属性是否为只读的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; &lt;see langword=&quot;false&quot; /&gt; if the property is read/write.">如果该属性为只读，则为 <see langword="true" />；如果该属性为读/写，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary vsli:raw="Gets the type of the property.">获取属性的类型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">一个 <see cref="T:System.Type" />，表示属性的类型。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="Resets the value for this property of the component.">重置组件的此属性的值。</summary>
      <param name="component" vsli:raw="The component with the property value to be reset.">具有要重置的属性值的组件。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="Returns whether the value of this property can persist.">返回此属性的值是否可以持续。</summary>
      <param name="component" vsli:raw="The component with the property that is to be examined for persistence.">具有要检查持久性的属性的组件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the property can persist; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果属性的值可以持续，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary vsli:raw="Sorts a collection of properties.">对属性的集合进行排序。</summary>
      <param name="props" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that has the properties to sort.">具有要排序的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</param>
      <param name="names" vsli:raw="An array of names in the order you want the properties to appear in the collection.">按您要属性在集合中出现的顺序排列的名称的数组。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted properties.">包含已排序属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary vsli:raw="Represents a collection of values.">表示值的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 类的新实例。</summary>
      <param name="values" vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that represents the objects to put into the collection.">一个 <see cref="T:System.Collections.ICollection" />，表示要放入集合的对象。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of this collection to an array.">将该集合的内容复制到数组。</summary>
      <param name="array" vsli:raw="An &lt;see cref=&quot;T:System.Array&quot; /&gt; that represents the array to copy to.">一个 <see cref="T:System.Array" />，表示要复制到的数组。</param>
      <param name="index" vsli:raw="The index to start from.">从其开始的索引。</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary vsli:raw="Gets the number of objects in the collection.">获取集合中的对象数。</summary>
      <returns vsli:raw="The number of objects in the collection.">集合中的对象数。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this collection.">返回该集合的枚举数。</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 类型的枚举数。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the object at the specified index number.">获取指定索引号位置的对象。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.Object&quot; /&gt; to get from the collection.">要从集合中获取的 <see cref="T:System.Object" /> 的从零开始的索引。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; with the specified index.">具有指定索引的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.IsSynchronized&quot; /&gt;.">有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">在所有情况下均为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.SyncRoot&quot; /&gt;.">有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;null&quot; /&gt; in all cases.">在所有情况下均为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>指定对于此属性绑定到的对象要使用哪种类型作为转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>使用默认类型转换器，即空字符串（""）初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>通过将指定类型名称用作该属性所绑定到的对象的数据转换器，初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 类的新实例。</summary>
      <param name="typeName">类的完全限定名，该类将用于此属性所绑定到的对象的数据转换。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>通过将指定类型用作该属性所绑定到的对象的数据转换器，初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 类的新实例。</summary>
      <param name="type">表示转换器类的类型的 <see cref="T:System.Type" />，它将用于该特性所绑定到的对象的数据转换。</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>获取 <see cref="T:System.Type" /> 的完全限定的类型名，以将其用作此特性所绑定到的对象的转换器。</summary>
      <returns>
        <see cref="T:System.Type" /> 的完全限定的类型名，它将用作此特性所绑定到的对象的转换器；如果不存在，则为空字符串 ("")。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary>指定用作此特性所绑定到的对象的转换器的类型。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.TypeConverterAttribute" />。</summary>
      <param name="obj">要进行值的相等性测试的对象。</param>
      <returns>如果给定对象的值等于当前 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary vsli:raw="Provides supplemental metadata to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">向 <see cref="T:System.ComponentModel.TypeDescriptor" /> 提供补充元数据。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class using a parent type description provider.">使用父类型说明提供程序初始化 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 类的新实例。</summary>
      <param name="parent" vsli:raw="The parent type description provider.">父类型说明提供程序。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">创建可替换为另一种数据类型的对象。</summary>
      <param name="provider" vsli:raw="An optional service provider.">可选的服务提供程序。</param>
      <param name="objectType" vsli:raw="The type of object to create. This parameter is never &lt;see langword=&quot;null&quot; /&gt;.">要创建的对象的类型。 此参数决不能为 <see langword="null" />。</param>
      <param name="argTypes" vsli:raw="An optional array of types that represent the parameter types to be passed to the object's constructor. This array can be &lt;see langword=&quot;null&quot; /&gt; or of zero length.">可选的类型数组，其中的类型表示要传递给对象的构造函数的参数类型。 此数组可为 <see langword="null" /> 或长度为零。</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor.">要传递给对象的构造函数的可选参数值数组。</param>
      <returns vsli:raw="The substitute &lt;see cref=&quot;T:System.Object&quot; /&gt;.">替代用 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary vsli:raw="Gets a per-object cache, accessed as an &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of key/value pairs.">获取每个对象均对应有的缓存，此缓存可作为键/值对的 <see cref="T:System.Collections.IDictionary" /> 进行访问。</summary>
      <param name="instance" vsli:raw="The object for which to get the cache.">要获取与其对应的缓存的对象。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; if the provided object supports caching; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果提供的对象支持缓存，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets an extended custom type descriptor for the given object.">为给定的对象获取扩展的自定义类型说明符。</summary>
      <param name="instance" vsli:raw="The object for which to get the extended type descriptor.">要为其获取扩展类型说明符的对象。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide extended metadata for the object.">可以为对象提供扩展元数据的 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary vsli:raw="Gets the extender providers for the specified object.">获取指定对象的扩展程序提供程序。</summary>
      <param name="instance" vsli:raw="The object to get extender providers for.">要为其获取扩展程序提供程序的对象。</param>
      <returns vsli:raw="An array of extender providers for &lt;paramref name=&quot;instance&quot; /&gt;.">
        <paramref name="instance" /> 的扩展程序提供程序的数组。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">获取指定的组件的名称，如果指定的组件没有名称，则为 <see langword="null" />。</summary>
      <param name="component" vsli:raw="The specified component.">指定的组件。</param>
      <returns vsli:raw="The name of the specified component.">指定组件的名称。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object.">针对给定对象执行正常反射。</summary>
      <param name="instance" vsli:raw="An instance of the type (should not be &lt;see langword=&quot;null&quot; /&gt;).">类型的实例（不应为 <see langword="null" />）。</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;instance&quot; /&gt;.">此 <paramref name="instance" /> 的反射的类型。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary vsli:raw="Performs normal reflection against a type.">针对某个类型执行正常反射。</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">要为其检索 <see cref="T:System.Reflection.IReflect" /> 的对象的类型。</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">此 <paramref name="objectType" /> 的反射的类型。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="objectType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object with the given type.">针对具有给定类型的给定对象执行正常反射。</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">要为其检索 <see cref="T:System.Reflection.IReflect" /> 的对象的类型。</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt;.">该类型的实例。 可以为 <see langword="null" />。</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">此 <paramref name="objectType" /> 的反射的类型。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary vsli:raw="Converts a reflection type into a runtime type.">将反射类型转换为运行时类型。</summary>
      <param name="reflectionType" vsli:raw="The type to convert to its runtime equivalent.">要转换为其运行时等效项的类型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the runtime equivalent of &lt;paramref name=&quot;reflectionType&quot; /&gt;.">一个 <see cref="T:System.Type" />，表示 <paramref name="reflectionType" /> 的运行时等效项。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reflectionType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reflectionType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given object.">获取给定对象的自定义类型说明符。</summary>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">该类型的实例。 如果没有向 <see cref="T:System.ComponentModel.TypeDescriptor" /> 传递任何实例，则可以是 <see langword="null" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">可以为该类型提供元数据的 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary vsli:raw="Gets a custom type descriptor for the given type.">获取给定类型的自定义类型说明符。</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">要为其检索类型说明符的对象的类型。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">可以为该类型提供元数据的 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given type and object.">获取给定类型和对象的自定义类型说明符。</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">要为其检索类型说明符的对象的类型。</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">该类型的实例。 如果没有向 <see cref="T:System.ComponentModel.TypeDescriptor" /> 传递任何实例，则可以是 <see langword="null" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">可以为该类型提供元数据的 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary vsli:raw="Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers.">获取一个值，该值指示指定的类型是否与类型说明及其类型说明提供程序链兼容。</summary>
      <param name="type" vsli:raw="The type to test for compatibility.">要测试兼容性的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;type&quot; /&gt; is compatible with the type description and its chain of type description providers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="type" /> 与类型说明及其类型说明提供程序链兼容，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary>指定类的自定义类型说明提供程序。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary>使用指定的类型名称初始化 <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> 类的新实例。</summary>
      <param name="typeName">类型的限定名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary>使用指定的类型初始化 <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> 类的新实例。</summary>
      <param name="type">要存储在特性中的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary>获取类型说明提供程序的类型名称。</summary>
      <returns>包含 <see cref="T:System.String" /> 的限定类型名称的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary vsli:raw="Provides information about the characteristics for a component, such as its attributes, properties, and events. This class cannot be inherited.">提供有关组件特征的信息，如组件的特性、属性和事件。 无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component instance.">向目标组件实例添加类级别属性。</summary>
      <param name="instance" vsli:raw="An instance of the target component.">目标组件的实例。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">要添加到组件的类的 <see cref="T:System.Attribute" /> 对象数组。</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">用于添加指定属性的新创建的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component type.">向目标组件类型添加类级别属性。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">要添加到组件的类的 <see cref="T:System.Attribute" /> 对象数组。</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">用于添加指定属性的新创建的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary vsli:raw="Adds an editor table for the given editor base type.">为给定的编辑器基类型添加编辑器表。</summary>
      <param name="editorBaseType" vsli:raw="The editor base type to add the editor table for. If a table already exists for this type, this method will do nothing.">要添加编辑器表的编辑器基类型。 如果针对此类型的表已存在，此方法将不起作用。</param>
      <param name="table" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Hashtable&quot; /&gt; to add.">要添加的 <see cref="T:System.Collections.Hashtable" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">为某个组件的单个实例添加类型描述提供程序。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance" vsli:raw="An instance of the target component.">目标组件的实例。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">为组件类添加类型说明提供程序。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">为某个组件的单个实例添加类型描述提供程序。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance" vsli:raw="An instance of the target component.">目标组件的实例。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">为组件类添加类型说明提供程序。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary vsli:raw="Gets or sets the provider for the Component Object Model (COM) type information for the target component.">获取或设置用于目标组件的组件对象模型 (COM) 类型信息的提供程序。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComNativeDescriptorHandler&quot; /&gt; instance representing the COM type information provider.">
        <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" /> 实例，表示 COM 类型的信息提供程序实例。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary vsli:raw="Gets the type of the Component Object Model (COM) object represented by the target component.">获取由目标组件表示的组件对象模型 (COM) 对象的类型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the COM object represented by this component, or &lt;see langword=&quot;null&quot; /&gt; for non-COM objects.">由此组件表示的 COM 对象的 <see cref="T:System.Type" />，或非 COM 对象的 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary vsli:raw="Creates a primary-secondary association between two objects.">在两个对象之间创建主要和辅助关联。</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">主要 <see cref="T:System.Object" />。</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">辅助 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">两个参数之一或两个参数均为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is equal to &lt;paramref name=&quot;secondary&quot; /&gt;.">
        <paramref name="primary" /> 等于 <paramref name="secondary" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary vsli:raw="Creates an instance of the designer associated with the specified component and of the specified type of designer.">创建与指定组件关联的具有特定类型的设计器的实例。</summary>
      <param name="component" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that specifies the component to associate with the designer.">指定要与设计器关联的组件的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="designerBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of designer to create.">表示要创建的设计器的类型的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; that is an instance of the designer for the component, or &lt;see langword=&quot;null&quot; /&gt; if no designer can be found.">如果找到组件的设计器实例，则为 <see cref="T:System.ComponentModel.Design.IDesigner" />；如果未找到设计器，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor, when passed the existing &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">当传递现有的 <see cref="T:System.ComponentModel.EventDescriptor" /> 时，创建和现有事件描述符相同的新的事件描述符。</summary>
      <param name="componentType" vsli:raw="The type of the component for which to create the new event.">要为其创建新事件的组件类型。</param>
      <param name="oldEventDescriptor" vsli:raw="The existing event information.">现有事件信息。</param>
      <param name="attributes" vsli:raw="The new attributes.">新属性。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that has merged the specified metadata attributes with the existing metadata attributes.">将指定元数据属性与现有元数据属性进行合并的新 <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor by dynamically generating descriptor information from a specified event on a type.">通过从类型上的指定事件动态生成描述符信息，创建与现有事件描述符相同的新事件描述符。</summary>
      <param name="componentType" vsli:raw="The type of the component the event lives on.">该事件依赖的组件的类型。</param>
      <param name="name" vsli:raw="The name of the event.">事件的名称。</param>
      <param name="type" vsli:raw="The type of the delegate that handles the event.">处理该事件的委托的类型。</param>
      <param name="attributes" vsli:raw="The attributes for this event.">此事件的属性。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that is bound to a type.">绑定到类型的 <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">创建可替换为另一种数据类型的对象。</summary>
      <param name="provider" vsli:raw="The service provider that provides a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; service. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">提供 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 服务的服务提供程序。 此参数可以为 <see langword="null" />。</param>
      <param name="objectType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of object to create.">要创建的对象的 <see cref="T:System.Type" />。</param>
      <param name="argTypes" vsli:raw="An optional array of parameter types to be passed to the object's constructor. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an array of zero length.">要传递给对象的构造函数的可选参数类型数组。 此参数可以是 <see langword="null" /> 或长度为零的数组。</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor. If not &lt;see langword=&quot;null&quot; /&gt;, the number of elements must be the same as &lt;paramref name=&quot;argTypes&quot; /&gt;.">要传递给对象的构造函数的可选参数值数组。 如果不是 <see langword="null" />，元素数则必须与 <paramref name="argTypes" /> 相同。</param>
      <returns vsli:raw="An instance of the substitute data type if an associated &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; is found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果找到关联的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />，则为替代数据类型的实例；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or &lt;paramref name=&quot;args&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; when &lt;paramref name=&quot;argTypes&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="objectType" /> 是 <see langword="null" />，或者，当 <paramref name="args" /> 不是 <see langword="null" /> 时，则 <paramref name="argTypes" /> 是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;argTypes&quot; /&gt; and &lt;paramref name=&quot;args&quot; /&gt; have different number of elements.">
        <paramref name="argTypes" /> 和 <paramref name="args" /> 具有不同的元素数。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new property descriptor from an existing property descriptor, using the specified existing &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and attribute array.">使用指定的现有 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和特性数组，从现有的属性描述符创建一个新的属性描述符。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">属性是其一个成员的组件的 <see cref="T:System.Type" />。</param>
      <param name="oldPropertyDescriptor" vsli:raw="The existing property descriptor.">现有的属性描述符。</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">此属性的新特性。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that has the specified metadata attributes merged with the existing metadata attributes.">一个将指定的元数据属性与现有的元数据属性进行合并的新 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates and dynamically binds a property descriptor to a type, using the specified property name, type, and attribute array.">使用指定的属性名称、类型和属性数组创建属性描述符，并将其动态地绑定到类型。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">属性是其一个成员的组件的 <see cref="T:System.Type" />。</param>
      <param name="name" vsli:raw="The name of the property.">属性的名称。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the property.">属性的 <see cref="T:System.Type" />。</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">此属性的新特性。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is bound to the specified type and that has the specified metadata attributes merged with the existing metadata attributes.">绑定到指定类型并具有与现有元数据属性合并的指定元数据属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary vsli:raw="Returns an instance of the type associated with the specified primary object.">返回与指定的主要对象关联的类型的实例。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="primary" vsli:raw="The primary object of the association.">关联的主要对象。</param>
      <returns vsli:raw="An instance of the secondary type that has been associated with the primary object if an association exists; otherwise, &lt;paramref name=&quot;primary&quot; /&gt; if no specified association exists.">如果存在关联，则为已与主要对象相关联的辅助类型的一个实例；否则，如果不存在指定的关联，为 <paramref name="primary" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary vsli:raw="Returns the collection of attributes for the specified component.">返回指定组件的属性的集合。</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">要为其获取特性的组件。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the component. If &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">包含该组件的属性的 <see cref="T:System.ComponentModel.AttributeCollection" />。 如果 <paramref name="component" /> 为 <see langword="null" />，则此方法返回一个空集合。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a collection of attributes for the specified component and a Boolean indicating that a custom type descriptor has been created.">为指定组件返回特性集合，并且创建了一个指示自定义类型描述符的布尔值。</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">要为其获取特性的组件。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use a baseline set of attributes from the custom type descriptor if &lt;paramref name=&quot;component&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的类型是 <paramref name="component" />，使用自定义类型说明符中特性的基准要求集时为 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">具有组件的特性的 <see cref="T:System.ComponentModel.AttributeCollection" />。 如果组件为 <see langword="null" />，则此方法返回一个空集合。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary vsli:raw="Returns a collection of attributes for the specified type of component.">返回指定组件类型的属性集合。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目标组件的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the type of the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">具有该组件类型的特性的 <see cref="T:System.ComponentModel.AttributeCollection" />。 如果组件为 <see langword="null" />，则此方法返回一个空集合。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary vsli:raw="Returns the name of the class for the specified component using the default type descriptor.">使用默认类型描述符，返回指定组件的类的名称。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">需要其类名的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">一个包含指定组件的类的名称的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the class for the specified component using a custom type descriptor.">使用自定义类型描述符返回指定组件的类的名称。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">需要其类名的 <see cref="T:System.Object" />。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，则考虑自定义类型描述信息；否则为 <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">一个包含指定组件的类的名称的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary vsli:raw="Returns the name of the class for the specified type.">返回指定类型的类的名称。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目标组件的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component type.">一个 <see cref="T:System.String" />，其中包含指定组件类型的类的名称。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary vsli:raw="Returns the name of the specified component using the default type descriptor.">使用默认类型描述符返回指定组件的名称。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">需要其类名的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">包含指定组件的名称的 <see cref="T:System.String" />，如果没有任何组件名，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the specified component using a custom type descriptor.">使用自定义类型描述符返回指定组件的名称。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">需要其类名的 <see cref="T:System.Object" />。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，则考虑自定义类型描述信息；否则为 <see langword="false" />。</param>
      <returns vsli:raw="The name of the class for the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">为指定组件的类名，或者，如果不存在任何组件名，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary vsli:raw="Returns a type converter for the type of the specified component.">返回指定组件类型的类型转换器。</summary>
      <param name="component" vsli:raw="A component to get the converter for.">要为其获取转换器的组件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">指定组件的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a type converter for the type of the specified component with a custom type descriptor.">为具有自定义类型描述符的指定组件类型返回一个类型转换器。</summary>
      <param name="component" vsli:raw="A component to get the converter for.">要为其获取转换器的组件。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，则考虑自定义类型描述信息；否则为 <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">指定组件的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary vsli:raw="Returns a type converter for the specified type.">返回指定类型的类型转换器。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目标组件的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">指定类型的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Returns the default event for the specified component.">返回指定组件的默认事件。</summary>
      <param name="component" vsli:raw="The component to get the event for.">要获取其事件的组件。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">如果有默认事件，则为 <see cref="T:System.ComponentModel.EventDescriptor" />，或者，如果没有任何事件，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default event for a component with a custom type descriptor.">返回具有自定义类型描述符的组件的默认事件。</summary>
      <param name="component" vsli:raw="The component to get the event for.">要获取其事件的组件。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，则考虑自定义类型描述信息；否则为 <see langword="false" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">如果有默认事件，则为 <see cref="T:System.ComponentModel.EventDescriptor" />，或者，如果没有任何事件，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary vsli:raw="Returns the default event for the specified type of component.">返回指定组件类型的默认事件。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目标组件的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">如果有默认事件，则为 <see cref="T:System.ComponentModel.EventDescriptor" />，或者，如果没有任何事件，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Returns the default property for the specified component.">返回指定组件的默认属性。</summary>
      <param name="component" vsli:raw="The component to get the default property for.">要获取其默认属性的组件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">具有默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果没有属性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default property for the specified component with a custom type descriptor.">使用自定义类型描述符返回指定组件的默认属性。</summary>
      <param name="component" vsli:raw="The component to get the default property for.">要获取其默认属性的组件。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，则考虑自定义类型描述信息；否则为 <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">具有默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果没有属性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary vsli:raw="Returns the default property for the specified type of component.">返回指定类型组件的默认属性。</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the class to get the property for.">表示要获取其属性的类的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">具有默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets an editor with the specified base type for the specified component.">获取指定组件的具有指定基类型的编辑器。</summary>
      <param name="component" vsli:raw="The component to get the editor for.">要为其获取编辑器的组件。</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">表示要查找的编辑器的基类型的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">可转换为指定编辑器类型的编辑器的一个实例，如果找不到请求类型的编辑器，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 或 <paramref name="editorBaseType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary vsli:raw="Returns an editor with the specified base type and with a custom type descriptor for the specified component.">为指定组件返回具有指定基类型和自定义类型描述符的编辑器。</summary>
      <param name="component" vsli:raw="The component to get the editor for.">要为其获取编辑器的组件。</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">表示要查找的编辑器的基类型的 <see cref="T:System.Type" />。</param>
      <param name="noCustomTypeDesc" vsli:raw="A flag indicating whether custom type description information should be considered.">表示是否应考虑自定义类型描述信息的标志。</param>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">可转换为指定编辑器类型的编辑器的一个实例，如果找不到请求类型的编辑器，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 或 <paramref name="editorBaseType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary vsli:raw="Returns an editor with the specified base type for the specified type.">返回具有指定基类型的指定类型的编辑器。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you are trying to find.">表示要查找的编辑器的基类型的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An instance of the editor object that can be cast to the given base type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">可转换为指定基类型的编辑器对象的一个实例，如果找不到请求类型的编辑器，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 或 <paramref name="editorBaseType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary vsli:raw="Returns the collection of events for the specified component.">返回指定组件的事件的集合。</summary>
      <param name="component" vsli:raw="A component to get the events for.">要为其获取事件的组件。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">具有此组件的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter.">通过将指定的属性数组用作筛选器来返回指定组件的事件集合。</summary>
      <param name="component" vsli:raw="A component to get the events for.">要为其获取事件的组件。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">可以用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">具有匹配此组件指定属性的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">通过使用指定的属性数组作为筛选器，并使用自定义类型描述符来返回指定组件的事件集合。</summary>
      <param name="component" vsli:raw="A component to get the events for.">要为其获取事件的组件。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">要用作筛选器的类型 <see cref="T:System.Attribute" /> 数组。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，则考虑自定义类型描述信息；否则为 <see langword="false" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">具有匹配此组件指定属性的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component with a custom type descriptor.">对具有自定义类型描述符的指定组件，返回事件集合。</summary>
      <param name="component" vsli:raw="A component to get the events for.">要为其获取事件的组件。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，则考虑自定义类型描述信息；否则为 <see langword="false" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">具有此组件的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary vsli:raw="Returns the collection of events for a specified type of component.">返回指定组件类型的事件的集合。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目标组件的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">具有此组件的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified type of component using a specified array of attributes as a filter.">通过将指定的属性数组用作筛选器来返回指定组件类型的事件的集合。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">可以用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">具有匹配此组件指定属性的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary vsli:raw="Returns the fully qualified name of the component.">返回组件的完全限定名。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to find the name for.">要为其查找名称的 <see cref="T:System.ComponentModel.Component" />。</param>
      <returns vsli:raw="The fully qualified name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">如果组件没有名称，则为指定组件的完全限定名称，或 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary vsli:raw="Returns the collection of properties for a specified component.">返回指定组件的属性的集合。</summary>
      <param name="component" vsli:raw="A component to get the properties for.">要为其获取属性的组件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">具有指定组件的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter.">通过将指定的属性数组用作筛选器来返回指定组件的属性的集合。</summary>
      <param name="component" vsli:raw="A component to get the properties for.">要为其获取属性的组件。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">要用作筛选器的类型 <see cref="T:System.Attribute" /> 数组。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">具有与指定组件的指定属性相匹配的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">通过使用指定的属性数组作为筛选器，并使用自定义类型描述符来返回指定组件的属性集合。</summary>
      <param name="component" vsli:raw="A component to get the properties for.">要为其获取属性的组件。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">要用作筛选器的类型 <see cref="T:System.Attribute" /> 数组。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，则考虑自定义类型描述信息；否则为 <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the events that match the specified attributes for the specified component.">具有与指定组件的指定属性相匹配的事件的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using the default type descriptor.">使用默认类型描述符为指定组件返回属性集合。</summary>
      <param name="component" vsli:raw="A component to get the properties for.">要为其获取属性的组件。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若不考虑自定义类型描述信息时，为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified component.">具有指定组件的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary vsli:raw="Returns the collection of properties for a specified type of component.">返回指定组件类型的属性的集合。</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component to get properties for.">一个 <see cref="T:System.Type" />，表示要为其获取属性的组件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified type of component.">具有指定组件类型的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified type of component using a specified array of attributes as a filter.">通过将指定的属性数组用作筛选器来为指定类型的组件返回属性的集合。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">要用作筛选器的类型 <see cref="T:System.Attribute" /> 数组。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for this type of component.">具有与该类型组件的指定属性相匹配的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary vsli:raw="Returns the type description provider for the specified component.">返回指定组件的类型说明提供程序。</summary>
      <param name="instance" vsli:raw="An instance of the target component.">目标组件的实例。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified component.">一个与特定的组件关联的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary vsli:raw="Returns the type description provider for the specified type.">返回指定类型的类型说明提供程序。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目标组件的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified type.">与指定类型关联的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given an object.">如果给定对象，则返回可用于执行反射的 <see cref="T:System.Type" />。</summary>
      <param name="instance" vsli:raw="An instance of the target component.">目标组件的实例。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; for the specified object.">所指定对象的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given a class type.">如果给定类类型，则返回可用于执行反射的 <see cref="T:System.Type" />。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目标组件的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; of the specified class.">指定类的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary vsli:raw="Gets a type that represents a type description provider for all interface types.">获取一个类型，它表示所有接口类型的类型说明提供程序。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents a custom type description provider for all interface types.">一个 <see cref="T:System.Type" />，它表示所有接口类型的自定义类型说明提供程序。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary vsli:raw="Clears the properties and events for the specified component from the cache.">从缓存中清除指定组件的属性和事件。</summary>
      <param name="component" vsli:raw="A component for which the properties or events have changed.">已更改属性或事件的组件。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary vsli:raw="Clears the properties and events for the specified assembly from the cache.">从缓存中清除指定程序集的属性和事件。</summary>
      <param name="assembly" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; that represents the assembly to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this assembly will be refreshed.">表示要刷新的程序集的 <see cref="T:System.Reflection.Assembly" />。 将刷新此程序集中的每个 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary vsli:raw="Clears the properties and events for the specified module from the cache.">从缓存中清除指定模块的属性和事件。</summary>
      <param name="module" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; that represents the module to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this module will be refreshed.">表示要刷新的模块的 <see cref="T:System.Reflection.Module" />。 将刷新此模块中的每个 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary vsli:raw="Clears the properties and events for the specified type of component from the cache.">从缓存中清除指定类型的组件的属性和事件。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目标组件的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary vsli:raw="Occurs when the cache for a component is cleared.">清除了组件的缓存时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary vsli:raw="Removes an association between two objects.">删除两个对象之间的关联。</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">主要 <see cref="T:System.Object" />。</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">辅助 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary vsli:raw="Removes all associations for a primary object.">删除主要对象的所有关联。</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt; in an association.">关联中的主要 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="primary" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">移除以前添加的与指定对象关联的类型说明提供程序。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance" vsli:raw="An instance of the target component.">目标组件的实例。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">删除以前添加的与指定类型关联的类型说明提供程序。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">移除以前添加的与指定对象关联的类型说明提供程序。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance" vsli:raw="An instance of the target component.">目标组件的实例。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">删除以前添加的与指定类型关联的类型说明提供程序。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary vsli:raw="Sorts descriptors using the name of the descriptor.">使用描述符的名称对描述符排序。</summary>
      <param name="infos" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that contains the descriptors to sort.">一个 <see cref="T:System.Collections.IList" />，其中包含要排序的描述符。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;infos&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="infos" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary vsli:raw="Provides a type converter that can be used to populate a list box with available types.">提供可用于以可用类型填充列表框的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeListConverter&quot; /&gt; class using the type array as the available types.">将类型数组用作可用的类型来初始化 <see cref="T:System.ComponentModel.TypeListConverter" /> 类的新实例。</summary>
      <param name="types" vsli:raw="The array of type &lt;see cref=&quot;T:System.Type&quot; /&gt; to use as the available types.">用作可用类型的类型 <see cref="T:System.Type" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert the specified &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object using the given context.">获取一个值，该值指示此转换器是否可以使用给定上下文转换源对象的指定 <see cref="T:System.Type" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object.">源对象的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the native type of the converter.">将指定对象转换为转换器的本机类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">
        <see cref="T:System.Globalization.CultureInfo" />，它指定用于表示该字体的区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">将给定的值对象转换为指定的目标类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">要将值转换成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">获取此验证器设计用于的数据类型的标准值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">获取一个值，该值指示从 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 方法返回的标准值的列表是否为独占列表。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">返回 <see langword="true" />，因为从 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 返回的 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能的值的穷举列表。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">获取一个值，该值指示此对象是否支持可使用指定上下文从列表中选取的标准值集。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">返回 <see langword="true" />，因为应当调用 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 来查找对象支持的一组公共值。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit unsigned integer objects to and from other representations.">提供将 16 位无符号整数对象与其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt16Converter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.UInt16Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit unsigned integer objects to and from various other representations.">提供将 32 位无符号整数对象与其他各种表示形式互相转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt32Converter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.UInt32Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit unsigned integer objects to and from other representations.">提供将 64 位无符号整数对象与其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt64Converter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.UInt64Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.VersionConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Version&quot; /&gt; objects to and from various other representations.">提供将 <see cref="T:System.Version" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.VersionConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.VersionConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">获取一个值，该值指示此转换器是否可将给定源类型的对象转换为 <see cref="T:System.Version" />。</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">提供上下文信息的对象。</param>
      <param name="sourceType" vsli:raw="The type of the object to be converted.">要转换的对象的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can convert sourceType to a &lt;see cref=&quot;T:System.Version&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此转换器可以将 sourceType 转换为 <see cref="T:System.Version" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">提供上下文信息的对象。</param>
      <param name="destinationType" vsli:raw="The target type for the conversion.">转换的目标类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the converter can convert an object to the given destination type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果转换器可将对象转换为给定目标类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">将指定对象转换为 <see cref="T:System.Version" />。</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">提供上下文信息的对象。</param>
      <param name="culture" vsli:raw="The culture to use for the conversion.">用于转换的区域性。</param>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">要转换为 <see cref="T:System.Version" /> 的值。</param>
      <returns vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; converted to a &lt;see cref=&quot;T:System.Version&quot; /&gt; value.">已转换为 <see cref="T:System.Version" /> 的 <paramref name="value" /> 值。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Version&quot; /&gt; string.">
        <paramref name="value" /> 不是有效的 <see cref="T:System.Version" /> 字符串。</exception>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified value to the specified destination type using the specified context and arguments.">使用指定上下文和参数将指定的值转换为指定目标类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="The culture that supplies formatting information for the conversion.">区域性，它提供转换的格式设置信息。</param>
      <param name="value" vsli:raw="The value to be converted.">要转换的值。</param>
      <param name="destinationType" vsli:raw="The type to convert the value parameter to.">value 参数所要转换成的类型。</param>
      <returns vsli:raw="An object that represents the converted value.">一个对象，表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the given value object is valid for this type and for the specified context.">返回一个值，该值指示给定值对象对于此类型和此指定的上下文是否有效。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value" vsli:raw="The object to test for validity.">要测试其有效性的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的值对此对象有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary vsli:raw="Specifies an exception that is handled as a warning instead of an error.">指定按警告（而不是错误）处理的异常。</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class using the specified serialization data and context.">使用指定的序列化数据和上下文初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">要用于反序列化的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">用于反序列化的目标。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message and no Help file.">使用指定消息（但不带帮助文件）初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message to display to the end user.">显示给最终用户的消息。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified detailed description and the specified exception.">使用指定的详细说明和指定的异常初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="A detailed description of the error.">该错误的详细说明。</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">对导致此异常的内部异常的引用。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file.">使用指定消息和对指定帮助文件的访问权限初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message to display to the end user.">显示给最终用户的消息。</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">要在用户请求帮助时显示的帮助文件。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file and topic.">使用指定消息和对指定帮助文件和主题的访问权限初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message to display to the end user.">显示给最终用户的消息。</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">要在用户请求帮助时显示的帮助文件。</param>
      <param name="helpTopic" vsli:raw="The Help topic to display if the user requests help.">要在用户请求帮助时显示的帮助主题。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with the parameter name and additional exception information.">使用参数名和其他异常信息来设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info" vsli:raw="Stores the data that was being used to serialize or deserialize the object that the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.CodeDomSerializer&quot; /&gt; was serializing or deserializing.">存储正用于序列化或反序列化正由 <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> 序列化或反序列化的对象的数据。</param>
      <param name="context" vsli:raw="Describes the source and destination of the stream that generated the exception, as well as a means for serialization to retain that context and an additional caller-defined context.">描述生成该异常的流的源和目标，以及用于保留该上下文和附加的由调用方定义的上下文的序列化方法。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary vsli:raw="Gets the Help topic associated with the warning.">获取与该警告关联的帮助主题。</summary>
      <returns vsli:raw="The Help topic associated with the warning.">与该警告关联的帮助主题。</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary vsli:raw="Gets the Help file associated with the warning.">获取与该警告关联的帮助文件。</summary>
      <returns vsli:raw="The Help file associated with the warning.">与该警告关联的帮助文件。</returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary vsli:raw="Converts colors from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">将颜色从一种数据类型转换为另一种数据类型。 通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 访问此类。</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.ColorConverter&quot; /&gt; class.">初始化 <see cref="T:System.Drawing.ColorConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">确定该转换器是否可以将给定源类型的对象转换为转换器的本机类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。 可使用此对象获取有关从中调用此转换器的环境的附加信息。</param>
      <param name="sourceType" vsli:raw="The type from which you want to convert.">要从其转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此对象可以执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">返回指示该转换器能否使用上下文将对象转换为给定目标类型的值。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to which you want to convert.">表示要转换为的类型的<see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此转换器能够执行该操作，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">将给定对象转换为转换器的本机类型。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">一个提供格式上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />。 可使用此对象获取有关从中调用此转换器的环境的附加信息。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">一个 <see cref="T:System.Globalization.CultureInfo" />，指定表示该颜色的区域性。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">表示已转换的值的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">将指定的对象转换为其他类型。</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">格式化程序上下文。 使用此对象提取有关从中调用此转换器的环境的附加信息。 始终检查此值是否为 <see langword="null" />。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">一个 <see cref="T:System.Globalization.CultureInfo" />，指定表示该颜色的区域性。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">对象要转换为的类型。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">表示已转换的值的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationtype&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationtype" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Retrieves a collection containing a set of standard values for the data type for which this validator is designed. This will return &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">检索一个集合，该集合包含适用于此验证程序的数据类型的标准值集。 如果该数据类型不支持标准值集，这将返回 <see langword="null" />。</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">格式化程序上下文。 使用此对象提取有关从中调用此转换器的环境的附加信息。 始终检查此值是否为 <see langword="null" />。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <returns vsli:raw="A collection containing &lt;see langword=&quot;null&quot; /&gt; or a standard set of valid values. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">包含 <see langword="null" /> 或标准有效值集的集合。 默认实现始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports a standard set of values that can be chosen from a list.">确定该对象是否支持可以从列表中选取的标准值集。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.Drawing.ColorConverter.GetStandardValues&quot; /&gt; must be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果必须调用 <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" /> 才能找到对象支持的一组公共值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object from one data type to another.">将 <see cref="T:System.Drawing.Point" /> 对象从一种数据类型转换为另一种数据类型。</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.PointConverter&quot; /&gt; class.">初始化 <see cref="T:System.Drawing.PointConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">确定该转换器是否可以将给定源类型的对象转换为转换器的本机类型。</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">格式化程序上下文。 此对象可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">要从其进行转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此对象可以执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context.">一个提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">
        <see cref="T:System.Type" /> 对象，它表示您希望转换为的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object.">将指定对象转换为 <see cref="T:System.Drawing.Point" /> 对象。</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">格式化程序上下文。 此对象可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">包含区域性特定信息（如语言、日历和与特定区域性关联的区域性约定）的对象。 它基于 RFC 1766 标准。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <returns vsli:raw="The converted object.">被转换的对象。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">无法完成转换。</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">将指定对象转换为指定类型。</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">格式化程序上下文。 此对象可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">包含区域性特定信息（如语言、日历和与特定区域性关联的区域性约定）的对象。 它基于 RFC 1766 标准。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">对象要转换为的类型。</param>
      <returns vsli:raw="The converted object.">被转换的对象。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">无法完成转换。</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object.">已知对象的属性值集，创建此类型的实例。</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">可通过其提供附加上下文的类型说明符。</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt;.">新属性值的字典。 该字典包括一系列名称-值对，每对对应一个从 <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 返回的属性。</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">新创建的对象；如果未能创建该对象，则为 <see langword="null" />。 默认实现返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">确定更改此对象的值是否需要调用 <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 以创建新值。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在更改此对象的一个或多个属性时应当调用 <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 方法，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">检索此类型的属性集。 默认情况下，类型不返回任何属性。</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">可通过其提供附加上下文的类型说明符。</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">要获取其属性的对象的值。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">描述属性的 <see cref="T:System.Attribute" /> 对象数组。</param>
      <returns vsli:raw="The set of properties that are exposed for this data type. If no properties are exposed, this method might return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">为该数据类型公开的属性集。 如果未公开任何属性，则此方法可能返回 <see langword="null" />。 默认实现始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">确定该对象是否支持属性。 默认情况下，该属性为 <see langword="false" />。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果应调用 <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 来查找此对象的属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary vsli:raw="Converts rectangles from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">将矩形从一种数据类型转换为另一种数据类型。 通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 访问此类。</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.RectangleConverter&quot; /&gt; class.">初始化 <see cref="T:System.Drawing.RectangleConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">确定该转换器是否可以将给定源类型的对象转换为转换器的本机类型。</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">格式化程序上下文。 此对象可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">要从其进行转换的类型。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此对象可以执行转换，则此方法返回 <see langword="true" />；否则返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context. This can be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object can also return &lt;see langword=&quot;null&quot; /&gt;.">一个提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能 <see langword="null" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">
        <see cref="T:System.Type" /> 对象，它表示您希望转换为的类型。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此转换器可以执行转换，则此方法返回 <see langword="true" />；否则返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.Drawing.Rectangle&quot; /&gt; object.">将给定对象转换为 <see cref="T:System.Drawing.Rectangle" /> 对象。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">包含区域性特定信息的 <see cref="T:System.Globalization.CultureInfo" />，这些信息可以是语言、日历以及与特定区域性关联的区域性约定等。 它基于 RFC 1766 标准。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <returns vsli:raw="The converted object.">被转换的对象。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">无法完成转换。</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">将指定对象转换为指定类型。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">包含区域性特定信息的 <see cref="T:System.Globalization.CultureInfo" />，这些信息可以是语言、日历以及与特定区域性关联的区域性约定等。 它基于 RFC 1766 标准。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">对象要转换为的类型。</param>
      <returns vsli:raw="The converted object.">被转换的对象。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">无法完成转换。</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object. This is useful for objects that are immutable but still want to provide changeable properties.">已知对象的属性值集，创建此类型的实例。 这对于不可变但仍要提供可变属性的对象很有用。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from a call to the &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">新属性值的字典。 该字典包含一系列名称-值对，分别与对 <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 方法的调用所返回的每个属性相对应。</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">新创建的对象；如果未能创建该对象，则为 <see langword="null" />。 默认实现返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">确定更改此对象的值是否需要调用 <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 以创建新值。</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">可通过其提供附加上下文的类型说明符。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在更改此对象的一个或多个属性时应当调用 <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />，则此方法返回 <see langword="true" />；否则，此方法返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">检索此类型的属性集。 默认情况下，类型不返回任何属性。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">要获取其属性的对象的值。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">描述属性的 <see cref="T:System.Attribute" /> 对象数组。</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">应向此数据类型公开的属性集。 如果不应公开任何属性，则该方法可返回 <see langword="null" />。 默认实现始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">确定该对象是否支持属性。 默认情况下，该属性为 <see langword="false" />。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果为了查找此对象的属性而应当调用 <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />，则此方法返回 <see langword="true" />；否则，此方法返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; class is used to convert from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; object.">
        <see cref="T:System.Drawing.SizeConverter" /> 类用于从一种数据类型转换为另一种类型。 通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 对象访问此类。</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; object.">初始化新的 <see cref="T:System.Drawing.SizeConverter" /> 对象。</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether this converter can convert an object in the specified source type to the native type of the converter.">确定此转换器是否可以将指定源类型的对象转换为转换器的本机类型。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">要从其进行转换的类型。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion.">如果此对象可以执行转换，则此方法返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This can be &lt;see langword=&quot;null&quot; /&gt;, so always check. Also, properties on the context object can return &lt;see langword=&quot;null&quot; /&gt;.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用于获取有关从中调用此转换器的环境的附加信息。 此参数可能为 <see langword="null" />，因此总是需要检查。 同样，上下文对象的属性可以返回 <see langword="null" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">一个 <see cref="T:System.Type" />，表示你希望转换为的类型。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此转换器可以执行转换，则此方法返回 <see langword="true" />；否则返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the converter's native type.">将指定对象转换为转换器的本机类型。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">
        <see cref="T:System.Globalization.CultureInfo" /> 对象，包含区域性特定信息，例如，语言、日历和与特定区域性关联的区域性约定。 它基于 RFC 1766 标准。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <returns vsli:raw="The converted object.">被转换的对象。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">无法完成转换。</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">将指定对象转换为指定类型。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">
        <see cref="T:System.Globalization.CultureInfo" /> 对象，包含区域性特定信息，例如，语言、日历和与特定区域性关联的区域性约定。 它基于 RFC 1766 标准。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">对象要转换为的类型。</param>
      <returns vsli:raw="The converted object.">被转换的对象。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">无法完成转换。</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an object of this type by using a specified set of property values for the object. This is useful for creating non-changeable objects that have changeable properties.">通过为对象使用一组指定的属性值来创建此类型的对象。 这有助于创建具有可更改属性的不可更改对象。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">新属性值的字典。 该字典包含一系列名称值对，分别与从 <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 方法返回的每个属性相对应。</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">新创建的对象；如果未能创建该对象，则为 <see langword="null" />。 默认实现返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether changing a value on this object should require a call to the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method to create a new value.">确定更改此对象上的值是否需要调用 <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 方法以创建新值。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; object should be called when a change is made to one or more properties of this object.">如果在更改此对象的一个或多个属性时应当调用 <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 对象，则为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not have any properties to return.">检索此类型的属性集。 默认情况下，类型没有任何要返回的属性。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">要获取其属性的对象的值。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">描述属性的 <see cref="T:System.Attribute" /> 对象数组。</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">应向此数据类型公开的属性集。 如果不应公开任何属性，则该方法可返回 <see langword="null" />。 默认实现始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">确定此对象是否支持属性。 默认情况下，该属性为 <see langword="false" />。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method should be called to find the properties of this object.">如果应调用 <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 来查找此对象的属性，则为 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary vsli:raw="Converts &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; objects from one type to another.">将 <see cref="T:System.Drawing.SizeF" /> 对象从一种类型转换成另一种类型。</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; class.">初始化 <see cref="T:System.Drawing.SizeFConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the converter can convert from the type specified to the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type, using the specified context.">返回一个值，该值指示该转换器使用指定的上下文是否可以从指定的类型转换到 <see cref="T:System.Drawing.SizeF" /> 类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用来提供附加上下文。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; the represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the conversion can be performed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换可以执行，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; can convert a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; to the specified type.">返回一个值，该值指示 <see cref="T:System.Drawing.SizeFConverter" /> 是否可以将 <see cref="T:System.Drawing.SizeF" /> 转换到指定的类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用来提供附加上下文。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">使用指定的上下文和区域性信息将给定对象转换为此转换器的类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">使用指定的上下文和区域性信息将给定值对象转换为指定的类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If null is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 如果传递 null，则采用当前区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">值参数所要转换成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; with the specified property values using the specified context.">使用指定的上下文创建带有指定属性值的 <see cref="T:System.Drawing.SizeF" /> 的实例。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用来提供附加上下文。</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing property names and values.">包含属性名称和值的 <see cref="T:System.Collections.IDictionary" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the new &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created.">一个 <see cref="T:System.Object" />，表示新的 <see cref="T:System.Drawing.SizeF" />；或者如果无法创建该对象，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a value indicating whether changing a value on this object requires a call to the &lt;see cref=&quot;Overload:System.Drawing.SizeFConverter.CreateInstance&quot; /&gt; method to create a new value.">返回一个值，该值指示更改此对象的值是否需要调用 <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" /> 方法来创建新值。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. This may be &lt;see langword=&quot;null&quot; /&gt;.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。 这可能是 <see langword="null" />。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">始终返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves a set of properties for the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type using the specified context and attributes.">使用指定的上下文和特性检索 <see cref="T:System.Drawing.SizeF" /> 类型的属性集。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用来提供附加上下文。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to return properties for.">要为其返回属性的 <see cref="T:System.Object" />。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">描述属性的 <see cref="T:System.Attribute" /> 对象数组。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties.">包含属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type supports properties.">返回此 <see cref="T:System.Drawing.SizeF" /> 类型是否支持属性。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用来提供附加上下文。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">始终返回 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class represents the type converter for extended protection policy used by the server to validate incoming client connections.">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> 类表示服务器用来验证传入客户端连接的扩展保护策略的类型转换器。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class.">初始化 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">返回此转换器是否可将该对象转换为指定的类型。</summary>
      <param name="context" vsli:raw="The object to convert.">要转换的对象。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">一个 <see cref="T:System.Type" />，表示你希望转换为的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Convert the object to the specified type.">将对象转换为指定类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">一个 <see cref="T:System.Globalization.CultureInfo" /> 对象。 如果传递 <see langword="null" />，则采用当前区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This should be a &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot; /&gt; object.">要转换的 <see cref="T:System.Object" />。 应当为 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 对象。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">值参数所要转换成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt; parameter.">一个表示已转换的 <paramref name="value" /> 参数的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">转换未能执行。</exception>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">为 <see cref="E:System.Timers.Timer.Elapsed" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary vsli:raw="Gets the date/time when the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">获取引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的日期/时间。</summary>
      <returns vsli:raw="The time the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的时间。</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">表示将用来处理 <see cref="E:System.Timers.Timer.Elapsed" /> 的 <see cref="T:System.Timers.Timer" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件源。</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.Timers.ElapsedEventArgs&quot; /&gt; object that contains the event data.">包含事件数据的 <see cref="T:System.Timers.ElapsedEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary vsli:raw="Generates an event after a set interval, with an option to generate recurring events.">在设定的间隔之后生成事件，带有生成重复事件的选项。</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets all the properties to their initial values.">初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将所有属性设置为初始值。</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets the &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property to the specified number of milliseconds.">初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将 <see cref="P:System.Timers.Timer.Interval" /> 属性设置为指定的毫秒数。</summary>
      <param name="interval" vsli:raw="The time, in milliseconds, between events. The value must be greater than zero and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">事件之间经过的时间（以毫秒为单位）。 该值必须大于零且小于或等于 <see cref="F:System.Int32.MaxValue" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The value of the &lt;paramref name=&quot;interval&quot; /&gt; parameter is less than or equal to zero, or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="interval" /> 参数的值小于或等于零，或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary vsli:raw="Gets or sets a Boolean indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once (&lt;see langword=&quot;false&quot; /&gt;) or repeatedly (&lt;see langword=&quot;true&quot; /&gt;).">获取或设置一个布尔值，该值指示 <see cref="T:System.Timers.Timer" /> 是否应只引发一次 <see cref="E:System.Timers.Timer.Elapsed" /> 事件（(<see langword="false" />) 或重复 (<see langword="true" />)）。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event each time the interval elapses; &lt;see langword=&quot;false&quot; /&gt; if it should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once, after the first time the interval elapses. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果 <see cref="T:System.Timers.Timer" /> 应在每次间隔结束时引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="true" />；如果它仅在间隔第一次结束后引发一次 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary vsli:raw="Begins the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">开始用于窗体或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary vsli:raw="Releases the resources used by the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">释放由 <see cref="T:System.Timers.Timer" /> 占用的资源。</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases all resources used by the current &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">释放由当前 <see cref="T:System.Timers.Timer" /> 使用的所有资源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary vsli:raw="Occurs when the interval elapses.">达到间隔时发生。</summary>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">获取或设置一个值，该值指示 <see cref="T:System.Timers.Timer" /> 是否应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Timers.Timer" /> 应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This property cannot be set because the timer has been disposed.">计时器已释放，无法设置此属性。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property was set to a value greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; before the timer was enabled.">在定时器启用之前，<see cref="P:System.Timers.Timer.Interval" /> 属性设置为大于 <see cref="F:System.Int32.MaxValue" /> 的值。</exception>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary vsli:raw="Ends the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">结束用于窗体或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。</summary>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary vsli:raw="Gets or sets the interval, expressed in milliseconds, at which to raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">获取或设置引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的间隔（以毫秒为单位）。</summary>
      <returns vsli:raw="The time, in milliseconds, between &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; events. The value must be greater than zero, and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;. The default is 100 milliseconds.">
        <see cref="E:System.Timers.Timer.Elapsed" /> 事件之间经过的时间（以毫秒为单位）。 该值必须大于零并小于或等于 <see cref="F:System.Int32.MaxValue" />。 默认值为 100 毫秒。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The interval is less than or equal to zero.&#xA;&#xA; -or-&#xA;&#xA; The interval is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;, and the timer is currently enabled. (If the timer is not currently enabled, no exception is thrown until it becomes enabled.)">间隔小于或等于零。
或
间隔大于 <see cref="F:System.Int32.MaxValue" />，计时器当前已启用。 （如果当前未启用计时器，则在启用它之前不会引发异常。）</exception>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary vsli:raw="Gets or sets the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; to its container in design mode.">获取或设置在设计模式中将 <see cref="T:System.Timers.Timer" /> 绑定到其容器的站点。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface representing the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; object to its container.">
        <see cref="T:System.ComponentModel.ISite" /> 界面，此界面表示将 <see cref="T:System.Timers.Timer" /> 对象绑定到其容器的站点。</returns>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary vsli:raw="Starts raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;.">通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 <see langword="true" /> 开始引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; is created with an interval equal to or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; + 1, or set to an interval less than zero.">创建 <see cref="T:System.Timers.Timer" />，使其时间间隔等于或大于 <see cref="F:System.Int32.MaxValue" /> + 1，或将其时间间隔设置为小于零。</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary vsli:raw="Stops raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 <see langword="false" /> 停止引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary vsli:raw="Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.">获取或设置对象，该对象用于在间隔过后封送发出的事件处理程序调用。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ISynchronizeInvoke&quot; /&gt; representing the object used to marshal the event-handler calls that are issued when an interval has elapsed. The default is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，它表示对象，该对象用于在间隔过后封送发出的事件处理程序调用。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary vsli:raw="Sets the description that visual designers can display when referencing an event, extender, or property.">设置可视化设计器在引用事件、扩展程序或属性时可以显示的说明。</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.TimersDescriptionAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Timers.TimersDescriptionAttribute" /> 类的新实例。</summary>
      <param name="description" vsli:raw="The description to use.">要使用的说明。</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary vsli:raw="Gets the description that visual designers can display when referencing an event, extender, or property.">设置可视化设计器在引用事件、扩展程序或属性时可以显示的说明。</summary>
      <returns vsli:raw="The description for the event, extender, or property.">事件、扩展程序或属性的说明。</returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; type to a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type, and vice versa.">将 <see cref="T:System.String" /> 类型转换为 <see cref="T:System.Uri" /> 类型，反之亦然。</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.UriTypeConverter&quot; /&gt; class.">初始化 <see cref="T:System.UriTypeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">返回该转换器是否可以将给定类型的对象转换为此转换器的类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert from.">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;sourceType&quot; /&gt; is a &lt;see cref=&quot;T:System.String&quot; /&gt; type or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type can be assigned from &lt;paramref name=&quot;sourceType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="sourceType" /> 是 <see cref="T:System.String" /> 类型，或者可以从 <paramref name="sourceType" /> 分配 <see cref="T:System.Uri" /> 类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;sourceType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="sourceType" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">返回此转换器能否使用指定上下文将对象转换为指定类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert to.">一个 <see cref="T:System.Type" />，表示要转换到的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;destinationType&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Uri&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="destinationType" /> 为 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />、<see cref="T:System.String" /> 或 <see cref="T:System.Uri" /> 类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">使用指定的上下文和区域性信息将给定对象转换为此转换器的类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a given value object to the specified type, using the specified context and culture information.">使用指定的上下文和区域性信息将给定的值对象转换为指定的类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 如果传递 <see langword="null" />，则采用当前区域性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <paramref name="value" /> 参数要转换成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">无法执行转换。</exception>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created from it.">返回给定值对象是 <see cref="T:System.Uri" />，还是可以从该对象创建 <see cref="T:System.Uri" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">要测试其有效性的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.String&quot; /&gt; from which a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 是 <see cref="T:System.Uri" />，或者是可以从中创建 <see cref="T:System.String" /> 的 <see cref="T:System.Uri" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
  </members>
</doc>
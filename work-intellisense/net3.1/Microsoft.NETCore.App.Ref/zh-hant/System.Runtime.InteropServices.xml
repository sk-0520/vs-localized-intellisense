<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Runtime.InteropServices</name>
  </assembly>
  <members>
    <member name="T:System.DataMisalignedException">
      <summary vsli:raw="The exception that is thrown when a unit of data is read from or written to an address that is not a multiple of the data size. This class cannot be inherited.">從位址讀取資料單元，或將資料單元寫入位址時，若資料單元不是資料大小的倍數，就會擲回例外狀況 (Exception)。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class.">初始化 <see cref="T:System.DataMisalignedException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class using the specified error message.">使用指定的錯誤訊息來初始化 <see cref="T:System.DataMisalignedException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; object that describes the error. The content of &lt;paramref name=&quot;message&quot; /&gt; is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">描述錯誤的 <see cref="T:System.String" /> 物件。 <paramref name="message" /> 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class using the specified error message and underlying exception.">使用指定的錯誤訊息和基礎例外狀況來初始化 <see cref="T:System.DataMisalignedException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; object that describes the error. The content of &lt;paramref name=&quot;message&quot; /&gt; is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">描述錯誤的 <see cref="T:System.String" /> 物件。 <paramref name="message" /> 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt;. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">導致目前 <see cref="T:System.DataMisalignedException" /> 的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary vsli:raw="The exception that is thrown when a DLL specified in a DLL import cannot be found.">DLL 匯入中所指定的 DLL 找不到時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with default properties.">使用預設屬性，初始化 <see cref="T:System.DllNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with serialized data.">使用序列化資料，初始化 <see cref="T:System.DllNotFoundException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; that holds the serialized object data about the exception being thrown.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; that contains contextual information about the source or destination.">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with a specified error message.">使用指定的錯誤訊息，初始化 <see cref="T:System.DllNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.DllNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.IO.UnmanagedMemoryAccessor">
      <summary vsli:raw="Provides random access to unmanaged blocks of memory from managed code.">從 Managed 程式碼對 Unmanaged 記憶體區塊提供隨機存取。</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class.">初始化 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class with a specified buffer, offset, and capacity.">使用指定的緩衝區、位移和容量，初始化 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 類別的新執行個體。</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">包含存取子的緩衝區。</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">存取子會在此處開始的位元組。</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">要配置的記憶體大小 (以位元組為單位)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> 加上 <paramref name="capacity" /> 大於 <paramref name="buffer" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="offset" /> 或 <paramref name="capacity" /> 小於零。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> 加上 <paramref name="capacity" /> 會環繞高端的位址空間。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class with a specified buffer, offset, capacity, and access right.">使用指定的緩衝區、位移、容量和存取權限，初始化 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 類別的新執行個體。</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">包含存取子的緩衝區。</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">存取子會在此處開始的位元組。</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">要配置的記憶體大小 (以位元組為單位)。</param>
      <param name="access" vsli:raw="The type of access allowed to the memory. The default is &lt;see cref=&quot;F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite&quot; /&gt;.">允許的記憶體存取類型。 預設為 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> 加上 <paramref name="capacity" /> 大於 <paramref name="buffer" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;access&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot; /&gt; enumeration value.">
        <paramref name="offset" /> 或 <paramref name="capacity" /> 小於零。
-或-
<paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 列舉值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> 加上 <paramref name="capacity" /> 會環繞高端的位址空間。</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanRead">
      <summary vsli:raw="Determines whether the accessor is readable.">判斷存取子是否可讀取。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is readable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果存取子是可讀取的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanWrite">
      <summary vsli:raw="Determines whether the accessory is writable.">判斷存取子是否可寫入。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is writable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果存取子是可寫入的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.Capacity">
      <summary vsli:raw="Gets the capacity of the accessor.">取得存取子的容量。</summary>
      <returns vsli:raw="The capacity of the accessor.">存取子的容量。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt;.">釋放 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; and optionally releases the managed resources.">釋放 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary vsli:raw="Sets the initial values for the accessor.">設定存取子的初始值。</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">包含存取子的緩衝區。</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">存取子會在此處開始的位元組。</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">要配置的記憶體大小 (以位元組為單位)。</param>
      <param name="access" vsli:raw="The type of access allowed to the memory. The default is &lt;see cref=&quot;F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite&quot; /&gt;.">允許的記憶體存取類型。 預設為 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> 加上 <paramref name="capacity" /> 大於 <paramref name="buffer" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;access&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot; /&gt; enumeration value.">
        <paramref name="offset" /> 或 <paramref name="capacity" /> 小於零。
-或-
<paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 列舉值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> 加上 <paramref name="capacity" /> 會環繞高端的位址空間。</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.IsOpen">
      <summary vsli:raw="Determines whether the accessor is currently open by a process.">判斷存取子目前是否由處理程序開啟。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is open; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果存取子已開啟，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)">
      <summary vsli:raw="Reads a structure of type &lt;paramref name=&quot;T&quot; /&gt; from the accessor into a provided reference.">將型別 <paramref name="T" /> 的結構從存取子讀入至提供的參考。</summary>
      <param name="position" vsli:raw="The position in the accessor at which to begin reading.">要在存取子中開始讀取的位置。</param>
      <param name="structure" vsli:raw="The structure to contain the read data.">包含讀取資料的結構。</param>
      <typeparam name="T" vsli:raw="The type of structure.">結構的型別。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read in a structure of type &lt;paramref name=&quot;T&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;T&quot; /&gt; is a value type that contains one or more reference types.">在 <paramref name="position" /> 之後沒有足夠的位元組可讀取型別 <paramref name="T" /> 的結構。
-或-
<see langword="T" /> 是包含一個或多個參考型別的實值型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">存取子不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads structures of type &lt;paramref name=&quot;T&quot; /&gt; from the accessor into an array of type &lt;paramref name=&quot;T&quot; /&gt;.">將型別 <paramref name="T" /> 的結構從存取子讀入至型別 <paramref name="T" /> 的陣列。</summary>
      <param name="position" vsli:raw="The number of bytes in the accessor at which to begin reading.">要在存取子中開始讀取的位元組數。</param>
      <param name="array" vsli:raw="The array to contain the structures read from the accessor.">陣列，包含從存取子讀取的結構。</param>
      <param name="offset" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; in which to place the first copied structure.">要在 <paramref name="array" /> 中放置第一個複製結構的索引。</param>
      <param name="count" vsli:raw="The number of structures of type &lt;c&gt;T&lt;/c&gt; to read from the accessor.">要從存取子讀取的類型 <c>T</c> 的結構數目。</param>
      <typeparam name="T" vsli:raw="The type of structure.">結構的型別。</typeparam>
      <returns vsli:raw="The number of structures read into &lt;paramref name=&quot;array&quot; /&gt;. This value can be less than &lt;paramref name=&quot;count&quot; /&gt; if there are fewer structures available, or zero if the end of the accessor is reached.">讀入至 <paramref name="array" /> 的結構數目。 如果提供較少的結構，則這個值可能小於 <paramref name="count" />，如果已經到達存取子結尾，則為零。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is not large enough to contain &lt;paramref name=&quot;count&quot; /&gt; of structures (starting from &lt;paramref name=&quot;position&quot; /&gt;).">
        <paramref name="array" /> 不夠大，無法包含結構 (從 <paramref name="count" /> 開始) 的 <paramref name="position" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">存取子不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)">
      <summary vsli:raw="Reads a Boolean value from the accessor.">從存取子讀取布林值。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">會在此處開始讀取存取子的位元組數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 或 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可讀取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">存取子不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)">
      <summary vsli:raw="Reads a byte value from the accessor.">從存取子讀取位元組值。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">會在此處開始讀取存取子的位元組數。</param>
      <returns vsli:raw="The value that was read.">已讀取的值。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可讀取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">存取子不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)">
      <summary vsli:raw="Reads a character from the accessor.">從存取子讀取位元組值。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">會在此處開始讀取存取子的位元組數。</param>
      <returns vsli:raw="The value that was read.">已讀取的值。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可讀取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">存取子不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)">
      <summary vsli:raw="Reads a decimal value from the accessor.">從存取子讀取位元組值。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">會在此處開始讀取存取子的位元組數。</param>
      <returns vsli:raw="The value that was read.">已讀取的值。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.  &#xA;  &#xA; -or-  &#xA;  &#xA; The decimal to read is invalid.">在 <paramref name="position" /> 之後，沒有足夠的位元組可讀取值。
-或-
讀取的十進位無效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">存取子不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)">
      <summary vsli:raw="Reads a double-precision floating-point value from the accessor.">從存取子讀取雙精確度浮點數值。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">會在此處開始讀取存取子的位元組數。</param>
      <returns vsli:raw="The value that was read.">已讀取的值。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可讀取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">存取子不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)">
      <summary vsli:raw="Reads a 16-bit integer from the accessor.">從存取子讀取 16 位元整數。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">會在此處開始讀取存取子的位元組數。</param>
      <returns vsli:raw="The value that was read.">已讀取的值。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可讀取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">存取子不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)">
      <summary vsli:raw="Reads a 32-bit integer from the accessor.">從存取子讀取 32 位元整數。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">會在此處開始讀取存取子的位元組數。</param>
      <returns vsli:raw="The value that was read.">已讀取的值。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可讀取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">存取子不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)">
      <summary vsli:raw="Reads a 64-bit integer from the accessor.">從存取子讀取 64 位元整數。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">會在此處開始讀取存取子的位元組數。</param>
      <returns vsli:raw="The value that was read.">已讀取的值。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可讀取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">存取子不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)">
      <summary vsli:raw="Reads an 8-bit signed integer from the accessor.">從存取子讀取 8 位元帶正負號的整數。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">會在此處開始讀取存取子的位元組數。</param>
      <returns vsli:raw="The value that was read.">已讀取的值。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可讀取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">存取子不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)">
      <summary vsli:raw="Reads a single-precision floating-point value from the accessor.">從存取子讀取單精確度浮點數值。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">會在此處開始讀取存取子的位元組數。</param>
      <returns vsli:raw="The value that was read.">已讀取的值。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可讀取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">存取子不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)">
      <summary vsli:raw="Reads an unsigned 16-bit integer from the accessor.">從存取子讀取不帶正負號的 16 位元整數。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">會在此處開始讀取存取子的位元組數。</param>
      <returns vsli:raw="The value that was read.">已讀取的值。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可讀取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">存取子不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)">
      <summary vsli:raw="Reads an unsigned 32-bit integer from the accessor.">從存取子讀取不帶正負號的 32 位元整數。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">會在此處開始讀取存取子的位元組數。</param>
      <returns vsli:raw="The value that was read.">已讀取的值。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可讀取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">存取子不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)">
      <summary vsli:raw="Reads an unsigned 64-bit integer from the accessor.">從存取子讀取不帶正負號的 64 位元整數。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">會在此處開始讀取存取子的位元組數。</param>
      <returns vsli:raw="The value that was read.">已讀取的值。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可讀取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">存取子不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)">
      <summary vsli:raw="Writes a Boolean value into the accessor.">將布林值寫入至存取子。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">會在此處開始寫入存取子的位元組數。</param>
      <param name="value" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可寫入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">存取子不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)">
      <summary vsli:raw="Writes a byte value into the accessor.">將位元組值寫入至存取子。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">會在此處開始寫入存取子的位元組數。</param>
      <param name="value" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可寫入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">存取子不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)">
      <summary vsli:raw="Writes a character into the accessor.">將字元寫入至存取子。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">會在此處開始寫入存取子的位元組數。</param>
      <param name="value" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可寫入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">存取子不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)">
      <summary vsli:raw="Writes a decimal value into the accessor.">將十進位值寫入至存取子。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">會在此處開始寫入存取子的位元組數。</param>
      <param name="value" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.  &#xA;  &#xA; -or-  &#xA;  &#xA; The decimal is invalid.">在 <paramref name="position" /> 之後，沒有足夠的位元組可寫入值。
-或-
十進位無效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">存取子不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value into the accessor.">將 <see langword="Double" /> 值寫入至存取子。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">會在此處開始寫入存取子的位元組數。</param>
      <param name="value" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可寫入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">存取子不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)">
      <summary vsli:raw="Writes a 16-bit integer into the accessor.">將 16 位元整數寫入至存取子。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">會在此處開始寫入存取子的位元組數。</param>
      <param name="value" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可寫入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">存取子不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)">
      <summary vsli:raw="Writes a 32-bit integer into the accessor.">將 32 位元整數寫入至存取子。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">會在此處開始寫入存取子的位元組數。</param>
      <param name="value" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可寫入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">存取子不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)">
      <summary vsli:raw="Writes a 64-bit integer into the accessor.">將 64 位元整數寫入至存取子。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">會在此處開始寫入存取子的位元組數。</param>
      <param name="value" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after position to write a value.">在位置之後沒有足夠的位元組可寫入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">存取子不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)">
      <summary vsli:raw="Writes an 8-bit integer into the accessor.">將 8 位元整數寫入至存取子。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">會在此處開始寫入存取子的位元組數。</param>
      <param name="value" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可寫入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">存取子不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Single&quot; /&gt; into the accessor.">將 <see langword="Single" /> 寫入至存取子。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">會在此處開始寫入存取子的位元組數。</param>
      <param name="value" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可寫入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">存取子不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)">
      <summary vsli:raw="Writes an unsigned 16-bit integer into the accessor.">將不帶正負號的 16 位元整數寫入至存取子。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">會在此處開始寫入存取子的位元組數。</param>
      <param name="value" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可寫入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">存取子不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)">
      <summary vsli:raw="Writes an unsigned 32-bit integer into the accessor.">將不帶正負號的 32 位元整數寫入至存取子。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">會在此處開始寫入存取子的位元組數。</param>
      <param name="value" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可寫入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">存取子不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)">
      <summary vsli:raw="Writes an unsigned 64-bit integer into the accessor.">將不帶正負號的 64 位元整數寫入至存取子。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">會在此處開始寫入存取子的位元組數。</param>
      <param name="value" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">在 <paramref name="position" /> 之後，沒有足夠的位元組可寫入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">存取子不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)">
      <summary vsli:raw="Writes a structure into the accessor.">將結構寫入至存取子。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">會在此處開始寫入存取子的位元組數。</param>
      <param name="structure" vsli:raw="The structure to write.">要寫入的結構。</param>
      <typeparam name="T" vsli:raw="The type of structure.">結構的型別。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes in the accessor after &lt;paramref name=&quot;position&quot; /&gt; to write a structure of type &lt;paramref name=&quot;T&quot; /&gt;.">在 <paramref name="position" /> 之後，存取子中沒有足夠的位元組可以寫入型別 <paramref name="T" /> 的結構。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">存取子不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes structures from an array of type &lt;paramref name=&quot;T&quot; /&gt; into the accessor.">將結構從型別 <paramref name="T" /> 的陣列寫入至存取子。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">會在此處開始寫入存取子的位元組數。</param>
      <param name="array" vsli:raw="The array to write into the accessor.">要寫入至存取子的陣列。</param>
      <param name="offset" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; to start writing from.">
        <paramref name="array" /> 中要開始寫入的索引。</param>
      <param name="count" vsli:raw="The number of structures in &lt;paramref name=&quot;array&quot; /&gt; to write.">
        <paramref name="array" /> 中要寫入的結構數目。</param>
      <typeparam name="T" vsli:raw="The type of structure.">結構的型別。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes in the accessor after &lt;paramref name=&quot;position&quot; /&gt; to write the number of structures specified by &lt;paramref name=&quot;count&quot; /&gt;.">在 <paramref name="position" /> 之後，存取子中沒有足夠的位元組可以寫入由 <paramref name="count" /> 所指定的結構數目。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="position" /> 小於零或大於這個存取子的容量。
-或-
<paramref name="offset" /> 或 <paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">存取子不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">存取子已經被處置。</exception>
    </member>
    <member name="T:System.IO.UnmanagedMemoryStream">
      <summary>從 Managed 程式碼對 Unmanaged 記憶體區塊提供存取。</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor">
      <summary>初始化 <see cref="T:System.IO.UnmanagedMemoryStream" /> 類別的新執行個體。</summary>
      <exception cref="T:System.Security.SecurityException">使用者沒有所需要的使用權限。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
      <summary>使用指定的位置和記憶體長度，初始化 <see cref="T:System.IO.UnmanagedMemoryStream" /> 類別的新執行個體。</summary>
      <param name="pointer">Unmanaged 記憶體位置的指標。</param>
      <param name="length">要使用的記憶體長度。</param>
      <exception cref="T:System.Security.SecurityException">使用者沒有所需要的使用權限。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 值小於 0。
-或-
<paramref name="length" /> 的大小足以造成溢位。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>使用指定的位置、記憶體長度、記憶體總數和檔案存取值，初始化 <see cref="T:System.IO.UnmanagedMemoryStream" /> 類別的新執行個體。</summary>
      <param name="pointer">Unmanaged 記憶體位置的指標。</param>
      <param name="length">要使用的記憶體長度。</param>
      <param name="capacity">指派給資料流的記憶體總量。</param>
      <param name="access">其中一個 <see cref="T:System.IO.FileAccess" /> 值。</param>
      <exception cref="T:System.Security.SecurityException">使用者沒有所需要的使用權限。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 值小於 0。
-或-
<paramref name="capacity" /> 值小於 0。
-或-
<paramref name="length" /> 值大於 <paramref name="capacity" /> 值。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>在安全緩衝區中使用指定的位移和長度，初始化 <see cref="T:System.IO.UnmanagedMemoryStream" /> 類別的新執行個體。</summary>
      <param name="buffer">包含 Unmanaged 記憶體資料流的緩衝區。</param>
      <param name="offset">緩衝區中的位元組位置，Unmanaged 記憶體資料流會在此處開始。</param>
      <param name="length">Unmanaged 記憶體資料流的長度。</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>在安全緩衝區中使用指定的位移、長度和檔案存取，初始化 <see cref="T:System.IO.UnmanagedMemoryStream" /> 類別的新執行個體。</summary>
      <param name="buffer">包含 Unmanaged 記憶體資料流的緩衝區。</param>
      <param name="offset">緩衝區中的位元組位置，Unmanaged 記憶體資料流會在此處開始。</param>
      <param name="length">Unmanaged 記憶體資料流的長度。</param>
      <param name="access">Unmanaged 記憶體資料流的檔案存取模式。</param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanRead">
      <summary>取得值，指出資料流是否支援讀取。</summary>
      <returns>如果物件由具有 <paramref name="access" /> 參數之不包括讀取資料流的建構函式建立，或者如果資料流已關閉，則為 <see langword="false" />；否則為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanSeek">
      <summary>取得值，指出資料流是否支援搜尋。</summary>
      <returns>如果資料流已關閉，則為 <see langword="false" />；否則為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanWrite">
      <summary>取得值，指出物件是否支援寫入。</summary>
      <returns>如果物件由具有 <paramref name="access" /> 參數值之支援寫入的建構函式或由不具有參數的建構函式建立，或者如果資料流已關閉，則為 <see langword="false" />；否則為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Capacity">
      <summary>取得資料流長度 (大小) 或指派給資料流的記憶體總量 (容量)。</summary>
      <returns>資料流的大小或容量。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.UnmanagedMemoryStream" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Flush">
      <summary>覆寫 <see cref="M:System.IO.Stream.Flush" /> 方法，以便不執行任何動作。</summary>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>覆寫 <see cref="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" /> 方法，以取消指定的作業，但不執行其他任何動作。</summary>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步排清作業的工作。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>使用 Unmanaged 記憶體位置的指標，初始化 <see cref="T:System.IO.UnmanagedMemoryStream" /> 類別的新執行個體。</summary>
      <param name="pointer">Unmanaged 記憶體位置的指標。</param>
      <param name="length">要使用的記憶體長度。</param>
      <param name="capacity">指派給資料流的記憶體總量。</param>
      <param name="access">其中一個 <see cref="T:System.IO.FileAccess" /> 值。</param>
      <exception cref="T:System.Security.SecurityException">使用者沒有所需要的使用權限。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 值小於 0。
-或-
<paramref name="capacity" /> 值小於 0。
-或-
<paramref name="length" /> 值的大小足以造成溢位。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>在安全緩衝區中使用指定的位移、長度和檔案存取，初始化 <see cref="T:System.IO.UnmanagedMemoryStream" /> 類別的新執行個體。</summary>
      <param name="buffer">包含 Unmanaged 記憶體資料流的緩衝區。</param>
      <param name="offset">緩衝區中的位元組位置，Unmanaged 記憶體資料流會在此處開始。</param>
      <param name="length">Unmanaged 記憶體資料流的長度。</param>
      <param name="access">Unmanaged 記憶體資料流的檔案存取模式。</param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Length">
      <summary>取得資料流中資料的長度。</summary>
      <returns>資料流中資料的長度。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Position">
      <summary>取得或設定資料流中目前的位置。</summary>
      <returns>在資料流中的目前位置。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">位置設為小於零的值，或位置大於 <see cref="F:System.Int32.MaxValue" />，或加入目前的指標時導致溢位。</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.PositionPointer">
      <summary>依據資料流中的目前位置，取得或設定資料流的位元組指標。</summary>
      <returns>位元組指標。</returns>
      <exception cref="T:System.IndexOutOfRangeException">目前位置大於資料流容量。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">正在設定的位置不是目前資料流中的有效位置。</exception>
      <exception cref="T:System.IO.IOException">正在將指標設為低於資料流起始位置的值。</exception>
      <exception cref="T:System.NotSupportedException">資料流已初始化，以搭配 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 使用。 <see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer" /> 屬性只適用於以 <see cref="T:System.Byte" /> 指標初始化的資料流。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>將指定的位元組數讀入指定的陣列。</summary>
      <param name="buffer">當這個方法傳回時，會包含指定的位元組陣列，這個陣列具有介於 <paramref name="offset" /> 到 (<paramref name="offset" /> + <paramref name="count" /> - 1) 之間的值，已由讀取自目前來源的位元組所取代。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零起始的位元組位移，即開始儲存讀取自目前資料流之資料的位置。</param>
      <param name="count">自目前資料流讀取的最大位元組數。</param>
      <returns>緩衝區所讀取的總位元組數。 如果目前無法取得足夠的位元組，則這個數目可能小於所要求的位元組數，如果已經到達資料流末端，則為零 (0)。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.NotSupportedException">基礎記憶體不支援讀取。
-或-
<see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /> 屬性設定為 <see langword="false" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 參數設定為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 參數小於零。
-或-
<paramref name="count" /> 參數小於零。</exception>
      <exception cref="T:System.ArgumentException">緩衝區陣列的長度減去 <paramref name="offset" /> 參數，小於 <paramref name="count" /> 參數。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Span{System.Byte})">
      <summary>將此非受控記憶體資料流中所有位元組讀入指定的位元組範圍。</summary>
      <param name="destination">當這個方法傳回時，此範圍會包含非受控記憶體資料流中的所有位元組。</param>
      <returns>讀入目的地的位元組總數。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>將指定的位元組數以非同步方式讀入指定的陣列。</summary>
      <param name="buffer">寫入資料的緩衝區。</param>
      <param name="offset">開始於此處自資料流寫入資料的 <paramref name="buffer" /> 中的位元組位移。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值會包含讀取至緩衝區的位元組總數。 如果目前可供使用的位元組數目少於所要求的數目，結果值可能會小於所要求的位元組數目，或者如果已經到達資料流末端，則可能為 0 (零)。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>以非同步方式將非受控記憶體資料流位元組讀入記憶體區域。</summary>
      <param name="buffer">當這個非同步方法完成時，此記憶體區域會包含從非受控記憶體資料流讀取的所有位元組。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步讀取作業並會將位元組總數包裝到緩衝區的工作。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadByte">
      <summary>從資料流讀取一個位元組，並將資料流的位置推進一個位元組；如果在資料流結尾，則傳回 -1。</summary>
      <returns>轉換成 <see cref="T:System.Int32" /> 物件的不帶正負號位元組；如果在資料流結尾，則為 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.NotSupportedException">基礎記憶體不支援讀取。
-或-
目前位置位於資料流結尾。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>將目前資料流的目前位置設為指定值。</summary>
      <param name="offset">相對於「原點」<c></c>的搜尋起點。</param>
      <param name="loc">使用類型 <see cref="T:System.IO.SeekOrigin" /> 的值，指定開頭、結尾或目前位置作為「原點」<c></c> 的參考點。</param>
      <returns>資料流中的新位置。</returns>
      <exception cref="T:System.IO.IOException">嘗試進行資料流開端前的搜尋。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 值大於資料流的最大值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="loc" /> 無效。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
      <summary>將資料流長度設為指定值。</summary>
      <param name="value">資料流的長度。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.NotSupportedException">基礎記憶體不支援寫入。
-或-
嘗試進行資料流寫入，且 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> 屬性為 <see langword="false" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="value" /> 超過資料流容量。
-或-
指定的 <paramref name="value" /> 為負數。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>使用緩衝區的資料，將位元組區塊寫入目前的資料流。</summary>
      <param name="buffer">從中複製位元組至目前資料流的位元組陣列。</param>
      <param name="offset">在此要開始複製位元組到目前資料流的緩衝區中位移。</param>
      <param name="count">要寫入目前資料流的位元組數目。</param>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.NotSupportedException">基礎記憶體不支援寫入。
-或-
嘗試進行資料流寫入，且 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> 屬性為 <see langword="false" />。
-或-
<paramref name="count" /> 值大於資料流容量。
-或-
位置位於資料流容量結尾。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">其中一個指定的參數小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 參數減去 <paramref name="buffer" /> 參數的長度小於 <paramref name="count" /> 參數。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>使用所提供位元組範圍中的資料，將位元組區塊寫入至目前的非受控記憶體資料流。</summary>
      <param name="source">要從中將位元組複製到目前非受控記憶體資料流的位元組範圍。</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>以非同步的方式將一連串的位元組寫入目前的資料流，由這個資料流中目前的位置前移寫入的位元組數目，並且監視取消要求。</summary>
      <param name="buffer">寫入資料的來源緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零起始的位元組位移，要從其中開始將位元組複製至資料流。</param>
      <param name="count">寫入的最大位元組數。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>以非同步方式將位元組範圍寫入至目前的資料流、依寫入的位元組數將此資料流中目前位置往前移，並監視取消要求。</summary>
      <param name="buffer">寫入資料的來源緩衝區。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
      <summary>寫入一個位元組到檔案資料流中的目前位置。</summary>
      <param name="value">寫入資料流的位元組值。</param>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.NotSupportedException">基礎記憶體不支援寫入。
-或-
嘗試進行資料流寫入，且 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> 屬性為 <see langword="false" />。
-或-
目前位置位於資料流容量的結尾。</exception>
      <exception cref="T:System.IO.IOException">所提供的 <paramref name="value" /> 導致資料流超出最大容量。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.IDispatchConstantAttribute">
      <summary vsli:raw="Indicates that the default value for the attributed field or parameter is an instance of &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;, where the &lt;see cref=&quot;P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">指示屬性欄位或參數的預設值為 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 的執行個體，其中 <see cref="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject" /> 為 <see langword="null" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IDispatchConstantAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.IDispatchConstantAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.CompilerServices.IDispatchConstantAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IDispatchConstantAttribute.Value">
      <summary vsli:raw="Gets the &lt;see langword=&quot;IDispatch&quot; /&gt; constant stored in this attribute.">取得儲存在這個屬性中的 <see langword="IDispatch" /> 常數。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;IDispatch&quot; /&gt; constant stored in this attribute. Only &lt;see langword=&quot;null&quot; /&gt; is allowed for an &lt;see langword=&quot;IDispatch&quot; /&gt; constant value.">儲存在這個屬性中的 <see langword="IDispatch" /> 常數。 只有 <see langword="null" /> 被允許用於 <see langword="IDispatch" /> 常數值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary vsli:raw="Indicates that the default value for the attributed field or parameter is an instance of &lt;see cref=&quot;T:System.Runtime.InteropServices.UnknownWrapper&quot; /&gt;, where the &lt;see cref=&quot;P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This class cannot be inherited.">指示屬性欄位或參數的預設值為 <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> 的執行個體，其中 <see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject" /> 為 <see langword="null" />。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.IUnknownConstantAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary vsli:raw="Gets the &lt;see langword=&quot;IUnknown&quot; /&gt; constant stored in this attribute.">取得儲存在這個屬性中的 <see langword="IUnknown" /> 常數。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;IUnknown&quot; /&gt; constant stored in this attribute. Only &lt;see langword=&quot;null&quot; /&gt; is allowed for an &lt;see langword=&quot;IUnknown&quot; /&gt; constant value.">儲存在這個屬性中的 <see langword="IUnknown" /> 常數。 只有 <see langword="null" /> 被允許用於 <see langword="IUnknown" /> 常數值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary vsli:raw="Allows an unmanaged method to call a managed method.">允許 Unmanaged 方法呼叫 Managed 方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary vsli:raw="Encapsulates an array and an offset within the specified array.">封裝陣列和在特定陣列中的位移 (Offset)。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; structure.">初始化 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 結構的新執行個體。</summary>
      <param name="array" vsli:raw="A managed array.">Managed 陣列。</param>
      <param name="offset" vsli:raw="The offset in bytes, of the element to be passed through platform invoke.">位移 (以位元組為單位)，屬於透過平台叫用傳遞的元素。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The array is larger than 2 gigabytes (GB).">陣列大於 2 GB。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary vsli:raw="Indicates whether the specified object matches the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object.">指出指定的物件是否符合目前的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件。</summary>
      <param name="obj" vsli:raw="Object to compare with this instance.">與這個執行個體相互比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object matches this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果物件符合這個 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Indicates whether the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object matches the current instance.">指出指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件是否符合目前的執行個體。</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with this instance.">要與這個執行個體相比較的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object matches the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件符合目前的執行個體，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary vsli:raw="Returns the managed array referenced by this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt;.">傳回這個 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 所參考的 Managed 陣列。</summary>
      <returns vsli:raw="The managed array this instance references.">這個執行個體所參考的 Managed 陣列。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary vsli:raw="Returns a hash code for this value type.">傳回這個實值型別 (Value Type) 的雜湊程式碼。</summary>
      <returns vsli:raw="The hash code for this instance.">這個執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary vsli:raw="Returns the offset provided when this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; was constructed.">當這個 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 建構完成時，傳回提供的位移。</summary>
      <returns vsli:raw="The offset for this instance.">這個執行個體的位移。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; objects have the same value.">判斷兩個指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件是否具有相同的值。</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;b&quot; /&gt; parameter.">
        <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件，要與 <paramref name="b" /> 參數比較。</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;a&quot; /&gt; parameter.">
        <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件，要與 <paramref name="a" /> 參數比較。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;a&quot; /&gt; is the same as the value of &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的值與 <paramref name="a" /> 的值相同，則為 <paramref name="b" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; objects no not have the same value.">判斷兩個指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件是否具有相同的值。</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;b&quot; /&gt; parameter.">
        <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件，要與 <paramref name="b" /> 參數比較。</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;a&quot; /&gt; parameter.">
        <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件，要與 <paramref name="a" /> 參數比較。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;a&quot; /&gt; is not the same as the value of &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="a" /> 的值與 <paramref name="b" /> 的值不同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary vsli:raw="Specifies whether the type should be marshaled using the Automation marshaler or a custom proxy and stub.">指定類型是否應使用 Automation 封送處理器或自訂的 Proxy 和 Stub 來進行封送處理。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.AutomationProxyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.InteropServices.AutomationProxyAttribute" /> 類別的新執行個體。</summary>
      <param name="val" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class should be marshaled using the Automation Marshaler; &lt;see langword=&quot;false&quot; /&gt; if a proxy stub marshaler should be used.">如果類別應該使用 Automation 封送處理器來封送處理，則為 <see langword="true" />﹔如果應該使用 Proxy Stub 封送處理器，則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary vsli:raw="Gets a value indicating the type of marshaler to use.">取得值，表示使用的封送處理器的型別。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class should be marshaled using the Automation Marshaler; &lt;see langword=&quot;false&quot; /&gt; if a proxy stub marshaler should be used.">如果類別應該使用 Automation 封送處理器來封送處理，則為 <see langword="true" />﹔如果應該使用 Proxy Stub 封送處理器，則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary vsli:raw="Controls whether Unicode characters are converted to the closest matching ANSI characters.">控制 Unicode 字元是否要轉換成最相近的 ANSI 字元。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BestFitMappingAttribute&quot; /&gt; class set to the value of the &lt;see cref=&quot;P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping&quot; /&gt; property.">初始化 <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" /> 類別的新執行個體，這個執行個體設定為 <see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" /> 屬性的值。</summary>
      <param name="BestFitMapping" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that best-fit mapping is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> 指示啟用了最適合對應，否則為 <see langword="false" />。 預設為 <see langword="true" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary vsli:raw="Gets the best-fit mapping behavior when converting Unicode characters to ANSI characters.">將 Unicode 字元轉換為 ANSI 字元時，取得最適合對應行為。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if best-fit mapping is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果已啟用最適合對應，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI '?' character.">在無法對應的 Unicode 字元轉換為 ANSI '?' 字元時，啟用或停用擲回例外狀況。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary vsli:raw="Marshals data of type &lt;see langword=&quot;VT_BSTR&quot; /&gt; from managed to unmanaged code. This class cannot be inherited.">將 <see langword="VT_BSTR" /> 型別的資料從 Managed 封送處理成 Unmanaged 程式碼。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; object.">使用指定的 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 物件，初始化 <see cref="T:System.Object" /> 類別的新執行個體。</summary>
      <param name="value" vsli:raw="The object to wrap and marshal as &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">要包裝並當做 <see langword="VT_BSTR" /> 封送處理的物件。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.String&quot; /&gt; object.">使用指定的 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 物件，初始化 <see cref="T:System.String" /> 類別的新執行個體。</summary>
      <param name="value" vsli:raw="The object to wrap and marshal as &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">要包裝並當做 <see langword="VT_BSTR" /> 封送處理的物件。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary vsli:raw="Gets the wrapped &lt;see cref=&quot;T:System.String&quot; /&gt; object to marshal as type &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">取得要當做型別 <see langword="VT_BSTR" /> 封送處理的已包裝 <see cref="T:System.String" /> 物件。</summary>
      <returns vsli:raw="The object that is wrapped by &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 所包裝的物件。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary vsli:raw="Specifies the calling convention required to call methods implemented in unmanaged code.">指定需要呼叫在 Unmanaged 程式碼中實作之方法的呼叫慣例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary vsli:raw="The caller cleans the stack. This enables calling functions with &lt;see langword=&quot;varargs&quot; /&gt;, which makes it appropriate to use for methods that accept a variable number of parameters, such as &lt;see langword=&quot;Printf&quot; /&gt;.">呼叫端會清除堆疊。 這會啟用有 <see langword="varargs" /> 的呼叫函式，就可用於接受各種數目參數的方法，如 <see langword="Printf" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary vsli:raw="This calling convention is not supported.">不支援這個呼叫慣例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary vsli:raw="The callee cleans the stack.">被呼叫端會清除堆疊。 這是針對用平台叫用呼叫 Unmanaged 函式的預設慣例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary vsli:raw="The first parameter is the &lt;see langword=&quot;this&quot; /&gt; pointer and is stored in register ECX. Other parameters are pushed on the stack. This calling convention is used to call methods on classes exported from an unmanaged DLL.">第一個參數為 <see langword="this" /> 指標且儲存在 register ECX 中。 其他參數會被推入至堆疊。 這個呼叫慣例是用來呼叫從 Unmanaged DLL 匯出之類別上的方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary vsli:raw="This member is not actually a calling convention, but instead uses the default platform calling convention.">此成員並不真的是呼叫慣例，但會使用預設平台呼叫慣例。 例如，在 Windows 上的預設值為 <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" />，在 Windows CE.NET 上則為 <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary vsli:raw="Indicates the type of class interface to be generated for a class exposed to COM, if an interface is generated at all.">表示要為公開至 COM 之類別所產生的類別介面類型 (如果產生介面的話)。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; enumeration value.">使用指定的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 列舉值，初始化 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 類別的新執行個體。</summary>
      <param name="classInterfaceType" vsli:raw="Describes the type of interface that is generated for a class.">描述為類別所產生的介面型別。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; enumeration member.">使用指定的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 列舉型別 (Enumeration) 成員，初始化 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 類別的新執行個體。</summary>
      <param name="classInterfaceType" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; values that describes the type of interface that is generated for a class.">其中一個 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值，描述為類別產生的介面型別。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; value that describes which type of interface should be generated for the class.">取得描述應該產生哪個型別之類別介面的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; value that describes which type of interface should be generated for the class.">
        <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值，描述應該產生哪個型別的類別介面。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary vsli:raw="Identifies the type of class interface that is generated for a class.">描述為類別所產生的類別介面型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary vsli:raw="&lt;para&gt;Indicates that the class only supports late binding for COM clients. A &lt;see langword=&quot;dispinterface&quot; /&gt; for the class is automatically exposed to COM clients on request. The type library produced by Tlbexp.exe (Type Library Exporter) does not contain type information for the &lt;see langword=&quot;dispinterface&quot; /&gt; in order to prevent clients from caching the DISPIDs of the interface. The &lt;see langword=&quot;dispinterface&quot; /&gt; does not exhibit the versioning problems described in &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; because clients can only late-bind to the interface.&lt;/para&gt;&lt;para&gt;This is the default setting for &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;.&lt;/para&gt;">指示類別對 COM 用戶端只支援晚期繫結 (Late Binding)。 類別的 <see langword="dispinterface" /> 應要求會自動地公開至 COM 用戶端。 Tlbexp.exe (型別程式庫匯出工具) 產生的型別程式庫不包含 <see langword="dispinterface" /> 類型資訊，以免用戶端快取介面的 DISPID。 <see langword="dispinterface" /> 不會出現 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 中所描述的版本控制問題，因為用戶端只能晚期繫結到介面。
這是 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 的預設設定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary vsli:raw="Indicates that a dual class interface is automatically generated for the class and exposed to COM. Type information is produced for the class interface and published in the type library. Using &lt;see langword=&quot;AutoDual&quot; /&gt; is strongly discouraged because of the versioning limitations described in &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;.">指示雙重類別介面自動地產生給類別並公開至 COM。 型別資訊產生給類別介面並發行至型別程式庫。 由於 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 所描述的版本控制限制，我們非常不鼓勵使用 <see langword="AutoDual" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary vsli:raw="&lt;para&gt;Indicates that no class interface is generated for the class. If no interfaces are implemented explicitly, the class can only provide late-bound access through the &lt;see langword=&quot;IDispatch&quot; /&gt; interface. This is the recommended setting for &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;. Using &lt;see langword=&quot;ClassInterfaceType.None&quot; /&gt; is the only way to expose functionality through interfaces implemented explicitly by the class.&lt;/para&gt;&lt;para&gt;Tlbexp.exe (Type Library Exporter) exposes the first public, COM-visible interface implemented by the class as the default interface of the coclass. In .NET Framework 2.0 and later versions, you can specify the default interface exposed to COM by using the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute&quot; /&gt; attribute. If the class implements no interfaces, the first public, COM-visible interface implemented by a base class becomes the default interface (starting with the most recently derived base class and working backward). Tlbexp.exe exposes &lt;see langword=&quot;_Object&quot; /&gt; as the default interface if neither the class nor its base classes implement interfaces.&lt;/para&gt;">指示沒有類別介面產生給類別。 如果沒有明確實作介面，類別只能透過 <see langword="IDispatch" /> 介面提供晚期繫結存取。 這是 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 的建議預設值。 使用 <see langword="ClassInterfaceType.None" /> 是唯一透過類別明確實作的介面公開功能的方法。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary vsli:raw="Specifies the class identifier of a coclass imported from a type library.">指定從類型程式庫匯入之 Coclass 的類別識別項。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CoClassAttribute&quot; /&gt; with the class identifier of the original coclass.">使用原始 Coclass 的類別識別項，初始化 <see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> 的新執行個體。</summary>
      <param name="coClass" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class identifier of the original coclass.">
        <see cref="T:System.Type" />，包含原始 Coclass 的類別識別項。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary vsli:raw="Gets the class identifier of the original coclass.">取得原始 Coclass 的類別識別項。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the class identifier of the original coclass.">
        <see cref="T:System.Type" />，包含原始 Coclass 的類別識別項。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary vsli:raw="Indicates the COM alias for a parameter or field type.">表示參數或欄位類型的 COM 別名。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAliasNameAttribute&quot; /&gt; class with the alias for the attributed field or parameter.">使用屬性化欄位或參數的別名，初始化 <see cref="T:System.Runtime.InteropServices.ComAliasNameAttribute" /> 類別的新執行個體。</summary>
      <param name="alias" vsli:raw="The alias for the field or parameter as found in the type library when it was imported.">當匯入時在型別程式庫中找到的欄位或參數的別名。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary vsli:raw="Gets the alias for the field or parameter as found in the type library when it was imported.">取得匯入時在型別程式庫中找到的欄位或參數的別名。</summary>
      <returns vsli:raw="The alias for the field or parameter as found in the type library when it was imported.">當匯入時在型別程式庫中找到的欄位或參數的別名。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary vsli:raw="Permits late-bound registration of an event handler.">允許事件處理常式的晚期繫結註冊。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; class by using the specified type and a name of the event on the type.">使用指定的型別以及型別上事件的名稱，初始化 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 類別的新執行個體。</summary>
      <param name="type" vsli:raw="The type of object.">物件的型別。</param>
      <param name="eventName" vsli:raw="The name of an event on &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" /> 上事件的名稱。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Attaches an event handler to a COM object.">將事件處理常式附加至 COM 物件。</summary>
      <param name="target" vsli:raw="The target object that the event delegate should bind to.">事件委派應該繫結的目標物件。</param>
      <param name="handler" vsli:raw="The event delegate.">事件委派。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary vsli:raw="Gets the attributes for this event.">取得這個事件的屬性。</summary>
      <returns vsli:raw="The read-only attributes for this event.">這個事件的唯讀屬性。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary vsli:raw="Gets the class that declares this member.">取得宣告這個成員的類別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the class that declares this member.">宣告這個成員之類別的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary vsli:raw="Gets the method that was used to add an event handler delegate to the event source.">取得用來將事件處理常式委派加入至事件來源的方法。</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 是表示要傳回非公用方法，否則為 <see langword="false" />。</param>
      <returns vsli:raw="The method that was used to add an event handler delegate to the event source.">用來將事件處理常式委派加入至事件來源的方法。</returns>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> 為 <see langword="true" />，而且用來將事件處理常式委派加入的方法是非公用的，但是呼叫端沒有使用權限來反映非公用的方法。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets an array that contains all the custom attributes that are applied to this member.">在衍生類別中遭覆寫時，取得包含所有套用至此成員之自訂屬性的陣列。</summary>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示要搜尋這個成員的繼承鏈結以尋找屬性；否則為 <see langword="false" />。</param>
      <returns vsli:raw="An array that contains all the custom attributes, or an array that has no elements if no attributes were defined.">包含所有自訂屬性的陣列，如果沒有定義屬性，則為不包含任何元素的陣列。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.">這個成員所屬的型別已載入僅限反映的內容中。 請參閱如何：將組件載入僅限反映的內容。</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="A custom attribute type cannot be loaded.">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets an array that contains all the custom attributes of the specified type that are applied to this member.">在衍生類別中遭覆寫時，取得包含所有套用至此成員之指定型別自訂屬性的陣列。</summary>
      <param name="attributeType" vsli:raw="The attribute type to search for. Only attributes that are assignable to this type can be returned.">要搜尋的屬性型別。 只傳回可以指派給這個型別的屬性。</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示要搜尋這個成員的繼承鏈結以尋找屬性；否則為 <see langword="false" />。</param>
      <returns vsli:raw="An array that contains all the custom attributes of the specified type, or an array that has no elements if no attributes were defined.">包含指定型別所有的自訂屬性之陣列，如果沒有定義屬性，則為不包含任何元素的陣列。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context">這個成員所屬的型別已載入僅限反映的內容中。 請參閱如何：將組件載入到僅限反映的內容將組件載入到僅限反映的內容</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="A custom attribute type cannot be loaded.">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributesData">
      <summary vsli:raw="Returns a list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects for the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt;.">傳回目前 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 的 <see cref="T:System.Reflection.CustomAttributeData" /> 物件清單。</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt;.">
        <see cref="T:System.Reflection.CustomAttributeData" /> 物件的泛型清單，表示已套用至目前 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 的屬性相關資料。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetOtherMethods(System.Boolean)">
      <summary vsli:raw="Returns the public or non-public methods that have been associated with an event in metadata.">傳回已與中繼資料中事件建立關聯的公用或非公用方法。</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 是表示要包括非公用方法，否則為 <see langword="false" />。</param>
      <returns vsli:raw="An array representing the methods that have been associated with the event in metadata. If there are no such methods, an empty array is returned.">陣列，表示已與中繼資料中事件建立關聯的方法。 如果沒有這類方法，則會傳回空白陣列。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, returns the method that was called when the event was raised.">在衍生類別中遭覆寫時，傳回事件引發時呼叫的方法。</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 是表示要傳回非公用方法，否則為 <see langword="false" />。</param>
      <returns vsli:raw="The object that was called when the event was raised.">引發事件時呼叫的物件。</returns>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> 為 <see langword="true" />，而且用來將事件處理常式委派加入的方法是非公用的，但是呼叫端沒有使用權限來反映非公用的方法。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, retrieves the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object for removing a method of the event.">在衍生類別中遭覆寫時，擷取用來移除事件方法的 <see cref="T:System.Reflection.MethodInfo" /> 物件。</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 是表示要傳回非公用方法，否則為 <see langword="false" />。</param>
      <returns vsli:raw="The method that was used to remove an event handler delegate from the event source.">用來從事件來源移除事件處理常式委派的方法。</returns>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> 為 <see langword="true" />，而且用來將事件處理常式委派加入的方法是非公用的，但是呼叫端沒有使用權限來反映非公用的方法。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether one or more instances of the specified attribute are applied to this member.">指出在此成員上是套用了指定屬性的一個或多個執行個體。</summary>
      <param name="attributeType" vsli:raw="The attribute type to search for.">要搜尋的屬性型別。</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示要搜尋這個成員的繼承鏈結以尋找屬性；否則為 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified attribute has been applied to this member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已將指定屬性套用至此成員，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.MetadataToken">
      <summary vsli:raw="Gets the metadata token associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">取得與目前 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 物件建立關聯的中繼資料語彙基元。</summary>
      <returns vsli:raw="A 32-bit Integer that represents the metadata token.">表示元資料標記的32位整數。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Module">
      <summary vsli:raw="Gets the module associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">取得與目前 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 物件建立關聯的模組。</summary>
      <returns vsli:raw="The module associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">與目前<see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" />物件相關聯的模組。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary vsli:raw="Gets the name of the current member.">取得目前成員的名稱。</summary>
      <returns vsli:raw="The name of this member.">這個成員的名稱。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary vsli:raw="Gets the class object that was used to initialize this instance.">取得用來初始化這個執行個體的類別物件。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to initialize the current object.">用於初始化目前的物件之 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Detaches an event handler from a COM object.">從 COM 物件中斷連結事件處理常式。</summary>
      <param name="target" vsli:raw="The target object that the event delegate is bound to.">事件委派繫結的目標物件。</param>
      <param name="handler" vsli:raw="The event delegate.">事件委派。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The event does not have a public &lt;see langword=&quot;remove&quot; /&gt; accessor.">此事件不具公用 <see langword="remove" /> 存取子。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The handler that was passed in cannot be used.">無法使用傳入的處理常式。</exception>
      <exception cref="T:System.Reflection.TargetException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt; and the event is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; is not declared on the target.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch &lt;see cref=&quot;T:System.Exception&quot; /&gt; instead.">在適用於 Windows 市集應用程式的 .NET - 支援的應用程式開發介面 或是可攜式類別庫中，改為攔截 <see cref="T:System.Exception" />。  
  

            
  
 <paramref name="target" /> 參數是 <see langword="null" /> 且事件不是靜態的。  
  
-或- 
未在目標上宣告 <see cref="T:System.Reflection.EventInfo" /> 。</exception>
      <exception cref="T:System.MethodAccessException" vsli:raw="The caller does not have access permission to the member.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch the base class exception, &lt;see cref=&quot;T:System.MemberAccessException&quot; /&gt;, instead.">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.MemberAccessException" />。  
  

            
  
 呼叫端無權存取該成員。</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute">
      <summary vsli:raw="Indicates to a COM client that all classes in the current version of an assembly are compatible with classes in an earlier version of the assembly.">指出對於 COM 用戶端，所有目前組件版本中的類別都和組件之前版本中的類別相容。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComCompatibleVersionAttribute&quot; /&gt; class with the major version, minor version, build, and revision numbers of the assembly.">使用組件的主要版本、次要版本、組建和修訂編號，初始化 <see cref="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute" /> 類別的新執行個體。</summary>
      <param name="major" vsli:raw="The major version number of the assembly.">組件的主要版本編號。</param>
      <param name="minor" vsli:raw="The minor version number of the assembly.">組件的次要版本編號。</param>
      <param name="build" vsli:raw="The build number of the assembly.">組件的組建編號。</param>
      <param name="revision" vsli:raw="The revision number of the assembly.">組件的修訂編號。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.BuildNumber">
      <summary vsli:raw="Gets the build number of the assembly.">取得組件的組建編號。</summary>
      <returns vsli:raw="The build number of the assembly.">組件的組建編號。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the assembly.">取得組件的主要版本編號。</summary>
      <returns vsli:raw="The major version number of the assembly.">組件的主要版本編號。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the assembly.">取得組件的次要版本編號。</summary>
      <returns vsli:raw="The minor version number of the assembly.">組件的次要版本編號。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.RevisionNumber">
      <summary vsli:raw="Gets the revision number of the assembly.">取得組件的修訂編號。</summary>
      <returns vsli:raw="The revision number of the assembly.">組件的修訂編號。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary vsli:raw="Indicates that information was lost about a class or interface when it was imported from a type library to an assembly.">指示從型別程式庫匯入組件 (Assembly) 時，遺失類別或介面的相關資訊。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ComConversionLossAttribute&quot; /&gt; class.">初始化 <see langword="ComConversionLossAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary vsli:raw="Specifies a default interface to expose to COM. This class cannot be inherited.">指定要公開 (Expose) 至 COM 的預設介面。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Type&quot; /&gt; object as the default interface exposed to COM.">使用指定的 <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> 物件做為公開至 COM 的預設介面，初始化 <see cref="T:System.Type" /> 類別的新執行個體。</summary>
      <param name="defaultInterface" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; value indicating the default interface to expose to COM.">
        <see cref="T:System.Type" /> 值，表示要公開至 COM 的預設介面。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the default interface to expose to COM.">取得 <see cref="T:System.Type" /> 物件，其指定要公開至 COM 的預設介面。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the default interface to expose to COM.">
        <see cref="T:System.Type" /> 物件，其指定要公開至 COM 的預設介面。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary vsli:raw="Identifies the source interface and the class that implements the methods of the event interface that is generated when a coclass is imported from a COM type library.">識別來源介面，以及實作事件介面 (從 COM 類型程式庫匯入 Coclass 時所產生) 之方法的類別。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComEventInterfaceAttribute&quot; /&gt; class with the source interface and event provider class.">使用來源介面和事件提供者類別，初始化 <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /> 類別的新執行個體。</summary>
      <param name="SourceInterface" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the original source interface from the type library. COM uses this interface to call back to the managed class.">
        <see cref="T:System.Type" />，包含來自型別程式庫的原始來源介面。 COM 使用這個介面回呼至 Managed 類別。</param>
      <param name="EventProvider" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class that implements the methods of the event interface.">
        <see cref="T:System.Type" />，包含實作事件介面之方法的類別。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary vsli:raw="Gets the class that implements the methods of the event interface.">取得實作事件介面的方法的類別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class that implements the methods of the event interface.">
        <see cref="T:System.Type" />，包含實作事件介面之方法的類別。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary vsli:raw="Gets the original source interface from the type library.">從型別程式庫取得原始來源介面。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the source interface.">包含來源介面的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary vsli:raw="Provides methods that enable .NET delegates that handle events to be added and removed from COM objects.">提供方法，以便對 COM 物件加入及移除處理事件的 .NET Framework 委派。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary vsli:raw="Adds a delegate to the invocation list of events originating from a COM object.">將委派加入至源自 COM 物件的事件引動過程清單。</summary>
      <param name="rcw" vsli:raw="The COM object that triggers the events the caller would like to respond to.">COM 物件，觸發呼叫端想要回應的事件。</param>
      <param name="iid" vsli:raw="The identifier of the source interface used by the COM object to trigger events.">COM 物件用來觸發事件之來源介面的識別項。</param>
      <param name="dispid" vsli:raw="The dispatch identifier of the method on the source interface.">來源介面上方法的分派識別項。</param>
      <param name="d" vsli:raw="The delegate to invoke when the COM event is fired.">引發 COM 事件時要叫用的委派。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary vsli:raw="Removes a delegate from the invocation list of events originating from a COM object.">從源自 COM 物件的事件引動過程清單移除委派。</summary>
      <param name="rcw" vsli:raw="The COM object the delegate is attached to.">委派附加至的 COM 物件。</param>
      <param name="iid" vsli:raw="The identifier of the source interface used by the COM object to trigger events.">COM 物件用來觸發事件之來源介面的識別項。</param>
      <param name="dispid" vsli:raw="The dispatch identifier of the method on the source interface.">來源介面上方法的分派識別項。</param>
      <param name="d" vsli:raw="The delegate to remove from the invocation list.">要從引動過程清單移除的委派。</param>
      <returns vsli:raw="The delegate that was removed from the invocation list.">已從引動過程清單移除的委派。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary vsli:raw="The exception that is thrown when an unrecognized HRESULT is returned from a COM method call.">當 COM 方法呼叫傳回無法辨識的 HRESULT 時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with default values.">使用預設值，初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class from serialization data.">從序列化 (Serialization) 資料，初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that holds the serialized object data.">存放序列物件資料的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that supplies the contextual information about the source or destination.">提供關於來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified message.">使用指定的訊息，初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">訊息，表示例外狀況的原因。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified message and error code.">使用指定的訊息和錯誤碼，初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that indicates the reason the exception occurred.">訊息，指出例外狀況發生的原因。</param>
      <param name="errorCode" vsli:raw="The error code (HRESULT) value associated with this exception.">與這個例外狀況相關聯的錯誤碼 (HRESULT) 值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary vsli:raw="Converts the contents of the exception to a string.">將例外狀況的內容轉換為字串。</summary>
      <returns vsli:raw="A string containing the &lt;see cref=&quot;P:System.Exception.HResult&quot; /&gt;, &lt;see cref=&quot;P:System.Exception.Message&quot; /&gt;, &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt;, and &lt;see cref=&quot;P:System.Exception.StackTrace&quot; /&gt; properties of the exception.">字串，包含例外狀況的 <see cref="P:System.Exception.HResult" />、<see cref="P:System.Exception.Message" />、<see cref="P:System.Exception.InnerException" /> 和 <see cref="P:System.Exception.StackTrace" /> 屬性。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary vsli:raw="Indicates that the attributed type was previously defined in COM.">表示 COM 中之前已定義屬性化類型。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComImportAttribute&quot; /&gt;.">初始化 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary vsli:raw="Identifies how to expose an interface to COM.">識別如何將介面公開至 COM。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary vsli:raw="Indicates that the interface is exposed to COM as a dual interface, which enables both early and late binding. &lt;see cref=&quot;F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual&quot; /&gt; is the default value.">指出介面向 COM 公開為雙重介面，可使用早期繫結和晚期繫結。 <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" /> 為預設值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary vsli:raw="Indicates that an interface is exposed to COM as a dispinterface, which enables late binding only.">指出介面向 COM 公開為 dispinterface，僅可使用晚期繫結。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIInspectable">
      <summary vsli:raw="Indicates that an interface is exposed to COM as a Windows Runtime interface.">指出介面向 COM 公開為 Windows 執行階段 介面。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary vsli:raw="Indicates that an interface is exposed to COM as an interface that is derived from IUnknown, which enables only early binding.">指出介面向 COM 公開為自 IUnknown 衍生的介面，僅可使用早期繫結。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary vsli:raw="Describes the type of a COM member.">描述 COM 成員的型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary vsli:raw="The member is a normal method.">該成員為一般方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary vsli:raw="The member gets properties.">該成員取得屬性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary vsli:raw="The member sets properties.">該成員設定屬性。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary vsli:raw="Specifies the method to call when you register an assembly for use from COM; this enables the execution of user-written code during the registration process.">指定當您登錄來自 COM 的所用組件 (Assembly) 時要呼叫的方法；這個方法可讓您在登錄程序期間執行使用者撰寫的程式碼。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComRegisterFunctionAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary vsli:raw="Identifies a list of interfaces that are exposed as COM event sources for the attributed class.">識別公開為屬性化類別之 COM 事件來源的介面清單。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the name of the event source interface.">使用事件來源介面的名稱，初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 類別的新執行個體。</summary>
      <param name="sourceInterfaces" vsli:raw="A null-delimited list of fully qualified event source interface names.">完整事件來源介面名稱之以 null 分隔的清單。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the type to use as a source interface.">使用要當做來源介面使用的型別，初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 類別的新執行個體。</summary>
      <param name="sourceInterface" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source interface.">來源介面的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">使用要當做來源介面使用的型別，初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 類別的新執行個體。</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">預設來源介面的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">來源介面的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">使用要當做來源介面使用的型別，初始化 <see langword="ComSourceInterfacesAttribute" /> 類別的新執行個體。</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">預設來源介面的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">來源介面的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface3" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">來源介面的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">使用要當做來源介面使用的型別，初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 類別的新執行個體。</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">預設來源介面的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">來源介面的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface3" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">來源介面的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface4" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">來源介面的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary vsli:raw="Gets the fully qualified name of the event source interface.">取得事件來源介面的完整名稱。</summary>
      <returns vsli:raw="The fully qualified name of the event source interface.">事件來源介面的完整名稱。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary vsli:raw="Specifies the requested behavior when setting up an advise sink or a caching connection with an object.">指定設定通知接收或快取物件連接時的要求行為。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary vsli:raw="For data advisory connections, assures accessibility to data.">針對資料諮詢連接，確保資料的存取性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary vsli:raw="For data advisory connections (&lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt;), this flag requests the data object not to send data when it calls &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;.">針對資料諮詢連接 (<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> 或 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />)，這個旗標會要求資料物件不要在它呼叫 <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 時傳送資料。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary vsli:raw="Requests that the object make only one change notification or cache update before deleting the connection.">要求物件在刪除連接之前只執行一次變更告知或快取更新。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary vsli:raw="Requests that the object not wait for the data or view to change before making an initial call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; (for data or view advisory connections) or updating the cache (for cache connections).">要求物件不要等到資料或檢視變更後，才對 <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 發出初始呼叫 (針對資料或檢視諮詢連接) 或更新快取區 (Cache) (針對快取連接)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary vsli:raw="This value is used by DLL object applications and object handlers that perform the drawing of their objects.">這個值是由 DLL 物件應用程式和執行物件繪製的物件處理常式 (Object Handler) 所使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary vsli:raw="Synonym for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN&quot; /&gt;, which is used more often.">使用較頻繁的 <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN" /> 的同義資料表 (Synonym)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary vsli:raw="For cache connections, this flag updates the cached representation only when the object containing the cache is saved.">針對快取連接，這個旗標只會在儲存包含快取區的物件時更新快取表示。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS">
      <summary vsli:raw="Stores the parameters that are used during a moniker binding operation.">儲存在 Moniker 繫結作業期間使用的參數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.cbStruct">
      <summary vsli:raw="Specifies the size, in bytes, of the &lt;see langword=&quot;BIND_OPTS&quot; /&gt; structure.">以位元組指定 <see langword="BIND_OPTS" /> 結構的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.dwTickCountDeadline">
      <summary vsli:raw="Indicates the amount of time (clock time in milliseconds, as returned by the &lt;see langword=&quot;GetTickCount&quot; /&gt; function) that the caller specified to complete the binding operation.">指示呼叫端所指定完成繫結作業的時間量 (以毫秒為單位的時間，如 <see langword="GetTickCount" /> 函式傳回者)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfFlags">
      <summary vsli:raw="Controls aspects of moniker binding operations.">控制 Moniker 繫結作業的各個層面。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfMode">
      <summary vsli:raw="Represents flags that should be used when opening the file that contains the object identified by the moniker.">表示開啟含有由 Moniker 所識別之物件的檔案時應該使用的旗標。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BINDPTR">
      <summary vsli:raw="Contains a pointer to a bound-to &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure, &lt;see cref=&quot;T:System.Runtime.InteropServices.VARDESC&quot; /&gt; structure, or an &lt;see langword=&quot;ITypeComp&quot; /&gt; interface.">包含繫結至 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 結構、<see cref="T:System.Runtime.InteropServices.VARDESC" /> 結構或 <see langword="ITypeComp" /> 介面的指標。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpfuncdesc">
      <summary vsli:raw="Represents a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure.">表示 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 結構的指標。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lptcomp">
      <summary vsli:raw="Represents a pointer to an &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ITypeComp&quot; /&gt; interface.">表示 <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeComp" /> 介面的指標。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpvardesc">
      <summary vsli:raw="Represents a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.VARDESC&quot; /&gt; structure.">表示 <see cref="T:System.Runtime.InteropServices.VARDESC" /> 結構的指標。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CALLCONV">
      <summary vsli:raw="Identifies the calling convention used by a method described in a METHODDATA structure.">識別 METHODDATA 結構中所述方法使用的呼叫慣例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL">
      <summary vsli:raw="Indicates that the C declaration (CDECL) calling convention is used for a method.">表示在方法中使用 C 宣告 (CDECL) 呼叫慣例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MACPASCAL">
      <summary vsli:raw="Indicates that the Macintosh Pascal (MACPASCAL) calling convention is used for a method.">表示在方法中使用 Macintosh Pascal (MACPASCAL) 呼叫慣例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MAX">
      <summary vsli:raw="Indicates the end of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.CALLCONV&quot; /&gt; enumeration.">表示 <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" /> 列舉的結尾。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWCDECL">
      <summary vsli:raw="Indicates that the Macintosh Programmers' Workbench (MPW) CDECL calling convention is used for a method.">表示在方法中使用 Macintosh Programmers' Workbench (MPW) CDECL 呼叫慣例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWPASCAL">
      <summary vsli:raw="Indicates that the Macintosh Programmers' Workbench (MPW) PASCAL calling convention is used for a method.">表示在方法中使用 Macintosh Programmers' Workbench (MPW) PASCAL 呼叫慣例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MSCPASCAL">
      <summary vsli:raw="Indicates that the MSC Pascal (MSCPASCAL) calling convention is used for a method.">表示在方法中使用 MSC Pascal (MSCPASCAL) 呼叫慣例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_PASCAL">
      <summary vsli:raw="Indicates that the Pascal calling convention is used for a method.">表示在方法中使用 Pascal 呼叫慣例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_RESERVED">
      <summary vsli:raw="This value is reserved for future use.">這個值已保留供未來使用</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_STDCALL">
      <summary vsli:raw="Indicates that the standard calling convention (STDCALL) is used for a method.">表示在方法中使用標準呼叫慣例 (STDCALL)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_SYSCALL">
      <summary vsli:raw="Indicates that the standard SYSCALL calling convention is used for a method.">表示在方法中使用標準 SYSCALL 呼叫慣例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA">
      <summary vsli:raw="Describes a connection that exists to a given connection point.">描述指定連接點上存在的連接。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.dwCookie">
      <summary vsli:raw="Represents a connection token that is returned from a call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt;.">表示從對 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 的呼叫傳回的連接 Token。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.pUnk">
      <summary vsli:raw="Represents a pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface on a connected advisory sink. The caller must call &lt;see langword=&quot;IUnknown::Release&quot; /&gt; on this pointer when the &lt;see langword=&quot;CONNECTDATA&quot; /&gt; structure is no longer needed.">表示已連接的通知接收 (Advisory Sink) 之 <see langword="IUnknown" /> 介面的指標。 當不再需要 <see langword="IUnknown::Release" /> 結構時，呼叫端必須在這個指標上呼叫 <see langword="CONNECTDATA" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary vsli:raw="Specifies the direction of the data flow in the &lt;paramref name=&quot;dwDirection&quot; /&gt; parameter of the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; method. This determines the formats that the resulting enumerator can enumerate.">在 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 方法的 <paramref name="dwDirection" /> 參數中，指定資料流量的方向。 這決定了產生的列舉值可以列舉的格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary vsli:raw="Requests that &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; supply an enumerator for the formats that can be specified in &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;.">要求 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 提供列舉值給可以在 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 中指定的格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary vsli:raw="Requests that &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; supply an enumerator for the formats that can be specified in &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;.">要求 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 提供列舉值給可以在 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" /> 中指定的格式。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DESCKIND">
      <summary vsli:raw="Identifies the type description being bound to.">識別所要繫結的類型描述。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_FUNCDESC">
      <summary vsli:raw="Indicates that a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure was returned.">指示已傳回 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 結構。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary vsli:raw="Indicates that an &lt;see langword=&quot;IMPLICITAPPOBJ&quot; /&gt; was returned.">指示已傳回 <see langword="IMPLICITAPPOBJ" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_MAX">
      <summary vsli:raw="Indicates an end-of-enumeration marker.">指示列舉型別 (Enumeration) 資料標記的結尾。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_NONE">
      <summary vsli:raw="Indicates that no match was found.">指示沒有找到相符的比對。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_TYPECOMP">
      <summary vsli:raw="Indicates that a &lt;see langword=&quot;TYPECOMP&quot; /&gt; was returned.">指示已傳回 <see langword="TYPECOMP" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_VARDESC">
      <summary vsli:raw="Indicates that a &lt;see langword=&quot;VARDESC&quot; /&gt; was returned.">指示已傳回 <see langword="VARDESC" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS">
      <summary vsli:raw="Contains the arguments passed to a method or property by &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">包含 <see langword="IDispatch::Invoke" /> 傳遞給方法或屬性的引數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cArgs">
      <summary vsli:raw="Represents the count of arguments.">表示引數的計數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cNamedArgs">
      <summary vsli:raw="Represents the count of named arguments.">表示具名引數的計數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgdispidNamedArgs">
      <summary vsli:raw="Represents the dispatch IDs of named arguments.">表示具名引數的分派 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgvarg">
      <summary vsli:raw="Represents a reference to the array of arguments.">表示引數陣列的參考。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary vsli:raw="Specifies the desired data or view aspect of the object when drawing or getting data.">指定繪製或取得資料時所需的資料或物件的檢視外觀。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary vsli:raw="A representation of an object that lets that object be displayed as an embedded object inside a container. This value is typically specified for compound document objects. The presentation can be provided for the screen or printer.">物件的表示，可以讓物件顯示成容器 (Container) 內部的內嵌物件。 一般會將這個值指定給複合文件物件。 可以針對螢幕或印表機提供這個表示。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary vsli:raw="A representation of an object on the screen as though it were printed to a printer using the Print command from the File menu. The described data may represent a sequence of pages.">物件的螢幕表示，就像使用 [檔案] 功能表中的 [列印] 命令將物件列印到印表機一樣。 描述的資料可能表示一系列的頁面。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary vsli:raw="An iconic representation of an object.">物件的圖示表示。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary vsli:raw="A thumbnail representation of an object that lets that object be displayed in a browsing tool. The thumbnail is approximately a 120 by 120 pixel, 16-color (recommended), device-independent bitmap potentially wrapped in a metafile.">物件的縮圖表示 (Thumbnail Representation)，可以讓物件顯示在瀏覽工具中。 縮圖為約 120 X 120 像素、16 色 (建議)、與裝置無關 (Device-independent) 的點陣圖，而且可能包裝在中繼檔 (Metafile) 中。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC">
      <summary vsli:raw="Contains the type description and process transfer information for a variable, function, or a function parameter.">包含類型描述，並處理變數、函式或函式參數的傳輸資訊。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.desc">
      <summary vsli:raw="Contains information about an element.">包含項目的相關資訊。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION">
      <summary vsli:raw="Contains information about an element.">包含項目的相關資訊。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.idldesc">
      <summary vsli:raw="Contains information for remoting the element.">包含遠端處理項目的資訊。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.paramdesc">
      <summary vsli:raw="Contains information about the parameter.">包含參數的資訊。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.tdesc">
      <summary vsli:raw="Identifies the type of the element.">辨識項目的型別。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO">
      <summary vsli:raw="Describes the exceptions that occur during &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">描述在 <see langword="IDispatch::Invoke" /> 期間發生的例外狀況。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrDescription">
      <summary vsli:raw="Describes the error intended for the customer.">描述預定給客戶的錯誤。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrHelpFile">
      <summary vsli:raw="Contains the fully-qualified drive, path, and file name of a Help file that contains more information about the error.">包含說明檔 (含有關於錯誤的詳細資訊) 的完整磁碟機、路徑和檔案名稱。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrSource">
      <summary vsli:raw="Indicates the name of the source of the exception. Typically, this is an application name.">指示例外狀況來源的名稱。 通常，這是應用程式名稱。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.dwHelpContext">
      <summary vsli:raw="Indicates the Help context ID of the topic within the Help file.">指示說明檔內的說明主題代碼。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pfnDeferredFillIn">
      <summary vsli:raw="Represents a pointer to a function that takes an &lt;see cref=&quot;T:System.Runtime.InteropServices.EXCEPINFO&quot; /&gt; structure as an argument and returns an HRESULT value. If deferred fill-in is not desired, this field is set to &lt;see langword=&quot;null&quot; /&gt;.">表示函式的指標，這函式接受 <see cref="T:System.Runtime.InteropServices.EXCEPINFO" /> 結構做為引數，並且傳回 HRESULT 值。 如果不希望將填入擱置，這個欄位要設定為 <see langword="null" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pvReserved">
      <summary vsli:raw="This field is reserved; it must be set to &lt;see langword=&quot;null&quot; /&gt;.">這個欄位已保留；必須設定為 <see langword="null" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.scode">
      <summary vsli:raw="A return value describing the error.">描述錯誤的傳回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wCode">
      <summary vsli:raw="Represents an error code identifying the error.">表示識別錯誤的錯誤碼。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wReserved">
      <summary vsli:raw="This field is reserved; it must be set to 0.">這個欄位已保留；必須設定為 0。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary vsli:raw="Represents the number of 100-nanosecond intervals since January 1, 1601. This structure is a 64-bit value.">表示自 1601 年 1 月 1 日以來 100 奈秒 (十億分之一秒) 間隔的數目。 這種結構是 64 位元的值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary vsli:raw="Specifies the high 32 bits of the &lt;see langword=&quot;FILETIME&quot; /&gt;.">指定 <see langword="FILETIME" /> 的高階 32 位元。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary vsli:raw="Specifies the low 32 bits of the &lt;see langword=&quot;FILETIME&quot; /&gt;.">指定 <see langword="FILETIME" /> 的低階 32 位元。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary vsli:raw="Represents a generalized Clipboard format.">表示通用的剪貼簿格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary vsli:raw="Specifies the particular clipboard format of interest.">指定相關的特定剪貼簿格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary vsli:raw="Specifies one of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DVASPECT&quot; /&gt; enumeration constants that indicates how much detail should be contained in the rendering.">指定其中一個 <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 列舉常數，指出呈現時應該包含多少細節。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary vsli:raw="Specifies part of the aspect when the data must be split across page boundaries.">指定必須跨頁面界限分割資料時的外觀部分。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary vsli:raw="Specifies a pointer to a &lt;see langword=&quot;DVTARGETDEVICE&quot; /&gt; structure containing information about the target device that the data is being composed for.">指定 <see langword="DVTARGETDEVICE" /> 結構的指標，結構中包含撰寫資料的目標裝置相關資訊。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary vsli:raw="Specifies one of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; enumeration constants, which indicates the type of storage medium used to transfer the object's data.">指定其中一個 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 列舉常數，表示用來傳輸物件資料的存放媒體類型。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCDESC">
      <summary vsli:raw="Defines a function description.">定義函式描述。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.callconv">
      <summary vsli:raw="Specifies the calling convention of a function.">指定函式的呼叫慣例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParams">
      <summary vsli:raw="Counts the total number of parameters.">計算參數的總數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParamsOpt">
      <summary vsli:raw="Counts the optional parameters.">計算選擇性參數的數目。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cScodes">
      <summary vsli:raw="Counts the permitted return values.">計算允許的傳回值數目。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.elemdescFunc">
      <summary vsli:raw="Contains the return type of the function.">包含函式的傳回型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.funckind">
      <summary vsli:raw="Specifies whether the function is virtual, static, or dispatch-only.">指定函式是虛擬的、靜態的還是僅供分派。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.invkind">
      <summary vsli:raw="Specifies the type of a property function.">指定屬性函式的型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgelemdescParam">
      <summary vsli:raw="Indicates the array of &lt;see cref=&quot;F:System.Runtime.InteropServices.ELEMDESC&quot; /&gt;.">指示 <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" /> 的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgscode">
      <summary vsli:raw="Stores the count of errors a function can return on a 16-bit system.">存放函式可在 16 位元系統傳回的錯誤計數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.memid">
      <summary vsli:raw="Identifies the function member ID.">辨識函式成員 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.oVft">
      <summary vsli:raw="Specifies the offset in the VTBL for &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL&quot; /&gt;.">指定 <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" /> 在 VTBL 中的位移。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.wFuncFlags">
      <summary vsli:raw="Indicates the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCFLAGS&quot; /&gt; of a function.">指示函式的 <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
      <summary vsli:raw="Identifies the constants that define the properties of a function.">識別定義函數屬性的常數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary vsli:raw="The function that supports data binding.">支援資料繫結的函式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary vsli:raw="The function that best represents the object. Only one function in a type can have this attribute.">最能表示物件的函式。 型別中只能有一個函式具有這個屬性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type of &quot;abc&quot;. If such a member is found, and is flagged as an accessor function for an element of the default collection, a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.">允許最佳化，其中編譯器會在「abc」型別上尋找名為「xyz」的成員。 如果找到這樣的成員，而且是標示為預設集合的項目的存取子 (Accessor) 函式，就會產生對該成員函式的呼叫。 在分配介面和介面中的成員受允許；模組上則不受允許。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary vsli:raw="The function that is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE&quot; /&gt; must also be set.">對使用者顯示為可繫結的函式。 <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" /> 也必須設定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary vsli:raw="The function should not be displayed to the user, although it exists and is bindable.">雖然函式存在而且可繫結，但是不應該向使用者顯示。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary vsli:raw="Mapped as individual bindable properties.">對應為可繫結的個別屬性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary vsli:raw="The property appears in an object browser, but not in a properties browser.">屬性出現在物件瀏覽器中，但不會在屬性瀏覽器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary vsli:raw="Tags the interface as having default behaviors.">將介面標記 (Tag) 為具有預設行為。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary vsli:raw="When set, any call to a method that sets the property results first in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;. The implementation of &lt;see langword=&quot;OnRequestEdit&quot; /&gt; determines if the call is allowed to set the property.">設定之後，任何對設定該屬性之方法的呼叫將會首先呼叫 <see langword="IPropertyNotifySink::OnRequestEdit" />。 <see langword="OnRequestEdit" /> 的實作 (Implementation) 會判斷是否允許呼叫設定屬性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary vsli:raw="The function should not be accessible from macro languages. This flag is intended for system-level functions or functions that type browsers should not display.">函式不應該可以自巨集語言存取。 旗標是供系統層級的函式或型別瀏覽器不應顯示的函式使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary vsli:raw="The function returns an object that is a source of events.">函式會傳回是事件來源的物件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary vsli:raw="The type information member is the default member for display in the user interface.">型別資訊成員是顯示在使用者介面中的預設成員。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary vsli:raw="The function supports &lt;see langword=&quot;GetLastError&quot; /&gt;. If an error occurs during the function, the caller can call &lt;see langword=&quot;GetLastError&quot; /&gt; to retrieve the error code.">函式支援 <see langword="GetLastError" />。 如果錯誤在函式執行期間發生，呼叫端可以呼叫 <see langword="GetLastError" /> 來擷取錯誤碼。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCKIND">
      <summary vsli:raw="Defines how to access a function.">定義如何存取函式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_DISPATCH">
      <summary vsli:raw="The function can be accessed only through &lt;see langword=&quot;IDispatch&quot; /&gt;.">函式只能透過 <see langword="IDispatch" /> 來存取。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_NONVIRTUAL">
      <summary vsli:raw="The function is accessed by &lt;see langword=&quot;static&quot; /&gt; address and takes an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">此函式是透過 <see langword="static" /> 位址來存取，並接受隱含的 <see langword="this" /> 指標。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary vsli:raw="The function is accessed through the virtual function table (VTBL), and takes an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">函式透過虛擬函式表 (Virtual Function Table，VTBL) 來存取，並接受隱含 <see langword="this" /> 指標。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_STATIC">
      <summary vsli:raw="The function is accessed by &lt;see langword=&quot;static&quot; /&gt; address and does not take an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">此函式是透過 <see langword="static" /> 位址來存取，且不接受隱含的 <see langword="this" /> 指標。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_VIRTUAL">
      <summary vsli:raw="The function is accessed in the same way as &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL&quot; /&gt;, except the function has an implementation.">函式以與 <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" /> 相同的方式存取，但如果此函式具有實作 (Implementation) 則除外。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary vsli:raw="Provides a managed definition of the &lt;see langword=&quot;IAdviseSink&quot; /&gt; interface.">提供 <see langword="IAdviseSink" /> 介面的 Managed 定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has changed from the running state to the loaded state.  This method is called by a server.">告知所有已登錄的諮詢接收，物件已經從執行狀態變成載入狀態 (Loaded State)。  這個方法是由伺服器呼叫。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Notifies all data objects currently registered advisory sinks that data in the object has changed.">告知所有資料物件目前已登錄的諮詢接收，物件中的資料已經變更。</summary>
      <param name="format" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt;, passed by reference, which describes the format, target device, rendering, and storage information of the calling data object.">以傳址 (By Reference) 方式傳遞的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />，其描述呼叫資料物件的格式、目標裝置、呈現和儲存區資訊。</param>
      <param name="stgmedium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;, passed by reference, which defines the storage medium (global memory, disk file, storage object, stream object, Graphics Device Interface (GDI) object, or undefined) and ownership of that medium for the calling data object.">以傳址方式傳遞的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />，其定義呼叫資料物件的存放媒體 (全域記憶體、磁碟檔、儲存物件、資料流物件 (Stream Object)、繪圖裝置介面 (Graphics Device Interface，GDI) 物件或未定義)，以及該媒體的擁有權。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has been renamed. This method is called by a server.">告知所有已登錄的諮詢接收，物件已經重新命名。 這個方法是由伺服器呼叫。</summary>
      <param name="moniker" vsli:raw="A pointer to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on the new full moniker of the object.">
        <see langword="IMoniker" /> 介面的指標，該介面位於物件的新完整 Moniker 上。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has been saved. This method is called by a server.">告知所有已登錄的諮詢接收，物件已經儲存。 這個方法是由伺服器呼叫。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary vsli:raw="Notifies an object's registered advisory sinks that its view has changed. This method is called by a server.">告知物件的已登錄諮詢接收，物件的檢視已經變更。 這個方法是由伺服器呼叫。</summary>
      <param name="aspect" vsli:raw="The aspect, or view, of the object. Contains a value taken from the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DVASPECT&quot; /&gt; enumeration.">物件的外觀或檢視。 包含取自 <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 列舉型別的值。</param>
      <param name="index" vsli:raw="The portion of the view that has changed. Currently, only -1 is valid.">已經變更的檢視部分。 目前只有 -1 有效。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IBindCtx">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface.">提供 <see langword="IBindCtx" /> 介面的 Managed 定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary vsli:raw="Enumerates the strings that are the keys of the internally maintained table of contextual object parameters.">列舉字串，其為內容物件參數的內部維護表格之機碼。</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the object parameter enumerator. This parameter is passed uninitialized.">這個方法傳回時，包含物件參數列舉值的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary vsli:raw="Returns the current binding options stored in the current bind context.">傳回儲存在目前繫結內容中的目前繫結選項。</summary>
      <param name="pbindopts" vsli:raw="A pointer to the structure to receive the binding options.">要接收繫結選項的結構指標。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary vsli:raw="Looks up the given key in the internally maintained table of contextual object parameters and returns the corresponding object, if one exists.">在內容物件參數的內部維護表格中查詢指定的機碼，並傳回對應的物件 (如果存在)。</summary>
      <param name="pszKey" vsli:raw="The name of the object to search for.">要搜尋的物件名稱。</param>
      <param name="ppunk" vsli:raw="When this method returns, contains the object interface pointer. This parameter is passed uninitialized.">這個方法傳回時，包含物件介面指標。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
      <summary vsli:raw="Returns access to the Running Object Table (ROT) relevant to this binding process.">傳回與這個繫結處理序關聯的執行物件表格 (ROT) 之存取權。</summary>
      <param name="pprot" vsli:raw="When this method returns, contains a reference to the Running Object Table (ROT). This parameter is passed uninitialized.">這個方法傳回時，包含執行物件表格 (ROT) 的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)">
      <summary vsli:raw="Registers the passed object as one of the objects that has been bound during a moniker operation and that should be released when the operation is complete.">將傳遞的物件登錄為已在 Moniker 作業中繫結，應該在作業完成時釋放的其中一個物件。</summary>
      <param name="punk" vsli:raw="The object to register for release.">要登錄供釋放的物件。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary vsli:raw="Registers the specified object pointer under the specified name in the internally maintained table of object pointers.">將指定的物件指標登錄在物件指標之內部維護表格中的指定名稱下。</summary>
      <param name="pszKey" vsli:raw="The name to register &lt;paramref name=&quot;punk&quot; /&gt; with.">要用來登錄 <paramref name="punk" /> 的名稱。</param>
      <param name="punk" vsli:raw="The object to register.">要註冊的物件。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects">
      <summary vsli:raw="Releases all the objects currently registered with the bind context by using the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)&quot; /&gt; method.">釋放所有目前使用 <see cref="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)" /> 方法以繫結內容登錄的物件。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)">
      <summary vsli:raw="Removes the object from the set of registered objects that need to be released.">從需要被釋放的已登錄物件組中移除物件。</summary>
      <param name="punk" vsli:raw="The object to unregister for release.">要取消登錄供釋放的物件。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)">
      <summary vsli:raw="Revokes the registration of the object currently found under the specified key in the internally maintained table of contextual object parameters, if that key is currently registered.">如果目前已登錄任何在內容物件參數之內部維護表格中的指定機碼，撤銷目前在該機碼下找到的物件登錄。</summary>
      <param name="pszKey" vsli:raw="The key to unregister.">要取消登錄的機碼。</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the specified key was successfully removed from the table; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">如果指定的機碼成功地從資料表移除，則為 <see langword="S_OK" /><see langword="HRESULT" /> 值；否則為 <see langword="S_FALSE" /><see langword="HRESULT" /> 值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary vsli:raw="Stores a block of parameters in the bind context. These parameters will apply to later &lt;see langword=&quot;UCOMIMoniker&quot; /&gt; operations that use this bind context.">儲存繫結內容中的參數區塊。 這些參數會套用至使用這個繫結內容的後續 <see langword="UCOMIMoniker" /> 作業。</summary>
      <param name="pbindopts" vsli:raw="The structure containing the binding options to set.">結構含有要設定的繫結選項。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPoint">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IConnectionPoint&quot; /&gt; interface.">提供 <see langword="IConnectionPoint" /> 介面的 Managed 定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary vsli:raw="Establishes an advisory connection between the connection point and the caller's sink object.">在連接點和呼叫端的接收物件之間建立諮詢連接 (Advisory Connection)。</summary>
      <param name="pUnkSink" vsli:raw="A reference to the sink to receive calls for the outgoing interface managed by this connection point.">接收的參考，讓這個由連接點管理的輸出介面接收呼叫。</param>
      <param name="pdwCookie" vsli:raw="When this method returns, contains the connection cookie. This parameter is passed uninitialized.">這個方法傳回時，包含連接 Cookie。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary vsli:raw="Creates an enumerator object for iteration through the connections that exist to this connection point.">建立列舉值物件，以逐一查看存在於這個連接點的連接。</summary>
      <param name="ppEnum" vsli:raw="When this method returns, contains the newly created enumerator. This parameter is passed uninitialized.">這個方法傳回時，包含新建立的列舉型別。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary vsli:raw="Returns the IID of the outgoing interface managed by this connection point.">傳回這個連接點所管理之輸出介面的 IID。</summary>
      <param name="pIID" vsli:raw="When this parameter returns, contains the IID of the outgoing interface managed by this connection point. This parameter is passed uninitialized.">這個參數傳回時，包含這個連接點所管理之輸出介面的 IID。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface pointer to the connectable object that conceptually owns this connection point.">擷取在概念上擁有這個連接點之可連接物件的 <see langword="IConnectionPointContainer" /> 介面指標。</summary>
      <param name="ppCPC" vsli:raw="When this parameter returns, contains the connectable object's &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface. This parameter is passed uninitialized.">這個參數傳回時，包含可連接物件的 <see langword="IConnectionPointContainer" /> 介面。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)">
      <summary vsli:raw="Terminates an advisory connection previously established through the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt; method.">結束先前透過 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 方法所建立的諮詢連接。</summary>
      <param name="dwCookie" vsli:raw="The connection cookie previously returned from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt; method.">先前從 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 方法傳回的連接 Cookie。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface.">提供 <see langword="IConnectionPointContainer" /> 介面的 Managed 定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary vsli:raw="Creates an enumerator of all the connection points supported in the connectable object, one connection point per IID.">建立可連接物件 (Connectable Object) 中支援的所有連接點的列舉值，每個 IID 一個連接點。</summary>
      <param name="ppEnum" vsli:raw="When this method returns, contains the interface pointer of the enumerator. This parameter is passed uninitialized.">這個方法傳回時，包含列舉值的介面指標。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)">
      <summary vsli:raw="Asks the connectable object if it has a connection point for a particular IID, and if so, returns the &lt;see langword=&quot;IConnectionPoint&quot; /&gt; interface pointer to that connection point.">詢問可連接物件其是否具有特定 IID 的連接點，如果有，傳回該連接點的 <see langword="IConnectionPoint" /> 介面指標。</summary>
      <param name="riid" vsli:raw="A reference to the outgoing interface IID whose connection point is being requested.">輸出介面 IID 的參考，要求其連接點。</param>
      <param name="ppCP" vsli:raw="When this method returns, contains the connection point that manages the outgoing interface &lt;paramref name=&quot;riid&quot; /&gt;. This parameter is passed uninitialized.">這個方法傳回時，包含管理輸出介面 <paramref name="riid" /> 的連接點。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IDataObject&quot; /&gt; interface.">提供 <see langword="IDataObject" /> 介面的 Managed 定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary vsli:raw="Creates a connection between a data object and an advisory sink. This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.">建立資料物件和通知接收之間的連接。 這個方法是由支援通知接收的物件所呼叫，且可以讓接收通知收到物件資料變更的通知。</summary>
      <param name="pFormatetc" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.">以傳址 (By Reference) 方式傳遞的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 結構，定義用於後續告知的格式、目標裝置、外觀和媒體。</param>
      <param name="advf" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ADVF&quot; /&gt; values that specifies a group of flags for controlling the advisory connection.">其中一個 <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 值，指定用於控制諮詢連接的一組旗標。</param>
      <param name="adviseSink" vsli:raw="A pointer to the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IAdviseSink&quot; /&gt; interface on the advisory sink that will receive the change notification.">
        <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> 介面的指標，該介面位於接收變更告知的通知接收上。</param>
      <param name="connection" vsli:raw="When this method returns, contains a pointer to a DWORD token that identifies this connection. You can use this token later to delete the advisory connection by passing it to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)&quot; /&gt;. If this value is zero, the connection was not established. This parameter is passed uninitialized.">當這個方法傳回時，會包含識別這個連接的 DWORD 語彙基元 (Token) 的指標。 您可以在稍後將這個語彙基元傳遞到 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" />，以便用它來刪除諮詢連接。 如果這個值是零，就不會建立連接。 這個參數會以未初始化的狀態傳遞。</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The advisory connection was created.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; E_NOTIMPL&lt;/term&gt;&lt;description&gt; This method is not implemented on the data object.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; There is an invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; There is an invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_ADVISENOTSUPPORTED&lt;/term&gt;&lt;description&gt; The data object does not support change notification.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">這個方法支援標準傳回值 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY，以及下列值：
  值 
  描述 
  S_OK 
  已建立諮詢連接。  
  
  E_NOTIMPL 
  沒有在資料物件上實作這個方法。  
  
  DV_E_LINDEX 
  <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> 有一個無效的值；目前只支援 -1。  
  
  DV_E_FORMATETC 
  <paramref name="pFormatetc" /> 參數有一個無效的值。  
  
  OLE_E_ADVISENOTSUPPORTED 
  資料物件不支援變更告知。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary vsli:raw="Destroys a notification connection that had been previously established.">終結先前已經建立的告知連接。</summary>
      <param name="connection" vsli:raw="A DWORD token that specifies the connection to remove. Use the value returned by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)&quot; /&gt; when the connection was originally established.">DWORD 語彙基元，指定要移除的連接。 使用原來建立連接時 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> 所傳回的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary vsli:raw="Creates an object that can be used to enumerate the current advisory connections.">建立可以用來列舉目前諮詢連接的物件。</summary>
      <param name="enumAdvise" vsli:raw="When this method returns, contains an &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA&quot; /&gt; that receives the interface pointer to the new enumerator object. If the implementation sets &lt;paramref name=&quot;enumAdvise&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;, there are no connections to advisory sinks at this time. This parameter is passed uninitialized.">當這個方法傳回時，會包含接收新列舉值物件介面指標的 <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" />。 如果實作時將 <paramref name="enumAdvise" /> 設定為 <see langword="null" />，這個時候就不會有諮詢接收的連接。 這個參數會以未初始化的狀態傳遞。</param>
      <returns vsli:raw="This method supports the standard return value E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The enumerator object is successfully instantiated or there are no connections.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_ADVISENOTSUPPORTED&lt;/term&gt;&lt;description&gt; This object does not support advisory notifications.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">這個方法支援標準傳回值 E_OUTOFMEMORY，以及下列值：
  值  
  
  描述  
  
  S_OK  
  
  已成功產生列舉值物件，或是沒有連接。  
  
  OLE_E_ADVISENOTSUPPORTED  
  
  這個物件不支援通知告知。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary vsli:raw="Creates an object for enumerating the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures for a data object. These structures are used in calls to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;.">建立物件，用於列舉資料物件的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 結構。 呼叫 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 或 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" /> 時會使用這些結構。</summary>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DATADIR&quot; /&gt; values that specifies the direction of the data.">其中一個 <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> 值，指定資料的方向。</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The enumerator object was successfully created.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; E_NOTIMPL&lt;/term&gt;&lt;description&gt; The direction specified by the &lt;paramref name=&quot;direction&quot; /&gt; parameter is not supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_S_USEREG&lt;/term&gt;&lt;description&gt; Requests that OLE enumerate the formats from the registry.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">這個方法支援標準傳回值 E_INVALIDARG 和 E_OUTOFMEMORY，以及下列值：
  值 
  描述 
  S_OK 
  已成功建立列舉值物件。  
  
  E_NOTIMPL 
  不支援 <paramref name="direction" /> 參數所指定的方向。  
  
  OLE_S_USEREG 
  要求 OLE 列舉登錄中的格式。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary vsli:raw="Provides a standard &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure that is logically equivalent to a more complex structure. Use this method to determine whether two different &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures would return the same data, removing the need for duplicate rendering.">提供標準的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 結構，這個結構在邏輯上相當於更複雜的結構。 使用這個方法判斷兩個不同的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 結果是否會傳回相同的資料，而不需要重複呈現。</summary>
      <param name="formatIn" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; member is not significant in this case and should be ignored.">以傳址方式傳遞的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 結構的指標，定義呼叫端在後續呼叫 (例如 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />) 中要用來擷取資料的格式、媒體和目標裝置。 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 成員在這種情況下並不重要，可以略過。</param>
      <param name="formatOut" vsli:raw="When this method returns, contains a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure that contains the most general information possible for a specific rendering, making it canonically equivalent to &lt;c&gt;formatetcIn&lt;/c&gt;. The caller must allocate this structure and the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)&quot; /&gt; method must fill in the data. To retrieve data in a subsequent call such as &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;, the caller uses the supplied value of &lt;paramref name=&quot;formatOut&quot; /&gt;, unless the value supplied is &lt;see langword=&quot;null&quot; /&gt;. This value is &lt;see langword=&quot;null&quot; /&gt; if the method returns &lt;see langword=&quot;DATA_S_SAMEFORMATETC&quot; /&gt;. The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; member is not significant in this case and should be ignored. This parameter is passed uninitialized.">當這個方法傳回時，會包含 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 結構的指標，結構中含有特定轉譯可能適用的最普遍資訊，使它在標準上相當於 <c>formatetcIn</c>。 呼叫端必須配置這個結構，而且 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" /> 方法必須填入資料。 為了在後續呼叫 (例如 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />) 中擷取資料，除非提供值為 <see langword="null" />，否則呼叫端會使用 <paramref name="formatOut" /> 的提供值。 如果方法傳回 <see langword="null" />，這個值便為 <see langword="DATA_S_SAMEFORMATETC" />。 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 成員在這種情況下並不重要，可以略過。 這個參數會以未初始化的狀態傳遞。</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The returned &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure is different from the one that was passed.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DATA_S_SAMEFORMATETC&lt;/term&gt;&lt;description&gt; The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures are the same and &lt;see langword=&quot;null&quot; /&gt; is returned in the &lt;paramref name=&quot;formatOut&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; There is an invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; There is an invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_NOTRUNNING&lt;/term&gt;&lt;description&gt; The application is not running.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">這個方法支援標準傳回值 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY，以及下列項目：
  值 
  描述 
  S_OK 
  傳回的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 結構與傳遞的結構不同。  
  
  DATA_S_SAMEFORMATETC 
  <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 結構相同，且 <paramref name="formatOut" /> 參數中傳回 <see langword="null" />。  
  
  DV_E_LINDEX 
  <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> 有一個無效的值；目前只支援 -1。  
  
  DV_E_FORMATETC 
  <paramref name="pFormatetc" /> 參數有一個無效的值。  
  
  OLE_E_NOTRUNNING 
  此應用程式未正在執行中。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Obtains data from a source data object. The &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; method, which is called by a data consumer, renders the data described in the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure and transfers it through the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure. The caller then assumes responsibility for releasing the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure.">從來源資料物件取得資料。 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 方法由資料消費者 (Data Consumer) 呼叫，以呈現指定的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 結構所描述的資料，並透過指定的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 結構傳輸這些資料。 接著再由呼叫端負責釋放 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 結構。</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use when passing the data. It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.">以傳址方式傳遞的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 結構的指標，定義傳遞資料時所要使用的格式、媒體和目標裝置。 您可以使用布林值 OR 運算子指定多個媒體，好讓方法可以在指定的媒體中選擇最適合的媒體。</param>
      <param name="medium" vsli:raw="When this method returns, contains a pointer to the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure that indicates the storage medium containing the returned data through its &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed&quot; /&gt; member, and the responsibility for releasing the medium through the value of its &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member. If &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the receiver of the medium is responsible for releasing it; otherwise, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; points to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface on the appropriate object so its &lt;see langword=&quot;Release&quot; /&gt; method can be called. The medium must be allocated and filled in by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. This parameter is passed uninitialized.">當這個方法傳回時，會包含 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 方法的指標，指出包含透過其 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" /> 成員傳回資料的存放媒體，以及透過其 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成員值釋放媒體的責任。 如果 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 為 <see langword="null" />，便由媒體的接收者負責釋放媒體；否則 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 會指向適當物件上的 <see langword="IUnknown" /> 介面，以便呼叫其 <see langword="Release" /> 方法。 媒體必須由 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 配置及填入。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Obtains data from a source data object. This method, which is called by a data consumer, differs from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; method in that the caller must allocate and free the specified storage medium.">從來源資料物件取得資料。 這個方法 (由資料消費者呼叫) 與 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 方法不同，呼叫端必須針對後者配置及釋放指定的存放媒體。</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt;, and only the following &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; values are valid: &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE&quot; /&gt;, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM&quot; /&gt;, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL&quot; /&gt;, or &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE&quot; /&gt;.">以傳址方式傳遞的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 結構的指標，定義傳遞資料時所要使用的格式、媒體和目標裝置。 只能在 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 指定一個媒體，且只有下列 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 值有效：<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />、<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />、<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" /> 或 <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" />。</param>
      <param name="medium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;, passed by reference, that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. The caller must also free the medium. The implementation of this method must always supply a value of &lt;see langword=&quot;null&quot; /&gt; for the &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure that this parameter points to.">以傳址方式傳遞的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />，定義包含要傳輸之資料的存放媒體。 媒體必須由 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 配置及填入。 呼叫端也必須釋放媒體。 這個方法的實作必須永遠提供 <see langword="null" /> 的值給這個參數所指向之 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 結構的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 成員。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary vsli:raw="Determines whether the data object is capable of rendering the data described in the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure. Objects attempting a paste or drop operation can call this method before calling &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; to get an indication of whether the operation may be successful.">判斷資料物件是否能夠呈現 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 結構中所描述的資料。 嘗試執行貼上或置放作業的物件可以在呼叫 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 之前呼叫這個方法，以指出作業是否成功。</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use for the query.">以傳址方式傳遞的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 結構的指標，定義用於查詢的格式、媒體和目標裝置。</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; A subsequent call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; would probably be successful.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; An invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; An invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_TYMED&lt;/term&gt;&lt;description&gt; An invalid &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed&quot; /&gt; value.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_DVASPECT&lt;/term&gt;&lt;description&gt; An invalid &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect&quot; /&gt; value.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_NOTRUNNING&lt;/term&gt;&lt;description&gt; The application is not running.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">這個方法支援標準傳回值 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY，以及下列項目：
  值 
  描述 
  S_OK 
  對 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 的後續呼叫可能已經成功。  
  
  DV_E_LINDEX 
  <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> 的值無效；目前只支援 -1。  
  
  DV_E_FORMATETC 
  <paramref name="pFormatetc" /> 參數的值無效。  
  
  DV_E_TYMED 
  無效的 <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> 值。  
  
  DV_E_DVASPECT 
  無效的 <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> 值。  
  
  OLE_E_NOTRUNNING 
  此應用程式未正在執行中。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary vsli:raw="Transfers data to the object that implements this method. This method is called by an object that contains a data source.">將資料傳輸給實作這個方法的物件。 這個方法是由包含資料來源的物件所呼叫。</summary>
      <param name="formatIn" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.">以傳址方式傳遞的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 結構，定義資料物件在解譯存放媒體內含資料時所使用的格式。</param>
      <param name="medium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure, passed by reference, that defines the storage medium in which the data is being passed.">以傳址方傳遞的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 結構，定義用來傳遞資料的存放媒體。</param>
      <param name="release" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that the data object called, which implements &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; function. &lt;see langword=&quot;false&quot; /&gt; to specify that the caller retains ownership of the storage medium, and the data object called uses the storage medium for the duration of the call only.">
        <see langword="true" /> 指定在呼叫傳回之後，呼叫的資料物件 (實作 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />) 便會擁有存放媒體。 這表示資料物件必須在使用媒體之後，呼叫 <see langword="ReleaseStgMedium" /> 函式來釋放媒體。 <see langword="false" /> 則指定呼叫端仍保留存放媒體的擁有權，而呼叫的物件資料只在呼叫期間使用存放媒體。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLDESC">
      <summary vsli:raw="Contains information needed for transferring a structure element, parameter, or function return value between processes.">包含在處理序之間傳輸結構項目、參數或函式傳回值所需的資訊。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.dwReserved">
      <summary vsli:raw="Reserved; set to &lt;see langword=&quot;null&quot; /&gt;.">保留；設定為 <see langword="null" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.wIDLFlags">
      <summary vsli:raw="Indicates an &lt;see cref=&quot;T:System.Runtime.InteropServices.IDLFLAG&quot; /&gt; value describing the type.">指示描述型別的 <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> 值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLFLAG">
      <summary vsli:raw="Describes how to transfer a structure element, parameter, or function return value between processes.">描述如何在處理序之間傳輸結構項目、參數或函式傳回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FIN">
      <summary vsli:raw="The parameter passes information from the caller to the callee.">參數從呼叫端傳遞資訊到被呼叫端。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FLCID">
      <summary vsli:raw="The parameter is the local identifier of a client application.">參數為用戶端應用程式的區域識別項。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FOUT">
      <summary vsli:raw="The parameter returns information from the callee to the caller.">參數從被呼叫端傳回資訊到呼叫端。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FRETVAL">
      <summary vsli:raw="The parameter is the return value of the member.">參數為成員的傳回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_NONE">
      <summary vsli:raw="Does not specify whether the parameter passes or receives information.">沒有指定參數是傳送或接收資訊。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumConnectionPoints&quot; /&gt; interface.">管理 <see langword="IEnumConnectionPoints" /> 介面的定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">建立新的列舉值，其包含與目前列舉值相同的列舉型別狀態。</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">這個方法傳回時，包含新建列舉值的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">擷取列舉型別序列中指定的項目數目。</summary>
      <param name="celt" vsli:raw="The number of &lt;see langword=&quot;IConnectionPoint&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">要在 <paramref name="rgelt" /> 中傳回的 <see langword="IConnectionPoint" /> 參考的數目。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.">這個方法傳回時，包含列舉連接的參考。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of connections enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">這個方法傳回時，包含 <paramref name="rgelt" /> 中實際列舉連接數目的參考。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果 <paramref name="pceltFetched" /> 參數等於 <paramref name="celt" /> 參數，則為 <see langword="S_OK" />，否則為 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">將列舉序列重設為開頭。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">略過列舉序列中指定的項目數目。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">列舉型別中要略過的項目數。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果略過的元素數目等於 <paramref name="celt" /> 參數，則為 <see langword="S_OK" />，否則為 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnections">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumConnections&quot; /&gt; interface.">管理 <see langword="IEnumConnections" /> 介面的定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">建立新的列舉值，其包含與目前列舉值相同的列舉型別狀態。</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">這個方法傳回時，包含新建列舉值的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">擷取列舉型別序列中指定的項目數目。</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.CONNECTDATA&quot; /&gt; structures to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">要在 <paramref name="rgelt" /> 中傳回的 <see cref="T:System.Runtime.InteropServices.CONNECTDATA" /> 結構數目。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.">這個方法傳回時，包含列舉連接的參考。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of connections enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">這個方法傳回時，包含 <paramref name="rgelt" /> 中實際列舉連接數目的參考。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果 <paramref name="pceltFetched" /> 參數等於 <paramref name="celt" /> 參數，則為 <see langword="S_OK" />，否則為 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">將列舉序列重設為開頭。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">略過列舉序列中指定的項目數目。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">列舉型別中要略過的項目數。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果略過的元素數目等於 <paramref name="celt" /> 參數，則為 <see langword="S_OK" />，否則為 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IEnumFORMATETC&quot; /&gt; interface.">提供 <see langword="IEnumFORMATETC" /> 介面的 Managed 定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current enumerator.">建立新的列舉值，其包含與目前列舉值相同的列舉型別 (Enumeration) 狀態。</summary>
      <param name="newEnum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">這個方法傳回時，包含新建列舉值的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">擷取列舉型別序列中指定的項目數目。</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">要在 <paramref name="rgelt" /> 中傳回的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 參考的數目。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; references. This parameter is passed uninitialized.">當這個方法傳回時，會包含列舉之 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 參考的參考。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of references enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;. This parameter is passed uninitialized.">當這個方法傳回時，會包含 <paramref name="rgelt" /> 所列舉之參考實際數目的參考。 這個參數會以未初始化的狀態傳遞。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果 <paramref name="pceltFetched" /> 參數等於 <paramref name="celt" /> 參數，則為 <see langword="S_OK" />，否則為 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">將列舉序列重設為開頭。</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">HRESULT，擁有值 <see langword="S_OK" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">略過列舉序列中指定的項目數目。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">列舉型別中要略過的項目數。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果略過的元素數目等於 <paramref name="celt" /> 參數，則為 <see langword="S_OK" />，否則為 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumMoniker">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumMoniker&quot; /&gt; interface.">管理 <see langword="IEnumMoniker" /> 介面的定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">建立新的列舉值，其包含與目前列舉值相同的列舉型別狀態。</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">這個方法傳回時，包含新建列舉值的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">擷取列舉型別序列中指定的項目數目。</summary>
      <param name="celt" vsli:raw="The number of monikers to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">要在 <paramref name="rgelt" /> 中傳回的 Moniker 數目。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated monikers. This parameter is passed uninitialized.">這個方法傳回時，包含列舉 Moniker 的參考。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of monikers enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">這個方法傳回時，包含 <paramref name="rgelt" /> 中實際列舉 Moniker 數目的參考。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果 <paramref name="pceltFetched" /> 參數等於 <paramref name="celt" /> 參數，則為 <see langword="S_OK" />，否則為 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">將列舉序列重設為開頭。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">略過列舉序列中指定的項目數目。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">列舉型別中要略過的項目數。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果略過的元素數目等於 <paramref name="celt" /> 參數，則為 <see langword="S_OK" />，否則為 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IEnumSTATDATA&quot; /&gt; interface.">提供 <see langword="IEnumSTATDATA" /> 介面的 Managed 定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current enumerator.">建立新的列舉值，其包含與目前列舉值相同的列舉型別 (Enumeration) 狀態。</summary>
      <param name="newEnum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">這個方法傳回時，包含新建列舉值的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">擷取列舉型別序列中指定的項目數目。</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STATDATA&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">要在 <paramref name="rgelt" /> 中傳回的 <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 參考的數目。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STATDATA&quot; /&gt; references. This parameter is passed uninitialized.">當這個方法傳回時，會包含列舉之 <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 參考的參考。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="pceltFetched" vsli:raw="When this parameter returns, contains a reference to the actual number of references enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;. This parameter is passed uninitialized.">當這個參數傳回時，會包含 <paramref name="rgelt" /> 所列舉之參考實際數目的參考。 這個參數會以未初始化的狀態傳遞。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果 <paramref name="pceltFetched" /> 參數等於 <paramref name="celt" /> 參數，則為 <see langword="S_OK" />，否則為 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">將列舉序列重設為開頭。</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">HRESULT，擁有值 <see langword="S_OK" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">略過列舉序列中指定的項目數目。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">列舉型別中要略過的項目數。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果略過的元素數目等於 <paramref name="celt" /> 參數，則為 <see langword="S_OK" />，否則為 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumString">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumString&quot; /&gt; interface.">管理 <see langword="IEnumString" /> 介面的定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">建立新的列舉值，其包含與目前列舉值相同的列舉型別狀態。</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">這個方法傳回時，包含新建列舉值的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">擷取列舉型別序列中指定的項目數目。</summary>
      <param name="celt" vsli:raw="The number of strings to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">要在 <paramref name="rgelt" /> 中傳回的字串數目。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated strings. This parameter is passed uninitialized.">這個方法傳回時，包含列舉字串的參考。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of strings enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">這個方法傳回時，包含 <paramref name="rgelt" /> 列舉字串實際數目的參考。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果 <paramref name="pceltFetched" /> 參數等於 <paramref name="celt" /> 參數，則為 <see langword="S_OK" />，否則為 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">將列舉序列重設為開頭。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">略過列舉序列中指定的項目數目。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">列舉型別中要略過的項目數。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果略過的元素數目等於 <paramref name="celt" /> 參數，則為 <see langword="S_OK" />，否則為 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumVARIANT&quot; /&gt; interface.">管理 <see langword="IEnumVARIANT" /> 介面的定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">建立新的列舉值，其包含與目前列舉值相同的列舉型別狀態。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT&quot; /&gt; reference to the newly created enumerator.">新建立列舉值的 <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" /> 參考。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">擷取列舉型別序列中指定的項目數目。</summary>
      <param name="celt" vsli:raw="The number of elements to return in &lt;c&gt;rgelt&lt;/c&gt;.">要在 <c>rgelt</c> 中傳回的項目數。</param>
      <param name="rgVar" vsli:raw="When this method returns, contains a reference to the enumerated elements. This parameter is passed uninitialized.">這個方法傳回時，包含列舉項目的參考。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of elements enumerated in &lt;c&gt;rgelt&lt;/c&gt;.">當這個方法傳回時，會包含 <c>rgelt</c> 所列舉之項目實際數目的參考。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果 <paramref name="pceltFetched" /> 參數等於 <paramref name="celt" /> 參數，則為 <see langword="S_OK" />，否則為 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">將列舉序列重設為開頭。</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">HRESULT，擁有值 <see langword="S_OK" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">略過列舉序列中指定的項目數目。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">列舉型別中要略過的項目數。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果略過的項目數目等於 <paramref name="celt" /> 參數，則為 <see langword="S_OK" />，否則為 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMoniker">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IMoniker&quot; /&gt; interface, with COM functionality from &lt;see langword=&quot;IPersist&quot; /&gt; and &lt;see langword=&quot;IPersistStream&quot; /&gt;.">提供 <see langword="IMoniker" /> 介面的 Managed 定義，具有 <see langword="IPersist" /> 和 <see langword="IPersistStream" /> 的 COM 功能。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary vsli:raw="Uses the moniker to bind to the object that it identifies.">使用 Moniker 繫結至其所識別的物件。</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context object used in this binding operation.">這個繫結作業中所使用繫結內容 (Bind Context) 物件上的 <see langword="IBindCtx" /> 介面參考。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">如果 Moniker 是複合型 Moniker 的一部分，則為目前 Moniker 左邊的 Moniker 參考。</param>
      <param name="riidResult" vsli:raw="The interface identifier (IID) of the interface that the client intends to use to communicate with the object that the moniker identifies.">用戶端使用於與 Moniker 所識別物件通訊的介面之介面識別項 (IID)。</param>
      <param name="ppvResult" vsli:raw="When this method returns, contains a reference to the interface requested by &lt;paramref name=&quot;riidResult&quot; /&gt;. This parameter is passed uninitialized.">這個方法傳回時，包含 <paramref name="riidResult" /> 要求的介面參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary vsli:raw="Retrieves an interface pointer to the storage that contains the object identified by the moniker.">擷取含有 Moniker 所辨識物件的儲存體的介面指標。</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context object used during this binding operation.">這個繫結作業期間所使用繫結內容物件上的 <see langword="IBindCtx" /> 介面參考。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">如果 Moniker 是複合型 Moniker 的一部分，則為目前 Moniker 左邊的 Moniker 參考。</param>
      <param name="riid" vsli:raw="The interface identifier (IID) of the storage interface requested.">要求的儲存體介面的介面識別項 (IID)。</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the interface requested by &lt;paramref name=&quot;riid&quot; /&gt;. This parameter is passed uninitialized.">這個方法傳回時，包含 <paramref name="riid" /> 要求的介面參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Creates a new moniker based on the common prefix that this moniker shares with another moniker.">根據這個 Moniker 與另一個 Moniker 共用的共同首碼建立新 Moniker。</summary>
      <param name="pmkOther" vsli:raw="A reference to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on another moniker to compare with the current moniker for a common prefix.">另一個 Moniker 上的 <see langword="IMoniker" /> 介面參考，用於比較一般前置字元的目前 Moniker。</param>
      <param name="ppmkPrefix" vsli:raw="When this method returns, contains the moniker that is the common prefix of the current moniker and &lt;paramref name=&quot;pmkOther&quot; /&gt;. This parameter is passed uninitialized.">這個方法傳回時，包含為目前 Moniker 和 <paramref name="pmkOther" /> 的共同首碼的 Moniker。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Combines the current moniker with another moniker, creating a new composite moniker.">將目前 Moniker 與另一個 Moniker 組合，以建立新的複合型 Moniker。</summary>
      <param name="pmkRight" vsli:raw="A reference to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on a moniker to append to the end of the current moniker.">要附加到目前 Moniker 結尾的 Moniker 上的 <see langword="IMoniker" /> 介面參考。</param>
      <param name="fOnlyIfNotGeneric" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the caller requires a nongeneric composition. The operation proceeds only if &lt;paramref name=&quot;pmkRight&quot; /&gt; is a moniker class that the current moniker can combine with in some way other than forming a generic composite. &lt;see langword=&quot;false&quot; /&gt; to indicate that the method can create a generic composite if necessary.">
        <see langword="true" /> 表示呼叫端要求非一般性複合。 如果 <paramref name="pmkRight" /> 為目前 Moniker 可以使用某些產生一般複合以外方式組合的 Moniker 類別，作業會繼續進行。 <see langword="false" /> 表示這個方法可以建立一般複合 (如果需要)。</param>
      <param name="ppmkComposite" vsli:raw="When this method returns, contains a reference to the resulting composite moniker. This parameter is passed uninitialized.">這個方法傳回時，包含所產生複合型 Moniker 的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Supplies a pointer to an enumerator that can enumerate the components of a composite moniker.">提供列舉值 (可列舉複合型 Moniker 的元件) 的指標。</summary>
      <param name="fForward" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enumerate the monikers from left to right. &lt;see langword=&quot;false&quot; /&gt; to enumerate from right to left.">如果為 <see langword="true" />，從左至右列舉 Moniker。 如果為 <see langword="false" />，則從右至左列舉。</param>
      <param name="ppenumMoniker" vsli:raw="When this method returns, contains a reference to the enumerator object for the moniker. This parameter is passed uninitialized.">這個方法傳回時，包含 Moniker 的列舉值物件的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)">
      <summary vsli:raw="Retrieves the class identifier (CLSID) of an object.">擷取物件的類別識別項 (Class Identifier，CLSID)。</summary>
      <param name="pClassID" vsli:raw="When this method returns, contains the CLSID. This parameter is passed uninitialized.">這個方法傳回時，包含 CLSID。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
      <summary vsli:raw="Gets the display name, which is a user-readable representation of the current moniker.">取得顯示名稱，其為目前 Moniker 的使用者可讀取的表示。</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this operation.">要在這個作業中使用的繫結內容的參考。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">如果 Moniker 是複合型 Moniker 的一部分，則為目前 Moniker 左邊的 Moniker 參考。</param>
      <param name="ppszDisplayName" vsli:raw="When this method returns, contains the display name string. This parameter is passed uninitialized.">這個方法傳回時，包含顯示名稱字串。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)">
      <summary vsli:raw="Returns the size, in bytes, of the stream needed to save the object.">傳回儲存物件所需的資料流大小 (以位元組為單位)。</summary>
      <param name="pcbSize" vsli:raw="When this method returns, contains a &lt;see langword=&quot;long&quot; /&gt; value indicating the size, in bytes, of the stream needed to save this object. This parameter is passed uninitialized.">這個方法傳回時，包含 <see langword="long" /> 值，指出儲存這個物件所需的資料流大小 (以位元組為單位)。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Provides a number representing the time that the object identified by the current moniker was last changed.">提供數字，表示這個 Moniker 所識別的物件上次變更的時間。</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">要在這個繫結作業中使用的繫結內容的參考。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">如果 Moniker 是複合型 Moniker 的一部分，則為目前 Moniker 左邊的 Moniker 參考。</param>
      <param name="pFileTime" vsli:raw="When this method returns, contains the time of the last change. This parameter is passed uninitialized.">這個方法傳回時，包含上次變更的時間。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)">
      <summary vsli:raw="Calculates a 32-bit integer using the internal state of the moniker.">使用 Moniker 的內部狀態來計算 32 位元整數。</summary>
      <param name="pdwHash" vsli:raw="When this method returns, contains the hash value for this moniker. This parameter is passed uninitialized.">這個方法傳回時，包含這個 Moniker 的雜湊值。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Provides a moniker that, when composed to the right of the current moniker or one of similar structure, composes to nothing.">在目前 Moniker 右邊或其中一個相似結構組成時，提供未組成的 Moniker。</summary>
      <param name="ppmk" vsli:raw="When this method returns, contains a moniker that is the inverse of the current moniker. This parameter is passed uninitialized.">這個方法傳回時，包含與目前 Moniker 相反的 Moniker。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty">
      <summary vsli:raw="Checks the object for changes since it was last saved.">檢查物件自從上次儲存以來是否變更。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the object has changed; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">如果物件已變更，則為 <see langword="S_OK" /><see langword="HRESULT" /> 值；否則為 <see langword="S_FALSE" /><see langword="HRESULT" /> 值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Compares the current moniker with a specified moniker and indicates whether they are identical.">比較目前的 Moniker 與指定的 Moniker，指出它們是否相同。</summary>
      <param name="pmkOtherMoniker" vsli:raw="A reference to the moniker to use for comparison.">用來比較的 Moniker 的參考。</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the monikers are identical; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">如果 Moniker 相同則為 <see langword="S_OK" /><see langword="HRESULT" /> 值，否則為 <see langword="S_FALSE" /><see langword="HRESULT" /> 值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Determines whether the object that is identified by the current moniker is currently loaded and running.">決定目前 Moniker 所識別的物件，目前是否已載入並在執行中。</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">要在這個繫結作業中使用的繫結內容的參考。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker if the current moniker is part of a composite.">如果目前的 Moniker 是複合的一部分，則為目前 Moniker 左邊的 Moniker 參考。</param>
      <param name="pmkNewlyRunning" vsli:raw="A reference to the moniker most recently added to the Running Object Table (ROT).">最近加入至執行物件表格 (ROT) 的 Moniker 的參考。</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is running; an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is not running; or an &lt;see langword=&quot;E_UNEXPECTED&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">如果 Moniker 正在執行則為 <see langword="S_OK" /><see langword="HRESULT" /> 值，如果 Moniker 未在執行則為 <see langword="S_FALSE" /><see langword="HRESULT" /> 值；否則為 <see langword="E_UNEXPECTED" /><see langword="HRESULT" /> 值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)">
      <summary vsli:raw="Indicates whether this moniker is of one of the system-supplied moniker classes.">指示這個 Moniker 是否為系統提供的 Moniker 類別的其中之一。</summary>
      <param name="pdwMksys" vsli:raw="When this method returns, contains a pointer to an integer that is one of the values from the &lt;see langword=&quot;MKSYS&quot; /&gt; enumeration, and refers to one of the COM moniker classes. This parameter is passed uninitialized.">這個方法傳回時，包含 <see langword="MKSYS" /> 列舉型別其中一個整數值的指標，並參考到其中一個 COM Moniker 類別。 這個參數會以未初始化的狀態傳遞。</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is a system moniker; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">如果 Moniker 是系統 Moniker 則為 <see langword="S_OK" /><see langword="HRESULT" /> 值，否則為 <see langword="S_FALSE" /><see langword="HRESULT" /> 值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary vsli:raw="Initializes an object from the stream where it was previously saved.">從先前儲存物件的資料流來初始化它。</summary>
      <param name="pStm" vsli:raw="The stream that the object is loaded from.">從中載入物件的資料流。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Reads as many characters of the specified display name as the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)&quot; /&gt; understands and builds a moniker corresponding to the portion read.">以 <see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)" /> 所能瞭解的數量來讀取指定顯示名稱的字元，並建置對應於讀取部分的 Moniker。</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">要在這個繫結作業中使用的繫結內容的參考。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker that has been built from the display name up to this point.">到目前為止已經從顯示名稱中建置的 Moniker 的參考。</param>
      <param name="pszDisplayName" vsli:raw="A reference to the string containing the remaining display name to parse.">含有要剖析的剩餘顯示名稱的字串的參考。</param>
      <param name="pchEaten" vsli:raw="When this method returns, contains the number of characters that were consumed in parsing &lt;paramref name=&quot;pszDisplayName&quot; /&gt;. This parameter is passed uninitialized.">這個方法傳回時，包含剖析 <paramref name="pszDisplayName" /> 所使用的字元數目。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="ppmkOut" vsli:raw="When this method returns, contains a reference to the moniker that was built from &lt;paramref name=&quot;pszDisplayName&quot; /&gt;. This parameter is passed uninitialized.">這個方法傳回時，會包含從 <paramref name="pszDisplayName" /> 所建置的 Moniker 之參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Returns a reduced moniker, which is another moniker that refers to the same object as the current moniker but can be bound with equal or greater efficiency.">傳回縮減的 Moniker，其為與目前 Moniker 參考相同物件的另一個 Moniker，但可以用相同或較高的效率來繫結。</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context to use in this binding operation.">要在這個繫結作業中使用的繫結內容上的 <see langword="IBindCtx" /> 介面參考。</param>
      <param name="dwReduceHowFar" vsli:raw="A value that specifies how far the current moniker should be reduced.">指定目前 Moniker 應縮減的值。</param>
      <param name="ppmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker.">目前 Moniker 左邊的 Moniker 之參考。</param>
      <param name="ppmkReduced" vsli:raw="When this method returns, contains a reference to the reduced form of the current moniker, which can be &lt;see langword=&quot;null&quot; /&gt; if an error occurs or if the current moniker is reduced to nothing. This parameter is passed uninitialized.">這個方法傳回時，包含目前 Moniker 縮減形式的參考，如果發生錯誤，或如果這個 Moniker 縮減到無的話，則可以為 <see langword="null" />。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Supplies a moniker that, when appended to the current moniker (or one with a similar structure), yields the specified moniker.">附加到目前 Moniker (或類似結構) 時，提供可產生指定 Moniker 的 Moniker。</summary>
      <param name="pmkOther" vsli:raw="A reference to the moniker to which a relative path should be taken.">應該採用相對路徑的 Moniker 的參考。</param>
      <param name="ppmkRelPath" vsli:raw="When this method returns, contains a reference to the relative moniker. This parameter is passed uninitialized.">這個方法傳回時，包含相關 Moniker 的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary vsli:raw="Saves an object to the specified stream.">儲存物件到指定資料流。</summary>
      <param name="pStm" vsli:raw="The stream to which the object is saved.">儲存物件的資料流。</param>
      <param name="fClearDirty" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to clear the modified flag after the save is complete; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示完成儲存後清除修改的旗標，否則為 <see langword="false" /></param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
      <summary vsli:raw="Defines the attributes of an implemented or inherited interface of a type.">定義所實作或繼承之類型介面的屬性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary vsli:raw="The interface or dispinterface represents the default for the source or sink.">介面或分派介面表示來源或接收的預設值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary vsli:raw="Sinks receive events through the virtual function table (VTBL).">接收會透過虛擬函式表 (Virtual Function Table，VTBL) 接受事件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary vsli:raw="The member should not be displayed or programmable by users.">成員應該不可由使用者來顯示或撰寫程式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary vsli:raw="This member of a coclass is called rather than implemented.">Coclass 的這個成員是被呼叫的，而不是被實作的。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND">
      <summary vsli:raw="Specifies how to invoke a function by &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">指定如何以 <see langword="IDispatch::Invoke" /> 叫用 (Invoke) 函式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_FUNC">
      <summary vsli:raw="The member is called using a normal function invocation syntax.">成員使用一般函式引動過程語法來呼叫。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary vsli:raw="The function is invoked using a normal property access syntax.">函式使用一般屬性存取語法來叫用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary vsli:raw="The function is invoked using a property value assignment syntax.">函式使用屬性值指派語法來叫用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary vsli:raw="The function is invoked using a property reference assignment syntax.">函式使用屬性參考指派語法來叫用。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IPersistFile">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IPersistFile&quot; /&gt; interface, with functionality from &lt;see langword=&quot;IPersist&quot; /&gt;.">提供 <see langword="IPersistFile" /> 介面的 Managed 定義，具有 <see langword="IPersist" /> 的功能。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)">
      <summary vsli:raw="Retrieves the class identifier (CLSID) of an object.">擷取物件的類別識別項 (Class Identifier，CLSID)。</summary>
      <param name="pClassID" vsli:raw="When this method returns, contains a reference to the CLSID. This parameter is passed uninitialized.">這個方法傳回時，包含 CLSID 的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)">
      <summary vsli:raw="Retrieves either the absolute path to the current working file of the object or, if there is no current working file, the default file name prompt of the object.">擷取物件目前工作檔的絕對路徑，如果沒有目前工作檔，則擷取物件的預設檔案名稱提示。</summary>
      <param name="ppszFileName" vsli:raw="When this method returns, contains the address of a pointer to a zero-terminated string containing the path for the current file, or the default file name prompt (such as *.txt). This parameter is passed uninitialized.">這個方法回傳時，包含以零結尾字串的指標位址，這字串含有目前檔案的路徑，或預設檔案名稱提示 (例如 *.txt)。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty">
      <summary vsli:raw="Checks an object for changes since it was last saved to its current file.">檢查物件自從儲存到它目前檔案以來的變更。</summary>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the file has changed since it was last saved; &lt;see langword=&quot;S_FALSE&quot; /&gt; if the file has not changed since it was last saved.">如果檔案自從上次儲存以來已經變更，則為 <see langword="S_OK" />；如果檔案自從上次儲存以來尚未變更，則為 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)">
      <summary vsli:raw="Opens the specified file and initializes an object from the file contents.">開啟指定的檔案，並從檔案連接初始化物件。</summary>
      <param name="pszFileName" vsli:raw="A zero-terminated string containing the absolute path of the file to open.">以零為結尾的字串，含有要開啟的檔案的絕對路徑。</param>
      <param name="dwMode" vsli:raw="A combination of values from the &lt;see langword=&quot;STGM&quot; /&gt; enumeration to indicate the access mode in which to open &lt;paramref name=&quot;pszFileName&quot; /&gt;.">
        <see langword="STGM" /> 列舉型別中值的組合，表示開啟 <paramref name="pszFileName" /> 所用的存取模式。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)">
      <summary vsli:raw="Saves a copy of the object into the specified file.">儲存物件的複本到指定檔案中。</summary>
      <param name="pszFileName" vsli:raw="A zero-terminated string containing the absolute path of the file to which the object is saved.">以零為結尾的字串，含有要儲存物件所至檔案的絕對路徑。</param>
      <param name="fRemember" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to used the &lt;paramref name=&quot;pszFileName&quot; /&gt; parameter as the current working file; otherwise &lt;see langword=&quot;false&quot; /&gt;.">使用 <paramref name="pszFileName" /> 參數做為目前的工作檔，為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)">
      <summary vsli:raw="Notifies the object that it can write to its file.">告知物件，它可以寫入其檔案。</summary>
      <param name="pszFileName" vsli:raw="The absolute path of the file where the object was previously saved.">先前儲存物件所在檔案的絕對路徑。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IRunningObjectTable&quot; /&gt; interface.">提供 <see langword="IRunningObjectTable" /> 介面的 Managed 定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Enumerates the objects currently registered as running.">列舉目前登錄為執行中的物件。</summary>
      <param name="ppenumMoniker" vsli:raw="When this method returns, contains the new enumerator for the Running Object Table (ROT). This parameter is passed uninitialized.">這個方法傳回時，包含執行物件表格 (ROT) 的新列舉值。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)">
      <summary vsli:raw="Returns the registered object if the supplied object name is registered as running.">如果提供的物件名稱已登錄為執行中，傳回這個已登錄物件。</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">要在執行物件表格 (ROT) 中搜尋之 Moniker 的參考。</param>
      <param name="ppunkObject" vsli:raw="When this method returns, contains the requested running object. This parameter is passed uninitialized.">這個方法傳回時，包含要求的執行物件。 這個參數會以未初始化的狀態傳遞。</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">
        <see langword="HRESULT" /> 值，指出作業成功或失敗。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Searches for this moniker in the Running Object Table (ROT) and reports the recorded time of change, if present.">在執行物件表格 (ROT) 中搜尋這個 Moniker，並報告變更的記錄時間 (如果有的話)。</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">要在執行物件表格 (ROT) 中搜尋之 Moniker 的參考。</param>
      <param name="pfiletime" vsli:raw="When this object returns, contains the objects last change time. This parameter is passed uninitialized.">這個物件傳回時，包含物件上次變更的時間。 這個參數會以未初始化的狀態傳遞。</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">
        <see langword="HRESULT" /> 值，指出作業成功或失敗。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Determines whether the specified moniker is currently registered in the Running Object Table (ROT).">決定指定的 Moniker 目前是否已在執行物件表格 (ROT) 中登錄。</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">要在執行物件表格 (ROT) 中搜尋之 Moniker 的參考。</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">
        <see langword="HRESULT" /> 值，指出作業成功或失敗。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Notes the time that a particular object changed so &lt;see langword=&quot;IMoniker::GetTimeOfLastChange&quot; /&gt; can report an appropriate change time.">注意特定物件變更的時間，讓 <see langword="IMoniker::GetTimeOfLastChange" /> 可以報告正確的變更時間。</summary>
      <param name="dwRegister" vsli:raw="The Running Object Table (ROT) entry of the changed object.">已變更物件的執行物件表格 (ROT) 項目。</param>
      <param name="pfiletime" vsli:raw="A reference to the object's last change time.">物件的上次變更時間的參考。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Registers that the supplied object has entered the running state.">登錄所提供物件已進入執行狀態。</summary>
      <param name="grfFlags" vsli:raw="Specifies whether the Running Object Table's (ROT) reference to &lt;paramref name=&quot;punkObject&quot; /&gt; is weak or strong, and controls access to the object through its entry in the ROT.">指定執行物件表格 (ROT) 對 <paramref name="punkObject" /> 的參考是弱式還是強式，並且透過它在 ROT 中的項目控制對物件的存取。</param>
      <param name="punkObject" vsli:raw="A reference to the object being registered as running.">登錄為執行中之物件的參考。</param>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker that identifies &lt;paramref name=&quot;punkObject&quot; /&gt;.">識別 <paramref name="punkObject" /> 的 Moniker 之參考。</param>
      <returns vsli:raw="A value that can be used to identify this ROT entry in subsequent calls to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)&quot; /&gt;.">值，在後續呼叫 <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)" /> 或 <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)" /> 時可用來識別這個 ROT 項目。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)">
      <summary vsli:raw="Unregisters the specified object from the Running Object Table (ROT).">從執行物件表格 (ROT) 中移除指定物件的登錄。</summary>
      <param name="dwRegister" vsli:raw="The Running Object Table (ROT) entry to revoke.">要撤銷的執行物件表格 (ROT) 項目。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IStream&quot; /&gt; interface, with &lt;see langword=&quot;ISequentialStream&quot; /&gt; functionality.">提供 <see langword="IStream" /> 介面的 Managed 定義，具有 <see langword="ISequentialStream" /> 功能。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary vsli:raw="Creates a new stream object with its own seek pointer that references the same bytes as the original stream.">使用它自己的搜尋指標 (其參考與原始資料流相同的位元組)，建立新的資料流物件。</summary>
      <param name="ppstm" vsli:raw="When this method returns, contains the new stream object. This parameter is passed uninitialized.">這個方法傳回時，包含新資料流物件。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary vsli:raw="Ensures that any changes made to a stream object that is open in transacted mode are reflected in the parent storage.">確保異動模式 (Transacted Mode) 開啟的資料流物件的任何變更，都會反映在父代 (Parent) 儲存區中。</summary>
      <param name="grfCommitFlags" vsli:raw="A value that controls how the changes for the stream object are committed.">控制如何認可資料流物件變更的數值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.">從資料流中的目前搜尋指標複製指定數目的位元組到另一個資料流中的目前搜尋指標。</summary>
      <param name="pstm" vsli:raw="A reference to the destination stream.">目的端資料流的參考。</param>
      <param name="cb" vsli:raw="The number of bytes to copy from the source stream.">要從來源資料流複製的位元組數目。</param>
      <param name="pcbRead" vsli:raw="On successful return, contains the actual number of bytes read from the source.">在成功傳回時，含有從來源讀取的實際位元組數目。</param>
      <param name="pcbWritten" vsli:raw="On successful return, contains the actual number of bytes written to the destination.">在成功傳回時，含有寫入目的端的實際位元組數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary vsli:raw="Restricts access to a specified range of bytes in the stream.">限制存取資料流中指定的位元組範圍。</summary>
      <param name="libOffset" vsli:raw="The byte offset for the beginning of the range.">範圍開頭的位元組位移。</param>
      <param name="cb" vsli:raw="The length of the range, in bytes, to restrict.">要限制的範圍長度，以位元組為單位。</param>
      <param name="dwLockType" vsli:raw="The requested restrictions on accessing the range.">對存取範圍要求的限制。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary vsli:raw="Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.">在目前搜尋指標位置開始，從資料流物件讀取指定數目的位元組到記憶體中。</summary>
      <param name="pv" vsli:raw="When this method returns, contains the data read from the stream. This parameter is passed uninitialized.">這個方法傳回時，包含從資料流讀取的資料。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="cb" vsli:raw="The number of bytes to read from the stream object.">要從資料流物件讀取的位元組數目。</param>
      <param name="pcbRead" vsli:raw="A pointer to a &lt;see langword=&quot;ULONG&quot; /&gt; variable that receives the actual number of bytes read from the stream object.">
        <see langword="ULONG" /> 變數的指標，其接收從資料流物件讀取的實際位元組數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary vsli:raw="Discards all changes that have been made to a transacted stream since the last &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)&quot; /&gt; call.">捨棄從上次 <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)" /> 呼叫後對異動資料流的所有變更。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary vsli:raw="Changes the seek pointer to a new location relative to the beginning of the stream, to the end of the stream, or to the current seek pointer.">變更搜尋指標到相對於資料流開頭的新位置、到資料流結尾，或到目前的搜尋指標。</summary>
      <param name="dlibMove" vsli:raw="The displacement to add to &lt;paramref name=&quot;dwOrigin&quot; /&gt;.">加入至 <paramref name="dwOrigin" /> 的替代。</param>
      <param name="dwOrigin" vsli:raw="The origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file.">搜尋的原點。 原點可以是檔案的開頭、目前的搜尋指標或是檔案的結尾。</param>
      <param name="plibNewPosition" vsli:raw="On successful return, contains the offset of the seek pointer from the beginning of the stream.">在成功傳回時，含有搜尋指標從資料流開頭的位移。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary vsli:raw="Changes the size of the stream object.">變更資料流物件的大小。</summary>
      <param name="libNewSize" vsli:raw="The new size of the stream as a number of bytes.">資料流的新大小，為位元組數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.STATSTG&quot; /&gt; structure for this stream.">擷取這個資料流的 <see cref="T:System.Runtime.InteropServices.STATSTG" /> 結構。</summary>
      <param name="pstatstg" vsli:raw="When this method returns, contains a &lt;see langword=&quot;STATSTG&quot; /&gt; structure that describes this stream object. This parameter is passed uninitialized.">這個方法傳回時，包含描述這個資料流物件的 <see langword="STATSTG" /> 結構。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="grfStatFlag" vsli:raw="Members in the &lt;see langword=&quot;STATSTG&quot; /&gt; structure that this method does not return, thus saving some memory allocation operations.">
        <see langword="STATSTG" /> 結構中的成員，這個方法未傳回，因此節省了一些記憶體配置作業。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary vsli:raw="Removes the access restriction on a range of bytes previously restricted with the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)&quot; /&gt; method.">移除先前以 <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)" /> 方法限制的位元組範圍之存取限制。</summary>
      <param name="libOffset" vsli:raw="The byte offset for the beginning of the range.">範圍開頭的位元組位移。</param>
      <param name="cb" vsli:raw="The length, in bytes, of the range to restrict.">要限制的範圍長度，以位元組為單位。</param>
      <param name="dwLockType" vsli:raw="The access restrictions previously placed on the range.">先前對範圍的存取限制。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a specified number of bytes into the stream object starting at the current seek pointer.">在目前搜尋指標位置開始，將指定數目的位元組寫入資料流物件中。</summary>
      <param name="pv" vsli:raw="The buffer to write this stream to.">要將這個資料流寫入的緩衝區。</param>
      <param name="cb" vsli:raw="The number of bytes to write to the stream.">要寫入資料流的位元組數目。</param>
      <param name="pcbWritten" vsli:raw="On successful return, contains the actual number of bytes written to the stream object. If the caller sets this pointer to &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;, this method does not provide the actual number of bytes written.">在成功傳回時，含有寫入資料流物件的實際位元組數目。 如果呼叫端將這個指標設定為 <see cref="F:System.IntPtr.Zero" />，這個方法就不會提供寫入的實際位元組數目。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeComp">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface.">提供 <see langword="ITypeComp" /> 介面的 Managed 定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)">
      <summary vsli:raw="Maps a name to a member of a type, or binds global variables and functions contained in a type library.">對應名稱至型別的成員，或繫結包含於型別程式庫中的全域變數和函式。</summary>
      <param name="szName" vsli:raw="The name to bind.">要繫結的名稱。</param>
      <param name="lHashVal" vsli:raw="A hash value for &lt;paramref name=&quot;szName&quot; /&gt; computed by &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt;.">由 <see langword="LHashValOfNameSys" /> 所計算的 <paramref name="szName" /> 的雜湊值。</param>
      <param name="wFlags" vsli:raw="A flags word containing one or more of the invoke flags defined in the &lt;see langword=&quot;INVOKEKIND&quot; /&gt; enumeration.">旗標字組，含有一個或多個定義於 <see langword="INVOKEKIND" /> 列舉型別的叫用 (Invoke) 旗標。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains a reference to the type description that contains the item to which it is bound, if a &lt;see langword=&quot;FUNCDESC&quot; /&gt; or &lt;see langword=&quot;VARDESC&quot; /&gt; was returned. This parameter is passed uninitialized.">這個方法傳回時，如果傳回 <see langword="FUNCDESC" /> 或 <see langword="VARDESC" />，會包含其所繫結項目的型別描述之參考。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="pDescKind" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;DESCKIND&quot; /&gt; enumerator that indicates whether the name bound-to is a &lt;see langword=&quot;VARDESC&quot; /&gt;, &lt;see langword=&quot;FUNCDESC&quot; /&gt;, or &lt;see langword=&quot;TYPECOMP&quot; /&gt;. This parameter is passed uninitialized.">這個方法傳回時，包含 <see langword="DESCKIND" /> 列舉型別的參考，指出繫結的名稱為 <see langword="VARDESC" />、<see langword="FUNCDESC" /> 或 <see langword="TYPECOMP" />。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="pBindPtr" vsli:raw="When this method returns, contains a reference to the bound-to &lt;see langword=&quot;VARDESC&quot; /&gt;, &lt;see langword=&quot;FUNCDESC&quot; /&gt;, or &lt;see langword=&quot;ITypeComp&quot; /&gt; interface. This parameter is passed uninitialized.">這個方法傳回時，包含繫結到 <see langword="VARDESC" />、<see langword="FUNCDESC" /> 或 <see langword="ITypeComp" /> 介面的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Binds to the type descriptions contained within a type library.">繫結至型別程式庫內所包含的型別描述。</summary>
      <param name="szName" vsli:raw="The name to bind.">要繫結的名稱。</param>
      <param name="lHashVal" vsli:raw="A hash value for &lt;paramref name=&quot;szName&quot; /&gt; determined by &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt;.">
        <see langword="LHashValOfNameSys" /> 所決定的 <paramref name="szName" /> 雜湊值。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains a reference to an &lt;see langword=&quot;ITypeInfo&quot; /&gt; of the type to which &lt;paramref name=&quot;szName&quot; /&gt; was bound. This parameter is passed uninitialized.">這個方法傳回時，包含繫結 <paramref name="szName" /> 的型別 <see langword="ITypeInfo" /> 的參考。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to an &lt;see langword=&quot;ITypeComp&quot; /&gt; variable. This parameter is passed uninitialized.">這個方法傳回時，包含 <see langword="ITypeComp" /> 變數的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo">
      <summary vsli:raw="Provides the managed definition of the Component Automation ITypeInfo interface.">提供元件自動化 ITypeInfo 介面的 Managed 定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary vsli:raw="Retrieves the addresses of static functions or variables, such as those defined in a DLL.">擷取靜態 (Static) 函式或變數的位址，例如在 DLL 中定義者。</summary>
      <param name="memid" vsli:raw="The member ID of the &lt;see langword=&quot;static&quot; /&gt; member's address to retrieve.">要擷取的 <see langword="static" /> 成員位址的成員 ID。</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies whether the member is a property, and if so, what kind.">其中一個 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值，指定成員是否為屬性；如果是，為何種屬性。</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;static&quot; /&gt; member. This parameter is passed uninitialized.">這個方法傳回時，包含 <see langword="static" /> 成員的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary vsli:raw="Creates a new instance of a type that describes a component class (coclass).">建立描述元件類別 (coclass) 之類型的新執行個體。</summary>
      <param name="pUnkOuter" vsli:raw="The object that acts as the controlling &lt;see langword=&quot;IUnknown&quot; /&gt;.">做為控制 <see langword="IUnknown" /> 的物件。</param>
      <param name="riid" vsli:raw="The IID of the interface that the caller uses to communicate with the resulting object.">呼叫端要用來與所產生物件通訊的介面 IID。</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the created object. This parameter is passed uninitialized.">這個方法傳回時，包含所建立物件的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary vsli:raw="Retrieves the type library that contains this type description and its index within that type library.">擷取類型程式庫，其包含這個類型描述和它在該類型程式庫中的索引。</summary>
      <param name="ppTLB" vsli:raw="When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.">這個方法傳回時，包含了包含型別程式庫的參考。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="pIndex" vsli:raw="When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.">這個方法傳回時，包含了包含型別程式庫內型別描述索引的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Retrieves a description or specification of an entry point for a function in a DLL.">擷取 DLL 中函式之進入點 (Entry Point) 的描述或規格。</summary>
      <param name="memid" vsli:raw="The ID of the member function whose DLL entry description is to be returned.">成員函式的 ID，將傳回其 DLL 項目描述。</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by &lt;paramref name=&quot;memid&quot; /&gt;.">其中一個 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值，指定由 <paramref name="memid" /> 識別的成員類型。</param>
      <param name="pBstrDllName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;paramref name=&quot;pBstrDllName&quot; /&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the DLL.">如果不是 <see langword="null" />，函式會將 <paramref name="pBstrDllName" /> 設定為包含 DLL 名稱的 <see langword="BSTR" />。</param>
      <param name="pBstrName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;c&gt;lpbstrName&lt;/c&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the entry point.">如果非為 <see langword="null" />，函式會將 <c>lpbstrName</c> 設定為包含進入點名稱的 <see langword="BSTR" />。</param>
      <param name="pwOrdinal" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, and the function is defined by an ordinal, then &lt;c&gt;lpwOrdinal&lt;/c&gt; is set to point to the ordinal.">如果非為 <see langword="null" />，且函式是由序數所定義；則 <c>lpwOrdinal</c> 就會設定成指向該序數。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.">擷取文件字串、完整的說明檔名稱和路徑，以及指定類型描述之說明主題的主題代碼。</summary>
      <param name="index" vsli:raw="The ID of the member whose documentation is to be returned.">要傳回其文件的成員 ID。</param>
      <param name="strName" vsli:raw="When this method returns, contains the name of the item method. This parameter is passed uninitialized.">這個方法傳回時，包含項目方法的名稱。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">當這個方法傳回時，會包含指定項目的文件字串。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.">這個方法傳回時，包含與指定項目關聯的說明主題之參考。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.">這個方法傳回時，包含說明檔的完整名稱。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure that contains information about a specified function.">擷取包含所指定函式相關資訊的 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 結構。</summary>
      <param name="index" vsli:raw="The index of the function description to return.">要傳回的函式描述之索引。</param>
      <param name="ppFuncDesc" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure that describes the specified function. This parameter is passed uninitialized.">這個方法傳回時，包含描述指定函式的 <see langword="FUNCDESC" /> 結構之參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary vsli:raw="Maps between member names and member IDs, and parameter names and parameter IDs.">成員名稱與成員 ID 之間，以及參數名稱與參數 ID 之間的對應。</summary>
      <param name="rgszNames" vsli:raw="An array of names to map.">要對應的名稱陣列。</param>
      <param name="cNames" vsli:raw="The count of names to map.">要對應的名稱計數。</param>
      <param name="pMemId" vsli:raw="When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.">這個方法傳回時，包含放置了名稱對應的陣列參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.IMPLTYPEFLAGS&quot; /&gt; value for one implemented interface or base interface in a type description.">擷取類型描述中某個已實作之介面或基底介面的 <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 值。</summary>
      <param name="index" vsli:raw="The index of the implemented interface or base interface.">實作介面或基底介面的索引。</param>
      <param name="pImplTypeFlags" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;IMPLTYPEFLAGS&quot; /&gt; enumeration. This parameter is passed uninitialized.">這個方法傳回時，包含 <see langword="IMPLTYPEFLAGS" /> 列舉型別的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)">
      <summary vsli:raw="Retrieves marshaling information.">擷取封送處理 (Marshaling) 資訊。</summary>
      <param name="memid" vsli:raw="The member ID that indicates which marshaling information is needed.">成員 ID，表示需要哪些封送處理資訊。</param>
      <param name="pBstrMops" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;opcode&quot; /&gt; string used in marshaling the fields of the structure described by the referenced type description, or returns &lt;see langword=&quot;null&quot; /&gt; if there is no information to return. This parameter is passed uninitialized.">這個方法傳回時，包含 <see langword="opcode" /> 字串的參考，其用於封送處理由參考的型別描述所描述之結構的欄位，如果沒有資訊要傳回，則傳回 <see langword="null" />。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.">擷取具有對應到所指定函式 ID 之指定成員 ID (或是屬性或方法的名稱及其參數) 的變數。</summary>
      <param name="memid" vsli:raw="The ID of the member whose name (or names) is to be returned.">要傳回其名稱之成員的 ID。</param>
      <param name="rgBstrNames" vsli:raw="When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.">這個方法傳回時，包含與成員關聯的名稱。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="cMaxNames" vsli:raw="The length of the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array.">
        <paramref name="rgBstrNames" /> 陣列的長度。</param>
      <param name="pcNames" vsli:raw="When this method returns, contains the number of names in the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array. This parameter is passed uninitialized.">這個方法傳回時，包含 <paramref name="rgBstrNames" /> 陣列中名稱的數目。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the referenced type descriptions if a type description references other type descriptions.">如果型別描述參考其他型別描述，則擷取參考的型別描述。</summary>
      <param name="hRef" vsli:raw="A handle to the referenced type description to return.">要傳回之已參考的型別描述的控制代碼。</param>
      <param name="ppTI" vsli:raw="When this method returns, contains the referenced type description. This parameter is passed uninitialized.">這個方法傳回時，包含參考的型別描述。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the type description of the implemented interface types if a type description describes a COM class.">如果型別描述描述了 COM 類別，則擷取實作介面型別的型別描述。</summary>
      <param name="index" vsli:raw="The index of the implemented type whose handle is returned.">已實作類型的索引，這個已實作類型的控制代碼已傳回。</param>
      <param name="href" vsli:raw="When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.">這個方法傳回時，包含實作介面的處理常式之參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure that contains the attributes of the type description.">擷取包含類型描述之屬性 (Attribute) 的 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 結構。</summary>
      <param name="ppTypeAttr" vsli:raw="When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.">這個方法傳回時，包含了含有此型別描述屬性的結構之參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface for the type description, which enables a client compiler to bind to the type description's members.">擷取類型描述的 <see langword="ITypeComp" /> 介面，它可以讓用戶端編譯器 (Compiler) 繫結至類型描述的成員。</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface of the containing type library. This parameter is passed uninitialized.">這個方法傳回時，包含了包含型別程式庫的 <see langword="ITypeComp" /> 介面之參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable.">擷取描述所指定變數的 <see langword="VARDESC" /> 結構。</summary>
      <param name="index" vsli:raw="The index of the variable description to return.">要傳回的變數描述之索引。</param>
      <param name="ppVarDesc" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable. This parameter is passed uninitialized.">這個方法傳回時，包含描述指定變數的 <see langword="VARDESC" /> 結構之參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary vsli:raw="Invokes a method, or accesses a property of an object, that implements the interface described by the type description.">叫用 (Invoke) 實作類型描述所描述之介面的方法，或存取實作類型描述所描述之介面的物件屬性。</summary>
      <param name="pvInstance" vsli:raw="A reference to the interface described by this type description.">這個型別描述所描述之介面的參考。</param>
      <param name="memid" vsli:raw="A value that identifies the interface member.">識別介面成員的值。</param>
      <param name="wFlags" vsli:raw="Flags that describe the context of the invoke call.">描述叫用呼叫內容的旗標。</param>
      <param name="pDispParams" vsli:raw="A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.">結構的參考，其包含引數的陣列、具名引數之 DISPID 的陣列，以及每一陣列中元素數目的計數。</param>
      <param name="pVarResult" vsli:raw="A reference to the location at which the result is to be stored. If &lt;paramref name=&quot;wFlags&quot; /&gt; specifies &lt;see langword=&quot;DISPATCH_PROPERTYPUT&quot; /&gt; or &lt;see langword=&quot;DISPATCH_PROPERTYPUTREF&quot; /&gt;, &lt;paramref name=&quot;pVarResult&quot; /&gt; is ignored. Set to &lt;see langword=&quot;null&quot; /&gt; if no result is desired.">要儲存結果之位置的參考。 如果 <paramref name="wFlags" /> 指定 <see langword="DISPATCH_PROPERTYPUT" /> 或 <see langword="DISPATCH_PROPERTYPUTREF" />，<paramref name="pVarResult" /> 便會被忽略。 如果沒有想要的結果，請設定為 <see langword="null" />。</param>
      <param name="pExcepInfo" vsli:raw="A pointer to an exception information structure, which is filled in only if &lt;see langword=&quot;DISP_E_EXCEPTION&quot; /&gt; is returned.">例外狀況資訊結構的指標，只有在傳回 <see langword="DISP_E_EXCEPTION" /> 時才會填入。</param>
      <param name="puArgErr" vsli:raw="If &lt;see langword=&quot;Invoke&quot; /&gt; returns &lt;see langword=&quot;DISP_E_TYPEMISMATCH&quot; /&gt;, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates the index within &lt;c&gt;rgvarg&lt;/c&gt; of the argument with the incorrect type. If more than one argument returns an error, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates only the first argument with an error. This parameter is passed uninitialized.">如果 <see langword="Invoke" /> 傳回 <see langword="DISP_E_TYPEMISMATCH" />，<paramref name="puArgErr" /> 會指出不正確類型引數之 <c>rgvarg</c> 內的索引。 如果有一個以上引數傳回錯誤，<paramref name="puArgErr" /> 只會指出第一個有錯誤的引數。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">釋放先前由 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 方法傳回的 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 結構。</summary>
      <param name="pFuncDesc" vsli:raw="A reference to the &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure to release.">要釋放之 <see langword="FUNCDESC" /> 結構的參考。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)&quot; /&gt; method.">釋放先前由 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 方法傳回的 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 結構。</summary>
      <param name="pTypeAttr" vsli:raw="A reference to the &lt;see langword=&quot;TYPEATTR&quot; /&gt; structure to release.">要釋放之 <see langword="TYPEATTR" /> 結構的參考。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see langword=&quot;VARDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">釋放先前由 <see langword="VARDESC" /> 方法傳回的 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 結構。</summary>
      <param name="pVarDesc" vsli:raw="A reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure to release.">要釋放之 <see langword="VARDESC" /> 結構的參考。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo2">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeInfo2&quot; /&gt; interface.">提供 <see langword="ITypeInfo2" /> 介面的 Managed 定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary vsli:raw="Retrieves the addresses of static functions or variables, such as those defined in a DLL.">擷取靜態 (Static) 函式或變數的位址，例如在 DLL 中定義者。</summary>
      <param name="memid" vsli:raw="The member ID of the &lt;see langword=&quot;static&quot; /&gt; member's address to retrieve.">要擷取的 <see langword="static" /> 成員位址的成員 ID。</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies whether the member is a property, and if so, what kind.">其中一個 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值，指定成員是否為屬性；如果是，為何種屬性。</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;static&quot; /&gt; member. This parameter is passed uninitialized.">這個方法傳回時，包含 <see langword="static" /> 成員的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary vsli:raw="Creates a new instance of a type that describes a component class (coclass).">建立描述元件類別 (coclass) 之類型的新執行個體。</summary>
      <param name="pUnkOuter" vsli:raw="An object that acts as the controlling &lt;see langword=&quot;IUnknown&quot; /&gt;.">做為控制 <see langword="IUnknown" /> 的物件。</param>
      <param name="riid" vsli:raw="The IID of the interface that the caller uses to communicate with the resulting object.">呼叫端要用來與所產生物件通訊的介面 IID。</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the created object. This parameter is passed uninitialized.">這個方法傳回時，包含所建立物件的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)">
      <summary vsli:raw="Gets all custom data items for the library.">取得程式庫的所有自訂資料項目。</summary>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">指向保留所有自訂資料項目的 <see langword="CUSTDATA" /> 指標。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all custom data from the specified function.">取得指定函式的所有自訂資料。</summary>
      <param name="index" vsli:raw="The index of the function to get the custom data for.">要取得自訂資料的函式索引。</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">指向保留所有自訂資料項目的 <see langword="CUSTDATA" /> 指標。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all custom data for the specified implementation type.">取得指定實作類型的所有自訂資料。</summary>
      <param name="index" vsli:raw="The index of the implementation type for the custom data.">自訂資料之實作類型的索引。</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt; which holds all custom data items.">指標，指向保留所有自訂資料項目的 <see langword="CUSTDATA" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all of the custom data for the specified function parameter.">取得指定之函式參數的所有自訂資料。</summary>
      <param name="indexFunc" vsli:raw="The index of the function to get the custom data for.">要取得自訂資料的函式索引。</param>
      <param name="indexParam" vsli:raw="The index of the parameter of this function to get the custom data for.">要取得自訂資料之此函式的參數索引。</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">指向保留所有自訂資料項目的 <see langword="CUSTDATA" /> 指標。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets the variable for the custom data.">取得自訂資料的變數。</summary>
      <param name="index" vsli:raw="The index of the variable to get the custom data for.">要取得自訂資料的變數索引。</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">指向保留所有自訂資料項目的 <see langword="CUSTDATA" /> 指標。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary vsli:raw="Retrieves the type library that contains this type description and its index within that type library.">擷取類型程式庫，其包含這個類型描述和它在該類型程式庫中的索引。</summary>
      <param name="ppTLB" vsli:raw="When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.">這個方法傳回時，包含了包含型別程式庫的參考。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="pIndex" vsli:raw="When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.">這個方法傳回時，包含了包含型別程式庫內型別描述索引的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data.">取得自訂資料。</summary>
      <param name="guid" vsli:raw="The GUID used to identify the data.">用來識別資料的 GUID。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">此方法傳回時會包含一個 <see langword="Object" />，指定要放置所擷取資料的位置。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Retrieves a description or specification of an entry point for a function in a DLL.">擷取 DLL 中函式之進入點 (Entry Point) 的描述或規格。</summary>
      <param name="memid" vsli:raw="The ID of the member function whose DLL entry description is to be returned.">成員函式的 ID，將傳回其 DLL 項目描述。</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by &lt;paramref name=&quot;memid&quot; /&gt;.">其中一個 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值，指定由 <paramref name="memid" /> 識別的成員類型。</param>
      <param name="pBstrDllName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;paramref name=&quot;pBstrDllName&quot; /&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the DLL.">如果不是 <see langword="null" />，函式會將 <paramref name="pBstrDllName" /> 設定為包含 DLL 名稱的 <see langword="BSTR" />。</param>
      <param name="pBstrName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;c&gt;lpbstrName&lt;/c&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the entry point.">如果非為 <see langword="null" />，函式會將 <c>lpbstrName</c> 設定為包含進入點名稱的 <see langword="BSTR" />。</param>
      <param name="pwOrdinal" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, and the function is defined by an ordinal, then &lt;c&gt;lpwOrdinal&lt;/c&gt; is set to point to the ordinal.">如果非為 <see langword="null" />，且函式是由序數所定義；則 <c>lpwOrdinal</c> 就會設定成指向該序數。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.">擷取文件字串、完整的說明檔名稱和路徑，以及指定類型描述之說明主題的主題代碼。</summary>
      <param name="index" vsli:raw="The ID of the member whose documentation is to be returned.">要傳回其文件的成員 ID。</param>
      <param name="strName" vsli:raw="When this method returns, contains the name of the item method. This parameter is passed uninitialized.">這個方法傳回時，包含項目方法的名稱。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">當這個方法傳回時，會包含指定項目的文件字串。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.">這個方法傳回時，包含與指定項目關聯的說明主題之參考。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.">這個方法傳回時，包含說明檔的完整名稱。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.">抓取文件字串、完整「說明」檔案名稱與路徑、要使用的當地語系化內容，以及「說明」檔案中「說明」主題庫的內容識別碼。</summary>
      <param name="memid" vsli:raw="The member identifier for the type description.">型別描述的成員識別項。</param>
      <param name="pbstrHelpString" vsli:raw="When this method returns, contains a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the specified item. If the caller does not need the item name, &lt;paramref name=&quot;pbstrHelpString&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">當這個方法回傳時，會包含具有指定項目名稱的 <see langword="BSTR" />。 如果呼叫者不需要項目名稱，<paramref name="pbstrHelpString" /> 可為 <see langword="null" />。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="pdwHelpStringContext" vsli:raw="When this method returns, contains the Help localization context. If the caller does not need the Help context, &lt;paramref name=&quot;pdwHelpStringContext&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">這個方法回傳時，包會包含該「說明」的本地化內容。 如果呼叫者不需要「說明」內容，<paramref name="pdwHelpStringContext" /> 可為 <see langword="null" />。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="pbstrHelpStringDll" vsli:raw="When this method returns, contains a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the fully qualified name of the file containing the DLL used for the Help file. If the caller does not need the file name, &lt;paramref name=&quot;pbstrHelpStringDll&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">當此方法回傳時，會包含 <see langword="BSTR" />，其中有包含用於「說明」檔案之 DLL 的檔案的完整名稱。 如果呼叫者不需要檔案名稱，<paramref name="pbstrHelpStringDll" /> 可為 <see langword="null" />。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data from the specified function.">從指定的函式取得自訂資料。</summary>
      <param name="index" vsli:raw="The index of the function to get the custom data for.">要取得自訂資料的函式索引。</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">用來識別資料的 GUID。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specified where to put the data. This parameter is passed uninitialized.">當此方法回傳時，會包含一個指定資料放置位置的 <see langword="Object" />。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure that contains information about a specified function.">擷取包含所指定函式相關資訊的 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 結構。</summary>
      <param name="index" vsli:raw="The index of the function description to return.">要傳回的函式描述之索引。</param>
      <param name="ppFuncDesc" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure that describes the specified function. This parameter is passed uninitialized.">這個方法傳回時，包含描述指定函式的 <see langword="FUNCDESC" /> 結構之參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)">
      <summary vsli:raw="Binds to a specific member based on a known DISPID, where the member name is not known (for example, when binding to a default member).">根據已知的 DISPID 繫結到特定成員，其中成員名稱未知 (例如繫結至預設成員時)。</summary>
      <param name="memid" vsli:raw="The member identifier.">成員識別碼。</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by memid.">其中一個 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值會指定 memid 所識別的成員類型。</param>
      <param name="pFuncIndex" vsli:raw="When this method returns, contains an index into the function. This parameter is passed uninitialized.">這個方法傳回時會在函式中包含索引。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary vsli:raw="Maps between member names and member IDs, and parameter names and parameter IDs.">成員名稱與成員 ID 之間，以及參數名稱與參數 ID 之間的對應。</summary>
      <param name="rgszNames" vsli:raw="An array of names to map.">要對應的名稱陣列。</param>
      <param name="cNames" vsli:raw="The count of names to map.">要對應的名稱計數。</param>
      <param name="pMemId" vsli:raw="When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.">這個方法傳回時，包含放置了名稱對應的陣列參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the implementation type of the custom data.">取得自訂資料的實作類型。</summary>
      <param name="index" vsli:raw="The index of the implementation type for the custom data.">自訂資料之實作類型的索引。</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">用來識別資料的 GUID。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">此方法傳回時會包含一個 <see langword="Object" />，指定要放置所擷取資料的位置。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.IMPLTYPEFLAGS&quot; /&gt; value for one implemented interface or base interface in a type description.">擷取類型描述中某個已實作之介面或基底介面的 <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 值。</summary>
      <param name="index" vsli:raw="The index of the implemented interface or base interface.">實作介面或基底介面的索引。</param>
      <param name="pImplTypeFlags" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;IMPLTYPEFLAGS&quot; /&gt; enumeration. This parameter is passed uninitialized.">這個方法傳回時，包含 <see langword="IMPLTYPEFLAGS" /> 列舉型別的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)">
      <summary vsli:raw="Retrieves marshaling information.">擷取封送處理 (Marshaling) 資訊。</summary>
      <param name="memid" vsli:raw="The member ID that indicates which marshaling information is needed.">成員 ID，表示需要哪些封送處理資訊。</param>
      <param name="pBstrMops" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;opcode&quot; /&gt; string used in marshaling the fields of the structure described by the referenced type description, or returns &lt;see langword=&quot;null&quot; /&gt; if there is no information to return. This parameter is passed uninitialized.">這個方法傳回時，包含 <see langword="opcode" /> 字串的參考，其用於封送處理由參考的型別描述所描述之結構的欄位，如果沒有資訊要傳回，則傳回 <see langword="null" />。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.">擷取具有對應到所指定函式 ID 之指定成員 ID (或是屬性或方法的名稱及其參數) 的變數。</summary>
      <param name="memid" vsli:raw="The ID of the member whose name (or names) is to be returned.">要傳回其名稱之成員的 ID。</param>
      <param name="rgBstrNames" vsli:raw="When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.">這個方法傳回時，包含與成員關聯的名稱。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="cMaxNames" vsli:raw="The length of the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array.">
        <paramref name="rgBstrNames" /> 陣列的長度。</param>
      <param name="pcNames" vsli:raw="When this method returns, contains the number of names in the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array. This parameter is passed uninitialized.">這個方法傳回時，包含 <paramref name="rgBstrNames" /> 陣列中名稱的數目。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the specified custom data parameter.">取得指定的自訂資料參數。</summary>
      <param name="indexFunc" vsli:raw="The index of the function to get the custom data for.">要取得自訂資料的函式索引。</param>
      <param name="indexParam" vsli:raw="The index of the parameter of this function to get the custom data for.">要取得自訂資料之此函式的參數索引。</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">用來識別資料的 GUID。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">此方法傳回時會包含一個 <see langword="Object" />，指定要放置所擷取資料的位置。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the referenced type descriptions, if a type description references other type descriptions.">如果型別描述參考其他型別描述，則擷取參考的型別描述。</summary>
      <param name="hRef" vsli:raw="A handle to the referenced type description to return.">要傳回之已參考的型別描述的控制代碼。</param>
      <param name="ppTI" vsli:raw="When this method returns, contains the referenced type description. This parameter is passed uninitialized.">這個方法傳回時，包含參考的型別描述。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the type description of the implemented interface types, if a type description describes a COM class.">如果型別描述對 COM 類別進行描述，則擷取實作介面型別的型別描述。</summary>
      <param name="index" vsli:raw="The index of the implemented type whose handle is returned.">已實作類型的索引，這個已實作類型的控制代碼已傳回。</param>
      <param name="href" vsli:raw="When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.">這個方法傳回時，包含實作介面的處理常式之參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure that contains the attributes of the type description.">擷取包含類型描述之屬性 (Attribute) 的 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 結構。</summary>
      <param name="ppTypeAttr" vsli:raw="When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.">這個方法傳回時，包含了含有此型別描述屬性的結構之參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface for the type description, which enables a client compiler to bind to the type description's members.">擷取類型描述的 <see langword="ITypeComp" /> 介面，它可以讓用戶端編譯器 (Compiler) 繫結至類型描述的成員。</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;ITypeComp&quot; /&gt; of the containing type library. This parameter is passed uninitialized.">這個方法傳回時，包含了包含型別程式庫的 <see langword="ITypeComp" /> 之參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)">
      <summary vsli:raw="Returns the type flags without any allocations. This method returns a &lt;see langword=&quot;DWORD&quot; /&gt; type flag, which expands the type flags without growing the &lt;see langword=&quot;TYPEATTR&quot; /&gt; (type attribute).">傳回型別旗標而不執行任何配置。 這個方法會傳回 <see langword="DWORD" /> 型別旗標，它會展開型別旗標但不會增大 <see langword="TYPEATTR" /> (型別屬性)。</summary>
      <param name="pTypeFlags" vsli:raw="When this method returns, contains a &lt;see langword=&quot;DWORD&quot; /&gt; reference to a &lt;see langword=&quot;TYPEFLAG&quot; /&gt;. This parameter is passed uninitialized.">這個方法傳回時，會包含參考 <see langword="TYPEFLAG" /> 的 <see langword="DWORD" />。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Returns the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration quickly, without doing any allocations.">快速傳回 <see langword="TYPEKIND" /> 列舉而不進行任何配置。</summary>
      <param name="pTypeKind" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration. This parameter is passed uninitialized.">這個方法傳回時，會包含到 <see langword="TYPEKIND" />列舉的參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the variable for the custom data.">取得自訂資料的變數。</summary>
      <param name="index" vsli:raw="The index of the variable to get the custom data for.">要取得自訂資料的變數索引。</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">用來識別資料的 GUID。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">此方法傳回時會包含一個 <see langword="Object" />，指定要放置所擷取資料的位置。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable.">擷取描述所指定變數的 <see langword="VARDESC" /> 結構。</summary>
      <param name="index" vsli:raw="The index of the variable description to return.">要傳回的變數描述之索引。</param>
      <param name="ppVarDesc" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable. This parameter is passed uninitialized.">這個方法傳回時，包含描述指定變數的 <see langword="VARDESC" /> 結構之參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)">
      <summary vsli:raw="Binds to a specific member based on a known &lt;see langword=&quot;DISPID&quot; /&gt;, where the member name is not known (for example, when binding to a default member).">根據已知的 <see langword="DISPID" /> 繫結到特定成員，其中成員名稱為未知 (例如繫結至預設成員時)。</summary>
      <param name="memid" vsli:raw="The member identifier.">成員識別碼。</param>
      <param name="pVarIndex" vsli:raw="When this method returns, contains an index of &lt;paramref name=&quot;memid&quot; /&gt;. This parameter is passed uninitialized.">當此方法回傳時，會包含 <paramref name="memid" /> 的索引。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary vsli:raw="Invokes a method, or accesses a property of an object, that implements the interface described by the type description.">叫用 (Invoke) 實作類型描述所描述之介面的方法，或存取實作類型描述所描述之介面的物件屬性。</summary>
      <param name="pvInstance" vsli:raw="A reference to the interface described by this type description.">這個型別描述所描述之介面的參考。</param>
      <param name="memid" vsli:raw="Identifier of the interface member.">介面成員的識別項。</param>
      <param name="wFlags" vsli:raw="Flags describing the context of the invoke call.">描述叫用呼叫之內容的旗標。</param>
      <param name="pDispParams" vsli:raw="A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.">結構的參考，其包含引數的陣列、具名引數之 DISPID 的陣列，以及每一陣列中元素數目的計數。</param>
      <param name="pVarResult" vsli:raw="A reference to the location at which the result is to be stored. If &lt;paramref name=&quot;wFlags&quot; /&gt; specifies &lt;see langword=&quot;DISPATCH_PROPERTYPUT&quot; /&gt; or &lt;see langword=&quot;DISPATCH_PROPERTYPUTREF&quot; /&gt;, &lt;paramref name=&quot;pVarResult&quot; /&gt; is ignored. Set to &lt;see langword=&quot;null&quot; /&gt; if no result is desired.">要儲存結果之位置的參考。 如果 <paramref name="wFlags" /> 指定 <see langword="DISPATCH_PROPERTYPUT" /> 或 <see langword="DISPATCH_PROPERTYPUTREF" />，<paramref name="pVarResult" /> 便會被忽略。 如果沒有想要的結果，請設定為 <see langword="null" />。</param>
      <param name="pExcepInfo" vsli:raw="A pointer to an exception information structure, which is filled in only if &lt;see langword=&quot;DISP_E_EXCEPTION&quot; /&gt; is returned.">例外狀況資訊結構的指標，只有在傳回 <see langword="DISP_E_EXCEPTION" /> 時才會填入。</param>
      <param name="puArgErr" vsli:raw="If &lt;see langword=&quot;Invoke&quot; /&gt; returns &lt;see langword=&quot;DISP_E_TYPEMISMATCH&quot; /&gt;, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates the index of the argument with incorrect type. If more than one argument returns an error, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates only the first argument with an error.">如果 <see langword="Invoke" /> 傳回 <see langword="DISP_E_TYPEMISMATCH" />，<paramref name="puArgErr" /> 會指出含錯誤型別的引數索引。 如果有一個以上引數傳回錯誤，<paramref name="puArgErr" /> 只會指出第一個有錯誤的引數。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">釋放先前由 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 方法傳回的 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 結構。</summary>
      <param name="pFuncDesc" vsli:raw="A reference to the &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure to release.">要釋放之 <see langword="FUNCDESC" /> 結構的參考。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)&quot; /&gt; method.">釋放先前由 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 方法傳回的 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 結構。</summary>
      <param name="pTypeAttr" vsli:raw="A reference to the &lt;see langword=&quot;TYPEATTR&quot; /&gt; structure to release.">要釋放之 <see langword="TYPEATTR" /> 結構的參考。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see langword=&quot;VARDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">釋放先前由 <see langword="VARDESC" /> 方法傳回的 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 結構。</summary>
      <param name="pVarDesc" vsli:raw="A reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure to release.">要釋放之 <see langword="VARDESC" /> 結構的參考。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeLib&quot; /&gt; interface.">提供 <see langword="ITypeLib" /> 介面的 Managed 定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary vsli:raw="Finds occurrences of a type description in a type library.">尋找型別描述在型別程式庫中的符合項目。</summary>
      <param name="szNameBuf" vsli:raw="The name to search for. This is an in/out parameter.">要搜尋的名稱。 這是個 in/out 參數。</param>
      <param name="lHashVal" vsli:raw="A hash value to speed up the search, computed by the &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt; function. If &lt;paramref name=&quot;lHashVal&quot; /&gt; is 0, a value is computed.">用來加速搜尋的雜湊值 (Hash Value)，由 <see langword="LHashValOfNameSys" /> 函式計算而得。 如果 <paramref name="lHashVal" /> 為 0，表示值已計算出來。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains an array of pointers to the type descriptions that contain the name specified in &lt;paramref name=&quot;szNameBuf&quot; /&gt;. This parameter is passed uninitialized.">這個方法傳回時，包含型別描述的指標陣列，其包含 <paramref name="szNameBuf" /> 中指定的名稱。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="rgMemId" vsli:raw="An array of the &lt;see langword=&quot;MEMBERID&quot; /&gt; 's of the found items; &lt;paramref name=&quot;rgMemId&quot; /&gt; [i] is the &lt;see langword=&quot;MEMBERID&quot; /&gt; that indexes into the type description specified by &lt;paramref name=&quot;ppTInfo&quot; /&gt; [i]. Cannot be &lt;see langword=&quot;null&quot; /&gt;.">所找到項目之 <see langword="MEMBERID" /> 的陣列；<paramref name="rgMemId" />[i] 為 <see langword="MEMBERID" />，其索引至由 <paramref name="ppTInfo" />[i] 所指定的型別描述。 不可以是 <see langword="null" />。</param>
      <param name="pcFound" vsli:raw="On entry, indicates how many instances to look for. For example, &lt;paramref name=&quot;pcFound&quot; /&gt; = 1 can be called to find the first occurrence. The search stops when one instance is found.  &#xA;  &#xA; On exit, indicates the number of instances that were found. If the &lt;see langword=&quot;in&quot; /&gt; and &lt;see langword=&quot;out&quot; /&gt; values of &lt;paramref name=&quot;pcFound&quot; /&gt; are identical, there might be more type descriptions that contain the name.">進入時，表示要尋找多少個執行個體。 例如，若要尋找第一個符合項目可以呼叫 <paramref name="pcFound" /> = 1。 找到一個執行個體時，搜尋便會停止。
結束時，表示找到的執行個體數目。 如果 <paramref name="pcFound" /> 的 <see langword="in" /> 和 <see langword="out" /> 值相同，可能還有更多包含該名稱的型別描述。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.">擷取程式庫的文件字串、完整的說明檔名稱和路徑，以及說明檔中程式庫說明主題的主題代碼。</summary>
      <param name="index" vsli:raw="The index of the type description whose documentation is to be returned.">要傳回文件的型別描述之索引。</param>
      <param name="strName" vsli:raw="When this method returns, contains a string that represents the name of the specified item. This parameter is passed uninitialized.">這個方法傳回時，包含表示指定項目名稱的字串。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="strDocString" vsli:raw="When this method returns, contains a string that represents the documentation string for the specified item. This parameter is passed uninitialized.">這個方法傳回時，包含表示指定項目的文件字串。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.">這個方法傳回時，包含與指定項目關聯的說明主題識別項。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains a string that represents the fully qualified name of the Help file. This parameter is passed uninitialized.">這個方法傳回時，包含表示說明檔完整名稱的字串。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves the structure that contains the library's attributes.">擷取包含程式庫之屬性 (Attribute) 的結構。</summary>
      <param name="ppTLibAttr" vsli:raw="When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.">這個方法傳回時，包含了含有程式庫屬性的結構。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Enables a client compiler to bind to a library's types, variables, constants, and global functions.">讓用戶端編譯器 (Compiler) 繫結至程式庫的型別、變數、常數和全域函式。</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains an instance of a &lt;see langword=&quot;ITypeComp&quot; /&gt; instance for this &lt;see langword=&quot;ITypeLib&quot; /&gt;. This parameter is passed uninitialized.">這個方法傳回時，包含這個 <see langword="ITypeComp" /> 的 <see langword="ITypeLib" /> 執行個體的執行個體。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the specified type description in the library.">擷取程式庫中指定的型別描述。</summary>
      <param name="index" vsli:raw="The index of the &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface to return.">要傳回的 <see langword="ITypeInfo" /> 介面之索引。</param>
      <param name="ppTI" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeInfo&quot; /&gt; describing the type referenced by &lt;paramref name=&quot;index&quot; /&gt;. This parameter is passed uninitialized.">這個方法傳回時，包含描述由 <paramref name="index" /> 所參考之型別的 <see langword="ITypeInfo" />。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount">
      <summary vsli:raw="Returns the number of type descriptions in the type library.">傳回型別程式庫中型別描述的數目。</summary>
      <returns vsli:raw="The number of type descriptions in the type library.">型別程式庫中型別描述的數目。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the type description that corresponds to the specified GUID.">擷取對應到所指定 GUID 的型別描述。</summary>
      <param name="guid" vsli:raw="The IID of the interface or CLSID of the class whose type info is requested.">要求其型別資訊之介面的 IID 或類別之 CLSID。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains the requested &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface. This parameter is passed uninitialized.">這個方法傳回時，包含要求的 <see langword="ITypeInfo" /> 介面。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Retrieves the type of a type description.">擷取型別描述的型別。</summary>
      <param name="index" vsli:raw="The index of the type description within the type library.">型別程式庫中型別描述的索引。</param>
      <param name="pTKind" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration for the type description. This parameter is passed uninitialized.">這個方法傳回時，包含型別描述的 <see langword="TYPEKIND" /> 列舉型別之參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)">
      <summary vsli:raw="Indicates whether a passed-in string contains the name of a type or member described in the library.">指示傳入字串是否含有程式庫中所描述型別或成員的名稱。</summary>
      <param name="szNameBuf" vsli:raw="The string to test. This is an in/out parameter.">要測試的字串。 這是個 in/out 參數。</param>
      <param name="lHashVal" vsli:raw="The hash value of &lt;paramref name=&quot;szNameBuf&quot; /&gt;.">
        <paramref name="szNameBuf" /> 的雜湊值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;szNameBuf&quot; /&gt; was found in the type library; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在型別程式庫中找到 <paramref name="szNameBuf" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary vsli:raw="Releases the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPELIBATTR&quot; /&gt; structure originally obtained from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)&quot; /&gt; method.">釋放原來從 <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> 方法取得的 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 結構。</summary>
      <param name="pTLibAttr" vsli:raw="The &lt;see langword=&quot;TLIBATTR&quot; /&gt; structure to release.">要釋放的 <see langword="TLIBATTR" /> 結構。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib2">
      <summary vsli:raw="Provides a managed definition of the &lt;see langword=&quot;ITypeLib2&quot; /&gt; interface.">提供 <see langword="ITypeLib2" /> 介面的 Managed 定義。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary vsli:raw="Finds occurrences of a type description in a type library.">尋找型別描述在型別程式庫中的符合項目。</summary>
      <param name="szNameBuf" vsli:raw="The name to search for.">要搜尋的名稱。</param>
      <param name="lHashVal" vsli:raw="A hash value to speed up the search, computed by the &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt; function. If &lt;paramref name=&quot;lHashVal&quot; /&gt; is 0, a value is computed.">用來加速搜尋的雜湊值 (Hash Value)，由 <see langword="LHashValOfNameSys" /> 函式計算而得。 如果 <paramref name="lHashVal" /> 為 0，表示值已計算出來。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains an array of pointers to the type descriptions that contain the name specified in &lt;paramref name=&quot;szNameBuf&quot; /&gt;. This parameter is passed uninitialized.">這個方法傳回時，包含型別描述的指標陣列，其包含 <paramref name="szNameBuf" /> 中指定的名稱。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="rgMemId" vsli:raw="When this method returns, contains an array of the &lt;see langword=&quot;MEMBERID&quot; /&gt;s of the found items; &lt;paramref name=&quot;rgMemId&quot; /&gt; [i] is the &lt;see langword=&quot;MEMBERID&quot; /&gt; that indexes into the type description specified by &lt;paramref name=&quot;ppTInfo&quot; /&gt; [i]. This parameter cannot be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">這個方法傳回時，會包含所找到項目之 <see langword="MEMBERID" /> 的陣列；<paramref name="rgMemId" /> [i] 為 <see langword="MEMBERID" />，其索引至由 <paramref name="ppTInfo" /> [i] 所指定的型別描述。 這個參數不可以是 <see langword="null" />。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="pcFound" vsli:raw="On entry, a value, passed by reference, that indicates how many instances to look for. For example, &lt;paramref name=&quot;pcFound&quot; /&gt; = 1 can be called to find the first occurrence. The search stops when one instance is found.  &#xA;  &#xA; On exit, indicates the number of instances that were found. If the &lt;see langword=&quot;in&quot; /&gt; and &lt;see langword=&quot;out&quot; /&gt; values of &lt;paramref name=&quot;pcFound&quot; /&gt; are identical, there might be more type descriptions that contain the name.">項目上以傳址 (By Reference) 方式傳遞的值，指出要尋找的執行個體 (Instance) 數目。 例如，若要尋找第一個符合項目可以呼叫 <paramref name="pcFound" /> = 1。 找到一個執行個體時，搜尋便會停止。
結束時，表示找到的執行個體數目。 如果 <paramref name="pcFound" /> 的 <see langword="in" /> 和 <see langword="out" /> 值相同，可能還有更多包含該名稱的型別描述。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)">
      <summary vsli:raw="Gets all custom data items for the library.">取得程式庫的所有自訂資料項目。</summary>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">指向保留所有自訂資料項目的 <see langword="CUSTDATA" /> 指標。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data.">取得自訂資料。</summary>
      <param name="guid" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; , passed by reference, that is used to identify the data.">由參考傳遞的 <see cref="T:System.Guid" />，用來識別資料。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an object that specifies where to put the retrieved data. This parameter is passed uninitialized.">此方法傳回時會包含一個物件，該物件指定要放置所擷取資料的位置。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.">擷取程式庫的文件字串、完整的說明檔名稱和路徑，以及說明檔中程式庫說明主題的主題代碼。</summary>
      <param name="index" vsli:raw="An index of the type description whose documentation is to be returned.">要傳回其文件之型別描述的索引。</param>
      <param name="strName" vsli:raw="When this method returns, contains a string that specifies the name of the specified item. This parameter is passed uninitialized.">當這個方法傳回時，會包含指定特定項目名稱的字串。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">當這個方法傳回時，會包含指定項目的文件字串。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.">這個方法傳回時，包含與指定項目關聯的說明主題識別項。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains a string that specifies the fully qualified name of the Help file. This parameter is passed uninitialized.">當這個方法傳回時，會包含指定說明檔完整名稱的字串。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.">抓取主題庫文件字串、完整「說明」檔案名稱與路徑、要使用的當地語系化內容，以及「說明」檔案中「說明」主題庫的內容識別碼。</summary>
      <param name="index" vsli:raw="An index of the type description whose documentation is to be returned; if &lt;paramref name=&quot;index&quot; /&gt; is -1, the documentation for the library is returned.">將要傳回其文件的型別說明之索引；如果 <paramref name="index" /> 為 -1，則傳回主題庫的文件。</param>
      <param name="pbstrHelpString" vsli:raw="When this method returns, contains a BSTR that specifies the name of the specified item. If the caller does not need the item name, &lt;paramref name=&quot;pbstrHelpString&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">當這個方法回傳時，會包含可指定已指定項目名稱的 BSTR。 如果呼叫者不需要項目名稱，<paramref name="pbstrHelpString" /> 可為 <see langword="null" />。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="pdwHelpStringContext" vsli:raw="When this method returns, contains the Help localization context. If the caller does not need the Help context, &lt;paramref name=&quot;pdwHelpStringContext&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">這個方法回傳時，包會包含該「說明」的本地化內容。 如果呼叫者不需要「說明」內容，<paramref name="pdwHelpStringContext" /> 可為 <see langword="null" />。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="pbstrHelpStringDll" vsli:raw="When this method returns, contains a BSTR that specifies the fully qualified name of the file containing the DLL used for Help file. If the caller does not need the file name, &lt;paramref name=&quot;pbstrHelpStringDll&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">當此方法回傳時，會包含 BSTR，其中有指定用於「說明」檔案之 DLL 的檔案的完整名稱。 如果呼叫者不需要檔案名稱，<paramref name="pbstrHelpStringDll" /> 可為 <see langword="null" />。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves the structure that contains the library's attributes.">擷取包含程式庫之屬性 (Attribute) 的結構。</summary>
      <param name="ppTLibAttr" vsli:raw="When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.">這個方法傳回時，包含了含有程式庫屬性的結構。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)">
      <summary vsli:raw="Returns statistics about a type library that are required for efficient sizing of hash tables.">傳回有效調整雜湊資料表大小所需的型別程式庫相關統計資料。</summary>
      <param name="pcUniqueNames" vsli:raw="A pointer to a count of unique names. If the caller does not need this information, set to &lt;see langword=&quot;null&quot; /&gt;.">唯一名稱計數的指標。 如果呼叫端不需要這項資訊，請設定為 <see langword="null" />。</param>
      <param name="pcchUniqueNames" vsli:raw="When this method returns, contains a pointer to a change in the count of unique names. This parameter is passed uninitialized.">當這方法傳回時，會包含唯一名稱計數器變更的指標。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Enables a client compiler to bind to a library's types, variables, constants, and global functions.">讓用戶端編譯器 (Compiler) 繫結至程式庫的型別、變數、常數和全域函式。</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeComp&quot; /&gt; instance for this &lt;see langword=&quot;ITypeLib&quot; /&gt;. This parameter is passed uninitialized.">當這個方法傳回時，會包含這個 <see langword="ITypeComp" /> 的 <see langword="ITypeLib" /> 執行個體。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the specified type description in the library.">擷取程式庫中指定的型別描述。</summary>
      <param name="index" vsli:raw="An index of the &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface to return.">要傳回之 <see langword="ITypeInfo" /> 介面的索引。</param>
      <param name="ppTI" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeInfo&quot; /&gt; describing the type referenced by &lt;paramref name=&quot;index&quot; /&gt;. This parameter is passed uninitialized.">這個方法傳回時，包含描述由 <paramref name="index" /> 所參考之型別的 <see langword="ITypeInfo" />。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount">
      <summary vsli:raw="Returns the number of type descriptions in the type library.">傳回型別程式庫中型別描述的數目。</summary>
      <returns vsli:raw="The number of type descriptions in the type library.">型別程式庫中型別描述的數目。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the type description that corresponds to the specified GUID.">擷取對應到所指定 GUID 的型別描述。</summary>
      <param name="guid" vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt;, passed by reference, that represents the IID of the &lt;see langword=&quot;CLSID&quot; /&gt; interface of the class whose type info is requested.">以傳址方式傳遞的 <see cref="T:System.Guid" />，表示已要求其型別資訊之類別的 <see langword="CLSID" /> 介面 IID。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains the requested &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface. This parameter is passed uninitialized.">這個方法傳回時，包含要求的 <see langword="ITypeInfo" /> 介面。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Retrieves the type of a type description.">擷取型別描述的型別。</summary>
      <param name="index" vsli:raw="The index of the type description within the type library.">型別程式庫中型別描述的索引。</param>
      <param name="pTKind" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration for the type description. This parameter is passed uninitialized.">這個方法傳回時，包含型別描述的 <see langword="TYPEKIND" /> 列舉型別之參考。 這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)">
      <summary vsli:raw="Indicates whether a passed-in string contains the name of a type or member described in the library.">指示傳入字串是否含有程式庫中所描述型別或成員的名稱。</summary>
      <param name="szNameBuf" vsli:raw="The string to test.">要測試的字串。</param>
      <param name="lHashVal" vsli:raw="The hash value of &lt;paramref name=&quot;szNameBuf&quot; /&gt;.">
        <paramref name="szNameBuf" /> 的雜湊值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;szNameBuf&quot; /&gt; was found in the type library; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在型別程式庫中找到 <paramref name="szNameBuf" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)">
      <summary vsli:raw="Releases the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPELIBATTR&quot; /&gt; structure originally obtained from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)&quot; /&gt; method.">釋放原來從 <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> 方法取得的 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 結構。</summary>
      <param name="pTLibAttr" vsli:raw="The &lt;see langword=&quot;TLIBATTR&quot; /&gt; structure to release.">要釋放的 <see langword="TLIBATTR" /> 結構。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS">
      <summary vsli:raw="Defines flags that apply to type libraries.">定義套用至類型程式庫的旗標。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary vsli:raw="The type library describes controls and should not be displayed in type browsers intended for nonvisual objects.">這個型別程式庫會描述控制項，而且不應該顯示在供非視覺化物件用的型別瀏覽器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary vsli:raw="The type library exists in a persisted form on disk.">型別程式庫存在於磁碟上保存的表單中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary vsli:raw="The type library should not be displayed to users, although its use is not restricted. The type library should be used by controls. Hosts should create a new type library that wraps the control with extended properties.">型別程式庫不應向使用者顯示，不過它的使用並不受限制。 這個型別程式庫應該由控制項使用。 主應用程式 (Host) 應該建立以擴充屬性包裝控制項的新型別程式庫。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary vsli:raw="The type library is restricted, and should not be displayed to users.">型別程式庫受限制，而且不應向使用者顯示。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMDESC">
      <summary vsli:raw="Contains information about how to transfer a structure element, parameter, or function return value between processes.">包含如何在處理序之間傳輸結構項目、參數或函式傳回值的相關資訊。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.lpVarValue">
      <summary vsli:raw="Represents a pointer to a value that is being passed between processes.">表示正在處理序之間傳遞的值的指標。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.wParamFlags">
      <summary vsli:raw="Represents bitmask values that describe the structure element, parameter, or return value.">表示描述結構項目、參數或傳回值的位元遮罩值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG">
      <summary vsli:raw="Describes how to transfer a structure element, parameter, or function return value between processes.">描述如何在處理序之間傳輸結構項目、參數或函式傳回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary vsli:raw="The parameter has custom data.">參數具有自訂資料。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary vsli:raw="The parameter has default behaviors defined.">參數具有已定義的預設行為。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FIN">
      <summary vsli:raw="The parameter passes information from the caller to the callee.">參數從呼叫端傳遞資訊到被呼叫端。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FLCID">
      <summary vsli:raw="The parameter is the local identifier of a client application.">參數為用戶端應用程式的區域識別項。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOPT">
      <summary vsli:raw="The parameter is optional.">參數為選擇性 (Optional)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOUT">
      <summary vsli:raw="The parameter returns information from the callee to the caller.">參數從被呼叫端傳回資訊到呼叫端。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary vsli:raw="The parameter is the return value of the member.">參數為成員的傳回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_NONE">
      <summary vsli:raw="Does not specify whether the parameter passes or receives information.">沒有指定參數是傳送或接收資訊。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;STATDATA&quot; /&gt; structure.">提供 <see langword="STATDATA" /> 結構的 Managed 定義。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ADVF&quot; /&gt; enumeration value that determines when the advisory sink is notified of changes in the data.">表示 <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 列舉值，決定告知諮詢接收資料變更的時機。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IAdviseSink&quot; /&gt; interface that will receive change notifications.">表示要接收變更告知的 <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> 介面。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary vsli:raw="Represents the token that uniquely identifies the advisory connection. This token is returned by the method that sets up the advisory connection.">表示可唯一識別諮詢連接的語彙基元 (Token)。 這個語彙基元是由設定諮詢連接的方法所傳回。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure for the data of interest to the advise sink. The advise sink receives notification of changes to the data specified by this &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure.">表示通知接收相關資料的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 結構。 通知接收會收到這個 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 結構所指定之資料的變更告知。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary vsli:raw="Contains statistical information about an open storage, stream, or byte-array object.">包含開放儲存區、資料流或位元組陣列物件的統計資訊。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary vsli:raw="Specifies the last access time for this storage, stream, or byte array.">指定這個儲存區、資料流或位元組陣列的上次存取時間。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary vsli:raw="Specifies the size, in bytes, of the stream or byte array.">指定資料流或位元組陣列的大小，以位元組為單位。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary vsli:raw="Indicates the class identifier for the storage object.">指示儲存物件 (Storage Object) 的類別識別項 (Class Identifier)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary vsli:raw="Indicates the creation time for this storage, stream, or byte array.">指示這個儲存區、資料流或位元組陣列的建立時間。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary vsli:raw="Indicates the types of region locking supported by the stream or byte array.">指示資料流或位元組陣列所支援之區域鎖定的型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary vsli:raw="Indicates the access mode that was specified when the object was opened.">指示當物件開啟時所指定的存取模式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary vsli:raw="Indicates the current state bits of the storage object (the value most recently set by the &lt;see langword=&quot;IStorage::SetStateBits&quot; /&gt; method).">指示儲存物件的目前狀態位元 (<see langword="IStorage::SetStateBits" /> 方法最近設定的值)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary vsli:raw="Indicates the last modification time for this storage, stream, or byte array.">指示這個儲存區、資料流或位元組陣列的上一次修改時間。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary vsli:raw="Represents a pointer to a null-terminated string containing the name of the object described by this structure.">表示以 null 結尾字串的指標，此字串含有這個結構所描述之物件的名稱。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary vsli:raw="Reserved for future use.">保留供未來使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary vsli:raw="Indicates the type of storage object, which is one of the values from the &lt;see langword=&quot;STGTY&quot; /&gt; enumeration.">指示儲存物件的型別，即來自 <see langword="STGTY" /> 列舉型別的其中一個值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;STGMEDIUM&quot; /&gt; structure.">提供 <see langword="STGMEDIUM" /> 結構的 Managed 定義。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary vsli:raw="Represents a pointer to an interface instance that allows the sending process to control the way the storage is released when the receiving process calls the &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; function. If &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; uses default procedures to release the storage; otherwise, &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; uses the specified &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">表示介面執行個體的指標，這個介面執行個體可以在接收處理序呼叫 <see langword="ReleaseStgMedium" /> 函式時，讓傳送處理序控制釋放儲存區的方式。 如果 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 是 <see langword="null" />，<see langword="ReleaseStgMedium" /> 會使用預設程序來釋放儲存區，否則 <see langword="ReleaseStgMedium" /> 便會使用指定的 <see langword="IUnknown" /> 介面。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary vsli:raw="Specifies the type of storage medium. The marshaling and unmarshaling routines use this value to determine which union member was used. This value must be one of the elements of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; enumeration.">指定存放媒體的類型。 封送處理 (Marshaling) 和解封送處理 (Unmarshaling) 常式會使用這個值來判斷所使用的等位成員。 這個值必須是 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 列舉型別的其中一個項目。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary vsli:raw="Represents a handle, string, or interface pointer that the receiving process can use to access the data being transferred.">表示接收處理序可以用來存取所傳輸之資料的控制代碼、字串或介面指標。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.SYSKIND">
      <summary vsli:raw="Identifies the target operating system platform.">識別目標作業系統平台。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_MAC">
      <summary vsli:raw="The target operating system for the type library is Apple Macintosh. By default, all data fields are aligned on even-byte boundaries.">型別程式庫的目標作業系統為 Apple Macintosh。 根據預設，所有資料欄位都是對齊偶數位元組 (even-byte) 界限。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN16">
      <summary vsli:raw="The target operating system for the type library is 16-bit Windows systems. By default, data fields are packed.">型別程式庫的目標作業系統是 16 位元 Windows 系統。 根據預設，資料欄位是封裝的。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN32">
      <summary vsli:raw="The target operating system for the type library is 32-bit Windows systems. By default, data fields are naturally aligned (for example, 2-byte integers are aligned on even-byte boundaries; 4-byte integers are aligned on quad-word boundaries, and so on).">型別程式庫的目標作業系統是 32 位元 Windows 系統。 根據預設，資料欄位是以自然方式對齊 (例如，2 位元組的整數是對齊偶數位元組界限；4 位元組的整數是對齊四字組界限，依此類推)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN64">
      <summary vsli:raw="The target operating system for the type library is 64-bit Windows systems.">型別程式庫的目標作業系統是 64 位元 Windows 系統。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;TYMED&quot; /&gt; structure.">提供 <see langword="TYMED" /> 結構的 Managed 定義。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary vsli:raw="The storage medium is an enhanced metafile. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteEnhMetaFile&quot; /&gt; to delete the bitmap.">存放媒體是加強型中繼檔 (Metafile)。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成員為 <see langword="null" />，則目的端處理序應該使用 <see langword="DeleteEnhMetaFile" /> 刪除點陣圖。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary vsli:raw="The storage medium is a disk file identified by a path. If the &lt;see langword=&quot;STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;OpenFile&quot; /&gt; to delete the file.">存放媒體是由路徑所識別的磁碟檔。 如果 <see langword="STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成員為 <see langword="null" />，則目的端處理序應該使用 <see langword="OpenFile" /> 刪除檔案。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary vsli:raw="The storage medium is a Graphics Device Interface (GDI) component (HBITMAP). If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteObject&quot; /&gt; to delete the bitmap.">存放媒體是繪圖裝置介面 (Graphics Device Interface，GDI) 元件 (HBITMAP)。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成員為 <see langword="null" />，則目的端處理序應該使用 <see langword="DeleteObject" /> 刪除點陣圖。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary vsli:raw="The storage medium is a global memory handle (HGLOBAL). Allocate the global handle with the GMEM_SHARE flag. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;GlobalFree&quot; /&gt; to release the memory.">存放媒體是全域記憶體處理 (HGLOBAL)。 以 GMEM_SHARE 旗標配置全域控制代碼。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成員為 <see langword="null" />，則目的端處理序應該使用 <see langword="GlobalFree" /> 釋放記憶體。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary vsli:raw="The storage medium is a storage component identified by an &lt;see langword=&quot;IStorage&quot; /&gt; pointer. The data is in the streams and storages contained by this &lt;see langword=&quot;IStorage&quot; /&gt; instance. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is not &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;IStorage::Release&quot; /&gt; to release the storage component.">存放媒體是由 <see langword="IStorage" /> 指標所識別的儲存區元件。 資料位於這個 <see langword="IStorage" /> 執行個體 (Instance) 所包含的資料流和儲存區中。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成員不是 <see langword="null" />，則目的端處理序應該使用 <see langword="IStorage::Release" /> 釋放儲存區元件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary vsli:raw="The storage medium is a stream object identified by an &lt;see langword=&quot;IStream&quot; /&gt; pointer. Use &lt;see langword=&quot;ISequentialStream::Read&quot; /&gt; to read the data. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is not &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;IStream::Release&quot; /&gt; to release the stream component.">存放媒體是由 <see langword="IStream" /> 指標所識別的資料流物件。 請使用 <see langword="ISequentialStream::Read" /> 讀取資料。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成員不是 <see langword="null" />，則目的端處理序應該使用 <see langword="IStream::Release" /> 釋放資料流元件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary vsli:raw="The storage medium is a metafile (HMETAFILE). Use the Windows or WIN32 functions to access the metafile's data. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteMetaFile&quot; /&gt; to delete the bitmap.">存放媒體是中繼檔 (HMETAFILE)。 請使用 Windows 或 WIN32 函式存取中繼檔的資料。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成員為 <see langword="null" />，則目的端處理序應該使用 <see langword="DeleteMetaFile" /> 刪除點陣圖。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary vsli:raw="No data is being passed.">未傳遞任何資料。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEATTR">
      <summary vsli:raw="Contains attributes of a &lt;see langword=&quot;UCOMITypeInfo&quot; /&gt;.">含有 <see langword="UCOMITypeInfo" /> 的屬性 (Attribute)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbAlignment">
      <summary vsli:raw="Specifies the byte alignment for an instance of this type.">指定這個型別之執行個體的位元組對齊。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeInstance">
      <summary vsli:raw="The size of an instance of this type.">這個型別之執行個體的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeVft">
      <summary vsli:raw="The size of this type's virtual method table (VTBL).">這個型別的虛擬方法表 (Virtual Method Table，VTBL) 的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cFuncs">
      <summary vsli:raw="Indicates the number of functions on the interface this structure describes.">指示這個結構所描述之介面上的函式數目。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cImplTypes">
      <summary vsli:raw="Indicates the number of implemented interfaces on the interface this structure describes.">指示這個結構所描述之介面上已實作的介面數目。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cVars">
      <summary vsli:raw="Indicates the number of variables and data fields on the interface described by this structure.">指示這個結構所描述之介面上變數和資料欄位的數目。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.dwReserved">
      <summary vsli:raw="Reserved for future use.">保留供未來使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.guid">
      <summary vsli:raw="The GUID of the type information.">型別資訊的 GUID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.idldescType">
      <summary vsli:raw="IDL attributes of the described type.">所描述型別的 IDL 屬性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lcid">
      <summary vsli:raw="Locale of member names and documentation strings.">成員名稱和文件字串的地區設定 (Locale)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lpstrSchema">
      <summary vsli:raw="Reserved for future use.">保留供未來使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.MEMBER_ID_NIL">
      <summary vsli:raw="A constant used with the &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.memidConstructor&quot; /&gt; and &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.memidDestructor&quot; /&gt; fields.">配合 <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor" /> 和 <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor" /> 欄位使用的常數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidConstructor">
      <summary vsli:raw="ID of constructor, or &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL&quot; /&gt; if none.">建構函式的 ID；如果沒有，則為 <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidDestructor">
      <summary vsli:raw="ID of destructor, or &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL&quot; /&gt; if none.">解構函式的 ID；如果沒有，則為 <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.tdescAlias">
      <summary vsli:raw="If &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.typekind&quot; /&gt; == &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS&quot; /&gt;, specifies the type for which this type is an alias.">如果 <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind" /> == <see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS" />，指定這個類型為其別名的類型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.typekind">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEKIND&quot; /&gt; value describing the type this information describes.">
        <see cref="T:System.Runtime.InteropServices.TYPEKIND" /> 值，描述這項資訊所描述的型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMajorVerNum">
      <summary vsli:raw="Major version number.">主要版本號碼。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMinorVerNum">
      <summary vsli:raw="Minor version number.">次要版本號碼。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wTypeFlags">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; value describing this information.">描述這項資訊的 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> 值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEDESC">
      <summary vsli:raw="Describes the type of a variable, return type of a function, or the type of a function parameter.">描述變數的類型、函式的傳回類型或函式參數的類型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.lpValue">
      <summary vsli:raw="If the variable is &lt;see langword=&quot;VT_SAFEARRAY&quot; /&gt; or &lt;see langword=&quot;VT_PTR&quot; /&gt;, the &lt;see langword=&quot;lpValue&quot; /&gt; field contains a pointer to a &lt;see langword=&quot;TYPEDESC&quot; /&gt; that specifies the element type.">如果變數為 <see langword="VT_SAFEARRAY" /> 或 <see langword="VT_PTR" />，則 <see langword="lpValue" /> 欄位會含有 <see langword="TYPEDESC" /> 的指標，用來指定元素型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.vt">
      <summary vsli:raw="Indicates the variant type for the item described by this &lt;see langword=&quot;TYPEDESC&quot; /&gt;.">指示這個 <see langword="TYPEDESC" /> 所描述之項目的 Variant 型別。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
      <summary vsli:raw="Defines the properties and attributes of a type description.">定義類型描述的屬性 (Property 和 Attribute)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary vsli:raw="The class supports aggregation.">類別支援彙總 (Aggregation)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary vsli:raw="A type description that describes an &lt;see langword=&quot;Application&quot; /&gt; object.">描述 <see langword="Application" /> 物件的型別描述。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary vsli:raw="Instances of the type can be created by &lt;see langword=&quot;ITypeInfo::CreateInstance&quot; /&gt;.">可以由 <see langword="ITypeInfo::CreateInstance" /> 建立的型別的執行個體。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary vsli:raw="The type is a control from which other types will be derived and should not be displayed to users.">型別是衍生其他型別的控制項，不應該向使用者顯示。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary vsli:raw="Indicates that the interface derives from &lt;see langword=&quot;IDispatch&quot; /&gt;, either directly or indirectly. This flag is computed; there is no Object Description Language for the flag.">指示介面是從 <see langword="IDispatch" /> 直接或間接衍生的。 這個旗標是計算得來的，沒有這個旗標的物件描述語言 (Object Description Language)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary vsli:raw="The interface supplies both &lt;see langword=&quot;IDispatch&quot; /&gt; and VTBL binding.">介面同時提供 <see langword="IDispatch" /> 和 VTBL 繫結。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary vsli:raw="The type should not be displayed to browsers.">型別不應顯示到瀏覽器。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary vsli:raw="The type is licensed.">型別已經授權。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary vsli:raw="The interface cannot add members at run time.">介面在執行階段不能加入成員。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary vsli:raw="The types used in the interface are fully compatible with Automation, including VTBL binding support. Setting dual on an interface sets both this flag and the  &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL&quot; /&gt;. This flag is not allowed on dispinterfaces.">介面中使用的型別與 Automation 完全相容，包括 VTBL 繫結支援。 介面的雙重設定為同時設定這個旗標和 <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL" />。 分配介面不允許這個旗標。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary vsli:raw="The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.">型別已預先定義。 用戶端應用程式應該自動建立具有這項屬性之物件的單一執行個體。 指向該物件的變數名稱與該物件的類別名稱相同。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary vsli:raw="Indicates that the interface will be using a proxy/stub dynamic link library. This flag specifies that the type library proxy should not be unregistered when the type library is unregistered.">指示介面會使用 Proxy/Stub 動態連結程式庫。 這個旗標指定當型別程式庫被取消登錄時，型別程式庫 Proxy 不應被取消登錄。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary vsli:raw="The object supports &lt;see langword=&quot;IConnectionPointWithDefault&quot; /&gt;, and has default behaviors.">物件支援 <see langword="IConnectionPointWithDefault" />，而且具有預設的行為。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary vsli:raw="Should not be accessible from macro languages. This flag is intended for system-level types or types that type browsers should not display.">應該不可從巨集語言存取。 這個旗標是供系統層級的型別或型別瀏覽器不應顯示的型別使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary vsli:raw="Indicates base interfaces should be checked for name resolution before checking children, which is the reverse of the default behavior.">指示基底介面在檢查子系前應先檢查名稱解析，與預設行為相反。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEKIND">
      <summary vsli:raw="Specifies various types of data and functions.">指定各種類型的資料和函式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ALIAS">
      <summary vsli:raw="A type that is an alias for another type.">為另一個型別的別名 (Alias) 的型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS">
      <summary vsli:raw="A set of implemented components interfaces.">一組實作的元件介面。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_DISPATCH">
      <summary vsli:raw="A set of methods and properties that are accessible through &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;. By default, dual interfaces return &lt;see langword=&quot;TKIND_DISPATCH&quot; /&gt;.">可透過 <see langword="IDispatch::Invoke" /> 來存取的一組方法和屬性。 預設情況下，介面會傳回 <see langword="TKIND_DISPATCH" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ENUM">
      <summary vsli:raw="A set of enumerators.">一組列舉值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_INTERFACE">
      <summary vsli:raw="A type that has virtual functions, all of which are pure.">具有虛擬函式 (Virtual Function) 的型別，其中全都是純虛擬函式 (Pure Virtual Function)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MAX">
      <summary vsli:raw="End-of-enumeration marker.">列舉型別 (Enumeration) 資料標記的結尾。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MODULE">
      <summary vsli:raw="A module that can have only static functions and data (for example, a DLL).">只能有靜態函式和資料的模組 (例如，DLL)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_RECORD">
      <summary vsli:raw="A structure with no methods.">沒有方法的結構。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_UNION">
      <summary vsli:raw="A union of all members that have an offset of zero.">所有具有零位移 (Offset) 的成員的等位。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
      <summary vsli:raw="Identifies a particular type library and provides localization support for member names.">識別特定類型程式庫，並提供成員名稱的當地語系化支援。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.guid">
      <summary vsli:raw="Represents a globally unique library ID of a type library.">全域地表示型別程式庫的唯一程式庫 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.lcid">
      <summary vsli:raw="Represents a locale ID of a type library.">表示型別程式庫的地區設定 ID (Locale ID)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.syskind">
      <summary vsli:raw="Represents the target hardware platform of a type library.">表示型別程式庫的目標硬體平台。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wLibFlags">
      <summary vsli:raw="Represents library flags.">表示程式庫旗標。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMajorVerNum">
      <summary vsli:raw="Represents the major version number of a type library.">表示型別程式庫的主要版本號碼。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMinorVerNum">
      <summary vsli:raw="Represents the minor version number of a type library.">表示型別程式庫的次要版本號碼。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC">
      <summary vsli:raw="Describes a variable, constant, or data member.">描述變數、常數或資料成員。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.desc">
      <summary vsli:raw="Contains information about a variable.">包含變數的相關資訊。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION">
      <summary vsli:raw="Contains information about a variable.">包含變數的相關資訊。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.lpvarValue">
      <summary vsli:raw="Describes a symbolic constant.">描述符號常數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.oInst">
      <summary vsli:raw="Indicates the offset of this variable within the instance.">指示執行個體 (Instance) 內這個變數的位移 (Offset)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.elemdescVar">
      <summary vsli:raw="Contains the variable type.">含有變數型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.lpstrSchema">
      <summary vsli:raw="This field is reserved for future use.">這個欄位保留作未來使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.memid">
      <summary vsli:raw="Indicates the member ID of a variable.">表示變數的成員 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.varkind">
      <summary vsli:raw="Defines how to marshal a variable.">定義如何封送處理 (Marshal) 變數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.wVarFlags">
      <summary vsli:raw="Defines the properties of a variable.">定義變數的屬性。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARFLAGS">
      <summary vsli:raw="Identifies the constants that define the properties of a variable.">識別定義變數屬性的常數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FBINDABLE">
      <summary vsli:raw="The variable supports data binding.">變數支援資料繫結 (Data Binding)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary vsli:raw="The variable is the single property that best represents the object. Only one variable in type information can have this attribute.">變數是最能表示該物件的單一屬性。 型別資訊中只能有一個變數具有這個屬性 (Attribute)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type of &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.">允許最佳化，其中編譯器會在「abc」型別上尋找名為「xyz」的成員。 如果找到這種成員，而且是被標示為預設集合之元素的存取子 (Accessor) 函式，就會產生一個對該成員函式的呼叫。 在分配介面和介面中的成員受允許；模組上則不受允許。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary vsli:raw="The variable is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE&quot; /&gt; must also be set.">變數對使用者顯示為可繫結的。 <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE" /> 也必須設定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FHIDDEN">
      <summary vsli:raw="The variable should not be displayed to the user in a browser, although it exists and is bindable.">雖然變數存在而且可繫結，但是不應該在瀏覽器中向使用者顯示。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary vsli:raw="The variable is mapped as individual bindable properties.">變數是對應為可繫結的個別屬性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary vsli:raw="The variable appears in an object browser, but not in a properties browser.">變數出現在物件瀏覽器中，但不會在屬性瀏覽器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREADONLY">
      <summary vsli:raw="Assignment to the variable should not be allowed.">不允許對變數進行指派 (Assignment)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary vsli:raw="Tags the interface as having default behaviors.">將介面標記 (Tag) 為具有預設行為。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary vsli:raw="When set, any attempt to directly change the property results in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;. The implementation of &lt;see langword=&quot;OnRequestEdit&quot; /&gt; determines if the change is accepted.">設定後，間接變更屬性的任何嘗試都將產生對 <see langword="IPropertyNotifySink::OnRequestEdit" /> 的呼叫。 <see langword="OnRequestEdit" /> 的實作 (Implementation) 會判斷是否接受變更。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary vsli:raw="The variable should not be accessible from macro languages. This flag is intended for system-level variables or variables that you do not want type browsers to display.">變數不應該可自巨集語言存取。 這旗標旨在做為系統層級變數或您不希望型別瀏覽器顯示的變數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FSOURCE">
      <summary vsli:raw="The variable returns an object that is a source of events.">變數會傳回是事件來源的物件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary vsli:raw="The variable is the default display in the user interface.">變數為使用者介面中的預設顯示。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARKIND">
      <summary vsli:raw="Defines the kind of variable.">定義變數的類型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_CONST">
      <summary vsli:raw="The &lt;see langword=&quot;VARDESC&quot; /&gt; structure describes a symbolic constant. There is no memory associated with it.">
        <see langword="VARDESC" /> 結構會描述符號常數。 沒有與它關聯的記憶體。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_DISPATCH">
      <summary vsli:raw="The variable can be accessed only through &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">此變數只能透過 <see langword="IDispatch::Invoke" /> 來存取。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_PERINSTANCE">
      <summary vsli:raw="The variable is a field or member of the type. It exists at a fixed offset within each instance of the type.">此變數是型別的欄位或成員。 它會存在型別的每個執行個體內的固定位移處。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_STATIC">
      <summary vsli:raw="There is only one instance of the variable.">此變數只有一個執行個體。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary vsli:raw="Specifies the method to call when you unregister an assembly for use from COM; this allows for the execution of user-written code during the unregistration process.">指定當您移除登錄來自 COM 的所用組件 (Assembly) 時要呼叫的方法；這允許移除登錄程序期間的使用者撰寫程式碼的執行。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_CY&quot; /&gt;.">包裝封送處理器應將其當做 <see langword="VT_CY" /> 來封送處理的物件。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CurrencyWrapper&quot; /&gt; class with the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">使用要被包裝並當做型別 <see langword="Decimal" /> 封送處理的 <see langword="VT_CY" />，初始化 <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> 類別的新執行個體。</summary>
      <param name="obj" vsli:raw="The &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as &lt;see langword=&quot;VT_CY&quot; /&gt;.">要被包裝並當做 <see langword="Decimal" /> 封送處理的 <see langword="VT_CY" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CurrencyWrapper&quot; /&gt; class with the object containing the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">使用物件 (包含要被包裝並當做型別 <see langword="Decimal" /> 封送處理的 <see langword="VT_CY" />)，初始化 <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> 類別的新執行個體。</summary>
      <param name="obj" vsli:raw="The object containing the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as &lt;see langword=&quot;VT_CY&quot; /&gt;.">物件，包含要被包裝並當做 <see langword="Decimal" /> 封送處理的 <see langword="VT_CY" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter is not a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; type.">
        <paramref name="obj" /> 參數不是 <see cref="T:System.Decimal" /> 型別。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary vsli:raw="Gets the wrapped object to be marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">取得要當做型別 <see langword="VT_CY" /> 封送處理的已包裝物件。</summary>
      <returns vsli:raw="The wrapped object to be marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">要當做型別 <see langword="VT_CY" /> 封送處理的已包裝物件。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)&quot; /&gt; method's IUnknown::QueryInterface calls can use the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface.">表示 <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> 方法的 IUnknown::QueryInterface 呼叫是否會使用 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 介面。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary vsli:raw="IUnknown::QueryInterface method calls can use the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface. When you use this value, the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)&quot; /&gt; method overload functions like the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)&quot; /&gt; overload.">IUnknown::QueryInterface 方法呼叫可以使用 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 介面。 當您使用這個值時，<see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> 方法多載會如同 <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" /> 多載般運作。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary vsli:raw="IUnknown::QueryInterface method calls should ignore the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface.">IUnknown::QueryInterface 方法呼叫應忽略 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 介面。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary vsli:raw="Provides return values for the &lt;see cref=&quot;M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)&quot; /&gt; method.">提供 <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> 方法的傳回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary vsli:raw="The interface for a specific interface ID is not available. In this case, the returned interface is &lt;see langword=&quot;null&quot; /&gt;. E_NOINTERFACE is returned to the caller of IUnknown::QueryInterface.">特定介面 ID 的介面無法使用。 在此例中，傳回的介面為 <see langword="null" />。 對 IUnknown::QueryInterface 的呼叫端則傳回 E_NOINTERFACE。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary vsli:raw="The interface pointer that is returned from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)&quot; /&gt; method can be used as the result of IUnknown::QueryInterface.">
        <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> 方法傳回的介面指標可以當做 IUnknown::QueryInterface 的結果使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary vsli:raw="The custom &lt;see langword=&quot;QueryInterface&quot; /&gt; was not used. Instead, the default implementation of IUnknown::QueryInterface should be used.">未使用自訂 <see langword="QueryInterface" />， 而應使用 IUnknown::QueryInterface 的預設實作。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary vsli:raw="Specifies the value of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; enumeration. This class cannot be inherited.">指定 <see cref="T:System.Runtime.InteropServices.CharSet" /> 列舉型別的值。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultCharSetAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; value.">使用指定的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 值，初始化 <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> 類別的新執行個體。</summary>
      <param name="charSet" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; values.">其中一個 <see cref="T:System.Runtime.InteropServices.CharSet" /> 值。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary vsli:raw="Gets the default value of &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; for any call to &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt;.">取得所有 <see cref="T:System.Runtime.InteropServices.CharSet" /> 呼叫的 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 預設值。</summary>
      <returns vsli:raw="The default value of &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; for any call to &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt;.">所有 <see cref="T:System.Runtime.InteropServices.CharSet" /> 呼叫的 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 預設值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute">
      <summary vsli:raw="Specifies the paths that are used to search for DLLs that provide functions for platform invokes.">指定用來搜尋提供平台叫用函式的 DLL 的路徑。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.#ctor(System.Runtime.InteropServices.DllImportSearchPath)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; class, specifying the paths to use when searching for the targets of platform invokes.">指定在搜尋平台叫用目標時所使用的路徑，初始化 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> 類別的新執行個體。</summary>
      <param name="paths" vsli:raw="A bitwise combination of enumeration values that specify the paths that the &lt;c&gt;LoadLibraryEx&lt;/c&gt; function searches during platform invokes.">列舉值的位元組合，這些值會指定 <c>LoadLibraryEx</c> 函式在平台叫用期間的搜尋路徑。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.Paths">
      <summary vsli:raw="Gets a bitwise combination of enumeration values that specify the paths that the &lt;c&gt;LoadLibraryEx&lt;/c&gt; function searches during platform invokes.">取得列舉值的位元組合，這些值會指定 <c>LoadLibraryEx</c> 函式在平台叫用期間的搜尋路徑。</summary>
      <returns vsli:raw="A bitwise combination of enumeration values that specify search paths for platform invokes.">列舉值的位元組合，這些值會指定平台叫用的搜尋路徑。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary vsli:raw="Sets the default value of a parameter when called from a language that supports default parameters. This class cannot be inherited.">設定從支援預設參數的語言呼叫參數時，該參數的預設值。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultParameterValueAttribute&quot; /&gt; class with the default value of a parameter.">使用參數的預設值，初始化 <see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value" vsli:raw="An object that represents the default value of a parameter.">物件，表示參數的預設值。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary vsli:raw="Gets the default value of a parameter.">取得參數的預設值。</summary>
      <returns vsli:raw="An object that represents the default value of a parameter.">物件，表示參數的預設值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_DISPATCH&quot; /&gt;.">包裝封送處理器應將其當做 <see langword="VT_DISPATCH" /> 來封送處理的物件。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt; class with the object being wrapped.">使用被包裝的物件，來初始化 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 類別的新執行個體。</summary>
      <param name="obj" vsli:raw="The object to be wrapped and converted to &lt;see cref=&quot;F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH&quot; /&gt;.">要被包裝和轉換成 <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" /> 的物件。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a class or an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;obj&quot; /&gt; does not support &lt;see langword=&quot;IDispatch&quot; /&gt;.">
        <paramref name="obj" /> 不是類別或陣列。
-或-
<paramref name="obj" /> 並不支援 <see langword="IDispatch" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter was marked with a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComVisibleAttribute&quot; /&gt; attribute that was passed a value of &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;obj&quot; /&gt; parameter inherits from a type marked with a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComVisibleAttribute&quot; /&gt; attribute that was passed a value of &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" /> 參數是以 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 屬性標記，該屬性傳遞的值為 <see langword="false" />。
-或-
<paramref name="obj" /> 參數繼承自以 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 屬性標記的類型，該屬性傳遞的值為 <see langword="false" />。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary vsli:raw="Gets the object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;.">取得 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 所包裝的物件。</summary>
      <returns vsli:raw="The object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 所包裝的物件。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary vsli:raw="Specifies the COM dispatch identifier (DISPID) of a method, field, or property.">指定方法、欄位或屬性的 COM 分派識別項 (DISPID)。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;DispIdAttribute&quot; /&gt; class with the specified DISPID.">使用指定的 DISPID，初始化 <see langword="DispIdAttribute" /> 類別的新執行個體。</summary>
      <param name="dispId" vsli:raw="The DISPID for the member.">成員的 DISPID。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary vsli:raw="Gets the DISPID for the member.">取得成員的 DISPID。</summary>
      <returns vsli:raw="The DISPID for the member.">成員的 DISPID。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary vsli:raw="Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.">指出由 Unmanaged 動態連結程式庫 (DLL) 公開做為靜態進入點的屬性化方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt; class with the name of the DLL containing the method to import.">使用含有要匯入方法的 DLL 名稱，來初始化 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 類別的新執行個體。</summary>
      <param name="dllName" vsli:raw="The name of the DLL that contains the unmanaged method. In .NET Framework, this can include an assembly display name, if the DLL is included in an assembly.">包含 Unmanaged 方法的 DLL 名稱。 如果 DLL 包含在組件中，這個名稱可能會包括組件顯示名稱。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary vsli:raw="Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.">將 Unicode 字元轉換成 ANSI 字元時，啟用或停用最適合對應行為。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary vsli:raw="Indicates the calling convention of an entry point.">指示進入點的呼叫慣例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary vsli:raw="Indicates how to marshal string parameters to the method and controls name mangling.">指示如何將字串參數封送處理到方法和控制項函式名稱改變 (Name Mangling)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary vsli:raw="Indicates the name or ordinal of the DLL entry point to be called.">指示要呼叫的 DLL 進入點 (Entry Point) 的名稱或序數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary vsli:raw="Controls whether the &lt;see cref=&quot;F:System.Runtime.InteropServices.DllImportAttribute.CharSet&quot; /&gt; field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.">控制 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> 欄位是否會導致 Common Language Runtime 搜尋 Unmanaged DLL 以取得不是指定名稱的進入點名稱。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary vsli:raw="Indicates whether unmanaged methods that have &lt;see langword=&quot;HRESULT&quot; /&gt; return values are directly translated or whether &lt;see langword=&quot;HRESULT&quot; /&gt; return values are automatically converted to exceptions.">指出是否直接轉譯具有 <see langword="HRESULT" /> 或 <see langword="retval" /> 傳回值的 Unmanaged 方法，或者是否將 <see langword="HRESULT" /> 或 <see langword="retval" /> 傳回值自動轉換成例外狀況。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary vsli:raw="Indicates whether the callee sets an error (&lt;see langword=&quot;SetLastError&quot; /&gt; on Windows or &lt;see langword=&quot;errno&quot; /&gt; on other platforms) before returning from the attributed method.">指出自屬性方法傳回之前，被呼叫端是否呼叫 <see langword="SetLastError" /> Windows API 函式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI &quot;?&quot; character.">在無法對應的 Unicode 字元轉換為 ANSI "?" 字元時，啟用或停用例外狀況的擲回。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary vsli:raw="Gets the name of the DLL file that contains the entry point.">取得包含進入點的 DLL 檔案名稱。</summary>
      <returns vsli:raw="The name of the DLL file that contains the entry point.">包含進入點的 DLL 檔案名稱。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportResolver">
      <summary vsli:raw="Provides a delegate used to resolve native libraries via callback.">提供用來透過回呼解析原生程式庫的委派。</summary>
      <param name="libraryName" vsli:raw="The native library to resolve.">要解析的原生程式庫。</param>
      <param name="assembly" vsli:raw="The assembly requesting the resolution.">要求解析的組件。</param>
      <param name="searchPath" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; on the PInvoke, if any. Otherwise, the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; on the assembly, if any. Otherwise &lt;see langword=&quot;null&quot; /&gt;.">PInvoke 上的 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> (如果有的話)。 否則為組件上的 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> (如果有的話)。 否則為 <see langword="null" />。</param>
      <returns vsli:raw="The handle for the loaded native library on success, or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; on failure.">成功時為已載入原生程式庫的控制代碼，失敗時為 <see cref="F:System.IntPtr.Zero" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportSearchPath">
      <summary vsli:raw="Specifies the paths that are used to search for DLLs that provide functions for platform invokes.">指定用來搜尋提供平台叫用函式的 DLL 的路徑。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.ApplicationDirectory">
      <summary vsli:raw="Include the application directory in the DLL search path.">將應用程式目錄包含在 DLL 搜尋路徑中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory">
      <summary vsli:raw="When searching for assembly dependencies, include the directory that contains the assembly itself, and search that directory first. When used in Native AOT and single-file deployment models, the application's installation directory is considered the &quot;assembly directory&quot; and is searched.">當搜尋組件相依性時，會包括內含組件本身的目錄，並優先搜尋該目錄。 在路徑傳遞至 Win32 LoadLibraryEx 函式之前，.NET Framework 會使用這個值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior">
      <summary vsli:raw="Search the application directory, and then call the Win32 LoadLibraryEx function with the &lt;c&gt;LOAD_WITH_ALTERED_SEARCH_PATH&lt;/c&gt; flag. This value is ignored if any other value is specified. Operating systems that do not support the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; attribute use this value, and ignore other values.">搜尋應用程式目錄，然後呼叫含 <c>LOAD_WITH_ALTERED_SEARCH_PATH</c> 旗標的 Win32 LoadLibraryEx 函式。 如果沒有指定其他值，會忽略此值。 不支援 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> 屬性的作業系統會使用此值，而忽略其他值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories">
      <summary vsli:raw="Include the application directory, the &lt;see langword=&quot;%WinDir%\System32&quot; /&gt; directory, and user directories in the DLL search path.">將應用程式目錄、<see langword="%WinDir%\System32" /> 目錄和使用者目錄包含在 DLL 搜尋路徑中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.System32">
      <summary vsli:raw="Include the &lt;see langword=&quot;%WinDir%\System32&quot; /&gt; directory in the DLL search path.">將 <see langword="%WinDir%\System32" /> 目錄包含在 DLL 搜尋路徑中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UseDllDirectoryForDependencies">
      <summary vsli:raw="Search for the dependencies of a DLL in the folder where the DLL is located before searching other folders.">搜尋其他資料夾之前，先在 DLL 所在的資料夾中搜尋 DLL 的相依性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UserDirectories">
      <summary vsli:raw="Include any path that was explicitly added to the process-wide search path by using the Win32 &lt;c&gt;AddDllDirectory&lt;/c&gt; function.">包含已使用 Win32 <c>AddDllDirectory</c> 函式明確新增至整個處理序搜尋路徑的任何路徑。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_ERROR&quot; /&gt;.">包裝封送處理器應將其當做 <see langword="VT_ERROR" /> 來封送處理的物件。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with the HRESULT that corresponds to the exception supplied.">使用與所提供之例外狀況 (Exception) 對應的 HRESULT，初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 類別的新執行個體。</summary>
      <param name="e" vsli:raw="The exception to be converted to an error code.">要轉換為錯誤碼的例外狀況。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with the HRESULT of the error.">使用錯誤的 HRESULT 來初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 類別的新執行個體。</summary>
      <param name="errorCode" vsli:raw="The HRESULT of the error.">錯誤的 HRESULT。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with an object containing the HRESULT of the error.">使用包含錯誤的 HRESULT 的物件，初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 類別的新執行個體。</summary>
      <param name="errorCode" vsli:raw="The object containing the HRESULT of the error.">包含錯誤的 HRESULT 的物件。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;errorCode&quot; /&gt; parameter is not an &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">
        <paramref name="errorCode" /> 參數不是 <see cref="T:System.Int32" /> 類型。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary vsli:raw="Gets the error code of the wrapper.">取得包裝函式的錯誤碼。</summary>
      <returns vsli:raw="The HRESULT of the error.">錯誤的 HRESULT。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary vsli:raw="Supplies an explicit &lt;see cref=&quot;T:System.Guid&quot; /&gt; when an automatic GUID is undesirable.">不要自動 GUID 時，提供明確 <see cref="T:System.Guid" />。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.GuidAttribute&quot; /&gt; class with the specified GUID.">使用指定的 GUID，初始化 <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> 類別的新執行個體。</summary>
      <param name="guid" vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt; to be assigned.">要指派的 <see cref="T:System.Guid" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Guid&quot; /&gt; of the class.">取得類別的 <see cref="T:System.Guid" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt; of the class.">類別的 <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary vsli:raw="Tracks outstanding handles and forces a garbage collection when the specified threshold is reached.">達到指定的臨界值時，追蹤未完成的控制代碼並強制進行記憶體回收。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; class using a name and a threshold at which to begin handle collection.">使用名稱以及要開始進行控制代碼回收的臨界值，初始化 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="A name for the collector. This parameter allows you to name collectors that track handle types separately.">回收行程的名稱。 這項參數可讓您分別針對追蹤控制代碼型別的回收行程加以命名。</param>
      <param name="initialThreshold" vsli:raw="A value that specifies the point at which collections should begin.">值，其指定要開始進行回收的點。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter is less than 0.">
        <paramref name="initialThreshold" /> 參數小於 0。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; class using a name, a threshold at which to begin handle collection, and a threshold at which handle collection must occur.">使用名稱、要開始進行控制代碼回收的臨界值以及必須執行控制代碼回收的臨界值，初始化 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="A name for the collector.  This parameter allows you to name collectors that track handle types separately.">回收行程的名稱。  這項參數可讓您分別針對追蹤控制代碼型別的回收行程加以命名。</param>
      <param name="initialThreshold" vsli:raw="A value that specifies the point at which collections should begin.">值，其指定要開始進行回收的點。</param>
      <param name="maximumThreshold" vsli:raw="A value that specifies the point at which collections must occur. This should be set to the maximum number of available handles.">值，其指定必須進行回收的點。 這個值應該設定為可用控制代碼的最大數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;maximumThreshold&quot; /&gt; parameter is less than 0.">
        <paramref name="initialThreshold" /> 參數小於 0。
-或-
<paramref name="maximumThreshold" /> 參數小於 0。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;maximumThreshold&quot; /&gt; parameter is less than the &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter.">
        <paramref name="maximumThreshold" /> 參數小於 <paramref name="initialThreshold" /> 參數。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary vsli:raw="Increments the current handle count.">遞增目前的控制代碼計數。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Count&quot; /&gt; property is less than 0.">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> 屬性小於 0。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary vsli:raw="Gets the number of handles collected.">取得已回收之控制代碼的數目。</summary>
      <returns vsli:raw="The number of handles collected.">已回收之控制代碼的數目。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary vsli:raw="Gets a value that specifies the point at which collections should begin.">取得值，其指定要開始進行回收的點。</summary>
      <returns vsli:raw="A value that specifies the point at which collections should begin.">值，其指定要開始進行回收的點。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary vsli:raw="Gets a value that specifies the point at which collections must occur.">取得值，其指定必須進行回收的點。</summary>
      <returns vsli:raw="A value that specifies the point at which collections must occur.">值，其指定必須進行回收的點。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary vsli:raw="Gets the name of a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; object.">取得 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 物件的名稱。</summary>
      <returns vsli:raw="This &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Name&quot; /&gt; property allows you to name collectors that track handle types separately.">這項 <see cref="P:System.Runtime.InteropServices.HandleCollector.Name" /> 屬性可讓您分別針對追蹤控制代碼型別的回收行程加以命名。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary vsli:raw="Decrements the current handle count.">遞減目前的控制代碼計數。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Count&quot; /&gt; property is less than 0.">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> 屬性小於 0。</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary vsli:raw="Wraps a managed object holding a handle to a resource that is passed to unmanaged code using platform invoke.">將保有控制代碼的 Managed 物件包裝至要使用平台叫用傳遞至 Unmanaged 程式碼的資源。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; class with the object to wrap and a handle to the resource used by unmanaged code.">使用要包裝的物件和 Unmanaged 程式碼所使用的資源控制代碼，初始化 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 類別的新執行個體。</summary>
      <param name="wrapper" vsli:raw="A managed object that should not be finalized until the platform invoke call returns.">Managed 物件，不應該在平台叫用呼叫傳回前最終處理它。</param>
      <param name="handle" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that indicates a handle to a resource.">指示資源控制代碼的 <see cref="T:System.IntPtr" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary vsli:raw="Gets the handle to a resource.">取得資源控制代碼。</summary>
      <returns vsli:raw="The handle to a resource.">資源控制代碼。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
      <summary vsli:raw="Returns the handle to a resource of the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">傳回指定 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 物件的資源控制代碼。</summary>
      <param name="value" vsli:raw="The object that needs a handle.">需要控制代碼的物件。</param>
      <returns vsli:raw="The handle to a resource of the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">指定 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 物件的資源控制代碼。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
      <summary vsli:raw="Returns the internal integer representation of a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">傳回 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 物件的內部整數表示。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object to retrieve an internal integer representation from.">
        <see cref="T:System.Runtime.InteropServices.HandleRef" /> 物件，要從此物件擷取內部整數表示。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; object that represents a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">
        <see cref="T:System.IntPtr" /> 物件，表示 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 物件。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary vsli:raw="Gets the object holding the handle to a resource.">取得存有資源控制代碼的物件。</summary>
      <returns vsli:raw="The object holding the handle to a resource.">存有資源控制代碼的物件。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary vsli:raw="Provides a way for clients to access the actual object, rather than the adapter object handed out by a custom marshaler.">提供方法，讓用戶端存取實際物件，而不是自訂封送處理器所分配的配接器物件。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary vsli:raw="Provides access to the underlying object wrapped by a custom marshaler.">提供對基礎物件的存取，由自訂封送處理器包裝。</summary>
      <returns vsli:raw="The object contained by the adapter object.">配接器物件所包含的物件。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary vsli:raw="Enables users to write activation code for managed objects that extend &lt;see cref=&quot;T:System.MarshalByRefObject&quot; /&gt;.">允許使用者撰寫擴充 <see cref="T:System.MarshalByRefObject" /> 的 Managed 物件的啟動程式碼。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary vsli:raw="Creates a new instance of the specified type.">建立指定類型的新執行個體。</summary>
      <param name="serverType" vsli:raw="The type to activate.">要啟動的型別。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.MarshalByRefObject&quot; /&gt; associated with the specified type.">與指定型別相關的 <see cref="T:System.MarshalByRefObject" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary vsli:raw="Provides custom wrappers for handling method calls.">提供用來處理方法呼叫的自訂包裝函式。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary vsli:raw="Performs necessary cleanup of the managed data when it is no longer needed.">針對不需要的 Managed 資料執行必要的清除。</summary>
      <param name="ManagedObj" vsli:raw="The managed object to be destroyed.">要終結的 Managed 物件。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary vsli:raw="Performs necessary cleanup of the unmanaged data when it is no longer needed.">針對不需要的 Unmanaged 資料執行必要的清除。</summary>
      <param name="pNativeData" vsli:raw="A pointer to the unmanaged data to be destroyed.">要終結的 Unmanaged 資料指標。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary vsli:raw="Returns the size of the native data to be marshaled.">傳回要封送處理的原生資料 (Native Data) 的大小。</summary>
      <returns vsli:raw="The size, in bytes, of the native data.">原生資料的大小 (以位元組為單位)。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary vsli:raw="Converts the managed data to unmanaged data.">將 Managed 資料轉換為 Unmanaged 資料。</summary>
      <param name="ManagedObj" vsli:raw="The managed object to be converted.">要轉換的 Managed 物件。</param>
      <returns vsli:raw="A pointer to the COM view of the managed object.">Managed 物件之 COM 檢視的指標。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary vsli:raw="Converts the unmanaged data to managed data.">將 Unmanaged 資料轉換為 Managed 資料。</summary>
      <param name="pNativeData" vsli:raw="A pointer to the unmanaged data to be wrapped.">要包裝的 Unmanaged 資料指標。</param>
      <returns vsli:raw="An object that represents the managed view of the COM data.">代表 COM 資料之 Managed 檢視的物件。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary vsli:raw="Enables developers to provide a custom, managed implementation of the IUnknown::QueryInterface(REFIID riid, void **ppvObject) method.">讓開發人員提供 IUnknown::QueryInterface(REFIID riid, void **ppvObject) 方法的自訂 Managed 實作。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary vsli:raw="Returns an interface according to a specified interface ID.">根據指定的介面 ID，傳回介面。</summary>
      <param name="iid" vsli:raw="The GUID of the requested interface.">要求之介面的 GUID。</param>
      <param name="ppv" vsli:raw="A reference to the requested interface, when this method returns.">這個方法傳回時，要求之介面的參考。</param>
      <returns vsli:raw="One of the enumeration values that indicates whether a custom implementation of IUnknown::QueryInterface was used.">其中一個列舉值，表示是否已使用 IUnknown::QueryInterface 的自訂實作。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary vsli:raw="Indicates that the types defined within an assembly were originally defined in a type library.">指示在組件內定義的型別原來是定義在型別程式庫中。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute&quot; /&gt; class with the name of the original type library file.">使用原始型別程式庫檔案 (Type Library File) 的名稱，初始化 <see cref="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute" /> 類別的新執行個體。</summary>
      <param name="tlbFile" vsli:raw="The location of the original type library file.">原始型別程式庫檔案的位置。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary vsli:raw="Gets the name of the original type library file.">取得原始型別程式庫檔案的名稱。</summary>
      <returns vsli:raw="The name of the original type library file.">原始型別程式庫檔案的名稱。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary vsli:raw="Indicates whether a managed interface is dual, dispatch-only, or &lt;see langword=&quot;IUnknown&quot; /&gt; -only when exposed to COM.">指示 Managed 介面公開給 COM 時是否為雙重、僅分派或 <see langword="IUnknown" />。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InterfaceTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; enumeration member.">使用指定的 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 列舉型別 (Enumeration) 成員，初始化 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 類別的新執行個體。</summary>
      <param name="interfaceType" vsli:raw="Describes how the interface should be exposed to COM clients.">描述介面應如何公開給 COM 用戶端。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InterfaceTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; enumeration member.">使用指定的 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 列舉型別 (Enumeration) 成員，初始化 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 類別的新執行個體。</summary>
      <param name="interfaceType" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; values that describes how the interface should be exposed to COM clients.">其中一個 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值，描述介面應如何公開給 COM 用戶端。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; value that describes how the interface should be exposed to COM.">取得描述介面應如何公開給 COM 的 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; value that describes how the interface should be exposed to COM.">描述介面應如何公開給 COM 的 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary vsli:raw="The exception thrown when an invalid COM object is used.">使用無效的 COM 物件時便擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;InvalidComObjectException&quot; /&gt; with default properties.">使用預設屬性，初始化 <see langword="InvalidComObjectException" /> 的執行個體。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;COMException&quot; /&gt; class from serialization data.">從序列化 (Serialization) 資料，初始化 <see langword="COMException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">存放序列物件資料的物件。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;InvalidComObjectException&quot; /&gt; with a message.">使用訊息，初始化 <see langword="InvalidComObjectException" /> 的執行個體。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">訊息，表示例外狀況的原因。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InvalidComObjectException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Runtime.InteropServices.InvalidComObjectException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary vsli:raw="The exception thrown by the marshaler when it encounters an argument of a variant type that can not be marshaled to managed code.">封送處理器碰到無法封送處理至 Managed 程式碼的 Variant 型別引數時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class with default values.">使用預設值，初始化 <see langword="InvalidOleVariantTypeException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class from serialization data.">從序列化 (Serialization) 資料，初始化 <see langword="InvalidOleVariantTypeException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">存放序列物件資料的物件。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class with a specified message.">使用指定的訊息，初始化 <see langword="InvalidOleVariantTypeException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">訊息，表示例外狀況的原因。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InvalidOleVariantTypeException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary vsli:raw="Indicates that a method's unmanaged signature expects a locale identifier (LCID) parameter.">指示方法的 Unmanaged 簽章需要地區設定識別項 (LCID) 參數。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;LCIDConversionAttribute&quot; /&gt; class with the position of the LCID in the unmanaged signature.">使用在 Unmanaged 簽章的 LCID 位置，初始化 <see langword="LCIDConversionAttribute" /> 類別的新執行個體。</summary>
      <param name="lcid" vsli:raw="Indicates the position of the LCID argument in the unmanaged signature, where 0 is the first argument.">指示 LCID 引數在 Unmanaged 簽章的位置，其中第一個引數為 0。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary vsli:raw="Gets the position of the LCID argument in the unmanaged signature.">取得 LCID 引數在 Unmanaged 簽章的位置。</summary>
      <returns vsli:raw="The position of the LCID argument in the unmanaged signature, where 0 is the first argument.">LCID 引數在 Unmanaged 簽章的位置，其中第一個引數為 0。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute">
      <summary vsli:raw="Provides support for user customization of interop stubs in managed-to-COM interop scenarios.">在 Managed 至 COM Interop 案例中，提供使用者自訂 Interop Stub 的支援。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute&quot; /&gt; class with the specified class type and method name.">使用指定的類別型別和方法名稱，初始化 <see cref="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute" /> 類別的新執行個體。</summary>
      <param name="classType" vsli:raw="The class that contains the required stub method.">包含所需 Stub 方法的類別。</param>
      <param name="methodName" vsli:raw="The name of the stub method.">Stub 方法的名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;methodName&quot; /&gt; cannot be found.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is not static or non-generic.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method's parameter list does not match the expected parameter list for the stub.">找不到 <paramref name="methodName" />。
-或-
方法不是靜態或非泛用的。
-或-
方法的參數清單不符合 Stub 的預期參數清單。</exception>
      <exception cref="T:System.MethodAccessException" vsli:raw="The interface that contains the managed interop method has no access to the stub method, because the stub method has private or protected accessibility, or because of a security issue.">因為 Stub 方法具有私用或保護的存取範圍，或因為安全性問題，包含受 Managed Interop 方法的介面無法存取 Stub 方法。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType">
      <summary vsli:raw="Gets the class that contains the required stub method.">取得包含所需 Stub 方法的類別。</summary>
      <returns vsli:raw="The class that contains the customized interop stub.">包含自訂 Interop Stub 的類別。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName">
      <summary vsli:raw="Gets the name of the stub method.">取得 Stub 方法的名稱。</summary>
      <returns vsli:raw="The name of a customized interop stub.">自訂 Interop Stub 的名稱。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary vsli:raw="Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.">提供方法的集合，方法用於配置 Unmanaged 記憶體、複製 Unmanaged 記憶體區塊和將 Managed 類型轉換為 Unmanaged 類型，也包括其他和 Unmanaged 程式碼互動時使用的方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary vsli:raw="Increments the reference count on the specified interface.">遞增指定介面的參考次數 (Reference Count)。</summary>
      <param name="pUnk" vsli:raw="The interface reference count to increment.">要遞增的介面參考次數。</param>
      <returns vsli:raw="The new value of the reference count on the &lt;paramref name=&quot;pUnk&quot; /&gt; parameter.">
        <paramref name="pUnk" /> 參數上的參考次數的新值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary vsli:raw="Allocates a block of memory of specified size from the COM task memory allocator.">從 COM 工作記憶體配置器 (Allocator) 配置指定大小的記憶體區塊。</summary>
      <param name="cb" vsli:raw="The size of the block of memory to be allocated.">要配置的記憶體區塊的大小。</param>
      <returns vsli:raw="An integer representing the address of the block of memory allocated. This memory must be released with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)&quot; /&gt;.">表示配置的記憶體區塊位址的整數。 這個記憶體必須使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> 來釋放。</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">記憶體不足，無法滿足要求。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary vsli:raw="Allocates memory from the unmanaged memory of the process by using the specified number of bytes.">使用指定的位元組數目，從處理序的 Unmanaged 記憶體中配置記憶體。</summary>
      <param name="cb" vsli:raw="The required number of bytes in memory.">記憶體中需要的位元組數目。</param>
      <returns vsli:raw="A pointer to the newly allocated memory. This memory must be released using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt; method.">新配置的記憶體的指標。 這個記憶體必須使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 方法加以釋放。</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">記憶體不足，無法滿足要求。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary vsli:raw="Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.">使用指定數目的位元組指標，從處理序的 Unmanaged 記憶體中配置記憶體。</summary>
      <param name="cb" vsli:raw="The required number of bytes in memory.">記憶體中需要的位元組數目。</param>
      <returns vsli:raw="A pointer to the newly allocated memory. This memory must be released using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt; method.">新配置的記憶體的指標。 這個記憶體必須使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 方法加以釋放。</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">記憶體不足，無法滿足要求。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary vsli:raw="Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.">表示是否有位在任何內容中的執行階段可呼叫包裝函式 (RCW) 可以清除。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there are any RCWs available for cleanup; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果有可以清除的執行階段可呼叫包裝函式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary vsli:raw="Gets an interface pointer identified by the specified moniker.">取得由指定 Moniker 來識別的介面指標。</summary>
      <param name="monikerName" vsli:raw="The moniker corresponding to the desired interface pointer.">對應於希望的介面指標的 Moniker。</param>
      <returns vsli:raw="An object containing a reference to the interface pointer identified by the &lt;paramref name=&quot;monikerName&quot; /&gt; parameter. A moniker is a name, and in this case, the moniker is defined by an interface.">一個物件，其中包含對 <paramref name="monikerName" /> 參數所識別之介面指標的參考。 Moniker 是一個名稱，在這種情況下 Moniker 則由介面定義。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="An unrecognized HRESULT was returned by the unmanaged &lt;see langword=&quot;BindToMoniker&quot; /&gt; method.">Unmanaged <see langword="BindToMoniker" /> 方法傳回了無法辨認的 HRESULT。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary vsli:raw="Changes the strength of an object's COM Callable Wrapper (CCW) handle.">變更物件 COM 可呼叫包裝函式 (CCW) 控制代碼的強度。</summary>
      <param name="otp" vsli:raw="The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.">其 CCW 存有參考計數控制代碼的物件。 如果 CCW 上的參考次數大於零，則控制代碼為強式，否則為弱式。</param>
      <param name="fIsWeak" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to change the strength of the handle on the &lt;paramref name=&quot;otp&quot; /&gt; parameter to weak, regardless of its reference count; &lt;see langword=&quot;false&quot; /&gt; to reset the handle strength on &lt;paramref name=&quot;otp&quot; /&gt; to be reference counted.">若要不顧 <paramref name="otp" /> 的參考次數而將其上的控制代碼強度變更為弱的，則為 <see langword="true" />；若要將 <paramref name="otp" /> 上的控制代碼強度重設為按照參考來計數，則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext">
      <summary vsli:raw="Notifies the runtime to clean up all Runtime Callable Wrappers (RCWs) allocated in the current context.">通知執行階段清除目前內容中配置的所有執行階段可呼叫包裝函式 (RCW)。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.">從一維、Managed 8 位元不帶正負號的整數 (Unsigned Integer) 陣列將資料複製到 Unmanaged 記憶體指標。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">要複製的一維陣列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">複製應該在此處開始之來源陣列中以零起始的索引。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">要複製到的記憶體指標。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要複製的陣列元素數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.">從一維、Managed 字元陣列將資料複製到 Unmanaged 記憶體指標。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">要複製的一維陣列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">複製應該在此處開始之來源陣列中以零起始的索引。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">要複製到的記憶體指標。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要複製的陣列元素數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.">從一維、Managed 雙精確度浮點數陣列將資料複製到 Unmanaged 記憶體指標。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">要複製的一維陣列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">複製應該在此處開始之來源陣列中以零起始的索引。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">要複製到的記憶體指標。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要複製的陣列元素數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.">從一維、Managed 16 位元帶正負號的整數陣列將資料複製到 Unmanaged 記憶體指標。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">要複製的一維陣列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">複製應該在此處開始之來源陣列中以零起始的索引。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">要複製到的記憶體指標。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要複製的陣列元素數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.">從一維、Managed 32 位元帶正負號的整數陣列將資料複製到 Unmanaged 記憶體指標。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">要複製的一維陣列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">複製應該在此處開始之來源陣列中以零起始的索引。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">要複製到的記憶體指標。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要複製的陣列元素數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.">從一維、Managed 64 位元帶正負號的整數陣列將資料複製到 Unmanaged 記憶體指標。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">要複製的一維陣列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">複製應該在此處開始之來源陣列中以零起始的索引。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">要複製到的記憶體指標。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要複製的陣列元素數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.">從 Unmanaged 記憶體指標將資料複製到 Managed 8 位元不帶正負號的整數 (Unsigned Integer) 陣列。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">要複製的來源記憶體指標。</param>
      <param name="destination" vsli:raw="The array to copy to.">要複製到其中的陣列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">複製應該在此處開始之目的地陣列中以零起始的索引。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要複製的陣列元素數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed character array.">從 Unmanaged 記憶體指標將資料複製到 Managed 字元陣列。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">要複製的來源記憶體指標。</param>
      <param name="destination" vsli:raw="The array to copy to.">要複製到其中的陣列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">複製應該在此處開始之目的地陣列中以零起始的索引。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要複製的陣列元素數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.">從 Unmanaged 記憶體指標將資料複製到Managed 雙精確度浮點數陣列。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">要複製的來源記憶體指標。</param>
      <param name="destination" vsli:raw="The array to copy to.">要複製到其中的陣列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">複製應該在此處開始之目的地陣列中以零起始的索引。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要複製的陣列元素數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.">從 Unmanaged 記憶體指標將資料複製到 Managed 16 位元帶正負號的整數陣列。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">要複製的來源記憶體指標。</param>
      <param name="destination" vsli:raw="The array to copy to.">要複製到其中的陣列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">複製應該在此處開始之目的地陣列中以零起始的索引。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要複製的陣列元素數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.">從 Unmanaged 記憶體指標將資料複製到 Managed 32 位元帶正負號的整數陣列。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">要複製的來源記憶體指標。</param>
      <param name="destination" vsli:raw="The array to copy to.">要複製到其中的陣列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">複製應該在此處開始之目的地陣列中以零起始的索引。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要複製的陣列元素數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.">從 Unmanaged 記憶體指標將資料複製到 Managed 64 位元帶正負號的整數陣列。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">要複製的來源記憶體指標。</param>
      <param name="destination" vsli:raw="The array to copy to.">要複製到其中的陣列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">複製應該在此處開始之目的地陣列中以零起始的索引。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要複製的陣列元素數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; array.">從 Unmanaged 記憶體指標，將資料複製到 Managed <see cref="T:System.IntPtr" /> 陣列。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">要複製的來源記憶體指標。</param>
      <param name="destination" vsli:raw="The array to copy to.">要複製到其中的陣列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">複製應該在此處開始之目的地陣列中以零起始的索引。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要複製的陣列元素數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.">從 Unmanaged 記憶體指標將資料複製到 Managed 單精確度浮點數陣列。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">要複製的來源記憶體指標。</param>
      <param name="destination" vsli:raw="The array to copy to.">要複製到其中的陣列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">複製應該在此處開始之目的地陣列中以零起始的索引。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要複製的陣列元素數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; array to an unmanaged memory pointer.">從一維、Managed <see cref="T:System.IntPtr" /> 陣列將資料複製到 Unmanaged 記憶體指標。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">要複製的一維陣列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">複製應該在此處開始之來源陣列中以零起始的索引。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">要複製到的記憶體指標。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要複製的陣列元素數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.">從一維、Managed 單精確度浮點數陣列將資料複製到 Unmanaged 記憶體指標。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">要複製的一維陣列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">複製應該在此處開始之來源陣列中以零起始的索引。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">要複製到的記憶體指標。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要複製的陣列元素數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary vsli:raw="Aggregates a managed object with the specified COM object.">將 Managed 物件與指定的 COM 物件進行彙總。</summary>
      <param name="pOuter" vsli:raw="The outer &lt;see langword=&quot;IUnknown&quot; /&gt; pointer.">外部 <see langword="IUnknown" /> 指標。</param>
      <param name="o" vsli:raw="An object to aggregate.">要彙總的物件。</param>
      <returns vsli:raw="The inner &lt;see langword=&quot;IUnknown&quot; /&gt; pointer of the managed object.">受管理物件的內部 <see langword="IUnknown" /> 指標。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is a Windows Runtime object.">
        <paramref name="o" /> 是 Windows 執行階段 物件。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Aggregates a managed object of the specified type with the specified COM object.">[在 .NET Framework 4.5.1 及更新版本中支援]
將所指定類型的 Managed 物件與指定的 COM 物件進行彙總。</summary>
      <param name="pOuter" vsli:raw="The outer IUnknown pointer.">外部 IUnknown 指標。</param>
      <param name="o" vsli:raw="The managed object to aggregate.">要彙總的 Managed 物件。</param>
      <typeparam name="T" vsli:raw="The type of the managed object to aggregate.">要彙總的 Managed 物件類型。</typeparam>
      <returns vsli:raw="The inner IUnknown pointer of the managed object.">Managed 物件的內部 IUnknown 指標。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is a Windows Runtime object.">
        <paramref name="o" /> 是 Windows 執行階段 物件。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary vsli:raw="Wraps the specified COM object in an object of the specified type.">將指定 COM 物件包裝在指定類型的物件中。</summary>
      <param name="o" vsli:raw="The object to be wrapped.">要包裝的物件。</param>
      <param name="t" vsli:raw="The type of wrapper to create.">要建立的包裝函式類型。</param>
      <returns vsli:raw="The newly wrapped object that is an instance of the desired type.">為想要類型之執行個體的新包裝物件。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; must derive from &lt;see langword=&quot;__ComObject&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;t&quot; /&gt; is a Windows Runtime type.">
        <paramref name="t" /> 必須衍生自 <see langword="__ComObject" />。
-或-
<paramref name="t" /> 是 Windows 執行階段 型別。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; cannot be converted to the destination type because it does not support all required interfaces.">
        <paramref name="o" /> 無法轉換為目的端類型，因為不支援所需的所有介面。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Wraps the specified COM object in an object of the specified type.">[在 .NET Framework 4.5.1 及更新版本中支援]
將指定 COM 物件包裝在指定類型的物件中。</summary>
      <param name="o" vsli:raw="The object to be wrapped.">要包裝的物件。</param>
      <typeparam name="T" vsli:raw="The type of object to wrap.">要包裝的物件類型。</typeparam>
      <typeparam name="TWrapper" vsli:raw="The type of object to return.">要傳回的物件類型。</typeparam>
      <returns vsli:raw="The newly wrapped object.">新包裝的物件。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;typeparamref name=&quot;T&quot; /&gt; must derive from &lt;see langword=&quot;__ComObject&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;typeparamref name=&quot;T&quot; /&gt; is a Windows Runtime type.">
        <typeparamref name="T" /> 必須衍生自 <see langword="__ComObject" />。
-或-
<typeparamref name="T" /> 是 Windows 執行階段 型別。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; cannot be converted to the &lt;paramref name=&quot;TWrapper&quot; /&gt; because it does not support all required interfaces.">因為不支援所有必要的介面，<paramref name="o" /> 不能轉換為 <paramref name="TWrapper" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary vsli:raw="Frees all substructures that the specified unmanaged memory block points to.">釋放指定之 Unmanaged 記憶體區塊指向的所有子結構。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Unmanaged 記憶體區塊的指標。</param>
      <param name="structuretype" vsli:raw="Type of a formatted class. This provides the layout information necessary to delete the buffer in the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">格式化類別的類型。 這提供刪除 <paramref name="ptr" /> 中的緩衝區時所必須的配置資訊。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structureType&quot; /&gt; has an automatic layout. Use sequential or explicit instead.">
        <paramref name="structureType" /> 有自動配置。 使用循序或明確取代。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Frees all substructures of a specified type that the specified unmanaged memory block points to.">[在 .NET Framework 4.5.1 及更新版本中支援]
釋放指定之 Unmanaged 記憶體區塊指向的所有指定類型的子結構。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Unmanaged 記憶體區塊的指標。</param>
      <typeparam name="T" vsli:raw="The type of the formatted structure. This provides the layout information necessary to delete the buffer in the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">格式化結構的類型。 這提供刪除 <paramref name="ptr" /> 中的緩衝區時所必須的配置資訊。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;typeparamref name=&quot;T&quot; /&gt; has an automatic layout. Use sequential or explicit instead.">
        <typeparamref name="T" /> 有自動配置。 使用循序或明確取代。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary vsli:raw="Releases all references to a Runtime Callable Wrapper (RCW) by setting its reference count to 0.">將執行階段可呼叫包裝函式 (RCW) 的參考計數設為 0，以釋放所有對 RCW 的參考。</summary>
      <param name="o" vsli:raw="The RCW to be released.">要釋放的 RCW。</param>
      <returns vsli:raw="The new value of the reference count of the RCW associated with the &lt;paramref name=&quot;o&quot; /&gt; parameter, which is 0 (zero) if the release is successful.">與 <paramref name="o" /> 參數建立關聯的 RCW 之參考計數的新值；如果釋放成功，則為 0 (零)。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is not a valid COM object.">
        <paramref name="o" /> 不是有效的 COM 物件。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary vsli:raw="Frees a &lt;see langword=&quot;BSTR&quot; /&gt; using the COM SysFreeString function.">使用 COM SysFreeString 函式釋放 <see langword="BSTR" />。</summary>
      <param name="ptr" vsli:raw="The address of the BSTR to be freed.">要釋放的 BSTR 的位址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary vsli:raw="Frees a block of memory allocated by the unmanaged COM task memory allocator.">釋放 Unmanaged COM 工作記憶體配置器所配置的記憶體區塊。</summary>
      <param name="ptr" vsli:raw="The address of the memory to be freed.">要釋放的記憶體的位址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary vsli:raw="Frees memory previously allocated from the unmanaged memory of the process.">從處理序的 Unmanaged 記憶體釋放先前配置的記憶體。</summary>
      <param name="hglobal" vsli:raw="The handle returned by the original matching call to &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">由對 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 的原始相應呼叫傳回的控制代碼。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary vsli:raw="Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).">傳回指定類型的全域唯一識別項 (GUID)，或使用類型程式庫匯出工具 (TlbExp.exe) 使用的演算法來產生 GUID。</summary>
      <param name="type" vsli:raw="The type to generate a GUID for.">要為其產生 GUID 的類型。</param>
      <returns vsli:raw="An identifier for the specified type.">指定之類型的識別項。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary vsli:raw="Returns a programmatic identifier (ProgID) for the specified type.">傳回指定類型的程式設計識別項 (ProgID)。</summary>
      <param name="type" vsli:raw="The type to get a ProgID for.">要為其取得 ProgID 的類型。</param>
      <returns vsli:raw="The ProgID of the specified type.">指定類型的 ProgID。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; parameter is not a class that can be create by COM. The class must be public, have a public parameterless constructor, and be COM visible.">
        <paramref name="type" /> 參數並不是一個可以使用 COM 來建立的類別。 類別必須為公開、具有公開的無參數建構函式，並對 COM 為可見的。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary vsli:raw="Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.">傳回 IUnknown 介面指標，表示指定物件上的指定介面。 自訂查詢介面存取預設為啟用。</summary>
      <param name="o" vsli:raw="The object that provides the interface.">提供介面的物件。</param>
      <param name="T" vsli:raw="The type of interface that is requested.">所要求之介面的類型。</param>
      <returns vsli:raw="The interface pointer that represents the specified interface for the object.">介面指標，表示物件的指定介面。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is a generic type definition.">
        <typeparamref name="T" /> 參數不是介面。
-或-
類型對 COM 為不可見的。
-或-
<typeparamref name="T" /> 參數是泛型型別定義。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter does not support the requested interface.">
        <paramref name="o" /> 參數不支援要求的介面。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> 參數為 <see langword="null" />。
-或-
<typeparamref name="T" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary vsli:raw="Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.">傳回 IUnknown 介面指標，表示指定物件上的指定介面。 自訂查詢介面存取是由指定的自訂模式所控制。</summary>
      <param name="o" vsli:raw="The object that provides the interface.">提供介面的物件。</param>
      <param name="T" vsli:raw="The type of interface that is requested.">所要求之介面的類型。</param>
      <param name="mode" vsli:raw="One of the enumeration values that indicates whether to apply an &lt;see langword=&quot;IUnknown::QueryInterface&quot; /&gt; customization that is supplied by an &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt;.">其中一個列舉值，指出是否要套用 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 所提供的 <see langword="IUnknown::QueryInterface" /> 自訂。</param>
      <returns vsli:raw="The interface pointer that represents the interface for the object.">介面指標，表示物件的介面。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is a generic type definition.">
        <typeparamref name="T" /> 參數不是介面。
-或-
類型對 COM 為不可見的。
-或-
<typeparamref name="T" /> 參數是泛型型別定義。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The object &lt;paramref name=&quot;o&quot; /&gt; does not support the requested interface.">物件 <paramref name="o" /> 不支援要求的介面。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> 參數為 <see langword="null" />。
-或-
<typeparamref name="T" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns a pointer to an IUnknown interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.">[在 .NET Framework 4.5.1 及更新版本中支援]
傳回 IUnknown 介面指標，表示指定類型的物件上的指定介面。 自訂查詢介面存取預設為啟用。</summary>
      <param name="o" vsli:raw="The object that provides the interface.">提供介面的物件。</param>
      <typeparam name="T" vsli:raw="The type of &lt;paramref name=&quot;o&quot; /&gt;.">
        <paramref name="o" /> 的類型。</typeparam>
      <typeparam name="TInterface" vsli:raw="The type of interface to return.">要傳回的介面類型。</typeparam>
      <returns vsli:raw="The interface pointer that represents the &lt;paramref name=&quot;TInterface&quot; /&gt; interface.">表示 <paramref name="TInterface" /> 介面的介面指標。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;TInterface&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is an open generic type.">
        <paramref name="TInterface" /> 參數不是介面。
-或-
類型對 COM 為不可見的。
-或-
<typeparamref name="T" /> 參數是開放式泛型類型。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter does not support the &lt;paramref name=&quot;TInterface&quot; /&gt; interface.">
        <paramref name="o" /> 參數不支援 <paramref name="TInterface" /> 介面。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary vsli:raw="Retrieves data that is referenced by the specified key from the specified COM object.">從指定的 COM 物件擷取指定的索引鍵所參考的資料。</summary>
      <param name="obj" vsli:raw="The COM object that contains the data that you want.">包含所需資料的 COM 物件。</param>
      <param name="key" vsli:raw="The key in the internal hash table of &lt;paramref name=&quot;obj&quot; /&gt; to retrieve the data from.">要從中擷取資料的 <paramref name="obj" /> 之內部雜湊表中的索引鍵。</param>
      <returns vsli:raw="The data represented by the &lt;paramref name=&quot;key&quot; /&gt; parameter in the internal hash table of the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">由 <paramref name="obj" /> 參數的內部雜湊表中之 <paramref name="key" /> 參數所代表的資料。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="obj" /> 為 <see langword="null" />。
-或-
<paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a COM object.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;obj&quot; /&gt; is a Windows Runtime object.">
        <paramref name="obj" /> 不是 COM 物件。
-或-
<paramref name="obj" /> 是 Windows 執行階段 物件。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary vsli:raw="Converts an unmanaged function pointer to a delegate.">將 Unmanaged 函式指標轉換成委派。</summary>
      <param name="ptr" vsli:raw="The unmanaged function pointer to be converted.">要轉換的 Unmanaged 函式指標。</param>
      <param name="t" vsli:raw="The type of the delegate to be returned.">要傳回的委派型别。</param>
      <returns vsli:raw="A delegate instance that can be cast to the appropriate delegate type.">委派執行個體，可轉型成適當的委派類型。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is not a delegate or is generic.">
        <paramref name="t" /> 參數不是委派，或者是泛型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;ptr&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> 參數為 <see langword="null" />。
-或-
<paramref name="t" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an unmanaged function pointer to a delegate of a specified type.">[在 .NET Framework 4.5.1 及更新版本中支援]
將 Unmanaged 函式指標轉換成所指定類型的委派。</summary>
      <param name="ptr" vsli:raw="The unmanaged function pointer to convert.">要轉換的 Unmanaged 函式指標。</param>
      <typeparam name="TDelegate" vsli:raw="The type of the delegate to return.">要傳回的委派型別。</typeparam>
      <returns vsli:raw="A instance of the specified delegate type.">指定之委派類型的執行個體。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;TDelegate&quot; /&gt; generic parameter is not a delegate, or it is an open generic type.">
        <paramref name="TDelegate" /> 泛型參數不是委派，否則就是開放式泛型類型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;ptr&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)">
      <summary vsli:raw="Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.">擷取公開給 COM 時，類型在虛擬函式表 (v-table 或 VTBL) 中的最後一個位置。</summary>
      <param name="t" vsli:raw="A type that represents an interface or class.">表示介面或類別的類型。</param>
      <returns vsli:raw="The last VTBL slot of the interface when exposed to COM. If the &lt;paramref name=&quot;t&quot; /&gt; parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.">公開給 COM 時介面的最後一個 VTBL 位置。 如果 <paramref name="t" /> 參數為類別，傳回的 VTBL 位置是自類別所產生介面中的最後位置。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary vsli:raw="Retrieves a code that identifies the type of the exception that occurred.">擷取可辨識發生的例外狀況 (Exception) 類型的代碼。</summary>
      <returns vsli:raw="The type of the exception.">例外狀況的類型。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary vsli:raw="Converts the specified HRESULT error code to a corresponding &lt;see cref=&quot;T:System.Exception&quot; /&gt; object.">將指定的 HRESULT 錯誤碼轉換成對應的 <see cref="T:System.Exception" /> 物件。</summary>
      <param name="errorCode" vsli:raw="The HRESULT to be converted.">要轉換的 HRESULT。</param>
      <returns vsli:raw="An object that represents the converted HRESULT, or &lt;see langword=&quot;null&quot; /&gt; if the HRESULT value doesn't represent an error code (for example, &lt;see langword=&quot;S_OK&quot; /&gt; or &lt;see langword=&quot;S_FALSE&quot; /&gt;).">表示已轉換 HRESULT 的物件，如果 HRESULT 值不表示錯誤碼 (例如，<see langword="S_OK" /> 或 <see langword="S_FALSE" />) 則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary vsli:raw="Converts the specified HRESULT error code to a corresponding &lt;see cref=&quot;T:System.Exception&quot; /&gt; object, with additional error information passed in an IErrorInfo interface for the exception object.">將指定的 HRESULT 錯誤碼轉換成對應的 <see cref="T:System.Exception" /> 物件，並將其他錯誤資訊傳入此例外狀況物件的 IErrorInfo 介面。</summary>
      <param name="errorCode" vsli:raw="The HRESULT to be converted.">要轉換的 HRESULT。</param>
      <param name="errorInfo" vsli:raw="A pointer to the &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface that provides more information about the error. You can specify &lt;c&gt;IntPtr(0)&lt;/c&gt; to use the current &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface, or &lt;c&gt;IntPtr(-1)&lt;/c&gt; to ignore the current &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface and construct the exception just from the error code.">提供錯誤詳細資訊的 <see langword="IErrorInfo" /> 介面指標。 您可以指定 <c>IntPtr(0)</c> 以使用目前的 <see langword="IErrorInfo" /> 介面，或指定 <c>IntPtr(-1)</c> 忽略目前的 <see langword="IErrorInfo" /> 介面，並且只從錯誤碼建構例外狀況。</param>
      <returns vsli:raw="An object that represents the converted HRESULT and information obtained from &lt;paramref name=&quot;errorInfo&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if an HRESULT value doesn't represent an error code (for example, &lt;see langword=&quot;S_OK&quot; /&gt; or &lt;see langword=&quot;S_FALSE&quot; /&gt;).">表示已轉換 HRESULT 和取得自 <paramref name="errorInfo" /> 之資訊的物件，如果 HRESULT 值不表示錯誤碼 (例如，<see langword="S_OK" /> 或 <see langword="S_FALSE" />) 則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers">
      <summary vsli:raw="Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.">擷取與電腦無關的例外狀況描述，和例外狀況發生時為執行緒保留的狀態資訊。</summary>
      <returns vsli:raw="A pointer to an EXCEPTION_POINTERS structure.">EXCEPTION_POINTERS 結構指標。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary vsli:raw="Converts a delegate into a function pointer that is callable from unmanaged code.">將委派轉換成可從 Unmanaged 程式碼呼叫的函式指標。</summary>
      <param name="d" vsli:raw="The delegate to be passed to unmanaged code.">要傳遞至 Unmanaged 程式碼的委派。</param>
      <returns vsli:raw="A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.">可傳遞至 Unmanaged 程式碼的值，然後程式碼就可以用它來呼叫基礎 Managed 委派。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is a generic type definition.">
        <paramref name="d" /> 參數是泛型型別定義。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="d" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.">[在 .NET Framework 4.5.1 及更新版本中支援]
將所指定類型的委派轉換成可從 Unmanaged 程式碼呼叫的函式指標。</summary>
      <param name="d" vsli:raw="The delegate to be passed to unmanaged code.">要傳遞至 Unmanaged 程式碼的委派。</param>
      <typeparam name="TDelegate" vsli:raw="The type of delegate to convert.">要轉換的委派類型。</typeparam>
      <returns vsli:raw="A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.">可傳遞至 Unmanaged 程式碼的值，然後程式碼就可以用它來呼叫基礎 Managed 委派。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is a generic type definition.">
        <paramref name="d" /> 參數是泛型型別定義。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="d" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary vsli:raw="Returns the instance handle (HINSTANCE) for the specified module.">傳回指定模組的執行個體控制代碼 (HINSTANCE)。</summary>
      <param name="m" vsli:raw="The module whose HINSTANCE is desired.">需要其 HINSTANCE 的模組。</param>
      <returns vsli:raw="The HINSTANCE for &lt;paramref name=&quot;m&quot; /&gt;; or -1 if the module does not have an HINSTANCE.">
        <paramref name="m" /> 的 HINSTANCE，如果模組沒有 HINSTANCE，則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="m" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary vsli:raw="Converts the specified exception to an HRESULT.">將指定的例外狀況轉換成 HRESULT。</summary>
      <param name="e" vsli:raw="The exception to convert to an HRESULT.">要轉換成 HRESULT 的例外狀況。</param>
      <returns vsli:raw="The HRESULT mapped to the supplied exception.">對應於提供的例外狀況的 HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary vsli:raw="Returns the HRESULT corresponding to the last error incurred by Win32 code executed using &lt;see cref=&quot;T:System.Runtime.InteropServices.Marshal&quot; /&gt;.">傳回 HRESULT，它對應於使用 <see cref="T:System.Runtime.InteropServices.Marshal" /> 執行的 Win32 程式碼所引發的最後一個錯誤。</summary>
      <returns vsli:raw="The HRESULT corresponding to the last Win32 error code.">對應於最後一個 Win32 錯誤碼的 HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary vsli:raw="Returns an IDispatch interface from a managed object.">從 Managed 物件傳回 IDispatch 介面。</summary>
      <param name="o" vsli:raw="The object whose &lt;see langword=&quot;IDispatch&quot; /&gt; interface is requested.">其 <see langword="IDispatch" /> 介面受要求的物件。</param>
      <returns vsli:raw="The &lt;see langword=&quot;IDispatch&quot; /&gt; pointer for the &lt;paramref name=&quot;o&quot; /&gt; parameter.">
        <paramref name="o" /> 參數的 <see langword="IDispatch" /> 指標。</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; does not support the requested interface.">
        <paramref name="o" /> 不支援要求的介面。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary vsli:raw="Returns an IUnknown interface from a managed object.">從 Managed 物件傳回 IUnknown 介面。</summary>
      <param name="o" vsli:raw="The object whose &lt;see langword=&quot;IUnknown&quot; /&gt; interface is requested.">其 <see langword="IUnknown" /> 介面受要求的物件。</param>
      <returns vsli:raw="The &lt;see langword=&quot;IUnknown&quot; /&gt; pointer for the &lt;paramref name=&quot;o&quot; /&gt; parameter.">
        <paramref name="o" /> 參數的 <see langword="IUnknown" /> 指標。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary vsli:raw="Returns the error code returned by the last unmanaged function that was called using platform invoke that has the &lt;see cref=&quot;F:System.Runtime.InteropServices.DllImportAttribute.SetLastError&quot; /&gt; flag set.">傳回使用平台叫用 (已設定 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> 旗標) 來呼叫的最後 Unmanaged 函式所傳回的錯誤碼。</summary>
      <returns vsli:raw="The last error code set by a call to the Win32 SetLastError function.">藉由呼叫 Win32 SetLastError 函式設定的最後錯誤碼。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary vsli:raw="Converts an object to a COM VARIANT.">將物件轉換為 COM VARIANT。</summary>
      <param name="obj" vsli:raw="The object for which to get a COM VARIANT.">要為其取得 COM VARIANT 的物件。</param>
      <param name="pDstNativeVariant" vsli:raw="A pointer to receive the VARIANT that corresponds to the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">指標，用來接收對應於 <paramref name="obj" /> 參數的 VARIANT。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter is an instance of a generic type.">
        <paramref name="obj" /> 參數是泛型型別的執行個體。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an object of a specified type to a COM VARIANT.">[在 .NET Framework 4.5.1 及更新版本中支援]
將所指定類型的物件轉換成 COM VARIANT。</summary>
      <param name="obj" vsli:raw="The object for which to get a COM VARIANT.">要為其取得 COM VARIANT 的物件。</param>
      <param name="pDstNativeVariant" vsli:raw="A pointer to receive the VARIANT that corresponds to the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">指標，用來接收對應於 <paramref name="obj" /> 參數的 VARIANT。</param>
      <typeparam name="T" vsli:raw="The type of the object to convert.">要轉換的物件類型。</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary vsli:raw="Returns an instance of a type that represents a COM object by a pointer to its IUnknown interface.">傳回類型的執行個體，這個執行個體透過 IUnknown 介面指標來表示 COM 物件。</summary>
      <param name="pUnk" vsli:raw="A pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">
        <see langword="IUnknown" /> 介面的指標。</param>
      <returns vsli:raw="An object that represents the specified unmanaged COM object.">表示指定之 Unmanaged COM 物件的物件。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pUnk&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">
        <paramref name="pUnk" /> 為 <see cref="F:System.IntPtr.Zero" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary vsli:raw="Converts a COM VARIANT to an object.">將 COM VARIANT 轉換為物件。</summary>
      <param name="pSrcNativeVariant" vsli:raw="A pointer to a COM VARIANT.">COM VARIANT 的指標。</param>
      <returns vsli:raw="An object that corresponds to the &lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; parameter.">對應於 <paramref name="pSrcNativeVariant" /> 參數的物件。</returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; is not a valid VARIANT type.">
        <paramref name="pSrcNativeVariant" /> 不是有效的 VARIANT 類型。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; has an unsupported type.">
        <paramref name="pSrcNativeVariant" /> 有不受支援的類型。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts a COM VARIANT to an object of a specified type.">[在 .NET Framework 4.5.1 及更新版本中支援]
將 COM VARIANT 轉換為所指定類型的物件。</summary>
      <param name="pSrcNativeVariant" vsli:raw="A pointer to a COM VARIANT.">COM VARIANT 的指標。</param>
      <typeparam name="T" vsli:raw="The type to which to convert the COM VARIANT.">要將 COM VARIANT 轉換成的類型。</typeparam>
      <returns vsli:raw="An object of the specified type that corresponds to the &lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; parameter.">對應於 <paramref name="pSrcNativeVariant" /> 參數、指定之類型的物件。</returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; is not a valid VARIANT type.">
        <paramref name="pSrcNativeVariant" /> 不是有效的 VARIANT 類型。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; has an unsupported type.">
        <paramref name="pSrcNativeVariant" /> 有不受支援的類型。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary vsli:raw="Converts an array of COM VARIANTs to an array of objects.">將 COM VARIANT 的陣列轉換成物件陣列。</summary>
      <param name="aSrcNativeVariant" vsli:raw="A pointer to the first element of an array of COM VARIANTs.">COM VARIANT 的陣列中第一個元素的指標。</param>
      <param name="cVars" vsli:raw="The count of COM VARIANTs in &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">
        <paramref name="aSrcNativeVariant" /> 中 COM VARIANT 的計數。</param>
      <returns vsli:raw="An object array that corresponds to &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">對應於 <paramref name="aSrcNativeVariant" /> 的物件陣列。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;cVars&quot; /&gt; is a negative number.">
        <paramref name="cVars" /> 為負數。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an array of COM VARIANTs to an array of a specified type.">[在 .NET Framework 4.5.1 及更新版本中支援]
將 COM VARIANT 的陣列轉換為所指定類型的陣列。</summary>
      <param name="aSrcNativeVariant" vsli:raw="A pointer to the first element of an array of COM VARIANTs.">COM VARIANT 的陣列中第一個元素的指標。</param>
      <param name="cVars" vsli:raw="The count of COM VARIANTs in &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">
        <paramref name="aSrcNativeVariant" /> 中 COM VARIANT 的計數。</param>
      <typeparam name="T" vsli:raw="The type of the array to return.">要傳回的陣列類型。</typeparam>
      <returns vsli:raw="An array of &lt;typeparamref name=&quot;T&quot; /&gt; objects that corresponds to &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">對應於 <typeparamref name="T" /> 的 <paramref name="aSrcNativeVariant" /> 物件陣列。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;cVars&quot; /&gt; is a negative number.">
        <paramref name="cVars" /> 為負數。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary vsli:raw="Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.">取得虛擬函式表 (v-table 或 VTBL) 中包含使用者定義之方法的第一個位置。</summary>
      <param name="t" vsli:raw="A type that represents an interface or a class.">代表介面或類別的類型。</param>
      <returns vsli:raw="The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on IUnknown, and 7 if the interface is based on IDispatch.">包含使用者定義之方法的第一個 VTBL 位置。 如果介面是以 IUnknown 為基礎，第一個插槽為 3，如果介面是以 IDispatch 為基礎則為 7。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is not visible from COM.">
        <paramref name="t" /> 對於 COM 不是可見的。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary vsli:raw="Returns a managed object of a specified type that represents a COM object.">傳回表示 COM 物件之指定類型的 Managed 物件。</summary>
      <param name="pUnk" vsli:raw="A pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface of the unmanaged object.">Unmanaged 物件的 <see langword="IUnknown" /> 介面指標。</param>
      <param name="t" vsli:raw="The type of the requested managed class.">要求之 Managed 類別的類型。</param>
      <returns vsli:raw="An instance of the class corresponding to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the requested unmanaged COM object.">對應於 <see cref="T:System.Type" /> 物件 (代表要求的 Unmanaged COM 物件) 的類別執行個體。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is not attributed with &lt;see cref=&quot;T:System.Runtime.InteropServices.ComImportAttribute&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;t&quot; /&gt; is a Windows Runtime type.">
        <paramref name="t" /> 未以 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 賦予屬性。
-或-
<paramref name="t" /> 是 Windows 執行階段 型別。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)">
      <summary vsli:raw="Returns the type associated with the specified class identifier (CLSID).">傳回與指定的類別識別項 (CLSID) 關聯的類型。</summary>
      <param name="clsid" vsli:raw="The CLSID of the type to return.">要傳回之類型的 CLSID。</param>
      <returns vsli:raw="&lt;see langword=&quot;System.__ComObject&quot; /&gt; regardless of whether the CLSID is valid.">
        <see langword="System.__ComObject" /> (不論 CLSID 是否有效)。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary vsli:raw="Retrieves the name of the type represented by an ITypeInfo object.">擷取以 ITypeInfo 物件表示的類型名稱。</summary>
      <param name="typeInfo" vsli:raw="An object that represents an &lt;see langword=&quot;ITypeInfo&quot; /&gt; pointer.">表示 <see langword="ITypeInfo" /> 指標的物件。</param>
      <returns vsli:raw="The name of the type that the &lt;paramref name=&quot;typeInfo&quot; /&gt; parameter points to.">
        <paramref name="typeInfo" /> 參數所指向的類型名稱。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;typeInfo&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeInfo" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary vsli:raw="Creates a unique Runtime Callable Wrapper (RCW) object for a given IUnknown interface.">針對所指定 IUnknown 介面建立唯一的執行階段可呼叫包裝函式 (RCW) 物件。</summary>
      <param name="unknown" vsli:raw="A managed pointer to an &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">
        <see langword="IUnknown" /> 介面的 Managed 指標。</param>
      <returns vsli:raw="A unique RCW for the specified &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">指定之 <see langword="IUnknown" /> 介面的唯一 RCW。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary vsli:raw="Indicates whether a specified object represents a COM object.">指示指定物件是否表示 COM 物件。</summary>
      <param name="o" vsli:raw="The object to check.">要檢查的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;o&quot; /&gt; parameter is a COM type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="o" /> 參數為 COM 類型，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)">
      <summary vsli:raw="Indicates whether a type is visible to COM clients.">指示類型對 COM 用戶端是否為可見的。</summary>
      <param name="t" vsli:raw="The type to check for COM visibility.">要檢查其 COM 可視性的類型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is visible to COM; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果型別對 COM 為可見的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary vsli:raw="Returns the field offset of the unmanaged form of the managed class.">傳回 Managed 類別之 Unmanaged 表單的欄位位移 (Offset)。</summary>
      <param name="t" vsli:raw="A value type or formatted reference type that specifies the managed class. You must apply the &lt;see cref=&quot;T:System.Runtime.InteropServices.StructLayoutAttribute&quot; /&gt; to the class.">指定 Managed 類別的實值類型或格式化參考類型。 您必須將 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 套用到類別。</param>
      <param name="fieldName" vsli:raw="The field within the &lt;paramref name=&quot;t&quot; /&gt; parameter.">
        <paramref name="t" /> 參數中的欄位。</param>
      <returns vsli:raw="The offset, in bytes, for the &lt;paramref name=&quot;fieldName&quot; /&gt; parameter within the specified class that is declared by platform invoke.">平台叫用所宣告的指定類別內 <paramref name="fieldName" /> 參數的位移 (以位元組為單位)。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.">無法匯出類別，因為結構或欄位是非公用的。 從 .NET Framework 2.0 版開始，這個欄位可能是私用的。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the field offset of the unmanaged form of a specified managed class.">[在 .NET Framework 4.5.1 及更新版本中支援]
傳回所指定 Managed 類別之 Unmanaged 表單的欄位位移 (Offset)。</summary>
      <param name="fieldName" vsli:raw="The name of the field in the &lt;paramref name=&quot;T&quot; /&gt; type.">
        <paramref name="T" /> 類型中的欄位名稱。</param>
      <typeparam name="T" vsli:raw="A managed value type or formatted reference type. You must apply the &lt;see cref=&quot;T:System.Runtime.InteropServices.StructLayoutAttribute&quot; /&gt; attribute to the class.">Managed 實值類型或格式化的參考類型。 您必須將 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 屬性套用到類別。</typeparam>
      <returns vsli:raw="The offset, in bytes, for the &lt;paramref name=&quot;fieldName&quot; /&gt; parameter within the specified class that is declared by platform invoke.">平台叫用所宣告的指定類別內 <paramref name="fieldName" /> 參數的位移 (以位元組為單位)。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary vsli:raw="Executes one-time method setup tasks without calling the method.">不需呼叫方法就執行一次方法設定工作。</summary>
      <param name="m" vsli:raw="The method to be checked.">要檢查的方法。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="m" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is not a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object.">
        <paramref name="m" /> 參數不是 <see cref="T:System.Reflection.MethodInfo" /> 物件。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary vsli:raw="Performs a pre-link check for all methods on a class.">對類別上的方法進行連結前檢查。</summary>
      <param name="c" vsli:raw="The class whose methods are to be checked.">要檢查其方法的類別。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;c&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="c" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary vsli:raw="Copies all characters up to the first null character from an unmanaged ANSI or UTF-8 string to a managed &lt;see cref=&quot;T:System.String&quot; /&gt;, and widens each character to UTF-16.">從 Unmanaged ANSI 字串將直到第一個 null 字元的所有字元複製到 Managed <see cref="T:System.String" />，並且將每個 ANSI 字元擴展為 Unicode。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Unmanaged 字串第一個字元的位址。</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string. If &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns a null string.">存有 Unmanaged ANSI 字串複本的 Managed 字串。 如果 <paramref name="ptr" /> 為 <see langword="null" />，方法就會傳回 null 字串。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt;, copies a specified number of characters from an unmanaged ANSI or UTF-8 string into it, and widens each character to UTF-16.">配置 Managed <see cref="T:System.String" />、從 Unmanaged ANSI 字串將指定數目的字元複製到其中，並將每一個 ANSI 字元擴展為 Unicode。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Unmanaged 字串第一個字元的位址。</param>
      <param name="len" vsli:raw="The byte count of the input string to copy.">要複製的輸入字串的位元組計數。</param>
      <returns vsli:raw="A managed string that holds a copy of the native string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">如果 <paramref name="ptr" /> 參數的值不是 <see langword="null" />，則為包含原生 ANSI 字串複本的 Managed 字串，否則這個方法會傳回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; is less than zero.">
        <paramref name="len" /> 小於零。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies all characters up to the first null character from a string stored in unmanaged memory into it.">配置 Managed <see cref="T:System.String" />，並從儲存在 Unmanaged 記憶體的字串中將直到第一個 Null 字元的所有字元複製到其中。</summary>
      <param name="ptr" vsli:raw="For Unicode platforms, the address of the first Unicode character.&#xA;&#xA; -or-&#xA;&#xA; For ANSI platforms, the address of the first ANSI character.">對於 Unicode 平台，為第一個 Unicode 字元的位址。
-或-
針對 ANSI 平台，為第一個 ANSI 字元的位址。</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">如果 <paramref name="ptr" /> 參數的值不是 <see langword="null" />，則為包含 Unmanaged 字串複本的 Managed 字串，否則這個方法會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies the specified number of characters from a string stored in unmanaged memory into it.">配置 Managed <see cref="T:System.String" />，並且從儲存在 Unmanaged 記憶體中的字串將指定數目的字元複製到其中。</summary>
      <param name="ptr" vsli:raw="For Unicode platforms, the address of the first Unicode character.&#xA;&#xA; -or-&#xA;&#xA; For ANSI platforms, the address of the first ANSI character.">對於 Unicode 平台，為第一個 Unicode 字元的位址。
-或-
針對 ANSI 平台，為第一個 ANSI 字元的位址。</param>
      <param name="len" vsli:raw="The number of characters to copy.">要複製的字元數目。</param>
      <returns vsli:raw="A managed string that holds a copy of the native string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">如果 <paramref name="ptr" /> 參數的值不是 <see langword="null" />，則為包含原生字串複本的 Managed 字串，否則這個方法會傳回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; is less than zero.">
        <paramref name="len" /> 小於零。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies a binary string (BSTR) stored in unmanaged memory into it.">配置 Managed <see cref="T:System.String" />，並將儲存在 Unmanaged 記憶體的二進位字串 (BSTR) 複製到其中。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Unmanaged 字串第一個字元的位址。</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string.">存有 Unmanaged 字串複本的 Managed 字串。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; equals &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">
        <paramref name="ptr" />等於 <see cref="F:System.IntPtr.Zero" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies all characters up to the first null character from an unmanaged Unicode string into it.">配置 Managed <see cref="T:System.String" />，並從 Unmanaged Unicode 字串將直到第一個 Null 字元的所有字元複製到其中。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Unmanaged 字串第一個字元的位址。</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">如果 <paramref name="ptr" /> 參數的值不是 <see langword="null" />，則為包含 Unmanaged 字串複本的 Managed 字串，否則這個方法會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies a specified number of characters from an unmanaged Unicode string into it.">配置 Managed <see cref="T:System.String" />，並從 Unmanaged Unicode 字串將指定數目的字元複製到其中。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Unmanaged 字串第一個字元的位址。</param>
      <param name="len" vsli:raw="The number of Unicode characters to copy.">要複製的 Unicode 字元數。</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">如果 <paramref name="ptr" /> 參數的值不是 <see langword="null" />，則為包含 Unmanaged 字串複本的 Managed 字串，否則這個方法會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)">
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string." />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)">
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string." />
      <param name="byteLen" vsli:raw="The number of bytes to copy." />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary vsli:raw="Marshals data from an unmanaged block of memory to a managed object.">從 Unmanaged 記憶體區塊封送處理資料到 Managed 物件。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Unmanaged 記憶體區塊的指標。</param>
      <param name="structure" vsli:raw="The object to which the data is to be copied. This must be an instance of a formatted class.">複製資料所到的物件。 這必須是格式化類別的執行個體。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Structure layout is not sequential or explicit.&#xA;&#xA; -or-&#xA;&#xA; Structure is a boxed value type.">結構配置不是循序或明確的。
-或-
結構為 Boxed 實值類型。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary vsli:raw="Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.">從 Unmanaged 記憶體區塊封送處理資料到新配置的指定類型的 Managed 物件。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Unmanaged 記憶體區塊的指標。</param>
      <param name="structureType" vsli:raw="The type of object to be created. This object must represent a formatted class or a structure.">要建立的物件類型。 這個物件必須表示格式化類別或結構。</param>
      <returns vsli:raw="A managed object containing the data pointed to by the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">包含 <paramref name="ptr" /> 參數所指向的資料的 Managed 物件。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;structureType&quot; /&gt; parameter layout is not sequential or explicit.&#xA;&#xA; -or-&#xA;&#xA; The &lt;paramref name=&quot;structureType&quot; /&gt; parameter is a generic type definition.">
        <paramref name="structureType" /> 參數配置不是循序或明確的。
-或-
<paramref name="structureType" /> 參數是泛型型別定義。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;structureType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="structureType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException" vsli:raw="The class specified by &lt;paramref name=&quot;structureType&quot; /&gt; does not have an accessible parameterless constructor.">
        <paramref name="structureType" /> 所指定類別沒有可存取的無參數建構函式。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.">[在 .NET Framework 4.5.1 及更新版本中支援]
從 Unmanaged 記憶體區塊封送處理資料到新配置的指定類型的 Managed 物件 (其類型是由泛型類型參數所指定)。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Unmanaged 記憶體區塊的指標。</param>
      <typeparam name="T" vsli:raw="The type of the object to which the data is to be copied. This must be a formatted class or a structure.">複製資料所到的物件類型。 這必須是格式化類別或結構。</typeparam>
      <returns vsli:raw="A managed object that contains the data that the &lt;paramref name=&quot;ptr&quot; /&gt; parameter points to.">包含 <paramref name="ptr" /> 參數所指向的資料的 Managed 物件。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The layout of &lt;typeparamref name=&quot;T&quot; /&gt; is not sequential or explicit.">
        <typeparamref name="T" /> 的配置不是循序或明確的。</exception>
      <exception cref="T:System.MissingMethodException" vsli:raw="The class specified by &lt;typeparamref name=&quot;T&quot; /&gt; does not have an accessible parameterless constructor.">
        <typeparamref name="T" /> 所指定類別沒有可存取的無參數建構函式。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from an unmanaged block of memory to a managed object of the specified type.">[在 .NET Framework 4.5.1 及更新版本中支援]
從 Unmanaged 記憶體區塊封送處理資料到指定類型的 Managed 物件。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Unmanaged 記憶體區塊的指標。</param>
      <param name="structure" vsli:raw="The object to which the data is to be copied.">複製資料所到的物件。</param>
      <typeparam name="T" vsli:raw="The type of &lt;paramref name=&quot;structure&quot; /&gt;. This must be a formatted class.">
        <paramref name="structure" /> 的類型。 這必須是格式化類別。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="Structure layout is not sequential or explicit.">結構配置不是循序或明確的。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary vsli:raw="Requests a pointer to a specified interface from a COM object.">從 COM 物件要求指定介面的指標。</summary>
      <param name="pUnk" vsli:raw="The interface to be queried.">要被查詢的介面。</param>
      <param name="iid" vsli:raw="The interface identifier (IID) of the requested interface.">所要求介面的介面識別項 (IID)。</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the returned interface.">這個方法傳回時，會包含到傳回介面的參考。</param>
      <returns vsli:raw="An HRESULT that indicates the success or failure of the call.">表示呼叫成功或失敗的 HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary vsli:raw="Reads a single byte from unmanaged memory.">從 Unmanaged 記憶體讀取單一位元組。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">從 Unmanaged 記憶體中讀取的位址。</param>
      <returns vsli:raw="The byte read from unmanaged memory.">從 Unmanaged 記憶體讀取的位元組。</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是可辨認的格式。
-或-
<paramref name="ptr" /> 為 <see langword="null" />。
-或-
<paramref name="ptr" /> 無效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a single byte at a given offset (or index) from unmanaged memory.">從 Unmanaged 記憶體讀取在指定位移 (或索引) 的單一位元組。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">從 Unmanaged 記憶體中讀取的基底位址 (Base Address)。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行讀取。</param>
      <returns vsli:raw="The byte read from unmanaged memory at the given offset.">從 Unmanaged 記憶體中指定位移處讀取的位元組。</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary vsli:raw="Reads a single byte at a given offset (or index) from unmanaged memory.">從 Unmanaged 記憶體讀取在指定位移 (或索引) 的單一位元組。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">來源物件之 Unmanaged 記憶體中的基底位址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行讀取。</param>
      <returns vsli:raw="The byte read from unmanaged memory at the given offset.">從 Unmanaged 記憶體中指定位移處讀取的位元組。</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件。 這個方法不會接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 參數。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary vsli:raw="Reads a 16-bit signed integer from unmanaged memory.">從 Unmanaged 記憶體讀取 16 位元帶正負號的整數。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">從 Unmanaged 記憶體中讀取的位址。</param>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory.">從 Unmanaged 記憶體讀取的 16 位元帶正負號的整數。</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是可辨認的格式。
-或-
<paramref name="ptr" /> 為 <see langword="null" />。
-或-
<paramref name="ptr" /> 無效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 16-bit signed integer at a given offset from unmanaged memory.">從 Unmanaged 記憶體中指定位移處讀取 16 位元帶正負號的整數。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">從 Unmanaged 記憶體中讀取的基底位址 (Base Address)。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行讀取。</param>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory at the given offset.">從 Unmanaged 記憶體中指定位移處讀取的 16 位元帶正負號的整數。</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 16-bit signed integer at a given offset from unmanaged memory.">從 Unmanaged 記憶體中指定位移處讀取 16 位元帶正負號的整數。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">來源物件之 Unmanaged 記憶體中的基底位址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行讀取。</param>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory at the given offset.">從 Unmanaged 記憶體中指定位移處讀取的 16 位元帶正負號的整數。</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件。 這個方法不會接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 參數。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary vsli:raw="Reads a 32-bit signed integer from unmanaged memory.">從 Unmanaged 記憶體讀取 32 位元帶正負號的整數。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">從 Unmanaged 記憶體中讀取的位址。</param>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory.">從 Unmanaged 記憶體讀取的 32 位元帶正負號的整數。</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是可辨認的格式。
-或-
<paramref name="ptr" /> 為 <see langword="null" />。
-或-
<paramref name="ptr" /> 無效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 32-bit signed integer at a given offset from unmanaged memory.">從 Unmanaged 記憶體中指定位移處讀取 32 位元帶正負號的整數。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">從 Unmanaged 記憶體中讀取的基底位址 (Base Address)。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行讀取。</param>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory.">從 Unmanaged 記憶體讀取的 32 位元帶正負號的整數。</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 32-bit signed integer at a given offset from unmanaged memory.">從 Unmanaged 記憶體中指定位移處讀取 32 位元帶正負號的整數。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">來源物件之 Unmanaged 記憶體中的基底位址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行讀取。</param>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory at the given offset.">從 Unmanaged 記憶體中指定位移處讀取的 32 位元帶正負號的整數。</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件。 這個方法不會接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 參數。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary vsli:raw="Reads a 64-bit signed integer from unmanaged memory.">從 Unmanaged 記憶體讀取 64 位元帶正負號的整數。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">從 Unmanaged 記憶體中讀取的位址。</param>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory.">從 Unmanaged 記憶體讀取的 64 位元帶正負號的整數。</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是可辨認的格式。
-或-
<paramref name="ptr" /> 為 <see langword="null" />。
-或-
<paramref name="ptr" /> 無效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 64-bit signed integer at a given offset from unmanaged memory.">從 Unmanaged 記憶體中指定位移處讀取 64 位元帶正負號的整數。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">從 Unmanaged 記憶體中讀取的基底位址 (Base Address)。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行讀取。</param>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory at the given offset.">從 Unmanaged 記憶體中指定位移處讀取的 64 位元帶正負號的整數。</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 64-bit signed integer at a given offset from unmanaged memory.">從 Unmanaged 記憶體中指定位移處讀取 64 位元帶正負號的整數。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">來源物件之 Unmanaged 記憶體中的基底位址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行讀取。</param>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory at the given offset.">從 Unmanaged 記憶體中指定位移處讀取的 64 位元帶正負號的整數。</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件。 這個方法不會接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 參數。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary vsli:raw="Reads a processor native-sized integer from unmanaged memory.">從 Unmanaged 記憶體讀取處理器原生大小的整數。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">從 Unmanaged 記憶體中讀取的位址。</param>
      <returns vsli:raw="The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.">從 Unmanaged 記憶體讀取的整數。 在 32 位元電腦上會傳回 32 位元整數，而在 64 位元電腦上則會傳回 64 位元整數。</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是可辨認的格式。
-或-
<paramref name="ptr" /> 為 <see langword="null" />。
-或-
<paramref name="ptr" /> 無效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a processor native sized integer at a given offset from unmanaged memory.">從 Unmanaged 記憶體中指定位移處讀取處理器原生大小的整數。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">從 Unmanaged 記憶體中讀取的基底位址 (Base Address)。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行讀取。</param>
      <returns vsli:raw="The integer read from unmanaged memory at the given offset.">從 Unmanaged 記憶體中指定位移處讀取的整數。</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary vsli:raw="Reads a processor native sized integer from unmanaged memory.">從 Unmanaged 記憶體讀取處理器原生大小的整數。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">來源物件之 Unmanaged 記憶體中的基底位址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行讀取。</param>
      <returns vsli:raw="The integer read from unmanaged memory at the given offset.">從 Unmanaged 記憶體中指定位移處讀取的整數。</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件。 這個方法不會接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 參數。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary vsli:raw="Resizes a block of memory previously allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)&quot; /&gt;.">調整先前用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> 所配置的記憶體區塊的大小。</summary>
      <param name="pv" vsli:raw="A pointer to memory allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)&quot; /&gt;.">用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> 所配置之記憶體的指標。</param>
      <param name="cb" vsli:raw="The new size of the allocated block.">配置的區塊的新大小。</param>
      <returns vsli:raw="An integer representing the address of the reallocated block of memory. This memory must be released with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)&quot; /&gt;.">表示重新配置的記憶體區塊位址的整數。 這個記憶體必須使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> 來釋放。</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">記憶體不足，無法滿足要求。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Resizes a block of memory previously allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">調整先前用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 所配置的記憶體區塊的大小。</summary>
      <param name="pv" vsli:raw="A pointer to memory allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 所配置之記憶體的指標。</param>
      <param name="cb" vsli:raw="The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type &lt;see cref=&quot;T:System.IntPtr&quot; /&gt;. If you pass a pointer, it is treated as a size.">配置的區塊的新大小。 這不是指標；它是您所要求、轉換成 <see cref="T:System.IntPtr" /> 類型的位元組計數。 如果您傳遞指標，它會被視為大小。</param>
      <returns vsli:raw="A pointer to the reallocated memory. This memory must be released using &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt;.">重新配置的記憶體的指標。 這個記憶體必須使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 來釋放。</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">記憶體不足，無法滿足要求。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary vsli:raw="Decrements the reference count on the specified interface.">遞減指定介面上的參考次數。</summary>
      <param name="pUnk" vsli:raw="The interface to release.">要釋放的介面。</param>
      <returns vsli:raw="The new value of the reference count on the interface specified by the &lt;paramref name=&quot;pUnk&quot; /&gt; parameter.">介面上由 <paramref name="pUnk" /> 參數指定的參考次數的新值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary vsli:raw="Decrements the reference count of the Runtime Callable Wrapper (RCW) associated with the specified COM object.">遞減與指定 COM 物件相關聯的執行階段可呼叫包裝函式 (RCW) 參考計數。</summary>
      <param name="o" vsli:raw="The COM object to release.">要釋放的 COM 物件。</param>
      <returns vsli:raw="The new value of the reference count of the RCW associated with &lt;paramref name=&quot;o&quot; /&gt;. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.">與 <paramref name="o" /> 關聯的 RCW 之參考計數的新值。 這個值通常為零，因為不論呼叫的 Managed 用戶端數目，RCW 只保留一個包裝的 COM 物件參考。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is not a valid COM object.">
        <paramref name="o" /> 不是有效的 COM 物件。</exception>
      <exception cref="T:System.NullReferenceException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)">
      <summary vsli:raw="Allocates an unmanaged binary string (BSTR) and copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into it.">配置 Unmanaged 二進位字串 (BSTR)，並將 Managed <see cref="T:System.Security.SecureString" /> 物件的內容複製到其中。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要複製的 Managed 物件。</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Unmanaged 記憶體中複製 <paramref name="s" /> 參數的目的位址；如果提供 Null 物件，則為 0。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">目前的電腦未執行 Windows 2000 Service Pack 3 或更新版本。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">可用的記憶體不足。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">將 Managed <see cref="T:System.Security.SecureString" /> 物件的內容複製到從 Unmanaged COM 工作配置器配置的記憶體區塊。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要複製的 Managed 物件。</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Unmanaged 記憶體中複製 <paramref name="s" /> 參數的目的位址；如果提供 Null 物件，則為 0。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">目前的電腦未執行 Windows 2000 Service Pack 3 或更新版本。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">可用的記憶體不足。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">將 Managed <see cref="T:System.Security.SecureString" /> 物件的內容複製到從 Unmanaged COM 工作配置器配置的記憶體區塊。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要複製的 Managed 物件。</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Unmanaged 記憶體中複製 <paramref name="s" /> 參數的目的位址；如果提供 Null 物件，則為 0。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">目前的電腦未執行 Windows 2000 Service Pack 3 或更新版本。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">可用的記憶體不足。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">將 Managed <see cref="T:System.Security.SecureString" /> 的內容複製到 Unmanaged 記憶體中，並在它複製時轉換成 ANSI 格式。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要複製的 Managed 物件。</param>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied, or 0 if a null object was supplied.">Unmanaged 記憶體中複製 <paramref name="s" /> 參數的目標位址；如果提供 Null 物件，則為 0。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">目前的電腦未執行 Windows 2000 Service Pack 3 或更新版本。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">可用的記憶體不足。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into unmanaged memory.">將 Managed <see cref="T:System.Security.SecureString" /> 物件的內容複製到 Unmanaged 記憶體中。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要複製的 Managed 物件。</param>
      <returns vsli:raw="The address, in unmanaged memory, where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is a &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object whose length is 0.">Unmanaged 記憶體中複製 <paramref name="s" /> 的目標位址；如果 <paramref name="s" /> 是長度為 0 的 <see cref="T:System.Security.SecureString" /> 物件，則為 0。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">目前的電腦未執行 Windows 2000 Service Pack 3 或更新版本。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">可用的記憶體不足。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary vsli:raw="Sets data referenced by the specified key in the specified COM object.">設定指定COM 物件中指定索引所參考的資料。</summary>
      <param name="obj" vsli:raw="The COM object in which to store the data.">要儲存資料的 COM 物件。</param>
      <param name="key" vsli:raw="The key in the internal hash table of the COM object in which to store the data.">要儲存資料的 COM 物件內部雜湊表中的金鑰。</param>
      <param name="data" vsli:raw="The data to set.">要設定的資料。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data was set successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功設定資料，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="obj" /> 為 <see langword="null" />。
-或-
<paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a COM object.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;obj&quot; /&gt; is a Windows Runtime object.">
        <paramref name="obj" /> 不是 COM 物件。
-或-
<paramref name="obj" /> 是 Windows 執行階段 物件。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary vsli:raw="Returns the unmanaged size of an object in bytes.">傳回物件的 Unmanaged 大小 (以位元組為單位)。</summary>
      <param name="structure" vsli:raw="The object whose size is to be returned.">其大小要被傳回的物件。</param>
      <returns vsli:raw="The size of the specified object in unmanaged code.">Unmanaged 程式碼中指定之物件的大小。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;structure&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="structure" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary vsli:raw="Returns the size of an unmanaged type in bytes.">傳回 Unmanaged 類型的大小 (以位元組為單位)。</summary>
      <param name="t" vsli:raw="The type whose size is to be returned.">要傳回其大小的類型。</param>
      <returns vsli:raw="The size of the specified type in unmanaged code.">Unmanaged 程式碼中指定之類型的大小。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is a generic type definition.">
        <paramref name="t" /> 參數是泛型型別定義。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the size of an unmanaged type in bytes.">[在 .NET Framework 4.5.1 及更新版本中支援]
傳回 Unmanaged 類型的大小 (以位元組為單位)。</summary>
      <typeparam name="T" vsli:raw="The type whose size is to be returned.">要傳回其大小的類型。</typeparam>
      <returns vsli:raw="The size, in bytes, of the type that is specified by the &lt;typeparamref name=&quot;T&quot; /&gt; generic type parameter.">
        <typeparamref name="T" /> 泛型類型參數所指定之類型的大小，以位元組為單位。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the unmanaged size of an object of a specified type in bytes.">[在 .NET Framework 4.5.1 及更新版本中支援]
傳回指定類型之物件的 Unmanaged 大小，以位元組為單位。</summary>
      <param name="structure" vsli:raw="The object whose size is to be returned.">其大小要被傳回的物件。</param>
      <typeparam name="T" vsli:raw="The type of the &lt;paramref name=&quot;structure&quot; /&gt; parameter.">
        <paramref name="structure" /> 參數的類型。</typeparam>
      <returns vsli:raw="The size, in bytes, of the specified object in unmanaged code.">Unmanaged 程式碼中指定之物件的大小，以位元組為單位。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;structure&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="structure" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary vsli:raw="Allocates a BSTR and copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into it.">配置 BSTR，並將 Managed <see cref="T:System.String" /> 的內容複製到其中。</summary>
      <param name="s" vsli:raw="The managed string to be copied.">要被複製的 Managed 字串。</param>
      <returns vsli:raw="An unmanaged pointer to the &lt;see langword=&quot;BSTR&quot; /&gt;, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is null.">
        <see langword="BSTR" /> 的 Unmanaged 指標；如果 <paramref name="s" /> 為 null，則為 0。</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">可用的記憶體不足。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The length for &lt;paramref name=&quot;s&quot; /&gt; is out of range.">
        <paramref name="s" /> 的長度超出範圍。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">複製 Managed <see cref="T:System.String" /> 的內容到從 Unmanaged COM 工作配置器配置的記憶體區塊。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">要複製的 Managed 字串。</param>
      <returns vsli:raw="An integer representing a pointer to the block of memory allocated for the string, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">整數，表示配置給字串的記憶體區塊指標，如果 <paramref name="s" /> 為 <see langword="null" /> 則為 0。</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">可用的記憶體不足。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> 參數超過作業系統所允許的最大長度。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">複製 Managed <see cref="T:System.String" /> 的內容到從 Unmanaged COM 工作配置器配置的記憶體區塊。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">要複製的 Managed 字串。</param>
      <returns vsli:raw="The allocated memory block, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">配置的記憶體區塊，如果 <paramref name="s" /> 為 <see langword="null" /> 則為 0。</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">可用的記憶體不足。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The length for &lt;paramref name=&quot;s&quot; /&gt; is out of range.">
        <paramref name="s" /> 的長度超出範圍。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">複製 Managed <see cref="T:System.String" /> 的內容到從 Unmanaged COM 工作配置器配置的記憶體區塊。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">要複製的 Managed 字串。</param>
      <returns vsli:raw="An integer representing a pointer to the block of memory allocated for the string, or 0 if s is &lt;see langword=&quot;null&quot; /&gt;.">整數，表示配置給字串的記憶體區塊指標，如果 s 為 <see langword="null" /> 則為 0。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> 參數超過作業系統所允許的最大長度。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">可用的記憶體不足。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)">
      <param name="s" vsli:raw="A managed string to be copied." />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">將 Managed <see cref="T:System.String" /> 的內容複製到 Unmanaged 記憶體中，並在它複製時轉換成 ANSI 格式。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">要複製的 Managed 字串。</param>
      <returns vsli:raw="The address, in unmanaged memory, to where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Unmanaged 記憶體中複製 <paramref name="s" /> 的目的位址，如果 <paramref name="s" /> 為 <see langword="null" /> 則為 0。</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">可用的記憶體不足。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> 參數超過作業系統所允許的最大長度。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory, converting into ANSI format if required.">複製 Managed <see cref="T:System.String" /> 的內容到 Unmanaged 記憶體中，如有需要則轉換成 ANSI 格式。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">要複製的 Managed 字串。</param>
      <returns vsli:raw="The address, in unmanaged memory, to where the string was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Unmanaged 記憶體中複製字串的目的位址，如果 <paramref name="s" /> 為 <see langword="null" /> 則為 0。</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">可用的記憶體不足。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory.">將 Managed <see cref="T:System.String" /> 的內容複製到 Unmanaged 記憶體。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">要複製的 Managed 字串。</param>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Unmanaged 記憶體中複製 <paramref name="s" /> 的目的位址，如果 <paramref name="s" /> 為 <see langword="null" /> 則為 0。</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The method could not allocate enough native heap memory.">方法無法配置足夠的原生堆積記憶體。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> 參數超過作業系統所允許的最大長度。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary vsli:raw="Marshals data from a managed object to an unmanaged block of memory.">從 Managed 物件封送處理資料到 Unmanaged 記憶體區塊。</summary>
      <param name="structure" vsli:raw="A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.">存有要封送處理之資料的 Managed 物件。 這個物件必須是格式化類別的結構或執行個體。</param>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory, which must be allocated before this method is called.">Unmanaged 記憶體區塊的指標，這記憶體必須在呼叫這個方法之前被配置。</param>
      <param name="fDeleteOld" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to call the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)&quot; /&gt; method on the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before this method copies the data. The block must contain valid data. Note that passing &lt;see langword=&quot;false&quot; /&gt; when the memory block already contains data can lead to a memory leak.">
        <see langword="true" /> 表示在此方法複製資料之前，在 <paramref name="ptr" /> 參數上呼叫 <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> 方法。 區塊必須包含有效的資料。 請注意，當記憶體區塊已經包含資料時傳遞 <see langword="false" /> 會造成記憶體流失。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structure&quot; /&gt; is a reference type that is not a formatted class.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;structure&quot; /&gt; is an instance of a generic type (in the .NET Framework 4.5 and earlier versions only).">
        <paramref name="structure" /> 為非格式化類別的參考型別。
-或-
<paramref name="structure" /> 是泛型型別的執行個體 (僅限 .NET Framework 4.5 和較舊版本)。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from a managed object of a specified type to an unmanaged block of memory.">[在 .NET Framework 4.5.1 及更新版本中支援]
從指定類型的 Managed 物件封送處理資料到 Unmanaged 記憶體區塊。</summary>
      <param name="structure" vsli:raw="A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.">存有要封送處理之資料的 Managed 物件。 物件必須是格式化類別的結構或執行個體。</param>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory, which must be allocated before this method is called.">Unmanaged 記憶體區塊的指標，這記憶體必須在呼叫這個方法之前被配置。</param>
      <param name="fDeleteOld" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to call the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)&quot; /&gt; method on the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before this method copies the data. The block must contain valid data. Note that passing &lt;see langword=&quot;false&quot; /&gt; when the memory block already contains data can lead to a memory leak.">
        <see langword="true" /> 表示在此方法複製資料之前，在 <paramref name="ptr" /> 參數上呼叫 <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" /> 方法。 區塊必須包含有效的資料。 請注意，當記憶體區塊已經包含資料時傳遞 <see langword="false" /> 會造成記憶體流失。</param>
      <typeparam name="T" vsli:raw="The type of the managed object.">Managed 物件的類型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structure&quot; /&gt; is a reference type that is not a formatted class.">
        <paramref name="structure" /> 為非格式化類別的參考型別。</exception>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary vsli:raw="Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.">表示系統上的預設字元大小；Unicode 系統的預設值為 2，ANSI 系統為 1。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary vsli:raw="Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.">表示用於目前作業系統雙位元組字元集 (DBCS) 大小的最大值，以位元組為單位。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary vsli:raw="Throws an exception with a specific failure HRESULT value.">擲回具有特定錯誤 HRESULT 值的例外狀況。</summary>
      <param name="errorCode" vsli:raw="The HRESULT corresponding to the desired exception.">對應於希望的例外狀況的 HRESULT。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary vsli:raw="Throws an exception with a specific failure HRESULT, based on the specified IErrorInfo interface.">根據指定的 IErrorInfo 介面，擲回具有特定失敗 HRESULT 的例外狀況。</summary>
      <param name="errorCode" vsli:raw="The HRESULT corresponding to the desired exception.">對應於希望的例外狀況的 HRESULT。</param>
      <param name="errorInfo" vsli:raw="A pointer to the IErrorInfo interface that provides more information about the error. You can specify &lt;c&gt;IntPtr(0)&lt;/c&gt; to use the current IErrorInfo interface, or &lt;c&gt;IntPtr(-1)&lt;/c&gt; to ignore the current IErrorInfo interface and construct the exception just from the error code.">提供錯誤詳細資訊之 IErrorInfo 介面的指標。 您可以指定 <c>IntPtr(0)</c> 以使用目前的 IErrorInfo 介面，或指定 <c>IntPtr(-1)</c> 忽略目前的 IErrorInfo 介面，並且只從錯誤碼建構例外狀況。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary vsli:raw="Gets the address of the element at the specified index inside the specified array.">取得指定陣列內指定索引處的元素的位址。</summary>
      <param name="arr" vsli:raw="The array that contains the desired element.">包含所需元素的陣列。</param>
      <param name="index" vsli:raw="The index in the &lt;paramref name=&quot;arr&quot; /&gt; parameter of the desired element.">希望的元素之 <paramref name="arr" /> 參數中的索引。</param>
      <returns vsli:raw="The address of &lt;paramref name=&quot;index&quot; /&gt; inside &lt;paramref name=&quot;arr&quot; /&gt;.">
        <paramref name="index" /> 內部的 <paramref name="arr" /> 位址。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Gets the address of the element at the specified index in an array of a specified type.">[在 .NET Framework 4.5.1 及更新版本中支援]
在指定類型的陣列中取得位於指定索引處的元素的位址。</summary>
      <param name="arr" vsli:raw="The array that contains the desired element.">包含所需元素的陣列。</param>
      <param name="index" vsli:raw="The index of the desired element in the &lt;paramref name=&quot;arr&quot; /&gt; array.">
        <paramref name="arr" /> 陣列中所需項目的索引。</param>
      <typeparam name="T" vsli:raw="The type of the array.">陣列的類型。</typeparam>
      <returns vsli:raw="The address of &lt;paramref name=&quot;index&quot; /&gt; in &lt;paramref name=&quot;arr&quot; /&gt;.">
        <paramref name="index" /> 內部的 <paramref name="arr" /> 位址。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory.">將單一位元組值寫入 Unmanaged 記憶體。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Unmanaged 記憶體中要寫入的位址。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是可辨認的格式。
-或-
<paramref name="ptr" /> 為 <see langword="null" />。
-或-
<paramref name="ptr" /> 無效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory at a specified offset.">將單一位元組值寫入 Unmanaged 記憶體中的指定位移。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">Unmanaged 記憶體中要寫入的基底位址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行寫入。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory at a specified offset.">將單一位元組值寫入 Unmanaged 記憶體中的指定位移。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">目標物件之 Unmanaged 記憶體中的基底位址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行寫入。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件。 這個方法不會接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 參數。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary vsli:raw="Writes a character as a 16-bit integer value to unmanaged memory.">將字元當做 16 位元整數值寫入 Unmanaged 記憶體中。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Unmanaged 記憶體中要寫入的位址。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是可辨認的格式。
-或-
<paramref name="ptr" /> 為 <see langword="null" />。
-或-
<paramref name="ptr" /> 無效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary vsli:raw="Writes a 16-bit integer value to unmanaged memory.">將 16 位元整數值寫入 Unmanaged 記憶體中。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Unmanaged 記憶體中要寫入的位址。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是可辨認的格式。
-或-
<paramref name="ptr" /> 為 <see langword="null" />。
-或-
<paramref name="ptr" /> 無效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">在指定的位移，將 16 位元帶正負號的整數值寫入 Unmanaged 記憶體。</summary>
      <param name="ptr" vsli:raw="The base address in the native heap to write to.">原生堆積中要寫入的基底位址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行寫入。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary vsli:raw="Writes a 16-bit signed integer value into unmanaged memory at a specified offset.">將 16 位元帶正負號的整數值寫入 Unmanaged 記憶體中的指定位移。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">Unmanaged 記憶體中要寫入的基底位址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行寫入。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">在指定的位移，將 16 位元帶正負號的整數值寫入 Unmanaged 記憶體。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">目標物件之 Unmanaged 記憶體中的基底位址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行寫入。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件。 這個方法不會接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 參數。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">在指定的位移，將 16 位元帶正負號的整數值寫入 Unmanaged 記憶體。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">目標物件之 Unmanaged 記憶體中的基底位址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行寫入。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件。 這個方法不會接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 參數。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value to unmanaged memory.">將 32 位元帶正負號的整數值寫入 Unmanaged 記憶體中。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Unmanaged 記憶體中要寫入的位址。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是可辨認的格式。
-或-
<paramref name="ptr" /> 為 <see langword="null" />。
-或-
<paramref name="ptr" /> 無效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value into unmanaged memory at a specified offset.">將 32 位元帶正負號的整數值寫入 Unmanaged 記憶體中的指定位移。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">Unmanaged 記憶體中要寫入的基底位址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行寫入。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value to unmanaged memory at a specified offset.">在指定的位移，將 32 位元帶正負號的整數值寫入 Unmanaged 記憶體。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">目標物件之 Unmanaged 記憶體中的基底位址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行寫入。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件。 這個方法不會接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 參數。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory at a specified offset.">在指定的位移，將 64 位元帶正負號的整數值寫入 Unmanaged 記憶體。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write.">要寫入之 Unmanaged 記憶體中的基底位址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行寫入。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory.">將 64 位元帶正負號的整數值寫入 Unmanaged 記憶體中。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Unmanaged 記憶體中要寫入的位址。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是可辨認的格式。
-或-
<paramref name="ptr" /> 為 <see langword="null" />。
-或-
<paramref name="ptr" /> 無效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory at a specified offset.">在指定的位移，將 64 位元帶正負號的整數值寫入 Unmanaged 記憶體。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">目標物件之 Unmanaged 記憶體中的基底位址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行寫入。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件。 這個方法不會接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 參數。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a processor native-sized integer value to unmanaged memory at a specified offset.">將處理器原生大小的整數值寫入 Unmanaged 記憶體中的指定位移。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">Unmanaged 記憶體中要寫入的基底位址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行寫入。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Writes a processor native sized integer value into unmanaged memory.">將處理器原來大小的整數值寫入 Unmanaged 記憶體。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Unmanaged 記憶體中要寫入的位址。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是可辨認的格式。
-或-
<paramref name="ptr" /> 為 <see langword="null" />。
-或-
<paramref name="ptr" /> 無效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a processor native sized integer value to unmanaged memory.">將處理器原來大小的整數值寫入 Unmanaged 記憶體。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">目標物件之 Unmanaged 記憶體中的基底位址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">額外的位元組位移，會先加入至參數 <paramref name="ptr" />，然後再進行寫入。</param>
      <param name="val" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基底位址 (<paramref name="ptr" />) 加上位移位元組 (<paramref name="ofs" />) 會產生 Null 或無效的位址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 物件。 這個方法不會接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 參數。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary vsli:raw="Frees a BSTR pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)&quot; /&gt; method.">釋放之前使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" /> 方法配置的 BSTR 指標。</summary>
      <param name="s" vsli:raw="The address of the &lt;see langword=&quot;BSTR&quot; /&gt; to free.">要釋放的 <see langword="BSTR" /> 位址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)&quot; /&gt; method.">釋放之前使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" /> 方法配置的 Unmanaged 字串指標。</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">要釋放的 Unmanaged 字串的位址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)&quot; /&gt; method.">釋放之前使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" /> 方法配置的 Unmanaged 字串指標。</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">要釋放的 Unmanaged 字串的位址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)">
      <param name="s" vsli:raw="The address of the unmanaged string to free." />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)&quot; /&gt; method.">釋放之前使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" /> 方法配置的 Unmanaged 字串指標。</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">要釋放的 Unmanaged 字串的位址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)&quot; /&gt; method.">釋放之前使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" /> 方法配置的 Unmanaged 字串指標。</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">要釋放的 Unmanaged 字串的位址。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary vsli:raw="Indicates how to marshal the data between managed and unmanaged code.">表示如何在 Managed 和 Unmanaged 程式碼之間封送處理資料。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value.">使用指定的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 值，初始化 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 類別的新執行個體。</summary>
      <param name="unmanagedType" vsli:raw="The value the data is to be marshaled as.">要將資料封送處理成的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; enumeration member.">使用指定的 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 列舉型別 (Enumeration) 成員，初始化 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 類別的新執行個體。</summary>
      <param name="unmanagedType" vsli:raw="The value the data is to be marshaled as.">要將資料封送處理成的值。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary vsli:raw="Specifies the element type of the unmanaged &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.LPArray&quot; /&gt; or &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.ByValArray&quot; /&gt;.">指定 Unmanaged <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> 或 <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" /> 的元素型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary vsli:raw="Specifies the parameter index of the unmanaged &lt;see langword=&quot;iid_is&quot; /&gt; attribute used by COM.">指定 COM 所使用之 Unmanaged <see langword="iid_is" /> 屬性的參數索引。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary vsli:raw="Provides additional information to a custom marshaler.">提供其他資訊給自訂封送處理器。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary vsli:raw="Specifies the fully qualified name of a custom marshaler.">指定自訂封送處理器的完整名稱。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary vsli:raw="Implements &lt;see cref=&quot;F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&quot; /&gt; as a type.">實作 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> 為型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary vsli:raw="Indicates the element type of the &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">指示 <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> 的元素型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary vsli:raw="Indicates the user-defined element type of the &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">指示 <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> 的使用者定義的元素型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary vsli:raw="Indicates the number of elements in the fixed-length array or the number of characters (not bytes) in a string to import.">指示固定長度陣列中的元素數目或要匯出之字串中的字元數目 (非位元組)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary vsli:raw="Indicates the zero-based parameter that contains the count of array elements, similar to &lt;see langword=&quot;size_is&quot; /&gt; in COM.">指示哪一個以零起始的參數含有陣列元素的計數，類似 COM 中的 <see langword="size_is" />。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value the data is to be marshaled as.">取得資料要封送處理成的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value the data is to be marshaled as.">資料要封送處理成的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary vsli:raw="The exception that is thrown by the marshaler when it encounters a &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; it does not support.">例外狀況，由封送處理器擲回於遭遇不支援的 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 時。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class with default properties.">使用預設屬性，初始化 <see langword="MarshalDirectiveException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class from serialization data.">從序列化 (Serialization) 資料，初始化 <see langword="MarshalDirectiveException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">存放序列物件資料的物件。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 上所宣告的預設值是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class with a specified error message.">使用指定的錯誤訊息，初始化 <see langword="MarshalDirectiveException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The error message that specifies the reason for the exception.">指定例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalDirectiveException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.NativeLibrary">
      <summary vsli:raw="Provides APIs for managing native libraries.">提供管理原生程式庫的 API。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)">
      <summary vsli:raw="Frees a loaded library with the specified OS handle, or takes no action if the input handle is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">如果輸入控點是 <see cref="F:System.IntPtr.Zero" />，則使用所指定作業系統控點來釋放已載入的程式庫，或不執行任何動作。</summary>
      <param name="handle" vsli:raw="The native library OS handle to be freed.">要釋放的原生程式庫作業系統控點。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)">
      <summary vsli:raw="Gets the address of an exported symbol.">取得匯出符號的位址。</summary>
      <param name="handle" vsli:raw="The native library OS handle.">原生程式庫作業系統控點。</param>
      <param name="name" vsli:raw="The name of the exported symbol.">匯出符號的名稱。</param>
      <returns vsli:raw="The address of the symbol.">符號的位址。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handle&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handle" /> 或 <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.EntryPointNotFoundException" vsli:raw="The symbol is not found.">找不到符號。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String)">
      <summary vsli:raw="Provides a simple API for loading a native library that wraps the OS loader and uses default flags.">提供簡單的 API，以載入包裝作業系統載入器並使用預設旗標的原生程式庫。</summary>
      <param name="libraryPath" vsli:raw="The name of the native library to be loaded.">要載入的原生程式庫名稱。</param>
      <returns vsli:raw="The OS handle for the loaded native library.">已載入的原生程式庫作業系統控點。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.DllNotFoundException" vsli:raw="The library can't be found.">找不到程式庫。</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The library is not valid.">程式庫無效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})">
      <summary vsli:raw="Provides a high-level API for loading a native library.">提供高階 API 以載入原生程式庫。</summary>
      <param name="libraryName" vsli:raw="The name of the native library to be loaded.">要載入的原生程式庫名稱。</param>
      <param name="assembly" vsli:raw="The assembly loading the native library.">載入原生程式庫的組件。</param>
      <param name="searchPath" vsli:raw="The search path.">搜尋路徑。</param>
      <returns vsli:raw="The OS handle for the loaded library.">已載入的程式庫作業系統控點。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryName&quot; /&gt; or &lt;paramref name=&quot;assembly&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryName" /> 或 <paramref name="assembly" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; is not a &lt;see langword=&quot;RuntimeAssembly&quot; /&gt;.">
        <paramref name="assembly" /> 不是 <see langword="RuntimeAssembly" />。</exception>
      <exception cref="T:System.DllNotFoundException" vsli:raw="The library can't be found.">找不到程式庫。</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The library is not valid.">程式庫無效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver(System.Reflection.Assembly,System.Runtime.InteropServices.DllImportResolver)">
      <summary vsli:raw="Sets a callback for resolving native library imports from an assembly.">設定回呼，以解析從組件匯入的原生程式庫。</summary>
      <param name="assembly" vsli:raw="The assembly for which the resolver is registered.">解析程式註冊的組件。</param>
      <param name="resolver" vsli:raw="The resolver callback to register.">要註冊的解析程式回呼。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; or &lt;paramref name=&quot;resolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="assembly" /> 或 paramref name="resolver" /&gt; 是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A resolver is already set for this assembly.">此組件已設定解析程式。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)">
      <summary vsli:raw="Gets the address of an exported symbol and returns a value that indicates whether the method call succeeded.">取得匯出的符號位址，並傳回指出方法呼叫是否成功的值。</summary>
      <param name="handle" vsli:raw="The native library OS handle.">原生程式庫作業系統控點。</param>
      <param name="name" vsli:raw="The name of the exported symbol.">匯出符號的名稱。</param>
      <param name="address" vsli:raw="When the method returns, contains the symbol address, if it exists.">方法傳回時，包含符號位址 (如有)。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the address of the exported symbol was found successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果方法成功傳回，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handle&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handle" /> 或 <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.IntPtr@)">
      <summary vsli:raw="Provides a simple API for loading a native library and returns a value that indicates whether the operation succeeded.">提供簡單的 API 以載入原生程式庫，並傳回指出作業是否成功的值。</summary>
      <param name="libraryPath" vsli:raw="The name of the native library to be loaded.">要載入的原生程式庫名稱。</param>
      <param name="handle" vsli:raw="When the method returns, the OS handle of the loaded native library.">方法傳回時，為已載入的原生程式庫作業系統控點。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the native library was loaded successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功載入原生程式庫，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.IntPtr@)">
      <summary vsli:raw="Provides a high-level API that loads a native library and returns a value that indicates whether the operation succeeded.">提供高階的 API，其載入原生程式庫並傳回指出作業是否成功的值。</summary>
      <param name="libraryName" vsli:raw="The name of the native library to be loaded.">要載入的原生程式庫名稱。</param>
      <param name="assembly" vsli:raw="The assembly loading the native library.">載入原生程式庫的組件。</param>
      <param name="searchPath" vsli:raw="The search path.">搜尋路徑。</param>
      <param name="handle" vsli:raw="When the method returns, the OS handle of the loaded native library.">方法傳回時，為已載入的原生程式庫作業系統控點。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the native library was loaded successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果載入作業成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; or &lt;paramref name=&quot;assembly&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> 或 <paramref name="assembly" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; is not a &lt;see langword=&quot;RuntimeAssembly&quot; /&gt;.">
        <paramref name="assembly" /> 不是 <see langword="RuntimeAssembly" />。</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary vsli:raw="Indicates that a parameter is optional.">表示參數為選擇性。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;OptionalAttribute&quot; /&gt; class with default values.">使用預設值，初始化 <see langword="OptionalAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary vsli:raw="Indicates that the HRESULT signature transformation that takes place during COM interop calls should be suppressed.">指示應該要抑制 COM Interop 呼叫期間發生的 HRESULT 或 <see langword="retval" /> 簽章轉換。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.PreserveSigAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
      <summary vsli:raw="Indicates that the attributed assembly is a primary interop assembly.">表示使用屬性組件 (Assembly) 為主要 Interop 組件。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute&quot; /&gt; class with the major and minor version numbers of the type library for which this assembly is the primary interop assembly.">使用組件為主要 Interop 組件的型別程式庫主要和次要版本號碼，初始化 <see cref="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute" /> 類別的新執行個體。</summary>
      <param name="major" vsli:raw="The major version of the type library for which this assembly is the primary interop assembly.">型別程式庫的主要版本，其中的組件為主要 Interop 組件。</param>
      <param name="minor" vsli:raw="The minor version of the type library for which this assembly is the primary interop assembly.">型別程式庫的次要版本，其中的組件為主要 Interop 組件。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the type library for which this assembly is the primary interop assembly.">取得型別程式庫主要版本號碼，其中的組件為主要 Interop 組件。</summary>
      <returns vsli:raw="The major version number of the type library for which this assembly is the primary interop assembly.">型別程式庫的主要版本號碼，其中的組件為主要 Interop 組件。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the type library for which this assembly is the primary interop assembly.">取得型別程式庫次要版本號碼，其中的組件為主要 Interop 組件。</summary>
      <returns vsli:raw="The minor version number of the type library for which this assembly is the primary interop assembly.">型別程式庫的次要版本號碼，其中的組件為主要 Interop 組件。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ProgIdAttribute">
      <summary vsli:raw="Allows the user to specify the ProgID of a class.">允許使用者指定類別的 ProgId。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ProgIdAttribute&quot; /&gt; with the specified ProgID.">使用指定的 ProgId，初始化 <see langword="ProgIdAttribute" /> 的新執行個體。</summary>
      <param name="progId" vsli:raw="The ProgID to be assigned to the class.">要指派給類別的 ProgID。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ProgIdAttribute.Value">
      <summary vsli:raw="Gets the ProgID of the class.">取得類別的 ProgId。</summary>
      <returns vsli:raw="The ProgID of the class.">類別的 ProgId。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.RuntimeEnvironment">
      <summary vsli:raw="Provides a collection of &lt;see langword=&quot;static&quot; /&gt; methods that return information about the common language runtime environment.">提供傳回 Common Language Runtime 環境的資訊之 <see langword="static" /> 方法的集合，。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)">
      <summary vsli:raw="Tests whether the specified assembly is loaded in the global assembly cache.">測試指定的組件是否會載入至全域組件快取。</summary>
      <param name="a" vsli:raw="The assembly to test.">要測試的組件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the assembly is loaded in the global assembly cache; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果組件會載入至全域組件快取，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory">
      <summary vsli:raw="Returns the directory where the common language runtime is installed.">傳回安裝 Common Language Runtime 所在的目錄。</summary>
      <returns vsli:raw="A string that contains the path to the directory where the common language runtime is installed.">含有安裝 Common Language Runtime 所在之目錄路徑的字串。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(System.Guid,System.Guid)">
      <summary vsli:raw="Returns the specified interface on the specified class.">傳回指定類別上的指定介面。</summary>
      <param name="clsid" vsli:raw="The identifier for the desired class.">所需類別的識別項。</param>
      <param name="riid" vsli:raw="The identifier for the desired interface.">所需介面的識別項。</param>
      <returns vsli:raw="An unmanaged pointer to the requested interface.">要求之介面的 Unmanaged 指標。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="IUnknown::QueryInterface failure.">IUnknown::QueryInterface 失敗。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject(System.Guid,System.Guid)">
      <summary vsli:raw="Returns an instance of a type that represents a COM object by a pointer to its &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">傳回型別的執行個體，用其 <see langword="IUnknown" /> 介面的指標來表示 COM 物件。</summary>
      <param name="clsid" vsli:raw="The identifier for the desired class.">所需類別的識別項。</param>
      <param name="riid" vsli:raw="The identifier for the desired interface.">所需介面的識別項。</param>
      <returns vsli:raw="An object that represents the specified unmanaged COM object.">表示指定之 Unmanaged COM 物件的物件。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="IUnknown::QueryInterface failure.">IUnknown::QueryInterface 失敗。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion">
      <summary vsli:raw="Gets the version number of the common language runtime that's running the current process.">取得正在目前處理序中執行的 Common Language Runtime 的版本號碼。</summary>
      <returns vsli:raw="A string containing the version number of the common language runtime.">含有 Common Language Runtime 的版本號碼的字串。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile">
      <summary vsli:raw="Gets the path to the system configuration file.">取得系統組態檔的路徑。</summary>
      <returns vsli:raw="The path to the system configuration file.">系統組態檔的路徑。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary vsli:raw="The exception thrown when the rank of an incoming &lt;see langword=&quot;SAFEARRAY&quot; /&gt; does not match the rank specified in the managed signature.">當連入 <see langword="SAFEARRAY" /> 的順序不符合 Managed 簽章中指定的順序時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with default values.">使用預設值，初始化 <see langword="SafeArrayTypeMismatchException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class from serialization data.">從序列化 (Serialization) 資料，初始化 <see langword="SafeArrayTypeMismatchException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">存放序列物件資料的物件。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayRankMismatchException&quot; /&gt; class with the specified message.">使用指定的訊息初始化 <see langword="SafeArrayRankMismatchException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">訊息，表示例外狀況的原因。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeArrayRankMismatchException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary vsli:raw="The exception thrown when the type of the incoming &lt;see langword=&quot;SAFEARRAY&quot; /&gt; does not match the type specified in the managed signature.">當連入 <see langword="SAFEARRAY" /> 的型別不符合 Managed 簽章中指定的型別時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with default values.">使用預設值，初始化 <see langword="SafeArrayTypeMismatchException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class from serialization data.">從序列化 (Serialization) 資料，初始化 <see langword="SafeArrayTypeMismatchException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">存放序列物件資料的物件。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with the specified message.">使用指定的訊息初始化 <see langword="SafeArrayTypeMismatchException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">訊息，表示例外狀況的原因。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeArrayTypeMismatchException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeBuffer">
      <summary>提供可用於讀取和寫入的受控制記憶體緩衝區。 嘗試存取受控制緩衝區之外的記憶體 (不足和滿溢) 會引發例外狀況。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 類別的新執行個體，並且指定是否要確實地釋放緩衝區控制代碼。</summary>
      <param name="ownsHandle">
        <see langword="true" /> 表示確實在結束階段釋放控制代碼，否則為 <see langword="false" />，用以免除確實釋放 (不建議)。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
      <summary>從 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 物件取得記憶體區塊的指標。</summary>
      <param name="pointer">位元組指標 (以傳址方式傳遞)，用來從 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 物件中接收指標。 您必須先將這個指標設定為 <see langword="null" />，再呼叫這個方法。</param>
      <exception cref="T:System.InvalidOperationException">尚未呼叫 <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 方法。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeBuffer.ByteLength">
      <summary>取得緩衝區的大小，以位元組為單位。</summary>
      <returns>記憶體緩衝區中的位元組數目。</returns>
      <exception cref="T:System.InvalidOperationException">尚未呼叫 <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 方法。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
      <summary>使用指定的項目數目和項目大小，指定記憶體緩衝區的配置大小。 您必須先呼叫這個方法，才能夠使用 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 執行個體。</summary>
      <param name="numElements">緩衝區中的項目數。</param>
      <param name="sizeOfEachElement">緩衝區中每個項目的大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" /> 小於零。
-或-
<paramref name="sizeOfEachElement" /> 小於零。
-或-
<paramref name="numElements" /> 乘以 <paramref name="sizeOfEachElement" /> 大於可用的位址空間。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
      <summary>定義記憶體區域的配置大小 (以位元組為單位)。 您必須先呼叫這個方法，才能夠使用 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 執行個體。</summary>
      <param name="numBytes">緩衝區中的位元組數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numBytes" /> 小於零。
-或-
<paramref name="numBytes" /> 大於可用的位址空間。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
      <summary>指定實值型別的數目，定義記憶體區域的配置大小。 您必須先呼叫這個方法，才能夠使用 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 執行個體。</summary>
      <param name="numElements">要配置記憶體之實值型別的項目數目。</param>
      <typeparam name="T">要配置記憶體的實值型別。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" /> 小於零。
-或-
<paramref name="numElements" /> 乘以每個元素的大小，大於可用的位址空間。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
      <summary>從記憶體中指定的位移讀取實值型別。</summary>
      <param name="byteOffset">要從中讀取實值型別的位置。 您可能必須考慮對齊問題。</param>
      <typeparam name="T">要讀取的實值型別。</typeparam>
      <returns>從記憶體讀取的實值型別。</returns>
      <exception cref="T:System.InvalidOperationException">尚未呼叫 <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 方法。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>從記憶體中的位移開始讀取指定數目的實值型別，並從陣列中的索引處開始寫入。</summary>
      <param name="byteOffset">要開始讀取的來源位置。</param>
      <param name="array">要寫入的輸出陣列。</param>
      <param name="index">在輸出陣列中開始寫入的位置。</param>
      <param name="count">從輸入陣列讀取並寫入輸出陣列的實值型別數目。</param>
      <typeparam name="T">要讀取的實值型別。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。
-或-
<paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">陣列的長度減去索引會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.InvalidOperationException">尚未呼叫 <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 方法。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer">
      <summary>釋放 <see cref="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)" /> 方法所取得的指標。</summary>
      <exception cref="T:System.InvalidOperationException">尚未呼叫 <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 方法。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
      <summary>將實值型別寫入至記憶體中指定的位置。</summary>
      <param name="byteOffset">要開始寫入的位置。 您可能必須考慮對齊問題。</param>
      <param name="value">要寫入的值。</param>
      <typeparam name="T">要寫入的實值型別。</typeparam>
      <exception cref="T:System.InvalidOperationException">尚未呼叫 <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 方法。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>先從輸入陣列中指定的位置開始讀取位元組，再將指定數目的實值型別寫入至記憶體位置。</summary>
      <param name="byteOffset">要寫入的記憶體中的位置。</param>
      <param name="array">輸入陣列。</param>
      <param name="index">陣列中要開始讀取的位移。</param>
      <param name="count">要寫入的實值型別數目。</param>
      <typeparam name="T">要寫入的實值型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">輸入陣列的長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.InvalidOperationException">尚未呼叫 <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 方法。</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary vsli:raw="Represents structured exception handling (SEH) errors.">代表結構化例外處理 (SEH) 錯誤。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class from serialization data.">從序列化 (Serialization) 資料，初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">存放序列物件資料的物件。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class with a specified message.">使用指定的訊息，初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">訊息，表示例外狀況的原因。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary vsli:raw="Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.">指示例外狀況是否可復原，以及程式碼是否可從擲回例外狀況的地方繼續進行。</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;, because resumable exceptions are not implemented.">因為可復原的例外狀況未實作，所以永遠是 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.StandardOleMarshalObject">
      <summary vsli:raw="Replaces the standard common language runtime (CLR) free-threaded marshaler with the standard OLE STA marshaler.">使用標準 OLE STA 封送處理器，取代標準 Common Language Runtime (CLR) 無限制執行緒封送處理器。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StandardOleMarshalObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.StandardOleMarshalObject&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.InteropServices.StandardOleMarshalObject" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
      <summary vsli:raw="Provides support for type equivalence.">提供類型等價的支援。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeIdentifierAttribute&quot; /&gt; class.">建立 <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeIdentifierAttribute&quot; /&gt; class with the specified scope and identifier.">使用指定的範圍和識別項，建立 <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> 類別的新執行個體。</summary>
      <param name="scope" vsli:raw="The first type equivalence string.">第一個型別對等字串。</param>
      <param name="identifier" vsli:raw="The second type equivalence string.">第二個型別對等字串。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
      <summary vsli:raw="Gets the value of the &lt;paramref name=&quot;identifier&quot; /&gt; parameter that was passed to the &lt;see cref=&quot;M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)&quot; /&gt; constructor.">取得傳遞給 <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> 建構函式的 <paramref name="identifier" /> 的參數值。</summary>
      <returns vsli:raw="The value of the constructor's &lt;paramref name=&quot;identifier&quot; /&gt; parameter.">建構函式的 <paramref name="identifier" /> 參數值。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
      <summary vsli:raw="Gets the value of the &lt;paramref name=&quot;scope&quot; /&gt; parameter that was passed to the &lt;see cref=&quot;M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)&quot; /&gt; constructor.">取得傳遞給 <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> 建構函式的 <paramref name="scope" /> 的參數值。</summary>
      <returns vsli:raw="The value of the constructor's &lt;paramref name=&quot;scope&quot; /&gt; parameter.">建構函式的 <paramref name="scope" /> 參數值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCFLAGS&quot; /&gt; that were originally imported for this method from the COM type library.">含有原來針對這個方法從 COM 型別程式庫匯入的 <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" />。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibFuncAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value.">使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值，初始化 <see langword="TypeLibFuncAttribute" /> 類別的新執行個體。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for the attributed method as found in the type library it was imported from.">屬性化方法的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值，如其匯入來源的型別程式庫中所發現者。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Runtime.InteropServices.TypeLibFuncFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibFuncAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value.">使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值，初始化 <see langword="TypeLibFuncAttribute" /> 類別的新執行個體。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for the attributed method as found in the type library it was imported from.">屬性化方法的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值，如其匯入來源的型別程式庫中所發現者。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibFuncAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for this method.">取得這個方法的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for this method.">這個方法的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see langword=&quot;FUNCFLAGS&quot; /&gt; in the COM type library from where this method was imported.">描述匯入這個方法之來源 COM 型別程式庫中 <see langword="FUNCFLAGS" /> 的原始設定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable">
      <summary vsli:raw="The function that supports data binding.">支援資料繫結的函式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultBind">
      <summary vsli:raw="The function that best represents the object. Only one function in a type information can have this attribute.">最能表示物件的函式。 在型別資訊中只能有一個函式具有這個屬性 (Attribute)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultCollelem">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.">允許一種最佳化，其中編譯器可在「abc」型別上尋找名為「xyz」的成員。 如果找到這種成員，而且是被標示為預設集合之元素的存取子 (Accessor) 函式，就會產生一個對該成員函式的呼叫。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDisplayBind">
      <summary vsli:raw="The function that is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable&quot; /&gt; must also be set.">對使用者顯示為可繫結的函式。 <see cref="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable" /> 也必須設定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FHidden">
      <summary vsli:raw="The function should not be displayed to the user, although it exists and is bindable.">雖然函式存在而且可繫結，但是不應該向使用者顯示。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FImmediateBind">
      <summary vsli:raw="The function is mapped as individual bindable properties.">函式是對應為可繫結的個別屬性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FNonBrowsable">
      <summary vsli:raw="The property appears in an object browser, but not in a properties browser.">屬性出現在物件瀏覽器中，但不會在屬性瀏覽器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FReplaceable">
      <summary vsli:raw="Tags the interface as having default behaviors.">將介面標記 (Tag) 為具有預設行為。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRequestEdit">
      <summary vsli:raw="When set, any call to a method that sets the property results first in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;.">設定之後，任何對設定該屬性之方法的呼叫將會首先呼叫 <see langword="IPropertyNotifySink::OnRequestEdit" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level functions or functions that type browsers should not display.">旗標是供系統層級的函式或型別瀏覽器不應顯示的函式使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FSource">
      <summary vsli:raw="The function returns an object that is a source of events.">函式會傳回是事件來源的物件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUiDefault">
      <summary vsli:raw="The type information member is the default member for display in the user interface.">型別資訊成員是顯示在使用者介面中的預設成員。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUsesGetLastError">
      <summary vsli:raw="The function supports &lt;see langword=&quot;GetLastError&quot; /&gt;.">函式支援 <see langword="GetLastError" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibImportClassAttribute">
      <summary vsli:raw="Specifies which &lt;see cref=&quot;T:System.Type&quot; /&gt; exclusively uses an interface. This class cannot be inherited.">指定哪個 <see cref="T:System.Type" /> 會以獨佔方式使用介面。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibImportClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibImportClassAttribute&quot; /&gt; class specifying the &lt;see cref=&quot;T:System.Type&quot; /&gt; that exclusively uses an interface.">初始化 <see cref="T:System.Runtime.InteropServices.TypeLibImportClassAttribute" /> 類別的新執行個體，並指定以獨佔方式使用介面的 <see cref="T:System.Type" />。</summary>
      <param name="importClass" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">以獨佔方式使用介面的 <see cref="T:System.Type" /> 物件。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibImportClassAttribute.Value">
      <summary vsli:raw="Gets the name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">取得以獨佔方式使用介面之 <see cref="T:System.Type" /> 物件的名稱。</summary>
      <returns vsli:raw="The name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">以獨佔方式使用介面之 <see cref="T:System.Type" /> 物件的名稱。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; that were originally imported for this type from the COM type library.">含有原來針對這個型別從 COM 型別程式庫匯入的 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" />。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value.">使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值，初始化 <see langword="TypeLibTypeAttribute" /> 類別的新執行個體。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for the attributed type as found in the type library it was imported from.">屬性化型別的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值，如其匯入來源的型別程式庫中所發現者。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Runtime.InteropServices.TypeLibTypeFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value.">使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值，初始化 <see langword="TypeLibTypeAttribute" /> 類別的新執行個體。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for the attributed type as found in the type library it was imported from.">屬性化型別的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值，如其匯入來源的型別程式庫中所發現者。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibTypeAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for this type.">取得這個型別的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for this type.">這個型別的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; in the COM type library from which the type was imported.">描述匯入這個型別之來源 COM 型別程式庫中 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> 的原始設定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAggregatable">
      <summary vsli:raw="The class supports aggregation.">類別支援彙總 (Aggregation)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAppObject">
      <summary vsli:raw="A type description that describes an &lt;see langword=&quot;Application&quot; /&gt; object.">描述 <see langword="Application" /> 物件的型別描述。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FCanCreate">
      <summary vsli:raw="Instances of the type can be created by &lt;see langword=&quot;ITypeInfo::CreateInstance&quot; /&gt;.">可以由 <see langword="ITypeInfo::CreateInstance" /> 建立的型別的執行個體。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FControl">
      <summary vsli:raw="The type is a control from which other types will be derived, and should not be displayed to users.">型別是衍生其他型別的控制項，而且不應該向使用者顯示。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDispatchable">
      <summary vsli:raw="Indicates that the interface derives from &lt;see langword=&quot;IDispatch&quot; /&gt;, either directly or indirectly.">指示介面是從 <see langword="IDispatch" /> 直接或間接衍生的。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDual">
      <summary vsli:raw="The interface supplies both &lt;see langword=&quot;IDispatch&quot; /&gt; and V-table binding.">介面同時提供 <see langword="IDispatch" /> 和 V-table 繫結。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FHidden">
      <summary vsli:raw="The type should not be displayed to browsers.">型別不應顯示到瀏覽器。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FLicensed">
      <summary vsli:raw="The type is licensed.">型別已經授權。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FNonExtensible">
      <summary vsli:raw="The interface cannot add members at run time.">介面在執行階段不能加入成員。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FOleAutomation">
      <summary vsli:raw="The types used in the interface are fully compatible with Automation, including vtable binding support.">介面中使用的型別與 Automation 完全相容，包括 vtable 繫結支援。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FPreDeclId">
      <summary vsli:raw="The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.">型別已預先定義。 用戶端應用程式應該自動建立具有這項屬性之物件的單一執行個體。 指向該物件的變數名稱與該物件的類別名稱相同。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReplaceable">
      <summary vsli:raw="The object supports &lt;see langword=&quot;IConnectionPointWithDefault&quot; /&gt;, and has default behaviors.">物件支援 <see langword="IConnectionPointWithDefault" />，而且具有預設的行為。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level types or types that type browsers should not display.">這個旗標是供系統層級的型別或型別瀏覽器不應顯示的型別使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReverseBind">
      <summary vsli:raw="Indicates base interfaces should be checked for name resolution before checking child interfaces. This is the reverse of the default behavior.">指示應在檢查子介面前檢查基底介面的名稱解析。 這和預設行為相反。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.VARFLAGS&quot; /&gt; that were originally imported for this field from the COM type library.">含有原來針對這個欄位從 COM 型別程式庫匯入的 <see cref="T:System.Runtime.InteropServices.VARFLAGS" />。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value.">使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值，初始化 <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> 類別的新執行個體。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for the attributed field as found in the type library it was imported from.">屬性化欄位的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值，如其匯入來源的型別程式庫中所發現者。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Runtime.InteropServices.TypeLibVarFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value.">使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值，初始化 <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> 類別的新執行個體。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for the attributed field as found in the type library it was imported from.">屬性化欄位的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值，如其匯入來源的型別程式庫中所發現者。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVarAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for this field.">取得這個欄位的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for this field.">這個欄位的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see cref=&quot;T:System.Runtime.InteropServices.VARFLAGS&quot; /&gt; in the COM type library from which the variable was imported.">描述匯入這個變數之來源 COM 型別程式庫中 <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> 的原始設定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable">
      <summary vsli:raw="The variable supports data binding.">變數支援資料繫結 (Data Binding)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultBind">
      <summary vsli:raw="The variable is the single property that best represents the object. Only one variable in a type info can have this value.">變數是最能表示該物件的單一屬性。 在型別資訊中只能有一個變數具有這個值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultCollelem">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.">允許一種最佳化，其中編譯器可在「abc」型別上尋找名為「xyz」的成員。 如果找到這種成員，而且是被標示為預設集合之元素的存取子 (Accessor) 函式，就會產生一個對該成員函式的呼叫。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDisplayBind">
      <summary vsli:raw="The variable is displayed as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable&quot; /&gt; must also be set.">變數顯示為可繫結， <see cref="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable" /> 也必須設定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FHidden">
      <summary vsli:raw="The variable should not be displayed in a browser, though it exists and is bindable.">雖然變數存在而且可繫結，但是不應在瀏覽器中顯示。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FImmediateBind">
      <summary vsli:raw="The variable is mapped as individual bindable properties.">變數是對應為可繫結的個別屬性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FNonBrowsable">
      <summary vsli:raw="The variable appears in an object browser, but not in a properties browser.">變數出現在物件瀏覽器中，但不會在屬性瀏覽器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReadOnly">
      <summary vsli:raw="Assignment to the variable should not be allowed.">不允許對變數進行指派 (Assignment)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReplaceable">
      <summary vsli:raw="Tags the interface as having default behaviors.">將介面標記 (Tag) 為具有預設行為。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRequestEdit">
      <summary vsli:raw="Indicates that the property supports the COM &lt;see langword=&quot;OnRequestEdit&quot; /&gt; notification.">指示屬性支援 COM 的 <see langword="OnRequestEdit" /> 告知。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level functions or functions that type browsers should not display.">旗標是供系統層級的函式或型別瀏覽器不應顯示的函式使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FSource">
      <summary vsli:raw="The variable returns an object that is a source of events.">變數會傳回是事件來源的物件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FUiDefault">
      <summary vsli:raw="The default display in the user interface.">在使用者介面中的預設顯示。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVersionAttribute">
      <summary vsli:raw="Specifies the version number of an exported type library.">指定匯出型別程式庫的版本號碼。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVersionAttribute.#ctor(System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVersionAttribute&quot; /&gt; class with the major and minor version numbers of the type library.">使用型別程式庫的主要和次要版本號碼，初始化 <see cref="T:System.Runtime.InteropServices.TypeLibVersionAttribute" /> 類別的新執行個體。</summary>
      <param name="major" vsli:raw="The major version number of the type library.">型別程式庫的主要版本號碼。</param>
      <param name="minor" vsli:raw="The minor version number of the type library.">型別程式庫的次要版本號碼。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the type library.">取得型別程式庫的主要版本號碼。</summary>
      <returns vsli:raw="The major version number of the type library.">型別程式庫的主要版本號碼。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the type library.">取得型別程式庫的次要版本號碼。</summary>
      <returns vsli:raw="The minor version number of the type library.">型別程式庫的次要版本號碼。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_UNKNOWN&quot; /&gt;.">包裝封送處理器應將其當做 <see langword="VT_UNKNOWN" /> 來封送處理的物件。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnknownWrapper&quot; /&gt; class with the object to be wrapped.">使用要包裝的物件，初始化 <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> 類別的新執行個體。</summary>
      <param name="obj" vsli:raw="The object being wrapped.">所包裝的物件。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary vsli:raw="Gets the object contained by this wrapper.">取得這個包裝函式所包含的物件。</summary>
      <returns vsli:raw="The wrapped object.">被包裝的物件。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary vsli:raw="Controls the marshaling behavior of a delegate signature passed as an unmanaged function pointer to or from unmanaged code. This class cannot be inherited.">控制當做 Unmanaged 函式指標在 Unmanaged 程式碼之間來回傳遞之委派簽章的封送處理行為。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute&quot; /&gt; class with the specified calling convention.">使用指定的呼叫慣例，初始化 <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" /> 類別的新執行個體。</summary>
      <param name="callingConvention" vsli:raw="The specified calling convention.">指定的呼叫慣例。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary vsli:raw="Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.">將 Unicode 字元轉換成 ANSI 字元時，啟用或停用最適合對應行為。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary vsli:raw="Gets the value of the calling convention.">取得呼叫慣例的值。</summary>
      <returns vsli:raw="The value of the calling convention specified by the &lt;see cref=&quot;M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)&quot; /&gt; constructor.">呼叫慣例的值，由 <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" /> 建構函式 (Constructor) 指定。</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary vsli:raw="Indicates how to marshal string parameters to the method, and controls name mangling.">表示如何將字串參數封送處理到方法，並控制函式名稱改變 (Name Mangling)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary vsli:raw="Indicates whether the callee calls the &lt;see langword=&quot;SetLastError&quot; /&gt; Windows API function before returning from the attributed method.">指出自屬性方法傳回之前，被呼叫端是否呼叫 <see langword="SetLastError" /> Windows API 函式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI &quot;?&quot; character.">在無法對應的 Unicode 字元轉換為 ANSI "?" 字元時，啟用或停用例外狀況的擲回。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>識別如何封送處理參數或欄位至 Unmanaged 程式碼。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>固定長度、單一位元組的 ANSI 字元字串。 您可以在 <see cref="T:System.String" /> 資料類型上使用這個成員。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>動態 (Dynamic) 類型，在執行階段判斷物件的類型，並封送處理物件為該類型。 這個成員僅對平台叫用方法有效。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>4 位元組的布林值 (<see langword="true" /> != 0, <see langword="false" /> = 0)。 這是 Win32 BOOL 類型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>固定長度雙位元組的 Unicode 字元字串。 您可以在 <see cref="T:System.String" /> 資料類型上使用這個成員，這是 COM 中的預設字串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>將 <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" /> 屬性設為 <see langword="ByValArray" /> 時，必須設定 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 欄位以指出陣列中的元素數目。 需要區別字串類型時，<see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> 欄位可以選擇性地包含陣列元素的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" />。 唯有當陣列的元素在結構中顯示為欄位時，您才能在該陣列上使用這個 <see cref="T:System.Runtime.InteropServices.UnmanagedType" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>使用於出現在結構中的內嵌 (Inline) 固定長度字元陣列。 <see langword="ByValTStr" /> 類型的行為類似結構內固定大小字串 C 樣式 (例如 <c>char s[5]</c>)。 與 <see langword="ByValTStr" /> 搭配使用的字元類型是由套用至包含結構之 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 屬性的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 引數所決定。 一律使用 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 欄位來指出陣列大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>貨幣類型。 在 <see cref="T:System.Decimal" /> 上用來將十進位值封送處理為 COM 貨幣類型，而不是成為 <see langword="Decimal" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>搭配 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> 或 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" /> 欄位使用時，指定自訂封送處理器的類別。 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> 欄位可用來將其他資訊傳遞給自訂封送處理器。 您可以將這個成員用於參考類型。 這個成員僅適用於參數和傳回值。 無法在欄位中使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>與 <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> 或 <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" /> 相關聯的原生類型，而且該類型會導致參數匯出為匯出的類型程式庫中的 HRESULT。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>整數，可當做 C-style 函式指標使用。 您可以在 <see cref="T:System.Delegate" /> 資料類型或自 <see cref="T:System.Delegate" /> 繼承的類型上使用這個成員。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.HString">
      <summary>Windows 執行階段 字串。 您可以在 <see cref="T:System.String" /> 資料類型上使用這個成員。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>1 位元帶正負號的整數。 您可以使用這個成員，將布林值轉換為 1 位元組、C-style <see langword="bool" /> (<see langword="true" /> = 1, <see langword="false" /> = 0)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>2 位元帶正負號的整數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>4 位元帶正負號的整數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>8 位元帶正負號的整數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>COM <see langword="IDispatch" /> 指標 (Microsoft Visual Basic 6.0 中的<see langword="Object" /> )。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IInspectable">
      <summary>Windows 執行階段 介面指標。 您可以在 <see cref="T:System.Object" /> 資料類型上使用這個成員。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>COM 的介面指標。 介面的 <see cref="T:System.Guid" /> 是從類別中繼資料取得。 使用這個成員指定如果套用至類別時的正確介面類型或預設介面類型。 當您將這個成員套用至 <see cref="T:System.Object" /> 資料類型時，它會產生與 <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" /> 相同的行為。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>COM <see langword="IUnknown" /> 指標。 您可以在 <see cref="T:System.Object" /> 資料類型上使用這個成員。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>指向 C-style 陣列第一個項目的指標。 當從 Managed 程式碼封送處理至 Unmanaged 程式碼時，陣列的長度是由 Managed 陣列的長度來判斷。 從 Unmanaged 程式碼封送處理至 Managed 程式碼時，會從 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 和 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" /> 欄位判斷陣列的長度，在需要區別字串類型時，也可以選擇是否要在後面加上陣列中元素的 Unmanaged 類型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>單一位元組、以 Null 結束的 ANSI 字元字串。 您可以在 <see cref="T:System.String" /> 和 <see cref="T:System.Text.StringBuilder" /> 資料類型上使用這個成員。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>C-style 結構的指標，您用來封送處理 Managed 格式化類別。 這個成員僅對平台叫用方法有效。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>平台相依字元字串：在 Windows 98 上為 ANSI on，在 Windows NT 與 Windows XP 上為 Unicode。 因為不支援匯出 <see langword="LPTStr" /> 類型的字串，所以只有進行平台叫用才支援這個值，若是 COM Interop 則不支援。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPUTF8Str">
      <summary>指向以 UTF-8 編碼字串的指標。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>2 位元組、以 Null 結束的 Unicode 字元字串。 除非您使用非受控的 <see langword="CoTaskMemAlloc" /> 函式來建立字串，否則就無法搭配使用 <see langword="LPWStr" /> 值與非受控字串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>4 位元組浮點數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>8 位元組浮點數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>
        <see langword="SafeArray" />，其為自我描述陣列，具有關聯陣列資料的類型、順位及繫結。 您可以將這個成員與 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" /> 欄位搭配使用，以覆寫預設元素類型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>VARIANT，用來封送處理 Managed 格式化類別和實值類型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>平台相依帶正負號的整數：在 32 位元 Windows 上為 4 位元組，在 64 位元 Windows 上為 8 位元組。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>平台相依不帶正負號的整數：在 32 位元 Windows 上為 4 位元組，在 64 位元 Windows 上為 8 位元組。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>前置長度平台相依 <see langword="char" /> 字串：在 Windows 98 上為 ANSI，在 Windows NT 上為 Unicode。 您很少會使用這個類似 BSTR 的成員。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>1 位元組不帶正負號的整數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>2 位元組不帶正負號的整數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>4 位元組不帶正負號的整數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>8 位元不帶正負號的整數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>2 位元組、OLE 定義的 VARIANT_BOOL 類型 (<see langword="true" /> = -1, <see langword="false" /> = 0)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>值，這個值可讓 Visual Basic 變更 Unmanaged 程式碼中的字串，並且讓結果反映在 Managed 程式碼中。 只有平台叫用支援這個值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary vsli:raw="Indicates how to marshal the array elements when an array is marshaled from managed to unmanaged code as a &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">指示從 Managed 至 Unmanaged 程式碼封送處理陣列為 <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> 時如何封送處理陣列元素。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;SAFEARRAY&quot; /&gt; pointer.">指示 <see langword="SAFEARRAY" /> 指標。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary vsli:raw="Indicates length prefixed bytes.">指示以長度為首碼的位元組。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary vsli:raw="Indicates that a blob contains an object.">指示 BLOB (二進位大型物件) 含有物件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary vsli:raw="Indicates a Boolean value.">指示布林值 (Boolean)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary vsli:raw="Indicates a BSTR string.">指示 BSTR 字串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary vsli:raw="Indicates that a value is a reference.">指示數值為參考。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary vsli:raw="Indicates a C style array.">指示 C 樣式陣列。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary vsli:raw="Indicates the clipboard format.">指示剪貼簿格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary vsli:raw="Indicates a class ID.">指示類別 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary vsli:raw="Indicates a currency value.">指示貨幣值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary vsli:raw="Indicates a DATE value.">指示 DATE 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;decimal&quot; /&gt; value.">指示 <see langword="decimal" /> 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;IDispatch&quot; /&gt; pointer.">指示 <see langword="IDispatch" /> 指標。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary vsli:raw="Indicates that a value was not specified.">指示尚未指定的值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary vsli:raw="Indicates an SCODE.">指示 SCODE。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary vsli:raw="Indicates a FILETIME value.">指示 FILETIME 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary vsli:raw="Indicates an HRESULT.">指示 HRESULT。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;char&quot; /&gt; value.">指示 <see langword="char" /> 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;short&quot; /&gt; integer.">指示 <see langword="short" /> 整數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;long&quot; /&gt; integer.">指示 <see langword="long" /> 整數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary vsli:raw="Indicates a 64-bit integer.">指示 64 位元整數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary vsli:raw="Indicates an integer value.">指示整數值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary vsli:raw="Indicates a null-terminated string.">指示以 null 結尾的字串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary vsli:raw="Indicates a wide string terminated by &lt;see langword=&quot;null&quot; /&gt;.">指示以 <see langword="null" /> 結尾的寬字串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary vsli:raw="Indicates a null value, similar to a null value in SQL.">指示 null 值，和 SQL 中的 null 值類似。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary vsli:raw="Indicates a pointer type.">指示指標型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;float&quot; /&gt; value.">指示 <see langword="float" /> 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;double&quot; /&gt; value.">指示 <see langword="double" /> 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary vsli:raw="Indicates a user defined type.">指示使用者定義的型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary vsli:raw="Indicates a SAFEARRAY. Not valid in a VARIANT.">指示 SAFEARRAY。 在 VARIANT 中無效。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary vsli:raw="Indicates that the name of a storage follows.">指示儲存體遵循的名稱。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary vsli:raw="Indicates that a storage contains an object.">指示儲存體含有物件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary vsli:raw="Indicates that the name of a stream follows.">指示資料流遵循的名稱。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary vsli:raw="Indicates that a stream contains an object.">指示資料流含有物件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;byte&quot; /&gt;.">指示 <see langword="byte" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt;&lt;see langword=&quot;short&quot; /&gt;.">表示 <see langword="unsigned" /><see langword="short" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt;&lt;see langword=&quot;long&quot; /&gt;.">表示 <see langword="unsigned" /><see langword="long" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary vsli:raw="Indicates an 64-bit unsigned integer.">指示 64 位元不帶正負號的整數 (Unsigned Integer)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt; integer value.">指示 <see langword="unsigned" /> 整數值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;IUnknown&quot; /&gt; pointer.">指示 <see langword="IUnknown" /> 指標。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary vsli:raw="Indicates a user defined type.">指示使用者定義的型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary vsli:raw="Indicates a VARIANT &lt;see langword=&quot;far&quot; /&gt; pointer.">指示 VARIANT <see langword="far" /> 指標。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary vsli:raw="Indicates a simple, counted array.">指示簡單計數的陣列。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary vsli:raw="Indicates a C style &lt;see langword=&quot;void&quot; /&gt;.">指示 C 樣式 <see langword="void" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VariantWrapper">
      <summary vsli:raw="Marshals data of type &lt;see langword=&quot;VT_VARIANT | VT_BYREF&quot; /&gt; from managed to unmanaged code. This class cannot be inherited.">將 <see langword="VT_VARIANT | VT_BYREF" /> 型別的資料從 Managed 封送處理成 Unmanaged 程式碼。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; class for the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; parameter.">為指定的 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 參數，初始化 <see cref="T:System.Object" /> 類別的新執行個體。</summary>
      <param name="obj" vsli:raw="The object to marshal.">要封送處理的物件。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
      <summary vsli:raw="Gets the object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; object.">取得 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 物件所包裝的物件。</summary>
      <returns vsli:raw="The object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; object.">
        <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 物件所包裝的物件。</returns>
    </member>
    <member name="T:System.Security.SecureString">
      <summary vsli:raw="Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.">代表應該將文字保密，例如於不再使用時將它從電腦記憶體刪除。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Security.SecureString.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; class.">初始化 <see cref="T:System.Security.SecureString" /> 類別的新執行個體。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this instance.">保護或解除保護這個執行個體的值時發生錯誤。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This operation is not supported on this platform.">這個平台上不支援這項作業。</exception>
    </member>
    <member name="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; class from a subarray of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects.  &#xA;  &#xA; This constructor is not CLS-compliant. The CLS-compliant alternative is &lt;see cref=&quot;M:System.Security.SecureString.#ctor&quot; /&gt;.">從 <see cref="T:System.Char" /> 物件的子陣列，初始化 <see cref="T:System.Security.SecureString" /> 類別的新執行個體。
這個建構函式不符合 CLS 標準。 符合 CLS 標準的替代項目為 <see cref="M:System.Security.SecureString.#ctor" />。</summary>
      <param name="value" vsli:raw="A pointer to an array of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects.">
        <see cref="T:System.Char" /> 物件陣列的指標。</param>
      <param name="length" vsli:raw="The number of elements of &lt;paramref name=&quot;value&quot; /&gt; to include in the new instance.">要包含在新執行個體中之 <paramref name="value" /> 的項目數。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; is less than zero or greater than 65,536.">
        <paramref name="length" /> 小於零或大於 65,536。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">保護或解除保護這個安全字串的值時發生錯誤。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This operation is not supported on this platform.">這個平台上不支援這項作業。</exception>
    </member>
    <member name="M:System.Security.SecureString.AppendChar(System.Char)">
      <summary vsli:raw="Appends a character to the end of the current secure string.">將字元附加至目前安全字串的結尾。</summary>
      <param name="c" vsli:raw="A character to append to this secure string.">附加至這個安全字串的字元。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">這個安全字串已經過處置。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">這個安全字串是唯讀的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="Performing this operation would make the length of this secure string greater than 65,536 characters.">執行這項作業會使這個安全字串的長度大於 65,536 個字元。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">保護或解除保護這個安全字串的值時發生錯誤。</exception>
    </member>
    <member name="M:System.Security.SecureString.Clear">
      <summary vsli:raw="Deletes the value of the current secure string.">刪除目前安全字串的值。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">這個安全字串已經過處置。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">這個安全字串是唯讀的。</exception>
    </member>
    <member name="M:System.Security.SecureString.Copy">
      <summary vsli:raw="Creates a copy of the current secure string.">建立目前安全字串的複本。</summary>
      <returns vsli:raw="A duplicate of this secure string.">這個安全字串的複本。</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">這個安全字串已經過處置。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">保護或解除保護這個安全字串的值時發生錯誤。</exception>
    </member>
    <member name="M:System.Security.SecureString.Dispose">
      <summary vsli:raw="Releases all resources used by the current &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object.">釋放由 <see cref="T:System.Security.SecureString" /> 物件使用的所有資源。</summary>
    </member>
    <member name="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
      <summary vsli:raw="Inserts a character in this secure string at the specified index position.">將這個安全字串中的字元插入指定索引位置。</summary>
      <param name="index" vsli:raw="The index position where parameter &lt;paramref name=&quot;c&quot; /&gt; is inserted.">插入參數 <paramref name="c" /> 的索引位置。</param>
      <param name="c" vsli:raw="The character to insert.">要插入的字元。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">這個安全字串已經過處置。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">這個安全字串是唯讀的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than the length of this secure string.  &#xA;  &#xA; -or-  &#xA;  &#xA; Performing this operation would make the length of this secure string greater than 65,536 characters.">
        <paramref name="index" /> 小於零，或大於這個安全字串的長度。
-或-
執行這項作業會使這個安全字串的長度大於 65,536 個字元。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">保護或解除保護這個安全字串的值時發生錯誤。</exception>
    </member>
    <member name="M:System.Security.SecureString.IsReadOnly">
      <summary vsli:raw="Indicates whether this secure string is marked read-only.">指示這個安全字串是否標示為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this secure string is marked read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個安全字串標示為唯讀則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">這個安全字串已經過處置。</exception>
    </member>
    <member name="P:System.Security.SecureString.Length">
      <summary vsli:raw="Gets the number of characters in the current secure string.">取得目前安全字串中的字元數。</summary>
      <returns vsli:raw="The number of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects in this secure string.">這個安全字串中 <see cref="T:System.Char" /> 物件的數目。</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">這個安全字串已經過處置。</exception>
    </member>
    <member name="M:System.Security.SecureString.MakeReadOnly">
      <summary vsli:raw="Makes the text value of this secure string read-only.">使這個安全字串的文字值成為唯讀。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">這個安全字串已經過處置。</exception>
    </member>
    <member name="M:System.Security.SecureString.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the character at the specified index position from this secure string.">從這個安全字串移除位在指定索引位置的字元。</summary>
      <param name="index" vsli:raw="The index position of a character in this secure string.">這個安全字串中字元的索引位置。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">這個安全字串已經過處置。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">這個安全字串是唯讀的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than or equal to the length of this secure string.">
        <paramref name="index" /> 小於零，或是大於或等於這個安全字串的長度。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">保護或解除保護這個安全字串的值時發生錯誤。</exception>
    </member>
    <member name="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
      <summary vsli:raw="Replaces the existing character at the specified index position with another character.">使用另一個字元，取代位在指定索引位置的現有字元。</summary>
      <param name="index" vsli:raw="The index position of an existing character in this secure string.">這個安全字串中現有字元的索引位置。</param>
      <param name="c" vsli:raw="A character that replaces the existing character.">取代現有字元的字元。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">這個安全字串已經過處置。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">這個安全字串是唯讀的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than or equal to the length of this secure string.">
        <paramref name="index" /> 小於零，或是大於或等於這個安全字串的長度。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">保護或解除保護這個安全字串的值時發生錯誤。</exception>
    </member>
    <member name="T:System.Security.SecureStringMarshal">
      <summary vsli:raw="Provides a collection of methods for allocating unmanaged memory and copying unmanaged memory blocks.">提供配置 Unmanaged 記憶體和複製 Unmanaged 記憶體區塊的方法集合。</summary>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">將 Managed <see cref="T:System.Security.SecureString" /> 物件的內容複製到從 Unmanaged COM 工作配置器配置的記憶體區塊。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要複製的 Managed 物件。</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Unmanaged 記憶體中複製 <paramref name="s" /> 參數的目的位址；如果提供 Null 物件，則為 0。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">目前的電腦未執行 Windows 2000 Service Pack 3 或更新版本。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">可用的記憶體不足。</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">將 Managed <see cref="T:System.Security.SecureString" /> 物件的內容複製到從 Unmanaged COM 工作配置器配置的記憶體區塊。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要複製的 Managed 物件。</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Unmanaged 記憶體中複製 <paramref name="s" /> 參數的目的位址；如果提供 Null 物件，則為 0。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">目前的電腦未執行 Windows 2000 Service Pack 3 或更新版本。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">可用的記憶體不足。</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">將 Managed <see cref="T:System.Security.SecureString" /> 的內容複製到 Unmanaged 記憶體中，並在它複製時轉換成 ANSI 格式。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要複製的 Managed 物件。</param>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied, or 0 if a null object was supplied.">Unmanaged 記憶體中複製 <paramref name="s" /> 參數的目標位址；如果提供 Null 物件，則為 0。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">目前的電腦未執行 Windows 2000 Service Pack 3 或更新版本。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">可用的記憶體不足。</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into unmanaged memory.">將 Managed <see cref="T:System.Security.SecureString" /> 物件的內容複製到 Unmanaged 記憶體中。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要複製的 Managed 物件。</param>
      <returns vsli:raw="The address, in unmanaged memory, where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is a &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object whose length is 0.">Unmanaged 記憶體中複製 <paramref name="s" /> 的目標位址；如果 <paramref name="s" /> 是長度為 0 的 <see cref="T:System.Security.SecureString" /> 物件，則為 0。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">目前的電腦未執行 Windows 2000 Service Pack 3 或更新版本。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">可用的記憶體不足。</exception>
    </member>
  </members>
</doc>
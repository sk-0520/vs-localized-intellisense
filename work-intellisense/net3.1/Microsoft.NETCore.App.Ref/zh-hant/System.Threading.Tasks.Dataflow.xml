<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks.Dataflow</name>
  </assembly>
  <members>
    <member name="T:System.Threading.Tasks.Dataflow.ActionBlock`1">
      <summary>提供資料流程區塊，為每個收到的資料項目叫用提供的 <see cref="T:System.Action`1" /> 委派。</summary>
      <typeparam name="TInput">這個 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 操作所在的資料的型別。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})">
      <summary>使用指定的動作，初始化 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 類別的新執行個體。</summary>
      <param name="action">要以各個接收的資料項目叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>使用指定的動作和組態選項，初始化 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 類別的新執行個體。</summary>
      <param name="action">要以各個接收的資料項目叫用的動作。</param>
      <param name="dataflowBlockOptions">用來設定這個<see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 的選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 為 <see langword="null" />。
-或-
<paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
      <summary>使用指定的動作，初始化 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 類別的新執行個體。</summary>
      <param name="action">要以各個接收的資料項目叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>使用指定的動作和組態選項，初始化 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 類別的新執行個體。</summary>
      <param name="action">要以各個接收的資料項目叫用的動作。</param>
      <param name="dataflowBlockOptions">用來設定這個<see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 的選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 為 <see langword="null" />。
-或-
<paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Complete">
      <summary>向資料流程區塊發出訊號，表示不應接受或產生任何其他訊息，也不應使用任何其他延後的訊息。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.Completion">
      <summary>取得 <see cref="T:System.Threading.Tasks.Task" /> 物件，表示非同步作業和資料流程區塊的完成。</summary>
      <returns>已完成的工作。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount">
      <summary>取得等候由這個區塊處理的輸入項目的數目。</summary>
      <returns>等候由這個區塊處理的輸入項目的數目。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)">
      <summary>將項目張貼至目標資料流程區塊。</summary>
      <param name="item">提供給目標的項目。</param>
      <returns>如果項目是張貼至資料流程區塊則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>造成資料流程區塊在錯誤 (Faulted) 狀態下完成。</summary>
      <param name="exception">導致這個錯誤的例外狀況。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>提供訊息給資料流程區塊，讓它有機會使用或延後訊息。</summary>
      <param name="messageHeader">正在提供的訊息的標頭。</param>
      <param name="messageValue">正在提供的訊息的值。</param>
      <param name="source">提供訊息的資料流程區塊。 這可能是 <see langword="null" />。</param>
      <param name="consumeToAccept">設為 <see langword="true" /> 以指示目標在傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> 之前，於呼叫 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 期間以非同步方式呼叫 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />，以便使用訊息；否則設為 <see langword="false" />。</param>
      <returns>提供之訊息的狀態。  如果目標已接受訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，而且來源不應該再使用所提供的訊息，因為現在它是由目標擁有。 如果訊息已由目標延後，會以通知形式傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />，目標稍後可能會嘗試使用或保留訊息，同時來源仍擁有訊息，而且可能會將訊息提供給其他區塊。
如果目標會延後訊息，但來源是 <see langword="null" />，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。
如果目標嘗試接受訊息，但因為來源將訊息傳遞給另一個目標或直接捨棄訊息，使得目標遺漏訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />。
如果目標選擇不接受訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。 如果目標選擇不接受此訊息，且將不會接受來自此來源的其他訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。
或，如果隨著非 null <paramref name="source" /> 一起提供，<paramref name="consumeToAccept" /> 才能為 <see langword="true" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.ToString">
      <summary>傳回表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</summary>
      <returns>表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchBlock`1">
      <summary>提供資料流程區塊，將輸入批次處理到陣列。</summary>
      <typeparam name="T">指定將放入批次的資料型別。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32)">
      <summary>使用指定的批次大小，初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />。</summary>
      <param name="batchSize">要群組成單一批次的項目數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" /> 必須是正數。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>使用指定的批次大小、拒絕選項和封鎖選項，初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />。</summary>
      <param name="batchSize">要群組成單一批次的項目數。</param>
      <param name="dataflowBlockOptions">用來設定這個<see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> 的選項。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" /> 必須是正數。
-或-
如果設定了非預設的值，<paramref name="batchSize" />必須小於<see cref="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity" />選項的值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize">
      <summary>取得此 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> 產生的批次大小。</summary>
      <returns>批次大小。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.Complete">
      <summary>向 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 發出訊號，表示不應接受也不應產生任何其他訊息，也不應使用任何其他延後的訊息。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.Completion">
      <summary>取得 <see cref="T:System.Threading.Tasks.Task" />，其表示非同步作業和資料流程區塊的完成。</summary>
      <returns>工作。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>將 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 連結至指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target">要連線到此資源的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">設定連結的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 執行個體。</param>
      <returns>IDisposable，在呼叫 Dispose 時，將會取消來源和目標間的連結。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 null (在 Visual Basic 中為 Nothing) 或 <paramref name="linkOptions" /> 為 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.OutputCount">
      <summary>取得可從此區塊接收的輸出項目數目。</summary>
      <returns>輸出項目的數目。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>造成 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 的狀態中完成。</summary>
      <param name="exception">導致錯誤的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Boolean@)">
      <summary>由連結的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 呼叫以接受及使用先前由此 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</summary>
      <param name="messageHeader">使用的訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">使用訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed">如果成功使用訊息，則為 <see langword="true" />，否則為<see langword="false" />。</param>
      <returns>使用的訊息的值。 這可能會對應到不同的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體，這個執行個體先前已保留並做為 <paramref name="messageHeader" /> 傳遞到<see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />必須使用傳回的值，而不是使用透過 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 傳送做為 messageValue 的值。
如果無法使用要求的訊息，則傳回的值就是<see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary>由連結的<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />呼叫以釋出先前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 保留的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader">釋放的保留訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />，會釋放它先前保留的訊息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" /> 沒有保留訊息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary>由連結的<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />呼叫以保留先前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader">保留的訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">保留訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <returns>如果成功保留訊息，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>提供了訊息給<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />，讓目標有機會使用或延後訊息。</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />執行個體，表示所提供的訊息的標頭。</param>
      <param name="messageValue">正在提供的訊息的值。</param>
      <param name="source">提供訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 這可能是 Null。</param>
      <param name="consumeToAccept">設為 <see langword="true" /> 以指示目標在呼叫 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 期間以非同步方式呼叫 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />，在傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> 之前，以便使用訊息。</param>
      <returns>提供之訊息的狀態。 如果目標已接受訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，而且來源不應該再使用所提供的訊息，因為現在它是由目標擁有。 如果訊息已由目標延後，會以通知形式傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />，目標稍後可能會嘗試使用或保留訊息，同時來源仍擁有訊息，而且可能會將訊息提供給其他區塊。
如果目標延後訊息，但 <paramref name="source" /> 為 <see langword="null" />，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。
如果目標嘗試接受訊息，但因為來源將訊息傳遞給另一個目標或直接捨棄訊息，使得目標遺漏訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />。
如果目標選擇不接受訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。 如果目標選擇不接受此訊息，且將不會接受來自此來源的其他訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。
或，如果提供非 null <paramref name="consumeToAccept" />，則 <paramref name="source" /> 只能為 true。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.ToString">
      <summary>傳回表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</summary>
      <returns>表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TriggerBatch">
      <summary>觸發<see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />以初始化批次處理作業，即使目前佇列中或延後的項目數目小於<see cref="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize" />。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceive(System.Predicate{`0[]},`0[]@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收可用的輸出項目。</summary>
      <param name="filter">述詞的值必須成功傳遞才能讓它接收。  <paramref name="filter" /> 可能是<see langword="null" />，這種情況下將傳遞所有項目。</param>
      <param name="item">從來源接收的項目。</param>
      <returns>如果可以接收項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0[]}@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收所有可用項目。</summary>
      <param name="items">從來源接收的項目。</param>
      <returns>如果無法收到一或多個項目，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2">
      <summary>提供資料流程區塊，將所提供的 (可能不同型別的) 指定輸入個數批次處理至一或多個目標。</summary>
      <typeparam name="T1">指定區塊的第一個目標所接受的資料型別。</typeparam>
      <typeparam name="T2">指定區塊的第二個目標所接受的資料型別。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32)">
      <summary>使用指定的組態，初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />。</summary>
      <param name="batchSize">要群組成單一批次的項目數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" /> 必須是正數。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>使用指定的組態，初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />。</summary>
      <param name="batchSize">要群組成單一批次的項目數。</param>
      <param name="dataflowBlockOptions">用來設定這個<see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> 的選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" /> 小於一。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.BatchSize">
      <summary>取得 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> 所產生的批次大小。</summary>
      <returns>批次大小。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Complete">
      <summary>向 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 發出訊號，表示不應接受也不應產生任何其他訊息，也不應使用任何其他延後的訊息。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Completion">
      <summary>取得 <see cref="T:System.Threading.Tasks.Task" />，其表示非同步作業和資料流程區塊的完成。</summary>
      <returns>工作。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>將 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 連結至指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target">要將此來源連接至的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">設定連結的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 執行個體。</param>
      <returns>IDisposable，在呼叫 Dispose 時，將會取消來源和目標間的連結。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 null (在 Visual Basic 中為 Nothing) 或 <paramref name="linkOptions" /> 為 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.OutputCount">
      <summary>取得可從此區塊接收的輸出項目數目。</summary>
      <returns>輸出項目的數目。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>造成 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 的狀態中完成。</summary>
      <param name="exception">導致錯誤的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Boolean@)">
      <param name="messageHeader" />
      <param name="target" />
      <param name="messageConsumed" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target1">
      <summary>取得可用來提供第一個類型之訊息的目標。</summary>
      <returns>目標。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target2">
      <summary>取得可用來提供第二個類型之訊息的目標。</summary>
      <returns>目標。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.ToString">
      <summary>傳回表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</summary>
      <returns>表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收可用的輸出項目。</summary>
      <param name="filter">述詞的值必須成功傳遞才能讓它接收。  <paramref name="filter" /> 可能是<see langword="null" />，這種情況下將傳遞所有項目。</param>
      <param name="item">從來源接收的項目。</param>
      <returns>如果可以接收項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}}@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收所有可用項目。</summary>
      <param name="items">從來源接收的項目。</param>
      <returns>如果無法收到一或多個項目，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3">
      <summary>提供資料流程區塊，將所提供的 (可能不同型別的) 指定輸入個數批次處理至一或多個目標。</summary>
      <typeparam name="T1">指定區塊的第一個目標所接受的資料型別。</typeparam>
      <typeparam name="T2">指定區塊的第二個目標所接受的資料型別。</typeparam>
      <typeparam name="T3">指定區塊的第三個目標所接受的資料型別。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32)">
      <summary>使用指定的組態，初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" />。</summary>
      <param name="batchSize">要群組成單一批次的項目數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" /> 必須是正數。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>使用指定的組態，初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" />。</summary>
      <param name="batchSize">要群組成單一批次的項目數。</param>
      <param name="dataflowBlockOptions">用來設定這個 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> 的選項。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" /> 必須是正數。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.BatchSize">
      <summary>取得 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> 所產生的批次大小。</summary>
      <returns>批次大小。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Complete">
      <summary>向 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 發出訊號，表示不應接受也不應產生任何其他訊息，也不應使用任何其他延後的訊息。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Completion">
      <summary>取得 <see cref="T:System.Threading.Tasks.Task" />，其表示非同步作業和資料流程區塊的完成。</summary>
      <returns>工作。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>將 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 連結至指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target">要連線到此資源的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">如果在順利散佈單一訊息之後來源應該取消和目標間的連結，則為 <see langword="true" />，<see langword="false" /> 表示即使在散佈單一訊息之後仍要保持連接。</param>
      <returns>IDisposable，在呼叫 Dispose 時，將會取消來源和目標間的連結。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 null (在 Visual Basic 中為 Nothing) 或 <paramref name="linkOptions" /> 為 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.OutputCount">
      <summary>取得可從此區塊接收的輸出項目數目。</summary>
      <returns>輸出項目的數目。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>造成 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 的狀態中完成。</summary>
      <param name="exception">導致錯誤的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Boolean@)">
      <param name="messageHeader" />
      <param name="target" />
      <param name="messageConsumed" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target1">
      <summary>取得可用來提供第一個類型之訊息的目標。</summary>
      <returns>目標。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target2">
      <summary>取得可用來提供第二個類型之訊息的目標。</summary>
      <returns>目標。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target3">
      <summary>取得可用來提供第三個類型之訊息的目標。</summary>
      <returns>目標。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.ToString">
      <summary>傳回表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</summary>
      <returns>表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收可用的輸出項目。</summary>
      <param name="filter">述詞的值必須成功傳遞才能讓它接收。  <paramref name="filter" /> 可以是 <see langword="null" />，在這種情況下所有項目都會通過。</param>
      <param name="item">從來源接收的項目。</param>
      <returns>如果可以接收項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}}@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收所有可用項目。</summary>
      <param name="items">從來源接收的項目。</param>
      <returns>如果無法收到一或多個項目，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1">
      <summary>提供緩衝區，一次至多儲存一個項目，並在下一個訊息到達時覆寫每個訊息。</summary>
      <typeparam name="T">指定此資料流區塊目標區塊緩衝之資料的型別。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0})">
      <summary>使用指定的複製函式初始化 <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" />。</summary>
      <param name="cloningFunction">當提供資料給其他區塊時，用來複製資料的函式。</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>使用指定的複製函式和 <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> 將 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> 初始化。</summary>
      <param name="cloningFunction">當提供資料給其他區塊時，用來複製資料的函式。</param>
      <param name="dataflowBlockOptions">用來設定這個 <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> 的選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Complete">
      <summary>向 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 發出訊號，表示不應接受也不應產生任何其他訊息，也不應使用任何其他延後的訊息。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
      <summary>取得 <see cref="T:System.Threading.Tasks.Task" />，其表示非同步作業和資料流程區塊的完成。</summary>
      <returns>工作。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>將 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 連結至指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target">要將此來源連接至的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">設定連結的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 執行個體。</param>
      <returns>IDisposable，在呼叫 Dispose 時，將會取消來源和目標間的連結。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 null (在 Visual Basic 中為 Nothing) 或 <paramref name="linkOptions" /> 為 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>造成 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態下完成。</summary>
      <param name="exception">導致錯誤的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收所有可用項目。</summary>
      <param name="items">從來源接收的項目。</param>
      <returns>如果無法收到一或多個項目，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>由連結的<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />呼叫以接受及使用先前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader">使用的訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">使用訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed">如果成功使用訊息，則為 <see langword="true" />，否則為<see langword="false" />。</param>
      <returns>使用的訊息的值。 這可能會對應到不同的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體，這個執行個體已事先保留並作為 <paramref name="messageHeader" /> 傳遞到 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />必須使用傳回的值，而不是使用做為 <paramref name="messageValue" /> 經 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 傳送的值。
如果無法使用要求的訊息，則傳回的值就是<see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>由連結的<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />呼叫以釋出先前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 保留的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader">釋放的保留訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />，會釋放它先前保留的訊息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" /> 沒有保留訊息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>由連結的<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />呼叫以保留先前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader">保留的訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">保留訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <returns>如果成功保留訊息，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>提供了訊息給<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />，讓目標有機會使用或延後訊息。</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />執行個體，表示所提供的訊息的標頭。</param>
      <param name="messageValue">正在提供的訊息的值。</param>
      <param name="source">提供訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 這可能是 Null。</param>
      <param name="consumeToAccept">設為 <see langword="true" /> 以指示目標在呼叫 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 期間以非同步方式呼叫 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />，在傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> 之前，以便使用訊息。</param>
      <returns>提供之訊息的狀態。 如果目標已接受訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，而且來源不應該再使用所提供的訊息，因為現在它是由目標擁有。 如果訊息已由目標延後，會以通知形式傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />，目標稍後可能會嘗試使用或保留訊息，同時來源仍擁有訊息，而且可能會將訊息提供給其他區塊。
如果目標延後訊息，但 <paramref name="source" /> 為 <see langword="null" />，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。
如果目標嘗試接受訊息，但因為來源將訊息傳遞給另一個目標或直接捨棄訊息，使得目標遺漏訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />。
如果目標選擇不接受訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。 如果目標選擇不接受此訊息，且將不會接受來自此來源的其他訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。
或，如果提供非 null <paramref name="consumeToAccept" />，則 <paramref name="source" /> 只能為 true。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ToString">
      <summary>傳回表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</summary>
      <returns>表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收可用的輸出項目。</summary>
      <param name="filter">述詞的值必須成功傳遞才能讓它接收。  <paramref name="filter" /> 可能是<see langword="null" />，這種情況下將傳遞所有項目。</param>
      <param name="item">從來源接收的項目。</param>
      <returns>如果可以接收項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BufferBlock`1">
      <summary>提供儲存資料流程資料的緩衝區。</summary>
      <typeparam name="T">指定此資料流區塊目標區塊緩衝之資料的型別。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor">
      <summary>初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>使用指定的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />，將新的 <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" /> 初始化。</summary>
      <param name="dataflowBlockOptions">用來設定這個 <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" /> 的選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.Complete">
      <summary>向 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 發出訊號，表示不應接受也不應產生任何其他訊息，也不應使用任何其他延後的訊息。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Completion">
      <summary>取得 <see cref="T:System.Threading.Tasks.Task" />，其表示非同步作業和資料流程區塊的完成。</summary>
      <returns>工作。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Count">
      <summary>取得目前儲存在緩衝區中的項目數。</summary>
      <returns>項目的數目。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>將 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 連結至指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target">要將此來源連接至的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">設定連結的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 執行個體。</param>
      <returns>IDisposable，在呼叫 Dispose 時，將會取消來源和目標間的連結。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 null (在 Visual Basic 中為 Nothing) 或 <paramref name="linkOptions" /> 為 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>造成 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 的狀態中完成。</summary>
      <param name="exception">導致錯誤的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>由連結的<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />呼叫以接受及使用先前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader">使用的訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">使用訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed">如果成功使用訊息，則為 <see langword="true" />，否則為<see langword="false" />。</param>
      <returns>使用的訊息的值。 這可能會對應到不同的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體，這個執行個體已事先保留並作為 <paramref name="messageHeader" /> 傳遞到 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />必須使用傳回的值，而不是使用做為 <paramref name="messageValue" /> 經 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 傳送的值。
如果無法使用要求的訊息，則傳回的值就是<see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>由連結的<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />呼叫以釋出先前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 保留的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader">釋放的保留訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />，會釋放它先前保留的訊息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" /> 沒有保留訊息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>由連結的<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />呼叫以保留先前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader">保留的訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">保留訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <returns>如果成功保留訊息，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>提供了訊息給<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />，讓目標有機會使用或延後訊息。</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />執行個體，表示所提供的訊息的標頭。</param>
      <param name="messageValue">正在提供的訊息的值。</param>
      <param name="source">提供訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 這可能是 <see langword="null" />。</param>
      <param name="consumeToAccept">設為 true 以指示目標 在傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> 之前，於呼叫 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 期間以非同步方式呼叫 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />，以便使用訊息。</param>
      <returns>提供之訊息的狀態。 如果目標已接受訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，而且來源不應該再使用所提供的訊息，因為現在它是由目標擁有。 如果訊息已由目標延後，會以通知形式傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />，目標稍後可能會嘗試使用或保留訊息，同時來源仍擁有訊息，而且可能會將訊息提供給其他區塊。
如果目標延後訊息，但 <paramref name="source" /> 為 <see langword="null" />，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。
如果目標嘗試接受訊息，但因為來源將訊息傳遞給另一個目標或直接捨棄訊息，使得目標遺漏訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />。
如果目標選擇不接受訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。 如果目標選擇不接受此訊息，且將不會接受來自此來源的其他訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。
或，如果提供非 null <paramref name="consumeToAccept" />，則 <paramref name="source" /> 只能為 true。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.ToString">
      <summary>傳回表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</summary>
      <returns>表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收可用的輸出項目。</summary>
      <param name="filter">述詞的值必須成功傳遞才能讓它接收。 <paramref name="filter" /> 可能是<see langword="null" />，這種情況下將傳遞所有項目。</param>
      <param name="item">從來源接收的項目。</param>
      <returns>如果可以接收項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收所有可用項目。</summary>
      <param name="items">從來源接收的項目。</param>
      <returns>如果無法收到一或多個項目，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlock">
      <summary>提供一組 static (Visual Basic 中是 Shared) 方法，以處理資料流程區塊。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>建立在 <see cref="T:System.IObservable`1" /> 之上的新 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> Abstraction。</summary>
      <param name="source">要包裝的來源。</param>
      <typeparam name="TOutput">指定來源所包含的資料型別。</typeparam>
      <returns>可讓觀察器供來源訂閱的 <see cref="T:System.IObservable`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary>建立在 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 之上的新 <see cref="T:System.IObserver`1" /> Abstraction。</summary>
      <param name="target">要包裝的目標。</param>
      <typeparam name="TInput">指定目標區塊所接受的輸入型別。</typeparam>
      <returns>包裝目標區塊的觀察器。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})">
      <summary>監視兩個資料流程來源，叫用先提供資料的任一個來源的提供之處理常式。</summary>
      <param name="source1">第一個來源。</param>
      <param name="action1">要對第一個來源的資料執行的處理常式。</param>
      <param name="source2">第二個來源。</param>
      <param name="action2">要對第二個來源的資料執行的處理常式。</param>
      <typeparam name="T1">指定第一個來源包含的資料型別。</typeparam>
      <typeparam name="T2">指定第二個來源包含的資料型別。</typeparam>
      <returns>表示非同步選擇的 <see cref="T:System.Threading.Tasks.Task`1" />。 如果在選擇完成前兩個來源都已完成，則產生的工作將被取消。 當其中一個來源有可使用的資料，並成功將它傳播到選擇，則在處理常式完成時，產生的工作會完成，如果處理常式擲回例外狀況，工作會以 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態結束，並包含未處理的例外狀況。 否則，工作會結束，其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 設定為 0 或 1，分別代表第一個或第二個來源。
這個方法會只使用兩個資料來源的其中一個資料來源的項目，永遠不會同時使用兩者。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 為 <see langword="null" />。
-或-
<paramref name="action1" /> 為 <see langword="null" />。
-或-
<paramref name="source2" /> 為 <see langword="null" />。
-或-
<paramref name="action2" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>監視兩個資料流程來源，叫用先提供資料的任一個來源的提供之處理常式。</summary>
      <param name="source1">第一個來源。</param>
      <param name="action1">要對第一個來源的資料執行的處理常式。</param>
      <param name="source2">第二個來源。</param>
      <param name="action2">要對第二個來源的資料執行的處理常式。</param>
      <param name="dataflowBlockOptions">用來設定這個選擇的選項。</param>
      <typeparam name="T1">指定第一個來源包含的資料型別。</typeparam>
      <typeparam name="T2">指定第二個來源包含的資料型別。</typeparam>
      <returns>表示非同步選擇的 <see cref="T:System.Threading.Tasks.Task`1" />。 如果在選擇完成前兩個來源都已完成，或者如果在選擇完成前隨 <paramref name="dataflowBlockOptions" /> 提供的 <see cref="T:System.Threading.CancellationToken" /> 已取消，產生的工作將會被取消。 當其中一個來源有可使用的資料，並成功將它傳播到選擇，則在處理常式完成時，產生的工作會完成，如果處理常式擲回例外狀況，工作會以 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態結束，並包含未處理的例外狀況。 否則，工作會結束，其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 設定為 0 或 1，分別代表第一個或第二個來源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 為 <see langword="null" />。
-或-
<paramref name="action1" /> 為 <see langword="null" />。
-或-
<paramref name="source2" /> 為 <see langword="null" />。
-或-
<paramref name="action2" /> 為 <see langword="null" />。
-或-
<paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})">
      <summary>監視三個資料流程來源，叫用先提供資料的任一個來源的提供之處理常式。</summary>
      <param name="source1">第一個來源。</param>
      <param name="action1">要對第一個來源的資料執行的處理常式。</param>
      <param name="source2">第二個來源。</param>
      <param name="action2">要對第二個來源的資料執行的處理常式。</param>
      <param name="source3">第三個來源。</param>
      <param name="action3">要從第三來源對資料執行的處理常式。</param>
      <typeparam name="T1">指定第一個來源包含的資料型別。</typeparam>
      <typeparam name="T2">指定第二個來源包含的資料型別。</typeparam>
      <typeparam name="T3">指定第三個來源所包含的資料型別。</typeparam>
      <returns>表示非同步選擇的 <see cref="T:System.Threading.Tasks.Task`1" />。 如果在選擇完成前所有來源都已完成，則產生的工作將被取消。 當其中一個來源有可使用的資料，並成功將它傳播到選擇，則在處理常式完成時，產生的工作會完成，如果處理常式擲回例外狀況，工作會以 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態結束，並包含未處理的例外狀況。 否則，工作會結束，其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 設定為以 0 起始的來源索引。
這個方法會只使用其中一個資料來源的項目，永遠不會是多個。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 為 <see langword="null" />。
-或-
<paramref name="action1" /> 為 <see langword="null" />。
-或-
<paramref name="source2" /> 為 <see langword="null" />。
-或-
<paramref name="action2" /> 為 <see langword="null" />。
-或-
<paramref name="source3" /> 為 <see langword="null" />。
-或-
<paramref name="action3" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>監視三個資料流程來源，叫用先提供資料的任一個來源的提供之處理常式。</summary>
      <param name="source1">第一個來源。</param>
      <param name="action1">要對第一個來源的資料執行的處理常式。</param>
      <param name="source2">第二個來源。</param>
      <param name="action2">要對第二個來源的資料執行的處理常式。</param>
      <param name="source3">第三個來源。</param>
      <param name="action3">要從第三來源對資料執行的處理常式。</param>
      <param name="dataflowBlockOptions">用來設定這個選擇的選項。</param>
      <typeparam name="T1">指定第一個來源包含的資料型別。</typeparam>
      <typeparam name="T2">指定第二個來源包含的資料型別。</typeparam>
      <typeparam name="T3">指定第三個來源所包含的資料型別。</typeparam>
      <returns>表示非同步選擇的 <see cref="T:System.Threading.Tasks.Task`1" />。 如果在選擇完成前所有來源都已完成，或者如果在選擇完成前隨 <paramref name="dataflowBlockOptions" /> 提供的 <see cref="T:System.Threading.CancellationToken" /> 已取消，產生的工作將會被取消。 當其中一個來源有可使用的資料，並成功將它傳播到選擇，則在處理常式完成時，產生的工作會完成，如果處理常式擲回例外狀況，工作會以 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態結束，並包含未處理的例外狀況。 否則，工作會結束，其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 設定為以 0 起始的來源索引。
這個方法會只使用其中一個資料來源的項目，永遠不會是多個。 如果在收到項目之後才要求取消時，取消要求會被忽略，而且會允許相關的處理常式執行。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 為 <see langword="null" />。
-或-
<paramref name="action1" /> 為 <see langword="null" />。
-或-
<paramref name="source2" /> 為 <see langword="null" />。
-或-
<paramref name="action2" /> 為 <see langword="null" />。
-或-
<paramref name="source3" /> 為 <see langword="null" />。
-或-
<paramref name="action3" /> 為 <see langword="null" />。
-或-
<paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})">
      <summary>將目標和來源封裝成單一傳播程式。</summary>
      <param name="target">要封裝的目標</param>
      <param name="source">要封裝的來源。</param>
      <typeparam name="TInput">指定目標所預期的輸入型別。</typeparam>
      <typeparam name="TOutput">指定來源所產生的輸出類型。</typeparam>
      <returns>封裝的目標和來源。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary>將 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 連結到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="source">要從其中進行連結的來源。</param>
      <param name="target">要將來源連接至的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <typeparam name="TOutput">指定來源所包含的資料型別。</typeparam>
      <returns>
        <see cref="T:System.IDisposable" />，這會在呼叫 <see langword="Dispose" /> 時立即取消來源與目標的連結。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
<paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})">
      <summary>使用指定的篩選器，將 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 連結到 指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="source">要從其中進行連結的來源。</param>
      <param name="target">來源所要連線到的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="predicate">訊息必須通過的篩選條件，才能讓它可以從來源傳播至目標。</param>
      <typeparam name="TOutput">指定來源所包含的資料型別。</typeparam>
      <returns>
        <see cref="T:System.IDisposable" />，這會在呼叫 <see langword="Dispose" /> 時立即取消來源與目標的連結。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
<paramref name="target" /> 為 <see langword="null" />。
-或-
<paramref name="predicate" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})">
      <summary>使用指定的篩選器，將 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 連結到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="source">要從其中進行連結的來源。</param>
      <param name="target">來源所要連線到的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">其中一個列舉值，指定如何設定資料流程區塊之間的連結。</param>
      <param name="predicate">訊息必須通過的篩選條件，才能讓它可以從來源傳播至目標。</param>
      <typeparam name="TOutput">指定來源所包含的資料型別。</typeparam>
      <returns>
        <see cref="T:System.IDisposable" />，這會在呼叫 <see langword="Dispose" /> 時立即取消來源與目標的連結。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null (在 Visual Basic 中為 Nothing)。
-或-
<paramref name="target" /> 為 null (在 Visual Basic 中為 Nothing)。
-或-
<paramref name="linkOptions" /> 為 null (在 Visual Basic 中為 Nothing)。
-或-
<paramref name="predicate" /> 為 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1">
      <summary>取得目標區塊，以同步方式接受並置放提供給它的所有訊息。</summary>
      <typeparam name="TInput">此區塊可以接受的訊息的類型。</typeparam>
      <returns>接受而隨後會捨棄所提供之所有訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>提供 <see cref="T:System.Threading.Tasks.Task`1" />，以非同步方式監視可用輸出的來源。</summary>
      <param name="source">要監視的來源。</param>
      <typeparam name="TOutput">指定來源所包含的資料型別。</typeparam>
      <returns>通知是否有更多輸出以及其何時可用的 <see cref="T:System.Threading.Tasks.Task`1" />。 如果在工作完成時其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 為 <see langword="true" />，來源中有多個輸出 (雖然來源的另一個消費者可能會擷取資料)。
如果它傳回 <see langword="false" />，現在和未來都沒有其他輸出，因為在輸出可用之前來源已完成。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>提供 <see cref="T:System.Threading.Tasks.Task`1" />，以非同步方式監視可用輸出的來源。</summary>
      <param name="source">要監視的來源。</param>
      <param name="cancellationToken">取消語彙基元，用來取消非同步作業。</param>
      <typeparam name="TOutput">指定來源所包含的資料型別。</typeparam>
      <returns>通知是否有更多輸出以及其何時可用的 <see cref="T:System.Threading.Tasks.Task`1" />。 如果在工作完成時其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 為 <see langword="true" />，來源中有多個輸出 (雖然來源的另一個消費者可能會擷取資料)。 如果它傳回 <see langword="false" />，現在和未來都沒有其他輸出，因為在輸出可用之前來源已完成。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary>將項目張貼至 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target">目標區塊。</param>
      <param name="item">提供給目標的項目。</param>
      <typeparam name="TInput">指定目標區塊所接受的資料型別。</typeparam>
      <returns>如果目標區塊已接受項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>以同步方式接收來自指定之來源的值。</summary>
      <param name="source">要從其中接收值的來源。</param>
      <typeparam name="TOutput">來源中包含的資料類型。</typeparam>
      <returns>接收到的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">無法從來源接收項目。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>同步接收指定之來源的值，並提供語彙基元取消作業。</summary>
      <param name="source">要從其中接收值的來源。</param>
      <param name="cancellationToken">要用來取消接收作業的語彙基元。</param>
      <typeparam name="TOutput">來源中包含的資料類型。</typeparam>
      <returns>接收到的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">無法從來源接收項目。</exception>
      <exception cref="T:System.OperationCanceledException">從來源收到項目之前，已取消作業。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary>同步接收指定之來源的值，觀察選擇性逾時期限。</summary>
      <param name="source">要從其中接收值的來源。</param>
      <param name="timeout">等待同步作業完成的最大時間間隔 (以毫秒為單位)，或者以 -1 表示無限期等候的時間間隔。</param>
      <typeparam name="TOutput">來源中包含的資料類型。</typeparam>
      <returns>接收到的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是一個不等於 -1 的負數，這表示無限的逾時時間。
-或-
<paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">無法從來源接收項目。</exception>
      <exception cref="T:System.TimeoutException">指定的逾時在從來源接收項目之前到期。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary>同步接收指定之來源的值，提供語彙基元取消作業並觀察選擇性逾時間隔。</summary>
      <param name="source">要從其中接收值的來源。</param>
      <param name="timeout">等待同步作業完成的最大時間間隔 (以毫秒為單位)，或者以 -1 表示無限期等候的時間間隔。</param>
      <param name="cancellationToken">要用來取消接收作業的語彙基元。</param>
      <typeparam name="TOutput">來源中包含的資料類型。</typeparam>
      <returns>接收到的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是一個不等於 -1 的負數，這表示無限的逾時時間。
-或-
<paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.InvalidOperationException">無法從來源接收項目。</exception>
      <exception cref="T:System.TimeoutException">指定的逾時在從來源接收項目之前到期。</exception>
      <exception cref="T:System.OperationCanceledException">從來源收到項目之前，已取消作業。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>以非同步方式接收來自指定之來源的值。</summary>
      <param name="source">要從其中接收值的來源。</param>
      <typeparam name="TOutput">來源中包含的資料類型。</typeparam>
      <returns>代表非同步接收作業的工作。 當成功從來源接收項目值時，傳回的工作已完成，而且其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 會傳回接收該值。 若因為來源為空且已完成而無法擷取項目值，會在傳回的工作中擲回 <see cref="T:System.InvalidOperationException" /> 例外狀況。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>非同步接收指定之來源的值，並提供語彙基元取消作業。</summary>
      <param name="source">要從其中接收值的來源。</param>
      <param name="cancellationToken">要用來取消接收作業的語彙基元。</param>
      <typeparam name="TOutput">指定來源所包含的資料型別。</typeparam>
      <returns>代表非同步接收作業的工作。 當成功從來源接收值時，傳回的工作已完成，而且其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 會傳回該值。 如果因為要求取消而無法擷取值，則取消傳回的工作。 若因為來源為空且已完成而無法擷取值，會在傳回的工作中擲回 <see cref="T:System.InvalidOperationException" /> 例外狀況。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary>非同步接收指定之來源的值，觀察選擇性逾時期限。</summary>
      <param name="source">要從其中接收值的來源。</param>
      <param name="timeout">等待同步作業完成的最大時間間隔 (以毫秒為單位)，或者以 -1 表示無限期等候的時間間隔。</param>
      <typeparam name="TOutput">來源中包含的資料類型。</typeparam>
      <returns>代表非同步接收作業的工作。 當成功從來源接收值時，傳回的工作已完成，而且其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 會傳回該值。 如果因為逾時到期而無法擷取值，則取消傳回的工作。 若因為來源為空且已完成而無法擷取值，會在傳回的工作中擲回 <see cref="T:System.InvalidOperationException" /> 例外狀況。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是一個不等於 -1 的負數，這表示無限的逾時時間。
-或-
<paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary>非同步接收指定之來源的值，提供語彙基元取消作業並觀察選擇性逾時間隔。</summary>
      <param name="source">要從其中接收值的來源。</param>
      <param name="timeout">等待同步作業完成的最大時間間隔 (以毫秒為單位)，或者以 -1 表示無限期等候的時間間隔。</param>
      <param name="cancellationToken">可能用來取消接收作業的語彙基元。</param>
      <typeparam name="TOutput">來源中包含的資料類型。</typeparam>
      <returns>代表非同步接收作業的工作。 當成功從來源接收值時，傳回的工作已完成，而且其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 會傳回該值。 如果因為逾時到期或要求取消而無法擷取值，則取消傳回的工作。 如果因為來源是空的和已完成，而無法擷值，則會在傳回的工作中擲回 <see cref="T:System.InvalidOperationException" /> 例外狀況。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是一個不等於 -1 的負數，這表示無限的逾時時間。
-或-
<paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary>非同步提供訊息給目標訊息區，並允許延遲。</summary>
      <param name="target">要公佈資料的目標。</param>
      <param name="item">提供給目標的項目。</param>
      <typeparam name="TInput">指定要發佈至目標的資料的型別。</typeparam>
      <returns>表示非同步傳送的 <see cref="T:System.Threading.Tasks.Task`1" />。 如果在呼叫 <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" /> 期間目標接受並使用所提供的項目，從呼叫返回時，所產生的 <see cref="T:System.Threading.Tasks.Task`1" /> 將完成，而且其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回 <see langword="true" />。 如果在呼叫期間目標拒絕所提供的項目，從呼叫返回時，所產生的 <see cref="T:System.Threading.Tasks.Task`1" /> 將完成，而且其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回 <see langword="false" />。 如果目標延後所提供的項目，則會緩衝項目直到目標耗用或釋放項目，此時將會完成工作，而其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 指出訊息是否已耗用。 如果目標永遠不會嘗試使用或釋放訊息，則傳回的工作永遠不會完成。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)">
      <summary>非同步提供訊息給目標訊息區，並允許延遲。</summary>
      <param name="target">要公佈資料的目標。</param>
      <param name="item">提供給目標的項目。</param>
      <param name="cancellationToken">取消語彙基元，用來要求取消傳送作業。</param>
      <typeparam name="TInput">指定要發佈至目標的資料的型別。</typeparam>
      <returns>表示非同步傳送的 <see cref="T:System.Threading.Tasks.Task`1" />。  若目標在呼叫 SendAsync 期間接受並使用所提供的項目，產生的 <see cref="T:System.Threading.Tasks.Task`1" /> 將於目標從呼叫返回時完成，且其 <c>Result</c> 屬性會傳回 true。  若目標在呼叫期間拒絕所提供的項目，產生的 <see cref="T:System.Threading.Tasks.Task`1" /> 將於目標從呼叫返回時完成，且其 <c>Result</c> 屬性會傳回 false。 若目標延後所提供的項目，會緩衝項目直到目標使用或釋放該項目，此時工作將會完成，而其 <c>Result</c> 會指出訊息是否已使用。 如果目標永遠不會嘗試使用或釋放訊息，則傳回的工作永遠不會完成。
如果在目標已成功地耗用傳送的資料之前已要求取消時，傳回的工作會在已取消狀態下完成，而資料將不再用於目標。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 接收項目。</summary>
      <param name="source">要從其中進行接收的來源。</param>
      <param name="item">從來源接收的項目。</param>
      <typeparam name="TOutput">指定來源所包含的資料型別。</typeparam>
      <returns>如果可以接收項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions">
      <summary>提供選項，用來設定資料流程區塊所執行的處理程序。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor">
      <summary>初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity">
      <summary>取得或設定區塊可以緩衝的訊息數目上限。</summary>
      <returns>訊息數目上限。 預設值為 -1，表示不限數目的訊息。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.CancellationToken">
      <summary>取得或設定 <see cref="T:System.Threading.CancellationToken" /> 以監視是否有取消要求。</summary>
      <returns>權杖。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.EnsureOrdered">
      <summary>取得或設定值，指出是否應在區塊的訊息處理，強制進行排序處理。</summary>
      <returns>
        <see langword="true" />如果應該強制執行已排序的處理，則為否則為<see langword="false" />。 預設值為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.MaxMessagesPerTask">
      <summary>取得或設定可在每個工作中處理的訊息最大數目。</summary>
      <returns>訊息數目上限。 預設值為 -1，表示不限數目的訊息。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat">
      <summary>取得或設定查詢區塊名稱時所要使用的格式字串。</summary>
      <returns>查詢區塊名稱時所要使用的格式字串。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.TaskScheduler">
      <summary>取得或設定用於排程工作的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
      <returns>工作排程器。</returns>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.Unbounded">
      <summary>用來為提供上限之 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> 成員指定無限制數量的常數。 這個欄位是常數。</summary>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions">
      <summary>提供選項，用來設定資料流程區塊之間的連結。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.#ctor">
      <summary>初始化 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.Append">
      <summary>取得或設定連結是否附加至來源的連結清單，或者是否應在前面加上。</summary>
      <returns>傳回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.MaxMessages">
      <summary>取得或設定可在整個連結中耗用的訊息最大數目。</summary>
      <returns>傳回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.PropagateCompletion">
      <summary>取得或設定是否會自動將完成和惡性例外狀況傳播給連結目標。</summary>
      <returns>傳回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader">
      <summary>為資料流程區塊之間傳遞的資料屬性提供容器。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.#ctor(System.Int64)">
      <summary>使用指定的屬性，初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</summary>
      <param name="id">訊息的 ID。 在原始來源區塊內必須是唯一。 它不需要是全域唯一的。</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Object)">
      <summary>依 ID 檢查 Boxed <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體是否相等。</summary>
      <param name="obj">Boxed <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體。</param>
      <returns>如果執行個體相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>不經過 Boxing 處理，依照識別碼檢查兩個 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體是否相等。</summary>
      <param name="other">另一個 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體。</param>
      <returns>如果執行個體 (Instance) 相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.GetHashCode">
      <summary>產生 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體的雜湊碼。</summary>
      <returns>雜湊程式碼。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Id">
      <summary>取得來源中的訊息 ID。</summary>
      <returns>包含在<see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />實例中的識別碼。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.IsValid">
      <summary>取得訊息的有效性。</summary>
      <returns>如果訊息 ID 不同於 0，則為 <see langword="true" />。 如果訊息 ID 是 0 則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Equality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>依照識別碼檢查兩個 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體是否相等。</summary>
      <param name="left">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體。</param>
      <param name="right">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體。</param>
      <returns>如果執行個體相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Inequality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>依照識別碼檢查兩個 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體是否不相等。</summary>
      <param name="left">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體。</param>
      <param name="right">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體。</param>
      <returns>如果執行個體不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageStatus">
      <summary>表示<see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 在資料流區塊之間傳遞時的狀態。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted">
      <summary>表示 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 已接受訊息。 一旦目標已接受訊息，它就是目標所完整擁有的。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined">
      <summary>表示 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 已拒絕訊息。 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 仍擁有該訊息。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently">
      <summary>表示 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 已拒絕訊息。 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 仍擁有該訊息。
此外，<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 還會拒絕這個來源日後傳送的所有訊息。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable">
      <summary>表示 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 嘗試接受來自 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 的訊息，但訊息已無法使用。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed">
      <summary>表示 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 已延後訊息可能耗用。
<see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 仍擁有該訊息。</summary>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions">
      <summary>提供選項，用來設定透過使用者提供的委派引動過程處理每個訊息的資料流程區塊所執行的處理程序。 這些是資料流程區塊，例如 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 和 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.#ctor">
      <summary>初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.MaxDegreeOfParallelism">
      <summary>取得區塊可以同時處理的訊息最大數目。</summary>
      <returns>訊息數目上限。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.SingleProducerConstrained">
      <summary>取得使用資料流程區塊的程式碼是否被限制為一次一個生產者。</summary>
      <returns>傳回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions">
      <summary>提供選項，用來設定將多個訊息群組在一起的資料流程區塊所執行的處理程序。 這些是資料流程區塊，例如 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> 和 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.#ctor">
      <summary>初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions" />。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.Greedy">
      <summary>取得或設定布林值，用於判定是否窮盡消耗提供的訊息。</summary>
      <returns>
        <see langword="true" /> 要窮盡消耗所提供的訊息，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.MaxNumberOfGroups">
      <summary>取得或設定區塊應產生的最大群組數目。</summary>
      <returns>群組數上限。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IDataflowBlock">
      <summary>表示資料流程區塊。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete">
      <summary>向 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 發出訊號，表示不應接受也不應產生任何其他訊息，也不應使用任何其他延後的訊息。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion">
      <summary>取得 <see cref="T:System.Threading.Tasks.Task" />，其表示非同步作業和資料流程區塊的完成。</summary>
      <returns>工作。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)">
      <summary>造成 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 的狀態中完成。</summary>
      <param name="exception">導致錯誤的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2">
      <summary>表示同時為資料目標及資料來源的資料流程區塊。</summary>
      <typeparam name="TInput">指定所<see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" />接受的資料類型。</typeparam>
      <typeparam name="TOutput">指定所<see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" />提供的資料類型。</typeparam>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1">
      <summary>表示支援接收訊息而不連結的資料流程區塊。</summary>
      <typeparam name="TOutput">指定 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 提供的資料型別。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收可用的輸出項目。</summary>
      <param name="filter">述詞的值必須成功傳遞才能讓它接收。  <paramref name="filter" /> 可能是<see langword="null" />，這種情況下將傳遞所有項目。</param>
      <param name="item">從來源接收的項目。</param>
      <returns>如果可以接收項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收所有可用項目。</summary>
      <param name="items">從來源接收的項目。</param>
      <returns>如果無法收到一或多個項目，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ISourceBlock`1">
      <summary>表示為資料來源的資料流程區塊。</summary>
      <typeparam name="TOutput">指定 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />所提供的資料類型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>由連結的<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />呼叫以接受及使用先前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader">使用的訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">使用訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed">如果成功使用訊息，則為 <see langword="true" />，否則為<see langword="false" />。</param>
      <returns>使用的訊息的值。 這可能會對應到不同的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體，這個執行個體已事先保留並作為 <paramref name="messageHeader" /> 傳遞到 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />必須使用傳回的值，而不是使用做為 <paramref name="messageValue" /> 經 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 傳送的值。
如果無法取得要求的訊息，傳回值會是 null。</returns>
      <exception cref="T:System.ArgumentException">messageHeader 無效。</exception>
      <exception cref="T:System.ArgumentNullException">目標是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>將 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 連結至指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target">要連線到此資源的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">設定連結的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 執行個體。</param>
      <returns>IDisposable，在呼叫 Dispose 時，將會取消來源和目標間的連結。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 null (在 Visual Basic 中為 Nothing) 或 <paramref name="linkOptions" /> 為 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>由連結的<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />呼叫以釋出先前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 保留的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader">釋放的保留訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />，會釋放它先前保留的訊息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" /> 沒有保留訊息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>由連結的<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />呼叫以保留先前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader">保留的訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">保留訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <returns>如果成功保留訊息，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ITargetBlock`1">
      <summary>表示為資料目標的資料流區塊。</summary>
      <typeparam name="TInput">指定 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 接受的資料型別。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>提供了訊息給<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />，讓目標有機會使用或延後訊息。</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />執行個體，表示所提供的訊息的標頭。</param>
      <param name="messageValue">正在提供的訊息的值。</param>
      <param name="source">提供訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 這可能是 Null。</param>
      <param name="consumeToAccept">設為 <see langword="true" /> 以指示目標在呼叫 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 期間以非同步方式呼叫 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />，在傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> 之前，以便使用訊息。</param>
      <returns>提供之訊息的狀態。 如果目標已接受訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，而且來源不應該再使用所提供的訊息，因為現在它是由目標擁有。 如果訊息已由目標延後，會以通知形式傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />，目標稍後可能會嘗試使用或保留訊息，同時來源仍擁有訊息，而且可能會將訊息提供給其他區塊。
如果目標延後訊息，但來源為 <see langword="null" />，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。
如果目標嘗試接受訊息，但因為來源將訊息傳遞給另一個目標或直接捨棄訊息，使得目標遺漏訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />。
如果目標選擇不接受訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。 如果目標選擇不接受此訊息，且將不會接受來自此來源的其他訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。
或，如果提供非 null <paramref name="consumeToAccept" />，則 <paramref name="source" /> 只能為 true。</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`2">
      <summary>提供資料流程區塊，其跨多個資料流程來源 (不一定是相同的類型) 進行聯結，並等待每一種類型的一個項目抵達後，才會將它們當作每一種類型一個項目所組成的 Tuple，全部一起釋放。</summary>
      <typeparam name="T1">指定區塊的第一個目標所接受的資料型別。</typeparam>
      <typeparam name="T2">指定區塊的第二個目標所接受的資料型別。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor">
      <summary>初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />。</summary>
      <param name="dataflowBlockOptions">用來設定這個<see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> 的選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.Complete">
      <summary>向 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 發出訊號，表示不應接受也不應產生任何其他訊息，也不應使用任何其他延後的訊息。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Completion">
      <summary>取得 <see cref="T:System.Threading.Tasks.Task" />，其表示非同步作業和資料流程區塊的完成。</summary>
      <returns>工作。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>將 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 連結至指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target">將 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 連結至指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">設定連結的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 執行個體。</param>
      <returns>IDisposable，在呼叫 Dispose 時，將會取消來源和目標間的連結。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 null (在 Visual Basic 中為 Nothing) 或 <paramref name="linkOptions" /> 為 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.OutputCount">
      <summary>取得可從此區塊接收的輸出項目數目。</summary>
      <returns>輸出項目的數目。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>造成 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態下完成。</summary>
      <param name="exception">導致錯誤的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Boolean@)">
      <param name="messageHeader" />
      <param name="target" />
      <param name="messageConsumed" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target1">
      <summary>取得可用來提供第一個類型之訊息的目標。</summary>
      <returns>目標。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target2">
      <summary>取得可用來提供第二個類型之訊息的目標。</summary>
      <returns>目標。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.ToString">
      <summary>傳回表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</summary>
      <returns>表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceive(System.Predicate{System.Tuple{`0,`1}},System.Tuple{`0,`1}@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收可用的輸出項目。</summary>
      <param name="filter">述詞的值必須成功傳遞才能讓它接收。  <paramref name="filter" /> 可能是<see langword="null" />，這種情況下將傳遞所有項目。</param>
      <param name="item">從來源接收的項目。</param>
      <returns>如果可以接收項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1}}@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收所有可用項目。</summary>
      <param name="items">從來源接收的項目。</param>
      <returns>如果無法收到一或多個項目，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`3">
      <summary>提供資料流程區塊，其跨多個資料流程來源 (不一定是相同的類型) 進行聯結，並等待每一種類型的一個項目抵達後，才會將它們當作 Tuple (包含每一種類型的一個項目)，全部一起釋放。</summary>
      <typeparam name="T1">指定區塊的第一個目標所接受的資料型別。</typeparam>
      <typeparam name="T2">指定區塊的第二個目標所接受的資料型別。</typeparam>
      <typeparam name="T3">指定區塊的第三個目標所接受的資料型別。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor">
      <summary>初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />。</summary>
      <param name="dataflowBlockOptions">用來設定這個<see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> 的選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.Complete">
      <summary>向 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 發出訊號，表示不應接受也不應產生任何其他訊息，也不應使用任何其他延後的訊息。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Completion">
      <summary>取得 <see cref="T:System.Threading.Tasks.Task" />，其表示非同步作業和資料流程區塊的完成。</summary>
      <returns>工作。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>將來源區塊連結至指定的目標區塊。</summary>
      <param name="target">要連線到此來源的目標區塊。</param>
      <param name="linkOptions">設定連結的物件。</param>
      <returns>當呼叫 <see cref="M:System.IDisposable.Dispose" /> 方法時，會將來源從目標取消連結的可處置物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。
-或-
<paramref name="linkOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.OutputCount">
      <summary>取得可從此區塊接收的輸出項目數目。</summary>
      <returns>輸出項目的數目。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>造成 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 的狀態中完成。</summary>
      <param name="exception">導致錯誤的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Boolean@)">
      <param name="messageHeader" />
      <param name="target" />
      <param name="messageConsumed" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target1">
      <summary>取得可用來提供第一個類型之訊息的目標。</summary>
      <returns>目標。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target2">
      <summary>取得可用來提供第二個類型之訊息的目標。</summary>
      <returns>目標。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target3">
      <summary>取得可用來提供第三個類型之訊息的目標。</summary>
      <returns>目標。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.ToString">
      <summary>傳回表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</summary>
      <returns>表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceive(System.Predicate{System.Tuple{`0,`1,`2}},System.Tuple{`0,`1,`2}@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收可用的輸出項目。</summary>
      <param name="filter">述詞的值必須成功傳遞才能讓它接收。  <paramref name="filter" /> 可能是<see langword="null" />，這種情況下將傳遞所有項目。</param>
      <param name="item">從來源接收的項目。</param>
      <returns>如果可以接收項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1,`2}}@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收所有可用項目。</summary>
      <param name="items">從來源接收的項目。</param>
      <returns>如果無法收到一或多個項目，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformBlock`2">
      <summary>提供資料流程區塊，為每個收到的資料項目叫用提供的 <see cref="T:System.Func`2" /> 委派。</summary>
      <typeparam name="TInput">指定由這個 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 接收和作業的資料型別。</typeparam>
      <typeparam name="TOutput">指定此 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />輸出的資料類型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1})">
      <summary>使用指定的 <see cref="T:System.Func`2" />，將新的 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 初始化。</summary>
      <param name="transform">要以各個接收的資料項目叫用的函式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>使用指定的 <see cref="T:System.Func`2" /> 與 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />，將新的 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 初始化。</summary>
      <param name="transform">要以各個接收的資料項目叫用的函式。</param>
      <param name="dataflowBlockOptions">用來設定這個 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 的選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> 為 <see langword="null" />。
-或-
<paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})">
      <summary>使用指定的 <see cref="T:System.Func`2" />，將新的 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 初始化。</summary>
      <param name="transform">要以各個接收的資料項目叫用的函式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>使用指定的 <see cref="T:System.Func`2" /> 與 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />，將新的 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 初始化。</summary>
      <param name="transform">要以各個接收的資料項目叫用的函式。</param>
      <param name="dataflowBlockOptions">用來設定這個 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 的選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> 為 <see langword="null" />。
-或-
<paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.Complete">
      <summary>向 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 發出訊號，表示不應接受也不應產生任何其他訊息，也不應使用任何其他延後的訊息。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.Completion">
      <summary>取得 <see cref="T:System.Threading.Tasks.Task" />，其表示非同步作業和資料流程區塊的完成。</summary>
      <returns>工作。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.InputCount">
      <summary>取得等候由這個區塊處理的輸入項目的數目。</summary>
      <returns>輸入項目的數目。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>將 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 連結至指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target">要連線到此資源的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">設定連結的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 執行個體。</param>
      <returns>IDisposable，在呼叫 Dispose 時，將會取消來源和目標間的連結。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 null (在 Visual Basic 中為 Nothing) 或 <paramref name="linkOptions" /> 為 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.OutputCount">
      <summary>取得可從此區塊接收的輸出項目數目。</summary>
      <returns>輸出項目的數目。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>造成 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 的狀態中完成。</summary>
      <param name="exception">導致錯誤的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary>由連結的<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />呼叫以接受及使用先前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader">使用的訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">使用訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed">如果成功使用訊息，則為 <see langword="true" />，否則為<see langword="false" />。</param>
      <returns>使用的訊息的值。 這可能會對應到不同的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體，這個執行個體先前已保留並做為 <paramref name="messageHeader" /> 傳遞到<see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />必須使用傳回的值，而不是使用做為 <paramref name="messageValue" /> 經 <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 傳送的值。
如果無法使用要求的訊息，則傳回的值就是<see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>由連結的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 呼叫以釋出先前由此 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 保留的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</summary>
      <param name="messageHeader">釋放的保留訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />，會釋放它先前保留的訊息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" /> 沒有保留訊息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>由連結的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 呼叫以保留先前由此 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</summary>
      <param name="messageHeader">保留的訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">保留訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <returns>如果成功保留訊息，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>提供了訊息給<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />，讓目標有機會使用或延後訊息。</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />執行個體，表示所提供的訊息的標頭。</param>
      <param name="messageValue">正在提供的訊息的值。</param>
      <param name="source">提供訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 這可能是 <see langword="null" />。</param>
      <param name="consumeToAccept">如果目標必須在傳回 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 之前，在呼叫 <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 期間，以同步方式呼叫 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> 以使用訊息，則為 <see langword="true" />。</param>
      <returns>提供之訊息的狀態。 如果目標已接受訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，而且來源不應該再使用所提供的訊息，因為現在它是由目標擁有。 如果訊息已由目標延後，會以通知形式傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />，目標稍後可能會嘗試使用或保留訊息，同時來源仍擁有訊息，而且可能會將訊息提供給其他區塊。
如果目標會延後，但來源是 <see langword="null" />，則改為傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。
如果目標嘗試接受訊息，但因為來源將訊息傳遞給另一個目標或直接捨棄訊息，使得目標遺漏訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />。
如果目標選擇不接受訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。 如果目標選擇不接受此訊息，且將不會接受來自此來源的其他訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。
或，如果提供非 null <paramref name="consumeToAccept" />，則 <paramref name="source" /> 只能為 true。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.ToString">
      <summary>傳回表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</summary>
      <returns>表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收可用的輸出項目。</summary>
      <param name="filter">述詞的值必須成功傳遞才能讓它接收。  <paramref name="filter" /> 可能是<see langword="null" />，這種情況下將傳遞所有項目。</param>
      <param name="item">從來源接收的項目。</param>
      <returns>如果可以接收項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收所有可用項目。</summary>
      <param name="items">從來源接收的項目。</param>
      <returns>如果無法收到一或多個項目，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2">
      <summary>提供資料流程區塊，為每個收到的資料項目叫用提供的 <see cref="T:System.Func`2" /> 委派。</summary>
      <typeparam name="TInput">指定由這個 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> 接收和作業的資料型別。</typeparam>
      <typeparam name="TOutput">指定這個 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> 產生的資料輸出類型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}})">
      <summary>使用指定的函式，初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />。</summary>
      <param name="transform">要以各個接收的資料項目叫用的函式。 所有從 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中傳回的資料都可以當做這個 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> 中的輸出來使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>使用指定的函式和 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />，初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />。</summary>
      <param name="transform">要以各個接收的資料項目叫用的函式。 所有從 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中傳回的資料都可以作為這個 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> 中的輸出使用。</param>
      <param name="dataflowBlockOptions">用來設定這個<see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> 的選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> 為 <see langword="null" />。
-或-
<paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}})">
      <summary>使用指定的函式，初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />。</summary>
      <param name="transform">要以各個接收的資料項目叫用的函式。 所有在 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中以非同步方式傳回的資料都可以作為這個 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> 中的輸出使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>使用指定的函式和 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />，初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />。</summary>
      <param name="transform">要以各個接收的資料項目叫用的函式。 所有在 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中以非同步方式傳回的資料都可以作為這個 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> 中的輸出使用。</param>
      <param name="dataflowBlockOptions">用來設定這個<see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> 的選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> 為 <see langword="null" />。
-或-
<paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Complete">
      <summary>向 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 發出訊號，表示不應接受也不應產生任何其他訊息，也不應使用任何其他延後的訊息。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Completion">
      <summary>取得 <see cref="T:System.Threading.Tasks.Task" />，其表示非同步作業和資料流程區塊的完成。</summary>
      <returns>工作。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.InputCount">
      <summary>取得等候由這個區塊處理的輸入項目的數目。</summary>
      <returns>輸入項目的數目。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>將 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 連結至指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target">要連線到此資源的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">設定連結的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 執行個體。</param>
      <returns>IDisposable，在呼叫 Dispose 時，將會取消來源和目標間的連結。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 null (在 Visual Basic 中為 Nothing) 或 <paramref name="linkOptions" /> 為 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.OutputCount">
      <summary>取得可從此區塊接收的輸出項目數目。</summary>
      <returns>輸出項目的數目。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>造成 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 的狀態中完成。</summary>
      <param name="exception">導致錯誤的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary>由連結的<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />呼叫以接受及使用先前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader">使用的訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">使用訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed">如果成功使用訊息，則為 <see langword="true" />，否則為<see langword="false" />。</param>
      <returns>使用的訊息的值。 這可能會對應到不同的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體，這個執行個體先前已保留並做為 <paramref name="messageHeader" /> 傳遞到<see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />必須使用傳回的值，而不是使用做為 <paramref name="messageValue" /> 經 OfferMessage <see cref="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 傳送的值。
如果無法使用要求的訊息，則傳回的值就是<see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>由連結的<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />呼叫以釋出先前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 保留的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader">釋放的保留訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />，會釋放它先前保留的訊息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" /> 沒有保留訊息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>由連結的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 呼叫以保留先前由此 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</summary>
      <param name="messageHeader">保留的訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">保留訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <returns>如果成功保留訊息，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>提供了訊息給<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />，讓目標有機會使用或延後訊息。</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />執行個體，表示所提供的訊息的標頭。</param>
      <param name="messageValue">正在提供的訊息的值。</param>
      <param name="source">提供訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 這可能是 <see langword="null" />。</param>
      <param name="consumeToAccept">如果目標必須在傳回 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 之前，在呼叫 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 期間，以同步方式呼叫 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> 以使用訊息，則為 <see langword="true" />。</param>
      <returns>提供之訊息的狀態。 如果目標已接受訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，而且來源不應該再使用所提供的訊息，因為現在它是目標所擁有。 如果訊息已由目標延後，會以通知形式傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />，目標稍後可能會嘗試使用或保留訊息，同時來源仍擁有訊息，而且可能會將訊息提供給其他區塊。
如果目標會延後，但來源是 <see langword="null" />，則改為傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。
如果目標嘗試接受訊息，但因為來源將訊息傳遞給另一個目標或直接捨棄訊息，使得目標遺漏訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />。
如果目標選擇不接受訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。 如果目標選擇不接受此訊息，且將不會接受來自此來源的其他訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。
-或-
如果提供非 null <paramref name="consumeToAccept" />，則<paramref name="source" /> 只可以是 true。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.ToString">
      <summary>傳回表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</summary>
      <returns>表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收可用的輸出項目。</summary>
      <param name="filter">述詞的值必須成功傳遞才能讓它接收。  <paramref name="filter" /> 可能是<see langword="null" />，這種情況下將傳遞所有項目。</param>
      <param name="item">從來源接收的項目。</param>
      <returns>如果可以接收項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收所有可用項目。</summary>
      <param name="items">從來源接收的項目。</param>
      <returns>如果無法收到一或多個項目，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1">
      <summary>提供緩衝區，以接收並儲存資料流程區塊網路中的最多一個項目。</summary>
      <typeparam name="T">指定此資料流區塊目標區塊緩衝之資料的型別。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0})">
      <summary>初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />。</summary>
      <param name="cloningFunction">當提供資料給其他區塊時，用來複製資料的函式。</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>使用指定的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />，將新的 <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" /> 初始化。</summary>
      <param name="cloningFunction">當提供資料給其他區塊時，用來複製資料的函式。</param>
      <param name="dataflowBlockOptions">用來設定這個<see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" /> 的選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Complete">
      <summary>向 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 發出訊號，表示不應接受也不應產生任何其他訊息，也不應使用任何其他延後的訊息。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Completion">
      <summary>取得 <see cref="T:System.Threading.Tasks.Task" />，其表示非同步作業和資料流程區塊的完成。</summary>
      <returns>工作。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>將 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 連結至指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target">要連線到此資源的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions">設定連結的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 執行個體。</param>
      <returns>IDisposable，在呼叫 Dispose 時，將會取消來源和目標間的連結。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 null (在 Visual Basic 中為 Nothing) 或 <paramref name="linkOptions" /> 為 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>造成 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態下完成。</summary>
      <param name="exception">導致錯誤的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收所有可用項目。</summary>
      <param name="items">從來源接收的項目。</param>
      <returns>如果無法收到一或多個項目，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>由連結的<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />呼叫以接受及使用先前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader">使用的訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">使用訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed">如果成功使用訊息，則為 <see langword="true" />，否則為<see langword="false" />。</param>
      <returns>使用的訊息的值。 這可能會對應到不同的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 執行個體，這個執行個體已事先保留並作為 <paramref name="messageHeader" /> 傳遞到 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />必須使用傳回的值，而不是使用做為 <paramref name="messageValue" /> 經 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 傳送的值。
如果無法使用要求的訊息，則傳回的值就是<see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>由連結的<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />呼叫以釋出先前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 保留的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader">釋放的保留訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />，會釋放它先前保留的訊息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" /> 沒有保留訊息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>由連結的<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />呼叫以保留先前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader">保留的訊息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target">保留訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <returns>如果成功保留訊息，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>提供了訊息給<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />，讓目標有機會使用或延後訊息。</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />執行個體，表示所提供的訊息的標頭。</param>
      <param name="messageValue">正在提供的訊息的值。</param>
      <param name="source">提供訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 這可能是 <see langword="null" />。</param>
      <param name="consumeToAccept">設為 <see langword="true" /> 以指示目標在呼叫 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 期間以非同步方式呼叫 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />，在傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> 之前，以便使用訊息。</param>
      <returns>提供之訊息的狀態。 如果目標已接受訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，而且來源不應該再使用所提供的訊息，因為現在它是由目標擁有。 如果訊息已由目標延後，會以通知形式傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />，目標稍後可能會嘗試使用或保留訊息，同時來源仍擁有訊息，而且可能會將訊息提供給其他區塊。
如果目標延後訊息，但 <paramref name="source" /> 為 <see langword="null" />，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。
如果目標嘗試接受訊息，但因為來源將訊息傳遞給另一個目標或直接捨棄訊息，使得目標遺漏訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />。
如果目標選擇不接受訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。 如果目標選擇不接受此訊息，且將不會接受來自此來源的其他訊息，則會傳回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> 無效。
或，如果提供非 null <paramref name="consumeToAccept" />，則 <paramref name="source" /> 只能為 true。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.ToString">
      <summary>傳回表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</summary>
      <returns>表示這個 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 執行個體之格式化名稱的字串。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 接收可用的輸出項目。</summary>
      <param name="filter">述詞的值必須成功傳遞才能讓它接收。  <paramref name="filter" /> 可能是<see langword="null" />，這種情況下將傳遞所有項目。</param>
      <param name="item">從來源接收的項目。</param>
      <returns>如果可以接收項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
  </members>
</doc>
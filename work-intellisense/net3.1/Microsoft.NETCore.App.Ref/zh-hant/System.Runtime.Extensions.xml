<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Extensions</name>
  </assembly>
  <members>
    <member name="T:System.AppDomain">
      <summary>表示應用程式定義域，也就是應用程式執行的獨立環境。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.AppDomain.AppendPrivatePath(System.String)">
      <summary>將指定的目錄名稱附加至私用 (Private) 路徑清單。</summary>
      <param name="path">要附加到私用路徑的目錄名稱。</param>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="M:System.AppDomain.ApplyPolicy(System.String)">
      <summary>在套用原則之後傳回組件的顯示名稱。</summary>
      <param name="assemblyName">組件的顯示名稱，其格式為 <see cref="P:System.Reflection.Assembly.FullName" /> 屬性所提供。</param>
      <returns>一個字串，其中包含套用原則之後的組件顯示名稱。</returns>
    </member>
    <member name="E:System.AppDomain.AssemblyLoad">
      <summary>發生於載入組件時。</summary>
    </member>
    <member name="E:System.AppDomain.AssemblyResolve">
      <summary>發生於組件解析失敗時。</summary>
    </member>
    <member name="P:System.AppDomain.BaseDirectory">
      <summary>取得組件解析程式 (Resolver) 用來探查組件的基底目錄。</summary>
      <returns>組件解析程式用來探查組件的基底目錄。</returns>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="M:System.AppDomain.ClearPrivatePath">
      <summary>將指定私用組件位置的路徑重設為空字串 ("")。</summary>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="M:System.AppDomain.ClearShadowCopyPath">
      <summary>將含有陰影複製的組件目錄清單重設為空字串 ("")。</summary>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="M:System.AppDomain.CreateDomain(System.String)">
      <summary>建立具有指定名稱的新應用程式定義域。</summary>
      <param name="friendlyName">定義域的易記名稱。</param>
      <returns>新建立的應用程式定義域。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="friendlyName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core 上不支援該方法。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String)">
      <summary>建立指定組件中所定義之指定類型的新執行個體。</summary>
      <param name="assemblyName">組件的顯示名稱。 請參閱 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 屬性傳回的要求類型之完整名稱 (包括命名空間，但不包括組件)。</param>
      <returns>物件，是 <paramref name="typeName" /> 所指定的新執行個體之包裝函式。 傳回值需要解除包裝以存取實際物件。</returns>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 或 <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的組件。
-或-
目前載入的是 Common Language Runtime 2.0 版或更新版本，編譯 <paramref name="assemblyName" /> 的版本還要更新。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的公用建構函式。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中找不到 <paramref name="typename" />。</exception>
      <exception cref="T:System.NullReferenceException">這個執行個體是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>建立指定組件中所定義之指定類型的新執行個體。 參數會指定繫結器、繫結旗標、建構函式引數、用來解譯引數的特定文化特性資訊，以及選擇性的啟動屬性。</summary>
      <param name="assemblyName">組件的顯示名稱。 請參閱 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 屬性傳回的要求類型之完整名稱 (包括命名空間，但不包括組件)。</param>
      <param name="ignoreCase">布林值，指出是否執行區分大小寫的搜尋。</param>
      <param name="bindingAttr">零或多個位元旗標的組合，此位元旗標會影響 <paramref name="typeName" /> 建構函式的搜尋。 如果 <paramref name="bindingAttr" /> 為零，則會針對公用建構函式執行區分大小寫的搜尋。</param>
      <param name="binder">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see cref="T:System.Reflection.MemberInfo" /> 物件的物件。 如果 <paramref name="binder" /> 為 null，則會使用預設繫結器。</param>
      <param name="args">要傳遞到建構函式的引數。 這個引數陣列必須在數目、順序和類型上符合要叫用之建構函式的參數。 如果慣用無參數建構函式，則 <paramref name="args" /> 必須是空陣列或 Null。</param>
      <param name="culture">特定文化特性的資訊，其可控制 <paramref name="args" /> 到型式類型 (為 <paramref name="typeName" /> 建構函式宣告) 的強制轉型。 如果 <paramref name="culture" /> 為 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="activationAttributes">一或多個屬性的陣列，此屬性可參與啟動過程。 陣列通常只會包含一個 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 物件來指定用以啟動遠端物件的 URL。
此參數與啟動了用戶端的物件相關。 用戶端啟動是一項舊的技術，保留目的在提供回溯相容性，不建議用於新的開發。 分散式應用程式應該改用 Windows Communication Foundation。</param>
      <returns>物件，是 <paramref name="typeName" /> 所指定的新執行個體之包裝函式。 傳回值需要解除包裝以存取實際物件。</returns>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 或 <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的組件。
-或-
用以編譯 <paramref name="assemblyName" /> 的通用語言執行平台，其版本比目前所載入的版本還要更新。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的建構函式。</exception>
      <exception cref="T:System.NotSupportedException">呼叫者無法提供非繼承自 <see cref="T:System.MarshalByRefObject" /> 之物件的啟動屬性。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中找不到 <paramref name="typename" />。</exception>
      <exception cref="T:System.NullReferenceException">這個執行個體是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
      <summary>建立指定組件中所定義之指定類型的新執行個體。 參數會指定啟動屬性的陣列。</summary>
      <param name="assemblyName">組件的顯示名稱。 請參閱 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 屬性傳回的要求類型之完整名稱 (包括命名空間，但不包括組件)。</param>
      <param name="activationAttributes">一或多個屬性的陣列，此屬性可參與啟動過程。 陣列通常只會包含一個 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 物件來指定用以啟動遠端物件的 URL。
此參數與 client-activated 物件有關。用戶端啟動是一項舊的技術，保留目的在提供回溯相容性，不建議用於新的開發。 分散式應用程式應該改用 Windows Communication Foundation。</param>
      <returns>物件，是 <paramref name="typeName" /> 所指定的新執行個體之包裝函式。 傳回值需要解除包裝以存取實際物件。</returns>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 或 <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的組件。
-或-
目前載入的是 Common Language Runtime 2.0 版或更新版本，編譯 <paramref name="assemblyName" /> 的版本還要更新。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的公用建構函式。</exception>
      <exception cref="T:System.NotSupportedException">呼叫者無法提供非繼承自 <see cref="T:System.MarshalByRefObject" /> 之物件的啟動屬性。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中找不到 <paramref name="typename" />。</exception>
      <exception cref="T:System.NullReferenceException">這個執行個體是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
      <summary>建立指定類型的新執行個體。 參數會指定定義類型所在的組件和類型的名稱。</summary>
      <param name="assemblyName">組件的顯示名稱。 請參閱 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 屬性傳回的要求類型之完整名稱 (包括命名空間，但不包括組件)。</param>
      <returns>
        <paramref name="typeName" /> 指定之物件的執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 或 <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的公用建構函式。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中找不到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的組件。
-或-
目前載入的是 Common Language Runtime 2.0 版或更新版本，編譯 <paramref name="assemblyName" /> 的版本還要更新。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>藉由指定是否忽略類型名稱的大小寫、用於選取要建立之類型的繫結屬性和繫結器、建構函式的引數、文化特性，以及啟動屬性，為指定之組件中定義的指定類型，建立新的執行個體。</summary>
      <param name="assemblyName">組件的顯示名稱。 請參閱 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 屬性傳回的要求類型之完整名稱 (包括命名空間，但不包括組件)。</param>
      <param name="ignoreCase">布林值，指出是否執行區分大小寫的搜尋。</param>
      <param name="bindingAttr">零或多個位元旗標的組合，此位元旗標會影響 <paramref name="typeName" /> 建構函式的搜尋。 如果 <paramref name="bindingAttr" /> 為零，則會針對公用建構函式執行區分大小寫的搜尋。</param>
      <param name="binder">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see cref="T:System.Reflection.MemberInfo" /> 物件的物件。 如果 <paramref name="binder" /> 為 null，則會使用預設繫結器。</param>
      <param name="args">要傳遞到建構函式的引數。 這個引數陣列必須在數目、順序和類型上符合要叫用之建構函式的參數。 如果慣用無參數建構函式，則 <paramref name="args" /> 必須是空陣列或 Null。</param>
      <param name="culture">用來控制類型強制的特定文化特性物件。 如果 <paramref name="culture" /> 為 <see langword="null" />，會使用目前執行緒的 <see langword="CultureInfo" />。</param>
      <param name="activationAttributes">一或多個屬性的陣列，此屬性可參與啟動過程。 一般來說，就是包含單一 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 物件的陣列。 會指定啟動遠端物件所需的 URL。
此參數與啟動了用戶端的物件相關。 用戶端啟動是一項舊的技術，保留目的在提供回溯相容性，不建議用於新的開發。 分散式應用程式應該改用 Windows Communication Foundation。</param>
      <returns>
        <paramref name="typeName" /> 指定之物件的執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 或 <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的建構函式。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中找不到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.NotSupportedException">呼叫者無法提供非繼承自 <see cref="T:System.MarshalByRefObject" /> 之物件的啟動屬性。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的組件。
-或-
用以編譯 <paramref name="assemblyName" /> 的通用語言執行平台，其版本比目前所載入的版本還要更新。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
      <summary>建立指定類型的新執行個體。 參數會指定定義類型所在的組件、類型的名稱和啟動屬性的陣列。</summary>
      <param name="assemblyName">組件的顯示名稱。 請參閱 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 屬性傳回的要求類型之完整名稱 (包括命名空間，但不包括組件)。</param>
      <param name="activationAttributes">一或多個屬性的陣列，此屬性可參與啟動過程。 陣列通常只會包含一個 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 物件來指定用以啟動遠端物件的 URL。
此參數與 client-activated 物件有關。用戶端啟動是一項舊的技術，保留目的在提供回溯相容性，不建議用於新的開發。 分散式應用程式應該改用 Windows Communication Foundation。</param>
      <returns>
        <paramref name="typeName" /> 指定之物件的執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 或 <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的公用建構函式。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中找不到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.NotSupportedException">呼叫者無法提供非繼承自 <see cref="T:System.MarshalByRefObject" /> 之物件的啟動屬性。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的組件。
-或-
目前載入的是 Common Language Runtime 2.0 版或更新版本，編譯 <paramref name="assemblyName" /> 的版本還要更新。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
      <summary>建立指定組件檔案中所定義之指定類型的新執行個體。</summary>
      <param name="assemblyFile">檔案的名稱 (包括路徑)，此檔案包含會定義要求之類型的組件。 此組件使用 <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> 方法載入。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 屬性傳回的要求類型之完整名稱 (包括命名空間，但不包括組件)。</param>
      <returns>對新執行個體而言是包裝函式的物件，但如果沒有找到 <paramref name="typeName" />，則為 <see langword="null" />。 傳回值需要解除包裝以存取實際物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 為 <see langword="null" />。
-或-
<paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyFile" /> 中找不到 <paramref name="typeName" />。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.MissingMethodException">找不到無參數的公用建構函式。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有足以呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的組件。
-或-
目前載入的是 Common Language Runtime 2.0 版或更新版本，編譯 <paramref name="assemblyFile" /> 的版本還要更新。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
      <exception cref="T:System.NullReferenceException">這個執行個體是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>建立指定組件檔案中所定義之指定類型的新執行個體。</summary>
      <param name="assemblyFile">檔案的名稱 (包括路徑)，此檔案包含會定義要求之類型的組件。 此組件使用 <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> 方法載入。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 屬性傳回的要求類型之完整名稱 (包括命名空間，但不包括組件)。</param>
      <param name="ignoreCase">布林值，指出是否執行區分大小寫的搜尋。</param>
      <param name="bindingAttr">零或多個位元旗標的組合，此位元旗標會影響 <paramref name="typeName" /> 建構函式的搜尋。 如果 <paramref name="bindingAttr" /> 為零，則會針對公用建構函式執行區分大小寫的搜尋。</param>
      <param name="binder">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see cref="T:System.Reflection.MemberInfo" /> 物件的物件。 如果 <paramref name="binder" /> 為 null，則會使用預設繫結器。</param>
      <param name="args">要傳遞到建構函式的引數。 這個引數陣列必須在數目、順序和類型上符合要叫用之建構函式的參數。 如果慣用無參數建構函式，則 <paramref name="args" /> 必須是空陣列或 Null。</param>
      <param name="culture">特定文化特性的資訊，其可控制 <paramref name="args" /> 到型式類型 (為 <paramref name="typeName" /> 建構函式宣告) 的強制轉型。 如果 <paramref name="culture" /> 為 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="activationAttributes">一或多個屬性的陣列，此屬性可參與啟動過程。 陣列通常只會包含一個 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 物件來指定用以啟動遠端物件的 URL。
此參數與啟動了用戶端的物件相關。 用戶端啟動是一項舊的技術，保留目的在提供回溯相容性，不建議用於新的開發。 分散式應用程式應該改用 Windows Communication Foundation。</param>
      <returns>對新執行個體而言是包裝函式的物件，但如果沒有找到 <paramref name="typeName" />，則為 <see langword="null" />。 傳回值需要解除包裝以存取實際物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 為 <see langword="null" />。
-或-
<paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">呼叫者無法提供非繼承自 <see cref="T:System.MarshalByRefObject" /> 之物件的啟動屬性。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.TypeLoadException">在<paramref name="typeName" /> 中找不到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的公用建構函式。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有足以呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的組件。
-或-
用以編譯 <paramref name="assemblyFile" /> 的通用語言執行平台，其版本比目前所載入的版本還要更新。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
      <exception cref="T:System.NullReferenceException">這個執行個體是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
      <summary>建立指定組件檔案中所定義之指定類型的新執行個體。</summary>
      <param name="assemblyFile">檔案的名稱 (包括路徑)，此檔案包含會定義要求之類型的組件。 此組件使用 <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> 方法載入。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 屬性傳回的要求類型之完整名稱 (包括命名空間，但不包括組件)。</param>
      <param name="activationAttributes">一或多個屬性的陣列，此屬性可參與啟動過程。 陣列通常只會包含一個 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 物件來指定用以啟動遠端物件的 URL。
此參數與 client-activated 物件有關。用戶端啟動是一項舊的技術，保留目的在提供回溯相容性，不建議用於新的開發。 分散式應用程式應該改用 Windows Communication Foundation。</param>
      <returns>對新執行個體而言是包裝函式的物件，但如果沒有找到 <paramref name="typeName" />，則為 <see langword="null" />。 傳回值需要解除包裝以存取實際物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyFile" /> 中找不到 <paramref name="typeName" />。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有足以呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的公用建構函式。</exception>
      <exception cref="T:System.NotSupportedException">呼叫者無法提供非繼承自 <see cref="T:System.MarshalByRefObject" /> 之物件的啟動屬性。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的組件。
-或-
目前載入的是 Common Language Runtime 2.0 版或更新版本，編譯 <paramref name="assemblyFile" /> 的版本還要更新。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
      <exception cref="T:System.NullReferenceException">這個執行個體是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
      <summary>建立指定組件檔案中所定義之指定類型的新執行個體。</summary>
      <param name="assemblyName">定義所要求類型之組件的檔案名稱與路徑。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 屬性傳回的要求類型之完整名稱 (包括命名空間，但不包括組件)。</param>
      <returns>要求的物件；當找不到 <paramref name="typeName" /> 時，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 為 <see langword="null" />。
-或-
<paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中找不到 <paramref name="typeName" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到無參數的公用建構函式。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有足以呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的組件。
-或-
目前載入的是 Common Language Runtime 2.0 版或更新版本，編譯 <paramref name="assemblyName" /> 的版本還要更新。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>藉由指定是否忽略類型名稱的大小寫、用於選取要建立之類型的繫結屬性和繫結器、建構函式的引數、文化特性，以及啟動屬性，為指定之組件檔中定義的指定類型，建立新的執行個體。</summary>
      <param name="assemblyFile">定義所要求類型之組件的檔案名稱與路徑。</param>
      <param name="typeName">
        <see cref="P:System.Type.FullName" /> 屬性傳回的要求類型之完整名稱 (包括命名空間，但不包括組件)。</param>
      <param name="ignoreCase">布林值，指出是否執行區分大小寫的搜尋。</param>
      <param name="bindingAttr">零或多個位元旗標的組合，此位元旗標會影響 <paramref name="typeName" /> 建構函式的搜尋。 如果 <paramref name="bindingAttr" /> 為零，則會針對公用建構函式執行區分大小寫的搜尋。</param>
      <param name="binder">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see cref="T:System.Reflection.MemberInfo" /> 物件的物件。 如果 <paramref name="binder" /> 為 null，則會使用預設繫結器。</param>
      <param name="args">要傳遞到建構函式的引數。 這個引數陣列必須在數目、順序和類型上符合要叫用之建構函式的參數。 如果慣用無參數建構函式，則 <paramref name="args" /> 必須是空陣列或 Null。</param>
      <param name="culture">特定文化特性的資訊，其可控制 <paramref name="args" /> 到型式類型 (為 <paramref name="typeName" /> 建構函式宣告) 的強制轉型。 如果 <paramref name="culture" /> 為 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="activationAttributes">一或多個屬性的陣列，此屬性可參與啟動過程。 陣列通常只會包含一個 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 物件來指定用以啟動遠端物件的 URL。
此參數與啟動了用戶端的物件相關。 用戶端啟動是一項舊的技術，保留目的在提供回溯相容性，不建議用於新的開發。 分散式應用程式應該改用 Windows Communication Foundation。</param>
      <returns>要求的物件；當找不到 <paramref name="typeName" /> 時，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 為 <see langword="null" />。
-或-
<paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">呼叫者無法提供非繼承自 <see cref="T:System.MarshalByRefObject" /> 之物件的啟動屬性。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.TypeLoadException">在<paramref name="typeName" /> 中找不到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的公用建構函式。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有足以呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的組件。
-或-
用以編譯 <paramref name="assemblyName" /> 的通用語言執行平台，其版本比目前所載入的版本還要更新。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
      <summary>建立指定組件檔案中所定義之指定類型的新執行個體。</summary>
      <param name="assemblyName">定義所要求類型之組件的檔案名稱與路徑。</param>
      <param name="typeName">所要求類型的完整名稱，包括命名空間，但不包括組件 (請參閱 <see cref="P:System.Type.FullName" /> 屬性)。</param>
      <param name="activationAttributes">一或多個屬性的陣列，此屬性可參與啟動過程。 陣列通常只會包含一個 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 物件來指定用以啟動遠端物件的 URL。
此參數與 client-activated 物件有關。用戶端啟動是一項舊的技術，保留目的在提供回溯相容性，不建議用於新的開發。 分散式應用程式應該改用 Windows Communication Foundation。</param>
      <returns>要求的物件；當找不到 <paramref name="typeName" /> 時，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 為 <see langword="null" />。
-或-
<paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">呼叫者無法提供非繼承自 <see cref="T:System.MarshalByRefObject" /> 之物件的啟動屬性。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中找不到 <paramref name="typeName" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到無參數的公用建構函式。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有足以呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的組件。
-或-
目前載入的是 Common Language Runtime 2.0 版或更新版本，編譯 <paramref name="assemblyName" /> 的版本還要更新。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
    </member>
    <member name="P:System.AppDomain.CurrentDomain">
      <summary>取得目前 <see cref="T:System.Threading.Thread" /> 的目前應用程式定義域。</summary>
      <returns>目前的應用程式定義域。</returns>
    </member>
    <member name="E:System.AppDomain.DomainUnload">
      <summary>發生於將要卸載 <see cref="T:System.AppDomain" /> 時。</summary>
    </member>
    <member name="P:System.AppDomain.DynamicDirectory">
      <summary>取得組件解析程式用來探查動態建立之組件的目錄。</summary>
      <returns>組件解析程式用來探查以動態建立組件的目錄。</returns>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String)">
      <summary>執行包含在指定檔案中的組件。</summary>
      <param name="assemblyFile">包含要執行之組件的檔案名稱。</param>
      <returns>組件的進入點所傳回的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的組件。
-或-
目前載入的是 Common Language Runtime 2.0 版或更新版本，而 <paramref name="assemblyFile" /> 是使用更新的版本所編譯。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
      <exception cref="T:System.MissingMethodException">指定的組件不具任何進入點。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
      <summary>使用指定的引數，執行包含在指定檔案中的組件。</summary>
      <param name="assemblyFile">包含要執行之組件的檔案名稱。</param>
      <param name="args">組件的進入點引數。</param>
      <returns>組件的進入點所傳回的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的組件。
-或-
用以編譯<paramref name="assemblyFile" /> 的通用語言執行平台，其版本比目前所載入的版本還要更新。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
      <exception cref="T:System.MissingMethodException">指定的組件不具任何進入點。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>使用指定的引數、雜湊值和雜湊演算法，執行包含在指定檔案中的組件。</summary>
      <param name="assemblyFile">包含要執行之組件的檔案名稱。</param>
      <param name="args">組件的進入點引數。</param>
      <param name="hashValue">表示計算出來的雜湊碼的值。</param>
      <param name="hashAlgorithm">表示組件資訊清單所使用的雜湊演算法。</param>
      <returns>組件的進入點所傳回的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的組件。
-或-
用以編譯<paramref name="assemblyFile" /> 的通用語言執行平台，其版本比目前所載入的版本還要更新。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
      <exception cref="T:System.MissingMethodException">指定的組件不具任何進入點。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
      <summary>使用指定的引數，執行具有指定之 <see cref="T:System.Reflection.AssemblyName" /> 的組件。</summary>
      <param name="assemblyName">
        <see cref="T:System.Reflection.AssemblyName" /> 物件，代表組件的名稱。</param>
      <param name="args">啟動處理程序時要傳遞的命令列引數。</param>
      <returns>組件的進入點所傳回的值。</returns>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyName" /> 所指定的組件。</exception>
      <exception cref="T:System.IO.FileLoadException">已找到 <paramref name="assemblyName" /> 所指定的組件，但無法載入。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 所指定的組件不是有效的組件。
-或-
用以編譯<paramref name="assemblyName" /> 的通用語言執行平台，其版本比目前所載入的版本還要更新。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.MissingMethodException">指定的組件不具任何進入點。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
      <summary>執行需提供其顯示名稱的組件。</summary>
      <param name="assemblyName">組件的顯示名稱。 請參閱 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <returns>組件的進入點所傳回的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyName" /> 所指定的組件。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 所指定的組件不是有效的組件。
-或-
目前載入的是 Common Language Runtime 2.0 版或更新版本，而 <paramref name="assemblyName" /> 是使用更新的版本所編譯。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.IO.FileLoadException">已找到 <paramref name="assemblyName" /> 所指定的組件，但無法載入。</exception>
      <exception cref="T:System.MissingMethodException">指定的組件不具任何進入點。</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
      <summary>使用指定的引數，執行具有指定之顯示名稱的組件。</summary>
      <param name="assemblyName">組件的顯示名稱。 請參閱 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <param name="args">啟動處理程序時要傳遞的命令列引數。</param>
      <returns>組件的進入點所傳回的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyName" /> 所指定的組件。</exception>
      <exception cref="T:System.IO.FileLoadException">已找到 <paramref name="assemblyName" /> 所指定的組件，但無法載入。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 所指定的組件不是有效的組件。
-或-
用以編譯<paramref name="assemblyName" /> 的通用語言執行平台，其版本比目前所載入的版本還要更新。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.MissingMethodException">指定的組件不具任何進入點。</exception>
    </member>
    <member name="E:System.AppDomain.FirstChanceException">
      <summary>發生於執行階段在呼叫堆疊中搜尋應用程式定義域的例外狀況處理常式之前，在 Managed 程式碼中擲回例外狀況時。</summary>
    </member>
    <member name="P:System.AppDomain.FriendlyName">
      <summary>取得應用程式定義域的易記名稱。</summary>
      <returns>這個應用程式定義域的易記名稱。</returns>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="M:System.AppDomain.GetAssemblies">
      <summary>取得已載入至這個應用程式定義域之執行內容的組件。</summary>
      <returns>這個應用程式定義域中的組件陣列。</returns>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="M:System.AppDomain.GetCurrentThreadId">
      <summary>取得目前的執行緒識別項。</summary>
      <returns>32 位元帶正負號的整數 (Signed Integer)，其為目前執行緒的識別項。</returns>
    </member>
    <member name="M:System.AppDomain.GetData(System.String)">
      <summary>針對指定之名稱取得儲存在目前應用程式定義域中的值。</summary>
      <param name="name">預先定義的應用程式定義域屬性的名稱，或是已經定義的應用程式定義域屬性的名稱。</param>
      <returns>
        <paramref name="name" /> 屬性的值；如果這個屬性不存在，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="P:System.AppDomain.Id">
      <summary>取得可唯一識別處理序中之應用程式定義域的整數。</summary>
      <returns>可識別應用程式定義域的整數。</returns>
    </member>
    <member name="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
      <summary>取得可為 Null 的布林值，這個值表示是否已設定任何相容性參數，如果已設定，是否已設定指定的相容性參數。</summary>
      <param name="value">要測試的相容性參數。</param>
      <returns>如果未設定任何相容性參數則為 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)；否則為布林值，以表示是否已設定 <paramref name="value" /> 所指定之相容性參數。</returns>
    </member>
    <member name="M:System.AppDomain.IsDefaultAppDomain">
      <summary>傳回值，指出應用程式定義域是否為該處理程序的預設應用程式定義域。</summary>
      <returns>如果目前的 <see cref="T:System.AppDomain" /> 物件代表處理程序的預設應用程式定義域，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.AppDomain.IsFinalizingForUnload">
      <summary>指示這個應用程式定義域是否正在卸載，以及其包含的物件是否正在由 Common Language Runtime 進行最終處理。</summary>
      <returns>如果這個應用程式定義域正在卸載且 Common Language Runtime 已開始叫用完成項，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.AppDomain.IsFullyTrusted">
      <summary>取得值，該值指出載入目前應用程式定義域中的組件是否在完全信任情況下執行。</summary>
      <returns>如果載入目前應用程式定義域中的組件在完全信任情況下執行，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.AppDomain.IsHomogenous">
      <summary>取得值，這個值表示目前應用程式定義域是否會授與一組權限給所有載入該應用程式定義域中的組件。</summary>
      <returns>如果目前應用程式定義域具有一組同質性權限，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[])">
      <summary>載入具備通用物件檔案格式 (COFF) 影像 (包含發出的 <see cref="T:System.Reflection.Assembly" />) 的 <see cref="T:System.Reflection.Assembly" />。</summary>
      <param name="rawAssembly">
        <see langword="byte" /> 類型的陣列，這是包含發出組件之以 COFF 為基礎的影像。</param>
      <returns>載入的組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> 不是有效的組件。
-或-
目前載入的是 Common Language Runtime 2.0 版或更新版本，而 <paramref name="rawAssembly" /> 是使用更新的版本所編譯。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
      <summary>載入具備通用物件檔案格式 (COFF) 影像 (包含發出的 <see cref="T:System.Reflection.Assembly" />) 的 <see cref="T:System.Reflection.Assembly" />。 也會載入代表 <see cref="T:System.Reflection.Assembly" /> 符號且未經處理的位元組。</summary>
      <param name="rawAssembly">
        <see langword="byte" /> 類型的陣列，這是包含發出組件之以 COFF 為基礎的影像。</param>
      <param name="rawSymbolStore">
        <see langword="byte" /> 類型的陣列，包含代表組件符號的未經處理位元組。</param>
      <returns>載入的組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> 不是有效的組件。
-或-
目前載入的是 Common Language Runtime 2.0 版或更新版本，而 <paramref name="rawAssembly" /> 是使用更新的版本所編譯。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
      <summary>載入提供了 <see cref="T:System.Reflection.AssemblyName" /> 的 <see cref="T:System.Reflection.Assembly" />。</summary>
      <param name="assemblyRef">物件，描述要載入的組件。</param>
      <returns>載入的組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyRef" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyRef" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyRef" /> 不是有效的組件。
-或-
目前載入的是 Common Language Runtime 2.0 版或更新版本，而 <paramref name="assemblyRef" /> 是使用更新的版本所編譯。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.String)">
      <summary>載入提供了顯示名稱的 <see cref="T:System.Reflection.Assembly" />。</summary>
      <param name="assemblyString">組件的顯示名稱。 請參閱 <see cref="P:System.Reflection.Assembly.FullName" />。</param>
      <returns>載入的組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> 是 <see langword="null" /></exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> 。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> 不是有效的組件。
-或-
目前載入的是 Common Language Runtime 2.0 版或更新版本，而 <paramref name="assemblyString" /> 是使用更新的版本所編譯。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringIsEnabled">
      <summary>取得或設定值，這個值表示是否對目前處理序啟用應用程式定義域的 CPU 和記憶體監視。 一旦對處理序啟用監視，就不能停用。</summary>
      <returns>如果啟用監視，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">目前的處理程序嘗試將值 <see langword="false" /> 指派給這個屬性。</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedMemorySize">
      <summary>取得自上次回收作業後存留下來，且已知正由目前應用程式定義域參考之位元組的數目。</summary>
      <returns>存留的位元組數目。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> 屬性已設為 <see langword="false" />。</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
      <summary>針對處理序中的所有應用程式定義域，取得自上次回收作業存留下來的位元組總數。</summary>
      <returns>處理序的存留位元組總數。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> 屬性已設為 <see langword="false" />。</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalAllocatedMemorySize">
      <summary>取得應用程式定義域自其建立後已配置之所有記憶體的總大小 (以位元組為單位)，但不減去已回收的記憶體。</summary>
      <returns>所有記憶體配置的總大小。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> 屬性已設為 <see langword="false" />。</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalProcessorTime">
      <summary>取得自處理程序啟動後，所有執行緒在目前應用程式定義域中執行時用掉的處理器時間總計。</summary>
      <returns>目前應用程式定義域的處理器時間總計。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> 屬性已設為 <see langword="false" />。</exception>
    </member>
    <member name="P:System.AppDomain.PermissionSet">
      <summary>取得沙箱應用程式定義域的權限集。</summary>
      <returns>沙箱應用程式定義域的權限集。</returns>
    </member>
    <member name="E:System.AppDomain.ProcessExit">
      <summary>發生於預設應用程式定義域的父處理程序結束時。</summary>
    </member>
    <member name="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
      <summary>發生於僅限反映之內容中的組件解析失敗時。</summary>
    </member>
    <member name="M:System.AppDomain.ReflectionOnlyGetAssemblies">
      <summary>傳回已經載入到應用程式定義域之僅限反映的內容之組件。</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" /> 物件的陣列，代表已經載入到應用程式定義域中僅限反映之內容的組件。</returns>
      <exception cref="T:System.AppDomainUnloadedException">嘗試在卸載的應用程式定義域中執行作業。</exception>
    </member>
    <member name="P:System.AppDomain.RelativeSearchPath">
      <summary>取得組件解析程式應該在其中探查私用組件的路徑，此路徑位於基底目錄下。</summary>
      <returns>組件解析程式應該在其中探查私用組件的路徑，此路徑位於基底目錄下。</returns>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="E:System.AppDomain.ResourceResolve">
      <summary>發生於資源的解析失敗時 (原因是因為該資源在組件中不是有效連結或內嵌的資源)。</summary>
    </member>
    <member name="M:System.AppDomain.SetCachePath(System.String)">
      <summary>將指定的目錄路徑建立為陰影複製組件的所在位置。</summary>
      <param name="path">陰影複本位置的完整路徑。</param>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="M:System.AppDomain.SetData(System.String,System.Object)">
      <summary>將指定值指派至指定的應用程式定義域屬性。</summary>
      <param name="name">要建立或變更的使用者定義之應用程式定義域屬性的名稱。</param>
      <param name="data">屬性的值。</param>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="M:System.AppDomain.SetDynamicBase(System.String)">
      <summary>建立指定的目錄路徑，做為存放及存取動態產生檔案之子目錄的基底目錄。</summary>
      <param name="path">完整的路徑，代表用來儲存動態組件之子目錄的基底目錄。</param>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
      <summary>如果執行緒在這個應用程式定義域執行時嘗試繫結至主體，則指定主體和識別 (Identity) 物件應該如何附加至執行緒。</summary>
      <param name="policy">其中一個 <see cref="T:System.Security.Principal.PrincipalPolicy" /> 值，指定要附加至執行緒之主體物件的類型。</param>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyFiles">
      <summary>開啟陰影複製。</summary>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyPath(System.String)">
      <summary>建立指定的目錄路徑，做為要陰影複製的組件位置。</summary>
      <param name="path">目錄名稱的清單，其中的每個名稱以分號隔開。</param>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
      <summary>如果執行緒在這個應用程式定義域中執行時嘗試繫結至預設的主體，則設定預設的主體物件附加至執行緒。</summary>
      <param name="principal">要附加至執行緒的主體物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="principal" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Policy.PolicyException">主要執行緒已經設定。</exception>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="P:System.AppDomain.SetupInformation">
      <summary>取得這個執行個體的應用程式定義域組態資訊。</summary>
      <returns>應用程式定義域初始化資訊。</returns>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="P:System.AppDomain.ShadowCopyFiles">
      <summary>取得是否已設定應用程式定義域以進行檔案陰影複製的指示。</summary>
      <returns>如果已設定應用程式定義域以進行檔案陰影複製，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.AppDomainUnloadedException">嘗試對卸載的應用程式定義域執行作業。</exception>
    </member>
    <member name="M:System.AppDomain.ToString">
      <summary>取得字串表示，其中包含應用程式定義域及任何內容原則的易記名稱。</summary>
      <returns>將常值字串 "Name:"、應用程式定義域的易記名稱、內容原則的字串表示或字串 "There are no context policies" 串連起來所構成的字串。</returns>
      <exception cref="T:System.AppDomainUnloadedException">已經卸載目前的 <see cref="T:System.AppDomain" /> 所表示的應用程式定義域。</exception>
    </member>
    <member name="E:System.AppDomain.TypeResolve">
      <summary>發生於類型解析失敗時。</summary>
    </member>
    <member name="E:System.AppDomain.UnhandledException">
      <summary>發生於未攔截到例外狀況時。</summary>
    </member>
    <member name="M:System.AppDomain.Unload(System.AppDomain)">
      <summary>卸載指定的應用程式定義域。</summary>
      <param name="domain">要卸載的應用程式定義域。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="domain" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.CannotUnloadAppDomainException">無法卸載 <paramref name="domain" />。</exception>
      <exception cref="T:System.Exception">卸載程序期間發生錯誤。</exception>
    </member>
    <member name="T:System.AppDomainSetup">
      <summary>代表可加入 <see cref="T:System.AppDomain" /> 執行個體的組件繫結資訊。</summary>
    </member>
    <member name="P:System.AppDomainSetup.ApplicationBase">
      <summary>取得或設定包含應用程式的目錄名稱。</summary>
      <returns>應用程式基底目錄的名稱。</returns>
    </member>
    <member name="P:System.AppDomainSetup.TargetFrameworkName">
      <summary>取得或設定字串，以 <see cref="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)" /> 建構函式可剖析的格式，為應用程式定義域指定 .NET Framework 的目標版本和設定檔。</summary>
      <returns>.NET Framework 的目標版本和設定檔。</returns>
    </member>
    <member name="T:System.AppDomainUnloadedException">
      <summary>嘗試存取已卸載應用程式定義域時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor">
      <summary>初始化 <see cref="T:System.AppDomainUnloadedException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.AppDomainUnloadedException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.AppDomainUnloadedException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.AppDomainUnloadedException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.ApplicationId">
      <summary>包含用來唯一識別資訊清單架構應用程式的資訊。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ApplicationId.#ctor(System.Byte[],System.String,System.Version,System.String,System.String)">
      <summary>初始化 <see cref="T:System.ApplicationId" /> 類別的新執行個體。</summary>
      <param name="publicKeyToken">位元組的陣列，表示未經處理的公開金鑰 (Public Key) 資料。</param>
      <param name="name">應用程式的名稱。</param>
      <param name="version">
        <see cref="T:System.Version" /> 物件，指定應用程式的版本。</param>
      <param name="processorArchitecture">應用程式的處理器架構。</param>
      <param name="culture">應用程式的文化特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。
-或-
<paramref name="version" /> 為 <see langword="null" />。
-或-
<paramref name="publicKeyToken" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 為空字串。</exception>
    </member>
    <member name="M:System.ApplicationId.Copy">
      <summary>建立並傳回目前應用程式識別的相同複本。</summary>
      <returns>
        <see cref="T:System.ApplicationId" /> 物件，表示原始版本的相同複本。</returns>
    </member>
    <member name="P:System.ApplicationId.Culture">
      <summary>取得字串，表示應用程式的文化特性資訊。</summary>
      <returns>應用程式的文化特性資訊。</returns>
    </member>
    <member name="M:System.ApplicationId.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.ApplicationId" /> 物件是否相當於目前的 <see cref="T:System.ApplicationId" />。</summary>
      <param name="o">要與目前的 <see cref="T:System.ApplicationId" /> 比較的 <see cref="T:System.ApplicationId" /> 物件。</param>
      <returns>如果指定的 <see cref="T:System.ApplicationId" /> 相當於目前的 <see cref="T:System.ApplicationId" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ApplicationId.GetHashCode">
      <summary>取得目前應用程式識別的雜湊程式碼。</summary>
      <returns>目前應用程式識別的雜湊程式碼。</returns>
    </member>
    <member name="P:System.ApplicationId.Name">
      <summary>取得應用程式的名稱。</summary>
      <returns>應用程式的名稱。</returns>
    </member>
    <member name="P:System.ApplicationId.ProcessorArchitecture">
      <summary>取得應用程式的目標處理器架構。</summary>
      <returns>應用程式的處理器架構。</returns>
    </member>
    <member name="P:System.ApplicationId.PublicKeyToken">
      <summary>取得應用程式的公開金鑰語彙基元。</summary>
      <returns>位元組陣列，包含應用程式的公開金鑰語彙基元。</returns>
    </member>
    <member name="M:System.ApplicationId.ToString">
      <summary>建立並傳回應用程式識別的字串表示。</summary>
      <returns>應用程式識別的字串表示。</returns>
    </member>
    <member name="P:System.ApplicationId.Version">
      <summary>取得應用程式的版本。</summary>
      <returns>
        <see cref="T:System.Version" />，指定應用程式的版本。</returns>
    </member>
    <member name="T:System.AssemblyLoadEventArgs">
      <summary>提供 <see cref="E:System.AppDomain.AssemblyLoad" /> 事件的資料。</summary>
    </member>
    <member name="M:System.AssemblyLoadEventArgs.#ctor(System.Reflection.Assembly)">
      <summary>使用指定的 <see cref="T:System.AssemblyLoadEventArgs" />，初始化 <see cref="T:System.Reflection.Assembly" /> 類別的新執行個體。</summary>
      <param name="loadedAssembly">執行個體，表示目前載入的組件。</param>
    </member>
    <member name="P:System.AssemblyLoadEventArgs.LoadedAssembly">
      <summary>取得 <see cref="T:System.Reflection.Assembly" />，表示目前載入的組件。</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" /> 的執行個體，表示目前載入的組件。</returns>
    </member>
    <member name="T:System.AssemblyLoadEventHandler">
      <summary>表示處理 <see cref="E:System.AppDomain.AssemblyLoad" /> 的 <see cref="T:System.AppDomain" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="args">包含事件資料的 <see cref="T:System.AssemblyLoadEventArgs" />。</param>
    </member>
    <member name="T:System.Base64FormattingOptions">
      <summary>設定相關的 <see cref="Overload:System.Convert.ToBase64CharArray" /> 和 <see cref="Overload:System.Convert.ToBase64String" /> 方法是否應在其輸出中放入分行符號。</summary>
    </member>
    <member name="F:System.Base64FormattingOptions.InsertLineBreaks">
      <summary>在字串中每 76 個字元就插入一個分行符號。</summary>
    </member>
    <member name="F:System.Base64FormattingOptions.None">
      <summary>不要在字串中每 76 個字元就插入一個分行符號。</summary>
    </member>
    <member name="T:System.BitConverter">
      <summary>將基底資料類型與位元組陣列相互轉換。</summary>
    </member>
    <member name="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
      <summary>將指定的雙精確度浮點數轉換為 64 位元帶正負號的整數。</summary>
      <param name="value">要轉換的數字。</param>
      <returns>64 位元帶正負號之整數的值等於 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Boolean)">
      <summary>傳回指定的布林值為位元組陣列。</summary>
      <param name="value">布林值 (Boolean)。</param>
      <returns>長度為 1 的位元組陣列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Char)">
      <summary>傳回指定的 Unicode 位元值為位元組陣列。</summary>
      <param name="value">要進行轉換的字元。</param>
      <returns>長度為 2 的位元組陣列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Double)">
      <summary>傳回指定的雙精確度浮點數值為位元組陣列。</summary>
      <param name="value">要轉換的數字。</param>
      <returns>長度為 8 的位元組陣列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int16)">
      <summary>傳回指定的 16 位元帶正負號的整數值為位元組陣列。</summary>
      <param name="value">要轉換的數字。</param>
      <returns>長度為 2 的位元組陣列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int32)">
      <summary>以位元組陣列形式傳回指定的 32 位元帶正負號整數值。</summary>
      <param name="value">要轉換的數字。</param>
      <returns>長度為 4 的位元組陣列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int64)">
      <summary>以位元組陣列形式傳回指定的 64 位元帶正負號整數值。</summary>
      <param name="value">要轉換的數字。</param>
      <returns>長度為 8 的位元組陣列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Single)">
      <summary>傳回指定的單精確度浮點數值為位元組陣列。</summary>
      <param name="value">要轉換的數字。</param>
      <returns>長度為 4 的位元組陣列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt16)">
      <summary>傳回指定的 16 位元不帶正負號的整數值為位元組陣列。</summary>
      <param name="value">要轉換的數字。</param>
      <returns>長度為 2 的位元組陣列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt32)">
      <summary>傳回指定的 32 位元不帶正負號的整數值為位元組陣列。</summary>
      <param name="value">要轉換的數字。</param>
      <returns>長度為 4 的位元組陣列。</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt64)">
      <summary>傳回指定的 64 位元不帶正負號的整數值為位元組陣列。</summary>
      <param name="value">要轉換的數字。</param>
      <returns>長度為 8 的位元組陣列。</returns>
    </member>
    <member name="M:System.BitConverter.Int32BitsToSingle(System.Int32)">
      <summary>將指定的 32 位元整數重新解譯為單精確度浮點數值。</summary>
      <param name="value">要轉換的整數。</param>
      <returns>代表已轉換之整數的單精確度浮點數值。</returns>
    </member>
    <member name="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
      <summary>將指定的 64 位元帶正負號整數重新解譯為雙精確度浮點數。</summary>
      <param name="value">要轉換的數字。</param>
      <returns>雙精確度浮點數的值等於 <paramref name="value" />。</returns>
    </member>
    <member name="F:System.BitConverter.IsLittleEndian">
      <summary>指出資料儲存在此電腦架構中的位元組順序 (字節順序)。</summary>
    </member>
    <member name="M:System.BitConverter.SingleToInt32Bits(System.Single)">
      <summary>將單精確度浮點數值轉換為整數。</summary>
      <param name="value">要轉換的單精確度浮點數值。</param>
      <returns>代表已轉換之單精確度浮點數值的整數。</returns>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的位元組所轉換的布林值。</summary>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">
        <paramref name="value" /> 內的位元組索引。</param>
      <returns>如果在 <paramref name="startIndex" /> 中 <paramref name="value" /> 的位元組為非零值 (Nonzero)，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.ReadOnlySpan{System.Byte})">
      <summary>將唯讀位元組範圍轉換為布林值。</summary>
      <param name="value">包含要轉換之位元組的唯讀範圍。</param>
      <returns>代表已轉換之值的布林值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的長度小於 0。</exception>
    </member>
    <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的兩個位元組所轉換的 Unicode 字元。</summary>
      <param name="value">陣列。</param>
      <param name="startIndex">開始位置在 <paramref name="value" /> 內。</param>
      <returns>由兩個位元組所形成的字元開始於 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToChar(System.ReadOnlySpan{System.Byte})">
      <summary>將唯讀位元組範圍轉換為字元。</summary>
      <param name="value">包含要轉換之位元組的唯讀範圍。</param>
      <returns>代表已轉換之位元組的字元。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的長度小於 <see cref="T:System.Char" /> 的長度。</exception>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的八個位元組所轉換的雙精確度浮點數。</summary>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">開始位置在 <paramref name="value" /> 內。</param>
      <returns>由八個位元組所形成的雙精確度浮點數開始於 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大於或等於 <paramref name="value" /> 的長度減去 7，而且小於或等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.ReadOnlySpan{System.Byte})">
      <summary>將唯讀位元組範圍轉換為雙精確度浮點數值。</summary>
      <param name="value">包含要轉換之位元組的唯讀範圍。</param>
      <returns>代表已轉換之位元組的雙精確度浮點數值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的長度小於 <see cref="T:System.Double" /> 值的長度。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的兩個位元組所轉換的 16 位元帶正負號的整數 (Signed Integer)。</summary>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">開始位置在 <paramref name="value" /> 內。</param>
      <returns>由兩個位元組所形成的 16 位元帶正負號的整數開始於 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.ReadOnlySpan{System.Byte})">
      <summary>將唯讀位元組範圍轉換為 16 位元帶正負號的整數。</summary>
      <param name="value">包含要轉換之位元組的唯讀範圍。</param>
      <returns>16 位元帶正負號的整數，代表已轉換的位元組。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的長度小於 2。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的四個位元組所轉換的 32 位元帶正負號的整數。</summary>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">開始位置在 <paramref name="value" /> 內。</param>
      <returns>由四個位元組所形成的 32 位元帶正負號的整數 (Signed Integer)，開始於 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大於或等於 <paramref name="value" /> 的長度減去 3，而且小於或等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.ReadOnlySpan{System.Byte})">
      <summary>將唯讀位元組範圍轉換為 32 位元帶正負號的整數。</summary>
      <param name="value">包含要轉換之位元組的唯讀範圍。</param>
      <returns>32 位元帶正負號的整數，代表已轉換的位元組。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的長度小於 4。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的八個位元組所轉換的 64 位元帶正負號的整數。</summary>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">開始位置在 <paramref name="value" /> 內。</param>
      <returns>由八個位元組所形成的 64 位元帶正負號的整數開始於 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大於或等於 <paramref name="value" /> 的長度減去 7，而且小於或等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.ReadOnlySpan{System.Byte})">
      <summary>將唯讀位元組範圍轉換為 64 位元帶正負號的整數。</summary>
      <param name="value">包含要轉換之位元組的唯讀範圍。</param>
      <returns>64 位元帶正負號的整數，代表已轉換的位元組。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的長度小於 8。</exception>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的四個位元組所轉換的單精確度浮點數。</summary>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">開始位置在 <paramref name="value" /> 內。</param>
      <returns>由四個位元組所形成的單精確度浮點數開始於 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大於或等於 <paramref name="value" /> 的長度減去 3，而且小於或等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.ReadOnlySpan{System.Byte})">
      <summary>將唯讀位元組範圍轉換為雙精確度浮點數值。</summary>
      <param name="value">包含要轉換之位元組的唯讀範圍。</param>
      <returns>代表已轉換之位元組的雙精確度浮點數值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的長度小於 <see cref="T:System.Double" /> 值的長度。</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[])">
      <summary>將指定之位元組陣列的每一個元素之數值轉換成其對等的十六進位字串表示。</summary>
      <param name="value">位元組陣列。</param>
      <returns>一對十六進位的字串是以連字號做為分隔，其中每對各表示 <paramref name="value" /> 中對應的元素，例如 "7F-2C-4A-00"。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
      <summary>將指定之位元組子陣列的每一個元素之數值轉換成其對等的十六進位字串表示。</summary>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">開始位置在 <paramref name="value" /> 內。</param>
      <returns>一對十六進位字串是以連字號做為分隔符號，其中每對分別表示 <paramref name="value" /> 子陣列中對應的元素，例如 "7F-2C-4A-00"。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
      <summary>將指定之位元組子陣列的每一個元素之數值轉換成其對等的十六進位字串表示。</summary>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">開始位置在 <paramref name="value" /> 內。</param>
      <param name="length">
        <paramref name="value" /> 中要轉換的陣列元素數目。</param>
      <returns>一對十六進位字串是以連字號做為分隔符號，其中每對分別表示 <paramref name="value" /> 子陣列中對應的元素，例如 "7F-2C-4A-00"。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小於零。
-或-
<paramref name="startIndex" /> 大於零，且會大於或等於 <paramref name="value" /> 的長度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 的組合不會指定 <paramref name="value" /> 內的位置，也就是說，<paramref name="startIndex" /> 參數會大於 <paramref name="value" /> 的長度減去 <paramref name="length" /> 參數。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的兩個位元組所轉換的 16 位元不帶正負號的整數 (Unsigned Integer)。</summary>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">開始位置在 <paramref name="value" /> 內。</param>
      <returns>由兩個位元組所形成的 16 位元不帶正負號的整數開始於 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.ReadOnlySpan{System.Byte})">
      <summary>將唯讀位元組範圍轉換為 16 位元不帶正負號的整數。</summary>
      <param name="value">包含要轉換之位元組的唯讀範圍。</param>
      <returns>16 位元不帶正負號的整數，代表已轉換的位元組。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的長度小於 2。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的四個位元組所轉換的 32 位元不帶正負號的整數。</summary>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">開始位置在 <paramref name="value" /> 內。</param>
      <returns>由四個位元組所形成的 32 位元不帶正負號的整數開始於 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大於或等於 <paramref name="value" /> 的長度減去 3，而且小於或等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.ReadOnlySpan{System.Byte})">
      <summary>將唯讀位元組範圍轉換為 32 位元不帶正負號的整數。</summary>
      <param name="value">包含要轉換之位元組的唯讀範圍。</param>
      <returns>32 位元不帶正負號的整數，代表已轉換的位元組。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的長度小於 4。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的八個位元組所轉換的 64 位元不帶正負號的整數。</summary>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">開始位置在 <paramref name="value" /> 內。</param>
      <returns>由八個位元組所形成的 64 位元不帶正負號的整數開始於 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大於或等於 <paramref name="value" /> 的長度減去 7，而且小於或等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.ReadOnlySpan{System.Byte})">
      <summary>將位元組轉換為不帶正負號的 long 類型。</summary>
      <param name="value">包含要轉換之位元組的唯讀範圍。</param>
      <returns>64 位元不帶正負號的整數，代表已轉換的位元組。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Boolean)">
      <summary>將布林值轉換為位元組範圍。</summary>
      <param name="destination">當此方法傳回時，代表已轉換之布林值的位元組。</param>
      <param name="value">要轉換的布林值。</param>
      <returns>如果轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Char)">
      <summary>將字元轉換為位元組範圍。</summary>
      <param name="destination">當此方法傳回時，代表已轉換字元的位元組。</param>
      <param name="value">要轉換的字元。</param>
      <returns>如果轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Double)">
      <summary>將雙精確度浮點數值轉換為位元組範圍。</summary>
      <param name="destination">當此方法傳回時，代表已轉換之雙精確度浮點數值的位元組。</param>
      <param name="value">要轉換的雙精確度浮點數值。</param>
      <returns>如果轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int16)">
      <summary>將 16 位元帶正負號的整數轉換為位元組範圍。</summary>
      <param name="destination">當此方法傳回時，代表已轉換之 16 帶正負號的整數的位元組。</param>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <returns>如果轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int32)">
      <summary>將 32 位元帶正負號的整數轉換為位元組範圍。</summary>
      <param name="destination">當此方法傳回時，代表已轉換之 32 帶正負號的整數的位元組。</param>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>如果轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int64)">
      <summary>將 64 位元帶正負號的整數轉換為位元組範圍。</summary>
      <param name="destination">當此方法傳回時，代表已轉換之 64位元 帶正負號的整數的位元組。</param>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <returns>如果轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Single)">
      <summary>將雙精確度浮點數值轉換為位元組範圍。</summary>
      <param name="destination">當此方法傳回時，代表已轉換之雙精確度浮點數值的位元組。</param>
      <param name="value">要轉換的雙精確度浮點數值。</param>
      <returns>如果轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt16)">
      <summary>將不帶正負號的 16 位元整數轉換為位元組範圍。</summary>
      <param name="destination">當此方法傳回時，代表已轉換之不帶正負號 16 位元整數的位元組。</param>
      <param name="value">要轉換之不帶正負號的 16 位元整數。</param>
      <returns>如果轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt32)">
      <summary>將 32 位元不帶正負號的整數轉換為位元組範圍。</summary>
      <param name="destination">當此方法傳回時，代表已轉換之不帶正負號 32 位元整數的位元組。</param>
      <param name="value">要轉換之不帶正負號的 32 位元整數。</param>
      <returns>如果轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt64)">
      <summary>將不帶正負號的 64 位元整數轉換為位元組範圍。</summary>
      <param name="destination">當此方法傳回時，代表已轉換之不帶正負號 64 位元整數的位元組。</param>
      <param name="value">要轉換的不帶正負號的 64 位元整數。</param>
      <returns>如果轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.CannotUnloadAppDomainException">
      <summary>嘗試卸載應用程式定義域失敗時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor">
      <summary>初始化 <see cref="T:System.CannotUnloadAppDomainException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>從序列化資料中，初始化 <see cref="T:System.CannotUnloadAppDomainException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.CannotUnloadAppDomainException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.CannotUnloadAppDomainException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.CodeDom.Compiler.IndentedTextWriter">
      <summary>提供可以使用定位點字串 (String) 語彙基元 (Token) 縮排新行的文字寫入器。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>使用指定的文字寫入器和預設的定位點字串，來初始化 <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> 類別的新執行個體。</summary>
      <param name="writer">用來輸出的 <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>使用指定的文字寫入器和定位點字串來，初始化 <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> 類別的新執行個體。</summary>
      <param name="writer">用來輸出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="tabString">用來縮排的定位點字串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Close">
      <summary>關閉正在寫入的文件。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.IndentedTextWriter.DefaultTabString">
      <summary>指定預設的定位點字串。 這個欄位是常數。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Encoding">
      <summary>取得要使用的文字寫入器編碼方式。</summary>
      <returns>
        <see cref="T:System.Text.Encoding" />，表示要使用的文字寫入器的編碼方式。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Flush">
      <summary>清除資料流。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Indent">
      <summary>取得或設定縮排的空格數。</summary>
      <returns>要縮排的空格數。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.InnerWriter">
      <summary>要使用的 <see cref="T:System.IO.TextWriter" />。</summary>
      <returns>要使用的 <see cref="T:System.IO.TextWriter" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.NewLine">
      <summary>取得或設定要使用的新行字元。</summary>
      <returns>要使用的新行字元。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.OutputTabs">
      <summary>根據 <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" /> 屬性，對每一層縮排輸出索引標籤字串一次。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Boolean)">
      <summary>將布林值 (Boolean) 的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的布林值 (Boolean)。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char)">
      <summary>將字元寫入文字資料流。</summary>
      <param name="value">要寫入的字元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[])">
      <summary>將字元陣列寫入文字資料流。</summary>
      <param name="buffer">要寫入的字元陣列。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>將字元的子陣列寫入至文字資料流。</summary>
      <param name="buffer">資料寫入來源的字元陣列。</param>
      <param name="index">緩衝區中的起始索引。</param>
      <param name="count">要寫入的字元數。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Double)">
      <summary>將 Double 的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的 <see langword="double" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int32)">
      <summary>將整數的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的整數。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int64)">
      <summary>將 8 位元組整數的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的 8 位元組整數。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Object)">
      <summary>將物件的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的物件。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Single)">
      <summary>將 Single 的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的 <see langword="single" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String)">
      <summary>將指定的字串寫入文字資料流。</summary>
      <param name="s">要寫入的字串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>使用與指定一樣的語意寫入格式化字串。</summary>
      <param name="format">格式化字串。</param>
      <param name="arg0">要寫入至格式化字串的物件。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>使用與指定一樣的語意寫入格式化字串。</summary>
      <param name="format">要使用的格式化字串。</param>
      <param name="arg0">要寫入格式化字串的第一個物件。</param>
      <param name="arg1">要寫入格式化字串的第二個物件。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>使用與指定一樣的語意寫入格式化字串。</summary>
      <param name="format">要使用的格式化字串。</param>
      <param name="arg">要輸出的引數陣列。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine">
      <summary>寫入行結束字元。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>將布林值的文字表示寫入文字資料流，跟隨行結束字元。</summary>
      <param name="value">要寫入的布林值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char)">
      <summary>將字元寫入文字資料流，跟隨行結束字元。</summary>
      <param name="value">要寫入的字元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>將字元陣列寫入文字資料流，跟隨行結束字元。</summary>
      <param name="buffer">要寫入的字元陣列。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>將字元的子陣列寫入文字資料流，跟隨行結束字元。</summary>
      <param name="buffer">資料寫入來源的字元陣列。</param>
      <param name="index">緩衝區中的起始索引。</param>
      <param name="count">要寫入的字元數。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Double)">
      <summary>將 Double 的文字表示寫入文字資料流，跟隨行結束字元。</summary>
      <param name="value">要寫入的 <see langword="double" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>將整數的文字表示寫入文字資料流，跟隨行結束字元。</summary>
      <param name="value">要寫入的整數。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>將 8 位元組整數的文字表示寫入文字資料流，跟隨行結束字元。</summary>
      <param name="value">要寫入的 8 位元組整數。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Object)">
      <summary>將物件的文字表示寫入文字資料流，跟隨行結束字元。</summary>
      <param name="value">要寫入的物件。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Single)">
      <summary>將 Single 的文字表示寫入文字資料流，跟隨行結束字元。</summary>
      <param name="value">要寫入的 <see langword="single" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String)">
      <summary>將指定的字串寫入文字資料流，跟隨行結束字元。</summary>
      <param name="s">要寫入的字串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>使用與指定一樣的語意寫入格式化字串，並跟隨行結束字元。</summary>
      <param name="format">格式化字串。</param>
      <param name="arg0">要寫入至格式化字串的物件。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>使用與指定一樣的語意寫入格式化字串，並跟隨行結束字元。</summary>
      <param name="format">要使用的格式化字串。</param>
      <param name="arg0">要寫入格式化字串的第一個物件。</param>
      <param name="arg1">要寫入格式化字串的第二個物件。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>使用與指定一樣的語意寫入格式化字串，並跟隨行結束字元。</summary>
      <param name="format">要使用的格式化字串。</param>
      <param name="arg">要輸出的引數陣列。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>將 UInt32 的文字表示寫入文字資料流，跟隨行結束字元。</summary>
      <param name="value">要輸出的 UInt32。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>將指定的字串寫入沒有定位點的一行。</summary>
      <param name="s">要寫入的字串。</param>
    </member>
    <member name="T:System.Collections.ArrayList">
      <summary>使用大小會視需要動態增加的陣列，實作 <see cref="T:System.Collections.IList" /> 介面。</summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor">
      <summary>初始化 <see cref="T:System.Collections.ArrayList" /> 類別的新執行個體，這個執行個體為空白且具有預設的初始容量。</summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
      <summary>初始化 <see cref="T:System.Collections.ArrayList" /> 類別的新執行個體，其含有從指定的集合複製過來的項目且具有與複製項目數一樣的初始容量。</summary>
      <param name="c">
        <see cref="T:System.Collections.ICollection" />，要將其項目複製至新的清單。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Int32)">
      <summary>為具有指定初始容量且為空的 <see cref="T:System.Collections.ArrayList" /> 類別，初始化新的執行個體。</summary>
      <param name="capacity">新清單一開始能夠儲存的項目數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
      <summary>建立特定 <see cref="T:System.Collections.ArrayList" /> 的 <see cref="T:System.Collections.IList" /> 包裝函式。</summary>
      <param name="list">要包裝的 <see cref="T:System.Collections.IList" />。</param>
      <returns>包住 <see cref="T:System.Collections.ArrayList" /> 的 <see cref="T:System.Collections.IList" /> 包裝函式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Add(System.Object)">
      <summary>將物件加入至 <see cref="T:System.Collections.ArrayList" /> 的末端。</summary>
      <param name="value">要新增至 <see cref="T:System.Object" /> 尾端的 <see cref="T:System.Collections.ArrayList" />。 這個值可以是 <see langword="null" />。</param>
      <returns>已加入 <see cref="T:System.Collections.ArrayList" /> 的 <paramref name="value" /> 索引。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 是唯讀的。
-或-
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
      <summary>將 <see cref="T:System.Collections.ICollection" /> 的項目加入 <see cref="T:System.Collections.ArrayList" /> 的結尾。</summary>
      <param name="c">
        <see cref="T:System.Collections.ICollection" />，其項目應加入 <see cref="T:System.Collections.ArrayList" /> 的結尾。 集合本身不能是 <see langword="null" />，但它可以包含為 <see langword="null" /> 的項目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 是唯讀的。
-或-
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子在已經過排序之 <see cref="T:System.Collections.ArrayList" /> 內，搜尋某範圍的項目，並傳回該項目以零為起始的索引。</summary>
      <param name="index">要搜尋範圍內之以零為起始的起始索引。</param>
      <param name="count">搜尋範圍的長度。</param>
      <param name="value">要尋找的 <see cref="T:System.Object" />。 這個值可以是 <see langword="null" />。</param>
      <param name="comparer">比較項目時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。
-或-
要使用預設比較子的 <see langword="null" /> 是每個項目的 <see cref="T:System.IComparable" /> 實作。</param>
      <returns>如果找到 <paramref name="value" />，則為已排序的 <see cref="T:System.Collections.ArrayList" /> 中 <paramref name="value" /> 之以零為起使的索引，否則為負數，即大於 <paramref name="value" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Collections.ArrayList.Count" /> 的位元補數。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不代表 <see cref="T:System.Collections.ArrayList" /> 中的有效範圍。
-或-
<paramref name="comparer" /> 是 <see langword="null" />，而且 <paramref name="value" /> 和 <see cref="T:System.Collections.ArrayList" /> 的項目都不能實作 <see cref="T:System.IComparable" /> 介面。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 是 <see langword="null" /> 且 <paramref name="value" /> 的類型與 <see cref="T:System.Collections.ArrayList" /> 的項目類型不同。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。
-或-
<paramref name="count" /> 小於零。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object)">
      <summary>使用預設的比較子並傳回項目以零為起始的索引，來搜尋項目之整個排序的 <see cref="T:System.Collections.ArrayList" />。</summary>
      <param name="value">要尋找的 <see cref="T:System.Object" />。 這個值可以是 <see langword="null" />。</param>
      <returns>如果找到 <paramref name="value" />，則為已排序的 <see cref="T:System.Collections.ArrayList" /> 中 <paramref name="value" /> 之以零為起使的索引，否則為負數，即大於 <paramref name="value" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Collections.ArrayList.Count" /> 的位元補數。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 和 <see cref="T:System.Collections.ArrayList" /> 的項目都不能實作 <see cref="T:System.IComparable" /> 介面。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 的類型與 <see cref="T:System.Collections.ArrayList" /> 的項目類型不同。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子並傳回項目以零為起始的索引，來搜尋項目之整個排序的 <see cref="T:System.Collections.ArrayList" />。</summary>
      <param name="value">要尋找的 <see cref="T:System.Object" />。 這個值可以是 <see langword="null" />。</param>
      <param name="comparer">比較項目時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。
-或-
要使用預設比較子的 <see langword="null" /> 是每個項目的 <see cref="T:System.IComparable" /> 實作。</param>
      <returns>如果找到 <paramref name="value" />，則為已排序的 <see cref="T:System.Collections.ArrayList" /> 中 <paramref name="value" /> 之以零為起使的索引，否則為負數，即大於 <paramref name="value" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Collections.ArrayList.Count" /> 的位元補數。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 是 <see langword="null" />，而且 <paramref name="value" /> 和 <see cref="T:System.Collections.ArrayList" /> 的項目都不能實作 <see cref="T:System.IComparable" /> 介面。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 是 <see langword="null" /> 且 <paramref name="value" /> 的類型與 <see cref="T:System.Collections.ArrayList" /> 的項目類型不同。</exception>
    </member>
    <member name="P:System.Collections.ArrayList.Capacity">
      <summary>取得或設定 <see cref="T:System.Collections.ArrayList" /> 可包含的項目數目。</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 可包含的項目數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.ArrayList.Capacity" /> 是設定為小於 <see cref="P:System.Collections.ArrayList.Count" /> 的值。</exception>
      <exception cref="T:System.OutOfMemoryException">系統上沒有足夠的記憶體可用。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clear">
      <summary>移除 <see cref="T:System.Collections.ArrayList" /> 中的所有項目。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 是唯讀的。
-或-
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clone">
      <summary>建立 <see cref="T:System.Collections.ArrayList" /> 的淺層複本。</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 的淺層複本。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.Contains(System.Object)">
      <summary>判斷某項目是否在 <see cref="T:System.Collections.ArrayList" /> 中。</summary>
      <param name="item">要在 <see cref="T:System.Object" /> 中尋找的 <see cref="T:System.Collections.ArrayList" />。 這個值可以是 <see langword="null" />。</param>
      <returns>如果在 <see langword="true" /> 中找到 <paramref name="item" />，則為 <see cref="T:System.Collections.ArrayList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array)">
      <summary>從目標陣列的開頭開始，將整個 <see cref="T:System.Collections.ArrayList" /> 複製至相容的一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ArrayList" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多維的。
-或-
來源 <see cref="T:System.Collections.ArrayList" /> 中的項目數大於目的 <paramref name="array" /> 可包含的項目數。</exception>
      <exception cref="T:System.InvalidCastException">來源 <see cref="T:System.Collections.ArrayList" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
      <summary>從目標陣列的指定索引開始，將整個 <see cref="T:System.Collections.ArrayList" /> 複製到相容的一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ArrayList" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多維的。
-或-
來源 <see cref="T:System.Collections.ArrayList" /> 中的項目數目，大於 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
      <exception cref="T:System.InvalidCastException">來源 <see cref="T:System.Collections.ArrayList" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>從目標陣列的指定索引開始，將項目範圍從 <see cref="T:System.Collections.ArrayList" /> 複製至相容的一維 <see cref="T:System.Array" /></summary>
      <param name="index">來源 <see cref="T:System.Collections.ArrayList" /> 中以零為起始的索引，位於複製開始的位置。</param>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ArrayList" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
      <param name="count">要複製的項目數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。
-或-
<paramref name="arrayIndex" /> 小於零。
-或-
<paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多維的。
-或-
<paramref name="index" /> 等於或大於來源 <see cref="P:System.Collections.ArrayList.Count" /> 的 <see cref="T:System.Collections.ArrayList" />。
-或-
從 <paramref name="index" /> 到來源 <see cref="T:System.Collections.ArrayList" /> 結尾的項目數目，大於從 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
      <exception cref="T:System.InvalidCastException">來源 <see cref="T:System.Collections.ArrayList" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</exception>
    </member>
    <member name="P:System.Collections.ArrayList.Count">
      <summary>取得 <see cref="T:System.Collections.ArrayList" /> 中實際包含的項目數目。</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 中實際包含的項目數目。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
      <summary>傳回具有固定大小的 <see cref="T:System.Collections.ArrayList" /> 包裝函式。</summary>
      <param name="list">要包裝的 <see cref="T:System.Collections.ArrayList" />。</param>
      <returns>具有固定大小的 <see cref="T:System.Collections.ArrayList" /> 包裝函式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
      <summary>傳回具有固定大小的 <see cref="T:System.Collections.IList" /> 包裝函式。</summary>
      <param name="list">要包裝的 <see cref="T:System.Collections.IList" />。</param>
      <returns>具有固定大小的 <see cref="T:System.Collections.IList" /> 包裝函式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator">
      <summary>傳回整個 <see cref="T:System.Collections.ArrayList" /> 的列舉值。</summary>
      <returns>整個 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.ArrayList" />。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
      <summary>傳回適用於 <see cref="T:System.Collections.ArrayList" /> 中某段範圍項目的列舉程式。</summary>
      <param name="index">列舉程式應參考之 <see cref="T:System.Collections.ArrayList" /> 區段以零為起始的起始索引。</param>
      <param name="count">列舉程式應參考之 <see cref="T:System.Collections.ArrayList" /> 區段中的項目數。</param>
      <returns>適用於 <see cref="T:System.Collections.IEnumerator" /> 中某指定項目範圍的 <see cref="T:System.Collections.ArrayList" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。
-或-
<paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 未指定 <see cref="T:System.Collections.ArrayList" /> 中的有效範圍。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
      <summary>傳回 <see cref="T:System.Collections.ArrayList" />，代表來源 <see cref="T:System.Collections.ArrayList" /> 中項目的子集。</summary>
      <param name="index">範圍起始處之以零為起始的 <see cref="T:System.Collections.ArrayList" /> 索引。</param>
      <param name="count">範圍中的項目數。</param>
      <returns>
        <see cref="T:System.Collections.ArrayList" />，代表來源 <see cref="T:System.Collections.ArrayList" /> 中項目的子集。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。
-或-
<paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不代表 <see cref="T:System.Collections.ArrayList" /> 中項目的有效範圍。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object)">
      <summary>搜尋指定的 <see cref="T:System.Object" />，並傳回在整個 <see cref="T:System.Collections.ArrayList" /> 中第一個符合項目之以零為起始的索引。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中尋找的 <see cref="T:System.Collections.ArrayList" />。 這個值可以是 <see langword="null" />。</param>
      <returns>整個 <paramref name="value" /> 中第一個出現 <see cref="T:System.Collections.ArrayList" /> 之以零為起始的索引 (如有找到)，否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
      <summary>在 <see cref="T:System.Object" /> 中從指定的索引開始到最後一個項目這段範圍內，搜尋指定的 <see cref="T:System.Collections.ArrayList" /> 第一次出現的位置，並傳回其索引值 (索引以零起始)。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中尋找的 <see cref="T:System.Collections.ArrayList" />。 這個值可以是 <see langword="null" />。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <returns>在 <paramref name="value" /> 中從 <see cref="T:System.Collections.ArrayList" /> 開始到最後一個元素的範圍內，第一次出現 <paramref name="startIndex" /> 的位置之以零為起始的索引 (如有找到)，如未找到則為 -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <see cref="T:System.Collections.ArrayList" /> 的有效索引範圍。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
      <summary>在 <see cref="T:System.Object" /> 中從指定索引開始且包含指定項目個數的範圍內，搜尋指定的 <see cref="T:System.Collections.ArrayList" /> 並傳回第一次出現的以零為起始的索引。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中尋找的 <see cref="T:System.Collections.ArrayList" />。 這個值可以是 <see langword="null" />。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <returns>在 <paramref name="value" /> 中從 <see cref="T:System.Collections.ArrayList" /> 開始且包含 <paramref name="startIndex" /> 個元素的範圍內，第一次出現 <paramref name="count" /> 之以零為起始的索引，如未找到則為 -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <see cref="T:System.Collections.ArrayList" /> 的有效索引範圍。
-或-
<paramref name="count" /> 小於零。
-或-
<paramref name="startIndex" /> 和 <paramref name="count" /> 不指定 <see cref="T:System.Collections.ArrayList" /> 的有效區段。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
      <summary>將項目插入至 <see cref="T:System.Collections.ArrayList" /> 中指定的索引位置。</summary>
      <param name="index">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value">要插入的 <see cref="T:System.Object" />。 這個值可以是 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。
-或-
<paramref name="index" /> 大於 <see cref="P:System.Collections.ArrayList.Count" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 是唯讀的。
-或-
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
      <summary>將集合的項目插入位於指定索引的 <see cref="T:System.Collections.ArrayList" /> 中。</summary>
      <param name="index">應插入新項目處的以零為起始的索引。</param>
      <param name="c">
        <see cref="T:System.Collections.ICollection" />，其項目應插入 <see cref="T:System.Collections.ArrayList" />。 集合本身不能是 <see langword="null" />，但它可以包含為 <see langword="null" /> 的項目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。
-或-
<paramref name="index" /> 大於 <see cref="P:System.Collections.ArrayList.Count" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 是唯讀的。
-或-
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="P:System.Collections.ArrayList.IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.ArrayList" /> 是否有固定的大小。</summary>
      <returns>如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.ArrayList" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.ArrayList" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.ArrayList" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsSynchronized">
      <summary>取得值，這個值表示對 <see cref="T:System.Collections.ArrayList" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ArrayList" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ArrayList.Item(System.Int32)">
      <summary>在指定的索引位置上取得或設定項目。</summary>
      <param name="index">要取得或設定之以零為起始的項目索引。</param>
      <returns>在指定索引上的項目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。
-或-
<paramref name="index" /> 等於或大於 <see cref="P:System.Collections.ArrayList.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
      <summary>搜尋指定的 <see cref="T:System.Object" />，並傳回在整個 <see cref="T:System.Collections.ArrayList" /> 中最後一個符合項目之以零為起始的索引。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中尋找的 <see cref="T:System.Collections.ArrayList" />。 這個值可以是 <see langword="null" />。</param>
      <returns>如果找到的話，則為整個 <paramref name="value" /> 中最後一次出現 <see cref="T:System.Collections.ArrayList" /> 之以零為起始的索引 (如有找到)，如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
      <summary>在 <see cref="T:System.Object" /> 中從第一個項目開始到指定的索引這個範圍內，搜尋指定的 <see cref="T:System.Collections.ArrayList" />，並傳回最後一次出現的索引值 (以零為起始)。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中尋找的 <see cref="T:System.Collections.ArrayList" />。 這個值可以是 <see langword="null" />。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <returns>在 <paramref name="value" /> 中從第一個元素開始到 <see cref="T:System.Collections.ArrayList" /> 這段範圍內，如果有找到指定的 <paramref name="startIndex" /> 最後一次出現的位置，則為該位置以零為起始的索引，如未找到則為 -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <see cref="T:System.Collections.ArrayList" /> 的有效索引範圍。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
      <summary>搜尋指定的 <see cref="T:System.Object" />，並傳回 <see cref="T:System.Collections.ArrayList" /> 中包含指定之項目數且結束於指定之索引的項目範圍內，最後一個相符項目之以零為起始的索引。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中尋找的 <see cref="T:System.Collections.ArrayList" />。 這個值可以是 <see langword="null" />。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <returns>如果找到，則為 <paramref name="value" /> 中包含 <see cref="T:System.Collections.ArrayList" /> 個元素且結束於 <paramref name="count" /> 的元素範圍內，<paramref name="startIndex" /> 的最後一個相符項目之以零為起始的索引，否則為 -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <see cref="T:System.Collections.ArrayList" /> 的有效索引範圍。
-或-
<paramref name="count" /> 小於零。
-或-
<paramref name="startIndex" /> 和 <paramref name="count" /> 不指定 <see cref="T:System.Collections.ArrayList" /> 的有效區段。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
      <summary>傳回唯讀的 <see cref="T:System.Collections.ArrayList" /> 包裝函式。</summary>
      <param name="list">要包裝的 <see cref="T:System.Collections.ArrayList" />。</param>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 的唯讀 <paramref name="list" /> 包裝函式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
      <summary>傳回唯讀的 <see cref="T:System.Collections.IList" /> 包裝函式。</summary>
      <param name="list">要包裝的 <see cref="T:System.Collections.IList" />。</param>
      <returns>
        <see cref="T:System.Collections.IList" /> 的唯讀 <paramref name="list" /> 包裝函式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.ArrayList" /> 移除特定物件之第一個符合的元素。</summary>
      <param name="obj">要從 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.ArrayList" />。 這個值可以是 <see langword="null" />。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 是唯讀的。
-或-
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.ArrayList" /> 之指定索引處的項目。</summary>
      <param name="index">移除項目之以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。
-或-
<paramref name="index" /> 等於或大於 <see cref="P:System.Collections.ArrayList.Count" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 是唯讀的。
-或-
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
      <summary>從 <see cref="T:System.Collections.ArrayList" /> 移除的項目範圍。</summary>
      <param name="index">要移除之項目範圍內之以零為起始的起始索引。</param>
      <param name="count">要移除的項目數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。
-或-
<paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不代表 <see cref="T:System.Collections.ArrayList" /> 中項目的有效範圍。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 是唯讀的。
-或-
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
      <summary>傳回 <see cref="T:System.Collections.ArrayList" />，其項目是指定值的複本。</summary>
      <param name="value">要多次複製到新 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.ArrayList" />。 這個值可以是 <see langword="null" />。</param>
      <param name="count">應複製 <paramref name="value" /> 的次數。</param>
      <returns>具有 <see cref="T:System.Collections.ArrayList" /> 個項目數目的 <paramref name="count" />，全部皆為 <paramref name="value" /> 的複本。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小於零。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse">
      <summary>反轉整個 <see cref="T:System.Collections.ArrayList" /> 中項目的順序。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
      <summary>反向指定範圍中項目的順序。</summary>
      <param name="index">要反向範圍內之以零為起始的起始索引。</param>
      <param name="count">要反向範圍中的項目數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。
-或-
<paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不代表 <see cref="T:System.Collections.ArrayList" /> 中項目的有效範圍。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
      <summary>在 <see cref="T:System.Collections.ArrayList" /> 中項目的範圍內複製集合的項目。</summary>
      <param name="index">要開始複製 <see cref="T:System.Collections.ArrayList" /> 之項目處的以零為起始的 <paramref name="c" /> 索引。</param>
      <param name="c">
        <see cref="T:System.Collections.ICollection" />，其項目被複製至 <see cref="T:System.Collections.ArrayList" />。 集合本身不能是 <see langword="null" />，但它可以包含為 <see langword="null" /> 的項目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。
-或-
<paramref name="index" /> 加上 <paramref name="c" /> 中的項目數大於 <see cref="P:System.Collections.ArrayList.Count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort">
      <summary>排序整個 <see cref="T:System.Collections.ArrayList" /> 中的項目。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
      <summary>使用指定的比較子來排序在整個 <see cref="T:System.Collections.ArrayList" /> 中的項目。</summary>
      <param name="comparer">比較項目時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。
-或-
若為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則表示要使用每個項目的 <see cref="T:System.IComparable" /> 實作。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 是唯讀的。</exception>
      <exception cref="T:System.InvalidOperationException">比較兩個項目時發生錯誤。</exception>
      <exception cref="T:System.ArgumentException">
        <see langword="null" /> 傳遞給 <paramref name="comparer" />，而且在清單中的項目不會實作 <see cref="T:System.IComparable" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>使用指定的比較子對 <see cref="T:System.Collections.ArrayList" /> 中某段範圍內的項目進行排序。</summary>
      <param name="index">要排序範圍內之以零為起始的起始索引。</param>
      <param name="count">要排序的範圍長度。</param>
      <param name="comparer">比較項目時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。
-或-
若為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則表示要使用每個項目的 <see cref="T:System.IComparable" /> 實作。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。
-或-
<paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 未指定 <see cref="T:System.Collections.ArrayList" /> 中的有效範圍。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 是唯讀的。</exception>
      <exception cref="T:System.InvalidOperationException">比較兩個項目時發生錯誤。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
      <summary>傳回已同步 (安全執行緒) 的 <see cref="T:System.Collections.ArrayList" /> 包裝函式。</summary>
      <param name="list">要同步處理的 <see cref="T:System.Collections.ArrayList" />。</param>
      <returns>已同步 (安全執行緒) 的 <see cref="T:System.Collections.ArrayList" /> 包裝函式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
      <summary>傳回已同步 (安全執行緒) 的 <see cref="T:System.Collections.IList" /> 包裝函式。</summary>
      <param name="list">要同步處理的 <see cref="T:System.Collections.IList" />。</param>
      <returns>已同步 (安全執行緒) 的 <see cref="T:System.Collections.IList" /> 包裝函式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Collections.ArrayList.SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Collections.ArrayList" /> 的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Collections.ArrayList" /> 的物件。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray">
      <summary>將 <see cref="T:System.Collections.ArrayList" /> 的項目複製到新的 <see cref="T:System.Object" /> 陣列。</summary>
      <returns>含有 <see cref="T:System.Object" /> 的項目複本的 <see cref="T:System.Collections.ArrayList" /> 陣列。</returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray(System.Type)">
      <summary>將 <see cref="T:System.Collections.ArrayList" /> 的項目複製到指定項目類型的新陣列。</summary>
      <param name="type">要建立及複製項目之目的端陣列的項目 <see cref="T:System.Type" />。</param>
      <returns>由指定項目類型組成且含有 <see cref="T:System.Collections.ArrayList" /> 項目複本的陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">來源 <see cref="T:System.Collections.ArrayList" /> 類型無法自動轉換成指定的類型。</exception>
    </member>
    <member name="M:System.Collections.ArrayList.TrimToSize">
      <summary>將容量設為 <see cref="T:System.Collections.ArrayList" /> 中的實際項目數目。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 是唯讀的。
-或-
<see cref="T:System.Collections.ArrayList" /> 具有固定的大小。</exception>
    </member>
    <member name="T:System.Collections.Comparer">
      <summary>比較兩個物件是否相等，其中字串比較是區分大小寫的。</summary>
    </member>
    <member name="M:System.Collections.Comparer.#ctor(System.Globalization.CultureInfo)">
      <summary>使用指定的 <see cref="T:System.Collections.Comparer" />，初始化 <see cref="T:System.Globalization.CultureInfo" /> 類別的新執行個體。</summary>
      <param name="culture">新 <see cref="T:System.Globalization.CultureInfo" /> 所使用的 <see cref="T:System.Collections.Comparer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Comparer.Compare(System.Object,System.Object)">
      <summary>執行兩個相同型別物件的區分大小寫比較，並傳回表示是否某個物件小於、等於或大於另外一方的值。</summary>
      <param name="a">要比較的第一個物件。</param>
      <param name="b">要比較的第二個物件。</param>
      <returns>帶正負號的整數，表示 <paramref name="a" /> 和 <paramref name="b" /> 的相對值，如下表所示。
  值 
  意義 
  小於零 
 <paramref name="a" /> 小於 <paramref name="b" />。  
  
  零 
 <paramref name="a" />等於 <paramref name="b" />。  
  
  大於零 
 <paramref name="a" /> 大於 <paramref name="b" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="a" /> 和 <paramref name="b" /> 都不實作 <see cref="T:System.IComparable" /> 介面。
-或-
<paramref name="a" /> 和 <paramref name="b" /> 是不同的型別，而且二者都不能處理與另外一方的比較。</exception>
    </member>
    <member name="F:System.Collections.Comparer.Default">
      <summary>表示與目前執行緒的 <see cref="T:System.Collections.Comparer" /> 相關聯之 <see cref="P:System.Threading.Thread.CurrentCulture" /> 的執行個體。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.Collections.Comparer.DefaultInvariant">
      <summary>表示與 <see cref="T:System.Collections.Comparer" /> 相關聯的 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> 之執行個體。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.Collections.Comparer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化 (Serialization) 所需的資料填入 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
      <param name="info">要填入資料的物件。</param>
      <param name="context">關於序列化的來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Collections.Hashtable">
      <summary>代表根據索引鍵的雜湊程式碼，所整理的索引鍵/值組集合。</summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor">
      <summary>使用預設初始容量、載入因數、雜湊程式碼提供者和比較子，初始化 <see cref="T:System.Collections.Hashtable" /> 類別的空白新執行個體。</summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)">
      <summary>藉由將指定字典中的項目複製到新的 <see cref="T:System.Collections.Hashtable" /> 物件，初始化 <see cref="T:System.Collections.Hashtable" /> 類別的新執行個體。 新 <see cref="T:System.Collections.Hashtable" /> 物件的初始容量等於複製的項目數，並且此物件使用預設載入因數、雜湊程式碼提供者和比較子。</summary>
      <param name="d">要複製到新 <see cref="T:System.Collections.IDictionary" /> 物件的 <see cref="T:System.Collections.Hashtable" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)">
      <summary>藉由將指定字典中的項目複製到新的 <see cref="T:System.Collections.Hashtable" /> 物件，初始化 <see cref="T:System.Collections.Hashtable" /> 類別的新執行個體。 新 <see cref="T:System.Collections.Hashtable" /> 物件的初始容量等於複製的項目數，並且此物件使用預設的載入因數以及指定的 <see cref="T:System.Collections.IEqualityComparer" /> 物件。</summary>
      <param name="d">要複製到新 <see cref="T:System.Collections.IDictionary" /> 物件的 <see cref="T:System.Collections.Hashtable" /> 物件。</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 物件，它會定義與 <see cref="T:System.Collections.Hashtable" /> 並用的雜湊程式碼提供者和比較子。
-或-
<see langword="null" /> 表示使用預設雜湊程式碼提供者和預設比較子。 預設雜湊程式碼提供者是各金鑰的 <see cref="M:System.Object.GetHashCode" /> 實作，而預設比較子是各金鑰的 <see cref="M:System.Object.Equals(System.Object)" /> 實作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>藉由將指定字典中的項目複製到新的 <see cref="T:System.Collections.Hashtable" /> 物件，初始化 <see cref="T:System.Collections.Hashtable" /> 類別的新執行個體。 新 <see cref="T:System.Collections.Hashtable" /> 物件的初始容量等於複製的項目數，並且此物件使用預設的載入因數，以及指定的雜湊程式碼提供者和比較子。 這個 API 已經過時。 請參閱 <see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)" /> 以瞭解替代步驟。</summary>
      <param name="d">要複製到新 <see cref="T:System.Collections.IDictionary" /> 物件的 <see cref="T:System.Collections.Hashtable" /> 物件。</param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 物件，它會為 <see cref="T:System.Collections.Hashtable" /> 中的所有索引鍵提供雜湊程式碼。
-或-
要使用預設雜湊程式碼提供者的 <see langword="null" /> 是每個索引鍵的 <see cref="M:System.Object.GetHashCode" /> 之實作。</param>
      <param name="comparer">要用來判斷兩個索引鍵是否相等的 <see cref="T:System.Collections.IComparer" /> 物件。
-或-
表示使用預設比較子的 <see langword="null" />，預設比較子是每個索引鍵的  <see cref="M:System.Object.Equals(System.Object)" /> 實作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)">
      <summary>藉由將指定字典中的項目複製到新的 <see cref="T:System.Collections.Hashtable" /> 物件，初始化 <see cref="T:System.Collections.Hashtable" /> 類別的新執行個體。 新 <see cref="T:System.Collections.Hashtable" /> 物件的初始容量等於複製的項目數，並且此物件使用指定的載入因數，以及預設的雜湊程式碼提供者和比較子。</summary>
      <param name="d">要複製到新 <see cref="T:System.Collections.IDictionary" /> 物件的 <see cref="T:System.Collections.Hashtable" /> 物件。</param>
      <param name="loadFactor">從 0.1 到 1.0 範圍中的數字乘以預設值，提供最佳效能。 結果是雜湊桶項目的最大比例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" /> 小於 0.1。
-或-
<paramref name="loadFactor" /> 大於 1.0。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)">
      <summary>藉由將指定字典中的項目複製到新的 <see cref="T:System.Collections.Hashtable" /> 物件，初始化 <see cref="T:System.Collections.Hashtable" /> 類別的新執行個體。 新 <see cref="T:System.Collections.Hashtable" /> 物件的初始容量等於複製的項目數，並且此物件使用指定的載入因數和 <see cref="T:System.Collections.IEqualityComparer" /> 物件。</summary>
      <param name="d">要複製到新 <see cref="T:System.Collections.IDictionary" /> 物件的 <see cref="T:System.Collections.Hashtable" /> 物件。</param>
      <param name="loadFactor">從 0.1 到 1.0 範圍中的數字乘以預設值，提供最佳效能。 結果是雜湊桶項目的最大比例。</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 物件，它會定義與 <see cref="T:System.Collections.Hashtable" /> 並用的雜湊程式碼提供者和比較子。
-或-
<see langword="null" /> 表示使用預設雜湊程式碼提供者和預設比較子。 預設雜湊程式碼提供者是各金鑰的 <see cref="M:System.Object.GetHashCode" /> 實作，而預設比較子是各金鑰的 <see cref="M:System.Object.Equals(System.Object)" /> 實作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" /> 小於 0.1。
-或-
<paramref name="loadFactor" /> 大於 1.0。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>藉由將指定字典中的項目複製到新的 <see cref="T:System.Collections.Hashtable" /> 物件，初始化 <see cref="T:System.Collections.Hashtable" /> 類別的新執行個體。 新 <see cref="T:System.Collections.Hashtable" /> 物件的初始容量等於複製的項目數，並且此物件使用指定的載入因數、雜湊程式碼提供者和比較子。</summary>
      <param name="d">要複製到新 <see cref="T:System.Collections.IDictionary" /> 物件的 <see cref="T:System.Collections.Hashtable" /> 物件。</param>
      <param name="loadFactor">從 0.1 到 1.0 範圍中的數字乘以預設值，提供最佳效能。 結果是雜湊桶項目的最大比例。</param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 物件，它會為 <see cref="T:System.Collections.Hashtable" /> 中的所有索引鍵提供雜湊程式碼。
-或-
要使用預設雜湊程式碼提供者的 <see langword="null" /> 是每個索引鍵的 <see cref="M:System.Object.GetHashCode" /> 之實作。</param>
      <param name="comparer">要用來判斷兩個索引鍵是否相等的 <see cref="T:System.Collections.IComparer" /> 物件。
-或-
表示使用預設比較子的 <see langword="null" />，預設比較子是每個索引鍵的  <see cref="M:System.Object.Equals(System.Object)" /> 實作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" /> 小於 0.1。
-或-
<paramref name="loadFactor" /> 大於 1.0。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)">
      <summary>使用預設的初始容量和載入因數，以及指定的 <see cref="T:System.Collections.Hashtable" /> 物件，初始化 <see cref="T:System.Collections.IEqualityComparer" /> 類別的空白新執行個體。</summary>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 物件，它會定義與 <see cref="T:System.Collections.Hashtable" /> 物件並用的雜湊程式碼提供者和比較子。
-或-
<see langword="null" /> 表示使用預設雜湊程式碼提供者和預設比較子。 預設雜湊程式碼提供者是各金鑰的 <see cref="M:System.Object.GetHashCode" /> 實作，而預設比較子是各金鑰的 <see cref="M:System.Object.Equals(System.Object)" /> 實作。</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>使用預設的初始容量和載入因數，以及指定的雜湊程式碼提供者和比較子，初始化 <see cref="T:System.Collections.Hashtable" /> 類別的空白新執行個體。</summary>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 物件，為 <see cref="T:System.Collections.Hashtable" /> 物件中的所有索引鍵提供雜湊程式碼。
-或-
要使用預設雜湊程式碼提供者的 <see langword="null" /> 是每個索引鍵的 <see cref="M:System.Object.GetHashCode" /> 之實作。</param>
      <param name="comparer">要用來判斷兩個索引鍵是否相等的 <see cref="T:System.Collections.IComparer" /> 物件。
-或-
表示使用預設比較子的 <see langword="null" />，預設比較子是每個索引鍵的  <see cref="M:System.Object.Equals(System.Object)" /> 實作。</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32)">
      <summary>使用指定的初始容量以及預設的載入因數、雜湊程式碼提供者和比較子，初始化 <see cref="T:System.Collections.Hashtable" /> 類別的空白新執行個體。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 物件一開始可包含項目的大約數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>使用指定的初始容量和 <see cref="T:System.Collections.Hashtable" />，以及預設的載入因數，初始化 <see cref="T:System.Collections.IEqualityComparer" /> 類別的空白新執行個體。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 物件一開始可包含項目的大約數目。</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 物件，它會定義與 <see cref="T:System.Collections.Hashtable" /> 並用的雜湊程式碼提供者和比較子。
-或-
<see langword="null" /> 表示使用預設雜湊程式碼提供者和預設比較子。 預設雜湊程式碼提供者是各金鑰的 <see cref="M:System.Object.GetHashCode" /> 實作，而預設比較子是各金鑰的 <see cref="M:System.Object.Equals(System.Object)" /> 實作。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>使用指定的初始容量、雜湊程式碼提供者、比較子和預設的載入因數，初始化 <see cref="T:System.Collections.Hashtable" /> 類別的空白新執行個體。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 物件一開始可包含項目的大約數目。</param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 物件，它會為 <see cref="T:System.Collections.Hashtable" /> 中的所有索引鍵提供雜湊程式碼。
-或-
要使用預設雜湊程式碼提供者的 <see langword="null" /> 是每個索引鍵的 <see cref="M:System.Object.GetHashCode" /> 之實作。</param>
      <param name="comparer">要用來判斷兩個索引鍵是否相等的 <see cref="T:System.Collections.IComparer" /> 物件。
-或-
表示使用預設比較子的 <see langword="null" />，預設比較子是每個索引鍵的  <see cref="M:System.Object.Equals(System.Object)" /> 實作。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single)">
      <summary>使用指定的初始容量和載入因數，以及預設的雜湊程式碼提供者和比較子，初始化 <see cref="T:System.Collections.Hashtable" /> 類別的空白新執行個體。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 物件一開始可包含項目的大約數目。</param>
      <param name="loadFactor">從 0.1 到 1.0 範圍中的數字乘以預設值，提供最佳效能。 結果是雜湊桶項目的最大比例。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。
-或-
<paramref name="loadFactor" /> 小於 0.1。
-或-
<paramref name="loadFactor" /> 大於 1.0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="capacity" /> 導致溢位。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)">
      <summary>使用指定的初始容量、載入因數和 <see cref="T:System.Collections.Hashtable" /> 物件，初始化 <see cref="T:System.Collections.IEqualityComparer" /> 類別的空白新執行個體。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 物件一開始可包含項目的大約數目。</param>
      <param name="loadFactor">從 0.1 到 1.0 範圍中的數字乘以預設值，提供最佳效能。 結果是雜湊桶項目的最大比例。</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 物件，它會定義與 <see cref="T:System.Collections.Hashtable" /> 並用的雜湊程式碼提供者和比較子。
-或-
<see langword="null" /> 表示使用預設雜湊程式碼提供者和預設比較子。 預設雜湊程式碼提供者是各金鑰的 <see cref="M:System.Object.GetHashCode" /> 實作，而預設比較子是各金鑰的 <see cref="M:System.Object.Equals(System.Object)" /> 實作。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。
-或-
<paramref name="loadFactor" /> 小於 0.1。
-或-
<paramref name="loadFactor" /> 大於 1.0。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>使用指定的初始容量、載入因數、雜湊程式碼提供者和比較子，初始化 <see cref="T:System.Collections.Hashtable" /> 類別的空白新執行個體。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 物件一開始可包含項目的大約數目。</param>
      <param name="loadFactor">從 0.1 到 1.0 範圍中的數字乘以預設值，提供最佳效能。 結果是雜湊桶項目的最大比例。</param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 物件，它會為 <see cref="T:System.Collections.Hashtable" /> 中的所有索引鍵提供雜湊程式碼。
-或-
要使用預設雜湊程式碼提供者的 <see langword="null" /> 是每個索引鍵的 <see cref="M:System.Object.GetHashCode" /> 之實作。</param>
      <param name="comparer">要用來判斷兩個索引鍵是否相等的 <see cref="T:System.Collections.IComparer" /> 物件。
-或-
表示使用預設比較子的 <see langword="null" />，預設比較子是每個索引鍵的  <see cref="M:System.Object.Equals(System.Object)" /> 實作。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。
-或-
<paramref name="loadFactor" /> 小於 0.1。
-或-
<paramref name="loadFactor" /> 大於 1.0。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Collections.Hashtable" /> 類別的空白新執行個體，這個執行個體可序列化，並使用指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，含有要序列化 <see cref="T:System.Collections.Hashtable" /> 物件的必要資訊。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件，包含 <see cref="T:System.Collections.Hashtable" /> 所關聯之序列化資料流的來源及目的地。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Add(System.Object,System.Object)">
      <summary>將有指定索引鍵和數值的項目加入 <see cref="T:System.Collections.Hashtable" />。</summary>
      <param name="key">要加入的項目的索引鍵。</param>
      <param name="value">要加入的項目的值。 這個值可以是 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Hashtable" /> 中已存在具有相同索引鍵的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> 是唯讀的。
-或-
<see cref="T:System.Collections.Hashtable" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clear">
      <summary>移除 <see cref="T:System.Collections.Hashtable" /> 中的所有項目。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clone">
      <summary>建立 <see cref="T:System.Collections.Hashtable" /> 的淺層複本。</summary>
      <returns>
        <see cref="T:System.Collections.Hashtable" /> 的淺層複本。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.comparer">
      <summary>取得或設定 <see cref="T:System.Collections.IComparer" /> 所使用的 <see cref="T:System.Collections.Hashtable" />。</summary>
      <returns>
        <see cref="T:System.Collections.IComparer" /> 所使用的 <see cref="T:System.Collections.Hashtable" />。</returns>
      <exception cref="T:System.ArgumentException">屬性設為值，但使用 <see cref="T:System.Collections.IEqualityComparer" /> 建立雜湊資料表。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.Hashtable" /> 是否包含特定索引鍵。</summary>
      <param name="key">要在 <see cref="T:System.Collections.Hashtable" /> 中尋找的索引鍵。</param>
      <returns>如果 <see langword="true" /> 包含具有指定索引鍵的項目，則為 <see cref="T:System.Collections.Hashtable" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsKey(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.Hashtable" /> 是否包含特定索引鍵。</summary>
      <param name="key">要在 <see cref="T:System.Collections.Hashtable" /> 中尋找的索引鍵。</param>
      <returns>如果 <see langword="true" /> 包含具有指定索引鍵的項目，則為 <see cref="T:System.Collections.Hashtable" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsValue(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.Hashtable" /> 是否包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Collections.Hashtable" /> 中尋找的值。 這個值可以是 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 包含具有指定 <see cref="T:System.Collections.Hashtable" /> 的項目，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)">
      <summary>將 <see cref="T:System.Collections.Hashtable" /> 元素複製到指定索引的一維 <see cref="T:System.Array" /> 執行個體。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.DictionaryEntry" /> 複製過來的 <see cref="T:System.Collections.Hashtable" /> 物件之目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多維的。
-或-
來源 <see cref="T:System.Collections.Hashtable" /> 中的項目數大於 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
      <exception cref="T:System.InvalidCastException">來源 <see cref="T:System.Collections.Hashtable" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</exception>
    </member>
    <member name="P:System.Collections.Hashtable.Count">
      <summary>取得 <see cref="T:System.Collections.Hashtable" /> 中所包含的索引鍵/值組數目。</summary>
      <returns>
        <see cref="T:System.Collections.Hashtable" /> 中所包含的索引鍵/值組數目。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.EqualityComparer">
      <summary>取得 <see cref="T:System.Collections.IEqualityComparer" /> 所使用的 <see cref="T:System.Collections.Hashtable" />。</summary>
      <returns>
        <see cref="T:System.Collections.IEqualityComparer" /> 所使用的 <see cref="T:System.Collections.Hashtable" />。</returns>
      <exception cref="T:System.ArgumentException">屬性設為值，但使用 <see cref="T:System.Collections.IHashCodeProvider" /> 和 <see cref="T:System.Collections.IComparer" /> 建立雜湊資料表。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.GetEnumerator">
      <summary>傳回透過 <see cref="T:System.Collections.IDictionaryEnumerator" /> 重複的 <see cref="T:System.Collections.Hashtable" />。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.Hashtable" />。</returns>
    </member>
    <member name="M:System.Collections.Hashtable.GetHash(System.Object)">
      <summary>傳回指定索引鍵的雜湊程式碼。</summary>
      <param name="key">要傳回雜湊碼的 <see cref="T:System.Object" />。</param>
      <returns>
        <paramref name="key" /> 的雜湊程式碼。</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>實作 <see cref="T:System.Runtime.Serialization.ISerializable" /> 介面，並傳回序列化 <see cref="T:System.Collections.Hashtable" /> 所需的資料。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，包含序列化 <see cref="T:System.Collections.Hashtable" /> 所需的資訊。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件，包含 <see cref="T:System.Collections.Hashtable" /> 所關聯之序列化資料流的來源及目的地。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">已修改集合。</exception>
    </member>
    <member name="P:System.Collections.Hashtable.hcp">
      <summary>取得或設定可以分配雜湊程式碼的物件。</summary>
      <returns>物件，其可以分配雜湊程式碼。</returns>
      <exception cref="T:System.ArgumentException">屬性設為值，但使用 <see cref="T:System.Collections.IEqualityComparer" /> 建立雜湊資料表。</exception>
    </member>
    <member name="P:System.Collections.Hashtable.IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.Hashtable" /> 是否有固定的大小。</summary>
      <returns>如果<see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.Hashtable" /> ，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Hashtable" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Hashtable" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsSynchronized">
      <summary>取得值，這個值表示對 <see cref="T:System.Collections.Hashtable" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>如果<see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.Hashtable" /> ，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.Item(System.Object)">
      <summary>取得或設定與指定之索引鍵相關聯的值。</summary>
      <param name="key">索引鍵，要讀取或設定其值。</param>
      <returns>與指定之索引鍵關聯的值。 如果找不到指定的索引鍵，嘗試取得將傳回 <see langword="null" />，並且嘗試設定會使用指定的索引鍵建立新的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">屬性已設定，而且 <see cref="T:System.Collections.Hashtable" /> 是唯讀的。
-或-
屬性已設定、<paramref name="key" /> 不在於集合中，而且 <see cref="T:System.Collections.Hashtable" /> 的大小固定。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.KeyEquals(System.Object,System.Object)">
      <summary>比較特定的 <see cref="T:System.Object" /> 和 <see cref="T:System.Collections.Hashtable" /> 中的特定索引鍵。</summary>
      <param name="item">要和 <paramref name="key" /> 比較的 <see cref="T:System.Object" />。</param>
      <param name="key">要和 <paramref name="item" /> 比較的 <see cref="T:System.Collections.Hashtable" /> 索引鍵。</param>
      <returns>如果 <paramref name="item" /> 和 <paramref name="key" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 為 <see langword="null" />。
-或-
<paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Collections.Hashtable.Keys">
      <summary>取得含有 <see cref="T:System.Collections.ICollection" /> 中的索引鍵的 <see cref="T:System.Collections.Hashtable" />。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />，含有 <see cref="T:System.Collections.Hashtable" /> 中的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Hashtable.OnDeserialization(System.Object)">
      <summary>實作 <see cref="T:System.Runtime.Serialization.ISerializable" /> 介面，並於還原序列化完成時引發還原序列化事件。</summary>
      <param name="sender">還原序列化之事件的來源。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">與目前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 關聯的 <see cref="T:System.Collections.Hashtable" /> 物件是無效的。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.Hashtable" /> 中移除具有指定之索引鍵的項目。</summary>
      <param name="key">要移除的項目索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> 是唯讀的。
-或-
<see cref="T:System.Collections.Hashtable" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)">
      <summary>傳回 <see cref="T:System.Collections.Hashtable" /> 同步處理的 (安全執行緒) 包裝函式。</summary>
      <param name="table">要同步處理的 <see cref="T:System.Collections.Hashtable" />。</param>
      <returns>
        <see cref="T:System.Collections.Hashtable" /> 的同步處理之 (安全執行緒) 包裝函式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Collections.Hashtable.SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Collections.Hashtable" /> 的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Collections.Hashtable" /> 的物件。</returns>
    </member>
    <member name="M:System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="P:System.Collections.Hashtable.Values">
      <summary>取得 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.Hashtable" /> 中的值。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.Hashtable" /> 中的值。</returns>
    </member>
    <member name="T:System.Collections.IHashCodeProvider">
      <summary>使用自訂雜湊函式，提供物件的雜湊程式碼。</summary>
    </member>
    <member name="M:System.Collections.IHashCodeProvider.GetHashCode(System.Object)">
      <summary>傳回指定物件的雜湊碼。</summary>
      <param name="obj">要傳回雜湊碼的 <see cref="T:System.Object" />。</param>
      <returns>指定物件的雜湊碼。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的型別是參考型別，而 <paramref name="obj" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ContextBoundObject">
      <summary>定義所有內容繫結類別的基底類別。</summary>
    </member>
    <member name="M:System.ContextBoundObject.#ctor">
      <summary>具現化 <see cref="T:System.ContextBoundObject" /> 類別的執行個體。</summary>
    </member>
    <member name="T:System.ContextMarshalException">
      <summary>嘗試跨內容界限封送處理物件失敗時，擲回的例外狀況。</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor">
      <summary>使用預設屬性，初始化 <see cref="T:System.ContextMarshalException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.ContextMarshalException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.ContextMarshalException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.ContextMarshalException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.ContextStaticAttribute">
      <summary>指示特定內容的靜態欄位值是唯一的。</summary>
    </member>
    <member name="M:System.ContextStaticAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ContextStaticAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Convert">
      <summary>將基底資料類型轉換為其他基底資料類型。</summary>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type)">
      <summary>傳回指定之類型的物件，此物件的值與指定的物件相等。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="conversionType">要傳回的物件類型。</param>
      <returns>類型為 <paramref name="conversionType" /> 且值與 <paramref name="value" /> 相等的物件。
-或-
如果 <see langword="Nothing" /> 是 <paramref name="value" /> 且 <see langword="null" /> 不是實值類型，則為 null 參考 (在 Visual Basic 中為 <paramref name="conversionType" />)。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。
-或-
<paramref name="value" /> 為 <see langword="null" />，且 <paramref name="conversionType" /> 是實值類型。
-或-
<paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是 <paramref name="conversionType" /> 可辨識的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表超出 <paramref name="conversionType" /> 範圍的數字。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
      <summary>傳回物件，該物件屬於指定的類型，且其值等於指定的物件。 參數提供特定文化特性格式資訊。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="conversionType">要傳回的物件類型。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>類型為 <paramref name="conversionType" /> 且值與 <paramref name="value" /> 相等的物件。
-或-
如果 <paramref name="value" /> 的 <see cref="T:System.Type" /> 和 <paramref name="value" /> 相等，則為 <paramref name="conversionType" />。
-或-
如果 <see langword="Nothing" /> 是 <paramref name="value" /> 且 <see langword="null" /> 不是實值類型，則為 null 參考 (在 Visual Basic 中為 <paramref name="conversionType" />)。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。
-或-
<paramref name="value" /> 為 <see langword="null" />，且 <paramref name="conversionType" /> 是實值類型。
-或-
<paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 格式不是 <paramref name="provider" /> 所辨識的 <paramref name="conversionType" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表超出 <paramref name="conversionType" />範圍的數字。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
      <summary>傳回物件，該物件屬於指定的類型，且其值等於指定的物件。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="typeCode">要傳回的物件類型。</param>
      <returns>基礎類型為 <paramref name="typeCode" /> 且值與 <paramref name="value" /> 相等的物件。
-或-
如果 <see langword="Nothing" /> 是 <paramref name="value" />，而且 <see langword="null" /> 是 <paramref name="typeCode" />、<see cref="F:System.TypeCode.Empty" /> 或 <see cref="F:System.TypeCode.String" />，則為 null 參考 (在 Visual Basic 中為 <see cref="F:System.TypeCode.Object" />)。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。
-或-
<paramref name="value" /> 為 <see langword="null" />，而且 <paramref name="typeCode" /> 會指定實值型別。
-或-
<paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是 <paramref name="typeCode" /> 類型可辨識的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表超出 <paramref name="typeCode" /> 類型範圍的數字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" /> 無效。</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
      <summary>傳回物件，該物件屬於指定的類型，且其值等於指定的物件。 參數提供特定文化特性格式資訊。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="typeCode">要傳回的物件類型。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>基礎類型為 <paramref name="typeCode" /> 且值與 <paramref name="value" /> 相等的物件。
-或-
如果 <see langword="Nothing" /> 是 <paramref name="value" />，而且 <see langword="null" /> 是 <paramref name="typeCode" />、<see cref="F:System.TypeCode.Empty" /> 或 <see cref="F:System.TypeCode.String" />，則為 null 參考 (在 Visual Basic 中為 <see cref="F:System.TypeCode.Object" />)。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。
-或-
<paramref name="value" /> 為 <see langword="null" />，而且 <paramref name="typeCode" /> 會指定實值型別。
-或-
<paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 格式不是 <paramref name="provider" /> 所辨識的 <paramref name="typeCode" /> 類型。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表超出 <paramref name="typeCode" /> 類型範圍的數字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" /> 無效。</exception>
    </member>
    <member name="F:System.Convert.DBNull">
      <summary>常數，表示缺少資料的資料庫資料行，也就是資料庫為 null。</summary>
    </member>
    <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
      <summary>將 Unicode 字元陣列 (將二進位資料編碼為 Base-64 位數) 的子集轉換為相等的 8 位元不帶正負號的整數陣列。 參數會指定輸入陣列中的子集，以及要轉換的項目個數。</summary>
      <param name="inArray">Unicode 字元陣列。</param>
      <param name="offset">
        <paramref name="inArray" /> 中的位置。</param>
      <param name="length">
        <paramref name="inArray" /> 中要轉換的項目數目。</param>
      <returns>8 位元不帶正負號的整數陣列，與 <paramref name="length" /> 中 <paramref name="offset" /> 位置的 <paramref name="inArray" /> 項目相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="length" /> 小於 0。
-或-
<paramref name="offset" /> 加上 <paramref name="length" /> 表示的位置不在 <paramref name="inArray" /> 內部。</exception>
      <exception cref="T:System.FormatException">忽略空白字元的 <paramref name="inArray" /> 長度，不是零或 4 的倍數。
-或-
<paramref name="inArray" /> 的格式無效。 <paramref name="inArray" /> 包含非 Base-64 字元、兩個以上填補字元，或在填補字元中有非空白字元。</exception>
    </member>
    <member name="M:System.Convert.FromBase64String(System.String)">
      <summary>將指定的字串 (將二進位資料編碼為 Base-64 位數) 轉換為相等的 8 位元不帶正負號的整數陣列。</summary>
      <param name="s">要轉換的字串。</param>
      <returns>8 位元不帶正負號的整數且與 <paramref name="s" /> 相等的陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">忽略空白字元的 <paramref name="s" /> 長度，不是零或 4 的倍數。
-或-
<paramref name="s" /> 的格式無效。 <paramref name="s" /> 包含非 Base-64 字元、超過兩個填補字元，或在填補字元中有非空白字元。</exception>
    </member>
    <member name="M:System.Convert.GetTypeCode(System.Object)">
      <summary>傳回指定物件的 <see cref="T:System.TypeCode" />。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <returns>
        <see cref="T:System.TypeCode" /> 的 <paramref name="value" />；如果 <see cref="F:System.TypeCode.Empty" /> 為 <paramref name="value" />，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Convert.IsDBNull(System.Object)">
      <summary>傳回指定物件是否屬於類型 <see cref="T:System.DBNull" /> 的指示。</summary>
      <param name="value">物件。</param>
      <returns>如果 <see langword="true" /> 屬於類型 <paramref name="value" />，則為 <see cref="T:System.DBNull" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>將 8 位元不帶正負號的整數陣列的子集，轉換為相等的 Base-64 位數編碼的 Unicode 字元陣列子集。 參數會將子集指定為輸入和輸出陣列中的位移，以及轉換輸入陣列中的項目數目。</summary>
      <param name="inArray">8 位元不帶正負號的整數的輸入陣列。</param>
      <param name="offsetIn">
        <paramref name="inArray" /> 中的位置。</param>
      <param name="length">要轉換的 <paramref name="inArray" /> 項目數目。</param>
      <param name="outArray">Unicode 字元的輸出陣列。</param>
      <param name="offsetOut">
        <paramref name="outArray" /> 中的位置。</param>
      <returns>32 位元帶正負號的整數，包含 <paramref name="outArray" /> 中的位元數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 或 <paramref name="outArray" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />、 <paramref name="offsetOut" />或 <paramref name="length" /> 為負。
-或-
<paramref name="offsetIn" /> 加上 <paramref name="length" /> 大於 <paramref name="inArray" /> 的長度。
-或-
<paramref name="offsetOut" /> 加上要傳回的項目數目大於 <paramref name="outArray" /> 的長度。</exception>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
      <summary>將 8 位元不帶正負號的整數陣列的子集，轉換為相等的 Base-64 位數編碼的 Unicode 字元陣列子集。 參數會指定可在輸入和輸出陣列中當成位移 (Offset) 的子集、輸入陣列中要轉換的項目個數，以及是否要在輸出陣列中插入分行符號。</summary>
      <param name="inArray">8 位元不帶正負號的整數的輸入陣列。</param>
      <param name="offsetIn">
        <paramref name="inArray" /> 中的位置。</param>
      <param name="length">要轉換的 <paramref name="inArray" /> 項目數目。</param>
      <param name="outArray">Unicode 字元的輸出陣列。</param>
      <param name="offsetOut">
        <paramref name="outArray" /> 中的位置。</param>
      <param name="options">
        <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> 會在每 76 個字元之後插入分行符號；<see cref="F:System.Base64FormattingOptions.None" /> 則不會插入分行符號。</param>
      <returns>32 位元帶正負號的整數，包含 <paramref name="outArray" /> 中的位元數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 或 <paramref name="outArray" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />、 <paramref name="offsetOut" />或 <paramref name="length" /> 為負。
-或-
<paramref name="offsetIn" /> 加上 <paramref name="length" /> 大於 <paramref name="inArray" /> 的長度。
-或-
<paramref name="offsetOut" /> 加上要傳回的項目數目大於 <paramref name="outArray" />的長度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Base64FormattingOptions" /> 值。</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[])">
      <summary>將 8 位元不帶正負號的整數陣列，轉換為使用 Base-64 位數編碼的相等字串表示。</summary>
      <param name="inArray">8 位元不帶正負號的整數的陣列。</param>
      <returns>
        <paramref name="inArray" /> 之內容的字串表示 (格式為 Base 64)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
      <summary>將 8 位元不帶正負號的整數陣列，轉換為使用 Base-64 位數編碼的相等字串表示。 您可以指定是否要在傳回值中插入分行符號。</summary>
      <param name="inArray">8 位元不帶正負號的整數的陣列。</param>
      <param name="options">
        <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> 會在每 76 個字元之後插入分行符號；<see cref="F:System.Base64FormattingOptions.None" /> 則不會插入分行符號。</param>
      <returns>
        <paramref name="inArray" /> 中項目的字串表示 (格式為 Base 64)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Base64FormattingOptions" /> 值。</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
      <summary>將 8 位元不帶正負號的整數陣列子集，轉換為使用 Base-64 位數編碼的相等字串表示。 參數會將子集指定為輸入陣列中的位移 (Offset)，以及所要轉換陣列中項目的個數。</summary>
      <param name="inArray">8 位元不帶正負號的整數的陣列。</param>
      <param name="offset">
        <paramref name="inArray" /> 中的位移。</param>
      <param name="length">要轉換的 <paramref name="inArray" /> 項目數目。</param>
      <returns>
        <paramref name="length" /> 中開始於位置 <paramref name="inArray" /> 之 <paramref name="offset" /> 項目的字串表示 (格式為 Base 64)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="length" /> 為負。
-或-
<paramref name="offset" /> 加上 <paramref name="length" /> 大於 <paramref name="inArray" /> 的長度。</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
      <summary>將 8 位元不帶正負號的整數陣列子集，轉換為使用 Base-64 位數編碼的相等字串表示。 參數會指定可在輸入陣列中當成位移 (Offset) 的子集、輸入陣列中要轉換的項目個數，以及是否要在傳回值中插入分行符號。</summary>
      <param name="inArray">8 位元不帶正負號的整數的陣列。</param>
      <param name="offset">
        <paramref name="inArray" /> 中的位移。</param>
      <param name="length">要轉換的 <paramref name="inArray" /> 項目數目。</param>
      <param name="options">
        <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> 會在每 76 個字元之後插入分行符號；<see cref="F:System.Base64FormattingOptions.None" /> 則不會插入分行符號。</param>
      <returns>
        <paramref name="length" /> 中開始於位置 <paramref name="inArray" /> 之 <paramref name="offset" /> 項目的字串表示 (格式為 Base 64)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="length" /> 為負。
-或-
<paramref name="offset" /> 加上 <paramref name="length" /> 大於 <paramref name="inArray" /> 的長度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Base64FormattingOptions" /> 值。</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.ReadOnlySpan{System.Byte},System.Base64FormattingOptions)">
      <summary>將指定唯讀範圍內 8 位元不帶正負號的整數轉換為使用 Base-64 位數編碼的對等字串表示。 您可以選擇性地指定是否要在傳回值中插入分行符號。</summary>
      <param name="bytes">8 位元不帶正負號整數的唯讀範圍。</param>
      <param name="options">其中一個列舉值，其指定是否要在傳回值中插入分行符號。 預設值為 <see cref="F:System.Base64FormattingOptions.None" />。</param>
      <returns>
        <paramref name="inArray" /> 中項目的字串表示 (格式為 Base 64)。 如果 <paramref name="bytes" /> 的長度為 0，則會傳回空字串。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Base64FormattingOptions" /> 值。</exception>
      <exception cref="T:System.OutOfMemoryException">輸出長度大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Boolean)">
      <summary>傳回指定的布林值 (Boolean)；不會執行實際的轉換。</summary>
      <param name="value">要傳回的布林值。</param>
      <returns>
        <paramref name="value" /> 會原封不動地傳回。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Byte)">
      <summary>將指定的 8 位元不帶正負號整數的值，轉換為相等的布林值。</summary>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <returns>如果 <see langword="true" /> 不是零，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Char)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的 Unicode 字元。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.DateTime)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的日期和時間值。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Decimal)">
      <summary>將指定之十進位數字的值，轉換為相等的布林值。</summary>
      <param name="value">要轉換的數字。</param>
      <returns>如果 <see langword="true" /> 不是零，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Double)">
      <summary>將指定之雙精確度浮點數的值，轉換為相等的布林值。</summary>
      <param name="value">要轉換的雙精確度浮點數。</param>
      <returns>如果 <see langword="true" /> 不是零，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int16)">
      <summary>將指定的 16 位元帶正負號整數的值，轉換為相等的布林值。</summary>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <returns>如果 <see langword="true" /> 不是零，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int32)">
      <summary>將指定的 32 位元帶正負號整數的值，轉換為相等的布林值。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>如果 <see langword="true" /> 不是零，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int64)">
      <summary>將指定的 64 位元帶正負號整數的值，轉換為相等的布林值。</summary>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <returns>如果 <see langword="true" /> 不是零，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object)">
      <summary>將指定之物件的值轉換為相等的布林值。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件，或是 <see langword="null" />。</param>
      <returns>
        <see langword="true" /> 或 <see langword="false" />，其會反映為 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> 的基礎類型所叫用之 <paramref name="value" /> 方法所傳回的值。 如果 <paramref name="value" /> 是 <see langword="null" />，則方法會傳回 <see langword="false" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 是字串，不等於 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援將 <paramref name="value" /> 轉換成 <see cref="T:System.Boolean" />。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之物件的值轉換為相等的布林值。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件，或是 <see langword="null" />。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>
        <see langword="true" /> 或 <see langword="false" />，其會反映為 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> 的基礎類型所叫用之 <paramref name="value" /> 方法所傳回的值。 如果 <paramref name="value" /> 是 <see langword="null" />，則方法會傳回 <see langword="false" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 是字串，不等於 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援將 <paramref name="value" /> 轉換成 <see cref="T:System.Boolean" />。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.SByte)">
      <summary>將指定的 8 位元帶正負號整數的值，轉換為相等的布林值。</summary>
      <param name="value">要轉換的 8 位元帶正負號的整數。</param>
      <returns>如果 <see langword="true" /> 不是零，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Single)">
      <summary>將指定之單精確度浮點數的值，轉換為相等的布林值。</summary>
      <param name="value">要轉換的單精確度浮點數。</param>
      <returns>如果 <see langword="true" /> 不是零，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String)">
      <summary>將指定之邏輯值的字串表示，轉換為相等的布林值。</summary>
      <param name="value">字串，包含 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 的值。</param>
      <returns>當 <see langword="true" /> 等於 <paramref name="value" /> 時為 <see cref="F:System.Boolean.TrueString" />，否則，當 <see langword="false" /> 等於 <paramref name="value" /> 或 <see cref="F:System.Boolean.FalseString" /> 時，則為 <see langword="null" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不等於 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之邏輯值的字串表示轉換為相等的布林值。</summary>
      <param name="value">字串，包含 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 的值。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。 這個參數已忽略。</param>
      <returns>當 <see langword="true" /> 等於 <paramref name="value" /> 時為 <see cref="F:System.Boolean.TrueString" />，否則，當 <see langword="false" /> 等於 <paramref name="value" /> 或 <see cref="F:System.Boolean.FalseString" /> 時，則為 <see langword="null" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不等於 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號整數的值，轉換為相等的布林值。</summary>
      <param name="value">要轉換之 16 位元不帶正負號的整數。</param>
      <returns>如果 <see langword="true" /> 不是零，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為相等的布林值。</summary>
      <param name="value">要轉換之 32 位元不帶正負號的整數。</param>
      <returns>如果 <see langword="true" /> 不是零，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的布林值。</summary>
      <param name="value">要轉換之 64 位元不帶正負號的整數。</param>
      <returns>如果 <see langword="true" /> 不是零，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Boolean)">
      <summary>將指定的布林值轉換為相等的 8 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的布林值。</param>
      <returns>如果 <paramref name="value" /> 為 <see langword="true" />，則為數字 1，否則為 0。</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Byte)">
      <summary>傳回指定的 8 位元不帶正負號整數；不會執行實際的轉換。</summary>
      <param name="value">要傳回之 8 位元不帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 會原封不動地傳回。</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Char)">
      <summary>將指定的 Unicode 字元值轉換為相等的 8 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的 Unicode 字元。</param>
      <returns>等於 <paramref name="value" /> 的 8 位元不帶正負號整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表大於 <see cref="F:System.Byte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.DateTime)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的日期和時間值。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Decimal)">
      <summary>將指定之十進位數字的值，轉換為相等的 8 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的數字。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 8 位元不帶正負號整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Byte.MaxValue" /> 或小於 <see cref="F:System.Byte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Double)">
      <summary>將指定之雙精確度浮點數的值，轉換為相等的 8 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的雙精確度浮點數。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 8 位元不帶正負號整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Byte.MaxValue" /> 或小於 <see cref="F:System.Byte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int16)">
      <summary>將指定的 16 位元帶正負號的整數值轉換為相等的 8 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <returns>等於 <paramref name="value" /> 的 8 位元不帶正負號整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數值轉換為相等的 8 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>等於 <paramref name="value" /> 的 8 位元不帶正負號整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數值轉換為相等的 8 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <returns>等於 <paramref name="value" /> 的 8 位元不帶正負號整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object)">
      <summary>將指定之物件的值轉換為 8 位元不帶正負號的整數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件，或是 <see langword="null" />。</param>
      <returns>8 位元不帶正負號的整數，等於 <paramref name="value" />；而若 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的屬性格式不適用於 <see cref="T:System.Byte" /> 值。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" />。
-或-
不支援從 <paramref name="value" /> 轉換至 <see cref="T:System.Byte" /> 類型。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之物件的值轉換為 8 位元不帶正負號的整數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>8 位元不帶正負號的整數，等於 <paramref name="value" />；而若 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的屬性格式不適用於 <see cref="T:System.Byte" /> 值。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" />。
-或-
不支援從 <paramref name="value" /> 轉換至 <see cref="T:System.Byte" /> 類型。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.SByte)">
      <summary>將指定的 8 位元帶正負號的整數值轉換為相等的 8 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的 8 位元帶正負號的整數。</param>
      <returns>等於 <paramref name="value" /> 的 8 位元不帶正負號整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Byte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Single)">
      <summary>將指定之單精確度浮點數的值，轉換為相等的 8 位元不帶正負號的整數。</summary>
      <param name="value">單精確度浮點數。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 8 位元不帶正負號整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Byte.MaxValue" /> 或小於 <see cref="F:System.Byte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String)">
      <summary>將指定之數字的字串表示，轉換為相等的 8 位元不帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <returns>8 位元不帶正負號的整數，等於 <paramref name="value" />；而若 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由後面接著一連串數字 (0 到 9) 的任意符號所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之數字的字串表示轉換為相等的 8 位元不帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>8 位元不帶正負號的整數，等於 <paramref name="value" />；而若 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由後面接著一連串數字 (0 到 9) 的任意符號所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.Int32)">
      <summary>將指定基底中數字的字串表示，轉換為相等的 8 位元不帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="fromBase">
        <paramref name="value" /> 中數字的基底，必須是 2、8、10 或 16。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 8 位元不帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
-或-
代表非 10 進位不帶正負號數字的 <paramref name="value" />，有前置負號。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 為 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 所包含的字元在 <paramref name="fromBase" /> 指定的基底中不是有效數字。 如果 <paramref name="value" /> 中的第一個字元無效，例外狀況訊息會指出沒有數字可進行轉換；否則訊息會指出 <paramref name="value" /> 包含無效的尾端字元。</exception>
      <exception cref="T:System.OverflowException">代表 10 進位不帶正負號數字的 <paramref name="value" />，有前置負號。
-或-
<paramref name="value" /> 代表小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號整數的值，轉換為相等的 8 位元不帶正負號整數。</summary>
      <param name="value">要轉換之 16 位元不帶正負號的整數。</param>
      <returns>等於 <paramref name="value" /> 的 8 位元不帶正負號整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為相等的 8 位元不帶正負號整數。</summary>
      <param name="value">要轉換之 32 位元不帶正負號的整數。</param>
      <returns>等於 <paramref name="value" /> 的 8 位元不帶正負號整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的 8 位元不帶正負號整數。</summary>
      <param name="value">要轉換之 64 位元不帶正負號的整數。</param>
      <returns>等於 <paramref name="value" /> 的 8 位元不帶正負號整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Boolean)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的布林值。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Byte)">
      <summary>將指定的 8 位元不帶正負號整數的值，轉換為它的相等 Unicode 字元。</summary>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <returns>Unicode 字元，其與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Char)">
      <summary>傳回指定的 Unicode 字元值；不會執行實際的轉換。</summary>
      <param name="value">要傳回的 Unicode 字元。</param>
      <returns>
        <paramref name="value" /> 會原封不動地傳回。</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.DateTime)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的日期和時間值。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Decimal)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的十進位數字。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Double)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的雙精確度浮點數。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int16)">
      <summary>將指定的 16 位元帶正負號整數的值，轉換為它的相等 Unicode 字元。</summary>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <returns>Unicode 字元，其與 <paramref name="value" /> 相等。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Char.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int32)">
      <summary>將指定的 32 位元帶正負號整數的值，轉換為它的相等 Unicode 字元。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>Unicode 字元，其與 <paramref name="value" /> 相等。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Char.MinValue" /> 或大於 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int64)">
      <summary>將指定的 64 位元帶正負號整數的值，轉換為它的相等 Unicode 字元。</summary>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <returns>Unicode 字元，其與 <paramref name="value" /> 相等。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Char.MinValue" /> 或大於 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object)">
      <summary>將指定之物件的值轉換為 Unicode 字元。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <returns>與 value 相等的 Unicode 字元；如果 <see cref="F:System.Char.MinValue" /> 為 <paramref name="value" />，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 是 null 字串。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援將 <paramref name="value" /> 轉換成 <see cref="T:System.Char" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Char.MinValue" /> 或大於 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之物件的值轉換為它的相等 Unicode 字元。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 相等的 Unicode 字元；如果 <see cref="F:System.Char.MinValue" /> 為 <paramref name="value" />，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 是 null 字串。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援將 <paramref name="value" /> 轉換成 <see cref="T:System.Char" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Char.MinValue" /> 或大於 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.SByte)">
      <summary>將指定的 8 位元帶正負號整數的值，轉換為它的相等 Unicode 字元。</summary>
      <param name="value">要轉換的 8 位元帶正負號的整數。</param>
      <returns>Unicode 字元，其與 <paramref name="value" /> 相等。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Char.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Single)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的單精確度浮點數。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String)">
      <summary>將指定之字串的第一個字元轉換為 Unicode 字元。</summary>
      <param name="value">長度為 1 的字串。</param>
      <returns>與 <paramref name="value" /> 中第一且唯一的字元相等之 Unicode 字元。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的長度不是 1。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之字串的第一個字元轉換為 Unicode 字元。</summary>
      <param name="value">長度為 1 或 <see langword="null" /> 的字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。 這個參數已忽略。</param>
      <returns>與 <paramref name="value" /> 中第一且唯一的字元相等之 Unicode 字元。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的長度不是 1。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號整數的值，轉換為它的相等 Unicode 字元。</summary>
      <param name="value">要轉換之 16 位元不帶正負號的整數。</param>
      <returns>Unicode 字元，其與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為它的相等 Unicode 字元。</summary>
      <param name="value">要轉換之 32 位元不帶正負號的整數。</param>
      <returns>Unicode 字元，其與 <paramref name="value" /> 相等。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為它的相等 Unicode 字元。</summary>
      <param name="value">要轉換之 64 位元不帶正負號的整數。</param>
      <returns>Unicode 字元，其與 <paramref name="value" /> 相等。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Boolean)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的布林值。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Byte)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Char)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的 Unicode 字元。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.DateTime)">
      <summary>傳回指定的 <see cref="T:System.DateTime" /> 物件；不會執行實際的轉換。</summary>
      <param name="value">日期和時間值。</param>
      <returns>
        <paramref name="value" /> 會原封不動地傳回。</returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Decimal)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的數字。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Double)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的雙精確度浮點數值。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int16)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int32)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int64)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object)">
      <summary>將指定之物件的值轉換為 <see cref="T:System.DateTime" /> 物件。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件，或是 <see langword="null" />。</param>
      <returns>與 <paramref name="value" /> 值相等的日期和時間；如果 <see cref="F:System.DateTime.MinValue" /> 為 <paramref name="value" />，則為與 <see langword="null" /> 相等的日期和時間。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效的日期和時間值。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之物件的值轉換為 <see cref="T:System.DateTime" /> 物件。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 值相等的日期和時間；如果 <see cref="F:System.DateTime.MinValue" /> 為 <paramref name="value" />，則為與 <see langword="null" /> 相等的日期和時間。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效的日期和時間值。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.SByte)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的 8 位元帶正負號的整數。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Single)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的單精確度浮點數值。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String)">
      <summary>將指定之日期和時間的字串表示，轉換為相等的日期和時間值。</summary>
      <param name="value">日期和時間的字串表示。</param>
      <returns>與 <paramref name="value" /> 值相等的日期和時間；如果 <see cref="F:System.DateTime.MinValue" /> 為 <paramref name="value" />，則為與 <see langword="null" /> 相等的日期和時間。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是格式正確的日期和時間字串。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之數字的字串表示轉換為相等的日期和時間。</summary>
      <param name="value">字串，包含要轉換的日期和時間。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 值相等的日期和時間；如果 <see cref="F:System.DateTime.MinValue" /> 為 <paramref name="value" />，則為與 <see langword="null" /> 相等的日期和時間。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是格式正確的日期和時間字串。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt16)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換之 16 位元不帶正負號的整數。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt32)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換之 32 位元不帶正負號的整數。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt64)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換之 64 位元不帶正負號的整數。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Boolean)">
      <summary>將指定的布林值轉換為相等的十進位數字。</summary>
      <param name="value">要轉換的布林值。</param>
      <returns>如果 <paramref name="value" /> 為 <see langword="true" />，則為數字 1，否則為 0。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Byte)">
      <summary>將指定之 8 位元不帶正負號的整數值，轉換為相等的十進位數字。</summary>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的十進位數字。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Char)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的 Unicode 字元。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.DateTime)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的日期和時間值。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Decimal)">
      <summary>傳回指定的十進位數字，不執行實際的轉換。</summary>
      <param name="value">十進位數字。</param>
      <returns>
        <paramref name="value" /> 會原封不動地傳回。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Double)">
      <summary>將指定之雙精確度浮點數的值，轉換為相等的十進位數字。</summary>
      <param name="value">要轉換的雙精確度浮點數。</param>
      <returns>十進位數字，其與 <paramref name="value" /> 相等。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Decimal.MaxValue" /> 或小於 <see cref="F:System.Decimal.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int16)">
      <summary>將指定之 16 位元帶正負號的整數值，轉換為相等的十進位數字。</summary>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <returns>十進位數字，其與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int32)">
      <summary>將指定之 32 位元帶正負號的整數值，轉換為相等的十進位數字。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>十進位數字，其與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int64)">
      <summary>將指定之 64 位元帶正負號的整數值，轉換為相等的十進位數字。</summary>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <returns>十進位數字，其與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object)">
      <summary>將指定之物件的值，轉換為相等的十進位數字。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件，或是 <see langword="null" />。</param>
      <returns>與 <paramref name="value" /> 相等的十進位數字；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式對於 <see cref="T:System.Decimal" /> 類型不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之物件的值轉換為相等的十進位數字。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 相等的十進位數字；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式對於 <see cref="T:System.Decimal" /> 類型不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.SByte)">
      <summary>將指定之 8 位元帶正負號的整數值，轉換為相等的十進位數字。</summary>
      <param name="value">要轉換的 8 位元帶正負號的整數。</param>
      <returns>十進位數字，其與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Single)">
      <summary>將指定之單精確度浮點數的值，轉換為相等的十進位數字。</summary>
      <param name="value">要轉換的單精確度浮點數。</param>
      <returns>十進位數字，其與 <paramref name="value" /> 相等。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Decimal.MaxValue" /> 或小於 <see cref="F:System.Decimal.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String)">
      <summary>將指定之數字的字串表示，轉換為相等的十進位數字。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的十進位數字；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之數字的字串表示轉換為相等的十進位數字。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的十進位數字；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt16)">
      <summary>將指定之 16 位元不帶正負號的整數值，轉換為相等的十進位數字。</summary>
      <param name="value">要轉換之 16 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的十進位數字。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt32)">
      <summary>將指定之 32 位元不帶正負號的整數值，轉換為相等的十進位數字。</summary>
      <param name="value">要轉換之 32 位元不帶正負號的整數。</param>
      <returns>十進位數字，其與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt64)">
      <summary>將指定之 64 位元不帶正負號的整數值，轉換為相等的十進位數字。</summary>
      <param name="value">要轉換之 64 位元不帶正負號的整數。</param>
      <returns>十進位數字，其與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Boolean)">
      <summary>將指定的布林值轉換為相等的雙精確度浮點數。</summary>
      <param name="value">要轉換的布林值。</param>
      <returns>如果 <paramref name="value" /> 為 <see langword="true" />，則為數字 1，否則為 0。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Byte)">
      <summary>將指定之 8 位元不帶正負號的整數值，轉換為相等的雙精確度浮點數。</summary>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <returns>雙精確度浮點數，其與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Char)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的 Unicode 字元。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.DateTime)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的日期和時間值。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Decimal)">
      <summary>將指定之十進位數字的值，轉換為相等的雙精確度浮點數。</summary>
      <param name="value">要轉換的十進位數字。</param>
      <returns>雙精確度浮點數，其與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Double)">
      <summary>傳回指定的雙精確度浮點數，不執行實際的轉換。</summary>
      <param name="value">要傳回的雙精確度浮點數。</param>
      <returns>
        <paramref name="value" /> 會原封不動地傳回。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int16)">
      <summary>將指定之 16 位元帶正負號的整數值，轉換為相等的雙精確度浮點數。</summary>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <returns>雙精確度浮點數，等於 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int32)">
      <summary>將指定之 32 位元帶正負號的整數值，轉換為相等的雙精確度浮點數。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>雙精確度浮點數，其與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int64)">
      <summary>將指定之 64 位元帶正負號的整數值，轉換為相等的雙精確度浮點數。</summary>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <returns>雙精確度浮點數，其與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object)">
      <summary>將指定之物件的值，轉換為雙精確度浮點數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件，或是 <see langword="null" />。</param>
      <returns>與 <paramref name="value" /> 相等的雙精確度浮點數；如果 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式對於 <see cref="T:System.Double" /> 類型不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之物件的值轉換為雙精確度浮點數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 相等的雙精確度浮點數；如果 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式對於 <see cref="T:System.Double" /> 類型不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.SByte)">
      <summary>將指定之 8 位元帶正負號的整數值，轉換為相等的雙精確度浮點數。</summary>
      <param name="value">要轉換的 8 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 8 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Single)">
      <summary>將指定之單精確度浮點數的值，轉換為相等的雙精確度浮點數。</summary>
      <param name="value">單精確度浮點數。</param>
      <returns>雙精確度浮點數，其與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.String)">
      <summary>將指定之數字的字串表示，轉換為相等的雙精確度浮點數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的雙精確度浮點數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之數字的字串表示轉換為相等的雙精確度浮點數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的雙精確度浮點數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt16)">
      <summary>將指定之 16 位元不帶正負號的整數值，轉換為相等的雙精確度浮點數。</summary>
      <param name="value">要轉換之 16 位元不帶正負號的整數。</param>
      <returns>雙精確度浮點數，其與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt32)">
      <summary>將指定之 32 位元不帶正負號的整數值，轉換為相等的雙精確度浮點數。</summary>
      <param name="value">要轉換之 32 位元不帶正負號的整數。</param>
      <returns>雙精確度浮點數，其與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt64)">
      <summary>將指定之 64 位元不帶正負號的整數值，轉換為相等的雙精確度浮點數。</summary>
      <param name="value">要轉換之 64 位元不帶正負號的整數。</param>
      <returns>雙精確度浮點數，其與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Boolean)">
      <summary>將指定的布林值轉換為相等的 16 位元帶正負號的整數。</summary>
      <param name="value">要轉換的布林值。</param>
      <returns>如果 <paramref name="value" /> 為 <see langword="true" />，則為數字 1，否則為 0。</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Byte)">
      <summary>將指定的 8 位元不帶正負號的整數值，轉換為相等的 16 位元帶正負號的整數。</summary>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 16 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Char)">
      <summary>將指定的 Unicode 字元值轉換為相等的 16 位元帶正負號的整數。</summary>
      <param name="value">要轉換的 Unicode 字元。</param>
      <returns>與 <paramref name="value" /> 相等的 16 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.DateTime)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的日期和時間值。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Decimal)">
      <summary>將指定之十進位數字的值，轉換為相等的 16 位元帶正負號的整數。</summary>
      <param name="value">要轉換的十進位數字。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 16 位元帶正負號的整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" /> 或小於 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Double)">
      <summary>將指定之雙精確度浮點數的值，轉換為相等的 16 位元帶正負號的整數。</summary>
      <param name="value">要轉換的雙精確度浮點數。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 16 位元帶正負號的整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" /> 或小於 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int16)">
      <summary>傳回指定的 16 位元帶正負號的整數；不會執行實際的轉換。</summary>
      <param name="value">傳回 16 位元帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 會原封不動地傳回。</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數值轉換為相等的 16 位元帶正負號的整數。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>16 位元帶正負號的整數，與 <paramref name="value" /> 相等。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" /> 或小於 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數值轉換為相等的 16 位元帶正負號的整數。</summary>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 16 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" /> 或小於 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object)">
      <summary>將指定之物件的值，轉換為 16 位元帶正負號的整數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件，或是 <see langword="null" />。</param>
      <returns>與 <paramref name="value" /> 相等的 16 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式對於 <see cref="T:System.Int16" /> 類型不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之物件的值轉換為 16 位元帶正負號的整數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 相等的 16 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式對於 <see cref="T:System.Int16" /> 類型不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.SByte)">
      <summary>將指定的 8 位元帶正負號的整數值，轉換為相等的 16 位元帶正負號的整數。</summary>
      <param name="value">要轉換的 8 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 8 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Single)">
      <summary>將指定之單精確度浮點數的值，轉換為相等的 16 位元帶正負號的整數。</summary>
      <param name="value">要轉換的單精確度浮點數。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 16 位元帶正負號的整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" /> 或小於 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String)">
      <summary>將指定之數字的字串表示，轉換為相等的 16 位元帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 16 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由後面接著一連串數字 (0 到 9) 的任意符號所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之數字的字串表示轉換為相等的 16 位元帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 16 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由後面接著一連串數字 (0 到 9) 的任意符號所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
      <summary>將指定基底中數字的字串表示，轉換為相等的 16 位元帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="fromBase">
        <paramref name="value" /> 中數字的基底，必須是 2、8、10 或 16。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 16 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
-或-
代表非基底 10 正負號數字的 <paramref name="value" /> 有前置負號。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 為 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 所包含的字元在 <paramref name="fromBase" /> 指定的基底中不是有效數字。 如果 <paramref name="value" /> 中的第一個字元無效，例外狀況訊息會指出沒有數字可進行轉換；否則訊息會指出 <paramref name="value" /> 包含無效的尾端字元。</exception>
      <exception cref="T:System.OverflowException">代表非 10 進位帶正負號數字的<paramref name="value" />，有前置負號。
-或-
<paramref name="value" /> 代表小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號的整數值轉換為相等的 16 位元帶正負號的整數。</summary>
      <param name="value">要轉換之 16 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 16 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為相等的 16 位元帶正負號整數。</summary>
      <param name="value">要轉換之 32 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 16 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的 16 位元帶正負號整數。</summary>
      <param name="value">要轉換之 64 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 16 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Boolean)">
      <summary>將指定的布林值轉換為相等的 32 位元帶正負號的整數。</summary>
      <param name="value">要轉換的布林值。</param>
      <returns>如果 <paramref name="value" /> 為 <see langword="true" />，則為數字 1，否則為 0。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Byte)">
      <summary>將指定的 8 位元不帶正負號的整數值轉換為相等的 32 位元帶正負號的整數。</summary>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Char)">
      <summary>將指定的 Unicode 字元值轉換為相等的 32 位元帶正負號的整數。</summary>
      <param name="value">要轉換的 Unicode 字元。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.DateTime)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的日期和時間值。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Decimal)">
      <summary>將指定之十進位數字的值，轉換為相等的 32 位元帶正負號的整數。</summary>
      <param name="value">要轉換的十進位數字。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 32 位元帶正負號的整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int32.MaxValue" /> 或小於 <see cref="F:System.Int32.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Double)">
      <summary>將指定之雙精確度浮點數的值，轉換為相等的 32 位元帶正負號的整數。</summary>
      <param name="value">要轉換的雙精確度浮點數。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 32 位元帶正負號的整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int32.MaxValue" /> 或小於 <see cref="F:System.Int32.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int16)">
      <summary>將指定的 16 位元帶正負號的整數值轉換為相等的 32 位元帶正負號的整數。</summary>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int32)">
      <summary>傳回指定的 32 位元帶正負號的整數；不會執行實際的轉換。</summary>
      <param name="value">傳回 32 位元帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 會原封不動地傳回。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數值轉換成對等的 32 位元帶正負號的整數。</summary>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int32.MaxValue" /> 或小於 <see cref="F:System.Int32.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object)">
      <summary>將指定之物件的值，轉換為 32 位元帶正負號的整數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件，或是 <see langword="null" />。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之物件的值轉換為 32 位元帶正負號的整數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.SByte)">
      <summary>將指定的 8 位元帶正負號的整數值，轉換為相等的 32 位元帶正負號的整數。</summary>
      <param name="value">要轉換的 8 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 8 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Single)">
      <summary>將指定之單精確度浮點數的值，轉換為相等的 32 位元帶正負號的整數。</summary>
      <param name="value">要轉換的單精確度浮點數。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 32 位元帶正負號的整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int32.MaxValue" /> 或小於 <see cref="F:System.Int32.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String)">
      <summary>將指定之數字的字串表示，轉換為相等的 32 位元帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 32 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由後面接著一連串數字 (0 到 9) 的任意符號所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之數字的字串表示轉換為相等的 32 位元帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 32 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由後面接著一連串數字 (0 到 9) 的任意符號所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
      <summary>將指定基底中數字的字串表示，轉換為相等的 32 位元帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="fromBase">
        <paramref name="value" /> 中數字的基底，必須是 2、8、10 或 16。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 32 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
-或-
代表非基底 10 正負號數字的 <paramref name="value" /> 有前置負號。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 為 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 所包含的字元在 <paramref name="fromBase" /> 指定的基底中不是有效數字。 如果 <paramref name="value" /> 中的第一個字元無效，例外狀況訊息會指出沒有數字可進行轉換；否則訊息會指出 <paramref name="value" /> 包含無效的尾端字元。</exception>
      <exception cref="T:System.OverflowException">代表非 10 進位帶正負號數字的<paramref name="value" />，有前置負號。
-或-
<paramref name="value" /> 代表小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號的整數值轉換為相等的 32 位元帶正負號的整數。</summary>
      <param name="value">要轉換之 16 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為相等的 32 位元帶正負號整數。</summary>
      <param name="value">要轉換之 32 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的 32 位元帶正負號整數。</summary>
      <param name="value">要轉換之 64 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Boolean)">
      <summary>將指定的布林值轉換為相等的 64 位元帶正負號的整數。</summary>
      <param name="value">要轉換的布林值。</param>
      <returns>如果 <paramref name="value" /> 為 <see langword="true" />，則為數字 1，否則為 0。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Byte)">
      <summary>將指定的 8 位元不帶正負號的整數值，轉換為相等的 64 位元帶正負號的整數。</summary>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Char)">
      <summary>將指定的 Unicode 字元值轉換為相等的 64 位元帶正負號的整數。</summary>
      <param name="value">要轉換的 Unicode 字元。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.DateTime)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的日期和時間值。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Decimal)">
      <summary>將指定之十進位數字的值，轉換為相等的 64 位元帶正負號的整數。</summary>
      <param name="value">要轉換的十進位數字。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 64 位元帶正負號的整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int64.MaxValue" /> 或小於 <see cref="F:System.Int64.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Double)">
      <summary>將指定之雙精確度浮點數的值，轉換為相等的 64 位元帶正負號的整數。</summary>
      <param name="value">要轉換的雙精確度浮點數。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 64 位元帶正負號的整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int64.MaxValue" /> 或小於 <see cref="F:System.Int64.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int16)">
      <summary>將指定的 16 位元帶正負號的整數值轉換為相等的 64 位元帶正負號的整數。</summary>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數值轉換為相等的 64 位元帶正負號的整數。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int64)">
      <summary>傳回指定的 64 位元帶正負號的整數；不會執行實際的轉換。</summary>
      <param name="value">64 位元帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 會原封不動地傳回。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object)">
      <summary>將指定之物件的值，轉換為 64 位元帶正負號的整數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件，或是 <see langword="null" />。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之物件的值轉換為 64 位元帶正負號的整數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.SByte)">
      <summary>將指定的 8 位元帶正負號的整數值，轉換為相等的 64 位元帶正負號的整數。</summary>
      <param name="value">要轉換的 8 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Single)">
      <summary>將指定之單精確度浮點數的值，轉換為相等的 64 位元帶正負號的整數。</summary>
      <param name="value">要轉換的單精確度浮點數。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 64 位元帶正負號的整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int64.MaxValue" /> 或小於 <see cref="F:System.Int64.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String)">
      <summary>將指定之數字的字串表示，轉換為相等的 64 位元帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 64 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由後面接著一連串數字 (0 到 9) 的任意符號所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之數字的字串表示轉換為相等的 64 位元帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 64 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由後面接著一連串數字 (0 到 9) 的任意符號所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
      <summary>將指定基底中數字的字串表示，轉換為相等的 64 位元帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="fromBase">
        <paramref name="value" /> 中數字的基底，必須是 2、8、10 或 16。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 64 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
-或-
代表非基底 10 正負號數字的 <paramref name="value" /> 有前置負號。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 為 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 所包含的字元在 <paramref name="fromBase" /> 指定的基底中不是有效數字。 如果 <paramref name="value" /> 中的第一個字元無效，例外狀況訊息會指出沒有數字可進行轉換；否則訊息會指出 <paramref name="value" /> 包含無效的尾端字元。</exception>
      <exception cref="T:System.OverflowException">代表非 10 進位帶正負號數字的<paramref name="value" />，有前置負號。
-或-
<paramref name="value" /> 代表小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號的整數值轉換為相等的 64 位元帶正負號的整數。</summary>
      <param name="value">要轉換之 16 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為相等的 64 位元帶正負號整數。</summary>
      <param name="value">要轉換之 32 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的 64 位元帶正負號整數。</summary>
      <param name="value">要轉換之 64 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Boolean)">
      <summary>將指定的布林值轉換為相等的 8 位元帶正負號的整數。</summary>
      <param name="value">要轉換的布林值。</param>
      <returns>如果 <paramref name="value" /> 為 <see langword="true" />，則為數字 1，否則為 0。</returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Byte)">
      <summary>將指定的 8 位元不帶正負號的整數值，轉換為相等的 8 位元帶正負號的整數。</summary>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 8 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Char)">
      <summary>將指定的 Unicode 字元值轉換為相等的 8 位元帶正負號的整數。</summary>
      <param name="value">要轉換的 Unicode 字元。</param>
      <returns>與 <paramref name="value" /> 相等的 8 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.DateTime)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的日期和時間值。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Decimal)">
      <summary>將指定之十進位數字的值，轉換為相等的 8 位元帶正負號的整數。</summary>
      <param name="value">要轉換的十進位數字。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 8 位元帶正負號的整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Double)">
      <summary>將指定之雙精確度浮點數的值，轉換為相等的 8 位元帶正負號的整數。</summary>
      <param name="value">要轉換的雙精確度浮點數。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 8 位元帶正負號的整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int16)">
      <summary>將指定的 16 位元帶正負號的整數值轉換成對等的 8 位元帶正負號的整數。</summary>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 8 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數值轉換為相等的 8 位元帶正負號的整數。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 8 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數值轉換為相等的 8 位元帶正負號的整數。</summary>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 8 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object)">
      <summary>將指定之物件的值，轉換為 8 位元帶正負號的整數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件，或是 <see langword="null" />。</param>
      <returns>與 <paramref name="value" /> 相等的 8 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之物件的值轉換為 8 位元帶正負號的整數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 相等的 8 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.SByte)">
      <summary>傳回指定的 8 位元帶正負號的整數；不會執行實際的轉換。</summary>
      <param name="value">傳回 8 位元帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 會原封不動地傳回。</returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Single)">
      <summary>將指定之單精確度浮點數的值，轉換為相等的 8 位元帶正負號的整數。</summary>
      <param name="value">要轉換的單精確度浮點數。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 8 位元帶正負號的整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String)">
      <summary>將指定之數字的字串表示，轉換為相等的 8 位元帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 8 位元帶正負號的整數；如果 value 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由後面接著一連串數字 (0 到 9) 的任意符號所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之數字的字串表示轉換為相等的 8 位元帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 相等的 8 位元帶正負號的整數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由後面接著一連串數字 (0 到 9) 的任意符號所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
      <summary>將指定基底中數字的字串表示，轉換為相等的 8 位元帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="fromBase">
        <paramref name="value" /> 中數字的基底，必須是 2、8、10 或 16。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 8 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
-或-
代表非基底 10 正負號數字的 <paramref name="value" /> 有前置負號。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 為 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 所包含的字元在 <paramref name="fromBase" /> 指定的基底中不是有效數字。 如果 <paramref name="value" /> 中的第一個字元無效，例外狀況訊息會指出沒有數字可進行轉換；否則訊息會指出 <paramref name="value" /> 包含無效的尾端字元。</exception>
      <exception cref="T:System.OverflowException">代表非 10 進位帶正負號數字的<paramref name="value" />，有前置負號。
-或-
<paramref name="value" /> 代表小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號的整數值轉換為相等的 8 位元帶正負號的整數。</summary>
      <param name="value">要轉換之 16 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 8 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為相等的 8 位元帶正負號整數。</summary>
      <param name="value">要轉換之 32 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 8 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的 8 位元帶正負號整數。</summary>
      <param name="value">要轉換之 64 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 8 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Boolean)">
      <summary>將指定的布林值轉換為相等的單精確度浮點數。</summary>
      <param name="value">要轉換的布林值。</param>
      <returns>如果 <paramref name="value" /> 為 <see langword="true" />，則為數字 1，否則為 0。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Byte)">
      <summary>將指定之 8 位元不帶正負號的整數值，轉換為相等的單精確度浮點數。</summary>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <returns>單精確度浮點數，與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Char)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的 Unicode 字元。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.DateTime)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的日期和時間值。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Decimal)">
      <summary>將指定之十進位數字的值，轉換為相等的單精確度浮點數。</summary>
      <param name="value">要轉換的十進位數字。</param>
      <returns>單精確度浮點數，與 <paramref name="value" /> 相等。
<paramref name="value" /> 會四捨五入為最接近的數字。 例如，在四捨五入為兩個小數位數時，值 2.345 會變成 2.34，而值 2.355 會變成 2.36。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Double)">
      <summary>將指定之雙精確度浮點數的值，轉換為相等的單精確度浮點數。</summary>
      <param name="value">要轉換的雙精確度浮點數。</param>
      <returns>單精確度浮點數，與 <paramref name="value" /> 相等。
<paramref name="value" /> 會四捨五入為最接近的數字。 例如，在四捨五入為兩個小數位數時，值 2.345 會變成 2.34，而值 2.355 會變成 2.36。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int16)">
      <summary>將指定之 16 位元帶正負號的整數值，轉換為相等的單精確度浮點數。</summary>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <returns>單精確度浮點數，與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int32)">
      <summary>將指定之 32 位元帶正負號的整數值，轉換為相等的單精確度浮點數。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>單精確度浮點數，與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int64)">
      <summary>將指定之 64 位元帶正負號的整數值，轉換為相等的單精確度浮點數。</summary>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <returns>單精確度浮點數，與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object)">
      <summary>將指定之物件的值，轉換為單精確度浮點數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件，或是 <see langword="null" />。</param>
      <returns>與 <paramref name="value" /> 相等的單精確度浮點數；如果 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之物件的值轉換為單精確度浮點數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 相等的單精確度浮點數；如果 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.SByte)">
      <summary>將指定之 8 位元帶正負號的整數值，轉換為相等的單精確度浮點數。</summary>
      <param name="value">要轉換的 8 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 8 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Single)">
      <summary>傳回指定的單精確度浮點數，不執行實際的轉換。</summary>
      <param name="value">要傳回的單精確度浮點數。</param>
      <returns>
        <paramref name="value" /> 會原封不動地傳回。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.String)">
      <summary>將指定之數字的字串表示，轉換為相等的單精確度浮點數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的單精確度浮點數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之數字的字串表示轉換為相等的單精確度浮點數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的單精確度浮點數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt16)">
      <summary>將指定之 16 位元不帶正負號的整數值，轉換為相等的單精確度浮點數。</summary>
      <param name="value">要轉換之 16 位元不帶正負號的整數。</param>
      <returns>單精確度浮點數，與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt32)">
      <summary>將指定之 32 位元不帶正負號的整數值，轉換為相等的單精確度浮點數。</summary>
      <param name="value">要轉換之 32 位元不帶正負號的整數。</param>
      <returns>單精確度浮點數，與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt64)">
      <summary>將指定之 64 位元不帶正負號的整數值，轉換為相等的單精確度浮點數。</summary>
      <param name="value">要轉換之 64 位元不帶正負號的整數。</param>
      <returns>單精確度浮點數，與 <paramref name="value" /> 相等。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean)">
      <summary>將指定的布林值轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的布林值。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
      <summary>將指定的布林值轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的布林值。</param>
      <param name="provider">物件的執行個體。 這個參數已忽略。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte)">
      <summary>將指定之 8 位元不帶正負號的整數值，轉換為它的相等字串表示。</summary>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之 8 位元不帶正負號的整數的值轉換為它的相等字串表示。</summary>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
      <summary>將 8 位元不帶正負號整數的值，轉換為它在指定基底中的相等字串表示。</summary>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <param name="toBase">傳回值的基底，必須是 2、8、10 或 16。</param>
      <returns>在基底 <paramref name="value" /> 中 <paramref name="toBase" /> 的字串表示。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Char)">
      <summary>將指定之 Unicode 字元的值，轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的 Unicode 字元。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之 Unicode 字元的值轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的 Unicode 字元。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。 這個參數已忽略。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime)">
      <summary>將指定之 <see cref="T:System.DateTime" /> 的值轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的日期和時間值。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之 <see cref="T:System.DateTime" /> 的值轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的日期和時間值。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal)">
      <summary>將指定之十進位數字的值，轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的十進位數字。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之十進位數字的值轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的十進位數字。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double)">
      <summary>將指定之雙精確度浮點數的值，轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的雙精確度浮點數。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
      <summary>將指定之雙精確度浮點數的值，轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的雙精確度浮點數。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16)">
      <summary>將指定之 16 位元帶正負號的整數值，轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之 16 位元帶正負號的整數的值轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
      <summary>將 16 位元帶正負號整數的值，轉換為它在指定之基底中的相等字串表示。</summary>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <param name="toBase">傳回值的基底，必須是 2、8、10 或 16。</param>
      <returns>在基底 <paramref name="value" /> 中 <paramref name="toBase" /> 的字串表示。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int32)">
      <summary>將指定之 32 位元帶正負號的整數值，轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之 32 位元帶正負號的整數的值轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
      <summary>將 32 位元帶正負號整數的值，轉換為它在指定之基底中的相等字串表示。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <param name="toBase">傳回值的基底，必須是 2、8、10 或 16。</param>
      <returns>在基底 <paramref name="value" /> 中 <paramref name="toBase" /> 的字串表示。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int64)">
      <summary>將指定之 64 位元帶正負號的整數值，轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之 64 位元帶正負號的整數的值轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
      <summary>將 64 位元帶正負號整數的值，轉換為它在指定之基底中的相等字串表示。</summary>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <param name="toBase">傳回值的基底，必須是 2、8、10 或 16。</param>
      <returns>在基底 <paramref name="value" /> 中 <paramref name="toBase" /> 的字串表示。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Object)">
      <summary>將指定之物件的值轉換為它的相等字串表示。</summary>
      <param name="value">提供要轉換之值的物件，或是 <see langword="null" />。</param>
      <returns>
        <paramref name="value" /> 的字串表示；如果 <paramref name="value" /> 為 <see langword="null" />，則為 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之物件的值轉換為它的相等字串表示。</summary>
      <param name="value">提供要轉換之值的物件，或是 <see langword="null" />。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>
        <paramref name="value" /> 的字串表示；如果 <see cref="F:System.String.Empty" /> 是值為 <paramref name="value" /> 的物件，則為 <see langword="null" />。 如果 <paramref name="value" /> 是 <see langword="null" />，則方法會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte)">
      <summary>將指定之 8 位元帶正負號的整數值，轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的 8 位元帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之 8 位元帶正負號的整數的值轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的 8 位元帶正負號的整數。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single)">
      <summary>將指定之單精確度浮點數的值，轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的單精確度浮點數。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之單精確度浮點數的值轉換為它的相等字串表示。</summary>
      <param name="value">要轉換的單精確度浮點數。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.String)">
      <summary>傳回指定的字串執行個體，不執行實際的轉換。</summary>
      <param name="value">要傳回的字串。</param>
      <returns>
        <paramref name="value" /> 會原封不動地傳回。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.String,System.IFormatProvider)">
      <summary>傳回指定的字串執行個體，不執行實際的轉換。</summary>
      <param name="value">要傳回的字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。 這個參數已忽略。</param>
      <returns>
        <paramref name="value" /> 會原封不動地傳回。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16)">
      <summary>將指定之 16 位元不帶正負號的整數值，轉換為它的相等字串表示。</summary>
      <param name="value">要轉換之 16 位元不帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之 16 位元不帶正負號的整數的值轉換為它的相等字串表示。</summary>
      <param name="value">要轉換之 16 位元不帶正負號的整數。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32)">
      <summary>將指定之 32 位元不帶正負號的整數值，轉換為它的相等字串表示。</summary>
      <param name="value">要轉換之 32 位元不帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之 32 位元不帶正負號的整數的值轉換為它的相等字串表示。</summary>
      <param name="value">要轉換之 32 位元不帶正負號的整數。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64)">
      <summary>將指定之 64 位元不帶正負號的整數值，轉換為它的相等字串表示。</summary>
      <param name="value">要轉換之 64 位元不帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之 64 位元不帶正負號的整數的值轉換為它的相等字串表示。</summary>
      <param name="value">要轉換之 64 位元不帶正負號的整數。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Boolean)">
      <summary>將指定的布林值轉換為相等的 16 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的布林值。</param>
      <returns>如果 <paramref name="value" /> 為 <see langword="true" />，則為數字 1，否則為 0。</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Byte)">
      <summary>將指定的 8 位元不帶正負號整數的值，轉換為相等的 16 位元不帶正負號的整數。</summary>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 16 位元不帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Char)">
      <summary>將指定的 Unicode 字元值轉換為相等的 16 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的 Unicode 字元。</param>
      <returns>等於 <paramref name="value" /> 的 16 位元不帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.DateTime)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的日期和時間值。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Decimal)">
      <summary>將指定之十進位數字的值，轉換為相等的 16 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的十進位數字。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 16 位元不帶正負號整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Double)">
      <summary>將指定之雙精確度浮點數的值，轉換為相等的 16 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的雙精確度浮點數。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 16 位元不帶正負號整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int16)">
      <summary>將指定的 16 位元帶正負號整數的值，轉換為相等的 16 位元不帶正負號整數。</summary>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 16 位元不帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數值轉換為相等的 16 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 16 位元不帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數值轉換為相等的 16 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 16 位元不帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object)">
      <summary>將指定之物件的值轉換為 16 位元不帶正負號的整數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件，或是 <see langword="null" />。</param>
      <returns>與 <paramref name="value" /> 相等的 16 位元不帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之物件的值轉換為 16 位元不帶正負號的整數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 相等的 16 位元不帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.SByte)">
      <summary>將指定的 8 位元帶正負號整數的值，轉換為相等的 16 位元不帶正負號整數。</summary>
      <param name="value">要轉換的 8 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 16 位元不帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Single)">
      <summary>將指定之單精確度浮點數的值，轉換為相等的 16 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的單精確度浮點數。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 16 位元不帶正負號整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String)">
      <summary>將指定之數字的字串表示，轉換為相等的 16 位元不帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 16 位元不帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由後面接著一連串數字 (0 到 9) 的任意符號所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之數字的字串表示轉換為相等的 16 位元不帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 16 位元不帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由後面接著一連串數字 (0 到 9) 的任意符號所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
      <summary>將指定基底中數字的字串表示，轉換為相等的 16 位元不帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="fromBase">
        <paramref name="value" /> 中數字的基底，必須是 2、8、10 或 16。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 16 位元不帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
-或-
代表非 10 進位不帶正負號數字的 <paramref name="value" />，有前置負號。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 為 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 所包含的字元在 <paramref name="fromBase" /> 指定的基底中不是有效數字。 如果 <paramref name="value" /> 中的第一個字元無效，例外狀況訊息會指出沒有數字可進行轉換；否則訊息會指出 <paramref name="value" /> 包含無效的尾端字元。</exception>
      <exception cref="T:System.OverflowException">代表非基底 10 不帶正負號數字的<paramref name="value" />，前面會加上負號。
-或-
<paramref name="value" /> 代表小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt16)">
      <summary>傳回指定的 16 位元不帶正負號整數；不會執行實際的轉換。</summary>
      <param name="value">要傳回之 16 位元不帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 會原封不動地傳回。</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為相等的 16 位元不帶正負號整數。</summary>
      <param name="value">要轉換之 32 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 16 位元不帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的 16 位元不帶正負號整數。</summary>
      <param name="value">要轉換之 64 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 16 位元不帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Boolean)">
      <summary>將指定的布林值轉換為相等的 32 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的布林值。</param>
      <returns>如果 <paramref name="value" /> 為 <see langword="true" />，則為數字 1，否則為 0。</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Byte)">
      <summary>將指定的 8 位元不帶正負號整數的值，轉換為相等的 32 位元不帶正負號的整數。</summary>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元不帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Char)">
      <summary>將指定的 Unicode 字元值轉換為相等的 32 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的 Unicode 字元。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元不帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.DateTime)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的日期和時間值。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Decimal)">
      <summary>將指定之十進位數字的值，轉換為相等的 32 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的十進位數字。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 32 位元不帶正負號整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Double)">
      <summary>將指定之雙精確度浮點數的值，轉換為相等的 32 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的雙精確度浮點數。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 32 位元不帶正負號整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int16)">
      <summary>將指定的 16 位元帶正負號整數的值，轉換為相等的 32 位元不帶正負號整數。</summary>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元不帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數值轉換為相等的 32 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元不帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數值轉換為相等的 32 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元不帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object)">
      <summary>將指定之物件的值轉換為 32 位元不帶正負號的整數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件，或是 <see langword="null" />。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元不帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之物件的值轉換為 32 位元不帶正負號的整數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元不帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.SByte)">
      <summary>將指定的 8 位元帶正負號整數的值，轉換為相等的 32 位元不帶正負號整數。</summary>
      <param name="value">要轉換的 8 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元不帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Single)">
      <summary>將指定之單精確度浮點數的值，轉換為相等的 32 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的單精確度浮點數。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 32 位元不帶正負號整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String)">
      <summary>將指定之數字的字串表示，轉換為相等的 32 位元不帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 32 位元不帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由後面接著一連串數字 (0 到 9) 的任意符號所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之數字的字串表示轉換為相等的 32 位元不帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 32 位元不帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由後面接著一連串數字 (0 到 9) 的任意符號所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
      <summary>將指定基底中數字的字串表示，轉換為相等的 32 位元不帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="fromBase">
        <paramref name="value" /> 中數字的基底，必須是 2、8、10 或 16。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 32 位元不帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
-或-
代表非 10 進位不帶正負號數字的 <paramref name="value" />，有前置負號。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 為 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 所包含的字元在 <paramref name="fromBase" /> 指定的基底中不是有效數字。 如果 <paramref name="value" /> 中的第一個字元無效，例外狀況訊息會指出沒有數字可進行轉換；否則訊息會指出 <paramref name="value" /> 包含無效的尾端字元。</exception>
      <exception cref="T:System.OverflowException">代表非基底 10 不帶正負號數字的<paramref name="value" />，前面會加上負號。
-或-
<paramref name="value" /> 代表小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號整數的值，轉換為相等的 32 位元不帶正負號的整數。</summary>
      <param name="value">要轉換之 16 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元不帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt32)">
      <summary>傳回指定的 32 位元不帶正負號整數；不會執行實際的轉換。</summary>
      <param name="value">要傳回之 32 位元不帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 會原封不動地傳回。</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的 32 位元不帶正負號整數。</summary>
      <param name="value">要轉換之 64 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 32 位元不帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Boolean)">
      <summary>將指定的布林值轉換為相等的 64 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的布林值。</param>
      <returns>如果 <paramref name="value" /> 為 <see langword="true" />，則為數字 1，否則為 0。</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Byte)">
      <summary>將指定的 8 位元不帶正負號整數的值，轉換為相等的 64 位元不帶正負號的整數。</summary>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Char)">
      <summary>將指定的 Unicode 字元值轉換為相等的 64 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的 Unicode 字元。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元不帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.DateTime)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="value">要轉換的日期和時間值。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Decimal)">
      <summary>將指定之十進位數字的值，轉換為相等的 64 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的十進位數字。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 64 位元不帶正負號整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Double)">
      <summary>將指定之雙精確度浮點數的值，轉換為相等的 64 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的雙精確度浮點數。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 64 位元不帶正負號整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int16)">
      <summary>將指定的 16 位元帶正負號整數的值，轉換為相等的 64 位元不帶正負號整數。</summary>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元不帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數值轉換為相等的 64 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元不帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數值轉換為相等的 64 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元不帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object)">
      <summary>將指定之物件的值轉換為 64 位元不帶正負號的整數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件，或是 <see langword="null" />。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元不帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之物件的值轉換為 64 位元不帶正負號的整數。</summary>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元不帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為零。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正確。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 未實作 <see cref="T:System.IConvertible" /> 介面。
-或-
不支援轉換。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.SByte)">
      <summary>將指定的 8 位元帶正負號整數的值，轉換為相等的 64 位元不帶正負號整數。</summary>
      <param name="value">要轉換的 8 位元帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元不帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Single)">
      <summary>將指定之單精確度浮點數的值，轉換為相等的 64 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的單精確度浮點數。</param>
      <returns>
        <paramref name="value" />，四捨五入為最接近的 64 位元不帶正負號整數。 如果 <paramref name="value" /> 介於兩個整數正中間時，則傳回偶數；也就是 4.5 會轉換為 4，5.5 會轉換為 6。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String)">
      <summary>將指定之數字的字串表示，轉換為相等的 64 位元不帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 64 位元帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由後面接著一連串數字 (0 到 9) 的任意符號所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
      <summary>使用指定之特定文化特性格式資訊，將指定之數字的字串表示轉換為相等的 64 位元不帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 64 位元不帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由後面接著一連串數字 (0 到 9) 的任意符號所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 代表小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
      <summary>將指定基底中數字的字串表示，轉換為相等的 64 位元不帶正負號的整數。</summary>
      <param name="value">字串，包含要轉換的數字。</param>
      <param name="fromBase">
        <paramref name="value" /> 中數字的基底，必須是 2、8、10 或 16。</param>
      <returns>與 <paramref name="value" /> 中之數字相等的 64 位元不帶正負號的整數；如果 <paramref name="value" /> 為 <see langword="null" />，則為 0 (零)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
-或-
代表非 10 進位不帶正負號數字的 <paramref name="value" />，有前置負號。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 為 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 所包含的字元在 <paramref name="fromBase" /> 指定的基底中不是有效數字。 如果 <paramref name="value" /> 中的第一個字元無效，例外狀況訊息會指出沒有數字可進行轉換；否則訊息會指出 <paramref name="value" /> 包含無效的尾端字元。</exception>
      <exception cref="T:System.OverflowException">代表非基底 10 不帶正負號數字的<paramref name="value" />，前面會加上負號。
-或-
<paramref name="value" /> 代表小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號整數的值，轉換為相等的 64 位元不帶正負號的整數。</summary>
      <param name="value">要轉換之 16 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元不帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為相等的 64 位元不帶正負號整數。</summary>
      <param name="value">要轉換之 32 位元不帶正負號的整數。</param>
      <returns>與 <paramref name="value" /> 相等的 64 位元不帶正負號的整數。</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt64)">
      <summary>傳回指定的 64 位元不帶正負號整數；不會執行實際的轉換。</summary>
      <param name="value">要傳回之 64 位元不帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 會原封不動地傳回。</returns>
    </member>
    <member name="M:System.Convert.TryFromBase64Chars(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)">
      <summary>嘗試將指定的範圍 (包含以 Base-64 位數編碼的字串表示) 轉換為 8 位元不帶正負號整數的範圍。</summary>
      <param name="chars">範圍，其包含以 Base-64 位數編碼的字串表示。</param>
      <param name="bytes">當這個方法傳回 <see langword="true" /> 時，會是已轉換的 8 位元不帶正負號整數。 當這個方法傳回 <see langword="false" /> 時，範圍會保持未修改狀態，或者包含不完整的 <paramref name="chars" /> 轉換，直到最後一個有效字元為止。</param>
      <param name="bytesWritten">當此方法傳回時，在 <paramref name="bytes" /> 中寫入的位元組數目。</param>
      <returns>如果轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Convert.TryFromBase64String(System.String,System.Span{System.Byte},System.Int32@)">
      <summary>嘗試將以 Base-64 位數編碼的指定字串表示轉換為 8 位元不帶正負號整數的範圍。</summary>
      <param name="s">以 Base-64 位數編碼的字串表示。</param>
      <param name="bytes">當這個方法傳回 <see langword="true" /> 時，會是已轉換的 8 位元不帶正負號整數。 當這個方法傳回 <see langword="false" /> 時，範圍會保持未修改狀態，或者包含不完整的 <paramref name="s" /> 轉換，直到最後一個有效字元為止。</param>
      <param name="bytesWritten">當此方法傳回時，在 <paramref name="bytes" /> 中寫入的位元組數目。</param>
      <returns>如果轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Convert.TryToBase64Chars(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@,System.Base64FormattingOptions)">
      <summary>嘗試將指定唯讀範圍內的 8 位元不帶正負號整數轉換為其使用 Base-64 位數編碼的對等字串表示。 您可以選擇性地指定是否要在傳回值中插入分行符號。</summary>
      <param name="bytes">8 位元不帶正負號整數的唯讀範圍。</param>
      <param name="chars">當這個方法傳回 <see langword="true" /> 時，會是包含 <paramref name="bytes" /> 內元素 Base-64 中之字串表示的範圍。 如果 <paramref name="bytes" /> 的長度為 0，或這個方法傳回 <paramref name="false" />，則不會將任何內容寫入至此參數。</param>
      <param name="charsWritten">當這個方法傳回時，會是寫入 <paramref name="chars" /> 的字元總數。</param>
      <param name="options">其中一個列舉值，其指定是否要在傳回值中插入分行符號。 預設值為 <see cref="F:System.Base64FormattingOptions.None" />。</param>
      <returns>如果轉換成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Base64FormattingOptions" /> 值。</exception>
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>提供一組方法和屬性，您可以使用這些方法和屬性，精確地測量已耗用時間。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Stopwatch" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>取得目前執行個體所測量的已耗用時間總和。</summary>
      <returns>表示目前執行個體所測量之已耗用時間總和的唯讀 <see cref="T:System.TimeSpan" />。</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>取得目前執行個體所測量的已耗用時間總和，以毫秒為單位。</summary>
      <returns>表示目前執行個體所測量之毫秒總數的唯讀長整數 (Long Integer)。</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>取得目前執行個體所測量的已耗用時間總和，以計時器刻度為單位。</summary>
      <returns>表示目前執行個體所測量之計時器刻度總數的唯讀長整數。</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>取得計時器頻率，做為每秒的刻度數。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>取得計時器機制中的目前刻度數。</summary>
      <returns>表示基礎計時器機制之刻度計數器值的長整數。</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>指示計時器是否以高解析度效能計數器為基礎。 此欄位為唯讀。</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>取得值，表示 <see cref="T:System.Diagnostics.Stopwatch" /> 計時器是否執行中。</summary>
      <returns>如果 <see cref="T:System.Diagnostics.Stopwatch" /> 執行個體目前執行中並正在測量間隔的已耗用時間，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>停止時間間隔測量並將已耗用時間重設為零。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Restart">
      <summary>停止時間間隔測量，並將耗用時間重設為零，然後開始測量耗用時間。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>啟動或繼續測量間隔的已耗用時間。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>初始化新的 <see cref="T:System.Diagnostics.Stopwatch" /> 執行個體，將已耗用時間屬性設定為零，然後開始測量已耗用時間。</summary>
      <returns>剛開始測量已耗用時間的 <see cref="T:System.Diagnostics.Stopwatch" />。</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>停止測量間隔的已耗用時間。</summary>
    </member>
    <member name="T:System.Environment">
      <summary>提供有關目前環境和平台的資訊，以及操作的方法。 此類別無法被繼承。</summary>
    </member>
    <member name="P:System.Environment.CommandLine">
      <summary>取得這個處理程序的命令列。</summary>
      <returns>含有命令列引數的字串。</returns>
    </member>
    <member name="P:System.Environment.CurrentDirectory">
      <summary>取得或設定目前工作目錄的完整路徑。</summary>
      <returns>含有目錄路徑的字串。</returns>
      <exception cref="T:System.ArgumentException">嘗試設定為空字串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">嘗試設定為 <see langword="null." /></exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">嘗試設定找不到的本機路徑。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有適當的權限。</exception>
    </member>
    <member name="P:System.Environment.CurrentManagedThreadId">
      <summary>取得目前 Managed 執行緒的唯一識別項。</summary>
      <returns>整數，表示這個 Managed 執行緒的唯一識別項。</returns>
    </member>
    <member name="M:System.Environment.Exit(System.Int32)">
      <summary>結束這個處理序，並傳回結束代碼給作業系統。</summary>
      <param name="exitCode">要傳回作業系統的結束代碼。 使用 0 (零) 表示處理程序已順利完成。</param>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有足夠的安全性權限執行這項功能。</exception>
    </member>
    <member name="P:System.Environment.ExitCode">
      <summary>取得或設定處理序的結束代碼。</summary>
      <returns>含有結束代碼的 32 位元帶正負號的整數 (Signed Integer)。 預設值為 0 (零)，表示處理序順利完成。</returns>
    </member>
    <member name="M:System.Environment.ExpandEnvironmentVariables(System.String)">
      <summary>用變數值的等值字串來取代內嵌於指定字串內的每個環境變數名稱，然後傳回結果字串。</summary>
      <param name="name">含有零或多個環境變數名稱的字串。 每個環境變數會以百分比符號字元 (%) 括住。</param>
      <returns>由字串值取代每個環境變數的字串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Environment.FailFast(System.String)">
      <summary>將訊息寫入 Windows 應用程式事件記錄檔後立即終止處理序，然後在向 Microsoft 回報錯誤時包含該訊息。</summary>
      <param name="message">解釋處理程序結束原因的訊息；如果未提供任何解釋，則為 <see langword="null" />。</param>
    </member>
    <member name="M:System.Environment.FailFast(System.String,System.Exception)">
      <summary>將訊息寫入 Windows 應用程式事件記錄檔後立即終止處理程序，然後在向 Microsoft 回報錯誤時，包含該訊息和例外狀況資訊。</summary>
      <param name="message">解釋處理程序結束原因的訊息；如果未提供任何解釋，則為 <see langword="null" />。</param>
      <param name="exception">表示造成終止之錯誤的例外狀況。 這通常是 <see langword="catch" /> 區塊中的例外狀況。</param>
    </member>
    <member name="M:System.Environment.GetCommandLineArgs">
      <summary>傳回字串陣列，包含目前處理序的命令列引數。</summary>
      <returns>字串的陣列，其中的每個元素都包含命令列引數。 第一個元素是可執行檔名稱，後面的零或多個元素包含其餘的命令列引數。</returns>
      <exception cref="T:System.NotSupportedException">系統不支援命令列引數。</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String)">
      <summary>從目前的處理程序中擷取環境變數的值。</summary>
      <param name="variable">環境變數的名稱。</param>
      <returns>
        <paramref name="variable" /> 指定的環境變數的值；如果找不到環境變數，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有執行這項作業的必要權限。</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
      <summary>從目前的處理程序或是目前使用者或本機電腦的 Windows 作業系統登錄機碼中，擷取環境變數的值。</summary>
      <param name="variable">環境變數的名稱。</param>
      <param name="target">其中一個 <see cref="T:System.EnvironmentVariableTarget" /> 值。 在 UNIX 型系統上執行的 .NET Core 只支援 <see cref="F:System.EnvironmentVariableTarget.Process" />。</param>
      <returns>
        <paramref name="variable" /> 和 <paramref name="target" /> 參數指定之環境變數的值；如果找不到環境變數，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是有效的 <see cref="T:System.EnvironmentVariableTarget" /> 值。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有執行這項作業的必要權限。</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables">
      <summary>從目前的處理序中擷取所有環境變數名稱及它們的值。</summary>
      <returns>包含所有環境變數名稱及其值的字典；如果找不到環境變數，則為空的字典。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有執行這項作業的必要權限。</exception>
      <exception cref="T:System.OutOfMemoryException">緩衝區記憶體不足。</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
      <summary>從目前的處理程序或是目前使用者或本機電腦的 Windows 作業系統登錄機碼中，擷取所有環境變數名稱和它們的值。</summary>
      <param name="target">其中一個 <see cref="T:System.EnvironmentVariableTarget" /> 值。 在 UNIX 型系統上執行的 .NET Core 只支援 <see cref="F:System.EnvironmentVariableTarget.Process" />。</param>
      <returns>包含 <paramref name="target" /> 參數指定之來源中所有環境變數名稱及其值的字典；如果找不到環境變數，則為空的字典。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有針對 <paramref name="target" /> 指定值執行這項作業的必要權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 含有無效的值。</exception>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
      <summary>取得由指定之列舉識別的系統特殊資料夾的路徑。</summary>
      <param name="folder">識別系統特殊資料夾的其中一個列舉值。</param>
      <returns>如果所指定的系統特殊資料夾實際存在您的電腦中，則為該資料夾的路徑，否則為空字串 ("")。
如果作業系統沒有建立資料夾、現有資料夾被刪除或資料夾是沒有對應到實體路徑的虛擬目錄 (例如 [我的電腦])，則資料夾不會實際存在。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="folder" /> 不是 <see cref="T:System.Environment.SpecialFolder" /> 的成員。</exception>
      <exception cref="T:System.PlatformNotSupportedException">不支援目前的平台。</exception>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
      <summary>取得由指定之列舉所識別之系統特殊資料夾的路徑，並使用指定的選項來存取特殊資料夾。</summary>
      <param name="folder">識別系統特殊資料夾的其中一個列舉值。</param>
      <param name="option">列舉值之一，其指定用於存取特殊資料夾的選項。</param>
      <returns>如果所指定的系統特殊資料夾實際存在您的電腦中，則為該資料夾的路徑，否則為空字串 ("")。
如果作業系統沒有建立資料夾、現有資料夾被刪除或資料夾是沒有對應到實體路徑的虛擬目錄 (例如 [我的電腦])，則資料夾不會實際存在。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="folder" /> 不是 <see cref="T:System.Environment.SpecialFolder" /> 的成員。
-或-
<paramref name="options" /> 不是 <see cref="T:System.Environment.SpecialFolderOption" /> 的成員。</exception>
      <exception cref="T:System.PlatformNotSupportedException">不支援目前的平台。</exception>
    </member>
    <member name="M:System.Environment.GetLogicalDrives">
      <summary>傳回包含目前電腦上邏輯磁碟名稱的字串陣列。</summary>
      <returns>字串的陣列，其中的每個元素都包含邏輯磁碟的名稱。 例如，如果電腦的硬碟是第一部邏輯磁碟，傳回的第一個項目就會是 "C:\"。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
    </member>
    <member name="P:System.Environment.HasShutdownStarted">
      <summary>取得值，這個值表示正在卸載目前的應用程式定義域，或是正在關閉通用語言執行平台 (CLR)。</summary>
      <returns>如果目前的應用程式域正在卸載或 CLR 正在關閉，<see langword="true" />：否則，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Environment.Is64BitOperatingSystem">
      <summary>判斷目前作業系統是否為 64 位元作業系統。</summary>
      <returns>如果作業系統是 64-bit，則 <see langword="true" />;否則，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Environment.Is64BitProcess">
      <summary>判斷目前處理程序是否為 64 位元處理程序。</summary>
      <returns>如果處理程序是 64 位元則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Environment.MachineName">
      <summary>取得這個本機電腦的 NetBIOS 名稱。</summary>
      <returns>含有這個電腦名稱的字串。</returns>
      <exception cref="T:System.InvalidOperationException">無法取得這個電腦的名稱。</exception>
    </member>
    <member name="P:System.Environment.NewLine">
      <summary>取得為這個環境定義的新行字串 (Newline String)。</summary>
      <returns>如果是非 Unix 平台，則為包含 "\r\n" 的字串；如果是 Unix 平台，則為包含 "\n" 的字串。</returns>
    </member>
    <member name="P:System.Environment.OSVersion">
      <summary>取得含有目前平台識別項和版本號碼的 <see cref="T:System.OperatingSystem" /> 物件。</summary>
      <returns>包含平台識別項和版本號碼的物件。</returns>
      <exception cref="T:System.InvalidOperationException">這個屬性過去無法取得系統版本。
-或-
取得的平台識別碼不是 <see cref="T:System.PlatformID" /> 的成員。</exception>
    </member>
    <member name="P:System.Environment.ProcessorCount">
      <summary>取得目前電腦上的處理器數目。</summary>
      <returns>32 位元帶正負號的整數，可指定目前電腦上的處理器數目。 沒有預設值。 如果目前電腦包含多個處理器群組，則這個屬性會傳回可供 Common Language Runtime (CLR) 使用的邏輯處理器數目。</returns>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
      <summary>建立、修改或刪除儲存在目前處理序中的環境變數。</summary>
      <param name="variable">環境變數的名稱。</param>
      <param name="value">要指派給 <paramref name="variable" /> 的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variable" /> 包含零長度字串、初始十六進位零字元 (0x00) 或等號 ("=")。
-或-
<paramref name="variable" /> 或 <paramref name="value" /> 的長度大於或等於 32,767 個字元。
-或-
執行這項作業期間發生錯誤。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有執行這項作業的必要權限。</exception>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
      <summary>建立、修改或刪除儲存在目前的處理序中，或是儲存在保留給目前使用者或本機電腦的 Windows 作業系統登錄機碼中的環境變數。</summary>
      <param name="variable">環境變數的名稱。</param>
      <param name="value">要指派給 <paramref name="variable" /> 的值。</param>
      <param name="target">其中一個列舉值，指定環境變數的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variable" /> 包含零長度字串、初始十六進位零字元 (0x00) 或等號 ("=")。
-或-
<paramref name="variable" /> 的長度大於或等於 32,767 個字元。
-或-
<paramref name="target" /> 不是 <see cref="T:System.EnvironmentVariableTarget" /> 列舉的成員。
-或-
<paramref name="target" /> 為 <see cref="F:System.EnvironmentVariableTarget.Machine" /> 或 <see cref="F:System.EnvironmentVariableTarget.User" />，且 <paramref name="variable" /> 的長度大於等於 255。
-或-
<paramref name="target" /> 為 <see cref="F:System.EnvironmentVariableTarget.Process" />，且 <paramref name="value" /> 的長度大於或等於 32,767 個字元。
-或-
執行這項作業期間發生錯誤。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有執行這項作業的必要權限。</exception>
    </member>
    <member name="T:System.Environment.SpecialFolder">
      <summary>指定用來擷取系統特殊資料夾目錄路徑的列舉常數。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.AdminTools">
      <summary>檔案系統目錄，用於儲存個別使用者的系統管理工具。 Microsoft Management Console (MMC) 會將自訂的主控台儲存至這個目錄，而這個目錄會隨著使用者一起漫遊。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ApplicationData">
      <summary>表示做為目前漫遊使用者的應用程式特定資料之通用儲存機制的目錄。 漫遊使用者在網路多部電腦上工作。 漫遊使用者設定檔保留在網路的伺服器上，會在使用者登入時載入至系統。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CDBurning">
      <summary>檔案系統目錄，做為等候寫入 CD 之檔案的暫存區域。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonAdminTools">
      <summary>檔案系統目錄，包含電腦之所有使用者的系統管理工具。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonApplicationData">
      <summary>表示做為所有使用者使用的應用程式特定資料之通用儲存機制的目錄。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonDesktopDirectory">
      <summary>檔案系統目錄，包含在所有使用者的桌面上出現的檔案和資料夾。 這個特殊資料夾僅適用於 Windows NT 系統。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonDocuments">
      <summary>檔案系統目錄，包含所有使用者共用的文件。 這個特殊資料夾適用於已安裝 Shfolder.dll 的 Windows NT、Windows 95 和 Windows 98 系統。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonMusic">
      <summary>檔案系統目錄，做為所有使用者共用之音樂檔案的儲存機制。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonOemLinks">
      <summary>基於回溯相容性，Windows Vista 中可以辨識這個值，但已不再使用特殊資料夾本身。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonPictures">
      <summary>檔案系統目錄，做為所有使用者共用之影像檔案的儲存機制。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFiles">
      <summary>表示跨應用程式共用之元件的目錄。
若要在非 x86 系統上取得 x86 Common Program Files 目錄，請使用 <see cref="F:System.Environment.SpecialFolder.ProgramFilesX86" /> 成員。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFilesX86">
      <summary>Program Files 資料夾。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonPrograms">
      <summary>表示跨應用程式共用之元件的資料夾。 這個特殊資料夾僅適用於 Windows NT、Windows 2000 和 Windows XP 系統。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonStartMenu">
      <summary>檔案系統目錄，包含在所有使用者的 [開始] 功能表上出現的程式和資料夾。 這個特殊資料夾僅適用於 Windows NT 系統。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonStartup">
      <summary>檔案系統目錄，包含在所有使用者的 [啟動] 資料夾中出現的程式。 這個特殊資料夾僅適用於 Windows NT 系統。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonTemplates">
      <summary>檔案系統目錄，包含所有使用者可用的範本。 這個特殊資料夾僅適用於 Windows NT 系統。  已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonVideos">
      <summary>檔案系統目錄，做為所有使用者共用之視訊檔案的儲存機制。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Cookies">
      <summary>表示做為網際網路 Cookie 通用儲存機制的目錄。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Desktop">
      <summary>邏輯桌面，而不是實體檔案系統位置。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.DesktopDirectory">
      <summary>表示用來實際儲存桌面上檔案物件的目錄。 請勿混淆這個目錄和桌面資料夾本身，它是虛擬資料夾。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Favorites">
      <summary>表示做為使用者的我的最愛項目之通用儲存機制的目錄。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Fonts">
      <summary>包含字型的虛擬資料夾。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.History">
      <summary>表示做為網際網路記錄項目通用儲存機制的目錄。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.InternetCache">
      <summary>表示做為網際網路暫存檔通用儲存機制的目錄。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalApplicationData">
      <summary>表示做為目前非漫遊使用者使用的應用程式特定資料之通用儲存機制的目錄。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalizedResources">
      <summary>檔案系統目錄，包含已當地語系化的資源資料。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyComputer">
      <summary>[我的電腦] 資料夾。 當傳遞給 <see langword="Environment.GetFolderPath" /> 方法時，<see langword="MyComputer" /> 列舉成員一律會產生空的字串 ("")，因為未定義 [我的電腦] 資料夾路徑。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyDocuments">
      <summary>[我的文件] 資料夾。 此成員相當於 <see cref="F:System.Environment.SpecialFolder.Personal" />。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyMusic">
      <summary>[我的音樂] 資料夾。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyPictures">
      <summary>[我的圖片] 資料夾。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyVideos">
      <summary>檔案系統目錄，做為使用者專屬視訊的儲存機制。  已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.NetworkShortcuts">
      <summary>檔案系統目錄，包含 [網路上的芳鄰] 虛擬資料夾中可能存在的連結物件。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Personal">
      <summary>表示做為文件通用儲存機制的目錄。  此成員相當於 <see cref="F:System.Environment.SpecialFolder.MyDocuments" />。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.PrinterShortcuts">
      <summary>檔案系統目錄，包含 [印表機] 虛擬資料夾中可能存在的連結物件。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFiles">
      <summary>Program Files 目錄。
在非 x86 系統上，將 <see cref="F:System.Environment.SpecialFolder.ProgramFiles" /> 傳遞至 <see cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)" /> 方法會傳回非 x86 程式的路徑。 若要在非 x86 系統上取得 x86 Program Files 目錄，請使用 <see cref="F:System.Environment.SpecialFolder.ProgramFilesX86" /> 成員。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFilesX86">
      <summary>x86 Program Files 資料夾。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Programs">
      <summary>包含使用者之程式群組的目錄。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Recent">
      <summary>包含使用者最近使用之文件的目錄。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Resources">
      <summary>檔案系統目錄，包含資源資料。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SendTo">
      <summary>包含 [傳送到] 功能表項目的目錄。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.StartMenu">
      <summary>包含 [開始] 功能表項目的目錄。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Startup">
      <summary>對應至使用者之啟動程式群組的目錄。 每當使用者登入或啟動 Windows 時，系統就會啟動這些程式。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.System">
      <summary>System 目錄。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SystemX86">
      <summary>Windows System 資料夾。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Templates">
      <summary>表示做為文件範本通用儲存機制的目錄。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.UserProfile">
      <summary>使用者的設定檔資料夾。 應用程式不應該在這個層級建立檔案或資料夾，而應該將其資料放在 <see cref="F:System.Environment.SpecialFolder.ApplicationData" /> 所參考的位置下。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Windows">
      <summary>Windows 目錄或 SYSROOT。 這個值對應至 %windir% 或 %SYSTEMROOT% 環境變數。 已新增在 .NET Framework 4 中。</summary>
    </member>
    <member name="T:System.Environment.SpecialFolderOption">
      <summary>指定用於取得特殊資料夾路徑的選項。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.Create">
      <summary>如果資料夾的路徑尚不存在，則建立該資料夾。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.DoNotVerify">
      <summary>傳回資料夾的路徑，但不驗證路徑是否存在。 如果資料夾位於網路上，則指定這個選項可縮短延遲時間。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.None">
      <summary>驗證資料夾的路徑。 如果該資料夾存在，則會傳回路徑。 如果資料夾不存在，則會傳回空字串。 這是預設行為。</summary>
    </member>
    <member name="P:System.Environment.StackTrace">
      <summary>取得目前的堆疊追蹤資訊。</summary>
      <returns>含有堆疊追蹤資訊的字串。 這個值可以是 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Environment.SystemDirectory">
      <summary>取得系統目錄的完整路徑。</summary>
      <returns>含有目錄路徑的字串。</returns>
    </member>
    <member name="P:System.Environment.SystemPageSize">
      <summary>取得作業系統記憶體分頁中的位元組數目。</summary>
      <returns>系統記憶體分頁中的位元組數目。</returns>
    </member>
    <member name="P:System.Environment.TickCount">
      <summary>取得系統啟動後經過的毫秒數。</summary>
      <returns>32 位元帶正負號的整數，包含自上一次電腦啟動後所經過的毫秒時間量。</returns>
    </member>
    <member name="P:System.Environment.TickCount64">
      <summary>取得系統啟動後經過的毫秒數。</summary>
      <returns>自系統啟動後經過的毫秒數。</returns>
    </member>
    <member name="P:System.Environment.UserDomainName">
      <summary>取得與目前使用者相關聯的網路網域名稱。</summary>
      <returns>與目前使用者相關聯的網路網域名稱。</returns>
      <exception cref="T:System.PlatformNotSupportedException">作業系統不支援擷取網路網域名稱。</exception>
      <exception cref="T:System.InvalidOperationException">無法擷取網路網域名稱。</exception>
    </member>
    <member name="P:System.Environment.UserInteractive">
      <summary>取得數值，指示目前的處理程序是否正執行於使用者互動模式中。</summary>
      <returns>如果目前的進程正在使用者互動模式中執行，則 <see langword="true" />;否則，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Environment.UserName">
      <summary>取得目前登入作業系統之人員的使用者名稱。</summary>
      <returns>登入作業系統之人員的使用者名稱。</returns>
    </member>
    <member name="P:System.Environment.Version">
      <summary>取得描述通用語言執行平台的主要、次要、組建 (Build) 和修訂編號的 <see cref="T:System.Version" /> 物件。</summary>
      <returns>顯示 Common Language Runtime 版本的物件。</returns>
    </member>
    <member name="P:System.Environment.WorkingSet">
      <summary>取得對應至處理序內容的實體記憶體數量。</summary>
      <returns>64 位元帶正負號的整數，包含對應至處理序內容的實體記憶體位元組數目。</returns>
    </member>
    <member name="T:System.EnvironmentVariableTarget">
      <summary>指定在 set 或 get 作業中要儲存或擷取環境變數的位置。</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.Machine">
      <summary>此環境變數是從 Windows 作業系統登錄中的 <see langword="HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment" /> 機碼所擷取而來，或是儲存在其中。 應該只有 Windows 系統上執行的 .NET 實作使用此值。</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.Process">
      <summary>此環境變數是從與目前處理序有關聯的環境區塊中所擷取而來，或是儲存在其中。</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.User">
      <summary>此環境變數是從 Windows 作業系統登錄中的 <see langword="HKEY_CURRENT_USER\Environment" /> 機碼所擷取而來，或是儲存在其中。 應該只有 Windows 系統上執行的 .NET 實作使用此值。</summary>
    </member>
    <member name="T:System.Globalization.GlobalizationExtensions">
      <summary>提供全球化相關的擴充方法。</summary>
    </member>
    <member name="M:System.Globalization.GlobalizationExtensions.GetStringComparer(System.Globalization.CompareInfo,System.Globalization.CompareOptions)">
      <summary>根據所指定之 <see cref="T:System.Globalization.CompareInfo" /> 物件的區分文化特性字串比較規則，傳回 <see cref="T:System.StringComparer" /> 物件。</summary>
      <param name="compareInfo">支援區分文化特性字串比較的物件。</param>
      <param name="options">定義應該如何比較字串的值。 <paramref name="options" /> 是列舉值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、列舉值 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> 或下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> 和 <see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
      <returns>可用來執行字串比較的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="compareInfo" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 無效。</exception>
    </member>
    <member name="T:System.IO.BinaryReader">
      <summary>以特定的編碼方式，將基本資料型別當做二進位值讀取。</summary>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
      <summary>根據指定的資料流並使用 UTF-8 編碼方式，初始化 <see cref="T:System.IO.BinaryReader" /> 類別的新執行個體。</summary>
      <param name="input">輸入資料流。</param>
      <exception cref="T:System.ArgumentException">資料流不支援讀取，為 <see langword="null" />，或已經關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>根據指定的資料流和字元編碼，初始化 <see cref="T:System.IO.BinaryReader" /> 類別的新執行個體。</summary>
      <param name="input">輸入資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <exception cref="T:System.ArgumentException">資料流不支援讀取，為 <see langword="null" />，或已經關閉。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>根據指定的資料流和特定的字元編碼，初始化 <see cref="T:System.IO.BinaryReader" /> 類別的新執行個體，並選擇性地保留資料流開啟狀態。</summary>
      <param name="input">輸入資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="leaveOpen">
        <see langword="true" /> 表示在處置 <see cref="T:System.IO.BinaryReader" /> 物件之後，將資料流保持開啟；否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">資料流不支援讀取，為 <see langword="null" />，或已經關閉。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> 或 <paramref name="input" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.IO.BinaryReader.BaseStream">
      <summary>公開 <see cref="T:System.IO.BinaryReader" /> 之基礎資料流的存取。</summary>
      <returns>與 <see langword="BinaryReader" /> 相關聯的基礎資料流。</returns>
    </member>
    <member name="M:System.IO.BinaryReader.Close">
      <summary>關閉目前的讀取器和基礎資料流。</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose">
      <summary>釋放 <see cref="T:System.IO.BinaryReader" /> 類別目前的執行個體所使用的全部資源。</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.BinaryReader" /> 類別所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
      <summary>將從資料流讀取的指定位元組數目填入內部緩衝區。</summary>
      <param name="numBytes">要讀取的位元組數。</param>
      <exception cref="T:System.IO.EndOfStreamException">在 <paramref name="numBytes" /> 可讀取之前到達資料流末端。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">所要求的 <paramref name="numBytes" /> 大於內部緩衝區大小。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.PeekChar">
      <summary>傳回下一個可用字元，而不前移位元組或字元的位置。</summary>
      <returns>下一個可用的字元；如果沒有更多字元可供使用或資料流不支援搜尋，則為 -1。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ArgumentException">無法使用針對資料流選取的 <see cref="T:System.Text.Encoding" /> 將目前的字元解碼到內部字元緩衝區。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read">
      <summary>按照所使用的 <see langword="Encoding" /> 和從資料流讀取的特定字元，自基礎資料流讀取字元，並將資料流中目前的位置往前移。</summary>
      <returns>輸入資料流的下一個字元；如果目前沒有字元可供使用，則為 -1。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>由位元組陣列中指定點開始，讀取資料流中的指定位元組數。</summary>
      <param name="buffer">要讀取資料的緩衝區。</param>
      <param name="index">開始讀取資料到緩衝區的緩衝區起始點。</param>
      <param name="count">要讀取的位元組數。</param>
      <returns>要讀入 <paramref name="buffer" /> 的位元組數。 如果沒有足夠的位元組數，這可能會小於要求的位元組數；如果已到達資料流末端，則可能為零。</returns>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。
-或-
欲讀取的解碼字元數大於 <paramref name="count" />。 如果 Unicode 解碼器傳回後援字元或 Surrogate 組，就會發生這個情況。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>由字元陣列中的指定點開始，從資料流讀取指定字元數。</summary>
      <param name="buffer">要讀取資料的緩衝區。</param>
      <param name="index">開始讀取資料到緩衝區的緩衝區起始點。</param>
      <param name="count">要讀取的字元數。</param>
      <returns>讀入緩衝區的字元總數。 如果目前沒有足夠的位元組數，這可能會小於要求的位元組數；如果已到達資料流末端，則可能為零。</returns>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。
-或-
欲讀取的解碼字元數大於 <paramref name="count" />。 如果 Unicode 解碼器傳回後援字元或 Surrogate 組，就會發生這個情況。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Span{System.Byte})">
      <summary>從目前的資料流讀取位元組序列，並依讀取的位元組數將資料流中的位置往前移。</summary>
      <param name="buffer">記憶體區域。 當這個方法傳回時，讀取自目前來源的位元組會取代此區域內容。</param>
      <returns>緩衝區所讀取的總位元組數。 如果目前無法取得足夠的位元組，則這個數目可能小於緩衝區所配置的位元組數，如果已經到達資料流末端，則為零 (0)。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Span{System.Char})">
      <summary>從目前資料流讀取與所提供緩衝區長度相同的字元數目、將它們寫入所提供緩衝區，並根據所使用 <see langword="Encoding" /> 和從資料流讀取的特定字元，將目前位置前移。</summary>
      <param name="buffer">一段字元。 當此方法傳回時，讀取自目前來源的字元會取代此區域內容。</param>
      <returns>讀入緩衝區的字元總數。 如果目前沒有足夠的位元組數，這可能會小於要求的位元組數；如果已到達資料流末端，則可能為零。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read7BitEncodedInt">
      <summary>以壓縮格式讀取 32 位元整數。</summary>
      <returns>壓縮格式的 32 位元整數。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.FormatException">資料流已損毀。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBoolean">
      <summary>自目前資料流讀取 <see langword="Boolean" /> 值，並將資料流中目前的位置往前移一個位元組。</summary>
      <returns>如果位元組為非零值 (Nonzero)，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadByte">
      <summary>自目前資料流讀取下一個位元組，並將資料流中目前的位置往前移一個位元組。</summary>
      <returns>自目前資料流讀取的下一個位元組。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
      <summary>將目前資料流中的指定位元組數讀入位元組陣列中，並將目前的位置前移該位元組數。</summary>
      <param name="count">要讀取的位元組數。 這個值必須是 0 或非負數，否則會發生例外狀況。</param>
      <returns>位元組陣列，含有自基礎資料流讀取的資料。 如果已到達資料流末端，這可能會小於要求的位元組數。</returns>
      <exception cref="T:System.ArgumentException">欲讀取的解碼字元數大於 <paramref name="count" />。 如果 Unicode 解碼器傳回後援字元或 Surrogate 組，就會發生這個情況。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 為負。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChar">
      <summary>按照所使用的 <see langword="Encoding" /> 和從資料流讀取的特定字元，自目前資料流讀取下一個字元，並將資料流中目前的位置往前移。</summary>
      <returns>自目前資料流讀取的字元。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ArgumentException">讀取到 Surrogate 字元</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChars(System.Int32)">
      <summary>讀取目前資料流中的指定字元數，並將資料傳入字元陣列中，然後依據使用的 <see langword="Encoding" /> 以及正在從資料流中讀取的指定字元，前移目前的位置。</summary>
      <param name="count">要讀取的字元數。</param>
      <returns>字元陣列，含有從基礎資料流讀取的資料。 如果已到達資料流末端，這可能會小於要求的字元數。</returns>
      <exception cref="T:System.ArgumentException">欲讀取的解碼字元數大於 <paramref name="count" />。 如果 Unicode 解碼器傳回後援字元或 Surrogate 組，就會發生這個情況。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 為負。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDecimal">
      <summary>自目前資料流讀取十進位值，並將資料流的目前位置前移十六個位元組。</summary>
      <returns>自目前資料流讀取的十進位值。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDouble">
      <summary>自目前資料流讀取 8 位元組浮點數值，並將資料流目前位置前移八個位元組。</summary>
      <returns>自目前資料流讀取的 8 位元組浮點數值。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt16">
      <summary>自目前資料流讀取 2 位元組帶正負號的整數，並將資料流目前位置前移兩個位元組。</summary>
      <returns>自目前資料流讀取的 2 位元組帶正負號的整數。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt32">
      <summary>自目前資料流讀取 4 位元組帶正負號的整數，並將資料流目前位置前移四個位元組。</summary>
      <returns>自目前資料流讀取的 4 位元組帶正負號的整數。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt64">
      <summary>自目前資料流讀取 8 位元組帶正負號的整數，並將資料流目前位置前移八個位元組。</summary>
      <returns>自目前資料流讀取的 8 位元組帶正負號的整數。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSByte">
      <summary>自資料流讀取帶正負號的位元組，並將資料流目前位置前移一個位元組。</summary>
      <returns>自資料流讀取的帶正負號的位元組。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSingle">
      <summary>自目前資料流讀取 4 位元組浮點數值，並將資料流目前位置前移四個位元組。</summary>
      <returns>自目前資料流讀取的 4 位元組浮點數值。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadString">
      <summary>自目前資料流讀取字串。 字串會以長度為前置字元，每次以七位元編碼為一整數。</summary>
      <returns>讀取的字串。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt16">
      <summary>以位元組由小到大的編碼方式自目前資料流讀取 2 位元組不帶正負號的整數，並將資料流目前位置前移兩個位元組。</summary>
      <returns>自這個資料流讀取 2 位元組不帶正負號的整數。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt32">
      <summary>自目前資料流讀取 4 位元組不帶正負號的整數，並將資料流目前位置前移四個位元組。</summary>
      <returns>自這個資料流讀取 4 位元組不帶正負號的整數。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt64">
      <summary>自目前資料流讀取 8 位元組不帶正負號的整數，並將資料流目前位置前移八個位元組。</summary>
      <returns>自這個資料流讀取 8 位元組不帶正負號的整數。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="T:System.IO.BinaryWriter">
      <summary>以二進位方式將基本型別 (Primitive Type) 寫入資料流，並支援以特定編碼方式寫入字串。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor">
      <summary>初始化 <see cref="T:System.IO.BinaryWriter" /> 類別的新執行個體，其將寫入資料流。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
      <summary>根據指定的資料流並使用 UTF-8 編碼方式，初始化 <see cref="T:System.IO.BinaryWriter" /> 類別的新執行個體。</summary>
      <param name="output">輸出資料流。</param>
      <exception cref="T:System.ArgumentException">資料流不支援寫入，或已經關閉。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>根據指定的資料流和字元編碼，初始化 <see cref="T:System.IO.BinaryWriter" /> 類別的新執行個體。</summary>
      <param name="output">輸出資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <exception cref="T:System.ArgumentException">資料流不支援寫入，或已經關閉。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 或 <paramref name="encoding" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>根據指定的資料流和特定的字元編碼，初始化 <see cref="T:System.IO.BinaryWriter" /> 類別的新執行個體，並選擇性地保留資料流開啟狀態。</summary>
      <param name="output">輸出資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="leaveOpen">
        <see langword="true" /> 表示在處置 <see cref="T:System.IO.BinaryWriter" /> 物件之後，將資料流保持開啟；否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">資料流不支援寫入，或已經關閉。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 或 <paramref name="encoding" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.IO.BinaryWriter.BaseStream">
      <summary>取得 <see cref="T:System.IO.BinaryWriter" /> 的基礎資料流。</summary>
      <returns>與 <see langword="BinaryWriter" /> 相關聯的基礎資料流。</returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Close">
      <summary>關閉目前 <see cref="T:System.IO.BinaryWriter" /> 和基礎資料流。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose">
      <summary>釋放 <see cref="T:System.IO.BinaryWriter" /> 類別目前的執行個體所使用的全部資源。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.BinaryWriter" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.IO.BinaryWriter.DisposeAsync">
      <summary>以非同步方式將 <see cref="T:System.IO.BinaryWriter" /> 類別的目前執行個體所使用所有資源釋出。</summary>
      <returns>代表非同步處署作業的工作。</returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Flush">
      <summary>清除目前寫入器的所有緩衝區，並造成任何緩衝資料都寫入基礎裝置。</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.Null">
      <summary>指定沒有備份存放區的 <see cref="T:System.IO.BinaryWriter" />。</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.OutStream">
      <summary>容納基礎資料流。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
      <summary>設定目前資料流位置。</summary>
      <param name="offset">相對於 <paramref name="origin" /> 的位元組位移。</param>
      <param name="origin">
        <see cref="T:System.IO.SeekOrigin" /> 的欄位，表示要取得新位置的參考點。</param>
      <returns>目前資料流的位置。</returns>
      <exception cref="T:System.IO.IOException">檔案指標已移至無效的位置。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.IO.SeekOrigin" /> 值是無效的。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Boolean)">
      <summary>寫入一位元組的 <see langword="Boolean" /> 值至目前資料流，其中 0 表示 <see langword="false" />，1 表示 <see langword="true" />。</summary>
      <param name="value">要寫入的 <see langword="Boolean" /> 值 (0 或 1)。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte)">
      <summary>將不帶正負號 (Unsigned) 位元組寫入目前資料流，並將資料流位置前移一個位元組。</summary>
      <param name="value">要寫入的不帶正負號位元組。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[])">
      <summary>將位元組陣列寫入基礎資料流。</summary>
      <param name="buffer">含有要寫入之資料的位元組陣列。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>將一個區域的位元組陣列寫入目前資料流。</summary>
      <param name="buffer">含有要寫入之資料的位元組陣列。</param>
      <param name="index">要從 <paramref name="buffer" /> 讀取並寫入到資料流之第一個位元組的索引。</param>
      <param name="count">要從 <paramref name="buffer" /> 讀取並寫入到資料流的位元組數目。</param>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char)">
      <summary>將 Unicode 字元寫入至目前資料流，並按照所使用的 <see langword="Encoding" /> 和寫入資料流的特定字元，將資料流中目前的位置往前移。</summary>
      <param name="ch">非 Surrogate，要寫入的 Unicode 字元。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ch" /> 是單一 Surrogate 字元。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[])">
      <summary>將字元陣列寫入至目前資料流，並按照所使用的 <see langword="Encoding" /> 和寫入資料流的特定字元，將資料流中目前的位置往前移。</summary>
      <param name="chars">含有要寫入之資料的字元陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>將字元陣列中的一區段寫入至目前的資料流，並按照所使用的 <see langword="Encoding" /> 和可能為寫入資料流的特定字元，將資料流中目前的位置往前移。</summary>
      <param name="chars">含有要寫入之資料的字元陣列。</param>
      <param name="index">要從 <paramref name="chars" /> 讀取並寫入到資料流之第一個字元的索引。</param>
      <param name="count">要從 <paramref name="chars" /> 讀取並寫入到資料流的字元數。</param>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Decimal)">
      <summary>將十進位值寫入目前的資料流，並將資料流位置往前移十六個位元組。</summary>
      <param name="value">要寫入的十進位值。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Double)">
      <summary>將八位元組浮點數值寫入目前資料流，並將資料流目前位置前移八個位元組。</summary>
      <param name="value">要寫入的八位元組浮點數值。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int16)">
      <summary>將二位元組帶正負號的整數 (Signed Integer) 寫入目前資料流，並將資料流目前位置前移兩個位元組。</summary>
      <param name="value">要寫入的二位元組帶正負號的整數值。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int32)">
      <summary>將四位元組帶正負號的整數寫入目前資料流，並將資料流目前位置前移四個位元組。</summary>
      <param name="value">要寫入的四位元組帶正負號的整數。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int64)">
      <summary>將八位元組帶正負號的整數寫入目前資料流，並將資料流目前位置前移八個位元組。</summary>
      <param name="value">要寫入的八位元組帶正負號的整數。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.ReadOnlySpan{System.Byte})">
      <summary>將位元組範圍寫入目前的資料流。</summary>
      <param name="buffer">要寫入的位元組範圍。</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>將字元範圍寫入目前的資料流，並按照所使用的 <see langword="Encoding" /> 和可能為寫入資料流的特定字元，將資料流中目前的位置往前移。</summary>
      <param name="chars">要寫入的字元範圍。</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.SByte)">
      <summary>將帶正負號 (Signed) 位元組寫入目前資料流，並將資料流位置前移一個位元組。</summary>
      <param name="value">要寫入的帶正負號位元組。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Single)">
      <summary>將四位元組浮點數 (Floating-Point) 值寫入目前資料流，並將資料流目前位置前移四個位元組。</summary>
      <param name="value">要寫入的四位元組浮點數值。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.String)">
      <summary>將有長度前置字元的字串以目前 <see cref="T:System.IO.BinaryWriter" /> 的編碼方式寫入此資料流，並按照所使用的編碼方式和寫入資料流的特定字元，將資料流中目前的位置往前移。</summary>
      <param name="value">要寫入的值。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt16)">
      <summary>將二位元組不帶正負號的整數寫入目前資料流，並將資料流目前位置前移兩個位元組。</summary>
      <param name="value">要寫入的二位元組不帶正負號的整數。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt32)">
      <summary>將四位元組不帶正負號的整數寫入目前資料流，並將資料流目前位置前移四個位元組。</summary>
      <param name="value">要寫入的四位元組不帶正負號的整數。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt64)">
      <summary>將八位元組不帶正負號的整數值寫入目前資料流，並將資料流目前位置前移八個位元組。</summary>
      <param name="value">要寫入的八位元組不帶正負號的整數值。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
      <summary>以壓縮格式寫入 32 位元整數。</summary>
      <param name="value">要寫入的 32 位元整數。</param>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">資料流已關閉。</exception>
    </member>
    <member name="T:System.IO.BufferedStream">
      <summary>新增另一個資料流上讀取和寫入作業的緩衝層。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
      <summary>使用 4096 位元組的預設緩衝區大小，來初始化 <see cref="T:System.IO.BufferedStream" /> 類別的新執行個體。</summary>
      <param name="stream">目前的資料流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
      <summary>使用指定的緩衝區大小來初始化 <see cref="T:System.IO.BufferedStream" /> 類別的新執行個體。</summary>
      <param name="stream">目前的資料流。</param>
      <param name="bufferSize">緩衝區大小，以位元組為單位。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 為負。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>開始非同步的讀取作業。 (請考慮用 <see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> 替代。)</summary>
      <param name="buffer">讀取資料的緩衝區。</param>
      <param name="offset">開始寫入自資料流讀取資料的 <paramref name="buffer" /> 位元組位移。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <param name="callback">選擇性的非同步回呼，在讀取完成時呼叫。</param>
      <param name="state">使用者所提供的物件，其可以從其他要求中區分出這個特定非同步讀取的要求。</param>
      <returns>物件，表示可能還在暫止中的非同步讀取。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.IO.IOException">嘗試在超過資料流結尾處進行非同步讀取。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="offset" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.NotSupportedException">目前的資料流不支援讀取作業。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>開始非同步的寫入作業。 (請考慮用 <see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> 替代。)</summary>
      <param name="buffer">包含要寫入目前資料流之資料的緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零起始的位元組位移，即開始將位元組複製到目前資料流的位置。</param>
      <param name="count">寫入的最大位元組數。</param>
      <param name="callback">在非同步寫入作業完成時所呼叫的方法。</param>
      <param name="state">使用者所提供的物件，其可以從其他要求中區分出這個特定非同步寫入的要求。</param>
      <returns>物件，這個物件會參考可能還在暫止中的非同步寫入。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 長度減去 <paramref name="offset" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
    </member>
    <member name="P:System.IO.BufferedStream.BufferSize">
      <summary>取得這個緩衝資料流的緩衝區大小 (以位元組為單位)。</summary>
      <returns>表示緩衝區大小（以位元組為單位）的整數。</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanRead">
      <summary>取得表示目前資料流是否支援讀取的值。</summary>
      <returns>如果資料流支援讀取，則為 <see langword="true" />；如果資料流已關閉或以唯寫存取開啟，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanSeek">
      <summary>取得表示目前資料流是否支援搜尋的值。</summary>
      <returns>如果資料流支援搜尋則為 <see langword="true" />；如果資料流關閉或如果資料流從作業系統控制代碼 (例如管道或主控台的輸出) 建構，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanWrite">
      <summary>取得表示目前資料流是否支援寫入的值。</summary>
      <returns>如果資料流支援寫入，則為 <see langword="true" />；如果資料流已關閉或以唯讀存取開啟，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.CopyTo(System.IO.Stream,System.Int32)">
      <summary>從目前緩衝資料流讀取位元組，並將其寫入至另一個資料流。</summary>
      <param name="destination">要將目前緩衝資料流的內容複製到其中的資料流。</param>
      <param name="bufferSize">緩衝區的大小。 這個值必須大於零。 預設大小為 81920。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 為負值或零。</exception>
      <exception cref="T:System.NotSupportedException">目前的資料流不支援讀取。
-或-
<paramref name="destination" /> 不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">目前資料流或 <paramref name="destination" /> 已經在呼叫 <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> 方法之前關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>使用指定的緩衝區大小和取消語彙基元，以非同步方式從目前緩衝資料流讀取位元組，並將其寫入至另一個資料流。</summary>
      <param name="destination">要將目前緩衝資料流內容複製到其中的資料流。</param>
      <param name="bufferSize">緩衝區的大小 (以位元組為單位)。 這個值必須大於零。 預設大小為 81920。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步複製作業的工作。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.DisposeAsync">
      <summary>以非同步方式釋放緩衝資料流所使用的非受控資源。</summary>
      <returns>代表非同步處署作業的工作。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
      <summary>等候暫止的非同步讀取作業完成。 (請考慮用 <see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> 替代。)</summary>
      <param name="asyncResult">要等候的暫止非同步要求的參考。</param>
      <returns>從資料流讀取的位元組數，位於 0 (零) 和您所要求的位元組數之間。 僅在資料流末端，資料流只傳回 0，否則，他們應該停止直到至少有 1 位元組可用。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">這個 <see cref="T:System.IAsyncResult" /> 物件不是透過對這個類別呼叫 <see cref="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 所建立。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
      <summary>結束非同步寫入作業並封鎖，直到 I/O 作業完成。 (請考慮用 <see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> 替代。)</summary>
      <param name="asyncResult">暫止的非同步要求。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">這個 <see cref="T:System.IAsyncResult" /> 物件不是透過對這個類別呼叫 <see cref="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 所建立。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Flush">
      <summary>清除這個資料流的所有緩衝區，並造成任何緩衝資料都寫入基礎裝置。</summary>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
      <exception cref="T:System.IO.IOException">資料來源或儲存機制未開啟</exception>
    </member>
    <member name="M:System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>以非同步的方式清除這個資料流的所有緩衝區，造成所有緩衝資料都寫入基礎裝置，並且監視取消要求。</summary>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。</param>
      <returns>表示非同步排清作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
    </member>
    <member name="P:System.IO.BufferedStream.Length">
      <summary>取得資料流的長度，以位元組為單位。</summary>
      <returns>資料流的長度，以位元組為單位。</returns>
      <exception cref="T:System.IO.IOException">基礎資料流為 <see langword="null" /> 或關閉。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援搜尋。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
    </member>
    <member name="P:System.IO.BufferedStream.Position">
      <summary>取得目前資料流中的位置。</summary>
      <returns>目前資料流中的位置。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞至 <see cref="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)" /> 的值為負數。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如資料流已經關閉。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援搜尋。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>從目前的緩衝資料流複製位元組到陣列。</summary>
      <param name="array">位元組所要複製到的目的緩衝區。</param>
      <param name="offset">緩衝區中的位元組位移 (Offset)，要開始讀取位元組處。</param>
      <param name="count">要讀取的位元組數。</param>
      <returns>讀到 <paramref name="array" /> 中的位元組總數。 如果目前無法提供那麼多的位元組數目，則這個數目可能小於所要求的位元組數；如果在可以讀取任何資料之前已經到達資料流結尾，則為 0。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 長度減 <paramref name="offset" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.IO.IOException">資料流未開啟或為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Read(System.Span{System.Byte})">
      <summary>將目前緩衝資料流中的位元組複製到位元組範圍，並依讀取的位元組數將緩衝資料流中位置往前移。</summary>
      <param name="destination">記憶體區域。 當這個方法傳回時，讀取自目前來源的位元組會取代此區域內容。</param>
      <returns>緩衝區所讀取的總位元組數。 如果目前無法取得足夠的位元組，則這個數目可能小於緩衝區所配置的位元組數，如果已經到達資料流末端，則為零 (0)。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>以非同步的方式從目前資料流讀取一連串的位元組、依所讀取的位元組數目進階資料流中的位置，以及監視取消要求。</summary>
      <param name="buffer">寫入資料的緩衝區。</param>
      <param name="offset">開始於此處自資料流寫入資料的 <paramref name="buffer" /> 中的位元組位移。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。</param>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值會包含讀取至緩衝區的位元組總數。 如果目前可供使用的位元組數目少於所要求的數目，結果值可能會小於所要求的位元組數目，或者如果已經到達資料流末端，則可能為 0 (零)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的讀取作業目前正在使用資料流。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>以非同步方式從目前的緩衝資料流讀取位元組序列，並依讀取的位元組數將緩衝資料流中位置往前移。</summary>
      <param name="buffer">要寫入資料的記憶體區域。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步讀取作業的工作。 其 <see cref="P:System.Threading.Tasks.ValueTask`1.Result" /> 屬性值包含讀入緩衝區的位元組總數。 如果目前無法取得足夠的位元組，則結果值可能小於緩衝區所配置的位元組數，如果已經到達資料流末端，則為 0 (零)。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.ReadByte">
      <summary>從基礎資料流讀取位元組並傳回轉型為 <see langword="int" /> 的位元組；如果從資料流末端讀取，則傳回 -1。</summary>
      <returns>轉換為 <see langword="int" /> 的位元組；如果從資料流末端讀取，則為 -1。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如資料流已經關閉。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>設定目前緩衝資料流中的位置。</summary>
      <param name="offset">相對於 <paramref name="origin" /> 的位元組位移。</param>
      <param name="origin">
        <see cref="T:System.IO.SeekOrigin" /> 型別的值，表示用以取得新位置的參考點。</param>
      <returns>目前緩衝資料流中的新位置。</returns>
      <exception cref="T:System.IO.IOException">資料流未開啟或為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援搜尋。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.SetLength(System.Int64)">
      <summary>設定緩衝資料流的長度。</summary>
      <param name="value">整數，表示目前緩衝資料流所需的長度，以位元組為單位。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 為負。</exception>
      <exception cref="T:System.IO.IOException">資料流未開啟或為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入和搜尋。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
    </member>
    <member name="P:System.IO.BufferedStream.UnderlyingStream">
      <summary>取得這個緩衝資料流的基礎 <see cref="T:System.IO.Stream" /> 執行個體。</summary>
      <returns>基礎資料流程實例。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>複製位元組至緩衝資料流，並依寫入的位元組數目將緩衝區資料流向前移到目前位置。</summary>
      <param name="array">用於複製 <paramref name="count" /> 位元組至目前緩衝資料流的位元組陣列。</param>
      <param name="offset">緩衝區中的位移，位元組會在該位移處開始複製到目前的緩衝資料流。</param>
      <param name="count">寫入目前緩衝資料流的位元組數目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 長度減 <paramref name="offset" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.IO.IOException">資料流已關閉或為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>將位元組序列寫入至目前的緩衝資料流，並依寫入的位元組數將此緩衝資料流中目前位置往前移。</summary>
      <param name="buffer">記憶體區域。 這個方法會將此區域內容複製到目前的緩衝資料流。</param>
    </member>
    <member name="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>以非同步的方式將一連串的位元組寫入目前的資料流，由這個資料流中目前的位置前移寫入的位元組數目，並且監視取消要求。</summary>
      <param name="buffer">寫入資料的來源緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零起始的位元組位移，要從其中開始將位元組複製至資料流。</param>
      <param name="count">寫入的最大位元組數。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的寫入作業目前正在使用資料流。</exception>
    </member>
    <member name="M:System.IO.BufferedStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>以非同步方式將位元組序列寫入至目前的緩衝資料流、依寫入的位元組數將此緩衝資料流中目前位置往前移，並監視取消要求。</summary>
      <param name="buffer">資料寫入來源的記憶體區域。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.IO.BufferedStream.WriteByte(System.Byte)">
      <summary>將位元組寫入緩衝資料流中的目前位置。</summary>
      <param name="value">要寫入資料流的位元組。</param>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
    </member>
    <member name="T:System.IO.EndOfStreamException">
      <summary>嘗試超過資料流末端進行讀取時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor">
      <summary>將其訊息字串設定為系統提供的訊息且將其 HRESULT 設定為 COR_E_ENDOFSTREAM，初始化 <see cref="T:System.IO.EndOfStreamException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化 (Serialization) 和內容資訊，初始化 <see cref="T:System.IO.EndOfStreamException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String)">
      <summary>使用其訊息字串設定為 <paramref name="message" /> 和其 HRESULT 設定為 COR_E_ENDOFSTREAM，初始化 <see cref="T:System.IO.EndOfStreamException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的字串。 <paramref name="message" /> 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.IO.EndOfStreamException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的字串。 <paramref name="message" /> 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>資料流在格式無效時擲回的例外狀況。</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>初始化 <see cref="T:System.IO.InvalidDataException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.IO.InvalidDataException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>使用造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.IO.InvalidDataException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.IO.MemoryStream">
      <summary>建立支援的存放區為記憶體的資料流。</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor">
      <summary>使用初始化為零的可擴展容量，初始化 <see cref="T:System.IO.MemoryStream" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[])">
      <summary>根據指定的位元組陣列，初始化 <see cref="T:System.IO.MemoryStream" /> 類別之不可調整大小的執行個體。</summary>
      <param name="buffer">用於建立目前資料流之不帶正負號位元組的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
      <summary>根據具有指定的 <see cref="P:System.IO.MemoryStream.CanWrite" /> 屬性設定之位元組陣列，來初始化 <see cref="T:System.IO.MemoryStream" /> 類別之新的不可調整大小的執行個體。</summary>
      <param name="buffer">用於建立這個資料流之不帶正負號位元組的陣列。</param>
      <param name="writable">
        <see cref="P:System.IO.MemoryStream.CanWrite" /> 屬性的設定值，判斷資料流是否支援寫入。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>根據位元組陣列的指定區域 (索引)，來初始化 <see cref="T:System.IO.MemoryStream" /> 類別之新的不可調整大小的執行個體。</summary>
      <param name="buffer">用於建立這個資料流之不帶正負號位元組的陣列。</param>
      <param name="index">
        <paramref name="buffer" /> 中資料流開始處的索引。</param>
      <param name="count">資料流的長度，以位元組為單位。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>根據位元組陣列的指定區域 (且該區域使用依指定所設定的 <see cref="T:System.IO.MemoryStream" /> 屬性)，來初始化 <see cref="P:System.IO.MemoryStream.CanWrite" /> 類別之新的不可調整大小的執行個體。</summary>
      <param name="buffer">用於建立這個資料流之不帶正負號位元組的陣列。</param>
      <param name="index">
        <paramref name="buffer" /> 中資料流開始處的索引。</param>
      <param name="count">資料流的長度，以位元組為單位。</param>
      <param name="writable">
        <see cref="P:System.IO.MemoryStream.CanWrite" /> 屬性的設定，決定資料流是否支援寫入。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>根據指定的位元組陣列區域 (且該區域使用依指定所設定的 <see cref="T:System.IO.MemoryStream" /> 屬性和依指定所設定的呼叫 <see cref="P:System.IO.MemoryStream.CanWrite" /> 的能力)，來初始化 <see cref="M:System.IO.MemoryStream.GetBuffer" /> 類別的新執行個體。</summary>
      <param name="buffer">用於建立這個資料流之不帶正負號位元組的陣列。</param>
      <param name="index">
        <paramref name="buffer" /> 中資料流開始處的索引。</param>
      <param name="count">資料流的長度，以位元組為單位。</param>
      <param name="writable">
        <see cref="P:System.IO.MemoryStream.CanWrite" /> 屬性的設定，決定資料流是否支援寫入。</param>
      <param name="publiclyVisible">啟用 <see cref="M:System.IO.MemoryStream.GetBuffer" /> (傳回從其中建立資料流的不帶正負號的位元組陣列)，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Int32)">
      <summary>使用初始化為指定的可擴展容量，初始化 <see cref="T:System.IO.MemoryStream" /> 類別的新執行個體。</summary>
      <param name="capacity">內部陣列的初始大小，以位元組為單位。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 為負。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>開始非同步的讀取作業。 (請考慮用 <see cref="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> 替代。)</summary>
      <param name="buffer">讀取資料的緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的位元組位移，從此處開始寫入讀取自記憶體資料流的資料。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <param name="callback">選擇性的非同步回呼，在讀取完成時呼叫。</param>
      <param name="state">使用者所提供的物件，其可以從其他要求中區分出這個特定非同步讀取的要求。</param>
      <returns>
        <see cref="T:System.IAsyncResult" />，代表可能還在擱置中的非同步讀取。</returns>
      <exception cref="T:System.IO.IOException">嘗試進行超出記憶體資料流結尾的非同步讀取，或發生磁碟錯誤。</exception>
      <exception cref="T:System.ArgumentException">一或多個引數無效。</exception>
      <exception cref="T:System.ObjectDisposedException">在關閉記憶體資料流後呼叫了方法。</exception>
      <exception cref="T:System.NotSupportedException">目前的記憶體資料流實作不支援讀取作業。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>開始非同步的寫入作業。 (請考慮用 <see cref="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> 替代。)</summary>
      <param name="buffer">寫入資料的來源緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中要開始寫入之處的位元組位移。</param>
      <param name="count">寫入的最大位元組數。</param>
      <param name="callback">選擇性的非同步回呼，在寫入完成時呼叫。</param>
      <param name="state">使用者所提供的物件，其可以從其他要求中區分出這個特定非同步寫入的要求。</param>
      <returns>
        <see langword="IAsyncResult" />，代表可能還在擱置中的非同步寫入。</returns>
      <exception cref="T:System.IO.IOException">嘗試進行超出記憶體資料流結尾的非同步寫入，或發生磁碟錯誤。</exception>
      <exception cref="T:System.ArgumentException">一或多個引數無效。</exception>
      <exception cref="T:System.ObjectDisposedException">在關閉記憶體資料流後呼叫了方法。</exception>
      <exception cref="T:System.NotSupportedException">目前的記憶體資料流實作不支援寫入作業。</exception>
    </member>
    <member name="P:System.IO.MemoryStream.CanRead">
      <summary>取得表示目前資料流是否支援讀取的值。</summary>
      <returns>
        <see langword="true" />，如果資料流已開啟。</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanSeek">
      <summary>取得表示目前資料流是否支援搜尋的值。</summary>
      <returns>
        <see langword="true" />，如果資料流已開啟。</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanWrite">
      <summary>取得表示目前資料流是否支援寫入的值。</summary>
      <returns>如果資料流支援寫入，則為 <see langword="true" />；否則，為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.MemoryStream.Capacity">
      <summary>取得或設定配置給這個資料流的位元組數目。</summary>
      <returns>資料流緩衝區可使用部分的長度。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">設定的容量為負數或小於資料流目前的長度。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的資料流已關閉。</exception>
      <exception cref="T:System.NotSupportedException">
        <see langword="set" /> 在無法修改其容量的資料流上被叫用 (Invoke)。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.CopyTo(System.IO.Stream,System.Int32)">
      <summary>使用指定的緩衝區大小，從目前記憶體資料流讀取位元組，並將其寫入至另一個資料流。</summary>
      <param name="destination">要將目前記憶體資料流內容複製到其中的資料流。</param>
      <param name="bufferSize">緩衝區的大小。 這個值必須大於零。 預設大小為 81920。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 不是正數。</exception>
      <exception cref="T:System.ObjectDisposedException">基礎記憶體資料流或 <paramref name="destination" /> 資料流已關閉。</exception>
      <exception cref="T:System.NotSupportedException">無法讀取基礎記憶體資料流。
-或-
無法寫入 <paramref name="destination" /> 資料流。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>使用指定的緩衝區大小和取消語彙基元，以非同步的方式從目前資料流讀取所有位元組，並將其寫入另一個資料流。</summary>
      <param name="destination">目前資料流的內容將複製到其中的資料流。</param>
      <param name="bufferSize">緩衝區的大小 (以位元組為單位)。 這個值必須大於零。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。</param>
      <returns>表示非同步複製作業的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> 為負值或零。</exception>
      <exception cref="T:System.ObjectDisposedException">目前資料流或目的資料流已處置。</exception>
      <exception cref="T:System.NotSupportedException">目前資料流不支援讀取，或目的資料流不支援寫入。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.MemoryStream" /> 類別所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.IO.MemoryStream.EndRead(System.IAsyncResult)">
      <summary>等候暫止的非同步讀取完成。 (請考慮用 <see cref="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> 替代。)</summary>
      <param name="asyncResult">要完成的擱置中非同步要求的參考。</param>
      <returns>從記憶體資料流讀取的位元組數，介於零 (0) 和所要求的位元組數之間。 只在記憶體資料流結尾傳回零 (0)；否則，應會封鎖直到至少有一個位元組可用為止。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">暫止讀取作業的控制代碼無法使用。
-或-
暫止的作業不支援讀取。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> 不是源自目前記憶體資料流上的 <see cref="M:System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.IO.IOException">資料流已關閉或發生內部錯誤。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.EndWrite(System.IAsyncResult)">
      <summary>結束非同步的寫入作業。 (請考慮用 <see cref="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> 替代。)</summary>
      <param name="asyncResult">未處理的非同步 I/O 要求的參考。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">暫止寫入作業的控制代碼無法使用。
-或-
暫止的作業不支援寫入。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> 不是來自目前資料流的 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.IO.IOException">資料流已關閉或發生內部錯誤。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Flush">
      <summary>覆寫 <see cref="M:System.IO.Stream.Flush" /> 方法，以便不執行任何動作。</summary>
    </member>
    <member name="M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>非同步清除這個資料流的所有緩衝區，並監視取消要求。</summary>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。</param>
      <returns>表示非同步排清作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.GetBuffer">
      <summary>傳回用於建立這個資料流之不帶正負號位元組的陣列。</summary>
      <returns>位元組陣列 (建立這個資料流的來源) 或基礎陣列 (如果沒有在目前執行個體的建構期間將位元組陣列提供給 <see cref="T:System.IO.MemoryStream" /> 建構函式)。</returns>
      <exception cref="T:System.UnauthorizedAccessException">
        <see langword="MemoryStream" /> 執行個體沒有使用公開可見的緩衝區來建立。</exception>
    </member>
    <member name="P:System.IO.MemoryStream.Length">
      <summary>取得資料流的長度，以位元組為單位。</summary>
      <returns>資料流的長度，以位元組為單位。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="P:System.IO.MemoryStream.Position">
      <summary>取得或設定資料流中目前的位置。</summary>
      <returns>在資料流的目前位置。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">位置設為負數值或大於 <see cref="F:System.Int32.MaxValue" /> 的值。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>從目前的資料流讀取位元組區塊，並且將資料寫入緩衝區。</summary>
      <param name="buffer">當這個方法傳回時，會包含指定的位元組陣列，這個陣列具有介於 <paramref name="offset" /> 到 (<paramref name="offset" /> + <paramref name="count" /> - 1) 之間的值，已由讀取自目前資料流的字元所取代。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零起始的位元組位移，用來開始儲存讀取自目前資料流的資料。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <returns>寫入至緩衝區的總位元組數。 如果目前無法提供那麼多的位元組數目，則這個數目可能小於所要求的位元組數目，或如果在讀取任何資料之前已經到達資料流末端，則為零。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">緩衝區的長度減去 <paramref name="offset" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的資料流執行個體已關閉。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Span{System.Byte})">
      <summary>從目前的記憶體資料流讀取位元組序列，並將記憶體資料流中的位置依讀取的位元組數向前移動。</summary>
      <param name="destination">記憶體區域。 當這個方法傳回時，讀取自目前記憶體資料流來源的位元組會取代此範圍的內容。</param>
      <returns>緩衝區所讀取的總位元組數。 如果目前無法取得該數目的位元組，則這個數目可能小於緩衝區中配置的位元組數，如果已經到達記憶體資料流結尾，則為零 (0)。</returns>
    </member>
    <member name="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>以非同步的方式從目前資料流讀取一連串的位元組、依所讀取的位元組數目進階資料流中的位置，以及監視取消要求。</summary>
      <param name="buffer">寫入資料的緩衝區。</param>
      <param name="offset">開始於此處自資料流寫入資料的 <paramref name="buffer" /> 中的位元組位移。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值會包含讀取至緩衝區的位元組總數。 如果目前可供使用的位元組數目少於所要求的數目，結果值可能會小於所要求的位元組數目，或者如果已經到達資料流末端，則可能為 0 (零)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的讀取作業目前正在使用資料流。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>以非同步方式從目前的記憶體資料流讀取位元組序列、將此序列寫入至 <paramref name="destination" />、將記憶體資料流中的位置依讀取的位元組數向前移動，並監視取消要求。</summary>
      <param name="destination">要寫入資料的記憶體區域。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步讀取作業的工作。 其 <see cref="P:System.Threading.Tasks.ValueTask`1.Result" /> 屬性值包含讀入至 <paramref name="destination" /> 的位元組總數。 如果目前無法取得該數目的位元組，則結果值可能小於 <paramref name="destination" /> 中配置的位元組數，如果已經到達記憶體資料流結尾，則為 0 (零)。</returns>
    </member>
    <member name="M:System.IO.MemoryStream.ReadByte">
      <summary>從目前的資料流讀取位元組。</summary>
      <returns>轉型為 <see cref="T:System.Int32" /> 的位元組；如果已經到達資料流的末端，則為 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的資料流執行個體已關閉。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>將目前資料流中的位置設定為指定的數值。</summary>
      <param name="offset">資料流中的新位置。 這是相對於 <paramref name="loc" /> 參數，並且可能是正數或負數。</param>
      <param name="loc">
        <see cref="T:System.IO.SeekOrigin" /> 型別的值，做為搜尋參考點。</param>
      <returns>資料流中的新位置，是組合初始的參考點和位移計算出來的。</returns>
      <exception cref="T:System.IO.IOException">在資料流開始之前嘗試搜尋。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">有無效的 <see cref="T:System.IO.SeekOrigin" />。
-或-
<paramref name="offset" /> 造成了算術溢位。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的資料流執行個體已關閉。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.SetLength(System.Int64)">
      <summary>將目前資料流的長度設定為指定的數值。</summary>
      <param name="value">要設定長度的數值。</param>
      <exception cref="T:System.NotSupportedException">目前的資料流不是可調整大小的，並且 <paramref name="value" /> 大於目前的容量。
-或-
目前的資料流不支援寫入。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 為負，或大於 <see cref="T:System.IO.MemoryStream" /> 的最大長度，最大長度是 (<see cref="F:System.Int32.MaxValue" /> - 原點)，原點是資料流開始的基礎緩衝區索引。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ToArray">
      <summary>不論 <see cref="P:System.IO.MemoryStream.Position" /> 屬性為何，將資料流內容寫入位元組陣列。</summary>
      <returns>新的位元組陣列。</returns>
    </member>
    <member name="M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)">
      <summary>傳回用於建立這個資料流之不帶正負號位元組的陣列。 指出轉換是否成功的傳回值。</summary>
      <param name="buffer">從其中建立此資料流的位元組陣列區段。</param>
      <returns>如果轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>使用讀取自緩衝區的資料，將位元組區塊寫入至目前的資料流。</summary>
      <param name="buffer">寫入資料的來源緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零起始的位元組位移，即開始將位元組複製到目前資料流的位置。</param>
      <param name="count">寫入的最大位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。 如需詳細資訊，請參閱 <see cref="P:System.IO.Stream.CanWrite" />。
-或-
和 <paramref name="count" /> 位元組相比，目前的位置更接近資料流末端，並且容量無法修改。</exception>
      <exception cref="T:System.ArgumentException">緩衝區的長度減去 <paramref name="offset" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的資料流執行個體已關閉。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>將 <paramref name="source" /> 中包含的位元組序列寫入目前的記憶體資料流，並將記憶體資料流中目前的位置依寫入的位元組數往前移。</summary>
      <param name="source">記憶體區域。 這個方法會將此區域的內容複製到目前的記憶體資料流。</param>
    </member>
    <member name="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>以非同步的方式將一連串的位元組寫入目前的資料流，由這個資料流中目前的位置前移寫入的位元組數目，並且監視取消要求。</summary>
      <param name="buffer">寫入資料的來源緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零起始的位元組位移，要從其中開始將位元組複製至資料流。</param>
      <param name="count">寫入的最大位元組數。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的寫入作業目前正在使用資料流。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>以非同步方式將 <paramref name="source" /> 中包含的位元組序列寫入至目前的記憶體資料流、將此記憶體資料流中目前的位置依寫入的位元組數向前移動，並監視取消要求。</summary>
      <param name="source">資料寫入來源的記憶體區域。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.IO.MemoryStream.WriteByte(System.Byte)">
      <summary>寫入位元組至資料流目前位置。</summary>
      <param name="value">要寫入的位元組。</param>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。 如需詳細資訊，請參閱 <see cref="P:System.IO.Stream.CanWrite" />。
-或-
目前的位置在資料流結尾，並且無法修改容量。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
      <summary>將這個記憶體資料流的整個內容寫入另一個資料流。</summary>
      <param name="stream">要寫入這個記憶體資料流的資料流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的資料流或目標資料流已經關閉。</exception>
    </member>
    <member name="T:System.IO.Path">
      <summary>在含有檔案或目錄路徑資訊的 <see cref="T:System.String" /> 執行個體上執行作業。 這些作業是以跨平台方式來執行的。</summary>
    </member>
    <member name="F:System.IO.Path.AltDirectorySeparatorChar">
      <summary>提供平台特定替代字元，用以在反映階層式檔案系統組織的路徑字串中來分隔目錄層級。</summary>
    </member>
    <member name="M:System.IO.Path.ChangeExtension(System.String,System.String)">
      <summary>變更路徑字串的副檔名。</summary>
      <param name="path">要修改的路徑資訊。 路徑不可以包含定義於 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 的任何一個字元。</param>
      <param name="extension">新的副檔名 (可能有前置句點)。 指定 <see langword="null" /> 以從 <paramref name="path" /> 移除現有副檔名。</param>
      <returns>已修改的路徑資訊。
在 Windows 架構桌面平台上，如果 <paramref name="path" /> 為 <see langword="null" /> 或空字串 ("")，則會傳回未修改的路徑資訊。 如果 <paramref name="extension" /> 為 <see langword="null" />，則傳回的字串會包含已移除其副檔名的指定路徑。 如果 <paramref name="path" /> 沒有副檔名，並且 <paramref name="extension" /> 不是 <see langword="null" />，則傳回的路徑字串會包含附加至 <paramref name="path" /> 結尾的 <paramref name="extension" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 含有在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定義的一或多個無效字元。</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String)">
      <summary>將兩個字串合併為一個路徑。</summary>
      <param name="path1">要合併的第一個路徑。</param>
      <param name="path2">要合併的第二個路徑。</param>
      <returns>合併的路徑。 如果指定的其中一個路徑是長度為零的字串，這個方法會傳回其他路徑。 如果 <paramref name="path2" /> 包含絕對路徑，這個方法會傳回 <paramref name="path2" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" /> 或 <paramref name="path2" /> 含有在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定義的一或多個不正確字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" /> 或 <paramref name="path2" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String)">
      <summary>將三個字串合併為一個路徑。</summary>
      <param name="path1">要合併的第一個路徑。</param>
      <param name="path2">要合併的第二個路徑。</param>
      <param name="path3">要合併的第三個路徑。</param>
      <returns>合併的路徑。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" />、<paramref name="path2" /> 或 <paramref name="path3" /> 包含一或多個在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定義的無效字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" />、<paramref name="path2" /> 或 <paramref name="path3" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)">
      <summary>將四個字串合併為一個路徑。</summary>
      <param name="path1">要合併的第一個路徑。</param>
      <param name="path2">要合併的第二個路徑。</param>
      <param name="path3">要合併的第三個路徑。</param>
      <param name="path4">要合併的第四個路徑。</param>
      <returns>合併的路徑。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" />、<paramref name="path2" />、<paramref name="path3" /> 或 <paramref name="path4" /> 包含一或多個在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定義的無效字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" />、<paramref name="path2" />、<paramref name="path3" /> 或 <paramref name="path4" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String[])">
      <summary>將一個字串陣列合併為單一路徑。</summary>
      <param name="paths">路徑中各部分的陣列。</param>
      <returns>合併的路徑。</returns>
      <exception cref="T:System.ArgumentException">陣列中的一個字串包含在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定義的一或多個無效字元。</exception>
      <exception cref="T:System.ArgumentNullException">陣列中的一個字串為 <see langword="null" />。</exception>
    </member>
    <member name="F:System.IO.Path.DirectorySeparatorChar">
      <summary>提供平台特定字元，用以在反映階層式檔案系統組織的路徑字串中分隔目錄層級。</summary>
    </member>
    <member name="M:System.IO.Path.EndsInDirectorySeparator(System.ReadOnlySpan{System.Char})">
      <summary>傳回的值指出路徑 (指定為唯讀範圍) 是否以目錄分隔符號結束。</summary>
      <param name="path">要分析的路徑。</param>
      <returns>如果路徑以目錄分隔符號結束，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.EndsInDirectorySeparator(System.String)">
      <summary>傳回的值指出所指定路徑是否以目錄分隔符號結束。</summary>
      <param name="path">要分析的路徑。</param>
      <returns>如果路徑以目錄分隔符號結束，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.ReadOnlySpan{System.Char})">
      <summary>傳回指定路徑字串的目錄資訊，此路徑以字元範圍表示。</summary>
      <param name="path">要從中擷取目錄資訊的路徑。</param>
      <returns>
        <paramref name="path" /> 的目錄資訊、或 <paramref name="path" /> 為 <see langword="null" /> 則為空的範圍、空的範圍，或根目錄 (例如 , C: 或 \server\share)。</returns>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.String)">
      <summary>傳回指定路徑字串的目錄資訊。</summary>
      <param name="path">檔案或目錄的路徑。</param>
      <returns>
        <paramref name="path" /> 的目錄資訊；如果 <paramref name="path" /> 表示根目錄或為 null，則為 <see langword="null" />。 如果 <paramref name="path" /> 不包含目錄資訊，則傳回 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 參數包含無效字元、空白，或只包含空格。</exception>
      <exception cref="T:System.IO.PathTooLongException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.IO.IOException" />。  
  

            
  
 <paramref name="path" /> 參數超過系統定義的長度上限。</exception>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.ReadOnlySpan{System.Char})">
      <summary>傳回檔案路徑的副檔名，此路徑以唯讀的字元範圍表示。</summary>
      <param name="path">可取得副檔名的檔案路徑。</param>
      <returns>指定路徑的副檔名 (包括句點 ".")，如果 <paramref name="path" /> 沒有副檔名資訊，則為 <see cref="P:System.ReadOnlySpan`1.Empty" />。</returns>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.String)">
      <summary>指定路徑字串的副檔名 (包括句點 ".")。</summary>
      <param name="path">要從中取得副檔名的路徑字串。</param>
      <returns>指定路徑的副檔名 (包括句點 ".")、<see langword="null" /> 或 <see cref="F:System.String.Empty" />。 如果 <paramref name="path" /> 是 <see langword="null" />，則 <see cref="M:System.IO.Path.GetExtension(System.String)" /> 會傳回 <see langword="null" />。 如果 <paramref name="path" /> 沒有副檔名資訊，則 <see cref="M:System.IO.Path.GetExtension(System.String)" /> 會傳回 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 含有在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定義的一或多個無效字元。</exception>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})">
      <summary>傳回檔案路徑的檔案名稱和副檔名，此路徑以唯讀的字元範圍表示。</summary>
      <param name="path">包含路徑的唯讀範圍，這是取得檔案名稱和副檔名的路徑。</param>
      <returns>
        <paramref name="path" /> 中最後目錄分隔符號字元之後的字元。</returns>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.String)">
      <summary>傳回指定路徑字串的檔案名稱和副檔名。</summary>
      <param name="path">要從中取得檔案名稱和副檔名的路徑字串。</param>
      <returns>
        <paramref name="path" /> 中最後目錄分隔符號字元之後的字元。 如果 <paramref name="path" /> 的最後一個字元是目錄或磁碟區分隔符號字元，這個方法會傳回 <see cref="F:System.String.Empty" />。 如果 <paramref name="path" /> 為 <see langword="null" />，這個方法會傳回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 含有在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定義的一或多個無效字元。</exception>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.ReadOnlySpan{System.Char})">
      <summary>傳回檔案路徑的檔案名稱和副檔名，此路徑以唯讀的字元範圍表示。</summary>
      <param name="path">包含路徑的唯讀範圍，可從該路徑取得沒有副檔名的檔案名稱。</param>
      <returns>
        <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" /> 傳回的唯讀範圍字元，不含最後的句號 (.) 以及其後所有字元。</returns>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.String)">
      <summary>傳回沒有副檔名的指定路徑字串的檔案名稱。</summary>
      <param name="path">檔案的路徑。</param>
      <returns>
        <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" /> 傳回的字串，但不包含最後的句號 (.) 以及其後的所有字元。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 含有在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定義的一或多個無效字元。</exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String)">
      <summary>傳回指定路徑字串的絕對路徑。</summary>
      <param name="path">要為其取得絕對路徑資訊的檔案或目錄。</param>
      <returns>
        <paramref name="path" /> 的完整位置，例如 "C:\MyFile.txt"。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定義的一或多個無效字元。
-或-
系統可能不會擷取絕對路徑。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 含有不屬於磁碟區識別碼 (例如 "c:\") 一部分的冒號 (":")。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String,System.String)">
      <summary>從完整的基底路徑和相對路徑傳回絕對路徑。</summary>
      <param name="path">串連成 <paramref name="basePath" /> 的相對路徑。</param>
      <param name="basePath">完整路徑的開頭。</param>
      <returns>絕對路徑。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="basePath" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="basePath" /> 不是完整路徑。
-或-
<paramref name="path" /> 或 <paramref name="basePath" /> 包含無效的路徑字元，例如 U+0000。</exception>
    </member>
    <member name="M:System.IO.Path.GetInvalidFileNameChars">
      <summary>取得陣列，該陣列包含檔案名稱中不允許的字元。</summary>
      <returns>陣列，該陣列包含檔案名稱中不允許的字元。</returns>
    </member>
    <member name="M:System.IO.Path.GetInvalidPathChars">
      <summary>取得陣列，該陣列包含路徑名稱中不允許的字元。</summary>
      <returns>陣列，該陣列包含路徑名稱中不允許的字元。</returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.ReadOnlySpan{System.Char})">
      <summary>從所指定字元範圍中包含的路徑取得根目錄資訊。</summary>
      <param name="path">字元的唯讀範圍，其包含從中取得根目錄資訊的路徑。</param>
      <returns>字元的唯讀範圍，其包含 <paramref name="path" /> 的根目錄。</returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.String)">
      <summary>從指定字串包含的路徑中取得根目錄資訊。</summary>
      <param name="path">字串，其包含從中取得根目錄資訊的路徑。</param>
      <returns>
        <paramref name="path" /> 的根目錄 (如果其為根目錄)。
-或-
如果 <paramref name="path" /> 不包含根目錄資訊，則為 <see cref="F:System.String.Empty" />。
-或-
如果 <paramref name="path" /> 為 <see langword="null" /> 或實際上是空的，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">僅限 .NET Framework：<paramref name="path" /> 包含一或多個 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定義的無效字元。
-或-
僅限 .NET Framework：已將 <see cref="F:System.String.Empty" /> 傳遞至 <paramref name="path" />。</exception>
    </member>
    <member name="M:System.IO.Path.GetRandomFileName">
      <summary>傳回隨機資料夾名稱或檔案名稱。</summary>
      <returns>隨機資料夾名稱或檔案名稱。</returns>
    </member>
    <member name="M:System.IO.Path.GetRelativePath(System.String,System.String)">
      <summary>傳回某個路徑到另一個路徑的相對路徑。</summary>
      <param name="relativeTo">應與結果相對的來源路徑。 此路徑一律視為目錄。</param>
      <param name="path">目的地路徑。</param>
      <returns>如果路徑不共用相同的根目錄，則為相對路徑或 <paramref name="path" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relativeTo" /> 或 <paramref name="path" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.Path.GetTempFileName">
      <summary>在磁碟上建立具名之零位元組的唯一暫存檔案，然後傳回該檔案的完整路徑。</summary>
      <returns>暫存檔案的完整路徑。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如沒有可用的唯一暫存檔案名稱。
-或-
這個方法無法建立暫存檔案。</exception>
    </member>
    <member name="M:System.IO.Path.GetTempPath">
      <summary>傳回目前使用者的暫存資料夾路徑。</summary>
      <returns>暫存資料夾的路徑，結尾是反斜線。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.ReadOnlySpan{System.Char})">
      <summary>判斷指定字元範圍所表示的路徑是否包含副檔名。</summary>
      <param name="path">要在其中搜尋副檔名的路徑。</param>
      <returns>如果路徑中接在最後一個目錄分隔符號字元或磁碟區分隔符號之後的字元包含句號 (".")，且後面接著一或多個字元，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.String)">
      <summary>判斷路徑是否包括副檔名。</summary>
      <param name="path">要在其中搜尋副檔名的路徑。</param>
      <returns>如果路徑中接在最後一個目錄分隔符號 (\\ 或 /) 或磁碟區分隔符號 (:) 之後的字元包含句號 (.)，且後面接著一或多個字元，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 含有在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定義的一或多個無效字元。</exception>
    </member>
    <member name="F:System.IO.Path.InvalidPathChars">
      <summary>提供字元的平台特定陣列，這些字元不可以在傳遞給 <see cref="T:System.IO.Path" /> 類別成員的路徑字串引數中指定。</summary>
    </member>
    <member name="M:System.IO.Path.IsPathFullyQualified(System.ReadOnlySpan{System.Char})">
      <summary>傳回值，指出指定字元範圍所表示的檔案路徑是否固定在特定的磁碟機或 UNC 路徑。</summary>
      <param name="path">檔案路徑。</param>
      <returns>如果路徑固定在特定的磁碟機或 UNC 路徑，則為 <see langword="true" />；如果路徑相對於目前的磁碟機或工作目錄，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.IsPathFullyQualified(System.String)">
      <summary>傳回值，指出指定的檔案路徑是否固定在特定磁碟機或 UNC 路徑。</summary>
      <param name="path">檔案路徑。</param>
      <returns>如果路徑固定在特定的磁碟機或 UNC 路徑，則為 <see langword="true" />；如果路徑相對於目前的磁碟機或工作目錄，則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.ReadOnlySpan{System.Char})">
      <summary>傳回值，指出所指定字元範圍所表示的檔案路徑是否包含根目錄。</summary>
      <param name="path">要測試的路徑。</param>
      <returns>如果 <paramref name="path" /> 包含根目錄，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.String)">
      <summary>傳回值，指出指定的路徑字串是否包含根目錄。</summary>
      <param name="path">要測試的路徑。</param>
      <returns>如果 <paramref name="path" /> 包含根目錄，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 含有在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定義的一或多個無效字元。</exception>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>將兩個路徑元件串連成單一路徑。</summary>
      <param name="path1">包含第一個聯結路徑的字元範圍。</param>
      <param name="path2">包含第二個聯結路徑的字元範圍。</param>
      <returns>合併的路徑。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>將三個路徑元件串連成單一路徑。</summary>
      <param name="path1">包含第一個聯結路徑的字元範圍。</param>
      <param name="path2">包含第二個聯結路徑的字元範圍。</param>
      <param name="path3">包含第三個聯結路徑的字元範圍。</param>
      <returns>串連的路徑。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>將四個路徑元件串連成單一路徑。</summary>
      <param name="path1">包含第一個聯結路徑的字元範圍。</param>
      <param name="path2">包含第二個聯結路徑的字元範圍。</param>
      <param name="path3">包含第三個聯結路徑的字元範圍。</param>
      <param name="path4">包含第四個聯結路徑的字元範圍。</param>
      <returns>串連的路徑。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String)">
      <summary>將兩個路徑串連成單一路徑。</summary>
      <param name="path1">第一個聯結路徑。</param>
      <param name="path2">第二個聯結路徑。</param>
      <returns>串連的路徑。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String,System.String)">
      <summary>將三個路徑串連成單一路徑。</summary>
      <param name="path1">第一個聯結路徑。</param>
      <param name="path2">第二個聯結路徑。</param>
      <param name="path3">第三個聯結路徑。</param>
      <returns>串連的路徑。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String,System.String,System.String)">
      <summary>將四個路徑串連成單一路徑。</summary>
      <param name="path1">第一個聯結路徑。</param>
      <param name="path2">第二個聯結路徑。</param>
      <param name="path3">第三個聯結路徑。</param>
      <param name="path4">第四個聯結路徑。</param>
      <returns>串連的路徑。</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String[])">
      <summary>將路徑陣列串連成單一路徑。</summary>
      <param name="paths">路徑陣列。</param>
      <returns>串連的路徑。</returns>
    </member>
    <member name="F:System.IO.Path.PathSeparator">
      <summary>平台特定分隔符號字元，用來分隔環境變數中的路徑字串。</summary>
    </member>
    <member name="M:System.IO.Path.TrimEndingDirectorySeparator(System.ReadOnlySpan{System.Char})">
      <summary>修剪指定路徑根以外的一個尾端目錄分隔符號。</summary>
      <param name="path">要修剪的路徑。</param>
      <returns>不含任何尾端目錄分隔符號的 <paramref name="path" />。</returns>
    </member>
    <member name="M:System.IO.Path.TrimEndingDirectorySeparator(System.String)">
      <summary>修剪指定路徑根以外的一個尾端目錄分隔符號。</summary>
      <param name="path">要修剪的路徑。</param>
      <returns>不含任何尾端目錄分隔符號的 <paramref name="path" />。</returns>
    </member>
    <member name="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
      <summary>嘗試將兩個路徑元件串連成單一預先配置的字元範圍，然後傳回值，指出作業是否成功。</summary>
      <param name="path1">包含第一個聯結路徑的字元範圍。</param>
      <param name="path2">包含第二個聯結路徑的字元範圍。</param>
      <param name="path3">包含第三個聯結路徑的字元範圍。</param>
      <param name="destination">保留串連路徑的字元範圍。</param>
      <param name="charsWritten">當方法傳回值時，該值會指出寫入 <paramref name="destination" /> 的字元數目。</param>
      <returns>如果串連作業成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
      <summary>嘗試將兩個路徑元件串連成單一預先配置的字元範圍，然後傳回值，指出作業是否成功。</summary>
      <param name="path1">包含第一個聯結路徑的字元範圍。</param>
      <param name="path2">包含第二個聯結路徑的字元範圍。</param>
      <param name="destination">保留串連路徑的字元範圍。</param>
      <param name="charsWritten">當方法傳回值時，該值會指出寫入 <paramref name="destination" /> 的字元數目。</param>
      <returns>如果串連作業成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.IO.Path.VolumeSeparatorChar">
      <summary>提供平台特定磁碟區分隔符號字元。</summary>
    </member>
    <member name="T:System.IO.StreamReader">
      <summary>實作以特定的編碼方式自位元組資料流讀取字元的 <see cref="T:System.IO.TextReader" />。</summary>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream)">
      <summary>為指定的資料流，初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="stream">要讀取的資料流。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支援讀取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>使用指定的位元組順序標記偵測選項，針對指定的資料流初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="stream">要讀取的資料流。</param>
      <param name="detectEncodingFromByteOrderMarks">表示是否在檔案開頭尋找位元組順序標記。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支援讀取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>使用指定的字元編碼，針對指定的資料流初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="stream">要讀取的資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支援讀取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>使用指定的字元編碼和位元組順序標記偵測選項，為指定的資料流初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="stream">要讀取的資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="detectEncodingFromByteOrderMarks">表示是否在檔案開頭尋找位元組順序標記。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支援讀取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>使用指定的字元編碼、位元組順序標記偵測選項和緩衝區大小，為指定的資料流初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="stream">要讀取的資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="detectEncodingFromByteOrderMarks">表示是否在檔案開頭尋找位元組順序標記。</param>
      <param name="bufferSize">最小緩衝區大小。</param>
      <exception cref="T:System.ArgumentException">資料流不支援讀取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 小於或等於零。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)">
      <summary>根據指定的字元編碼、位元順序標記偵測選項和緩衝區大小，為指定的資料流初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體，並選擇性讓資料流保持開啟。</summary>
      <param name="stream">要讀取的資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="detectEncodingFromByteOrderMarks">
        <see langword="true" /> 表示在檔案開頭尋找位元順序標記，否則為 <see langword="false" />。</param>
      <param name="bufferSize">最小緩衝區大小。</param>
      <param name="leaveOpen">
        <see langword="true" /> 表示在處置 <see cref="T:System.IO.StreamReader" /> 物件之後，將資料流保持開啟；否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String)">
      <summary>為指定的檔名初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="path">要讀取的完整檔案路徑。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位於未對應的磁碟機上。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含檔案名稱、目錄名稱或磁碟標籤的不正確或無效語法。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Boolean)">
      <summary>使用指定的位元組順序標記偵測選項，為指定的檔案名稱初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="path">要讀取的完整檔案路徑。</param>
      <param name="detectEncodingFromByteOrderMarks">表示是否在檔案開頭尋找位元組順序標記。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位於未對應的磁碟機上。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含檔案名稱、目錄名稱或磁碟標籤的不正確或無效語法。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding)">
      <summary>使用指定的字元編碼，針對指定的檔案名稱初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="path">要讀取的完整檔案路徑。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="encoding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位於未對應的磁碟機上。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 包含檔案名稱、目錄名稱或磁碟標籤的不正確或無效語法。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean)">
      <summary>使用指定的字元編碼和位元組順序標記偵測選項，為指定的檔案名稱初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="path">要讀取的完整檔案路徑。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="detectEncodingFromByteOrderMarks">表示是否在檔案開頭尋找位元組順序標記。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="encoding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位於未對應的磁碟機上。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 包含檔案名稱、目錄名稱或磁碟標籤的不正確或無效語法。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>使用指定的字元編碼、位元組順序標記偵測選項和緩衝區大小，為指定的檔案名稱初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="path">要讀取的完整檔案路徑。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="detectEncodingFromByteOrderMarks">表示是否在檔案開頭尋找位元組順序標記。</param>
      <param name="bufferSize">最小緩衝區大小，使用 16 位元字元的數字。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="encoding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位於未對應的磁碟機上。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 包含不正確或無效的檔案名稱、目錄名稱或磁碟區標籤語法。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> 小於或等於零。</exception>
    </member>
    <member name="P:System.IO.StreamReader.BaseStream">
      <summary>傳回基礎資料流。</summary>
      <returns>基礎資料流。</returns>
    </member>
    <member name="M:System.IO.StreamReader.Close">
      <summary>關閉 <see cref="T:System.IO.StreamReader" /> 物件和基礎資料流，並釋放任何與讀取器相關聯的系統資源。</summary>
    </member>
    <member name="P:System.IO.StreamReader.CurrentEncoding">
      <summary>取得目前 <see cref="T:System.IO.StreamReader" /> 物件使用的目前字元編碼。</summary>
      <returns>目前讀取器所使用的字元編碼。 在第一次呼叫 <see cref="T:System.IO.StreamReader" /> 的任何 <see cref="Overload:System.IO.StreamReader.Read" /> 方法之後其值可能不同，因為編碼方式的自動偵測要等到第一次呼叫 <see cref="Overload:System.IO.StreamReader.Read" /> 方法後才完成。</returns>
    </member>
    <member name="M:System.IO.StreamReader.DiscardBufferedData">
      <summary>清除內部緩衝區。</summary>
    </member>
    <member name="M:System.IO.StreamReader.Dispose(System.Boolean)">
      <summary>關閉基礎資料流，接著釋放 <see cref="T:System.IO.StreamReader" /> 所使用的 Unmanaged 資源，然後再選擇性釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.IO.StreamReader.EndOfStream">
      <summary>取得表示現行資料流位置是否在資料流結尾的值。</summary>
      <returns>如果現行資料流位置在資料流的結尾，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置基礎資料流。</exception>
    </member>
    <member name="F:System.IO.StreamReader.Null">
      <summary>空資料流周圍的 <see cref="T:System.IO.StreamReader" /> 物件。</summary>
    </member>
    <member name="M:System.IO.StreamReader.Peek">
      <summary>傳回下一個可供使用的字元，但不使用它。</summary>
      <returns>整數，表示要讀取的下一個字元，如果沒有要讀取的字元或資料流不支援搜尋，則為 -1。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read">
      <summary>自輸入資料流讀取下一個字元，並將字元位置前移一個字元。</summary>
      <returns>來自輸入資料流的下一個字元會以 <see cref="T:System.Int32" /> 物件來表示；如果不再有可以使用的字元，則以 -1 表示。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>從目前資料流讀取指定的字元數目上限，在指定的索引位置開始讀入緩衝區中。</summary>
      <param name="buffer">當這個方法傳回時，會包含指定的字元陣列，這個陣列具有介於 <paramref name="index" /> 到 (<c>index + count - 1</c>) 之間的值，已由讀取自目前來源的字元所取代。</param>
      <param name="index">要開始寫入的 <paramref name="buffer" /> 的索引。</param>
      <param name="count">要讀取的字元數上限。</param>
      <returns>已讀取字元數，或為 0 (如果處於資料流末端而無資料讀取)。 數目將小於或等於 <paramref name="count" /> 參數，取決於資料流裡是否有資料可供使用。</returns>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如資料流已經關閉。</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Span{System.Char})">
      <summary>將目前資料流中的字元讀入至範圍。</summary>
      <param name="buffer">當這個方法傳回時，會包含讀取自目前來源之字元所取代的指定字元範圍。</param>
      <returns>已讀取字元數，或為 0 (如果處於資料流末端而無資料讀取)。 取決於是否可在資料流中使用資料，數目會小於或等於 <paramref name="buffer" /> 的長度。</returns>
      <exception cref="T:System.IO.IOException">從資料流讀取的字元數大於 <paramref name="buffer" /> 長度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>從目前的資料流非同步讀取指定的取大字元數目，並從指定的索引開始將資料寫入緩衝區。</summary>
      <param name="buffer">當這個方法傳回時，會包含指定的字元陣列，這個陣列具有介於 <paramref name="index" /> 到 (<paramref name="index" /> + <paramref name="count" /> - 1) 之間的值，已由讀取自目前來源的字元所取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入的位置。</param>
      <param name="count">要讀取的字元數上限。 如果指定的字元數寫入緩衝區之前，便到達資料流末端，則目前的方法會傳回。</param>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值會包含讀入緩衝區的字元總數。 如果目前可供使用的字元數目少於所要求的數目，結果值可能會小於所要求的字元數目，或者如果已經到達資料流末端，則可能為 0 (零)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的讀取作業目前正在使用讀取器。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>以非同步方式將目前資料流中的字元讀入至記憶體區塊。</summary>
      <param name="buffer">當這個方法傳回時，會包含讀取自目前來源之字元所取代的指定字元記憶體區塊。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>代表非同步讀取作業的值工作。 值工作型別參數值包含已讀取的字元數；若處於資料流結尾且未讀取任何資料，則為 0。 取決於是否可在資料流中使用資料，數目會小於或等於 <paramref name="buffer" /> 的長度。</returns>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>從目前資料流讀取指定的最大字元數目，並從指定的索引開始將資料寫入緩衝區。</summary>
      <param name="buffer">當這個方法傳回時，會包含指定的字元陣列，這個陣列具有介於 <paramref name="index" /> 到 (<c>index + count - 1</c>) 之間的值，已由讀取自目前來源的字元所取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入的位置。</param>
      <param name="count">要讀取的字元數上限。</param>
      <returns>已經讀取的字元數目。 數目將小於或等於 <paramref name="count" />，取決於是否已經讀取所有輸入字元。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.StreamReader" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlock(System.Span{System.Char})">
      <summary>從目前的資料流讀取字元，並將資料寫入至緩衝區。</summary>
      <param name="buffer">當這個方法傳回時，會包含讀取自目前來源之字元所取代的指定字元範圍。</param>
      <returns>已經讀取的字元數目。 取決於是否已讀取所有輸入字元，數目會小於或等於 <paramref name="buffer" /> 的長度。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.StreamReader" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>從目前的資料流非同步讀取指定的取大字元數目，並從指定的索引開始將資料寫入緩衝區。</summary>
      <param name="buffer">當這個方法傳回時，會包含指定的字元陣列，這個陣列具有介於 <paramref name="index" /> 到 (<paramref name="index" /> + <paramref name="count" /> - 1) 之間的值，已由讀取自目前來源的字元所取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入的位置。</param>
      <param name="count">要讀取的字元數上限。 如果指定的字元數寫入緩衝區之前，便到達資料流末端，則方法會返回。</param>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值會包含讀入緩衝區的字元總數。 如果目前可供使用的字元數目少於所要求的數目，結果值可能會小於所要求的字元數目，或者如果已經到達資料流末端，則可能為 0 (零)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的讀取作業目前正在使用讀取器。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>以非同步方式從目前的資料流讀取字元，並將資料寫入至緩衝區。</summary>
      <param name="buffer">當這個方法傳回時，會包含讀取自目前來源之字元所取代的指定字元記憶體區塊。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>代表非同步讀取作業的值工作。 值工作的型別參數值包含已讀入至緩衝區的字元總數。 如果目前可供使用的字元數目少於所要求的數目，結果值可能會小於所要求的字元數目，或者如果已經到達資料流末端，則可能為 0 (零)。</returns>
    </member>
    <member name="M:System.IO.StreamReader.ReadLine">
      <summary>自目前資料流讀取一行字元，並將資料以字串傳回。</summary>
      <returns>輸入資料流的下一行，或為 <see langword="null" /> (如果已到達輸入資料流末端)。</returns>
      <exception cref="T:System.OutOfMemoryException">沒有足夠記憶體可為傳回的字串配置緩衝區。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadLineAsync">
      <summary>自目前資料流非同步讀取一行字元，並將資料以字串傳回。</summary>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值會包含資料流中的下一行，或者是 <see langword="null" /> (如果已經讀取所有字元)。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">下一行的字元數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的讀取作業目前正在使用讀取器。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEnd">
      <summary>讀取從目前位置到資料流末端的所有字元。</summary>
      <returns>資料流從目前位置到末端的其餘字串。 如果目前位置位於資料流末端，則傳回空字串 ("")。</returns>
      <exception cref="T:System.OutOfMemoryException">沒有足夠記憶體可為傳回的字串配置緩衝區。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEndAsync">
      <summary>非同步讀取從目前位置到資料流末端的所有字元，並將它們以字串傳回。</summary>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值會包含字串，該字串含有從目前位置到資料流結尾的字元。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">字元數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的讀取作業目前正在使用讀取器。</exception>
    </member>
    <member name="T:System.IO.StreamWriter">
      <summary>實作以特定的編碼方式將字元寫入位元組資料流的 <see cref="T:System.IO.TextWriter" />。</summary>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream)">
      <summary>使用 UTF-8 編碼方式和預設緩衝區大小，為指定的資料流初始化 <see cref="T:System.IO.StreamWriter" /> 類別的新執行個體。</summary>
      <param name="stream">要寫入的資料流。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可寫入。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>使用指定的編碼方式和預設緩衝區大小，為指定的資料流初始化 <see cref="T:System.IO.StreamWriter" /> 類別的新執行個體。</summary>
      <param name="stream">要寫入的資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可寫入。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
      <summary>使用指定的編碼方式和緩衝區大小，為指定的資料流初始化 <see cref="T:System.IO.StreamWriter" /> 類別的新執行個體。</summary>
      <param name="stream">要寫入的資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="bufferSize">緩衝區大小，以位元組為單位。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可寫入。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
      <summary>使用指定的編碼方式和緩衝區大小，為指定的資料流初始化 <see cref="T:System.IO.StreamWriter" /> 類別的新執行個體，並選擇性讓資料流保持開啟。</summary>
      <param name="stream">要寫入的資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="bufferSize">緩衝區大小，以位元組為單位。</param>
      <param name="leaveOpen">
        <see langword="true" /> 表示在處置 <see cref="T:System.IO.StreamWriter" /> 物件之後，將資料流保持開啟；否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可寫入。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String)">
      <summary>使用預設編碼方式和緩衝區大小，為指定的檔案初始化 <see cref="T:System.IO.StreamWriter" /> 類別的新執行個體。</summary>
      <param name="path">要寫入的完整檔案路徑。 <paramref name="path" /> 可以是檔案名稱。</param>
      <exception cref="T:System.UnauthorizedAccessException">存取遭到拒絕。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")。
-或-
<paramref name="path" /> 包含系統裝置的名稱 (com1、com2 等等)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含檔案名稱、目錄名稱或磁碟標籤語法的不正確或無效語法。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean)">
      <summary>使用預設編碼方式和緩衝區大小，為指定的檔案初始化 <see cref="T:System.IO.StreamWriter" /> 類別的新執行個體。 如果檔案存在，可以將它寫入或附加。 如果檔案不存在，這個建構函式會建立新的檔案。</summary>
      <param name="path">要寫入的完整檔案路徑。</param>
      <param name="append">
        <see langword="true" /> 表示要附加資料至檔案，<see langword="false" /> 表示要覆寫檔案。 如果指定的檔案不存在，則這個參數沒有任何作用，而且建構函式會建立新的檔案。</param>
      <exception cref="T:System.UnauthorizedAccessException">存取遭到拒絕。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是空的。
-或-
<paramref name="path" /> 包含系統裝置的名稱 (com1、com2 等等)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含檔案名稱、目錄名稱或磁碟標籤語法的不正確或無效語法。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
      <summary>使用指定的編碼方式和預設緩衝區大小，為指定的檔案初始化 <see cref="T:System.IO.StreamWriter" /> 類別的新執行個體。 如果檔案存在，可以將它寫入或附加。 如果檔案不存在，這個建構函式會建立新的檔案。</summary>
      <param name="path">要寫入的完整檔案路徑。</param>
      <param name="append">
        <see langword="true" /> 表示要附加資料至檔案，<see langword="false" /> 表示要覆寫檔案。 如果指定的檔案不存在，則這個參數沒有任何作用，而且建構函式會建立新的檔案。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <exception cref="T:System.UnauthorizedAccessException">存取遭到拒絕。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是空的。
-或-
<paramref name="path" /> 包含系統裝置的名稱 (com1、com2 等等)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含檔案名稱、目錄名稱或磁碟標籤語法的不正確或無效語法。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
      <summary>使用預設編碼方式和緩衝區大小，為指定路徑上的指定檔案初始化 <see cref="T:System.IO.StreamWriter" /> 類別的新執行個體。 如果檔案存在，可以將它寫入或附加。 如果檔案不存在，這個建構函式會建立新的檔案。</summary>
      <param name="path">要寫入的完整檔案路徑。</param>
      <param name="append">
        <see langword="true" /> 表示要附加資料至檔案，<see langword="false" /> 表示要覆寫檔案。 如果指定的檔案不存在，則這個參數沒有任何作用，而且建構函式會建立新的檔案。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="bufferSize">緩衝區大小，以位元組為單位。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")。
-或-
<paramref name="path" /> 包含系統裝置的名稱 (com1、com2 等等)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="encoding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 為負。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含檔案名稱、目錄名稱或磁碟標籤語法的不正確或無效語法。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">存取遭到拒絕。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
    </member>
    <member name="P:System.IO.StreamWriter.AutoFlush">
      <summary>取得或設定值，指出 <see cref="T:System.IO.StreamWriter" /> 在每次呼叫 <see cref="M:System.IO.StreamWriter.Write(System.Char)" /> 之後，是否要將其緩衝區清除到基礎資料流。</summary>
      <returns>強制 <see cref="T:System.IO.StreamWriter" /> 清除其緩衝區，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.StreamWriter.BaseStream">
      <summary>取得以備份存放區作介面的基礎資料流。</summary>
      <returns>
        <see langword="StreamWriter" /> 正在寫入的資料流。</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Close">
      <summary>關閉目前的 <see langword="StreamWriter" /> 物件和基礎資料流。</summary>
      <exception cref="T:System.Text.EncoderFallbackException">目前的編碼不支援顯示 Unicode Surrogate 字組的其中一半。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Dispose(System.Boolean)">
      <summary>使任何緩衝資料都寫入基礎資料流，釋放 <see cref="T:System.IO.StreamWriter" /> 所使用的非受控資源，然後選擇性地釋放受控資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
      <exception cref="T:System.Text.EncoderFallbackException">目前的編碼不支援顯示 Unicode Surrogate 字組的其中一半。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.DisposeAsync">
      <summary>以非同步方式將任何緩衝資料寫入基礎資料流，並釋出 <see cref="T:System.IO.StreamWriter" /> 使用的非受控資源。</summary>
      <returns>代表非同步處署作業的工作。</returns>
    </member>
    <member name="P:System.IO.StreamWriter.Encoding">
      <summary>取得寫入輸出的 <see cref="T:System.Text.Encoding" />。</summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> (在目前執行個體的建構函式中指定)；如果未指定編碼方式，則為 <see cref="T:System.Text.UTF8Encoding" />。</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Flush">
      <summary>清除目前寫入器 (Writer) 的所有緩衝區，並且造成所有緩衝資料都寫入基礎資料流。</summary>
      <exception cref="T:System.ObjectDisposedException">目前寫入器已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">目前的編碼不支援顯示 Unicode Surrogate 字組的其中一半。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.FlushAsync">
      <summary>以非同步的方式清除這個資料流的所有緩衝區，並造成所有緩衝資料都寫入基礎裝置。</summary>
      <returns>表示非同步排清作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
    </member>
    <member name="F:System.IO.StreamWriter.Null">
      <summary>提供 <see langword="StreamWriter" />，但不包含可寫入但無法讀取的備份存放區。</summary>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char)">
      <summary>將一個字元寫入資料流。</summary>
      <param name="value">要寫入資料流的字元。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 為 True，或 <see cref="T:System.IO.StreamWriter" /> 緩衝區已滿，且目前的寫入器已經關閉。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 為 True，或 <see cref="T:System.IO.StreamWriter" /> 緩衝區已滿，且因為 <see cref="T:System.IO.StreamWriter" /> 是在資料流緩衝區的結尾，所以該緩衝區的內容無法寫入至基礎的固定大小資料流。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[])">
      <summary>將字元陣列寫入資料流。</summary>
      <param name="buffer">含有要寫入之資料的字元陣列。 如果 <paramref name="buffer" /> 是 <see langword="null" />，則不寫入任何資料。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 為 True，或 <see cref="T:System.IO.StreamWriter" /> 緩衝區已滿，且目前的寫入器已經關閉。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 為 True，或 <see cref="T:System.IO.StreamWriter" /> 緩衝區已滿，且因為 <see cref="T:System.IO.StreamWriter" /> 是在資料流緩衝區的結尾，所以該緩衝區的內容無法寫入至基礎的固定大小資料流。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>將字元子陣列寫入資料流。</summary>
      <param name="buffer">含有要寫入之資料的字元陣列。</param>
      <param name="index">緩衝區中要開始讀取資料的字元位置。</param>
      <param name="count">要寫入的最大字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 為 True，或 <see cref="T:System.IO.StreamWriter" /> 緩衝區已滿，且目前的寫入器已經關閉。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 為 True，或 <see cref="T:System.IO.StreamWriter" /> 緩衝區已滿，且因為 <see cref="T:System.IO.StreamWriter" /> 是在資料流緩衝區的結尾，所以該緩衝區的內容無法寫入至基礎的固定大小資料流。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>將字元範圍寫入資料流。</summary>
      <param name="buffer">要寫入的字元範圍。</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String)">
      <summary>將字串寫入資料流。</summary>
      <param name="value">要寫入資料流的字串。 如果 <paramref name="value" /> 是 Null，則不會寫入任何資料。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 為 True，或 <see cref="T:System.IO.StreamWriter" /> 緩衝區已滿，且目前的寫入器已經關閉。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 為 True，或 <see cref="T:System.IO.StreamWriter" /> 緩衝區已滿，且因為 <see cref="T:System.IO.StreamWriter" /> 是在資料流緩衝區的結尾，所以該緩衝區的內容無法寫入至基礎的固定大小資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object)">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object)" /> 方法相同的語意，將格式化字串寫入資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化及寫入的物件。</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object,System.Object)">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 方法相同的語意，將格式化字串寫入資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">第一個要格式化和寫入的物件。</param>
      <param name="arg1">第二個要格式化和寫入的物件。</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> 方法相同的語意，將格式化字串寫入資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">第一個要格式化和寫入的物件。</param>
      <param name="arg1">第二個要格式化和寫入的物件。</param>
      <param name="arg2">第三個要格式化和寫入的物件。</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object[])">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object[])" /> 方法相同的語意，將格式化字串寫入資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg">物件陣列，包含零或多個要格式化和寫入的物件。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char)">
      <summary>以非同步方式將字元寫入至資料流。</summary>
      <param name="value">要寫入資料流的字元。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">資料流寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式將字元的子陣列寫入資料流。</summary>
      <param name="buffer">含有要寫入之資料的字元陣列。</param>
      <param name="index">緩衝區中要開始讀取資料的字元位置。</param>
      <param name="count">要寫入的最大字元數。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加上 <paramref name="count" /> 大於緩衝區長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">資料流寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>以非同步方式將字元記憶體區域寫入資料流。</summary>
      <param name="buffer">要寫入資料流的字元記憶體區域。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.String)">
      <summary>以非同步方式將字串寫入資料流。</summary>
      <param name="value">要寫入資料流的字串。 如果 <paramref name="value" /> 是 <see langword="null" />，則不寫入任何資料。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">資料流寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>將字元範圍的文字表示寫入資料流，後接行結束字元。</summary>
      <param name="buffer">要寫入資料流的字元範圍。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String)">
      <summary>將字串寫入資料流，後接行結束字元。</summary>
      <param name="value">要寫入的字串。 如果 <paramref name="value" /> 為 <see langword="null" />，只寫入行結束字元。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object)">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object)" /> 方法相同的語意，將格式化字串和新行寫入資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化及寫入的物件。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 方法相同的語意，將格式化字串和新行寫入資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">第一個要格式化和寫入的物件。</param>
      <param name="arg1">第二個要格式化和寫入的物件。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object)" /> 相同的語意，寫出資料流中的格式化字串和新行。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">第一個要格式化和寫入的物件。</param>
      <param name="arg1">第二個要格式化和寫入的物件。</param>
      <param name="arg2">第三個要格式化和寫入的物件。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object[])">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object)" /> 相同的語意，寫出資料流中的格式化字串和新行。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg">物件陣列，包含零或多個要格式化和寫入的物件。</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync">
      <summary>以非同步方式將行結束字元寫入資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">資料流寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char)">
      <summary>以非同步方式將字元寫入資料流，後接行結束字元。</summary>
      <param name="value">要寫入資料流的字元。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">資料流寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式將字元的子陣列寫入資料流，後接行結束字元。</summary>
      <param name="buffer">資料寫入來源的字元陣列。</param>
      <param name="index">緩衝區中要開始讀取資料的字元位置。</param>
      <param name="count">要寫入的最大字元數。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加上 <paramref name="count" /> 大於緩衝區長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">資料流寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>以非同步方式將字元記憶體區域的文字表示寫入資料流，後接行結束字元。</summary>
      <param name="buffer">要寫入資料流的字元記憶體區域。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.String)">
      <summary>以非同步方式將字串寫入資料流，後接行結束字元。</summary>
      <param name="value">要寫入的字串。 如果值為 <see langword="null" />，則只會寫入行結束字元。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">資料流寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="T:System.IO.StringReader">
      <summary>執行從字串讀取的 <see cref="T:System.IO.TextReader" />。</summary>
    </member>
    <member name="M:System.IO.StringReader.#ctor(System.String)">
      <summary>初始化從指定的字串讀取之 <see cref="T:System.IO.StringReader" /> 類別的新實例。</summary>
      <param name="s">
        <see cref="T:System.IO.StringReader" /> 應該初始化的目標字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 參數是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StringReader.Close">
      <summary>關閉 <see cref="T:System.IO.StringReader" />。</summary>
    </member>
    <member name="M:System.IO.StringReader.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.StringReader" /> 所使用的 unmanaged 資源並選擇性地釋放 managed 的資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.IO.StringReader.Peek">
      <summary>傳回下一個可供使用的字元，但不使用它。</summary>
      <returns>整數，表示要讀取的下一個字元; 如果沒有更多字元可供使用或資料流程不支援搜尋，則為-1。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的讀取器已關閉。</exception>
    </member>
    <member name="M:System.IO.StringReader.Read">
      <summary>從輸入字串讀取下一個字元，並將字元位置前移一個字元。</summary>
      <returns>基礎字串中的下一個字元; 如果沒有更多字元可供使用，則為-1。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的讀取器已關閉。</exception>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>從輸入字串讀取字元區塊，並 <paramref name="count" />將字元位置往前移。</summary>
      <param name="buffer">當這個方法傳回時，會包含指定的字元陣列，這個陣列具有介於 <paramref name="index" /> 到 (<paramref name="index" /> + <paramref name="count" /> - 1) 之間的值，已由讀取自目前來源的字元所取代。</param>
      <param name="index">緩衝區中的起始索引。</param>
      <param name="count">要讀取的字元數。</param>
      <returns>讀入緩衝區的字元總數。 如果目前無法使用許多字元，這可能會小於所要求的字元數; 如果已達到基礎字串的結尾，則為零。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的讀取器已關閉。</exception>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Span{System.Char})">
      <summary>從目前位置開始，讀取輸入字串中的所有字元，並將目前位置前移至輸入字串的結尾。</summary>
      <param name="buffer">當這個方法傳回時，會包含從目前來源讀取的字元。 如果讀取的字元總數為零，則範圍會保持未修改。</param>
      <returns>讀入緩衝區的字元總數。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的字串讀取器實例已關閉。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式從目前字串讀取指定的最大字元數目，並從指定的索引開始將資料寫入緩衝區。</summary>
      <param name="buffer">當這個方法傳回時，會包含指定的字元陣列，這個陣列具有介於 <paramref name="index" /> 到 (<paramref name="index" /> + <paramref name="count" /> - 1) 之間的值，已由讀取自目前來源的字元所取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入的位置。</param>
      <param name="count">讀取的字元數上限。 如果在將指定的字元數寫入緩衝區之前，到達字串的結尾，則方法會傳回。</param>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值會包含讀取至緩衝區的位元組總數。 如果目前可供使用的位元組數目少於所要求的數目，結果值可能會小於所要求的位元組數目，或者如果已到達字串的結尾，則可以是0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.ObjectDisposedException">字串讀取器已被處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的讀取作業目前正在使用讀取器。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>以非同步方式讀取輸入字串中的所有字元（從目前位置開始），並將目前位置前移至輸入字串的結尾。</summary>
      <param name="buffer">當這個方法傳回時，會包含從目前來源讀取的字元。</param>
      <param name="cancellationToken">用於監控取消要求的權杖。 預設值是 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值會包含讀入緩衝區的字元總數。</returns>
    </member>
    <member name="M:System.IO.StringReader.ReadBlock(System.Span{System.Char})">
      <summary>從目前位置開始，讀取輸入字串中的所有字元，並將目前位置前移至輸入字串的結尾。</summary>
      <param name="buffer">當這個方法傳回時，會包含從目前來源讀取的字元。 如果讀取的字元總數為零，則範圍會保持未修改。</param>
      <returns>讀入緩衝區的字元總數。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的字串讀取器實例已關閉。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式從目前字串讀取指定的最大字元數目，並從指定的索引開始將資料寫入緩衝區。</summary>
      <param name="buffer">當這個方法傳回時，會包含指定的字元陣列，這個陣列具有介於 <paramref name="index" /> 到 (<paramref name="index" /> + <paramref name="count" /> - 1) 之間的值，已由讀取自目前來源的字元所取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入的位置。</param>
      <param name="count">讀取的字元數上限。 如果在將指定的字元數寫入緩衝區之前，到達字串的結尾，則方法會傳回。</param>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值會包含讀取至緩衝區的位元組總數。 如果目前可供使用的位元組數目少於所要求的數目，結果值可能會小於所要求的位元組數目，或者如果已到達字串的結尾，則可以是0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.ObjectDisposedException">字串讀取器已被處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的讀取作業目前正在使用讀取器。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>以非同步方式從目前位置開始讀取輸入字串中的所有字元，並將目前位置前移至輸入字串的結尾。</summary>
      <param name="buffer">當這個方法傳回時，會包含從目前來源讀取的字元。 如果讀取的字元總數為零，則範圍會保持未修改。</param>
      <param name="cancellationToken">用於監控取消要求的權杖。 預設值是 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值會包含讀入緩衝區的字元總數。</returns>
    </member>
    <member name="M:System.IO.StringReader.ReadLine">
      <summary>從目前的字串讀取一行字元，並以字串形式傳回資料。</summary>
      <returns>目前字串中的下一行，如果到達字串的結尾，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的讀取器已關閉。</exception>
      <exception cref="T:System.OutOfMemoryException">沒有足夠記憶體可為傳回的字串配置緩衝區。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadLineAsync">
      <summary>以非同步方式從目前的字串讀取一行字元，並以字串形式傳回資料。</summary>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值包含字串讀取器中的下一行，或者，如果已讀取所有字元，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">下一行的字元數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">字串讀取器已被處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的讀取作業目前正在使用讀取器。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEnd">
      <summary>讀取從目前位置到字串結尾的所有字元，並將它們以單一字串傳回。</summary>
      <returns>從目前位置到基礎字串結尾的內容。</returns>
      <exception cref="T:System.OutOfMemoryException">沒有足夠記憶體可為傳回的字串配置緩衝區。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的讀取器已關閉。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEndAsync">
      <summary>非同步讀取從目前位置到字串結尾的所有字元，並將它們以單一字串傳回。</summary>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值包含字串，其中含有從目前位置到字串結尾的字元。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">字元數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">字串讀取器已被處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的讀取作業目前正在使用讀取器。</exception>
    </member>
    <member name="T:System.IO.StringWriter">
      <summary>實作 <see cref="T:System.IO.TextWriter" /> 以便將資訊寫入字串。 資訊儲存在基礎 <see cref="T:System.Text.StringBuilder" /> 中。</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor">
      <summary>初始化 <see cref="T:System.IO.StringWriter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.IFormatProvider)">
      <summary>使用指定的控制項格式，初始化 <see cref="T:System.IO.StringWriter" /> 類別的新執行個體。</summary>
      <param name="formatProvider">控制格式設定的 <see cref="T:System.IFormatProvider" /> 物件。</param>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder)">
      <summary>初始化 <see cref="T:System.IO.StringWriter" /> 類別的新執行個體，這個執行個體可寫入至指定的 <see cref="T:System.Text.StringBuilder" />。</summary>
      <param name="sb">要寫入至其中的 <see cref="T:System.Text.StringBuilder" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)">
      <summary>初始化 <see cref="T:System.IO.StringWriter" /> 類別的新執行個體，這個執行個體會寫入至指定的 <see cref="T:System.Text.StringBuilder" />，並且具有指定的格式提供者。</summary>
      <param name="sb">要寫入至其中的 <see cref="T:System.Text.StringBuilder" /> 物件。</param>
      <param name="formatProvider">控制格式設定的 <see cref="T:System.IFormatProvider" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.StringWriter.Close">
      <summary>關閉目前 <see cref="T:System.IO.StringWriter" /> 和基礎資料流。</summary>
    </member>
    <member name="M:System.IO.StringWriter.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.StringWriter" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.IO.StringWriter.Encoding">
      <summary>取得寫入輸出的 <see cref="T:System.Text.Encoding" />。</summary>
      <returns>寫入輸出的 <see langword="Encoding" />。</returns>
    </member>
    <member name="M:System.IO.StringWriter.FlushAsync">
      <summary>以非同步的方式清除目前寫入器的所有緩衝區，並造成任何緩衝資料都寫入基礎裝置。</summary>
      <returns>表示非同步排清作業的工作。</returns>
    </member>
    <member name="M:System.IO.StringWriter.GetStringBuilder">
      <summary>傳回基礎 <see cref="T:System.Text.StringBuilder" />。</summary>
      <returns>基礎 <see langword="StringBuilder" />。</returns>
    </member>
    <member name="M:System.IO.StringWriter.ToString">
      <summary>傳回字串，包含被寫入至目前 <see langword="StringWriter" /> 的字元。</summary>
      <returns>字串，包含被寫入至目前 <see langword="StringWriter" /> 的字元。</returns>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char)">
      <summary>將一個字元寫入至字串。</summary>
      <param name="value">要寫入的字元。</param>
      <exception cref="T:System.ObjectDisposedException">寫入器已關閉。</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>將字元子陣列寫入至字串。</summary>
      <param name="buffer">資料寫入來源的字元陣列。</param>
      <param name="index">緩衝區中要開始讀取資料的位置。</param>
      <param name="count">要寫入的最大字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">(<paramref name="index" /> + <paramref name="count" />)&gt; <paramref name="buffer" />. <see langword="Length" />.</exception>
      <exception cref="T:System.ObjectDisposedException">寫入器已關閉。</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>將字元範圍的字串表示寫入目前字串。</summary>
      <param name="buffer">要寫入字串的字元範圍。</param>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.String)">
      <summary>將字串寫入至目前字串。</summary>
      <param name="value">要寫入的字串。</param>
      <exception cref="T:System.ObjectDisposedException">寫入器已關閉。</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Text.StringBuilder)">
      <summary>將字串產生器的字串表示寫入目前字串。</summary>
      <param name="value">要寫入字串的字串產生器。</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char)">
      <summary>以非同步方式將字元寫入至字串。</summary>
      <param name="value">要寫入至字串的字元。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">字串寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">字串寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式將字元的子陣列寫入至字串。</summary>
      <param name="buffer">資料寫入來源的字元陣列。</param>
      <param name="index">緩衝區中要開始讀取資料的位置。</param>
      <param name="count">要寫入的最大字元數。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加上 <paramref name="count" /> 大於緩衝區長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ObjectDisposedException">字串寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">字串寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>以非同步方式將字元的記憶體區域寫入字串。</summary>
      <param name="buffer">要寫入字串的字元記憶體區域。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.String)">
      <summary>以非同步方式將字串寫入至目前字串。</summary>
      <param name="value">要寫入的字串。 如果 <paramref name="value" /> 為 <see langword="null" />，不寫入任何字串到文字資料流。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">字串寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">字串寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>以非同步方式將字串產生器的文字表示寫入字串。</summary>
      <param name="value">要寫入字串的字串產生器。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>將字元範圍的文字表示寫入字串，後接行結束字元。</summary>
      <param name="buffer">要寫入字串的字元範圍。</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteLine(System.Text.StringBuilder)">
      <summary>將字串產生器的文字表示寫入字串，後接行結束字元。</summary>
      <param name="value">作為字串產生器的字串，用於寫入字串。</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char)">
      <summary>以非同步方式將字元寫入字串，後接行結束字元。</summary>
      <param name="value">要寫入至字串的字元。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">字串寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">字串寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式將字元的子陣列寫入字串，後接行結束字元。</summary>
      <param name="buffer">資料寫入來源的字元陣列。</param>
      <param name="index">緩衝區中要開始讀取資料的位置。</param>
      <param name="count">要寫入的最大字元數。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加上 <paramref name="count" /> 大於緩衝區長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ObjectDisposedException">字串寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">字串寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>以非同步方式將字元的記憶體區域字串表示寫入目前字串，後接行結束字元。</summary>
      <param name="buffer">要寫入字串的字元記憶體區域。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.String)">
      <summary>以非同步方式將字串寫入目前字串，後接行結束字元。</summary>
      <param name="value">要寫入的字串。 如果值為 <see langword="null" />，則只會寫入行結束字元。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">字串寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">字串寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>以非同步方式將字串產生器的字串表示寫入目前字串，後接行結束字元。</summary>
      <param name="value">要寫入字串的字串產生器。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="T:System.IO.TextReader">
      <summary>代表可以讀取一連串連續字元的讀取器 (Reader)。</summary>
    </member>
    <member name="M:System.IO.TextReader.#ctor">
      <summary>初始化 <see cref="T:System.IO.TextReader" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.TextReader.Close">
      <summary>關閉 <see cref="T:System.IO.TextReader" /> 並釋放任何與 <see langword="TextReader" /> 關聯的系統資源。</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose">
      <summary>釋放由 <see cref="T:System.IO.TextReader" /> 物件使用的所有資源。</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.TextReader" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="F:System.IO.TextReader.Null">
      <summary>提供沒有可從中讀取之資料的 <see langword="TextReader" />。</summary>
    </member>
    <member name="M:System.IO.TextReader.Peek">
      <summary>讀取下一個字元，而不會變更讀取器或字元來源的狀態。 傳回下一個可用字元，而不會實際從讀取器讀取。</summary>
      <returns>整數，表示要讀取的下一個字元，如果沒有更多字元可供使用或讀取器不支援搜尋，則為 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextReader.Read">
      <summary>自文字讀取器讀取下一個字元，並將字元位置前移一個字元。</summary>
      <returns>文字讀取器的下一個字元；如果不再有字元可供使用，則為 -1。 預設的實作會傳回 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>從目前讀取器讀取指定的最大字元數目，並從指定的索引開始將資料寫入緩衝區。</summary>
      <param name="buffer">當這個方法傳回時，會包含指定的字元陣列，這個陣列具有介於 <paramref name="index" /> 到 (<paramref name="index" /> + <paramref name="count" /> - 1) 之間的值，已由讀取自目前來源的字元所取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入的位置。</param>
      <param name="count">要讀取的字元數上限。 如果指定的字元數讀入緩衝區之前，便到達讀取器末端，則方法會返回。</param>
      <returns>已經讀取的字元數目。 數目將小於或等於 <paramref name="count" />，取決於資料是否在讀取器中可供使用。 如果不再有字元可供讀取時呼叫，這個方法傳回 0 (零)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Span{System.Char})">
      <summary>從目前的讀取器讀取字元，並將資料寫入至指定的緩衝區。</summary>
      <param name="buffer">當這個方法傳回時，會包含讀取自目前來源之字元所取代的指定字元範圍。</param>
      <returns>已經讀取的字元數目。 取決於是否可在讀取器中使用資料，數目會小於或等於 <paramref name="buffer" /> 的長度。 如果不再有字元可供讀取時呼叫，這個方法傳回 0 (零)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.IOException">從資料流讀取的字元數大於 <paramref name="buffer" /> 的長度。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>從目前的文字讀取器非同步讀取指定的最大字元數目，並從指定的索引開始將資料寫入緩衝區。</summary>
      <param name="buffer">當這個方法傳回時，會包含指定的字元陣列，這個陣列具有介於 <paramref name="index" /> 到 (<paramref name="index" /> + <paramref name="count" /> - 1) 之間的值，已由讀取自目前來源的字元所取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入的位置。</param>
      <param name="count">要讀取的字元數上限。 如果指定的字元數讀入緩衝區之前，便到達文字末端，則目前的方法會傳回。</param>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值會包含讀取至緩衝區的位元組總數。 如果目前可供使用的位元組數目少於所要求的數目，結果值可能會小於所要求的位元組數目，或者如果已經到達文字末端，則可能為 0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.ObjectDisposedException">文字讀取器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的讀取作業目前正在使用讀取器。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>以非同步方式將目前資料流中的字元讀入至記憶體區塊。</summary>
      <param name="buffer">當這個方法傳回時，會包含讀取自目前來源之字元所取代的指定字元記憶體區塊。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>代表非同步讀取作業的值工作。 型別參數值包含已讀取的字元數；若處於資料流結尾且未讀取任何資料，則為 0。 取決於是否可在資料流中使用資料，數目會小於或等於 <paramref name="buffer" /> 的長度。</returns>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>從目前的文字讀取器讀取指定的最大字元數目，並從指定的索引開始將資料寫入緩衝區。</summary>
      <param name="buffer">當這個方法傳回時，這個參數會包含指定的字元陣列，這個陣列具有介於 <paramref name="index" /> 到 (<paramref name="index" /> + <paramref name="count" /> -1) 之間的值，已由讀取自目前來源的字元所取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入的位置。</param>
      <param name="count">要讀取的字元數上限。</param>
      <returns>已經讀取的字元數目。 數目將小於或等於 <paramref name="count" />，取決於是否已經讀取所有輸入字元。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Span{System.Char})">
      <summary>從目前的資料流讀取字元，並將資料寫入至緩衝區。</summary>
      <param name="buffer">當這個方法傳回時，會包含讀取自目前來源之字元所取代的指定字元範圍。</param>
      <returns>已經讀取的字元數目。 取決於是否已讀取所有輸入字元，數目會小於或等於 <paramref name="buffer" /> 的長度。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.StreamReader" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>從目前的文字讀取器非同步讀取指定的最大字元數目，並從指定的索引開始將資料寫入緩衝區。</summary>
      <param name="buffer">當這個方法傳回時，會包含指定的字元陣列，這個陣列具有介於 <paramref name="index" /> 到 (<paramref name="index" /> + <paramref name="count" /> - 1) 之間的值，已由讀取自目前來源的字元所取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入的位置。</param>
      <param name="count">要讀取的字元數上限。 如果指定的字元數讀入緩衝區之前，便到達文字末端，則目前的方法會傳回。</param>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值會包含讀取至緩衝區的位元組總數。 如果目前可供使用的位元組數目少於所要求的數目，結果值可能會小於所要求的位元組數目，或者如果已經到達文字末端，則可能為 0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.ObjectDisposedException">文字讀取器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的讀取作業目前正在使用讀取器。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>以非同步方式從目前的資料流讀取字元，並將資料寫入至緩衝區。</summary>
      <param name="buffer">當這個方法傳回時，會包含讀取自目前來源之字元所取代的指定字元記憶體區塊。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>代表非同步讀取作業的值工作。 型別參數的值包含已讀入至緩衝區的字元總數。 如果目前可供使用的字元數目少於所要求的數目，結果值可能會小於所要求的字元數目，或者如果已經到達資料流末端，則可能為 0 (零)。</returns>
    </member>
    <member name="M:System.IO.TextReader.ReadLine">
      <summary>自文字讀取器讀取一行字元，並將資料以字串傳回。</summary>
      <returns>讀取器中的下一行；如果已經讀取所有字元，則為 <see langword="null" />。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.OutOfMemoryException">沒有足夠記憶體可為傳回的字串配置緩衝區。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已關閉。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字元數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadLineAsync">
      <summary>非同步讀取一行字元，並將資料以字串傳回。</summary>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值會包含文字讀取器中的下一行；如果已經讀取所有字元，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">下一行的字元數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">文字讀取器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的讀取作業目前正在使用讀取器。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEnd">
      <summary>讀取從目前位置到文字讀取器末端的所有字元，並將它們以單一字串傳回。</summary>
      <returns>字串，包含從目前位置到文字讀取器結尾的所有字元。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已關閉。</exception>
      <exception cref="T:System.OutOfMemoryException">沒有足夠記憶體可為傳回的字串配置緩衝區。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字元數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEndAsync">
      <summary>非同步讀取從目前位置到文字讀取器末端的所有字元，並將它們以單一字串傳回。</summary>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值會包含字串，該字串含有從目前位置到文字讀取器結尾的字元。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">字元數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">文字讀取器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的讀取作業目前正在使用讀取器。</exception>
    </member>
    <member name="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
      <summary>在指定的 <see langword="TextReader" /> 內建立安全執行緒的包裝函式。</summary>
      <param name="reader">要同步處理的 <see langword="TextReader" />。</param>
      <returns>安全執行緒的 <see cref="T:System.IO.TextReader" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.IO.TextWriter">
      <summary>代表可以寫入一連串連續字元的寫入器。 這個類別是抽象的。</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor">
      <summary>初始化 <see cref="T:System.IO.TextWriter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor(System.IFormatProvider)">
      <summary>使用指定的格式提供者，初始化 <see cref="T:System.IO.TextWriter" /> 類別的新執行個體。</summary>
      <param name="formatProvider">控制格式設定的 <see cref="T:System.IFormatProvider" /> 物件。</param>
    </member>
    <member name="M:System.IO.TextWriter.Close">
      <summary>關閉目前寫入器並釋放任何與寫入器相關聯的系統資源。</summary>
    </member>
    <member name="F:System.IO.TextWriter.CoreNewLine">
      <summary>儲存這個 <see langword="TextWriter" /> 所使用的新行字元。</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose">
      <summary>釋放由 <see cref="T:System.IO.TextWriter" /> 物件使用的所有資源。</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.TextWriter" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.IO.TextWriter.DisposeAsync">
      <summary>以非同步方式釋放由 <see cref="T:System.IO.TextWriter" /> 物件使用的所有資源。</summary>
      <returns>代表非同步處署作業的工作。</returns>
    </member>
    <member name="P:System.IO.TextWriter.Encoding">
      <summary>當在衍生類別中覆寫該屬性時，傳回用於寫入輸出的字元編碼。</summary>
      <returns>寫入輸出時使用的字元編碼。</returns>
    </member>
    <member name="M:System.IO.TextWriter.Flush">
      <summary>清除目前寫入器的所有緩衝區，並造成任何緩衝資料都寫入基礎裝置。</summary>
    </member>
    <member name="M:System.IO.TextWriter.FlushAsync">
      <summary>以非同步的方式清除目前寫入器的所有緩衝區，並造成任何緩衝資料都寫入基礎裝置。</summary>
      <returns>表示非同步排清作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">文字寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="P:System.IO.TextWriter.FormatProvider">
      <summary>取得控制格式設定的物件。</summary>
      <returns>特定文化特性的 <see cref="T:System.IFormatProvider" /> 物件，或者目前文化特性的格式 (如果未指定其他文化特性)。</returns>
    </member>
    <member name="P:System.IO.TextWriter.NewLine">
      <summary>取得或設定目前 <see langword="TextWriter" /> 所使用的行結束字元字串。</summary>
      <returns>目前 <see langword="TextWriter" /> 的行結束字元字串。</returns>
    </member>
    <member name="F:System.IO.TextWriter.Null">
      <summary>提供 <see langword="TextWriter" />，但不包含可寫入但無法讀取的備份存放區。</summary>
    </member>
    <member name="M:System.IO.TextWriter.Synchronized(System.IO.TextWriter)">
      <summary>在指定的 <see langword="TextWriter" /> 內建立安全執行緒的包裝函式。</summary>
      <param name="writer">要同步處理的 <see langword="TextWriter" />。</param>
      <returns>安全執行緒的包裝函式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Boolean)">
      <summary>將 <see langword="Boolean" /> 值的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的 <see langword="Boolean" /> 值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char)">
      <summary>將字元寫入文字資料流。</summary>
      <param name="value">要寫入到文字資料流的字元。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[])">
      <summary>將字元陣列寫入文字資料流。</summary>
      <param name="buffer">要寫入到文字資料流的字元陣列。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>將字元的子陣列寫入至文字資料流。</summary>
      <param name="buffer">資料寫入來源的字元陣列。</param>
      <param name="index">緩衝區中要開始擷取資料的字元位置。</param>
      <param name="count">要寫入的字元數。</param>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Decimal)">
      <summary>將十進位值的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的十進位值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Double)">
      <summary>將 8 位元組浮點數值的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的 8 位元組浮點數值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int32)">
      <summary>將 4 位元組帶正負號的整數文字表示寫入文字資料流。</summary>
      <param name="value">要寫入之 4 位元組帶正負號的整數。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int64)">
      <summary>將 8 位元組帶正負號的整數文字表示寫入文字資料流。</summary>
      <param name="value">要寫入之 8 位元組帶正負號的整數。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Object)">
      <summary>呼叫該物件的 <see langword="ToString" /> 方法，將物件的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的物件。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>將字元範圍寫入文字資料流。</summary>
      <param name="buffer">要寫入的字元範圍。</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Single)">
      <summary>將 4 位元組浮點數值的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的 4 位元組浮點數值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String)">
      <summary>將字串寫入到文字資料流。</summary>
      <param name="value">要寫入的字串。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object)">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object)" /> 方法相同的語意，將格式化字串寫入文字資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化及寫入的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的複合格式字串。
-或-
格式項目的索引小於 0 (零)，或大於或等於要格式化的物件數目 (就這個方法多載而言，是一個)。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 方法相同的語意，將格式化字串寫入文字資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">第一個要格式化和寫入的物件。</param>
      <param name="arg1">第二個要格式化和寫入的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的複合格式字串。
-或-
格式項目的索引小於 0 (零) 或大於或等於要格式化的物件數目 (就這個方法多載而言，是兩個)。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> 方法相同的語意，將格式化字串寫入文字資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">第一個要格式化和寫入的物件。</param>
      <param name="arg1">第二個要格式化和寫入的物件。</param>
      <param name="arg2">第三個要格式化和寫入的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的複合格式字串。
-或-
格式項目的索引小於 0 (零)，或大於或等於要格式化的物件數目 (就這個方法多載而言，是三個)。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object[])">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object[])" /> 方法相同的語意，將格式化字串寫入文字資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg">物件陣列，包含零或多個要格式化和寫入的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="arg" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的複合格式字串。
-或-
格式項目的索引小於 0 (零)，或大於或等於 <paramref name="arg" /> 陣列的長度。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Text.StringBuilder)">
      <summary>將字串產生器寫入文字資料流。</summary>
      <param name="value">作為字串產生器的字串，用於寫入文字資料流。</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt32)">
      <summary>將 4 位元組不帶正負號的整數文字表示寫入文字資料流。</summary>
      <param name="value">要寫入之 4 位元組不帶正負號的整數。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt64)">
      <summary>將 8 位元組帶不正負號的整數文字表示寫入文字資料流。</summary>
      <param name="value">要寫入之 8 位元組不帶正負號的整數。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char)">
      <summary>以非同步方式將字元寫入文字資料流。</summary>
      <param name="value">要寫入到文字資料流的字元。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">文字寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[])">
      <summary>以非同步方式將字元陣列寫入文字資料流。</summary>
      <param name="buffer">要寫入到文字資料流的字元陣列。 如果 <paramref name="buffer" /> 是 <see langword="null" />，則不寫入任何資料。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">文字寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式將字元的子陣列寫入文字資料流。</summary>
      <param name="buffer">資料寫入來源的字元陣列。</param>
      <param name="index">緩衝區中要開始擷取資料的字元位置。</param>
      <param name="count">要寫入的字元數。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加上 <paramref name="count" /> 大於緩衝區長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ObjectDisposedException">文字寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>以非同步方式將字元記憶體區域寫入文字資料流。</summary>
      <param name="buffer">要寫入文字資料流的字元記憶體區域。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.String)">
      <summary>以非同步方式將字串寫入至文字資料流。</summary>
      <param name="value">要寫入的字串。 如果 <paramref name="value" /> 為 <see langword="null" />，不寫入任何字串到文字資料流。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">文字寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>以非同步方式將字串產生器寫入文字資料流。</summary>
      <param name="value">作為字串產生器的字串，用於寫入文字資料流。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine">
      <summary>將行結束字元寫入文字資料流。</summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Boolean)">
      <summary>將 <see langword="Boolean" /> 值的文字表示寫入文字資料流，後接行結束字元。</summary>
      <param name="value">要寫入的 <see langword="Boolean" /> 值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char)">
      <summary>將字元寫入文字資料流，後接行結束字元。</summary>
      <param name="value">要寫入到文字資料流的字元。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[])">
      <summary>將字元的陣列寫入文字資料流，後接行結束字元。</summary>
      <param name="buffer">資料讀取來源的字元陣列。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>將字元的子陣列寫入文字資料流，後接行結束字元。</summary>
      <param name="buffer">資料讀取來源的字元陣列。</param>
      <param name="index">
        <paramref name="buffer" /> 中開始讀取資料的字元位置。</param>
      <param name="count">要寫入的最大字元數。</param>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Decimal)">
      <summary>將十進位值的文字表示寫入文字資料流，後接行結束字元。</summary>
      <param name="value">要寫入的十進位值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Double)">
      <summary>將 8 位元組浮點數值的文字表示寫入文字資料流，後接行結束字元。</summary>
      <param name="value">要寫入的 8 位元組浮點數值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int32)">
      <summary>將 4 位元組帶正負號的整數文字表示寫入文字資料流，後接行結束字元。</summary>
      <param name="value">要寫入之 4 位元組帶正負號的整數。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int64)">
      <summary>將 8 位元組帶正負號的整數文字表示寫入文字資料流，後接行結束字元。</summary>
      <param name="value">要寫入之 8 位元組帶正負號的整數。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Object)">
      <summary>藉由呼叫該物件上的 <see langword="ToString" /> 方法，後接行結束字元，將物件的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的物件。 如果 <paramref name="value" /> 為 <see langword="null" />，只寫入行結束字元。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>將字元範圍的文字表示寫入文字資料流，後接行結束字元。</summary>
      <param name="buffer">要寫入文字資料流的字元範圍值。</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Single)">
      <summary>將 4 位元組浮點數值的文字表示寫入文字資料流，後接行結束字元。</summary>
      <param name="value">要寫入的 4 位元組浮點數值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String)">
      <summary>將字串寫入文字資料流，後接行結束字元。</summary>
      <param name="value">要寫入的字串。 如果 <paramref name="value" /> 為 <see langword="null" />，只寫入行結束字元。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object)">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object)" /> 方法相同的語意，將格式化字串和新行寫入文字資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化及寫入的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的複合格式字串。
-或-
格式項目的索引小於 0 (零)，或大於或等於要格式化的物件數目 (就這個方法多載而言，是一個)。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 方法相同的語意，將格式化字串和新行寫入文字資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">第一個要格式化和寫入的物件。</param>
      <param name="arg1">第二個要格式化和寫入的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的複合格式字串。
-或-
格式項目的索引小於 0 (零)，或大於或等於要格式化的物件數目 (就這個方法多載而言，是兩個)。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object)" /> 相同的語意，寫出文字資料流中的格式化字串和新行。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">第一個要格式化和寫入的物件。</param>
      <param name="arg1">第二個要格式化和寫入的物件。</param>
      <param name="arg2">第三個要格式化和寫入的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的複合格式字串。
-或-
格式項目的索引小於 0 (零)，或大於或等於要格式化的物件數目 (就這個方法多載而言，是三個)。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object)" /> 相同的語意，寫出文字資料流中的格式化字串和新行。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg">物件陣列，包含零或多個要格式化和寫入的物件。</param>
      <exception cref="T:System.ArgumentNullException">傳入的字串或物件為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的複合格式字串。
-或-
格式項目的索引小於 0 (零)，或大於或等於 <paramref name="arg" /> 陣列的長度。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Text.StringBuilder)">
      <summary>將字串產生器的文字表示寫入文字資料流，後接行結束字元。</summary>
      <param name="value">作為字串產生器的字串，用於寫入文字資料流。</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt32)">
      <summary>將 4 位元組不帶正負號的整數文字表示寫入文字資料流，後接行結束字元。</summary>
      <param name="value">要寫入之 4 位元組不帶正負號的整數。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt64)">
      <summary>將 8 位元組不帶正負號的整數文字表示寫入文字資料流，後接行結束字元。</summary>
      <param name="value">要寫入之 8 位元組不帶正負號的整數。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync">
      <summary>以非同步方式將行結束字元寫入文字資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">文字寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char)">
      <summary>以非同步方式將字元寫入文字資料流，後接行結束字元。</summary>
      <param name="value">要寫入到文字資料流的字元。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">文字寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[])">
      <summary>以非同步方式將字元的陣列寫入文字資料流，後接行結束字元。</summary>
      <param name="buffer">要寫入到文字資料流的字元陣列。 如果字元陣列是 <see langword="null" />，則只有行結束字元會被寫入。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">文字寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式將字元的子陣列寫入文字資料流，後接行結束字元。</summary>
      <param name="buffer">資料寫入來源的字元陣列。</param>
      <param name="index">緩衝區中要開始擷取資料的字元位置。</param>
      <param name="count">要寫入的字元數。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加上 <paramref name="count" /> 大於緩衝區長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ObjectDisposedException">文字寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>以非同步方式將字元記憶體區域的文字表示寫入文字資料流，後接行結束字元。</summary>
      <param name="buffer">要寫入文字資料流的字元記憶體區域。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.String)">
      <summary>以非同步方式將字串寫入文字資料流，後接行結束字元。</summary>
      <param name="value">要寫入的字串。 如果值為 <see langword="null" />，則只會寫入行結束字元。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">文字寫入器已處置。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前由先前寫入作業所使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>以非同步方式將字串產生器的文字表示寫入文字資料流，後接行結束字元。</summary>
      <param name="value">作為字串產生器的字串，用於寫入文字資料流。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="T:System.LoaderOptimization">
      <summary>可搭配 <see cref="T:System.LoaderOptimizationAttribute" /> 類別來指定可執行檔之載入器最佳化的列舉。</summary>
    </member>
    <member name="F:System.LoaderOptimization.DisallowBindings">
      <summary>Common Language Runtime 已忽略。</summary>
    </member>
    <member name="F:System.LoaderOptimization.DomainMask">
      <summary>請勿使用。 這個遮罩會選取定義域相關的值，並篩選出未使用的 <see cref="F:System.LoaderOptimization.DisallowBindings" /> 旗標。</summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomain">
      <summary>表示應用程式可能會有許多使用相同程式碼的定義域，而載入器必須跨應用程式定義域來共用最多的內部資源。</summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomainHost">
      <summary>表示應用程式可能會在多個定義域中裝載唯一的程式碼，而載入器只能針對已經加入至全域組件快取的全域可用 (強式名稱) 組件，跨應用程式定義域共用資源。</summary>
    </member>
    <member name="F:System.LoaderOptimization.NotSpecified">
      <summary>表示未指定最佳化來共用內部資源。 如果預設定義域或裝載介面已指定最佳化，則載入器會予以使用；否則，載入器會使用 <see cref="F:System.LoaderOptimization.SingleDomain" />。</summary>
    </member>
    <member name="F:System.LoaderOptimization.SingleDomain">
      <summary>表示應用程式可能會有單一定義域，而載入器不可以跨應用程式定義域共用內部資源。</summary>
    </member>
    <member name="T:System.LoaderOptimizationAttribute">
      <summary>用來為可執行應用程式的主要方法設定預設的載入器最佳化原則。</summary>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.Byte)">
      <summary>將 <see cref="T:System.LoaderOptimizationAttribute" /> 類別的新執行個體初始化為指定值。</summary>
      <param name="value">等於 <see cref="T:System.LoaderOptimization" /> 常數的值。</param>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.LoaderOptimization)">
      <summary>將 <see cref="T:System.LoaderOptimizationAttribute" /> 類別的新執行個體初始化為指定值。</summary>
      <param name="value">
        <see cref="T:System.LoaderOptimization" /> 常數。</param>
    </member>
    <member name="P:System.LoaderOptimizationAttribute.Value">
      <summary>取得這個執行個體的目前 <see cref="T:System.LoaderOptimization" /> 值。</summary>
      <returns>
        <see cref="T:System.LoaderOptimization" /> 常數。</returns>
    </member>
    <member name="T:System.Math">
      <summary>提供三角函數、對數函數和其他一般數學函數的常數和靜態方法。</summary>
    </member>
    <member name="M:System.Math.Abs(System.Decimal)">
      <summary>傳回 <see cref="T:System.Decimal" /> 數字的絕對值。</summary>
      <param name="value">大於或等於 <see cref="F:System.Decimal.MinValue" />但小於或等於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</param>
      <returns>十進位數字 x，其滿足下列條件 0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" />。</returns>
    </member>
    <member name="M:System.Math.Abs(System.Double)">
      <summary>傳回雙精確度浮點數的絕對值。</summary>
      <param name="value">大於或等於 <see cref="F:System.Double.MinValue" />但小於或等於 <see cref="F:System.Double.MaxValue" /> 的數字。</param>
      <returns>雙精確度浮點數 x，其滿足下列條件 0 ≤ x ≤<see cref="F:System.Double.MaxValue" />。</returns>
    </member>
    <member name="M:System.Math.Abs(System.Int16)">
      <summary>傳回 16 位元帶正負號整數的絕對值。</summary>
      <param name="value">大於 <see cref="F:System.Int16.MinValue" />但小於或等於 <see cref="F:System.Int16.MaxValue" /> 的數字。</param>
      <returns>16 位元帶正負號整數 x，其滿足下列條件 0 ≤ x ≤<see cref="F:System.Int16.MaxValue" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />等於 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Math.Abs(System.Int32)">
      <summary>傳回 32 位元帶正負號整數的絕對值。</summary>
      <param name="value">大於 <see cref="F:System.Int32.MinValue" />但小於或等於 <see cref="F:System.Int32.MaxValue" /> 的數字。</param>
      <returns>32 位元帶正負號整數 x，其滿足下列條件 0 ≤ x ≤<see cref="F:System.Int32.MaxValue" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />等於 <see cref="F:System.Int32.MinValue" />。</exception>
    </member>
    <member name="M:System.Math.Abs(System.Int64)">
      <summary>傳回 64 位元帶正負號整數的絕對值。</summary>
      <param name="value">大於 <see cref="F:System.Int64.MinValue" />但小於或等於 <see cref="F:System.Int64.MaxValue" /> 的數字。</param>
      <returns>64 位元帶正負號整數 x，其滿足下列條件 0 ≤ x ≤<see cref="F:System.Int64.MaxValue" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />等於 <see cref="F:System.Int64.MinValue" />。</exception>
    </member>
    <member name="M:System.Math.Abs(System.SByte)">
      <summary>傳回 8 位元帶正負號整數的絕對值。</summary>
      <param name="value">大於 <see cref="F:System.SByte.MinValue" />但小於或等於 <see cref="F:System.SByte.MaxValue" /> 的數字。</param>
      <returns>8 位元帶正負號整數 x，其滿足下列條件 0 ≤ x ≤<see cref="F:System.SByte.MaxValue" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />等於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Math.Abs(System.Single)">
      <summary>傳回單精確度浮點數的絕對值。</summary>
      <param name="value">大於或等於 <see cref="F:System.Single.MinValue" />但小於或等於 <see cref="F:System.Single.MaxValue" /> 的數字。</param>
      <returns>單精確度浮點數 x，其滿足下列條件 0 ≤ x ≤<see cref="F:System.Single.MaxValue" />。</returns>
    </member>
    <member name="M:System.Math.Acos(System.Double)">
      <summary>傳回餘弦函數 (Cosine) 是指定數字的角。</summary>
      <param name="d">代表餘弦函數的數字，其中 <paramref name="d" /> 必須大於或等於 -1 但小於或等於 1。</param>
      <returns>以弧度為單位的角度 θ，其滿足下列條件 0 ≤θ≤π
-或-
如果 <paramref name="d" /> &lt; -1 或 <paramref name="d" /> &gt; 1 或 <paramref name="d" /> 等於 <see cref="F:System.Double.NaN" />，則為 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Acosh(System.Double)">
      <summary>傳回雙曲線餘弦函數是指定數字的角。</summary>
      <param name="d">代表雙曲線餘弦函數的數字，其中 <paramref name="d" /> 必須大於或等於 1，但小於或等於 <see cref="F:System.Double.PositiveInfinity" />。</param>
      <returns>以弧度為單位的角度 θ，其滿足下列條件 0 ≤ θ ≤ ∞。
-或-
<see cref="F:System.Double.NaN" /> 如果 <paramref name="d" /> &lt; 1 或 <paramref name="d" /> 等於 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Asin(System.Double)">
      <summary>傳回正弦函數 (Sine) 是指定數字的角。</summary>
      <param name="d">代表正弦函數的數字，其中 <paramref name="d" /> 必須大於或等於 -1，但小於或等於 1。</param>
      <returns>以弧度為單位的角度 θ，其滿足下列條件 -π/2 ≤θ≤π/2
-或-
如果 <paramref name="d" /> &lt; -1 或 <paramref name="d" /> &gt; 1 或 <paramref name="d" /> 等於 <see cref="F:System.Double.NaN" />，則為 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Asinh(System.Double)">
      <summary>傳回雙曲線正弦函數是指定數字的角。</summary>
      <param name="d">代表雙曲線正弦函數的數字，其中 <paramref name="d" /> 必須大於或等於 <see cref="F:System.Double.NegativeInfinity" />，但小於或等於 <see cref="F:System.Double.PositiveInfinity" />。</param>
      <returns>以弧度為單位的角度 θ，其滿足下列條件 -∞ &lt; θ ≤-1，或 1 ≤ θ &lt; ∞。
-或-
<see cref="F:System.Double.NaN" /> 如果 <paramref name="d" /> 等於 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Atan(System.Double)">
      <summary>傳回正切函數 (Tangent) 是指定數字的角。</summary>
      <param name="d">代表正切的數字。</param>
      <returns>以弧度為單位的角度 θ，其滿足下列條件 -π/2 ≤θ≤π/2。
-或-
如果 <paramref name="d" /> 等於 <see cref="F:System.Double.NaN" />，則為 <see cref="F:System.Double.NaN" />；如果 <paramref name="d" /> 等於 <see cref="F:System.Double.NegativeInfinity" />，則為 -π/2，四捨五入為雙精度 (-1.5707963267949)；如果 <paramref name="d" /> 等於 <see cref="F:System.Double.PositiveInfinity" />，則為 π/2，四捨五入為雙精度 (1.5707963267949)。</returns>
    </member>
    <member name="M:System.Math.Atan2(System.Double,System.Double)">
      <summary>傳回正切函數是兩個指定數字之商數的角。</summary>
      <param name="y">某個點的 Y 座標。</param>
      <param name="x">某個點的 X 座標。</param>
      <returns>以弧度為單位的角度 θ，其滿足下列條件 -π≤θ≤π，且 tan(θ) = <paramref name="y" /> / <paramref name="x" />，其中 (<paramref name="x" />, <paramref name="y" />) 是笛卡兒平面上的點。 注意下列各項：

如果 (<paramref name="x" />, <paramref name="y" />) 在第 1 象限，則0 &lt; θ &lt; π/2。

如果 (<paramref name="x" />, <paramref name="y" />) 在第 2 象限，則 π/2 &lt; θ≤π。

如果 (<paramref name="x" />, <paramref name="y" />) 在第 3 象限，則 -π &lt; θ &lt; -π/2。

如果 (<paramref name="x" />, <paramref name="y" />) 在第 4 象限，則 -π/2 &lt; θ &lt; 0。


如果是位在象限界限上的點，則傳回值如下：

如果 y 是 0，且 x 不是負值，則 θ = 0。

如果 y 是 0，且 x 是負值，則 θ = π。

如果 y 是正值，且 x 是 0，則 θ = π/2。

如果 y 是負值，而 x 是 0，則 θ = -π/2。

如果 y 是 0 且 x 是 0，則 θ = 0。


如果 <paramref name="x" /> 或 <paramref name="y" /> 為 <see cref="F:System.Double.NaN" />，或者 <paramref name="x" /> 和 <paramref name="y" /> 為 <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />，這個方法會傳回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Atanh(System.Double)">
      <summary>傳回雙曲線正弦函數是指定數字的角。</summary>
      <param name="d">代表雙曲線正切函數的數字，其中 <paramref name="d" /> 必須大於或等於 -1，但小於或等於 1。</param>
      <returns>以弧度為單位的角度 θ，其滿足下列條件 -∞ &lt; θ &lt; -1，或 1 &lt; θ &lt; ∞。
-或-
如果 <paramref name="d" /> &lt; -1 或 <paramref name="d" /> &gt; 1 或 <paramref name="d" /> 等於 <see cref="F:System.Double.NaN" />，則為 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.BigMul(System.Int32,System.Int32)">
      <summary>產生兩個 32 位元數字的完整產品。</summary>
      <param name="a">要相乘的第一個數字。</param>
      <param name="b">要相乘的第二個數字。</param>
      <returns>包含指定數字之乘積的數字。</returns>
    </member>
    <member name="M:System.Math.BitDecrement(System.Double)">
      <summary>傳回下一個比 <paramref name="x" /> 小的最小值。</summary>
      <param name="x">要遞減的值。</param>
      <returns>下一個比 <paramref name="x" /> 小的最小值。
-或-
<see cref="F:System.Double.NegativeInfinity" /> 如果 <paramref name="x" /> 等於 <see cref="F:System.Double.NegativeInfinity" />。
-或-
<see cref="F:System.Double.NaN" /> 如果 <paramref name="x" /> 等於 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.BitIncrement(System.Double)">
      <summary>傳回下一個比 <paramref name="x" /> 大的最大值。</summary>
      <param name="x">要遞增的值。</param>
      <returns>下一個比 <paramref name="x" /> 大的最大值。
-或-
<see cref="F:System.Double.PositiveInfinity" /> 如果 <paramref name="x" /> 等於 <see cref="F:System.Double.PositiveInfinity" />。
-或-
<see cref="F:System.Double.NaN" /> 如果 <paramref name="x" /> 等於 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Cbrt(System.Double)">
      <summary>傳回指定數字的立方根。</summary>
      <param name="d">要找出其立方根的數字。</param>
      <returns>
        <paramref name="d" /> 的立方根。
-或-
<see cref="F:System.Double.NaN" /> 如果 <paramref name="x" /> 等於 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Decimal)">
      <summary>傳回大於或等於指定之十進位數字的最小整數值。</summary>
      <param name="d">十進位數字。</param>
      <returns>大於或等於 <paramref name="d" /> 的最小整數值。 請注意，這個方法會傳回 <see cref="T:System.Decimal" />，而不是整數類型。</returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Double)">
      <summary>傳回大於或等於指定之雙精確度浮點數的最小整數值。</summary>
      <param name="a">雙精確度浮點數。</param>
      <returns>大於或等於 <paramref name="a" /> 的最小整數值。 如果 <paramref name="a" /> 等於 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，則會傳回該值。 請注意，這個方法會傳回 <see cref="T:System.Double" />，而不是整數類型。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Byte,System.Byte,System.Byte)">
      <summary>傳回限制為 <paramref name="min" /> 和 <paramref name="max" /> 內含範圍的 <paramref name="value" />。</summary>
      <param name="value">受限的值。</param>
      <param name="min">結果的下限。</param>
      <param name="max">結果的上限。</param>
      <returns>
        <paramref name="value" /> 如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />。
-或-
<paramref name="min" /> 如果 <paramref name="value" /> &lt; <paramref name="min" />。
-或-
<paramref name="max" /> 如果 <paramref name="max" /> &lt; <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)">
      <summary>傳回限制為 <paramref name="min" /> 和 <paramref name="max" /> 內含範圍的 <paramref name="value" />。</summary>
      <param name="value">受限的值。</param>
      <param name="min">結果的下限。</param>
      <param name="max">結果的上限。</param>
      <returns>
        <paramref name="value" /> 如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />。
-或-
<paramref name="min" /> 如果 <paramref name="value" /> &lt;<paramref name="min" />。
-或-
<paramref name="max" /> 如果 <paramref name="max" /> &lt; <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Double,System.Double,System.Double)">
      <summary>傳回限制為 <paramref name="min" /> 和 <paramref name="max" /> 內含範圍的 <paramref name="value" />。</summary>
      <param name="value">受限的值。</param>
      <param name="min">結果的下限。</param>
      <param name="max">結果的上限。</param>
      <returns>
        <paramref name="value" /> 如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />。
-或-
<paramref name="min" /> 如果 <paramref name="value" /> &lt; <paramref name="min" />。
-或-
<paramref name="max" /> 如果 <paramref name="max" /> &lt; <paramref name="value" />。``
-或-
<see cref="F:System.Double.NaN" /> 如果 <paramref name="value" /> 等於 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int16,System.Int16,System.Int16)">
      <summary>傳回限制為 <paramref name="min" /> 和 <paramref name="max" /> 內含範圍的 <paramref name="value" />。</summary>
      <param name="value">受限的值。</param>
      <param name="min">結果的下限。</param>
      <param name="max">結果的上限。</param>
      <returns>
        <paramref name="value" /> 如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />。
-或-
<paramref name="min" /> 如果 <paramref name="value" /> &lt; <paramref name="min" />。
-或-
<paramref name="max" /> 如果 <paramref name="max" /> &lt; <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int32,System.Int32,System.Int32)">
      <summary>傳回限制為 <paramref name="min" /> 和 <paramref name="max" /> 內含範圍的 <paramref name="value" />。</summary>
      <param name="value">受限的值。</param>
      <param name="min">結果的下限。</param>
      <param name="max">結果的上限。</param>
      <returns>
        <paramref name="value" /> 如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />。
-或-
<paramref name="min" /> 如果 <paramref name="value" /> &lt; <paramref name="min" />。
-或-
<paramref name="max" /> 如果 <paramref name="max" /> &lt; <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int64,System.Int64,System.Int64)">
      <summary>傳回限制為 <paramref name="min" /> 和 <paramref name="max" /> 內含範圍的 <paramref name="value" />。</summary>
      <param name="value">受限的值。</param>
      <param name="min">結果的下限。</param>
      <param name="max">結果的上限。</param>
      <returns>
        <paramref name="value" /> 如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />。
-或-
<paramref name="min" /> 如果 <paramref name="value" /> &lt; <paramref name="min" />。
-或-
<paramref name="max" /> 如果 <paramref name="max" /> &lt; <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.SByte,System.SByte,System.SByte)">
      <summary>傳回限制為 <paramref name="min" /> 和 <paramref name="max" /> 內含範圍的 <paramref name="value" />。</summary>
      <param name="value">受限的值。</param>
      <param name="min">結果的下限。</param>
      <param name="max">結果的上限。</param>
      <returns>
        <paramref name="value" /> 如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />。
-或-
<paramref name="min" /> 如果 <paramref name="value" /> &lt; <paramref name="min" />。
-或-
<paramref name="max" /> 如果 <paramref name="max" /> &lt; <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Single,System.Single,System.Single)">
      <summary>傳回限制為 <paramref name="min" /> 和 <paramref name="max" /> 內含範圍的 <paramref name="value" />。</summary>
      <param name="value">受限的值。</param>
      <param name="min">結果的下限。</param>
      <param name="max">結果的上限。</param>
      <returns>
        <paramref name="value" /> 如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />。
-或-
<paramref name="min" /> 如果 <paramref name="value" /> &lt; <paramref name="min" />。
-或-
<paramref name="max" /> 如果 <paramref name="max" /> &lt; <paramref name="value" />。
-或-
<see cref="F:System.Single.NaN" /> 如果 <paramref name="value" /> 等於 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)">
      <summary>傳回限制為 <paramref name="min" /> 和 <paramref name="max" /> 內含範圍的 <paramref name="value" />。</summary>
      <param name="value">受限的值。</param>
      <param name="min">結果的下限。</param>
      <param name="max">結果的上限。</param>
      <returns>
        <paramref name="value" /> 如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />。
-或-
<paramref name="min" /> 如果 <paramref name="value" /> &lt; <paramref name="min" />。
-或-
<paramref name="max" /> 如果 <paramref name="max" /> &lt; <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)">
      <summary>傳回限制為 <paramref name="min" /> 和 <paramref name="max" /> 內含範圍的 <paramref name="value" />。</summary>
      <param name="value">受限的值。</param>
      <param name="min">結果的下限。</param>
      <param name="max">結果的上限。</param>
      <returns>
        <paramref name="value" /> 如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />。
-或-
<paramref name="min" /> 如果 <paramref name="value" /> &lt; <paramref name="min" />。
-或-
<paramref name="max" /> 如果 <paramref name="max" /> &lt; <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)">
      <summary>傳回限制為 <paramref name="min" /> 和 <paramref name="max" /> 內含範圍的 <paramref name="value" />。</summary>
      <param name="value">受限的值。</param>
      <param name="min">結果的下限。</param>
      <param name="max">結果的上限。</param>
      <returns>
        <paramref name="value" /> 如果 <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />。
-或-
<paramref name="min" /> 如果 <paramref name="value" /> &lt; <paramref name="min" />。
-或-
<paramref name="max" /> 如果 <paramref name="max" /> &lt; <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Math.CopySign(System.Double,System.Double)">
      <summary>傳回量級為 <paramref name="x" /> 且符號為 <paramref name="y" /> 的值。</summary>
      <param name="x">在結果中使用其量級的數字。</param>
      <param name="y">在結果中使用其符號的數字。</param>
      <returns>量級為 <paramref name="x" /> 且符號為 <paramref name="y" /> 的值。</returns>
    </member>
    <member name="M:System.Math.Cos(System.Double)">
      <summary>傳回指定角的餘弦函數。</summary>
      <param name="d">以弧度為單位的角度。</param>
      <returns>
        <paramref name="d" /> 的餘弦函數。 如果 <paramref name="d" /> 等於 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，則這個方法會傳回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Cosh(System.Double)">
      <summary>傳回指定角的雙曲線餘弦函數。</summary>
      <param name="value">以弧度為單位的角度。</param>
      <returns>
        <paramref name="value" />的雙曲線餘弦函數。 如果 <paramref name="value" /> 等於 <see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，則會傳回 <see cref="F:System.Double.PositiveInfinity" />。 如果 <paramref name="value" /> 等於 <see cref="F:System.Double.NaN" />，則會傳回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.DivRem(System.Int32,System.Int32,System.Int32@)">
      <summary>計算兩個 32 位元帶正負號的整數商數，並傳回餘數做為輸出參數。</summary>
      <param name="a">被除數。</param>
      <param name="b">除數。</param>
      <param name="result">餘數。</param>
      <returns>指定之數值的商數。</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="b" /> 為零。</exception>
    </member>
    <member name="M:System.Math.DivRem(System.Int64,System.Int64,System.Int64@)">
      <summary>計算兩個 64 位元帶正負號的整數商數，並傳回餘數做為輸出參數。</summary>
      <param name="a">被除數。</param>
      <param name="b">除數。</param>
      <param name="result">餘數。</param>
      <returns>指定之數值的商數。</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="b" /> 為零。</exception>
    </member>
    <member name="F:System.Math.E">
      <summary>代表自然對數底數，由常數 <see langword="e" /> 指定。</summary>
    </member>
    <member name="M:System.Math.Exp(System.Double)">
      <summary>傳回具有指定乘冪數的 <see langword="e" />。</summary>
      <param name="d">指定乘冪數的數字。</param>
      <returns>數字 <see langword="e" /> 的 <paramref name="d" /> 次方。 如果 <paramref name="d" /> 等於 <see cref="F:System.Double.NaN" /> 或 <see cref="F:System.Double.PositiveInfinity" />，則傳回該值。 如果 <paramref name="d" /> 等於 <see cref="F:System.Double.NegativeInfinity" />，則傳回 0。</returns>
    </member>
    <member name="M:System.Math.Floor(System.Decimal)">
      <summary>傳回小於或等於指定十進位數字的最大整數值。</summary>
      <param name="d">十進位數字。</param>
      <returns>小於或等於 <paramref name="d" /> 的最大整數值。  請注意，方法會傳回 <see cref="T:System.Decimal" /> 類型的整數值。</returns>
    </member>
    <member name="M:System.Math.Floor(System.Double)">
      <summary>傳回小於或等於指定雙精確度浮點數的最大整數值。</summary>
      <param name="d">雙精確度浮點數。</param>
      <returns>小於或等於 <paramref name="d" /> 的最大整數值。 如果 <paramref name="d" /> 等於 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，則會傳回該值。</returns>
    </member>
    <member name="M:System.Math.FusedMultiplyAdd(System.Double,System.Double,System.Double)">
      <summary>傳回 (x * y) + z，四捨五入為一個三元運算。</summary>
      <param name="x">要乘以 <paramref name="y" /> 的數字。</param>
      <param name="y">要乘以 <paramref name="x" /> 的數字。</param>
      <param name="z">要新增至 <paramref name="x" /> 乘 <paramref name="y" /> 結果的數字。</param>
      <returns>(x * y) + z，四捨五入為一個三元運算。</returns>
    </member>
    <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
      <summary>傳回指定數字除以另一個指定數字所得的餘數。</summary>
      <param name="x">被除數。</param>
      <param name="y">除數。</param>
      <returns>等於 <paramref name="x" /> - ( <paramref name="y" /> Q) 的數字，其中 Q 是捨入至最接近整數的 <paramref name="x" /> / <paramref name="y" /> 商數 (如果 <paramref name="x" /> / <paramref name="y" /> 是兩個整數的中間數，則會傳回偶數整數)。
如果 <paramref name="x" /> - ( <paramref name="y" /> Q) 為零，則在 <paramref name="x" /> 為正時傳回值 +0，或在 <paramref name="x" /> 為負時傳回 -0。
如果 <paramref name="y" /> = 0，則傳回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.ILogB(System.Double)">
      <summary>傳回以 2 為底數時指定數字的整數對數。</summary>
      <param name="x">要找出其對數的數字。</param>
      <returns>下表的其中一個值。
 <paramref name="x" /> 參數 
  傳回值 
  預設 
  以 2 為底數時 <paramref name="x" /> 的整數對數，即 (int)log2(<paramref name="x" />)。  
  
  零 
 <see cref="F:System.Int32.MinValue" /> 等於 <see cref="F:System.Double.NaN" /> 或 <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Int32.MaxValue" /></returns>
    </member>
    <member name="M:System.Math.Log(System.Double)">
      <summary>傳回指定數字的自然 (底數為 <see langword="e" />) 對數。</summary>
      <param name="d">要找出其對數的數字。</param>
      <returns>下表的其中一個值。
 <paramref name="d" /> 參數 
  傳回值 
  正 
  <paramref name="d" /> 的自然對數，亦即 <paramref name="d" /> log e <paramref name="d" /> 零 
 <see cref="F:System.Double.NegativeInfinity" /> 負 
 <see cref="F:System.Double.NaN" /> 等於 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> 等於 <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Log(System.Double,System.Double)">
      <summary>傳回指定底數中指定數字的對數。</summary>
      <param name="a">要找出其對數的數字。</param>
      <param name="newBase">對數的底數。</param>
      <returns>下表的其中一個值。 (+Infinity 代表 <see cref="F:System.Double.PositiveInfinity" />、-Infinity 代表 <see cref="F:System.Double.NegativeInfinity" />，NaN 則代表 <see cref="F:System.Double.NaN" />。)
 <paramref name="a" /><paramref name="newBase" /> 傳回值 
 <paramref name="a" />&gt; 0 
  (0 &lt;<paramref name="newBase" />&lt; 1) -或-(<paramref name="newBase" />&gt; 1) 
  lognewBase(a) 
 <paramref name="a" />&lt; 0 
  (任意值) 
  NaN 
  (任意值) 
 <paramref name="newBase" />&lt; 0 
  NaN 
 <paramref name="a" /> != 1 
 <paramref name="newBase" /> = 0 
  NaN 
 <paramref name="a" /> != 1 
 <paramref name="newBase" /> = +Infinity 
  NaN 
 <paramref name="a" /> = NAN 
  (任意值) 
  NaN 
  (任意值) 
 <paramref name="newBase" /> = NAN 
  NaN 
  (任意值) 
 <paramref name="newBase" /> = 1 
  NaN 
 <paramref name="a" /> = 0 
  0 &lt;<paramref name="newBase" />&lt; 1 
  +Infinity 
 <paramref name="a" /> = 0 
 <paramref name="newBase" />&gt; 1 
  -Infinity 
 <paramref name="a" /> =  +Infinity 
  0 &lt;<paramref name="newBase" />&lt; 1 
  -Infinity 
 <paramref name="a" /> =  +Infinity 
 <paramref name="newBase" />&gt; 1 
  +Infinity 
 <paramref name="a" /> = 1 
 <paramref name="newBase" /> = 0 
  0 
 <paramref name="a" /> = 1 
 <paramref name="newBase" /> = +Infinity 
  0</returns>
    </member>
    <member name="M:System.Math.Log10(System.Double)">
      <summary>傳回指定數字的以 10 為底數的對數。</summary>
      <param name="d">要找出其對數的數字。</param>
      <returns>下表的其中一個值。
 <paramref name="d" /> 參數 
  傳回值 
  正 
  <paramref name="d" /> 的底數為 10 的對數，亦即 log 10<paramref name="d" />。  
  
  零 
 <see cref="F:System.Double.NegativeInfinity" /> 負 
 <see cref="F:System.Double.NaN" /> 等於 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> 等於 <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Log2(System.Double)">
      <summary>傳回以 2 為底數時指定數字的對數。</summary>
      <param name="x">要找出其對數的數字。</param>
      <returns>下表的其中一個值。
 <paramref name="x" /> 參數 
  傳回值 
  正 
  以2 為底數時 <paramref name="x" /> 的對數，亦即 log 2<paramref name="x" />。  
  
  零 
 <see cref="F:System.Double.NegativeInfinity" /> 負 
 <see cref="F:System.Double.NaN" /> 等於 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> 等於 <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Max(System.Byte,System.Byte)">
      <summary>傳回兩個 8 位元不帶正負號整數中較大的一個。</summary>
      <param name="val1">要比較的兩個 8 位元不帶正負號整數中的第一個。</param>
      <param name="val2">要比較的兩個 8 位元不帶正負號整數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較大者)。</returns>
    </member>
    <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
      <summary>傳回兩個十進位數字中較大的一個。</summary>
      <param name="val1">要比較的兩個十進位數字的第一個。</param>
      <param name="val2">要比較的兩個十進位數字中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較大者)。</returns>
    </member>
    <member name="M:System.Math.Max(System.Double,System.Double)">
      <summary>傳回兩個雙精確度浮點數中較大的一個。</summary>
      <param name="val1">要比較的兩個雙精確度浮點數中的第一個。</param>
      <param name="val2">要比較的兩個雙精確度浮點數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較大者)。 如果 <paramref name="val1" />、<paramref name="val2" /> 或 <paramref name="val1" /> 和 <paramref name="val2" /> 都等於 <see cref="F:System.Double.NaN" />，則會傳回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Max(System.Int16,System.Int16)">
      <summary>傳回兩個 16 位元帶正負號整數中較大的一個。</summary>
      <param name="val1">要比較的兩個 16 位元帶正負號整數中的第一個。</param>
      <param name="val2">要比較的兩個 16 位元帶正負號整數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較大者)。</returns>
    </member>
    <member name="M:System.Math.Max(System.Int32,System.Int32)">
      <summary>傳回兩個 32 位元帶正負號整數中較大的一個。</summary>
      <param name="val1">要比較的兩個 32 位元帶正負號整數中的第一個。</param>
      <param name="val2">要比較的兩個 32 位元帶正負號整數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較大者)。</returns>
    </member>
    <member name="M:System.Math.Max(System.Int64,System.Int64)">
      <summary>傳回兩個 64 位元帶正負號整數中較大的一個。</summary>
      <param name="val1">要比較的兩個 64 位元帶正負號整數中的第一個。</param>
      <param name="val2">要比較的兩個 64 位元帶正負號整數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較大者)。</returns>
    </member>
    <member name="M:System.Math.Max(System.SByte,System.SByte)">
      <summary>傳回兩個 8 位元帶正負號整數中較大的一個。</summary>
      <param name="val1">要比較的兩個 8 位元帶正負號整數中的第一個。</param>
      <param name="val2">要比較的兩個 8 位元帶正負號整數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較大者)。</returns>
    </member>
    <member name="M:System.Math.Max(System.Single,System.Single)">
      <summary>傳回兩個單精確度浮點數中較大的一個。</summary>
      <param name="val1">要比較的兩個單精確度浮點數中的第一個。</param>
      <param name="val2">要比較的兩個單精確度浮點數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較大者)。 如果 <paramref name="val1" /> 或 <paramref name="val2" />，或 <paramref name="val1" /> 和 <paramref name="val2" /> 都等於 <see cref="F:System.Single.NaN" />，則會傳回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
      <summary>傳回兩個 16 位元不帶正負號整數中較大的一個。</summary>
      <param name="val1">要比較的兩個 16 位元不帶正負號整數中的第一個。</param>
      <param name="val2">要比較的兩個 16 位元不帶正負號整數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較大者)。</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
      <summary>傳回兩個 32 位元不帶正負號整數中較大的一個。</summary>
      <param name="val1">要比較的兩個 32 位元不帶正負號整數中的第一個。</param>
      <param name="val2">要比較的兩個 32 位元不帶正負號整數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較大者)。</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
      <summary>傳回兩個 64 位元不帶正負號整數中較大的一個。</summary>
      <param name="val1">要比較的兩個 64 位元不帶正負號整數中的第一個。</param>
      <param name="val2">要比較的兩個 64 位元不帶正負號整數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較大者)。</returns>
    </member>
    <member name="M:System.Math.MaxMagnitude(System.Double,System.Double)">
      <summary>傳回兩個雙精確度浮點數中較大的那個量級。</summary>
      <param name="x">要比較的兩個雙精確度浮點數中的第一個。</param>
      <param name="y">要比較的兩個雙精確度浮點數中的第二個。</param>
      <returns>參數 <paramref name="x" /> 或 <paramref name="y" />，有較大量級的那個。 如果 <paramref name="x" /> 或 <paramref name="y" />，或 <paramref name="x" /> 和 <paramref name="y" /> 都等於 <see cref="F:System.Double.NaN" />，則會傳回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Min(System.Byte,System.Byte)">
      <summary>傳回兩個 8 位元不帶正負號整數中較小的一個。</summary>
      <param name="val1">要比較的兩個 8 位元不帶正負號整數中的第一個。</param>
      <param name="val2">要比較的兩個 8 位元不帶正負號整數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較小者)。</returns>
    </member>
    <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
      <summary>傳回兩個十進位數字中較小的一個。</summary>
      <param name="val1">要比較的兩個十進位數字的第一個。</param>
      <param name="val2">要比較的兩個十進位數字中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較小者)。</returns>
    </member>
    <member name="M:System.Math.Min(System.Double,System.Double)">
      <summary>傳回兩個雙精確度浮點數中較小的一個。</summary>
      <param name="val1">要比較的兩個雙精確度浮點數中的第一個。</param>
      <param name="val2">要比較的兩個雙精確度浮點數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較小者)。 如果 <paramref name="val1" />、<paramref name="val2" /> 或 <paramref name="val1" /> 和 <paramref name="val2" /> 都等於 <see cref="F:System.Double.NaN" />，則會傳回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Min(System.Int16,System.Int16)">
      <summary>傳回兩個 16 位元帶正負號整數中較小的一個。</summary>
      <param name="val1">要比較的兩個 16 位元帶正負號整數中的第一個。</param>
      <param name="val2">要比較的兩個 16 位元帶正負號整數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較小者)。</returns>
    </member>
    <member name="M:System.Math.Min(System.Int32,System.Int32)">
      <summary>傳回兩個 32 位元帶正負號整數中較小的一個。</summary>
      <param name="val1">要比較的兩個 32 位元帶正負號整數中的第一個。</param>
      <param name="val2">要比較的兩個 32 位元帶正負號整數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較小者)。</returns>
    </member>
    <member name="M:System.Math.Min(System.Int64,System.Int64)">
      <summary>傳回兩個 64 位元帶正負號整數中較小的一個。</summary>
      <param name="val1">要比較的兩個 64 位元帶正負號整數中的第一個。</param>
      <param name="val2">要比較的兩個 64 位元帶正負號整數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較小者)。</returns>
    </member>
    <member name="M:System.Math.Min(System.SByte,System.SByte)">
      <summary>傳回兩個 8 位元帶正負號整數中較小的一個。</summary>
      <param name="val1">要比較的兩個 8 位元帶正負號整數中的第一個。</param>
      <param name="val2">要比較的兩個 8 位元帶正負號整數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較小者)。</returns>
    </member>
    <member name="M:System.Math.Min(System.Single,System.Single)">
      <summary>傳回兩個單精確度浮點數中較小的一個。</summary>
      <param name="val1">要比較的兩個單精確度浮點數中的第一個。</param>
      <param name="val2">要比較的兩個單精確度浮點數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較小者)。 如果 <paramref name="val1" />、<paramref name="val2" /> 或 <paramref name="val1" /> 和 <paramref name="val2" /> 都等於 <see cref="F:System.Single.NaN" />，則會傳回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
      <summary>傳回兩個 16 位元不帶正負號整數中較小的一個。</summary>
      <param name="val1">要比較的兩個 16 位元不帶正負號整數中的第一個。</param>
      <param name="val2">要比較的兩個 16 位元不帶正負號整數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較小者)。</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
      <summary>傳回兩個 32 位元不帶正負號整數中較小的一個。</summary>
      <param name="val1">要比較的兩個 32 位元不帶正負號整數中的第一個。</param>
      <param name="val2">要比較的兩個 32 位元不帶正負號整數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較小者)。</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
      <summary>傳回兩個 64 位元不帶正負號整數中較小的一個。</summary>
      <param name="val1">要比較的兩個 64 位元不帶正負號整數中的第一個。</param>
      <param name="val2">要比較的兩個 64 位元不帶正負號整數中的第二個。</param>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" /> (取其較小者)。</returns>
    </member>
    <member name="M:System.Math.MinMagnitude(System.Double,System.Double)">
      <summary>傳回兩個雙精確度浮點數中較小的那個量級。</summary>
      <param name="x">要比較的兩個雙精確度浮點數中的第一個。</param>
      <param name="y">要比較的兩個雙精確度浮點數中的第二個。</param>
      <returns>參數 <paramref name="x" /> 或 <paramref name="y" />，有較小量級的那個。 如果 <paramref name="x" /> 或 <paramref name="y" />，或 <paramref name="x" /> 和 <paramref name="y" /> 都等於 <see cref="F:System.Double.NaN" />，則會傳回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="F:System.Math.PI">
      <summary>代表圓周率，由常數 π 指定。</summary>
    </member>
    <member name="M:System.Math.Pow(System.Double,System.Double)">
      <summary>傳回具有指定乘冪數的指定數字。</summary>
      <param name="x">雙精確度浮點數，做為乘冪數。</param>
      <param name="y">雙精確度浮點數，用來指定乘冪數。</param>
      <returns>數字 <paramref name="x" /> 的 <paramref name="y" /> 次方。</returns>
    </member>
    <member name="M:System.Math.Round(System.Decimal)">
      <summary>將十進位值四捨五入到最接近的整數值，並將中間點值四捨五入到最接近的偶數。</summary>
      <param name="d">要四捨五入的十進位數字。</param>
      <returns>最接近 <paramref name="d" /> 參數的整數。 如果 <paramref name="d" /> 的小數部分正好為兩個整數的中間數 (一個為偶數，另一個為奇數)，則會傳回偶數。 請注意，這個方法會傳回 <see cref="T:System.Decimal" />，而不是整數類型。</returns>
      <exception cref="T:System.OverflowException">結果位於 <see cref="T:System.Decimal" /> 的範圍之外。</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32)">
      <summary>將十進位值四捨五入到小數數字的指定數字，並將中間點值四捨五入到最接近的偶數。</summary>
      <param name="d">要四捨五入的十進位數字。</param>
      <param name="decimals">傳回值中的小數位數。</param>
      <returns>最接近 <paramref name="d" /> 的數字，其中包含等於 <paramref name="decimals" /> 的小數位數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> 小於 0 或大於 28。</exception>
      <exception cref="T:System.OverflowException">結果位於 <see cref="T:System.Decimal" /> 的範圍之外。</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)">
      <summary>將十進位值四捨五入到小數數字的指定數字，並使用中間點值的指定進位慣例。</summary>
      <param name="d">要四捨五入的十進位數字。</param>
      <param name="decimals">傳回值中的小數位數。</param>
      <param name="mode">指定如果 <paramref name="d" /> 介於另外兩個數字中間的四捨五入法。</param>
      <returns>最接近 <paramref name="d" /> 的數字，其中包含等於 <paramref name="decimals" /> 的小數位數。 如果 <paramref name="d" /> 的小數位數少於 <paramref name="decimals" />，<paramref name="d" /> 傳回時不會變更。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> 小於 0 或大於 28。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.MidpointRounding" /> 值。</exception>
      <exception cref="T:System.OverflowException">結果位於 <see cref="T:System.Decimal" /> 的範圍之外。</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.MidpointRounding)">
      <summary>將十進位值四捨五入到最接近的整數，並使用中間點值的指定進位慣例。</summary>
      <param name="d">要四捨五入的十進位數字。</param>
      <param name="mode">指定如果 <paramref name="d" /> 介於另外兩個數字中間的四捨五入法。</param>
      <returns>最接近 <paramref name="d" /> 的整數。 如果 <paramref name="d" /> 正好為兩個數字的中間數 (一個為偶數，另一個為奇數)，則 <paramref name="mode" /> 會判斷要傳回哪個數字。 請注意，這個方法會傳回 <see cref="T:System.Decimal" />，而不是整數類型。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.MidpointRounding" /> 值。</exception>
      <exception cref="T:System.OverflowException">結果位於 <see cref="T:System.Decimal" /> 的範圍之外。</exception>
    </member>
    <member name="M:System.Math.Round(System.Double)">
      <summary>將雙精確度浮點數值四捨五入到最接近的整數值，並將中間點值四捨五入到最接近的偶數。</summary>
      <param name="a">要四捨五入的雙精確度浮點數。</param>
      <returns>最接近 <paramref name="a" /> 的整數。 如果 <paramref name="a" /> 的小數部分正好為兩個整數的中間數 (一個為偶數，另一個為奇數)，則會傳回偶數。 請注意，這個方法會傳回 <see cref="T:System.Double" />，而不是整數類型。</returns>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32)">
      <summary>將雙精確度浮點數值四捨五入到小數數字的指定數字，並將中間點值四捨五入到最接近的偶數。</summary>
      <param name="value">要四捨五入的雙精確度浮點數。</param>
      <param name="digits">傳回值中小數點後數字的數目。</param>
      <returns>最接近 <paramref name="value" /> 的數字，其中包含等於 <paramref name="digits" /> 的小數位數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> 小於 0 或大於 15。</exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)">
      <summary>將雙精確度浮點數值四捨五入到小數數字的指定數字，並使用中間點值的指定進位慣例。</summary>
      <param name="value">要四捨五入的雙精確度浮點數。</param>
      <param name="digits">傳回值中小數點後數字的數目。</param>
      <param name="mode">指定如果 <paramref name="value" /> 介於另外兩個數字中間的四捨五入法。</param>
      <returns>最接近 <paramref name="value" /> 的數字，其中包含等於 <paramref name="digits" /> 的小數位數。 如果 <paramref name="value" /> 的小數位數少於 <paramref name="digits" />，<paramref name="value" /> 傳回時不會變更。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> 小於 0 或大於 15。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.MidpointRounding" /> 值。</exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.MidpointRounding)">
      <summary>將雙精確度浮點數值四捨五入到最接近的整數，並使用中間點值的指定進位慣例。</summary>
      <param name="value">要四捨五入的雙精確度浮點數。</param>
      <param name="mode">指定如果 <paramref name="value" /> 介於另外兩個數字中間的四捨五入法。</param>
      <returns>最接近 <paramref name="value" /> 的整數。 如果 <paramref name="value" /> 正好為兩個整數的中間數 (一個為偶數，另一個為奇數)，則 <paramref name="mode" /> 會判斷要傳回哪個整數。 請注意，這個方法會傳回 <see cref="T:System.Double" />，而不是整數類型。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.MidpointRounding" /> 值。</exception>
    </member>
    <member name="M:System.Math.ScaleB(System.Double,System.Int32)">
      <summary>傳回有效率計算的 x * 2^n。</summary>
      <param name="x">單精確度浮點數，用來指定基底值。</param>
      <param name="n">單精確度浮點數，用來指定乘冪數。</param>
      <returns>有效率計算的 x * 2^n。</returns>
    </member>
    <member name="M:System.Math.Sign(System.Decimal)">
      <summary>傳回整數，這個整數表示十進位數字的正負號。</summary>
      <param name="value">帶正負號的十進位數值。</param>
      <returns>表示 <paramref name="value" /> 正負符號的數字，如下表所示。
  傳回值 
  意義 
  -1 
 <paramref name="value" /> 小於零。  
  
  0 
 <paramref name="value" /> 等於零。  
  
  1 
 <paramref name="value" /> 大於零。</returns>
    </member>
    <member name="M:System.Math.Sign(System.Double)">
      <summary>傳回整數，表示雙精確度浮點數的正負號。</summary>
      <param name="value">帶正負號的數字。</param>
      <returns>表示 <paramref name="value" /> 正負符號的數字，如下表所示。
  傳回值 
  意義 
  -1 
 <paramref name="value" /> 小於零。  
  
  0 
 <paramref name="value" /> 等於零。  
  
  1 
 <paramref name="value" /> 大於零。</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> 等於 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.Math.Sign(System.Int16)">
      <summary>傳回整數，這個整數表示 16 位元帶正負號整數的正負號。</summary>
      <param name="value">帶正負號的數字。</param>
      <returns>表示 <paramref name="value" /> 正負符號的數字，如下表所示。
  傳回值 
  意義 
  -1 
 <paramref name="value" /> 小於零。  
  
  0 
 <paramref name="value" /> 等於零。  
  
  1 
 <paramref name="value" /> 大於零。</returns>
    </member>
    <member name="M:System.Math.Sign(System.Int32)">
      <summary>傳回整數，這個整數表示 32 位元帶正負號整數的正負號。</summary>
      <param name="value">帶正負號的數字。</param>
      <returns>表示 <paramref name="value" /> 正負符號的數字，如下表所示。
  傳回值 
  意義 
  -1 
 <paramref name="value" /> 小於零。  
  
  0 
 <paramref name="value" /> 等於零。  
  
  1 
 <paramref name="value" /> 大於零。</returns>
    </member>
    <member name="M:System.Math.Sign(System.Int64)">
      <summary>傳回整數，表示 64 位元帶正負號整數的正負號。</summary>
      <param name="value">帶正負號的數字。</param>
      <returns>表示 <paramref name="value" /> 正負符號的數字，如下表所示。
  傳回值 
  意義 
  -1 
 <paramref name="value" /> 小於零。  
  
  0 
 <paramref name="value" /> 等於零。  
  
  1 
 <paramref name="value" /> 大於零。</returns>
    </member>
    <member name="M:System.Math.Sign(System.SByte)">
      <summary>傳回整數，表示 8 位元帶正負號整數的正負號。</summary>
      <param name="value">帶正負號的數字。</param>
      <returns>表示 <paramref name="value" /> 正負符號的數字，如下表所示。
  傳回值 
  意義 
  -1 
 <paramref name="value" /> 小於零。  
  
  0 
 <paramref name="value" /> 等於零。  
  
  1 
 <paramref name="value" /> 大於零。</returns>
    </member>
    <member name="M:System.Math.Sign(System.Single)">
      <summary>傳回整數，表示單精確度浮點數的正負號。</summary>
      <param name="value">帶正負號的數字。</param>
      <returns>表示 <paramref name="value" /> 正負符號的數字，如下表所示。
  傳回值 
  意義 
  -1 
 <paramref name="value" /> 小於零。  
  
  0 
 <paramref name="value" /> 等於零。  
  
  1 
 <paramref name="value" /> 大於零。</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> 等於 <see cref="F:System.Single.NaN" />。</exception>
    </member>
    <member name="M:System.Math.Sin(System.Double)">
      <summary>傳回指定角的正弦函數。</summary>
      <param name="a">以弧度為單位的角度。</param>
      <returns>
        <paramref name="a" />的正弦函數。 如果 <paramref name="a" /> 等於 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，則這個方法會傳回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Sinh(System.Double)">
      <summary>傳回指定角的雙曲線正弦函數。</summary>
      <param name="value">以弧度為單位的角度。</param>
      <returns>
        <paramref name="value" />的雙曲線正弦函數。 如果 <paramref name="value" /> 等於 <see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NaN" />，則這個方法會傳回等於 <paramref name="value" /> 的 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.Math.Sqrt(System.Double)">
      <summary>傳回指定數字的平方根。</summary>
      <param name="d">要找出其平方根的數字。</param>
      <returns>下表的其中一個值。
 <paramref name="d" /> 參數 
  傳回值 
  零或正數 
  <paramref name="d" /> 的正平方根。  
  
  負 
 <see cref="F:System.Double.NaN" /> 等於 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> 等於 <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Tan(System.Double)">
      <summary>傳回指定角的正切函數。</summary>
      <param name="a">以弧度為單位的角度。</param>
      <returns>的正切函數<paramref name="a" />。 如果 <paramref name="a" /> 等於 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，則這個方法會傳回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Tanh(System.Double)">
      <summary>傳回指定角的雙曲線正切函數。</summary>
      <param name="value">以弧度為單位的角度。</param>
      <returns>
        <paramref name="value" />的雙曲線正切函數。 如果 <paramref name="value" /> 等於 <see cref="F:System.Double.NegativeInfinity" />，則這個方法會傳回 -1。 如果值等於 <see cref="F:System.Double.PositiveInfinity" />，則這個方法會傳回 1。 如果 <paramref name="value" /> 等於 <see cref="F:System.Double.NaN" />，則這個方法會傳回 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="M:System.Math.Truncate(System.Decimal)">
      <summary>計算指定的十進位數字的整數部分。</summary>
      <param name="d">要截斷的數字。</param>
      <returns>
        <paramref name="d" /> 的整數部分；換言之，捨棄所有小數點後的數字。</returns>
    </member>
    <member name="M:System.Math.Truncate(System.Double)">
      <summary>計算指定的雙精確度浮點數的整數部分。</summary>
      <param name="d">要截斷的數字。</param>
      <returns>
        <paramref name="d" /> 的整數部分；換言之，捨棄所有小數點後的數字，或是下表中列出的其中一個值。
<paramref name="d" /> 傳回值 
<see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="T:System.MathF">
      <summary>提供三角函數、對數函數和其他一般數學函數的常數和靜態方法。</summary>
    </member>
    <member name="M:System.MathF.Abs(System.Single)">
      <summary>傳回單精確度浮點數的絕對值。</summary>
      <param name="x">大於或等於 <see cref="F:System.Single.MinValue" />但小於或等於 <see cref="F:System.Single.MaxValue" /> 的數字。</param>
      <returns>單精確度浮點數 x，其滿足下列條件 0 ≤ x ≤ <see cref="F:System.Single.MaxValue" />。</returns>
    </member>
    <member name="M:System.MathF.Acos(System.Single)">
      <summary>傳回餘弦函數 (Cosine) 是指定數字的角。</summary>
      <param name="x">代表餘弦函數的數字，其中 <paramref name="x" /> 必須大於或等於 -1 但小於或等於 1。</param>
      <returns>以弧度為單位的角度 θ，其滿足下列條件 0 ≤ θ ≤ π。
-或-
如果 <paramref name="x" /> &lt; -1 或 <paramref name="x" /> &gt; 1 或 <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" />，則為 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Acosh(System.Single)">
      <summary>傳回雙曲線餘弦函數是指定數字的角。</summary>
      <param name="x">代表雙曲線餘弦函數的數字，其中 <paramref name="x" /> 必須大於或等於 1，但小於或等於 <see cref="F:System.Single.PositiveInfinity" />。</param>
      <returns>以弧度為單位的角度 θ，其滿足下列條件 0 ≤ θ ≤ ∞。
-或-
<see cref="F:System.Single.NaN" /> 如果 <paramref name="x" /> &lt; 1 或 <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Asin(System.Single)">
      <summary>傳回正弦函數 (Sine) 是指定數字的角。</summary>
      <param name="x">代表正弦函數的數字，其中 <paramref name="x" /> 必須大於或等於 -1，但小於或等於 1。</param>
      <returns>以弧度為單位的角度 θ，其滿足下列條件 -π/2 ≤ θ ≤ π/2。
-或-
如果 <paramref name="x" /> &lt; -1 或 <paramref name="x" /> &gt; 1 或 <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" />，則為 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Asinh(System.Single)">
      <summary>傳回雙曲線正弦函數是指定數字的角。</summary>
      <param name="x">代表雙曲線正弦函數的數字，其中 <paramref name="x" /> 必須大於或等於 <see cref="F:System.Single.NegativeInfinity" />，但小於或等於 <see cref="F:System.Single.PositiveInfinity" />。</param>
      <returns>以弧度為單位的角度 θ，其滿足下列條件 -∞ &lt; θ ≤ -1，或 1 ≤ θ &lt; ∞。
-或-
<see cref="F:System.Single.NaN" /> 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Atan(System.Single)">
      <summary>傳回正切函數 (Tangent) 是指定數字的角。</summary>
      <param name="x">代表正切的數字。</param>
      <returns>以弧度為單位的角度 θ，其滿足下列條件 -π/2 ≤ θ ≤ π/2。
-或-
如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" />，則為 <see cref="F:System.Single.NaN" />；如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NegativeInfinity" />，則為 -π/2，四捨五入為雙精度 (-1.5707963267949)；如果 <paramref name="x" /> 等於 <see cref="F:System.Single.PositiveInfinity" />，則為 π/2，四捨五入為雙精度 (1.5707963267949)。</returns>
    </member>
    <member name="M:System.MathF.Atan2(System.Single,System.Single)">
      <summary>傳回正切函數是兩個指定數字之商數的角。</summary>
      <param name="y">某個點的 Y 座標。</param>
      <param name="x">某個點的 X 座標。</param>
      <returns>以弧度為單位的角度 θ，其滿足下列條件 -π ≤ θ ≤ π，且 tan(θ) = <paramref name="y" /> / <paramref name="x" />，其中 (<paramref name="x" />, <paramref name="y" />) 是笛卡兒平面上的點。 注意下列各項：

如果 (<paramref name="x" />, <paramref name="y" />) 在第 1 象限，則0 &lt; θ &lt; π/2。

如果 (<paramref name="x" />, <paramref name="y" />) 在第 2 象限，則 π/2 &lt; θ ≤ π。

如果 (<paramref name="x" />, <paramref name="y" />) 在第 3 象限，則 -π &lt; θ &lt; -π/2。

如果 (<paramref name="x" />, <paramref name="y" />) 在第 4 象限，則 -π/2 &lt; θ &lt; 0。


如果是位在象限界限上的點，則傳回值如下：

如果 y 是 0，且 x 不是負值，則 θ = 0。

如果 y 是 0，且 x 是負值，則 θ = π。

如果 y 是正值，且 x 是 0，則 θ = π/2。

如果 y 是負值，而 x 是 0，則 θ = -π/2。

如果 y 是 0 且 x 是 0，則 θ = 0。


如果 <paramref name="x" /> 或 <paramref name="y" /> 為 <see cref="F:System.Single.NaN" />，或者 <paramref name="x" /> 和 <paramref name="y" /> 為 <see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />，這個方法會傳回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Atanh(System.Single)">
      <summary>傳回雙曲線正弦函數是指定數字的角。</summary>
      <param name="x">代表雙曲線正切函數的數字，其中 <paramref name="x" /> 必須大於或等於 -1，但小於或等於 1。</param>
      <returns>以弧度為單位的角度 θ，其滿足下列條件 -∞ &lt; θ &lt;-1，或 1 &lt; θ &lt; ∞。
-或-
如果 <paramref name="x" /> &lt; -1 或 <paramref name="x" /> &gt; 1 或 <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" />，則為 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.BitDecrement(System.Single)">
      <summary>傳回下一個比 <paramref name="x" /> 小的最小值。</summary>
      <param name="x">要遞減的值。</param>
      <returns>下一個比 <paramref name="x" /> 小的最小值。
-或-
<see cref="F:System.Single.NegativeInfinity" /> 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NegativeInfinity" />。
-或-
<see cref="F:System.Single.NaN" /> 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.BitIncrement(System.Single)">
      <summary>傳回下一個大於 <paramref name="x" /> 的最大值。</summary>
      <param name="x">要遞增的值。</param>
      <returns>下一個大於 <paramref name="x" /> 的最大值。
-或-
<see cref="F:System.Single.PositiveInfinity" /> 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.PositiveInfinity" />。
-或-
<see cref="F:System.Single.NaN" /> 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Cbrt(System.Single)">
      <summary>傳回指定數字的立方根。</summary>
      <param name="x">要找出其立方根的數字。</param>
      <returns>
        <paramref name="x" /> 的立方根。
-或-
<see cref="F:System.Single.NaN" /> 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Ceiling(System.Single)">
      <summary>傳回大於或等於所指定單精確度浮點數的最小整數值。</summary>
      <param name="x">單精確度浮點數。</param>
      <returns>大於或等於 <paramref name="x" /> 的最小整數值。 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" /> 或 <see cref="F:System.Single.PositiveInfinity" />，則會傳回該值。 請注意，這個方法會傳回 <see cref="T:System.Single" />，而不是整數類型。</returns>
    </member>
    <member name="M:System.MathF.CopySign(System.Single,System.Single)">
      <summary>傳回量級為 <paramref name="x" /> 且符號為 <paramref name="y" /> 的值。</summary>
      <param name="x">在結果中使用其量級的數字。</param>
      <param name="y">在結果中使用其符號的數字。</param>
      <returns>量級為 <paramref name="x" /> 且符號為 <paramref name="y" /> 的值。</returns>
    </member>
    <member name="M:System.MathF.Cos(System.Single)">
      <summary>傳回指定角的餘弦函數。</summary>
      <param name="x">以弧度為單位的角度。</param>
      <returns>
        <paramref name="x" /> 的餘弦函數。 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" /> 或 <see cref="F:System.Single.PositiveInfinity" />，則這個方法會傳回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Cosh(System.Single)">
      <summary>傳回指定角的雙曲線餘弦函數。</summary>
      <param name="x">以弧度為單位的角度。</param>
      <returns>
        <paramref name="x" />的雙曲線餘弦函數。 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NegativeInfinity" /> 或 <see cref="F:System.Single.PositiveInfinity" />，則會傳回 <see cref="F:System.Single.PositiveInfinity" />。 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" />，則會傳回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="F:System.MathF.E">
      <summary>代表自然對數底數，由常數 <see langword="e" /> 指定。</summary>
    </member>
    <member name="M:System.MathF.Exp(System.Single)">
      <summary>傳回具有指定乘冪數的 <see langword="e" />。</summary>
      <param name="x">指定乘冪數的數字。</param>
      <returns>數字 <see langword="e" /> 的 <paramref name="x" /> 次方。 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" /> 或 <see cref="F:System.Single.PositiveInfinity" />，則傳回該值。 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NegativeInfinity" />，則傳回 0。</returns>
    </member>
    <member name="M:System.MathF.Floor(System.Single)">
      <summary>傳回小於或等於指定單精確度浮點數的最大整數值。</summary>
      <param name="x">單精確度浮點數。</param>
      <returns>小於或等於 <paramref name="x" /> 的最大整數值。 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" /> 或 <see cref="F:System.Single.PositiveInfinity" />，則會傳回該值。</returns>
    </member>
    <member name="M:System.MathF.FusedMultiplyAdd(System.Single,System.Single,System.Single)">
      <summary>傳回 (x * y) + z，四捨五入為一個三元運算。</summary>
      <param name="x">要乘以 <paramref name="y" /> 的數字。</param>
      <param name="y">要乘以 <paramref name="x" /> 的數字。</param>
      <param name="z">要新增至 <paramref name="x" /> 乘 <paramref name="y" /> 結果的數字。</param>
      <returns>(x * y) + z，四捨五入為一個三元運算。</returns>
    </member>
    <member name="M:System.MathF.IEEERemainder(System.Single,System.Single)">
      <summary>傳回指定數字除以另一個指定數字所得的餘數。</summary>
      <param name="x">被除數。</param>
      <param name="y">除數。</param>
      <returns>等於 <paramref name="x" /> - ( <paramref name="y" /> Q) 的數字，其中 Q 是捨入至最接近整數的 <paramref name="x" /> / <paramref name="y" /> 商數 (如果 <paramref name="x" /> / <paramref name="y" /> 是兩個整數的中間數，則會傳回偶數整數)。
如果 <paramref name="x" /> - ( <paramref name="y" /> Q) 為零，則在 <paramref name="x" /> 為正時傳回值 +0，或在 <paramref name="x" /> 為負時傳回 -0。
如果 <paramref name="y" /> = 0，則傳回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.ILogB(System.Single)">
      <summary>傳回以 2 為底數時指定數字的整數對數。</summary>
      <param name="x">要找出其對數的數字。</param>
      <returns>下表的其中一個值。
 <paramref name="x" /> 參數 
  傳回值 
  預設 
  以 2 為底數時 <paramref name="x" /> 的整數對數，即 (int)log2(<paramref name="x" />)。  
  
  零 
 <see cref="F:System.Int32.MinValue" /> 等於 <see cref="F:System.Single.NaN" /> 或 <see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" /><see cref="F:System.Int32.MaxValue" /></returns>
    </member>
    <member name="M:System.MathF.Log(System.Single)">
      <summary>傳回指定數字的自然 (底數為 <see langword="e" />) 對數。</summary>
      <param name="x">要找出其對數的數字。</param>
      <returns>下表的其中一個值。
 <paramref name="x" /> 參數 
  傳回值 
  正 
  <paramref name="x" /> 的自然對數，亦即 <paramref name="x" /> log e <paramref name="x" /> 零 
 <see cref="F:System.Single.NegativeInfinity" /> 負 
 <see cref="F:System.Single.NaN" /> 等於 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> 等於 <see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Log(System.Single,System.Single)">
      <summary>傳回指定底數中指定數字的對數。</summary>
      <param name="x">要找出其對數的數字。</param>
      <param name="y">底數。</param>
      <returns>下表的其中一個值。 (+Infinity 代表 <see cref="F:System.Single.PositiveInfinity" />、-Infinity 代表 <see cref="F:System.Single.NegativeInfinity" />，NaN 則代表 <see cref="F:System.Single.NaN" />。)
 <paramref name="x" /><paramref name="newBase" /> 傳回值 
 <paramref name="x" />&gt; 0 
  (0 &lt;<paramref name="newBase" />&lt; 1) -或-(<paramref name="newBase" />&gt; 1) 
  lognewBase(a) 
 <paramref name="x" />&lt; 0 
  (任意值) 
  NaN 
  (任意值) 
 <paramref name="newBase" />&lt; 0 
  NaN 
 <paramref name="x" /> != 1 
 <paramref name="newBase" /> = 0 
  NaN 
 <paramref name="x" /> != 1 
 <paramref name="newBase" /> = +Infinity 
  NaN 
 <paramref name="x" /> = NAN 
  (任意值) 
  NaN 
  (任意值) 
 <paramref name="newBase" /> = NAN 
  NaN 
  (任意值) 
 <paramref name="newBase" /> = 1 
  NaN 
 <paramref name="x" /> = 0 
  0 &lt;<paramref name="newBase" />&lt; 1 
  +Infinity 
 <paramref name="x" /> = 0 
 <paramref name="newBase" />&gt; 1 
  -Infinity 
 <paramref name="x" /> =  +Infinity 
  0 &lt;<paramref name="newBase" />&lt; 1 
  -Infinity 
 <paramref name="x" /> =  +Infinity 
 <paramref name="newBase" />&gt; 1 
  +Infinity 
 <paramref name="x" /> = 1 
 <paramref name="newBase" /> = 0 
  0 
 <paramref name="x" /> = 1 
 <paramref name="newBase" /> = +Infinity 
  0</returns>
    </member>
    <member name="M:System.MathF.Log10(System.Single)">
      <summary>傳回指定數字的以 10 為底數的對數。</summary>
      <param name="x">要找出其對數的數字。</param>
      <returns>下表的其中一個值。
 <paramref name="x" /> 參數 
  傳回值 
  正 
  <paramref name="x" /> 的底數為 10 的對數，亦即 log 10<paramref name="x" />。  
  
  零 
 <see cref="F:System.Single.NegativeInfinity" /> 負 
 <see cref="F:System.Single.NaN" /> 等於 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> 等於 <see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Log2(System.Single)">
      <summary>傳回以 2 為底數時指定數字的對數。</summary>
      <param name="x">要找出其對數的數字。</param>
      <returns>下表的其中一個值。
 <paramref name="x" /> 參數 
  傳回值 
  正 
  以2 為底數時 <paramref name="x" /> 的對數，亦即 log 2<paramref name="x" />。  
  
  零 
 <see cref="F:System.Single.NegativeInfinity" /> 負 
 <see cref="F:System.Single.NaN" /> 等於 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> 等於 <see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Max(System.Single,System.Single)">
      <summary>傳回兩個單精確度浮點數中較大的一個。</summary>
      <param name="x">要比較的兩個單精確度浮點數中的第一個。</param>
      <param name="y">要比較的兩個單精確度浮點數中的第二個。</param>
      <returns>參數 <paramref name="x" /> 或 <paramref name="y" /> (取其較大者)。 如果 <paramref name="x" /> 或 <paramref name="y" />，或 <paramref name="x" /> 和 <paramref name="y" /> 都等於 <see cref="F:System.Single.NaN" />，則會傳回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.MaxMagnitude(System.Single,System.Single)">
      <summary>傳回兩個單精確度浮點數中較大的那個量級。</summary>
      <param name="x">要比較的兩個單精確度浮點數中的第一個。</param>
      <param name="y">要比較的兩個單精確度浮點數中的第二個。</param>
      <returns>參數 <paramref name="x" /> 或 <paramref name="y" />，有較大量級的那個。 如果 <paramref name="x" /> 或 <paramref name="y" />，或 <paramref name="x" /> 和 <paramref name="y" /> 都等於 <see cref="F:System.Single.NaN" />，則會傳回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Min(System.Single,System.Single)">
      <summary>傳回兩個單精確度浮點數中較小的一個。</summary>
      <param name="x">要比較的兩個單精確度浮點數中的第一個。</param>
      <param name="y">要比較的兩個單精確度浮點數中的第二個。</param>
      <returns>參數 <paramref name="x" /> 或 <paramref name="y" /> (取其較小者)。 如果 <paramref name="x" />、<paramref name="y" /> 或 <paramref name="x" /> 和 <paramref name="y" /> 都等於 <see cref="F:System.Single.NaN" />，則會傳回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.MinMagnitude(System.Single,System.Single)">
      <summary>傳回兩個單精確度浮點數中較小的那個量級。</summary>
      <param name="x">要比較的兩個單精確度浮點數中的第一個。</param>
      <param name="y">要比較的兩個單精確度浮點數中的第二個。</param>
      <returns>參數 <paramref name="x" /> 或 <paramref name="y" />，有較小量級的那個。 如果 <paramref name="x" /> 或 <paramref name="y" />，或 <paramref name="x" /> 和 <paramref name="y" /> 都等於 <see cref="F:System.Single.NaN" />，則會傳回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="F:System.MathF.PI">
      <summary>代表圓周率，由常數 π 指定。</summary>
    </member>
    <member name="M:System.MathF.Pow(System.Single,System.Single)">
      <summary>傳回具有指定乘冪數的指定數字。</summary>
      <param name="x">單精確度浮點數，作為乘冪數。</param>
      <param name="y">單精確度浮點數，用來指定乘冪數。</param>
      <returns>數字 <paramref name="x" /> 的 <paramref name="y" /> 次方。</returns>
    </member>
    <member name="M:System.MathF.Round(System.Single)">
      <summary>將單精確度浮點數值四捨五入到最接近的整數值，並將中間點值四捨五入到最接近的偶數。</summary>
      <param name="x">要四捨五入的單精確度浮點數。</param>
      <returns>最接近 <paramref name="x" /> 的整數。 如果 <paramref name="x" /> 的小數部分正好為兩個整數的中間數 (一個為偶數，另一個為奇數)，則會傳回偶數。 請注意，這個方法會傳回 <see cref="T:System.Single" />，而不是整數類型。</returns>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.Int32)">
      <summary>將單精確度浮點數值四捨五入到小數數字的指定數字，並將中間點值四捨五入到最接近的偶數。</summary>
      <param name="x">要四捨五入的單精確度浮點數。</param>
      <param name="digits">傳回值中小數點後數字的數目。</param>
      <returns>最接近 <paramref name="x" /> 的數字，其中包含等於 <paramref name="digits" /> 的小數位數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> 小於 0 或大於 6。</exception>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.Int32,System.MidpointRounding)">
      <summary>將單精確度浮點數值四捨五入到小數數字的指定數字，並使用中間點值的指定進位慣例。</summary>
      <param name="x">要四捨五入的單精確度浮點數。</param>
      <param name="digits">傳回值中小數點後數字的數目。</param>
      <param name="mode">指定如果 <paramref name="x" /> 介於另外兩個數字中間的四捨五入法。</param>
      <returns>最接近 <paramref name="x" /> 的數字，其中包含等於 <paramref name="digits" /> 的小數位數。 如果 <paramref name="x" /> 的小數位數少於 <paramref name="digits" />，<paramref name="x" /> 傳回時不會變更。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> 小於 0 或大於 6。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.MidpointRounding" /> 值。</exception>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.MidpointRounding)">
      <summary>將單精確度浮點數值四捨五入到最接近的整數，並使用中間點值的指定進位慣例。</summary>
      <param name="x">要四捨五入的單精確度浮點數。</param>
      <param name="mode">指定如果 <paramref name="x" /> 介於另外兩個數字中間的四捨五入法。</param>
      <returns>最接近 <paramref name="x" /> 的整數。 如果 <paramref name="x" /> 正好為兩個整數的中間數 (一個為偶數，另一個為奇數)，則 <paramref name="mode" /> 會判斷要傳回哪個整數。 請注意，這個方法會傳回 <see cref="T:System.Single" />，而不是整數類型。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.MidpointRounding" /> 值。</exception>
    </member>
    <member name="M:System.MathF.ScaleB(System.Single,System.Int32)">
      <summary>傳回有效率計算的 x * 2^n。</summary>
      <param name="x">單精確度浮點數，用來指定基底值。</param>
      <param name="n">單精確度浮點數，用來指定乘冪數。</param>
      <returns>有效率計算的 x * 2^n。</returns>
    </member>
    <member name="M:System.MathF.Sign(System.Single)">
      <summary>傳回整數，表示單精確度浮點數的正負號。</summary>
      <param name="x">帶正負號的數字。</param>
      <returns>表示 <paramref name="x" /> 正負符號的數字，如下表所示。
  傳回值 
  意義 
  -1 
 <paramref name="x" /> 小於零。  
  
  0 
 <paramref name="x" /> 等於零。  
  
  1 
 <paramref name="x" /> 大於零。</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" />。</exception>
    </member>
    <member name="M:System.MathF.Sin(System.Single)">
      <summary>傳回指定角的正弦函數。</summary>
      <param name="x">以弧度為單位的角度。</param>
      <returns>
        <paramref name="x" />的正弦函數。 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" /> 或 <see cref="F:System.Single.PositiveInfinity" />，則這個方法會傳回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Sinh(System.Single)">
      <summary>傳回指定角的雙曲線正弦函數。</summary>
      <param name="x">以弧度為單位的角度。</param>
      <returns>
        <paramref name="x" />的雙曲線正弦函數。 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NegativeInfinity" />、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NaN" />，則這個方法會傳回等於 <paramref name="x" /> 的 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.MathF.Sqrt(System.Single)">
      <summary>傳回指定數字的平方根。</summary>
      <param name="x">要找出其平方根的數字。</param>
      <returns>下表的其中一個值。
 <paramref name="x" /> 參數 
  傳回值 
  零或正數 
  <paramref name="x" /> 的正平方根。  
  
  負 
 <see cref="F:System.Single.NaN" /> 等於 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> 等於 <see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Tan(System.Single)">
      <summary>傳回指定角的正切函數。</summary>
      <param name="x">以弧度為單位的角度。</param>
      <returns>的正切函數<paramref name="x" />。 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" /> 或 <see cref="F:System.Single.PositiveInfinity" />，則這個方法會傳回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Tanh(System.Single)">
      <summary>傳回指定角的雙曲線正切函數。</summary>
      <param name="x">以弧度為單位的角度。</param>
      <returns>
        <paramref name="x" />的雙曲線正切函數。 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NegativeInfinity" />，則這個方法會傳回 -1。 如果值等於 <see cref="F:System.Single.PositiveInfinity" />，則這個方法會傳回 1。 如果 <paramref name="x" /> 等於 <see cref="F:System.Single.NaN" />，則這個方法會傳回 <see cref="F:System.Single.NaN" />。</returns>
    </member>
    <member name="M:System.MathF.Truncate(System.Single)">
      <summary>計算所指定單精確度浮點數的整數部分。</summary>
      <param name="x">要截斷的數字。</param>
      <returns>
        <paramref name="x" /> 的整數部分；換言之，捨棄所有小數點後的數字，或是下表中列出的其中一個值。
<paramref name="x" /> 傳回值 
<see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /><see cref="F:System.Single.NegativeInfinity" /><see cref="F:System.Single.NegativeInfinity" /><see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="T:System.Net.WebUtility">
      <summary>提供處理 Web 要求時用於編碼和解碼 URL 的方法。</summary>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String)">
      <summary>將 HTTP 傳輸的 HTTP 編碼字串轉換成已解碼的字串。</summary>
      <param name="value">要解碼的字串。</param>
      <returns>已解碼的字串。</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String,System.IO.TextWriter)">
      <summary>將已 HTML 編碼的字串轉換成已解碼的字串，並將解碼的字串傳送至 <see cref="T:System.IO.TextWriter" /> 輸出資料流。</summary>
      <param name="value">要解碼的字串。</param>
      <param name="output">
        <see cref="T:System.IO.TextWriter" /> 的輸出資料流。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="output" /> 參數不是 <see langword="null" />，<paramref name="value" /> 不能為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String)">
      <summary>將字串轉換成 HTML 編碼字串。</summary>
      <param name="value">要編碼的字串。</param>
      <returns>編碼字串。</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String,System.IO.TextWriter)">
      <summary>將字串轉換成 HTML 編碼字串，並以 <see cref="T:System.IO.TextWriter" /> 輸出資料流的形式傳回輸出。</summary>
      <param name="value">要編碼的字串。</param>
      <param name="output">
        <see cref="T:System.IO.TextWriter" /> 輸出資料流。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="output" /> 參數不是 <see langword="null" />，<paramref name="value" /> 不能為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecode(System.String)">
      <summary>將已經將為在 URL 中傳輸而進行編碼的字串轉換為解碼的字串。</summary>
      <param name="encodedValue">要解碼的 URL 編碼字串。</param>
      <returns>已解碼的字串。</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>將已經將為在 URL 中傳輸而進行編碼的編碼位元組陣列轉換為解碼的位元組陣列。</summary>
      <param name="encodedValue">要解碼的 URL 編碼 <see cref="T:System.Byte" /> 陣列。</param>
      <param name="offset">與要解碼之 <see cref="T:System.Byte" /> 陣列開頭的位址，以位元組為單位。</param>
      <param name="count">要在 <see cref="T:System.Byte" /> 陣列中解碼的計數，以位元組為單位。</param>
      <returns>解碼的 <see cref="T:System.Byte" /> 陣列。</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncode(System.String)">
      <summary>將文字字串轉換為 URL 編碼的字串。</summary>
      <param name="value">要作 URL 編碼的文字。</param>
      <returns>URL 編碼的字串。</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>將位元組陣列轉換為 URL 編碼的位元組陣列。</summary>
      <param name="value">要進行 URL 編碼的 <see cref="T:System.Byte" /> 陣列。</param>
      <param name="offset">與要編碼之 <see cref="T:System.Byte" /> 陣列開頭的位址，以位元組為單位。</param>
      <param name="count">要在 <see cref="T:System.Byte" /> 陣列中編碼的計數，以位元組為單位。</param>
      <returns>編碼的 <see cref="T:System.Byte" /> 陣列。</returns>
    </member>
    <member name="T:System.Numerics.BitOperations">
      <summary>提供內建位元運算作業的公用程式方法。 如果在基礎平台上可用，則這些方法會使用硬體內建；否則會使用最佳化的軟體後援。</summary>
    </member>
    <member name="M:System.Numerics.BitOperations.LeadingZeroCount(System.UInt32)">
      <summary>計算不帶正負號 32 位元整數遮罩中前置字元為零的位元數。</summary>
      <param name="value">遮罩。</param>
      <returns>遮罩中前置字元為零的位元數。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.LeadingZeroCount(System.UInt64)">
      <summary>計算不帶正負號 64 位元整數遮罩中前置字元為零的位元數。</summary>
      <param name="value">遮罩。</param>
      <returns>遮罩中前置字元為零的位元數。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.Log2(System.UInt32)">
      <summary>傳回以 2 為基底的指定值整數 (下限) 對數。</summary>
      <param name="value">要從其中取得對數的數字。</param>
      <returns>以 2 為基底的指定值對數。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.Log2(System.UInt64)">
      <summary>傳回以 2 為基底的指定值整數 (下限) 對數。</summary>
      <param name="value">要從其中取得對數的數字。</param>
      <returns>以 2 為基底的指定值對數。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.PopCount(System.UInt32)">
      <summary>傳回遮罩的母體擴展計數 (位元集數)。</summary>
      <param name="value">遮罩。</param>
      <returns>遮罩的母體擴展計數。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.PopCount(System.UInt64)">
      <summary>傳回不帶正負號 64 位元整數遮罩的母體擴展計數 (位元集數)。</summary>
      <param name="value">遮罩。</param>
      <returns>遮罩的母體擴展計數。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateLeft(System.UInt32,System.Int32)">
      <summary>將所指定值依指定的位元數向左旋轉。</summary>
      <param name="value">要旋轉的值。</param>
      <param name="offset">旋轉所要依據的位元數。 超過範圍 [0..31] 的任何值都會視為全等模數 32。</param>
      <returns>旋轉的值。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateLeft(System.UInt64,System.Int32)">
      <summary>將所指定值依指定的位元數向左旋轉。</summary>
      <param name="value">要旋轉的值。</param>
      <param name="offset">旋轉所要依據的位元數。 超過範圍 [0..63] 的任何值都會視為全等模數 64。</param>
      <returns>旋轉的值。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateRight(System.UInt32,System.Int32)">
      <summary>將所指定值向右旋轉指定的位元數。</summary>
      <param name="value">要旋轉的值。</param>
      <param name="offset">旋轉所要依據的位元數。 超過範圍 [0..31] 的任何值都會視為全等模數 32。</param>
      <returns>旋轉的值。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateRight(System.UInt64,System.Int32)">
      <summary>將所指定值向右旋轉指定的位元數。</summary>
      <param name="value">要旋轉的值。</param>
      <param name="offset">旋轉所要依據的位元數。 超過範圍 [0..63] 的任何值都會視為全等模數 64。</param>
      <returns>旋轉的值。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.Int32)">
      <summary>計算 32 位元整數值遮罩中後置字元為零的位元數。</summary>
      <param name="value">遮罩。</param>
      <returns>整數值中後置字元為零的位元數。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.Int64)">
      <summary>計算 64 位元整數值遮罩中後置字元為零的位元數。</summary>
      <param name="value">遮罩。</param>
      <returns>遮罩中後置字元為零的位元數。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.UInt32)">
      <summary>計算不帶正負號 32 位元整數值遮罩中後置字元為零的位元數。</summary>
      <param name="value">遮罩。</param>
      <returns>遮罩中後置字元為零的位元數。</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.UInt64)">
      <summary>計算不帶正負號 64 位元整數值遮罩中後置字元為零的位元數。</summary>
      <param name="value">遮罩。</param>
      <returns>遮罩中後置字元為零的位元數。</returns>
    </member>
    <member name="T:System.OperatingSystem">
      <summary>表示作業系統的資訊，例如版本和平台識別項。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.OperatingSystem.#ctor(System.PlatformID,System.Version)">
      <summary>使用指定的平台識別項和版本物件來初始化 <see cref="T:System.OperatingSystem" /> 類別的新執行個體。</summary>
      <param name="platform">其中一個 <see cref="T:System.PlatformID" /> 值表示作業系統平台。</param>
      <param name="version">
        <see cref="T:System.Version" /> 物件，表示作業系統版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="platform" /> 不是 <see cref="T:System.PlatformID" /> 列舉值。</exception>
    </member>
    <member name="M:System.OperatingSystem.Clone">
      <summary>建立與這個執行個體相同的 <see cref="T:System.OperatingSystem" /> 物件。</summary>
      <returns>為這個執行個體之複本的 <see cref="T:System.OperatingSystem" /> 物件。</returns>
    </member>
    <member name="M:System.OperatingSystem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用將這個執行個體還原序列化所需的資料，填入 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
      <param name="info">要使用序列化資訊來填入的物件。</param>
      <param name="context">要儲存並擷取序列化資料的位置。 保留供未來使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.OperatingSystem.Platform">
      <summary>取得辨識這個作業系統平台的 <see cref="T:System.PlatformID" /> 列舉值。</summary>
      <returns>其中一個 <see cref="T:System.PlatformID" /> 值。</returns>
    </member>
    <member name="P:System.OperatingSystem.ServicePack">
      <summary>取得這個 <see cref="T:System.OperatingSystem" /> 物件所表示的 Service Pack 版本。</summary>
      <returns>如果支援並至少安裝一個 Service Pack 則為 Service Pack 版本，否則為空字串 ("")。</returns>
    </member>
    <member name="M:System.OperatingSystem.ToString">
      <summary>將這個 <see cref="T:System.OperatingSystem" /> 物件的值轉換為它的對等字串表示。</summary>
      <returns>
        <see cref="P:System.OperatingSystem.Platform" />、<see cref="P:System.OperatingSystem.Version" /> 和 <see cref="P:System.OperatingSystem.ServicePack" /> 屬性傳回值的字串表示。</returns>
    </member>
    <member name="P:System.OperatingSystem.Version">
      <summary>取得辨識這個作業系統的 <see cref="T:System.Version" /> 物件。</summary>
      <returns>描述這個作業系統的主要版本、次要版本、組建和修訂編號的 <see cref="T:System.Version" /> 物件。</returns>
    </member>
    <member name="P:System.OperatingSystem.VersionString">
      <summary>取得目前安裝於作業系統上的平台識別項、版本和 Service Pack 之串連字串表示。</summary>
      <returns>
        <see cref="P:System.OperatingSystem.Platform" />、<see cref="P:System.OperatingSystem.Version" /> 和 <see cref="P:System.OperatingSystem.ServicePack" /> 屬性傳回值的字串表示。</returns>
    </member>
    <member name="T:System.PlatformID">
      <summary>識別組件所支援的作業系統或平台。</summary>
    </member>
    <member name="F:System.PlatformID.MacOSX">
      <summary>作業系統是 Macintosh。 這個值是由 Silverlight 傳回。 在 .NET Core 上，替代的值為 Unix。</summary>
    </member>
    <member name="F:System.PlatformID.Unix">
      <summary>作業系統是 Unix。</summary>
    </member>
    <member name="F:System.PlatformID.Win32NT">
      <summary>作業系統是 Windows NT 或更新版本。</summary>
    </member>
    <member name="F:System.PlatformID.Win32S">
      <summary>作業系統是 Win32。 這個值不再使用。</summary>
    </member>
    <member name="F:System.PlatformID.Win32Windows">
      <summary>作業系統是 Windows 95 或 Windows 98。 這個值不再使用。</summary>
    </member>
    <member name="F:System.PlatformID.WinCE">
      <summary>作業系統是 Windows CE。 這個值不再使用。</summary>
    </member>
    <member name="F:System.PlatformID.Xbox">
      <summary>開發平台為 Xbox 360。 這個值不再使用。</summary>
    </member>
    <member name="T:System.Progress`1">
      <summary>提供 <see cref="T:System.IProgress`1" />，會針對每個報告進度值叫用回呼。</summary>
      <typeparam name="T">指定進度報表值的型別。</typeparam>
    </member>
    <member name="M:System.Progress`1.#ctor">
      <summary>初始化 <see cref="T:System.Progress`1" /> 物件。</summary>
    </member>
    <member name="M:System.Progress`1.#ctor(System.Action{`0})">
      <summary>使用指定的回呼初始化 <see cref="T:System.Progress`1" /> 物件。</summary>
      <param name="handler">要針對每個報告進度值叫用的處理常式。 除了以<see cref="E:System.Progress`1.ProgressChanged" />事件註冊的所有委派，還會叫用這個處理常式。 視 <see cref="T:System.Threading.SynchronizationContext" /> 在建構上擷取的 <see cref="T:System.Progress`1" /> 執行個體而定，或許可以同時一起叫用這個處理常式執行個體與該處理常式本身。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> 為 <see langword="null" /> (在 Visual Basic 中為 <see langword="Nothing" />)。</exception>
    </member>
    <member name="M:System.Progress`1.OnReport(`0)">
      <summary>報告進度變更。</summary>
      <param name="value">已更新的進度的值。</param>
    </member>
    <member name="E:System.Progress`1.ProgressChanged">
      <summary>針對每個報告的進度值引發。</summary>
    </member>
    <member name="M:System.Progress`1.System#IProgress{T}#Report(`0)">
      <summary>報告進度變更。</summary>
      <param name="value">已更新的進度的值。</param>
    </member>
    <member name="T:System.Random">
      <summary>表示虛擬亂數產生器，為產生數字序列的裝置，符合隨機方式的特定統計需求。</summary>
    </member>
    <member name="M:System.Random.#ctor">
      <summary>使用時間相依預設種子值來初始化 <see cref="T:System.Random" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Random.#ctor(System.Int32)">
      <summary>使用指定的種子值，初始化 <see cref="T:System.Random" /> 類別的新執行個體。</summary>
      <param name="Seed">用來計算虛擬亂數序列起始值的數字。 如果指定了負數，則會採用數字的絕對值。</param>
    </member>
    <member name="M:System.Random.Next">
      <summary>傳回非負值的隨機整數。</summary>
      <returns>32 位元帶正負號的整數大於或等於 0，並且小於 <see cref="F:System.Int32.MaxValue" />。</returns>
    </member>
    <member name="M:System.Random.Next(System.Int32)">
      <summary>傳回小於指定之最大值的非負值隨機整數。</summary>
      <param name="maxValue">要產生之亂數的獨佔上限。 <paramref name="maxValue" /> 必須大於或等於 0。</param>
      <returns>32 位元帶正負號的整數大於或等於 0，並且小於 <paramref name="maxValue" />；也就是說，傳回值的範圍通常包含 0 但不包含 <paramref name="maxValue" />。 然而，如果 <paramref name="maxValue" /> 等於 0，則會傳回 <paramref name="maxValue" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> 小於 0。</exception>
    </member>
    <member name="M:System.Random.Next(System.Int32,System.Int32)">
      <summary>傳回指定範圍內的隨機整數。</summary>
      <param name="minValue">傳回亂數的內含下限 (Inclusive Lower Bound)。</param>
      <param name="maxValue">傳回亂數的獨佔上限。 <paramref name="maxValue" /> 必須大於或等於 <paramref name="minValue" />。</param>
      <returns>32 位元帶正負號的整數大於或等於 <paramref name="minValue" />，並且小於 <paramref name="maxValue" />；也就是說，傳回值的範圍包含 <paramref name="minValue" /> 但不包含 <paramref name="maxValue" />。 如果 <paramref name="minValue" /> 等於 <paramref name="maxValue" />，會傳回 <paramref name="minValue" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minValue" /> 大於 <paramref name="maxValue" />。</exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Byte[])">
      <summary>以亂數填入指定位元組陣列的元素。</summary>
      <param name="buffer">要包含亂數的位元組陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Span{System.Byte})">
      <param name="buffer" />
    </member>
    <member name="M:System.Random.NextDouble">
      <summary>傳回大於或等於 0.0，且小於 1.0 的隨機浮點數。</summary>
      <returns>雙精確度浮點數大於或等於 0.0，且小於 1.0。</returns>
    </member>
    <member name="M:System.Random.Sample">
      <summary>傳回 0.0 和 1.0 之間的隨機浮點數。</summary>
      <returns>雙精確度浮點數大於或等於 0.0，且小於 1.0。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameProxy">
      <summary>提供 <see langword="AssemblyName" /> 的可遠端使用版本。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyNameProxy" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)">
      <summary>取得指定檔案的 <see langword="AssemblyName" />。</summary>
      <param name="assemblyFile">要取得 <see langword="AssemblyName" /> 的組件檔。</param>
      <returns>表示指定檔案的 <see langword="AssemblyName" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> 是空的。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的組件。</exception>
    </member>
    <member name="T:System.ResolveEventHandler">
      <summary>表示處理 <see cref="E:System.AppDomain.TypeResolve" /> 之 <see cref="E:System.AppDomain.ResourceResolve" />、<see cref="E:System.AppDomain.AssemblyResolve" /> 或 <see cref="T:System.AppDomain" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="args">事件資料。</param>
      <returns>用來解析型別、組件或資源的組件，如果無法解析組件則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.SwitchExpressionException">
      <summary>表示不完整的 switch 運算式無法符合它在執行階段的輸入。 例外狀況會選擇性地包含表示不相符值的物件。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> 類別的新執行個體。</summary>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.Object)">
      <summary>使用不相符的參數值，初始化 <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> 類別的新執行個體。</summary>
      <param name="unmatchedValue">不符合任何參數案例的參數值。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.String)">
      <summary>使用指定的訊息初始化 <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> 類別的新執行個體。</summary>
      <param name="message">對使用者顯示的訊息。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.String,System.Exception)">
      <summary>使用指定的詳細描述和指定的例外狀況，初始化 <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> 類別的新執行個體。</summary>
      <param name="message">對使用者顯示的訊息。</param>
      <param name="innerException">造成這個例外狀況之內部例外狀況的參考。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以參數名稱和其他例外狀況資訊設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">儲存曾經用於序列化或還原序列化物件的資料，此物件正由 <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> 序列化或還原序列化。</param>
      <param name="context">描述已產生例外狀況 (Exception) 之資料流的來源和目的端，和讓序列化保留該內容和額外的呼叫端定義內容的方式。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.SwitchExpressionException.Message">
      <summary>取得例外狀況訊息。</summary>
      <returns>完整訊息字串。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.SwitchExpressionException.UnmatchedValue">
      <summary>取得與例外狀況建立關聯的不相符值。</summary>
      <returns>造成例外狀況的不相符值。</returns>
    </member>
    <member name="T:System.Runtime.ProfileOptimization">
      <summary>根據先前編譯期間所建立的設定檔，對可能要執行的方法執行背景編譯，改善需要 Just-In-Time (JIT) 編譯器之應用程式的應用程式定義域啟動效能。</summary>
    </member>
    <member name="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)">
      <summary>啟用對目前應用程式定義域的最佳化程式碼剖析，並設定儲存最佳化設定檔的資料夾。 單核心電腦上，這個方法會被忽略。</summary>
      <param name="directoryPath">存放設定檔（用於目前應用程式定義域）的資料夾的完整路徑。</param>
    </member>
    <member name="M:System.Runtime.ProfileOptimization.StartProfile(System.String)">
      <summary>在背景執行緒中，對先前指定設定檔名稱中記錄的方法啟動 just-in-time (JIT) 編譯。 開始錄製目前的方法使用，稍後會覆寫指定的設定檔檔案。</summary>
      <param name="profile">要使用的設定檔的檔案名稱。</param>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesAttribute">
      <summary>定義可能應用在多個版本中的元件、型別或型別成員之相容性保障。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)">
      <summary>使用表示程式庫、型別或成員之多版相容性保障層級的值，初始化 <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" /> 類別的新執行個體。</summary>
      <param name="guarantees">一個列舉值，指定多版相容性保障層級。</param>
    </member>
    <member name="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees">
      <summary>取得值，該值表示應用在多個版本中的程式庫、型別或型別成員之相容性保障層級。</summary>
      <returns>一個列舉值，指定多版相容性保障層級。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesOptions">
      <summary>描述可能涵蓋多個版本的元件、型別或型別成員之相容性保障。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange">
      <summary>開發人員可保證該型別具備多版本的互換相容性， 因此，該型別的消費者可在未來的版本中享受該型別的相容性，並在其所有的介面中使用該型別。 版本控制問題無法以並存執行的方式修正。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.None">
      <summary>開發人員無法保證在多個版本中的相容性。 該元件、型別或成員的消費者應了解未來推出的版本和現有用戶端之間會出現功能中斷。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide">
      <summary>已測試當多個版本的組件載入至相同的應用程式定義域時，元件可以正常運作。 未來推出的版本可能無法擁有這樣的相容性。 不過，在發生如此重大的變更時，舊版本不會受到修改，而會繼續與新版本並存。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable">
      <summary>開發人員可保證在多個版本中的穩定相容性， 因此，該型別的消費者可預期未來推出的版本和現有用戶端之間不會出現功能中斷。 不過，如果出現功能中斷問題，只要用戶端的介面中尚未使用此型別，並存執行或許可以修正問題。</summary>
    </member>
    <member name="T:System.Runtime.Versioning.FrameworkName">
      <summary>表示 .NET Framework 的版本名稱。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)">
      <summary>從包含 .NET Framework 版本資訊的字串，初始化 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 類別的新執行個體。</summary>
      <param name="frameworkName">包含 .NET Framework 版本資訊的字串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="frameworkName" /> 為 <see cref="F:System.String.Empty" />。
-或-
<paramref name="frameworkName" /> 具有兩個以下的元件或三個以上的元件。
-或-
<paramref name="frameworkName" /> 不包含主要和次要版本號碼。
-或-
<paramref name="frameworkName" /> 不包含有效的版本號碼。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)">
      <summary>從識別 .NET Framework 版本的字串和 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 物件，初始化 <see cref="T:System.Version" /> 類別的新執行個體。</summary>
      <param name="identifier">識別 .NET Framework 版本的字串。</param>
      <param name="version">包含 .NET Framework 版本資訊的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="identifier" /> 為 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> 為 <see langword="null" />。
-或-
<paramref name="version" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)">
      <summary>從字串、識別 .NET Framework 版本的 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 物件，以及設定檔名稱，初始化 <see cref="T:System.Version" /> 類別的新執行個體。</summary>
      <param name="identifier">識別 .NET Framework 版本的字串。</param>
      <param name="version">包含 .NET Framework 版本資訊的物件。</param>
      <param name="profile">設定檔名稱。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="identifier" /> 為 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> 為 <see langword="null" />。
-或-
<paramref name="version" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Object)">
      <summary>傳回值，指出這個 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 執行個體是否表示和指定之物件相同的 .NET Framework 版本。</summary>
      <param name="obj">要與目前執行個體相比較的物件。</param>
      <returns>如果目前 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 物件的每個元件都符合 <paramref name="obj" /> 的相對應元件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)">
      <summary>傳回值，指出這個 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 執行個體是否表示和指定之 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 執行個體相同的 .NET Framework 版本。</summary>
      <param name="other">要與目前執行個體相比較的物件。</param>
      <returns>如果目前 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 物件的每個元件都符合 <paramref name="other" /> 的相對應元件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.FullName">
      <summary>取得這個 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 物件的完整名稱。</summary>
      <returns>這個 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 物件的完整名稱。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.GetHashCode">
      <summary>傳回 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數，表示這個執行個體的雜湊程式碼。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Identifier">
      <summary>取得這個 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 物件的識別項。</summary>
      <returns>這個 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 物件的識別項。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>傳回值，指出兩個 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 物件是否表示相同的 .NET Framework 版本。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 參數表示相同的 .NET Framework 版本，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>傳回值，指出兩個 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 物件是否表示不同的 .NET Framework 版本。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 參數表示不同的 .NET Framework 版本，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Profile">
      <summary>取得這個 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 物件的設定檔名稱。</summary>
      <returns>這個 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 物件的設定檔名稱。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.ToString">
      <summary>傳回此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 物件的字串表示。</summary>
      <returns>表示這個 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 物件的字串。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Version">
      <summary>取得這個 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 物件的版本。</summary>
      <returns>物件，包含這個 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 物件的版本資訊。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceConsumptionAttribute">
      <summary>指定類別 (Class) 成員消耗的資源。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceConsumptionAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
      <summary>初始化 <see cref="T:System.Runtime.Versioning.ResourceConsumptionAttribute" /> 類別的新執行個體，該類別指定消耗之資源的範圍。</summary>
      <param name="resourceScope">消耗之資源的 <see cref="T:System.Runtime.Versioning.ResourceScope" />。</param>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceConsumptionAttribute.#ctor(System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
      <summary>初始化 <see cref="T:System.Runtime.Versioning.ResourceConsumptionAttribute" /> 類別的新執行個體，該類別指定消耗之資源的範圍以及資源消耗方式的範圍。</summary>
      <param name="resourceScope">消耗之資源的 <see cref="T:System.Runtime.Versioning.ResourceScope" />。</param>
      <param name="consumptionScope">由這個成員使用的 <see cref="T:System.Runtime.Versioning.ResourceScope" />。</param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceConsumptionAttribute.ConsumptionScope">
      <summary>取得這個成員的消耗範圍。</summary>
      <returns>
        <see cref="T:System.Runtime.Versioning.ResourceScope" /> 物件，指定這個成員使用的資源範圍。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceConsumptionAttribute.ResourceScope">
      <summary>取得消耗之資源的資源範圍 。</summary>
      <returns>
        <see cref="T:System.Runtime.Versioning.ResourceScope" /> 物件，指定消耗之成員的資源範圍。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceExposureAttribute">
      <summary>指定類別 (Class) 成員的資源公開。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceExposureAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
      <summary>使用指定的公開層級，初始化 <see cref="T:System.Runtime.Versioning.ResourceExposureAttribute" /> 類別的新執行個體。</summary>
      <param name="exposureLevel">資源的範圍。</param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceExposureAttribute.ResourceExposureLevel">
      <summary>取得資源公開範圍。</summary>
      <returns>
        <see cref="T:System.Runtime.Versioning.ResourceScope" /> 物件。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceScope">
      <summary>識別可共用資源的範圍。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.AppDomain">
      <summary>狀態由 <see cref="T:System.AppDomain" /> 中的物件共用。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Assembly">
      <summary>資源在組件範圍中可見。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Library">
      <summary>狀態由程式庫中的物件共用。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Machine">
      <summary>狀態由機器中的物件共用。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.None">
      <summary>沒有共用的狀態。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Private">
      <summary>只有該類型的資源可見。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Process">
      <summary>狀態在處理序中共用。</summary>
    </member>
    <member name="T:System.Runtime.Versioning.VersioningHelper">
      <summary>提供協助開發人員撰寫安全版本之程式碼的方法。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
      <summary>傳回基於指定之資源名稱和預期之資源消耗來源的安全版本名稱。</summary>
      <param name="name">資源名稱。</param>
      <param name="from">資源的範圍。</param>
      <param name="to">所需的資源消耗範圍。</param>
      <returns>安全版本名稱。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope,System.Type)">
      <summary>傳回基於指定之資源名稱、預期之資源消耗範圍和使用資源之類型的安全版本名稱。</summary>
      <param name="name">資源名稱。</param>
      <param name="from">範圍的開始處。</param>
      <param name="to">範圍的結束處。</param>
      <param name="type">資源的 <see cref="T:System.Type" />。</param>
      <returns>安全版本名稱。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="from" /> 和 <paramref name="to" /> 的值無效。 <see cref="T:System.Runtime.Versioning.ResourceScope" /> 列舉的資源類型，從較嚴格的資源類型變更為較普通的資源類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Security.IPermission">
      <summary>定義由使用權限類型實作的方法。</summary>
    </member>
    <member name="M:System.Security.IPermission.Copy">
      <summary>建立並傳回目前權限的相同複本。</summary>
      <returns>目前權限的複本。</returns>
    </member>
    <member name="M:System.Security.IPermission.Demand">
      <summary>如果不符合安全性要求，在 Run Time 時會擲回 <see cref="T:System.Security.SecurityException" />。</summary>
    </member>
    <member name="M:System.Security.IPermission.Intersect(System.Security.IPermission)">
      <summary>建立並傳回目前權限與指定權限交集的權限。</summary>
      <param name="target">要與目前權限產生交集的權限。 必須與目前權限屬於相同的類型。</param>
      <returns>代表目前權限與指定權限交集的新權限。 如果交集是空的，這個新權限就是 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 參數不是 <see langword="null" />，並且不是與目前使用權限相同類別的執行個體。</exception>
    </member>
    <member name="M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>判斷目前權限是否為指定權限的子集。</summary>
      <param name="target">要測試子集關聯性的權限。 這個權限必須與目前權限屬於相同的類型。</param>
      <returns>如果目前權限是指定權限的子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 參數不是 <see langword="null" />，而且與目前權限屬於不同的類型。</exception>
    </member>
    <member name="M:System.Security.IPermission.Union(System.Security.IPermission)">
      <summary>建立目前權限與指定權限聯集的權限。</summary>
      <param name="target">要與目前權限結合的權限， 必須與目前權限屬於相同的類型。</param>
      <returns>代表目前權限與指定權限聯集的新權限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 參數不是 <see langword="null" />，而且與目前權限屬於不同的類型。</exception>
    </member>
    <member name="T:System.Security.ISecurityEncodable">
      <summary>定義將使用權限物件狀態與 XML 項目表示相互轉換的方法。</summary>
    </member>
    <member name="M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)">
      <summary>透過 XML 編碼，重新建構具有指定狀態的安全性物件。</summary>
      <param name="e">用來重新建構安全性物件的 XML 編碼方式。</param>
    </member>
    <member name="M:System.Security.ISecurityEncodable.ToXml">
      <summary>建立安全物件及其目前狀態的 XML 編碼方式。</summary>
      <returns>安全物件的 XML 編碼方式，包含所有狀態資訊。</returns>
    </member>
    <member name="T:System.Security.IStackWalk">
      <summary>管理堆疊查核行程 (Stack Walk)，決定呼叫堆疊中所有的呼叫端是否具有存取受保護資源的使用權限。</summary>
    </member>
    <member name="M:System.Security.IStackWalk.Assert">
      <summary>即使堆疊中較高層的呼叫端尚未授與存取資源的使用權限，仍會判斷提示 (Assert) 呼叫的程式碼可存取目前的使用權限物件所識別的資源。</summary>
      <exception cref="T:System.Security.SecurityException">呼叫的程式碼沒有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />。</exception>
    </member>
    <member name="M:System.Security.IStackWalk.Demand">
      <summary>決定在執行階段呼叫堆疊中的所有呼叫端是否都已授與目前使用權限物件所指定的使用權限。</summary>
      <exception cref="T:System.Security.SecurityException">呼叫堆疊中較高層的呼叫端未授與目前使用權限物件所指定的使用權限。
-或-
呼叫堆疊中的呼叫端已經呼叫目前使用權限物件上的 <see cref="M:System.Security.IStackWalk.Deny" />。</exception>
    </member>
    <member name="M:System.Security.IStackWalk.Deny">
      <summary>導致經過呼叫程式碼之目前物件的每一個 <see cref="M:System.Security.IStackWalk.Demand" /> 發生錯誤。</summary>
    </member>
    <member name="M:System.Security.IStackWalk.PermitOnly">
      <summary>即使呼叫堆疊中較高層的程式碼已授與存取其他資源的使用權限，還是會導致經過呼叫程式碼、除了目前物件之外之所有物件的每一個 <see cref="M:System.Security.IStackWalk.Demand" /> 發生錯誤。</summary>
    </member>
    <member name="T:System.Security.Permissions.CodeAccessSecurityAttribute">
      <summary>指定程式碼存取安全性的基底屬性類別。</summary>
    </member>
    <member name="M:System.Security.Permissions.CodeAccessSecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" />，初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 的新執行個體。</summary>
      <param name="action">其中一個 <see cref="T:System.Security.Permissions.SecurityAction" /> 值。</param>
    </member>
    <member name="T:System.Security.Permissions.PermissionState">
      <summary>指定在建立時使用權限應該擁有資源檔的所有存取權還是沒有任何的存取權限。</summary>
    </member>
    <member name="F:System.Security.Permissions.PermissionState.None">
      <summary>不允許存取使用權限所保護的資源。</summary>
    </member>
    <member name="F:System.Security.Permissions.PermissionState.Unrestricted">
      <summary>允許存取使用權限所保護的資源。</summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAction">
      <summary>指定可以使用宣告式安全性執行的安全性動作。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Assert">
      <summary>即使堆疊中較高層的呼叫端未獲得資源存取權限，呼叫程式碼仍可以存取目前權限物件所識別的資源 (請參閱使用 Assert 方法)。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Demand">
      <summary>呼叫堆疊中較高層的所有呼叫端，必須已獲得目前權限物件所指定的權限。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Deny">
      <summary>即使呼叫端已獲得資源存取權限，仍會拒絕呼叫端存取目前權限物件所指定的資源。(請參閱使用 Deny 方法)。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <summary>繼承類別或覆寫方法的衍生類別 (Derived Class) 必須已經授與指定的使用權限。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.LinkDemand">
      <summary>直接呼叫端必須已獲得指定權限。 請勿在 .NET Framework 4 中使用。 如需完全信任，請使用 <see cref="T:System.Security.SecurityCriticalAttribute" />，部分信任則使用 <see cref="F:System.Security.Permissions.SecurityAction.Demand" />。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.PermitOnly">
      <summary>只可存取這個權限物件所指定的資源，即使程式碼已獲得其他資源存取權限亦然。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestMinimum">
      <summary>要求執行程式碼所需的最低權限。 這個動作只能在組件的範圍內使用。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestOptional">
      <summary>要求選擇性 (非執行所需) 的其他權限。 這項要求會隱含拒絕未特別要求的所有其他權限。 這個動作只能在組件的範圍內使用。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestRefuse">
      <summary>要求不將可能遭到誤用的權限授權給呼叫程式碼。 這個動作只能在組件的範圍內使用。</summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAttribute">
      <summary>指定衍生 <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" /> 的宣告式安全性基底屬性類別。</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.SecurityAttribute" />，初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 的新執行個體。</summary>
      <param name="action">其中一個 <see cref="T:System.Security.Permissions.SecurityAction" /> 值。</param>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Action">
      <summary>取得或設定安全性動作。</summary>
      <returns>其中一個 <see cref="T:System.Security.Permissions.SecurityAction" /> 值。</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.CreatePermission">
      <summary>在衍生類別中覆寫時，會建立權限物件，之後可以將這個權限物件序列化為二進位格式，並且與 <see cref="T:System.Security.Permissions.SecurityAction" /> 一起持續儲存在組件的中繼資料中。</summary>
      <returns>可序列化的權限物件。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Unrestricted">
      <summary>取得或設定數值，表示是否宣告由屬性所保護之資源的完整 (不受限制的) 使用權限。</summary>
      <returns>如果已宣告受保護之資源的完整使用權限，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionAttribute">
      <summary>允許將 <see cref="T:System.Security.Permissions.SecurityPermission" /> 的安全性動作套用至使用宣告式安全性的程式碼。 此類別無法被繼承。</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.SecurityPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 類別的新執行個體。</summary>
      <param name="action">其中一個 <see cref="T:System.Security.Permissions.SecurityAction" /> 值。</param>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Assertion">
      <summary>取得或設定值，表示是否宣告了權限，可判斷提示這個程式碼的所有呼叫端都要具有此作業的必要權限。</summary>
      <returns>如果已宣告判斷提示的權限，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects">
      <summary>取得或設定值，表示程式碼是否有權限執行應用程式組態檔中的繫結重新導向。</summary>
      <returns>如果程式碼可以執行繫結重新導向，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain">
      <summary>取得或設定值，指出是否宣告管理 <see cref="T:System.AppDomain" /> 的權限。</summary>
      <returns>如果宣告管理 <see langword="true" /> 的權限，則為 <see cref="T:System.AppDomain" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy">
      <summary>取得或設定值，表示是否宣告變更或管理定義域安全性原則的權限。</summary>
      <returns>如果已宣告變更或管理應用程式定義域中的安全性原則的權限，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence">
      <summary>取得或設定值，指出是否宣告變更或管理辨識項的權限。</summary>
      <returns>如果宣告了變更或管理辨識項的能力，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy">
      <summary>取得或設定值，表示是否宣告檢視和管理安全性原則的權限。</summary>
      <returns>如果宣告管理安全性原則的使用權限，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal">
      <summary>取得或設定值，表示是否宣告管理目前主體的權限。</summary>
      <returns>如果宣告管理目前主體的權限，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlThread">
      <summary>取得或設定值，指出是否宣告管理執行緒的使用權限。</summary>
      <returns>如果宣告管理執行緒的使用權限，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.CreatePermission">
      <summary>建立及傳回新的 <see cref="T:System.Security.Permissions.SecurityPermission" />。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.SecurityPermission" />，會對應至這個屬性。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Execution">
      <summary>取得或設定值，指出是否已宣告執行程式碼的權限。</summary>
      <returns>如果已宣告執行程式碼的權限，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Flags">
      <summary>取得或設定所有組成 <see cref="T:System.Security.Permissions.SecurityPermission" /> 權限的權限旗標。</summary>
      <returns>一或多個使用位元 OR 運算結合的 <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> 值。</returns>
      <exception cref="T:System.ArgumentException">嘗試將這個屬性設定為無效的值。 如需有效值，請參閱 <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />。</exception>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Infrastructure">
      <summary>取得或設定值，指出程式碼是否可插入 Common Language Runtime 基礎結構，例如加入遠端內容接收、Envoy 接收和動態接收。</summary>
      <returns>如果程式碼可插入 Common Language Runtime 基礎結構，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration">
      <summary>取得或設定值，指出程式碼是否可以設定遠端類型和通道。</summary>
      <returns>如果程式碼可以設定遠端類型和通道，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter">
      <summary>取得或設定值，表示程式碼是否可以使用序列化格式子，將物件序列化或還原序列化。</summary>
      <returns>如果程式碼可以使用序列化格式子，將物件序列化或還原序列化，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SkipVerification">
      <summary>取得或設定值，指出是否已宣告略過程式碼驗證的權限。</summary>
      <returns>如果已宣告略過程式碼驗證的權限，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode">
      <summary>取得或設定值，指出是否已宣告呼叫 Unmanaged 程式碼的權限。</summary>
      <returns>如果已宣告呼叫 Unmanaged 程式碼的權限，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionFlag">
      <summary>指定安全性權限物件的存取旗標。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.AllFlags">
      <summary>使用權限的不受限制狀態。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Assertion">
      <summary>確認這個程式碼所有的呼叫端都具有此作業必要之使用權限的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.BindingRedirects">
      <summary>在應用程式組態檔中執行明確繫結重新導向的使用權限。 這包括已統一的 .NET Framework 組件 (Assembly) 及在 .NET Framework 範例之外找到之組件的重新導向。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain">
      <summary>建立和操作 <see cref="T:System.AppDomain" /> 的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlDomainPolicy">
      <summary>指定定義域原則的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence">
      <summary>提供辨識項的能力，包括更改由 Common Language Runtime 所提供之辨識項的能力。
這是強大的權限，因此只應該授與高度信任程式碼。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy">
      <summary>檢視和修改原則的能力。
這是強大的權限，因此只應該授與高度信任程式碼。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal">
      <summary>操作主要物件的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread">
      <summary>在執行緒上使用某些進階作業的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Execution">
      <summary>執行程式碼的使用權限。 沒有這個使用權限，Managed 程式碼就無法執行。
動態搭配堆疊修飾詞 (例如 <see cref="M:System.Security.CodeAccessPermission.Deny" />、<see cref="M:System.Security.CodeAccessPermission.Assert" /> 與 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />) 使用時，此旗標沒有效果。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure">
      <summary>將程式碼插入 Common Language Runtime 基礎架構的使用權限，例如，加入遠端內容接收、Envoy 接收和動態接收。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.NoFlags">
      <summary>沒有安全性存取。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration">
      <summary>設定遠端型別和通道的使用權限。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter">
      <summary>提供序列化 (Serialization) 服務的能力。 由序列化格式子 (Formatter) 使用。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SkipVerification">
      <summary>略過這個組件中程式碼驗證的能力。 如果授與這個使用權限，則可執行無法驗證的程式碼。
這是強大的權限，因此只應該授與高度信任程式碼。
動態搭配堆疊修飾詞 (例如 <see cref="M:System.Security.CodeAccessPermission.Deny" />、<see cref="M:System.Security.CodeAccessPermission.Assert" /> 與 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />) 使用時，此旗標沒有效果。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode">
      <summary>呼叫 Unmanaged 程式碼的能力。
 因為非受控程式碼可能會允許忽略其他權限，這是危險的權限，因此只應該授與高度信任程式碼。 它用於使用 PInvoke 或使用 COM Interop 呼叫原生程式碼的應用程式中。</summary>
    </member>
    <member name="T:System.Security.PermissionSet">
      <summary>代表可以包含許多不同類型權限的集合。</summary>
    </member>
    <member name="M:System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的 <see cref="T:System.Security.PermissionSet" /> 初始化 <see cref="T:System.Security.Permissions.PermissionState" /> 類別的新執行個體。</summary>
      <param name="state">其中一個列舉值，可指定權限集的資源存取。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 參數不是有效的 <see cref="T:System.Security.Permissions.PermissionState" />。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.#ctor(System.Security.PermissionSet)">
      <summary>以取自 <see cref="T:System.Security.PermissionSet" /> 參數的初始值，初始化 <paramref name="permSet" /> 類別的新執行個體。</summary>
      <param name="permSet">要從中取得新的 <see cref="T:System.Security.PermissionSet" /> 值的集合，或要建立空 <see langword="null" /> 的 <see cref="T:System.Security.PermissionSet" />。</param>
    </member>
    <member name="M:System.Security.PermissionSet.AddPermission(System.Security.IPermission)">
      <summary>將指定的權限加入 <see cref="T:System.Security.PermissionSet" />。</summary>
      <param name="perm">要加入的權限。</param>
      <returns>加入的使用權限聯集和相同類型的任何權限已存在於 <see cref="T:System.Security.PermissionSet" />。</returns>
      <exception cref="T:System.InvalidOperationException">此方法是從 <see cref="T:System.Security.ReadOnlyPermissionSet" /> 呼叫。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)">
      <summary>將指定的權限加入 <see cref="T:System.Security.PermissionSet" />。</summary>
      <param name="perm">要加入的權限。</param>
      <returns>加入的使用權限聯集和相同類型的任何權限已存在於 <see cref="T:System.Security.PermissionSet" />，如果 <see langword="null" /> 是 <paramref name="perm" /> 則為 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">此方法是從 <see cref="T:System.Security.ReadOnlyPermissionSet" /> 呼叫。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Assert">
      <summary>宣告即使堆疊中較高層的呼叫端未獲得資源存取權限，呼叫程式碼仍可透過呼叫這個方法的程式碼要求權限，來存取受保護的資源。 使用 <see cref="M:System.Security.PermissionSet.Assert" /> 會造成安全性弱點。</summary>
      <exception cref="T:System.Security.SecurityException">已判斷提示的 <see cref="T:System.Security.PermissionSet" /> 執行個體未獲得判斷提示程式碼。
-或-
目前的框架已有作用中的 <see cref="M:System.Security.PermissionSet.Assert" />。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.ContainsNonCodeAccessPermissions">
      <summary>取得值，表示 <see cref="T:System.Security.PermissionSet" /> 是否包含非衍生自 <see cref="T:System.Security.CodeAccessPermission" /> 的權限。</summary>
      <returns>如果 <see langword="true" /> 包含非衍生自 <see cref="T:System.Security.PermissionSet" /> 的權限，則為 <see cref="T:System.Security.CodeAccessPermission" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)">
      <summary>將編碼的 <see cref="T:System.Security.PermissionSet" /> 從一種 XML 編碼格式轉換到另一種 XML 編碼格式。</summary>
      <param name="inFormat">以下列一種編碼格式表示的字串：ASCII、Unicode 或二進位。 可能的值為 "XMLASCII" 或 "XML"、"XMLUNICODE" 和 "BINARY"。</param>
      <param name="inData">XML 編碼的權限集合。</param>
      <param name="outFormat">以下列一種編碼格式表示的字串：ASCII、Unicode 或二進位。 可能的值為 "XMLASCII" 或 "XML"、"XMLUNICODE" 和 "BINARY"。</param>
      <returns>使用指定輸出格式設定的加密權限。</returns>
      <exception cref="T:System.NotImplementedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Copy">
      <summary>建立 <see cref="T:System.Security.PermissionSet" /> 的複本。</summary>
      <returns>
        <see cref="T:System.Security.PermissionSet" /> 的複本。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.CopyTo(System.Array,System.Int32)">
      <summary>將集合的權限物件複製到 <see cref="T:System.Array" /> 中的指定位置。</summary>
      <param name="array">要複製到其中的目標陣列。</param>
      <param name="index">陣列中要開始複製的起始位置 (以零起始)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 參數具有多個維度。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 參數超出 <paramref name="array" /> 參數的範圍。</exception>
    </member>
    <member name="P:System.Security.PermissionSet.Count">
      <summary>取得權限集合所包含的權限物件數目。</summary>
      <returns>
        <see cref="T:System.Security.PermissionSet" /> 包含的權限物件數目。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Demand">
      <summary>如果在呼叫堆疊中較高的所有呼叫端都尚未被授與由目前執行個體所指定之權限，則會在執行階段強制執行 <see cref="T:System.Security.SecurityException" />。</summary>
      <exception cref="T:System.Security.SecurityException">呼叫鏈結中的呼叫端沒有要求的權限。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Deny">
      <summary>會讓任何通過權限呼叫程式碼的 <see cref="M:System.Security.PermissionSet.Demand" /> 失敗，該權限與目前 <see cref="T:System.Security.PermissionSet" /> 中包含的權限類型有交集。</summary>
      <exception cref="T:System.Security.SecurityException">先前呼叫 <see cref="M:System.Security.PermissionSet.Deny" /> 已限制目前堆疊框架的權限。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.Security.PermissionSet" /> 或 <see cref="T:System.Security.NamedPermissionSet" /> 物件是否等於目前的 <see cref="T:System.Security.PermissionSet" />。</summary>
      <param name="o">要與目前 <see cref="T:System.Security.PermissionSet" /> 比較的物件。</param>
      <returns>如果指定的物件等於目前的 <see langword="true" /> 物件，則為 <see cref="T:System.Security.PermissionSet" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.FromXml(System.Security.SecurityElement)">
      <summary>透過 XML 編碼，重新建構具有指定狀態的安全性物件。</summary>
      <param name="et">用來重新建構安全性物件的 XML 編碼方式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="et" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="et" /> 參數不是有效的權限項目。
-或-
不支援 <paramref name="et" /> 參數的版本號碼。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.GetEnumerator">
      <summary>傳回此集合權限的列舉值。</summary>
      <returns>此集合權限的列舉值物件。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetEnumeratorImpl">
      <summary>傳回此集合權限的列舉值。</summary>
      <returns>此集合權限的列舉值物件。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetHashCode">
      <summary>取得 <see cref="T:System.Security.PermissionSet" /> 物件的雜湊碼，其適合用於雜湊表這類的雜湊演算法和資料結構。</summary>
      <returns>目前 <see cref="T:System.Security.PermissionSet" /> 物件的雜湊碼。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetPermission(System.Type)">
      <summary>如果它存在此集合中，則取得指定類型的使用權限物件。</summary>
      <param name="permClass">所需權限物件的類型。</param>
      <returns>包含在 <paramref name="permClass" /> 的 <see cref="T:System.Security.PermissionSet" /> 參數所指定類型之權限物件複本，或是如果不存在，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetPermissionImpl(System.Type)">
      <summary>如果它存在此集合中，則取得指定類型的使用權限物件。</summary>
      <param name="permClass">權限物件的類型。</param>
      <returns>包含在 <paramref name="permClass" /> 的 <see cref="T:System.Security.PermissionSet" /> 參數所指定類型之權限物件複本，或是如果不存在，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Intersect(System.Security.PermissionSet)">
      <summary>建立並傳回目前 <see cref="T:System.Security.PermissionSet" /> 與指定 <see cref="T:System.Security.PermissionSet" /> 交集的權限集。</summary>
      <param name="other">要與目前 <see cref="T:System.Security.PermissionSet" /> 產生交集的權限集。</param>
      <returns>新的權限集，代表目前 <see cref="T:System.Security.PermissionSet" /> 和指定目標的交集。 如果交集是空的，這個物件就是 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsEmpty">
      <summary>取得值，指出 <see cref="T:System.Security.PermissionSet" /> 是否為空的。</summary>
      <returns>如果 <see langword="true" /> 是空的，則為 <see cref="T:System.Security.PermissionSet" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.PermissionSet.IsReadOnly">
      <summary>取得值，表示集合是否為唯讀。</summary>
      <returns>一定是 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)">
      <summary>判斷目前的 <see cref="T:System.Security.PermissionSet" /> 是否為指定 <see cref="T:System.Security.PermissionSet" /> 的子集。</summary>
      <param name="target">要測試子集關聯性的權限集。 這必須是 <see cref="T:System.Security.PermissionSet" /> 或 <see cref="T:System.Security.NamedPermissionSet" />。</param>
      <returns>如果目前的 <see langword="true" /> 是 <see cref="T:System.Security.PermissionSet" /> 參數的子集則為 <paramref name="target" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.PermissionSet.IsSynchronized">
      <summary>取得值，指出是否保證集合為安全執行緒。</summary>
      <returns>一定是 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsUnrestricted">
      <summary>判斷 <see cref="T:System.Security.PermissionSet" /> 是否為 <see langword="Unrestricted" />。</summary>
      <returns>如果 <see langword="true" /> 是 <see cref="T:System.Security.PermissionSet" />，則為 <see langword="Unrestricted" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.PermitOnly">
      <summary>會讓透過非目前 <see cref="M:System.Security.PermissionSet.Demand" /> 子集的任何 <see cref="T:System.Security.PermissionSet" /> 呼叫程式碼傳遞之任何 <see cref="T:System.Security.PermissionSet" /> 失敗。</summary>
    </member>
    <member name="M:System.Security.PermissionSet.RemovePermission(System.Type)">
      <summary>從集合中移除特定類型的權限。</summary>
      <param name="permClass">要刪除之權限的類型。</param>
      <returns>從集合中移除的權限。</returns>
      <exception cref="T:System.InvalidOperationException">此方法是從 <see cref="T:System.Security.ReadOnlyPermissionSet" /> 呼叫。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.RemovePermissionImpl(System.Type)">
      <summary>從集合中移除特定類型的權限。</summary>
      <param name="permClass">要移除權限的類型。</param>
      <returns>從集合中移除的權限。</returns>
      <exception cref="T:System.InvalidOperationException">此方法是從 <see cref="T:System.Security.ReadOnlyPermissionSet" /> 呼叫。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.RevertAssert">
      <summary>會移除目前畫面格之任何先前的 <see cref="M:System.Security.CodeAccessPermission.Assert" />，且不再有作用。</summary>
      <exception cref="T:System.InvalidOperationException">目前畫面格沒有先前的 <see cref="M:System.Security.CodeAccessPermission.Assert" />。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.SetPermission(System.Security.IPermission)">
      <summary>將權限設定為 <see cref="T:System.Security.PermissionSet" />，以取代任何相同類型的現有權限。</summary>
      <param name="perm">要設定的權限。</param>
      <returns>已設定的權限。</returns>
      <exception cref="T:System.InvalidOperationException">此方法是從 <see cref="T:System.Security.ReadOnlyPermissionSet" /> 呼叫。</exception>
    </member>
    <member name="M:System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)">
      <summary>將權限設定為 <see cref="T:System.Security.PermissionSet" />，以取代任何相同類型的現有權限。</summary>
      <param name="perm">要設定的權限。</param>
      <returns>已設定的權限。</returns>
      <exception cref="T:System.InvalidOperationException">此方法是從 <see cref="T:System.Security.ReadOnlyPermissionSet" /> 呼叫。</exception>
    </member>
    <member name="P:System.Security.PermissionSet.SyncRoot">
      <summary>取得目前集合的根物件。</summary>
      <returns>目前集合的根物件。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>執行於整個物件 Graph 已經還原序列化時。</summary>
      <param name="sender">初始化回呼 (Callback) 的物件。 這個參數的功能目前未實作。</param>
    </member>
    <member name="M:System.Security.PermissionSet.ToString">
      <summary>傳回 <see cref="T:System.Security.PermissionSet" /> 的字串表示法。</summary>
      <returns>
        <see cref="T:System.Security.PermissionSet" /> 的表示法。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.ToXml">
      <summary>建立安全物件及其目前狀態的 XML 編碼方式。</summary>
      <returns>安全物件的 XML 編碼，包含所有狀態資訊。</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Union(System.Security.PermissionSet)">
      <summary>建立目前 <see cref="T:System.Security.PermissionSet" /> 與指定 <see cref="T:System.Security.PermissionSet" /> 聯集的 <see cref="T:System.Security.PermissionSet" />。</summary>
      <param name="other">要與目前 <see cref="T:System.Security.PermissionSet" /> 形成聯集的權限集合。</param>
      <returns>新的權限集合，代表目前 <see cref="T:System.Security.PermissionSet" /> 和指定 <see cref="T:System.Security.PermissionSet" /> 的聯集。</returns>
    </member>
    <member name="T:System.Security.SecurityElement">
      <summary>代表用於編碼安全性物件的 XML 物件模型。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String)">
      <summary>使用指定的標記，初始化 <see cref="T:System.Security.SecurityElement" /> 類別的新執行個體。</summary>
      <param name="tag">XML 項目的標記名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" /> 參數在 XML 中是無效的。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String,System.String)">
      <summary>使用指定的標記和文字來初始化 <see cref="T:System.Security.SecurityElement" /> 類別的新執行個體。</summary>
      <param name="tag">XML 項目的標記名稱。</param>
      <param name="text">項目內的文字內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" /> 參數或 <paramref name="text" /> 參數在 XML 中是無效的。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
      <summary>加入名稱/值屬性至 XML 項目。</summary>
      <param name="name">屬性的名稱。</param>
      <param name="value">屬性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數或 <paramref name="value" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 參數或 <paramref name="value" /> 參數在 XML 中是無效的。
-或-
由 <paramref name="name" /> 參數所指定名稱的屬性已經存在。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.AddChild(System.Security.SecurityElement)">
      <summary>加入子項目至 XML 項目。</summary>
      <param name="child">要加入的子項目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.Attribute(System.String)">
      <summary>依名稱尋找 XML 項目中的屬性。</summary>
      <param name="name">要搜尋的屬性名稱。</param>
      <returns>與具名屬性相關的數值，或如果具有 <paramref name="name" /> 的屬性不存在，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Attributes">
      <summary>取得或設定 XML 項目的屬性當做名稱/值組。</summary>
      <returns>XML 項目屬性值的 <see cref="T:System.Collections.Hashtable" /> 物件。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Collections.Hashtable" /> 物件的名稱或數值是無效的。</exception>
      <exception cref="T:System.ArgumentException">名稱不是有效的 XML 屬性名稱。</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Children">
      <summary>取得或設定 XML 項目的子項目陣列。</summary>
      <returns>XML 項目的已排序的子項目，做為安全項目。</returns>
      <exception cref="T:System.ArgumentException">XML 父節點的子系為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.Copy">
      <summary>建立並傳回目前 <see cref="T:System.Security.SecurityElement" /> 物件的相同複本。</summary>
      <returns>目前 <see cref="T:System.Security.SecurityElement" /> 的複本。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.Equal(System.Security.SecurityElement)">
      <summary>比較兩個 XML 項目物件是否相等。</summary>
      <param name="other">要與目前 XML 項目物件比較的 XML 項目物件。</param>
      <returns>如果標記、屬性名稱與數值、子項目和目前 XML 項目中的欄位與 <paramref name="other" /> 參數中的對應部分相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.Escape(System.String)">
      <summary>將字串中無效的 XML 字元以它們的相等有效 XML 字元來取代。</summary>
      <param name="str">要逸出無效字元的字串。</param>
      <returns>無效字元被取代後的輸入字串。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.FromString(System.String)">
      <summary>從 XML 編碼字串建立安全性項目。</summary>
      <param name="xml">用來建立安全性項目的 XML 編碼字串。</param>
      <returns>從 XML 建立的 <see cref="T:System.Security.SecurityElement" />。</returns>
      <exception cref="T:System.Security.XmlSyntaxException">
        <paramref name="xml" /> 包含一或多個單引號字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeName(System.String)">
      <summary>判斷字串是否為有效的屬性名稱。</summary>
      <param name="name">要測試有效性的屬性名稱。</param>
      <returns>如果 <paramref name="name" /> 參數是有效的 XML 屬性名稱，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeValue(System.String)">
      <summary>判斷字串是否為有效的屬性值。</summary>
      <param name="value">要測試有效性的屬性值。</param>
      <returns>如果 <paramref name="value" /> 參數是有效的 XML 屬性值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidTag(System.String)">
      <summary>判斷字串是否為有效的標記。</summary>
      <param name="tag">要測試有效性的標記。</param>
      <returns>如果 <paramref name="tag" /> 參數是有效的 XML 標記，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidText(System.String)">
      <summary>判斷字串是否可做為 XML 項目內的有效文字。</summary>
      <param name="text">要測試有效性的文字。</param>
      <returns>如果 <paramref name="text" /> 參數為有效的 XML 文字項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForChildByTag(System.String)">
      <summary>依它的標記名稱搜尋子項目。</summary>
      <param name="tag">要在子項目中搜尋的標記。</param>
      <returns>第一個具有指定標記數值的子 XML 項目，或如果具有 <paramref name="tag" /> 的子項目不存在，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)">
      <summary>依它的標記名稱尋找子項目，並傳回所包含的文字。</summary>
      <param name="tag">要在子項目中搜尋的標記。</param>
      <returns>第一個子項目的文字內容，這個子項目具有指定標記值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Tag">
      <summary>取得或設定 XML 項目的標記名稱。</summary>
      <returns>XML 項目的標記名稱。</returns>
      <exception cref="T:System.ArgumentNullException">標記為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">標記在 XML 中是無效的。</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Text">
      <summary>取得或設定 XML 項目中的文字。</summary>
      <returns>XML 項目中的文字值。</returns>
      <exception cref="T:System.ArgumentException">文字在 XML 中是無效的。</exception>
    </member>
    <member name="M:System.Security.SecurityElement.ToString">
      <summary>產生 XML 項目的字串表示以及它的構成屬性、子項目和文字。</summary>
      <returns>XML 項目和其內容。</returns>
    </member>
    <member name="T:System.StringComparer">
      <summary>代表使用特定大小寫和文化特性架構或序數比較規則的字串比較作業。</summary>
    </member>
    <member name="M:System.StringComparer.#ctor">
      <summary>初始化 <see cref="T:System.StringComparer" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.StringComparer.Compare(System.Object,System.Object)">
      <summary>以衍生類別覆寫時，比較兩個物件，並且傳回其相對排序次序的指示。</summary>
      <param name="x">要與 <paramref name="y" /> 相比較的物件。</param>
      <param name="y">要與 <paramref name="x" /> 相比較的物件。</param>
      <returns>帶正負號的整數，表示 <paramref name="x" /> 和 <paramref name="y" /> 的相對值，如下表所示。
  值 
  意義 
  小於零 
 在排序次序中，<paramref name="x" /> 會排在 <paramref name="y" /> 之前。  
  
-或- 
 <paramref name="x" /> 是 <see langword="null" /> 及 <paramref name="y" /> 不是 <see langword="null" />。  
  
  零 
 <paramref name="x" /> 等於 <paramref name="y" />。  
  
-或- 
 <paramref name="x" /> 和 <paramref name="y" /> 都是 <see langword="null" />。  
  
  大於零 
 在排序次序中，<paramref name="x" /> 會排在 <paramref name="y" /> 之後。  
  
-或- 
 <paramref name="y" /> 是 <see langword="null" />，以及 <paramref name="x" /> 不是 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 和 <paramref name="y" /> 都不是 <see cref="T:System.String" /> 物件，而且 <paramref name="x" /> 和 <paramref name="y" /> 都未實作 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.StringComparer.Compare(System.String,System.String)">
      <summary>以衍生類別覆寫時，比較兩個字串，並且傳回其相對排序次序的指示。</summary>
      <param name="x">要與 <paramref name="y" /> 相比較的字串。</param>
      <param name="y">要與 <paramref name="x" /> 相比較的字串。</param>
      <returns>帶正負號的整數，表示 <paramref name="x" /> 和 <paramref name="y" /> 的相對值，如下表所示。
  值 
  意義 
  小於零 
 在排序次序中，<paramref name="x" /> 會排在 <paramref name="y" /> 之前。  
  
-或- 
 <paramref name="x" /> 是 <see langword="null" /> 及 <paramref name="y" /> 不是 <see langword="null" />。  
  
  零 
 <paramref name="x" /> 等於 <paramref name="y" />。  
  
-或- 
 <paramref name="x" /> 和 <paramref name="y" /> 都是 <see langword="null" />。  
  
  大於零 
 在排序次序中，<paramref name="x" /> 會排在 <paramref name="y" /> 之後。  
  
-或- 
 <paramref name="y" /> 是 <see langword="null" />，以及 <paramref name="x" /> 不是 <see langword="null" />。</returns>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
      <summary>建立 <see cref="T:System.StringComparer" /> 物件，以依據指定文化特性的規則比較字串。</summary>
      <param name="culture">文化特性，其語言規則可用於執行字串比較。</param>
      <param name="ignoreCase">
        <see langword="true" /> 表示將比較作業指定為不區分大小寫，<see langword="false" /> 表示將比較作業指定為區分大小寫。</param>
      <returns>新的 <see cref="T:System.StringComparer" /> 物件，會依據 <paramref name="culture" /> 參數使用的比較規則，以及 <paramref name="ignoreCase" /> 參數指定的大小寫規則，執行字串比較。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <param name="culture" />
      <param name="options" />
    </member>
    <member name="P:System.StringComparer.CurrentCulture">
      <summary>取得 <see cref="T:System.StringComparer" /> 物件；此物件會使用目前文化特性的字組比較規則，執行區分大小寫字串的比較。</summary>
      <returns>新的 <see cref="T:System.StringComparer" /> 物件。</returns>
    </member>
    <member name="P:System.StringComparer.CurrentCultureIgnoreCase">
      <summary>取得 <see cref="T:System.StringComparer" /> 物件，此物件會使用目前文化特性的字組比較規則，執行不區分大小寫字串的比較。</summary>
      <returns>字串比較的新物件。</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.Object,System.Object)">
      <summary>以衍生類別覆寫時，指出兩個物件是否相等。</summary>
      <param name="x">要與 <paramref name="y" /> 相比較的物件。</param>
      <param name="y">要與 <paramref name="x" /> 相比較的物件。</param>
      <returns>當 <paramref name="x" /> 和 <paramref name="y" /> 全都參考相同的物件，或 <paramref name="x" /> 和 <paramref name="y" /> 全都是相同的物件類型，而且 <paramref name="x" /> 和 <paramref name="y" /> 是 <see langword="null" /> 時為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.String,System.String)">
      <summary>以衍生類別覆寫時，指出兩個字串是否相等。</summary>
      <param name="x">要與 <paramref name="y" /> 相比較的字串。</param>
      <param name="y">要與 <paramref name="x" /> 相比較的字串。</param>
      <returns>當 <paramref name="x" /> 和 <paramref name="y" /> 全都參考相同的物件、<paramref name="x" /> 和 <paramref name="y" /> 相等，或 <paramref name="x" /> 和 <paramref name="y" /> 為 <see langword="null" /> 時為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.StringComparer.FromComparison(System.StringComparison)">
      <param name="comparisonType" />
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.Object)">
      <summary>以衍生類別覆寫時，取得指定之物件的雜湊碼。</summary>
      <param name="obj">物件。</param>
      <returns>從 <paramref name="obj" /> 參數值計算所得之 32 位元帶正負號的雜湊碼。</returns>
      <exception cref="T:System.ArgumentException">記憶體不足，無法配置用來計算雜湊碼所需的緩衝區。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.String)">
      <summary>以衍生類別覆寫時，取得指定之字串的雜湊碼。</summary>
      <param name="obj">字串。</param>
      <returns>從 <paramref name="obj" /> 參數值計算所得之 32 位元帶正負號的雜湊碼。</returns>
      <exception cref="T:System.ArgumentException">記憶體不足，無法配置用來計算雜湊碼所需的緩衝區。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.StringComparer.InvariantCulture">
      <summary>取得 <see cref="T:System.StringComparer" /> 物件，該物件會使用不變文化特性的字組比較規則，執行區分大小寫字串的比較。</summary>
      <returns>新的 <see cref="T:System.StringComparer" /> 物件。</returns>
    </member>
    <member name="P:System.StringComparer.InvariantCultureIgnoreCase">
      <summary>取得 <see cref="T:System.StringComparer" /> 物件，該物件會使用不變文化特性的字組比較規則，執行不區分大小寫字串的比較。</summary>
      <returns>新的 <see cref="T:System.StringComparer" /> 物件。</returns>
    </member>
    <member name="P:System.StringComparer.Ordinal">
      <summary>取得 <see cref="T:System.StringComparer" /> 物件，該物件會執行區分大小寫的序數字串比較。</summary>
      <returns>
        <see cref="T:System.StringComparer" /> 物件。</returns>
    </member>
    <member name="P:System.StringComparer.OrdinalIgnoreCase">
      <summary>取得 <see cref="T:System.StringComparer" /> 物件，該物件會執行不區分大小寫的序數字串比較。</summary>
      <returns>
        <see cref="T:System.StringComparer" /> 物件。</returns>
    </member>
    <member name="T:System.StringNormalizationExtensions">
      <summary>提供擴充方法以使用字串正規化。</summary>
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String)">
      <summary>指出指定的字串是否為 Unicode 正規化格式 C。</summary>
      <param name="value">字串。</param>
      <returns>
        <see langword="true" /> 表示 <paramref name="value" /> 是正規化格式 C，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 包含無效的 Unicode 字元。</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String,System.Text.NormalizationForm)">
      <summary>指出字串是否為指定的 Unicode 正規化格式。</summary>
      <param name="value">字串。</param>
      <param name="normalizationForm">Unicode 正規化格式。</param>
      <returns>如果 <paramref name="value" /> 是正規化格式 <paramref name="normalizationForm" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 包含無效的 Unicode 字元。</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String)">
      <summary>將字串標準化為 Unicode 正規化格式 C。</summary>
      <param name="value">要正規化的字串。</param>
      <returns>新字串，其文字值與 <paramref name="value" /> 相同，但二進位表示卻是 Unicode 正規化格式 C。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 包含無效的 Unicode 字元。</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String,System.Text.NormalizationForm)">
      <summary>將字串標準化為指定的 Unicode 正規化格式。</summary>
      <param name="value">要正規化的字串。</param>
      <param name="normalizationForm">Unicode 正規化格式。</param>
      <returns>新字串，其文字值與 <paramref name="value" /> 相同，但二進位表示卻是 <paramref name="normalizationForm" /> 正規化格式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 包含無效的 Unicode 字元。</exception>
    </member>
    <member name="T:System.UriBuilder">
      <summary>提供統一資源識別元 (URI) 的自訂建構函式，並修改 <see cref="T:System.Uri" /> 類別的 URI。</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>初始化 <see cref="T:System.UriBuilder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>使用指定的 URI，初始化 <see cref="T:System.UriBuilder" /> 類別的新執行個體。</summary>
      <param name="uri">URI 字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.UriFormatException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.FormatException" />。  
  

          
          <paramref name="uri" /> 是零長度字串或只包含空格。  
  
-或- 
剖析常式偵測到格式無效的配置。  
  
-或- 
剖析器在不是使用「檔案」配置的 URI 中偵測到兩個以上連續的斜線。  
  
-或- 
 <paramref name="uri" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>使用指定的配置和主機，初始化 <see cref="T:System.UriBuilder" /> 類別的新執行個體。</summary>
      <param name="schemeName">網際網路存取通訊協定。</param>
      <param name="hostName">DNS 式網域名稱或 IP 位址。</param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>使用指定的配置、主機和連接埠，初始化 <see cref="T:System.UriBuilder" /> 類別的新執行個體。</summary>
      <param name="scheme">網際網路存取通訊協定。</param>
      <param name="host">DNS 式網域名稱或 IP 位址。</param>
      <param name="portNumber">服務的 IP 連接埠編號。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="portNumber" /> 小於 -1 或大於 65,535。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>使用指定的配置、主機、連接埠編號和路徑，初始化 <see cref="T:System.UriBuilder" /> 類別的新執行個體。</summary>
      <param name="scheme">網際網路存取通訊協定。</param>
      <param name="host">DNS 式網域名稱或 IP 位址。</param>
      <param name="port">服務的 IP 連接埠編號。</param>
      <param name="pathValue">網際網路資源的路徑。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小於 -1 或大於 65,535。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>使用指定的配置、主機、連接埠編號、路徑和查詢字串或片段識別項，初始化 <see cref="T:System.UriBuilder" /> 類別的新執行個體。</summary>
      <param name="scheme">網際網路存取通訊協定。</param>
      <param name="host">DNS 式網域名稱或 IP 位址。</param>
      <param name="port">服務的 IP 連接埠編號。</param>
      <param name="path">網際網路資源的路徑。</param>
      <param name="extraValue">查詢字串或片段識別項。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="extraValue" /> 不是 <see langword="null" /> 也不是 <see cref="F:System.String.Empty" />，有效片段識別項不是以數字符號 (#) 開頭，有效查詢字串也不是以問號 (?) 開頭。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小於 -1 或大於 65,535。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>使用指定的 <see cref="T:System.UriBuilder" /> 執行個體，初始化 <see cref="T:System.Uri" /> 類別的新執行個體。</summary>
      <param name="uri">
        <see cref="T:System.Uri" /> 類別的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>比較現有的 <see cref="T:System.Uri" /> 執行個體和 <see cref="T:System.UriBuilder" /> 的內容，檢查是否相等。</summary>
      <param name="rparam">要與目前執行個體比較的物件。</param>
      <returns>如果 <paramref name="rparam" /> 代表 <see cref="T:System.Uri" /> 與此 <see cref="T:System.Uri" /> 執行個體所建構的 <see cref="T:System.UriBuilder" /> 相同時，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>取得或設定 URI 的片段部分。</summary>
      <returns>URI 的片段部分。 片段識別項 ("#") 會加入至片段的開頭。</returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>傳回 URI 的雜湊碼。</summary>
      <returns>為 URI 所產生的雜湊碼。</returns>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>取得或設定伺服器的網域名稱系統 (DNS) 主機名稱或 IP 位址。</summary>
      <returns>伺服器的 DNS 主機名稱或 IP 位址。</returns>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>取得或設定存取 URI 之使用者的相關密碼。</summary>
      <returns>存取 URI 之使用者的密碼。</returns>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>取得或設定 URI 參考的資源路徑。</summary>
      <returns>URI 參考的資源路徑。</returns>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>取得或設定 URI 的連接埠編號。</summary>
      <returns>URI 的連接埠編號。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">連接埠不能設定為小於 -1 或大於 65,535 的值。</exception>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>取得或設定 URI 所包含的任何查詢資訊。</summary>
      <returns>URI 所包含的查詢資訊。</returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>取得或設定 URI 的配置名稱。</summary>
      <returns>URI 的配置。</returns>
      <exception cref="T:System.ArgumentException">配置不能設定為不正確的配置名稱。</exception>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>傳回所指定 <see cref="T:System.UriBuilder" /> 執行個體的顯示字串。</summary>
      <returns>字串，包含 <see cref="T:System.UriBuilder" /> 的未逸出顯示字串。</returns>
      <exception cref="T:System.UriFormatException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.FormatException" />。  
  

            
  
 <see cref="T:System.UriBuilder" /> 執行個體的密碼不正確。</exception>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>取得指定的 <see cref="T:System.Uri" /> 執行個體建構的 <see cref="T:System.UriBuilder" /> 執行個體 。</summary>
      <returns>包含 <see cref="T:System.UriBuilder" /> 建構之 URI 的 <see cref="T:System.Uri" />。</returns>
      <exception cref="T:System.UriFormatException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.FormatException" />。  
  

            
  
 <see cref="T:System.UriBuilder" /> 屬性建構的 URI 無效。</exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>存取 URI 之使用者的相關使用者名稱。</summary>
      <returns>存取 URI 之使用者的使用者名稱。</returns>
    </member>
  </members>
</doc>
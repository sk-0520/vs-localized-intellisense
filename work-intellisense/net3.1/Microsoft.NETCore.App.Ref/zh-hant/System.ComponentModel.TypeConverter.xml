<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">提供 <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using no parameters.">不使用參數來初始化 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using the specified object as the new item.">使用指定的物件當做新項目，初始化 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 類別的新執行個體。</summary>
      <param name="newObject" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the new item value.">
        <see cref="T:System.Object" />，做為新項目值。</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary vsli:raw="Gets or sets the object to be added to the binding list.">取得或設定要加入至繫結清單的物件。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to be added as a new item to the associated collection.">
        <see cref="T:System.Object" />，當做要加入至關聯集合的新項目。</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">代表將處理 <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event, typically a data container or data-bound collection.">事件的來源，通常為資料容器或資料繫結集合。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.AddingNewEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary vsli:raw="Specifies the value to pass to a property to cause the property to get its value from another source. This is known as ambience. This class cannot be inherited.">指定要傳遞至屬性的值，讓屬性從其他來源取得其值。 這稱為「環境」。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Boolean value for its value.">初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為 Boolean 值。</summary>
      <param name="value" vsli:raw="The value of this attribute.">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an 8-bit unsigned integer for its value.">初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為 8 位元不帶正負號的整數 (Unsigned Integer)。</summary>
      <param name="value" vsli:raw="The value of this attribute.">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Unicode character for its value.">初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為 Unicode 字元。</summary>
      <param name="value" vsli:raw="The value of this attribute.">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a double-precision floating-point number for its value.">初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為雙精度浮點數。</summary>
      <param name="value" vsli:raw="The value of this attribute.">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 16-bit signed integer for its value.">初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為 16 位元帶正負號的整數。</summary>
      <param name="value" vsli:raw="The value of this attribute.">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 32-bit signed integer for its value.">初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為 32 位元帶正負號的整數。</summary>
      <param name="value" vsli:raw="The value of this attribute.">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 64-bit signed integer for its value.">初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為 64 位元帶正負號的整數。</summary>
      <param name="value" vsli:raw="The value of this attribute.">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an object for its value.">初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為物件。</summary>
      <param name="value" vsli:raw="The value of this attribute.">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a single-precision floating point number for its value.">初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為單精確度浮點數。</summary>
      <param name="value" vsli:raw="The value of this attribute.">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a string for its value.">初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為字串。</summary>
      <param name="value" vsli:raw="The value of this attribute.">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given the value and its type.">初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定值和型別。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">
        <paramref name="value" /> 參數的 <see cref="T:System.Type" />。</param>
      <param name="value" vsli:raw="The value for this attribute.">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">判斷指定的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 是否等於目前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">與目前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 相比較的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 和目前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">目前 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary vsli:raw="Gets the object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">取得物件，其為這個 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 的值。</summary>
      <returns vsli:raw="The object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">物件，為這個 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 的值。</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Array&quot; /&gt; objects to and from various other representations.">提供型別轉換子 (Type Converter) 將 <see cref="T:System.Array" /> 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ArrayConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ArrayConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">將指定的數值物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" /> 所要轉換成的文化特性 (Culture)。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">值將會轉換成這個 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter.">取得由值參數所指定之陣列型別的屬性集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">
        <see cref="T:System.Object" />，指定要取得屬性之陣列的型別。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">
        <see cref="T:System.Attribute" /> 型別的陣列，可當做篩選條件使用。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for an array, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有公開給陣列的屬性；如果沒有屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties.">取得值，表示這個物件是否支援屬性。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />，因為應該呼叫 <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 尋找這個物件的屬性。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary vsli:raw="Represents a collection of attributes.">表示屬性的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.AttributeCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.AttributeCollection" /> 類別的新執行個體。</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection.">
        <see cref="T:System.Attribute" /> 型別的陣列，提供這個集合的屬性。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributes" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary vsli:raw="Gets the attribute collection.">取得屬性集合。</summary>
      <returns vsli:raw="The attribute collection.">屬性集合。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary vsli:raw="Determines whether this collection of attributes has the specified attribute.">判斷這個屬性集合是否具有指定屬性。</summary>
      <param name="attribute" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">要在集合中尋找的 <see cref="T:System.Attribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合包含屬性，或者是屬性型別的預設屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary vsli:raw="Determines whether this attribute collection contains all the specified attributes in the attribute array.">判斷這個屬性集合是否包含屬性陣列中所有的指定屬性。</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">要在集合中尋找之 <see cref="T:System.Attribute" /> 型別的陣列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains all the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合包含所有的屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the collection to an array, starting at the specified index.">複製集合至陣列，開始於指定的索引處。</summary>
      <param name="array" vsli:raw="The &lt;see cref=&quot;T:System.Array&quot; /&gt; to copy the collection to.">集合要複製到的 <see cref="T:System.Array" />。</param>
      <param name="index" vsli:raw="The index to start from.">做為開頭的索引。</param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary vsli:raw="Gets the number of attributes.">取得屬性的數目。</summary>
      <returns vsli:raw="The number of attributes.">屬性的數目。</returns>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use, rather than creating a new one. This field is read-only.">指定可使用的空集合，而非建立新集合。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from an existing &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">從現有的 <see cref="T:System.ComponentModel.AttributeCollection" /> 建立新 <see cref="T:System.ComponentModel.AttributeCollection" />。</summary>
      <param name="existing" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from which to create the copy.">用於建立複本的 <see cref="T:System.ComponentModel.AttributeCollection" />。</param>
      <param name="newAttributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection. Can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Attribute" /> 型別的陣列，提供這個集合的屬性。 可以是 <see langword="null" />。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that is a copy of &lt;paramref name=&quot;existing&quot; /&gt;.">新的 <see cref="T:System.ComponentModel.AttributeCollection" />，是 <paramref name="existing" /> 的複本。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;existing&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="existing" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;see cref=&quot;T:System.Type&quot; /&gt;.">傳回指定 <see cref="T:System.Attribute" /> 的預設 <see cref="T:System.Type" />。</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the attribute to retrieve.">要擷取屬性的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="The default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;paramref name=&quot;attributeType&quot; /&gt;.">指定之 <paramref name="attributeType" /> 的預設 <see cref="T:System.Attribute" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this collection.">取得這個集合的列舉程式。</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 型別的列舉程式。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the attribute with the specified index number.">取得具有指定索引編號的屬性。</summary>
      <param name="index" vsli:raw="The zero-based index of &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">
        <see cref="T:System.ComponentModel.AttributeCollection" /> 之以零起始的索引。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified index number.">具有指定索引編號的 <see cref="T:System.Attribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary vsli:raw="Gets the attribute with the specified type.">取得具有指定型別的屬性。</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to get from the collection.">要從集合中取得之 <see cref="T:System.Type" /> 的 <see cref="T:System.Attribute" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified type or, if the attribute does not exist, the default value for the attribute type.">具有指定型別的 <see cref="T:System.Attribute" />，或者，如果屬性不存在，則為屬性型別的預設值。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary vsli:raw="Determines whether a specified attribute is the same as an attribute in the collection.">判斷指定屬性是否和集合中的屬性相同。</summary>
      <param name="attribute" vsli:raw="An instance of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to compare with the attributes in this collection.">要與這個集合中屬性相比較之 <see cref="T:System.Attribute" /> 的執行個體。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果屬性包含在集合中，並且具有和集合中屬性相同的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary vsli:raw="Determines whether the attributes in the specified array are the same as the attributes in the collection.">判斷指定陣列中的屬性是否與集合中的屬性相同。</summary>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.MemberAttributes&quot; /&gt; to compare with the attributes in this collection.">要與這個集合中屬性相比較之 <see cref="T:System.CodeDom.MemberAttributes" /> 的陣列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果陣列中的所有屬性都包含在集合中，並且具有和集合中屬性相同的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">取得集合所包含的項目數目。</summary>
      <returns vsli:raw="The number of elements contained in the collection.">集合中所包含的項目數目。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread-safe).">取得值，指出對集合的存取是否為同步的 (安全執行緒)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合存取會同步處理 (安全執行緒)，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">取得物件，這個物件可以用來對集合進行同步存取。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Object，可用來對集合同步存取。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">傳回 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary vsli:raw="Enables attribute redirection. This class cannot be inherited.">啟用屬性重新導向。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name.">使用指定的型別名稱，初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 類別的新執行個體。</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">要指定的型別名稱。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name and property name.">使用指定的型別名稱和屬性名稱，初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 類別的新執行個體。</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">要指定的型別名稱。</param>
      <param name="propertyName" vsli:raw="The name of the property for which attributes will be retrieved.">將擷取屬性 (Attribute) 的屬性 (Property) 名稱。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type.">使用指定的型別，初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 類別的新執行個體。</summary>
      <param name="type" vsli:raw="The type to specify.">要指定的型別。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary vsli:raw="Gets the name of the property for which attributes will be retrieved.">取得將擷取屬性 (Attribute) 的屬性 (Property) 名稱。</summary>
      <returns vsli:raw="The name of the property for which attributes will be retrieved.">將擷取屬性 (Attribute) 的屬性 (Property) 名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary vsli:raw="Gets the assembly qualified type name passed into the constructor.">取得傳入建構函式的組件限定型別名稱。</summary>
      <returns vsli:raw="The assembly qualified name of the type specified in the constructor.">在建構函式中指定的組件限定型別名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary vsli:raw="Provides a base type converter for nonfloating-point numerical types.">提供非浮點數值類型的基底類型轉換器。</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">判斷這個轉換子是否可以將指定來源型別中的物件轉換成轉換子的原生型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type from which you want to convert.">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行作業，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">取得值，指出這個轉換子是否可以使用內容來將物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="t">
        <see cref="T:System.Type" />，表示要轉換之目的型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行作業，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">將指定的物件轉換成轉換子的原生型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">
        <see cref="T:System.Globalization.CultureInfo" />，指定用於表示數字的文化特性。</param>
      <param name="value" vsli:raw="The object to convert.">要轉換的物件。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.Exception" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> 對於目標型別並不是有效的值。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">將指定的物件轉換為另一個型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">
        <see cref="T:System.Globalization.CultureInfo" />，指定用於表示數字的文化特性。</param>
      <param name="value" vsli:raw="The object to convert.">要轉換的物件。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">要將物件轉換成的類型。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary vsli:raw="Specifies whether a member is typically used for binding. This class cannot be inherited.">指定成員是否通常使用於繫結。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with a Boolean value.">使用布林值 (Boolean)，初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 類別的新執行個體。</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示使用繫結屬性，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 類別的新執行個體。</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示使用繫結屬性，否則為 <see langword="false" />。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">其中一個 <see cref="T:System.ComponentModel.BindingDirection" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with one of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">使用其中一個 <see cref="T:System.ComponentModel.BindableSupport" />值，初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 類別的新執行個體。</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">其中一個 <see cref="T:System.ComponentModel.BindableSupport" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 類別的新執行個體。</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">其中一個 <see cref="T:System.ComponentModel.BindableSupport" /> 值。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">其中一個 <see cref="T:System.ComponentModel.BindingDirection" /> 值。</param>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating that a property is typically used for binding.">取得值，指出屬性通常用於繫結。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is typically used for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果屬性通常用於繫結，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.BindableAttribute.No&quot; /&gt;. This field is read-only.">指定 <see cref="T:System.ComponentModel.BindableAttribute" /> 的預設值，就是 <see cref="F:System.ComponentModel.BindableAttribute.No" />。 此欄位為唯讀。</summary>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary vsli:raw="Gets a value indicating the direction or directions of this property's data binding.">取得值，指出這個屬性的資料繫結方向。</summary>
      <returns vsli:raw="The direction of this property's data binding.">這個屬性的資料系結方向。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; objects are equal.">判斷兩個 <see cref="T:System.ComponentModel.BindableAttribute" /> 物件是否相等。</summary>
      <param name="obj" vsli:raw="The object to compare.">要比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if it is not equal.">如果指定的 <see cref="T:System.ComponentModel.BindableAttribute" /> 和目前的 <see cref="T:System.ComponentModel.BindableAttribute" /> 相等，則為 <see langword="true" />，如果不相等，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary vsli:raw="Serves as a hash function for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">做為 <see cref="T:System.ComponentModel.BindableAttribute" /> 類別的雜湊函式。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;.">目前 <see cref="T:System.ComponentModel.BindableAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">判斷這個屬性是否為預設值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果屬性是這個屬性類別的預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not typically used for binding. This field is read-only.">指定屬性通常不用於繫結。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is typically used for binding. This field is read-only.">指定屬性通常用於繫結。 此欄位為唯讀。</summary>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary vsli:raw="Specifies values to indicate whether a property can be bound to a data element or another property.">指定數值，表示屬性是否可以繫結至資料項目或另一個屬性。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary vsli:raw="The property is set to the default.">屬性設為預設值。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary vsli:raw="The property is not bindable at design time.">屬性在設計階段是不可繫結的。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary vsli:raw="The property is bindable at design time.">屬性在設計階段是可繫結的。</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary vsli:raw="Specifies whether the template can be bound one way or two ways.">指定可以用一或兩個方法繫結樣板。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary vsli:raw="The template can only accept property values. Used with a generic &lt;see cref=&quot;T:System.Web.UI.ITemplate&quot; /&gt;.">樣板只能接受屬性值。 與泛型 <see cref="T:System.Web.UI.ITemplate" /> 一起使用。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary vsli:raw="The template can accept and expose property values. Used with an &lt;see cref=&quot;T:System.Web.UI.IBindableTemplate&quot; /&gt;.">樣板可以接受和公開屬性值。 與 <see cref="T:System.Web.UI.IBindableTemplate" /> 一起使用。</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary vsli:raw="Provides a generic collection that supports data binding.">提供支援資料繫結的泛型集合。</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">清單中項目的類型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class using default values.">使用預設值，初始化 <see cref="T:System.ComponentModel.BindingList`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class with the specified list.">使用指定的清單，初始化 <see cref="T:System.ComponentModel.BindingList`1" /> 類別的新執行個體。</summary>
      <param name="list" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; of items to be contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">在 <see cref="T:System.Collections.Generic.IList`1" /> 中所要包含之項目的 <see cref="T:System.ComponentModel.BindingList`1" />。</param>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary vsli:raw="Occurs before an item is added to the list.">在項目加入至清單之前發生。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary vsli:raw="Adds a new item to the collection.">將新項目加入至集合中。</summary>
      <returns vsli:raw="The item added to the list.">加入此清單的項目。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Forms.BindingSource.AllowNew&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A public parameterless constructor could not be found for the current item type.">
        <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> 屬性設定為 <see langword="false" />。
-或-
目前項目類型找不到公用無參數建構函式。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary vsli:raw="Adds a new item to the end of the collection.">將新項目加入至集合的結尾。</summary>
      <returns vsli:raw="The item that was added to the collection.">已加入至集合中的項目。</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="The new item is not the same type as the objects contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">新項目與 <see cref="T:System.ComponentModel.BindingList`1" /> 中所含物件為不同型別。</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary vsli:raw="Gets or sets a value indicating whether items in the list can be edited.">取得或設定值，指出清單中的項目是否可以編輯。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果可以編輯清單項目則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary vsli:raw="Gets or sets a value indicating whether you can add items to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">取得或設定值，指出您是否可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法，將項目加入至清單中。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">如果您可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法將項目加入至清單，則為 <see langword="true" />，否則為 <see langword="false" />。 預設取決於清單中所含的基礎型別。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary vsli:raw="Gets or sets a value indicating whether you can remove items from the collection.">取得或設定值，指出您是否可以從集合移除項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果您可以使用 <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 方法從清單移除項目，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the items if overridden in a derived class; otherwise, throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">如果在衍生類別中覆寫時，排序項目，否則擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that specifies the property to sort on.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，指定要排序的屬性。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">其中一個 <see cref="T:System.ComponentModel.ListSortDirection" /> 值。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">在衍生類別中未覆寫方法。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item.">捨棄暫止的新項目。</summary>
      <param name="itemIndex" vsli:raw="The index of the of the new item to be added.">要加入之新項目的索引。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary vsli:raw="Removes all elements from the collection.">從集合中移除所有項目。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">將暫止的新項目認可到集合中。</summary>
      <param name="itemIndex" vsli:raw="The index of the new item to be added.">要加入之新項目的索引。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Searches for the index of the item that has the specified property descriptor with the specified value, if searching is implemented in a derived class; otherwise, a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">如果在衍生類別中實作搜尋時，搜尋具有指定之屬性描述項和值之項目的索引，否則為 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search for.">要搜尋的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key" vsli:raw="The value of &lt;paramref name=&quot;prop&quot; /&gt; to match.">要比對的 <paramref name="prop" /> 值。</param>
      <returns vsli:raw="The zero-based index of the item that matches the property descriptor and contains the specified value.">符合屬性描述項並包含特定值的項目之以零起始的索引。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; is not overridden in a derived class.">在衍生類別中未覆寫 <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" />。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified item in the list at the specified index.">將指定的項目插入清單中的指定索引處。</summary>
      <param name="index" vsli:raw="The zero-based index where the item is to be inserted.">將插入項目之以零起始的索引處。</param>
      <param name="item" vsli:raw="The item to insert in the list.">在清單中要插入的項目。</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary vsli:raw="Gets a value indicating whether the list is sorted.">取得值，指出清單是否為排序。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is sorted; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果清單已排序，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary vsli:raw="Occurs when the list or an item in the list changes.">在清單變更或清單項目變更時發生。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.AddingNew&quot; /&gt; event.">引發 <see cref="E:System.ComponentModel.BindingList`1.AddingNew" /> 事件。</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">包含事件資料的 <see cref="T:System.ComponentModel.AddingNewEventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event.">引發 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.ListChangedEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary vsli:raw="Gets or sets a value indicating whether adding or removing items within the list raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events.">取得或設定值，指出在清單中加入或移除項目時是否引發 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if adding or removing items raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果加入或移除項目會引發 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">移除在指定索引處的項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="You are removing a newly added item and &lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowRemove&quot; /&gt; is set to &lt;see langword=&quot;false&quot; /&gt;.">您正在移除新加入的元素，而且 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> 已設定為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary vsli:raw="Removes any sort applied with &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; if sorting is implemented in a derived class; otherwise, raises &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">如果在衍生類別中實作排序時，移除以 <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 所套用的任何排序，否則引發 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">在衍生類別中未覆寫方法。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.Reset&quot; /&gt;.">引發 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 型別的 <see cref="F:System.ComponentModel.ListChangedType.Reset" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt; for the item at the specified position.">為指定之位置的項目，引發 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 型別的 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> 事件。</summary>
      <param name="position" vsli:raw="A zero-based index of the item to be reset.">要重設之項目的索引，這個索引以零起始。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">以指定的項目取代位於指定索引上的項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to replace.">要被取代之項目的索引，這個索引以零起始。</param>
      <param name="item" vsli:raw="The new value for the item at the specified index. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">指定之索引處的項目新值。 參考類型的值可以是 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.ObjectModel.Collection`1.Count&quot; /&gt;.">
        <paramref name="index" /> 小於零。
-或-
<paramref name="index" /> 大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary vsli:raw="Gets the direction the list is sorted.">取得清單的排序方向。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.ComponentModel.ListSortDirection.Ascending&quot; /&gt;.">其中一個 <see cref="T:System.ComponentModel.ListSortDirection" /> 值。 預設為 <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary vsli:raw="Gets the property descriptor that is used for sorting the list if sorting is implemented in a derived class; otherwise, returns &lt;see langword=&quot;null&quot; /&gt;.">如果在衍生類別中實作排序，取得排序清單時所使用的屬性描述項，否則傳回 <see langword="null" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; used for sorting the list.">用來排序清單的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary vsli:raw="Gets a value indicating whether &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are enabled.">取得值，指出是否已啟用 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果支援 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports searching.">取得值，指出清單是否支援搜尋。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果清單支援搜尋，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports sorting.">取得值，指出清單是否支援排序。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果清單支援搜尋，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add as a search criteria.">要加入做為搜尋準則的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary vsli:raw="Adds a new item to the list. For more information, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">將新的項目加入至清單中。 如需詳細資訊，請參閱<see cref="M:System.ComponentModel.IBindingList.AddNew" />。</summary>
      <returns vsli:raw="The item added to the list.">加入此清單的項目。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">不支援這個方法。</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary vsli:raw="Gets a value indicating whether items in the list can be edited.">取得值，指出清單中的項目是否可以編輯。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果可以編輯清單項目則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary vsli:raw="Gets a value indicating whether new items can be added to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">取得值，指出是否可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法，將新項目加入至清單中。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">如果您可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法將項目加入至清單，則為 <see langword="true" />，否則為 <see langword="false" />。 預設取決於清單中所含的基礎型別。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary vsli:raw="Gets a value indicating whether items can be removed from the list.">取得值，指出是否可以從清單中移除項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果您可以使用 <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 方法從清單移除項目，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;. For a complete description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">根據 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" /> 來排序清單。 如需這個成員的完整說明，請參閱 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />。</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">要做為排序依據的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">其中一個 <see cref="T:System.ComponentModel.ListSortDirection" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />。</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">要在其上搜尋的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;prop&quot; /&gt; parameter to search for.">要搜尋的 <paramref name="prop" /> 參數值。</param>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">具有指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的列索引。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.IsSorted&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已呼叫 <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" /> 而尚未呼叫 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">從用來搜尋的索引中所要移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt;.">如需這個成員的描述，請參閱 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />。</summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortDirection&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">其中一個 <see cref="T:System.ComponentModel.ListSortDirection" /> 值。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortProperty&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">已經用來排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsChangeNotification&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果清單變更或項目變更時引發 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果清單支援使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法的搜尋，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果清單支援搜尋，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether item property value changes raise &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt;. This member cannot be overridden in a derived class.">取得值，指出項目屬性值變更是否會引發 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 型別的 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> 事件。 在衍生類別中不可覆寫這個成員。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list type implements &lt;see cref=&quot;T:System.ComponentModel.INotifyPropertyChanged&quot; /&gt;, otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果清單類型<see cref="T:System.ComponentModel.INotifyPropertyChanged" />會執行，則<see langword="false" />為，否則為。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Boolean&quot; /&gt; objects to and from various other representations.">提供型別轉換子 (Type Converter) 將 <see cref="T:System.Boolean" /> 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BooleanConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.BooleanConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Boolean object using the specified context.">取得值，指出這個轉換子是否可以使用指定的內容，將指定來源型別中的物件轉換成布林物件。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個物件可以執行轉換則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a Boolean object.">將指定值物件轉換為布林物件。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">
        <see cref="T:System.Globalization.CultureInfo" />，指定要轉換成的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> 對於目標型別並不是有效的值。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the Boolean data type.">取得布林資料型別的標準值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，含有標準的有效值集合。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">取得值，表示從 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 方法所傳回的標準值清單是否為獨佔清單。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">因為從 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 傳回的 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能值的詳盡清單，所以會是 <see langword="true" />。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">取得值，表示這個物件是否支援可以從清單選取的標準值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">因為可以呼叫 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 來尋找物件支援的通用值集合，所以會是 <see langword="true" />。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from various other representations.">提供類型轉換器，將 8 位元不帶正負號的整數物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ByteConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ByteConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary vsli:raw="Represents the method that handles a cancelable event.">表示處理可取消事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件的來源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CancelEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.CancelEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary vsli:raw="Provides a type converter to convert Unicode character objects to and from various other representations.">提供型別轉換子 (Type Converter) 將 Unicode 字元物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CharConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.CharConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Unicode character object using the specified context.">取得值，表示這個轉換子是否可以使用指定的內容，將指定來源型別中的物件轉換成 Unicode 字元物件。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">
        <see cref="T:System.Type" />，表示您要轉換的來源類型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a Unicode character object.">將指定的物件轉換成 Unicode 字元物件。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" /> 所要轉換成的文化特性 (Culture)。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> 對於目標型別並不是有效的值。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a Unicode character object using the arguments.">使用引數，將指定值物件轉換成 Unicode 字元物件。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" /> 所要轉換成的文化特性 (Culture)。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">值將會轉換成這個 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary vsli:raw="Specifies how the collection is changed.">指定變更集合的方式。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary vsli:raw="Specifies that an element was added to the collection.">指定將元素加入集合中。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary vsli:raw="Specifies that the entire collection has changed. This is caused by using methods that manipulate the entire collection, such as &lt;see cref=&quot;M:System.Collections.CollectionBase.Clear&quot; /&gt;.">指定整個集合已經變更。 這是由於使用操作整個集合的方法 (例如 <see cref="M:System.Collections.CollectionBase.Clear" />) 所導致的。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary vsli:raw="Specifies that an element was removed from the collection.">指定將元素從集合中移除。</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event.">提供 <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> 類別的新執行個體。</summary>
      <param name="action" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values that specifies how the collection changed.">其中一個 <see cref="T:System.ComponentModel.CollectionChangeAction" /> 值，指定集合的變更方式。</param>
      <param name="element" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the instance of the collection where the change occurred.">
        <see cref="T:System.Object" />，指定發生變更的集合之執行個體。</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary vsli:raw="Gets an action that specifies how the collection changed.">取得指定集合變更方式的動作。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values.">其中一個 <see cref="T:System.ComponentModel.CollectionChangeAction" /> 值。</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary vsli:raw="Gets the instance of the collection with the change.">取得變更的集合執行個體。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the instance of the collection with the change, or &lt;see langword=&quot;null&quot; /&gt; if you refresh the collection.">
        <see cref="T:System.Object" />，表示變更的集合之執行個體，如果重新整理集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event raised when adding elements to or removing elements from a collection.">表示當在集合中加入或移除元素時，會處理引發的 <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件的來源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary vsli:raw="Provides a type converter to convert collection objects to and from various other representations.">提供型別轉換子 (Type Converter) 將集合物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.CollectionConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">將指定的數值物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The culture to which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" /> 所要轉換的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This parameter must inherit from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">要進行轉換的 <see cref="T:System.Object" />。 這個參數必須繼承自 <see cref="T:System.Collections.ICollection" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">值將會轉換成這個 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter using the specified context and attributes.">使用指定的內容和屬性 (Attribute)，取得由值參數所指定之陣列型別的屬性 (Property) 集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">
        <see cref="T:System.Object" />，指定要取得屬性之陣列的型別。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">
        <see cref="T:System.Attribute" /> 型別的陣列，可當做篩選條件使用。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有為這個資料型別所公開的屬性，如果沒有屬性，則為 <see langword="null" />。 這個方法一律會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>取得值，表示這個物件是否支援屬性。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>因為不應該呼叫 <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 來尋找這個物件的屬性，所以會是 <see langword="false" />。 這個方法永遠不會傳回 <see langword="true" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the data source and data member properties for a component that supports complex data binding. This class cannot be inherited.">指定支援複雜資料繫結之元件的資料來源和資料成員屬性。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using no parameters.">不使用參數來初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source.">使用指定的資料來源，初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 類別的新執行個體。</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">做為資料來源的屬性名稱。</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source and data member.">使用指定的資料來源和資料成員，初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 類別的新執行個體。</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">做為資料來源的屬性名稱。</param>
      <param name="dataMember" vsli:raw="The name of the property to be used as the source for data.">做為資料來源的屬性名稱。</param>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary vsli:raw="Gets the name of the data member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">取得 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所繫結之元件的資料成員屬性名稱。</summary>
      <returns vsli:raw="The name of the data member property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所繫結之元件的資料成員屬性名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">取得 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所繫結之元件的資料來源屬性名稱。</summary>
      <returns vsli:raw="The name of the data source property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所繫結之元件的資料來源屬性名稱。</returns>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class.">表示 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 類別的預設值。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">判斷指定的 <see cref="T:System.Object" /> 和目前的 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 執行個體是否相等。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">要與目前 <see cref="T:System.Object" /> 執行個體比較的 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">如果物件和目前執行個體相等，則為 <see langword="true" />，否則為 <see langword="false" />，表示不相等。</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary vsli:raw="Provides a type converter to convert components to and from various other representations.">提供型別轉換子 (Type Converter) 將元件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ComponentConverter" /> 類別的新執行個體。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this component converter.">
        <see cref="T:System.Type" />，代表要與此元件轉換器建立關聯的型別。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of component specified by the value parameter.">取得由值參數所指定的元件型別的屬性集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of component to get the properties for.">
        <see cref="T:System.Object" />，表示要其取得其屬性的元件型別。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">
        <see cref="T:System.Attribute" /> 型別的陣列，可當做篩選條件使用。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有為這個元件所公開的屬性；如果沒有屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">使用指定內容取得值，表示這個物件是否使用支援屬性。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />，因為應該呼叫 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 尋找這個物件的屬性。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary vsli:raw="Provides the base class for a custom component editor.">提供自訂元件編輯器的基底類別。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentEditor&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ComponentEditor" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified based upon a given context.">編輯元件並傳回值，表示是否已根據指定的內容修改元件。</summary>
      <param name="context" vsli:raw="An optional context object that can be used to obtain further information about the edit.">選擇性的內容物件，可用於取得有關編輯的詳細資訊。</param>
      <param name="component" vsli:raw="The component to be edited.">要編輯的元件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已修改元件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified.">編輯元件並傳回指示是否已修改元件的值。</summary>
      <param name="component" vsli:raw="The component to be edited.">要編輯的元件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已修改元件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary vsli:raw="Provides simple functionality for enumerating resources for a component or object. The &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class is a &lt;see cref=&quot;T:System.Resources.ResourceManager&quot; /&gt;.">提供簡單的功能，列舉元件或物件的資源。 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 類別是 <see cref="T:System.Resources.ResourceManager" />。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class with default values.">使用預設值，初始化 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; that looks up resources in satellite assemblies based on information from the specified &lt;see cref=&quot;T:System.Type&quot; /&gt;.">根據指定 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 的資訊，建立可查閱附屬組件中的 <see cref="T:System.Type" />。</summary>
      <param name="t" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; from which the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; derives all information for finding resource files.">
        <see cref="T:System.Type" />，<see cref="T:System.ComponentModel.ComponentResourceManager" /> 會自其中衍生用以尋找資源檔的所有資訊。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">將資源的值套用至物件的對應屬性。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">
        <see cref="T:System.Object" />，包含要套用的屬性值。</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">
        <see cref="T:System.String" />，包含要在資源中查詢的物件名稱。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 或 <paramref name="objectName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">將資源的值套用至物件的對應屬性。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">
        <see cref="T:System.Object" />，包含要套用的屬性值。</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">
        <see cref="T:System.String" />，包含要在資源中查詢的物件名稱。</param>
      <param name="culture" vsli:raw="The culture for which to apply resources.">要套用資源的文化特性。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 或 <paramref name="objectName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary vsli:raw="Encapsulates zero or more components.">封裝零個或多個元件。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Container" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;. The component is unnamed.">將指定的 <see cref="T:System.ComponentModel.Component" /> 加入至 <see cref="T:System.ComponentModel.Container" />。 元件未命名。</summary>
      <param name="component" vsli:raw="The component to add.">要加入的元件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; and assigns it a name.">將指定的 <see cref="T:System.ComponentModel.Component" /> 加入 <see cref="T:System.ComponentModel.Container" />，並指派名稱給它。</summary>
      <param name="component" vsli:raw="The component to add.">要加入的元件。</param>
      <param name="name" vsli:raw="The unique, case-insensitive name to assign to the component.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt;, which leaves the component unnamed.">要指派給元件的唯一、不區分大小寫的名稱。
-或-
<see langword="null" />，表示沒有為元件命名。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">
        <paramref name="name" /> 不是唯一。</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary vsli:raw="Gets all the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">取得 <see cref="T:System.ComponentModel.Container" /> 中的所有元件。</summary>
      <returns vsli:raw="A collection that contains the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">集合，含有 <see cref="T:System.ComponentModel.Container" /> 中的元件。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; for the given &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and assigns the given name to the site.">為指定的 <see cref="T:System.ComponentModel.ISite" /> 建立站台 <see cref="T:System.ComponentModel.IComponent" />，並將指定的名稱指派給站台。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">要為其建立站台的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">要指派給 <paramref name="component" /> 的名稱，或 <see langword="null" />，表示略過名稱的指派。</param>
      <returns vsli:raw="The newly created site.">新建立的站台。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">釋放 <see cref="T:System.ComponentModel.Container" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;, and optionally releases the managed resources.">釋放 <see cref="T:System.ComponentModel.Container" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary vsli:raw="Releases unmanaged resources and performs other cleanup operations before the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; is reclaimed by garbage collection.">釋出 Unmanaged 資源並執行其他清除作業後，記憶體回收才能重新回收 <see cref="T:System.ComponentModel.Container" />。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">取得指定型別的服務物件 (如果有的話)。</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">要擷取服務的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; implementing the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">實作要求服務的 <see cref="T:System.Object" />，或 <see langword="null" /> (如果無法解析服務)。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">從 <see cref="T:System.ComponentModel.Container" /> 移除元件。</summary>
      <param name="component" vsli:raw="The component to remove.">要移除的元件。</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; without setting &lt;see cref=&quot;P:System.ComponentModel.IComponent.Site&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;.">從 <see cref="T:System.ComponentModel.Container" /> 移除元件，而不必將 <see cref="P:System.ComponentModel.IComponent.Site" /> 設定為 <see langword="null" />。</summary>
      <param name="component" vsli:raw="The component to remove.">要移除的元件。</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Determines whether the component name is unique for this container.">判斷元件名稱對這個容器而言是否唯一。</summary>
      <param name="component" vsli:raw="The named component.">具名元件。</param>
      <param name="name" vsli:raw="The component name to validate.">要驗證的元件名稱。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">
        <paramref name="name" /> 不是唯一。</exception>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary vsli:raw="Provides a base class for the container filter service.">提供容器篩選服務的基底類別</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ContainerFilterService&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ContainerFilterService" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary vsli:raw="Filters the component collection.">篩選元件集合。</summary>
      <param name="components" vsli:raw="The component collection to filter.">要篩選的元件集合。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ComponentCollection&quot; /&gt; that represents a modified collection.">
        <see cref="T:System.ComponentModel.ComponentCollection" />，表示修改的集合。</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; objects to and from various other representations.">提供型別轉換子 (Type Converter) 將 <see cref="T:System.Globalization.CultureInfo" /> 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CultureInfoConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.CultureInfoConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; using the specified context.">取得值，表示這個轉換子是否可以使用指定的內容，將指定來源型別中的物件轉換成 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">
        <see cref="T:System.Type" />，表示要轉換為何種目標型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;.">將指定的值物件轉換為 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">
        <see cref="T:System.Globalization.CultureInfo" />，指定要轉換成的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; specifies a culture that is not valid.">
        <paramref name="value" /> 指定的文化特性無效。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">將指定的數值物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">
        <see cref="T:System.Globalization.CultureInfo" />，指定要轉換成的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">值將會轉換成這個 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary vsli:raw="Retrieves the name of the specified culture.">擷取指定之文化特性的名稱。</summary>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to get the name for.">
        <see cref="T:System.Globalization.CultureInfo" />，指定要取得其名稱的文化特性。</param>
      <returns vsli:raw="The name of the specified culture.">指定之文化特性的名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object using the specified context.">使用指定的內容，取得 <see cref="T:System.Globalization.CultureInfo" /> 物件的標準值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 含有標準有效值的集合，如果資料型別不支援標準值集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list.">取得值，表示從 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 傳回的標準值清單是否為詳盡清單。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is not an exhaustive list of possible values (that is, other values are possible). This method never returns &lt;see langword=&quot;true&quot; /&gt;.">因為從 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 傳回的 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 不是可能值 (也就是說，其他值也有可能) 的詳盡清單，所以會是 <see langword="false" />。 這個方法永遠不會傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">取得值，指出這個物件是否支援可以使用指定內容從清單選取的標準值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">因為應該呼叫 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 來尋找物件支援的通用值集合，所以會是 <see langword="true" />。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary vsli:raw="Provides a simple default implementation of the &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; interface.">提供 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 介面的簡單預設實作。</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class using a parent custom type descriptor.">使用父自訂型別描述項，初始化 <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 類別的新執行個體。</summary>
      <param name="parent" vsli:raw="The parent custom type descriptor.">父自訂型別描述項。</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for the type represented by this type descriptor.">傳回這個型別描述項所表示之型別的自訂屬性集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the type. The default is &lt;see cref=&quot;F:System.ComponentModel.AttributeCollection.Empty&quot; /&gt;.">
        <see cref="T:System.ComponentModel.AttributeCollection" />，包含型別的屬性。 預設為 <see cref="F:System.ComponentModel.AttributeCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the fully qualified name of the class represented by this type descriptor.">傳回此類型描述元所代表之類別的完整格式名稱。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the fully qualified class name of the type this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.String" />，包含此類型描述元所描述之類型的完整類別名稱。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of the class represented by this type descriptor.">傳回這個型別描述項所表示之類別的名稱。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the component instance this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.String" />，包含這個型別描述項所描述之元件執行個體的名稱。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for the type represented by this type descriptor.">傳回這個型別描述項所表示之類別的型別轉換子。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the type represented by this type descriptor. The default is a newly created &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt;.">這個型別描述項所表示之類別的 <see cref="T:System.ComponentModel.TypeConverter" />。 預設為新建立的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the event descriptor for the default event of the object represented by this type descriptor.">傳回這個型別描述項所表示之物件的預設事件描述項。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the default event on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">這個型別描述項所表示之物件的預設事件 <see cref="T:System.ComponentModel.EventDescriptor" />。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the property descriptor for the default property of the object represented by this type descriptor.">傳回這個型別描述項所表示之物件的預設屬性描述項。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; for the default property on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">這個型別描述項所表示之物件的預設屬性 <see cref="T:System.ComponentModel.PropertyDescriptor" />。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type that is to be associated with the class represented by this type descriptor.">傳回指定型別的編輯器，這個指定型別與這個型別描述項所表示的類別關聯。</summary>
      <param name="editorBaseType" vsli:raw="The base type of the editor to retrieve.">要擷取之編輯器的基底型別。</param>
      <returns vsli:raw="An editor of the given type that is to be associated with the class represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">指定型別的編輯器，這個指定型別與這個型別描述項所表示的類別關聯。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns a collection of event descriptors for the object represented by this type descriptor.">傳回這個型別描述項所表示之物件的事件描述項集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptors for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" />，包含這個型別描述項所描述之物件的事件描述項。 預設為 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of event descriptors for the object represented by this type descriptor.">傳回這個型別描述項所表示之物件的已篩選事件描述項集合。</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">當做篩選條件之型別的陣列。 這可以是 <see langword="null" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" />，包含這個型別描述項所描述之物件的事件描述項。 預設為 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns a collection of property descriptors for the object represented by this type descriptor.">傳回這個型別描述項所表示之物件的屬性描述項集合。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含這個型別描述項所描述之物件的屬性描述項。 預設為 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of property descriptors for the object represented by this type descriptor.">傳回這個型別描述項所表示之物件的已篩選屬性描述項集合。</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">當做篩選條件之型別的陣列。 這可以是 <see langword="null" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含這個型別描述項所描述之物件的屬性描述項。 預設為 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">傳回物件，包含指定的屬性描述項所描述的屬性。</summary>
      <param name="pd" vsli:raw="The property descriptor for which to retrieve the owning object.">要擷取主控物件的屬性描述項。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that owns the given property specified by the type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Object" />，擁有這個型別描述項所指定的屬性。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary vsli:raw="Identifies a type as an object suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object. This class cannot be inherited.">將型別識別為適合繫結至 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件的物件。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class and indicates whether an object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object.">初始化 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 類別的新執行個體，並指出物件是否適合繫結至 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件。</summary>
      <param name="isDataObject" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果物件適合繫結至 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary vsli:raw="Indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">表示類別在設計階段適合繫結至 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary vsli:raw="Represents the default value of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class, which indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">表示 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 類別的預設值，表示類別在設計階段適合繫結至 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; fits the pattern of another object.">判斷這個 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 的執行個體是否符合另一個物件的模式。</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt;.">與這個 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 執行個體相互比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個執行個體與 <paramref name="obj" /> 參數所指定的執行個體相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary vsli:raw="Gets a value indicating whether an object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time.">取得值，指出物件在設計階段是否應被視為適合繫結至 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果物件應被視為適合繫結至 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">取得值，指出目前屬性值是否為屬性的預設值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果屬性目前的值是預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary vsli:raw="Indicates that the class is not suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">表示類別在設計階段不適合繫結至 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件。 此欄位為唯讀。</summary>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary vsli:raw="Provides metadata for a property representing a data field. This class cannot be inherited.">為表示資料欄位的屬性，提供中繼資料。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row.">初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 類別的新執行個體，並指出欄位是否為資料列的主索引鍵。</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示欄位在資料列的主索引鍵中，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, and whether the field is a database identity field.">初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 類別的新執行個體，並指出欄位是否為資料列的主索引鍵，以及欄位是否為資料庫識別欄位。</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示欄位在資料列的主索引鍵中，否則為 <see langword="false" />。</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示欄位是可唯一識別資料列的識別 (Identity) 欄位，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether the field is a database identity field, and whether the field can be null.">初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 類別的新執行個體，並指出欄位是否為資料列的主索引鍵、欄位是否為資料庫識別欄位，以及欄位是否可以為 null。</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示欄位在資料列的主索引鍵中，否則為 <see langword="false" />。</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示欄位是可唯一識別資料列的識別 (Identity) 欄位，否則為 <see langword="false" />。</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示欄位在資料存放區中可以為 null，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether it is a database identity field, and whether it can be null and sets the length of the field.">初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 類別的新執行個體，並指出欄位是否為資料列的主索引鍵、它是否為資料庫識別欄位，以及它是否可以為 null 並設定欄位的長度。</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示欄位在資料列的主索引鍵中，否則為 <see langword="false" />。</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示欄位是可唯一識別資料列的識別 (Identity) 欄位，否則為 <see langword="false" />。</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示欄位在資料存放區中可以為 null，否則為 <see langword="false" />。</param>
      <param name="length" vsli:raw="The length of the field in bytes.">欄位的長度，以位元組為單位。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt;.">與這個 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 執行個體相互比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個執行個體與 <paramref name="obj" /> 參數所指定的執行個體相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary vsli:raw="Gets a value indicating whether a property represents an identity field in the underlying data.">取得值，指出屬性是否表示基礎資料中的識別欄位。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents an identity field in the underlying data; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;false&quot; /&gt;.">如果屬性表示基礎資料中的識別欄位，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary vsli:raw="Gets a value indicating whether a property represents a field that can be null in the underlying data store.">取得值，指出屬性是否表示基礎資料存放區中的可為 null 欄位。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents a field that can be null in the underlying data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果屬性表示基礎資料存放區中的可為 null 欄位，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary vsli:raw="Gets the length of the property in bytes.">取得屬性的長度，以位元組為單位。</summary>
      <returns vsli:raw="The length of the property in bytes, or -1 if not set.">屬性的長度 (以位元組為單位)，如果未設定，則為 -1。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary vsli:raw="Gets a value indicating whether a property is in the primary key in the underlying data.">取得值，指出屬性是否位於基礎資料中的主索引鍵。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is in the primary key of the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果屬性是位於基礎資料的主索引鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary vsli:raw="Identifies a data operation method exposed by a type, what type of operation the method performs, and whether the method is the default data method. This class cannot be inherited.">識別型別所公開的資料作業方法、方法所執行的作業型別，以及方法是否為預設資料方法。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class and identifies the type of data operation the method performs.">初始化 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 類別的新執行個體，並識別方法所執行的資料作業類型。</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">其中一個 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值，描述方法所執行的資料作業。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class, identifies the type of data operation the method performs, and identifies whether the method is the default data method that the data object exposes.">初始化 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 類別的新執行個體、識別方法所執行的資料作業類型，並識別方法是否為資料物件所公開的預設資料方法。</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">其中一個 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值，描述方法所執行的資料作業。</param>
      <param name="isDefault" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the method that the attribute is applied to is the default method of the data object for the specified &lt;paramref name=&quot;methodType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示已套用屬性的方法是資料物件為指定之 <paramref name="methodType" /> 的預設方法，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">與這個 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 執行個體相互比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個執行個體與 <paramref name="obj" /> 參數所指定的執行個體相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary vsli:raw="Gets a value indicating whether the method that the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied to is the default data method exposed by the data object for a specific method type.">取得值，指出套用 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 的方法是否為資料物件針對指定的方法型別所公開的預設資料方法。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is the default method exposed by the object for a method type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果方法是物件為方法型別所公開的預設方法，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary vsli:raw="Gets a value indicating whether this instance shares a common pattern with a specified attribute.">取得值，指出這個執行個體是否與指定的屬性共用通用模式。</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">與這個 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 執行個體相互比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個執行個體與 <paramref name="obj" /> 參數所指定的執行個體相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; value indicating the type of data operation the method performs.">取得 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值，表示方法所執行的資料作業類型。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that identifies the type of data operation performed by the method to which the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied.">其中一個 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值，識別已套用 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 的方法所執行的資料作業類型。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary vsli:raw="Identifies the type of data operation performed by a method, as specified by the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; applied to the method.">識別方法所執行的資料作業類型，由套用至方法的 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 所指定。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary vsli:raw="Indicates that a method is used for a data operation that deletes data.">表示方法用於刪除資料的資料作業。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary vsli:raw="Indicates that a method is used for a data operation that fills a &lt;see cref=&quot;T:System.Data.DataSet&quot; /&gt; object.">表示方法用於填滿 <see cref="T:System.Data.DataSet" /> 物件的資料作業。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary vsli:raw="Indicates that a method is used for a data operation that inserts data.">表示方法用於插入資料的資料作業。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary vsli:raw="Indicates that a method is used for a data operation that retrieves data.">表示方法用於擷取資料的資料作業。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary vsli:raw="Indicates that a method is used for a data operation that updates data.">表示方法用於更新資料的資料作業。</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTime&quot; /&gt; objects to and from various other representations.">提供型別轉換子 (Type Converter) 將 <see cref="T:System.DateTime" /> 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.DateTimeConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the specified context.">取得值，表示這個轉換子是否可以使用指定的內容，將指定來源型別中的物件轉換成 <see cref="T:System.DateTime" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個物件可以執行轉換則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">
        <see cref="T:System.Type" />，表示要轉換為何種目標型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">將指定值物件轉換為 <see cref="T:System.DateTime" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">選擇性 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供，則會假設使用目前的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> 對於目標型別並不是有效的值。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the arguments.">使用引數，將指定值物件轉換為 <see cref="T:System.DateTime" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">選擇性 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供，則會假設使用目前的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">值將會轉換成這個 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; structures to and from various other representations.">提供型別轉換子 (Type Converter) 將 <see cref="T:System.DateTimeOffset" /> 結構與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeOffsetConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.DateTimeOffsetConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether an object of the specified source type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">傳回值，這個值表示是否可將指定之來源型別的物件轉換成 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="context" vsli:raw="The date format context.">日期格式內容。</param>
      <param name="sourceType" vsli:raw="The source type to check.">要檢查的來源型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的型別可轉換為 <see cref="T:System.DateTimeOffset" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to an object of the specified type.">傳回值，這個值表示是否可將 <see cref="T:System.DateTimeOffset" /> 轉換成指定之型別的物件。</summary>
      <param name="context" vsli:raw="The date format context.">日期格式內容。</param>
      <param name="destinationType" vsli:raw="The destination type to check.">要檢查的目的型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.DateTimeOffset" /> 可轉換為指定的型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">將指定物件轉換為 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="context" vsli:raw="The date format context.">日期格式內容。</param>
      <param name="culture" vsli:raw="The date culture.">日期文化特性。</param>
      <param name="value" vsli:raw="The object to be converted.">要被轉換的物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; that represents the specified object.">
        <see cref="T:System.DateTimeOffset" />，表示指定的物件。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to an object of the specified type.">將 <see cref="T:System.DateTimeOffset" /> 轉換為指定型別的物件。</summary>
      <param name="context" vsli:raw="The date format context.">日期格式內容。</param>
      <param name="culture" vsli:raw="The date culture.">日期文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to be converted.">要轉換的 <see cref="T:System.DateTimeOffset" />。</param>
      <param name="destinationType" vsli:raw="The type to convert to.">要轉換的目標類型。</param>
      <returns vsli:raw="An object of the specified type that represents the &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">指定之型別的物件，表示 <see cref="T:System.DateTimeOffset" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Decimal&quot; /&gt; objects to and from various other representations.">提供型別轉換子 (Type Converter) 將 <see cref="T:System.Decimal" /> 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DecimalConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.DecimalConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">
        <see cref="T:System.Type" />，表示要轉換為何種目標型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; using the arguments.">使用引數，將指定值物件轉換為 <see cref="T:System.Decimal" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">選擇性 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供，則會假設使用目前的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">值將會轉換成這個 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary vsli:raw="Specifies the default binding property for a component. This class cannot be inherited.">指定元件的預設繫結屬性。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using no parameters.">不使用參數來初始化 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using the specified property name.">使用指定的屬性名稱，初始化 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the default binding property.">預設繫結屬性的名稱。</param>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class.">表示 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 類別的預設值。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">判斷指定的 <see cref="T:System.Object" /> 和目前的 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 執行個體是否相等。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">要與目前 <see cref="T:System.Object" /> 執行個體比較的 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">如果物件和目前執行個體相等，則為 <see langword="true" />，否則為 <see langword="false" />，表示不相等。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">取得 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 所繫結之元件的預設繫結屬性名稱。</summary>
      <returns vsli:raw="The name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 所繫結之元件的預設繫結屬性名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary vsli:raw="Specifies the default event for a component.">指定元件的預設事件。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.DefaultEventAttribute" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the default event for the component this attribute is bound to.">與這個屬性繫結的元件的預設事件名稱。</param>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定 <see cref="T:System.ComponentModel.DefaultEventAttribute" /> 的預設值，就是 <see langword="null" />。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;.">傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.DefaultEventAttribute" />。</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">測試其數值相等的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary vsli:raw="Gets the name of the default event for the component this attribute is bound to.">取得與這個屬性繫結的元件的預設事件名稱。</summary>
      <returns vsli:raw="The name of the default event for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">與這個屬性繫結的元件的預設事件名稱。 預設值為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary vsli:raw="Specifies the default property for a component.">指定元件的預設屬性。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the default property for the component this attribute is bound to.">與這個屬性 (Attribute) 繫結的元件的預設屬性 (Property) 名稱。</param>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> 的預設值，就是 <see langword="null" />。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;.">傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />。</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">測試其數值相等的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default property for the component this attribute is bound to.">取得與這個屬性 (Attribute) 繫結的元件的預設屬性 (Property) 名稱。</summary>
      <returns vsli:raw="The name of the default property for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">與這個屬性 (Attribute) 繫結的元件的預設屬性 (Property) 名稱。 預設值為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner&quot; /&gt; event.">提供 <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> 類別的新執行個體。</summary>
      <param name="oldDesigner" vsli:raw="The document that is losing activation.">正失去啟動過程 (Activation) 的文件。</param>
      <param name="newDesigner" vsli:raw="The document that is gaining activation.">正獲得啟動過程的文件。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary vsli:raw="Gets the document that is gaining activation.">取得正獲得啟動過程的文件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document gaining activation.">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />，表示正獲得啟動過程的文件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary vsli:raw="Gets the document that is losing activation.">取得正失去啟動過程的文件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document losing activation.">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />，表示正失去啟動過程的文件。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged&quot; /&gt; event.">代表將處理 <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件的來源。</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; that contains the event data.">包含事件資料的 <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary vsli:raw="The exception that is thrown when an attempt to check out a file that is checked into a source code management program is canceled or fails.">嘗試簽出已簽入來源程式碼管理程式之檔案的動作遭取消或失敗時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with no associated message or error code.">不使用相關訊息或錯誤碼來初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class using the specified serialization data and context.">使用指定的序列化資料和內容，初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">要用於還原序列化 (Deserialization) 的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">要用於還原序列化的目的端。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message.">使用指定的訊息初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="A message describing the exception.">描述例外狀況的訊息。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified detailed description and the specified exception.">使用指定的詳細描述和指定的例外狀況，初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="A detailed description of the error.">錯誤的詳細描述。</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">造成這個例外狀況之內部例外狀況的參考。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message and error code.">使用指定訊息和錯誤碼來初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="A message describing the exception.">描述例外狀況的訊息。</param>
      <param name="errorCode" vsli:raw="The error code to pass.">要傳遞的錯誤碼。</param>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class that specifies that the check out was canceled. This field is read-only.">初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 類別的新執行個體，這個執行個體可指定簽出已取消。 此欄位為唯讀。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary vsli:raw="Represents a unique command identifier that consists of a numeric command ID and a GUID menu group identifier.">表示由數值命令 ID 和 GUID 功能表群組識別項所組成的唯一命令識別項 (Command Identifier)。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; class using the specified menu group GUID and command ID number.">使用指定的功能表群組 GUID 和命令 ID 數，初始化 <see cref="T:System.ComponentModel.Design.CommandID" /> 類別的新執行個體。</summary>
      <param name="menuGroup" vsli:raw="The GUID of the group that this menu command belongs to.">這個功能表命令所屬的群組 GUID。</param>
      <param name="commandID" vsli:raw="The numeric identifier of this menu command.">這個功能表命令的數值識別項。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; instances are equal.">判斷兩個 <see cref="T:System.ComponentModel.Design.CommandID" /> 執行個體是否相等。</summary>
      <param name="obj" vsli:raw="The object to compare.">要比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is equivalent to this one; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的物件與這個物件相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary vsli:raw="Serves as a hash function for a particular type.">做為特定型別的雜湊函式。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">目前 <see cref="T:System.Object" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary vsli:raw="Gets the GUID of the menu group that the menu command identified by this &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; belongs to.">取得這個 <see cref="T:System.ComponentModel.Design.CommandID" /> 所識別功能表命令所屬之功能表群組的 GUID。</summary>
      <returns vsli:raw="The GUID of the command group for this command.">這個命令的命令群組 GUID。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary vsli:raw="Gets the numeric command ID.">取得數值命令 ID。</summary>
      <returns vsli:raw="The command ID number.">命令 ID 數。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current object.">傳回表示目前物件的 <see cref="T:System.String" />。</summary>
      <returns vsli:raw="A string that contains the command ID information, both the GUID and integer identifier.">字串，包含命令 ID 資訊、GUID 和整數識別項兩者。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event. This class cannot be inherited.">提供 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件的資料。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> 類別的新執行個體。</summary>
      <param name="component" vsli:raw="The component that was changed.">已變更的元件。</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that represents the member that was changed.">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，表示已變更的成員。</param>
      <param name="oldValue" vsli:raw="The old value of the changed member.">已變更成員的舊值。</param>
      <param name="newValue" vsli:raw="The new value of the changed member.">已變更成員的新值。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary vsli:raw="Gets the component that was modified.">取得已修改的元件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the component that was modified.">
        <see cref="T:System.Object" />，表示已修改的元件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary vsli:raw="Gets the member that has been changed.">取得已變更的成員。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that indicates the member that has been changed.">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，表示已變更的成員。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary vsli:raw="Gets the new value of the changed member.">取得已變更成員的新值。</summary>
      <returns vsli:raw="The new value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">已變更成員的新值。 這個屬性可以是 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary vsli:raw="Gets the old value of the changed member.">取得已變更成員的舊值。</summary>
      <returns vsli:raw="The old value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">已變更成員的舊值。 這個屬性可以是 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">代表將處理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件的來源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event. This class cannot be inherited.">提供 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件的資料。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 類別的新執行個體。</summary>
      <param name="component" vsli:raw="The component that is about to be changed.">正要變更的元件。</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member of the component that is about to be changed.">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，表示正要變更的元件成員。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary vsli:raw="Gets the component that is about to be changed or the component that is the parent container of the member that is about to be changed.">取得正要變更的元件或是做為正要變更成員的父容器 (Container) 之元件。</summary>
      <returns vsli:raw="The component that is about to have a member changed.">正要使成員變更的元件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary vsli:raw="Gets the member that is about to be changed.">取得正要變更的成員。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member that is about to be changed, if known, or &lt;see langword=&quot;null&quot; /&gt; otherwise.">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，表示正要變更的成員 (如果已知)，否則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">代表將處理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件的來源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; event that contains the event data.">
        <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 事件，包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt; events.">提供 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> 和 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> 類別的新執行個體。</summary>
      <param name="component" vsli:raw="The component that is the source of the event.">做為事件來源的元件。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary vsli:raw="Gets the component associated with the event.">取得與事件相關的元件。</summary>
      <returns vsli:raw="The component associated with the event.">與事件相關的元件。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt; events raised for component-level events.">表示處理為元件層次事件所引發的 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> 和 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件的來源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">提供 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> 類別的新執行個體。</summary>
      <param name="component" vsli:raw="The component to be renamed.">要重新命名的元件。</param>
      <param name="oldName" vsli:raw="The old name of the component.">元件的舊名稱。</param>
      <param name="newName" vsli:raw="The new name of the component.">元件的新名稱。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary vsli:raw="Gets the component that is being renamed.">取得將重新命名的元件。</summary>
      <returns vsli:raw="The component that is being renamed.">將重新命名的元件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary vsli:raw="Gets the name of the component after the rename event.">取得重新命名事件後的元件名稱。</summary>
      <returns vsli:raw="The name of the component after the rename event.">重新命名事件後的元件名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary vsli:raw="Gets the name of the component before the rename event.">取得重新命名事件前的元件名稱。</summary>
      <returns vsli:raw="The previous name of the component.">先前的元件名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">代表將處理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件的來源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary vsli:raw="Represents a collection of designers.">表示設計工具的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified set of designers.">初始化 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 類別的新執行個體，它包含指定的設計工具集。</summary>
      <param name="designers" vsli:raw="A list that contains the collection of designers to add.">清單，包含要加入的設計工具集合。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified designers.">初始化 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 類別的新執行個體，它包含指定的設計工具。</summary>
      <param name="designers" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; objects to store.">要儲存之 <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 物件的陣列。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary vsli:raw="Gets the number of designers in the collection.">取得集合中的設計工具數目。</summary>
      <returns vsli:raw="The number of designers in the collection.">集合中的設計工具數目。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">取得這個集合的新列舉值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">
        <see cref="T:System.Collections.IEnumerator" />，列舉集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the designer at the specified index.">取得在指定索引處的設計工具。</summary>
      <param name="index" vsli:raw="The index of the designer to return.">要傳回之設計工具的索引。</param>
      <returns vsli:raw="The designer at the specified index.">在指定索引處的設計工具。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">從特定的 <see cref="T:System.Array" /> 索引處開始，將集合元素複製至 <see cref="T:System.Array" />。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">一維 <see cref="T:System.Array" />，是從集合複製的元素之目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">取得集合所包含的項目數目。</summary>
      <returns vsli:raw="The number of elements contained in the collection.">集合中所包含的項目數目。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">取得物件，這個物件可以用來對集合進行同步存取。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Object，可用來對集合同步存取。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">取得這個集合的新列舉值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">
        <see cref="T:System.Collections.IEnumerator" />，列舉集合。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events.">提供 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> 類別的新執行個體。</summary>
      <param name="host" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">文件的 <see cref="T:System.ComponentModel.Design.IDesignerHost" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary vsli:raw="Gets the host of the document.">取得文件的主應用程式 (Host)。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">文件的 <see cref="T:System.ComponentModel.Design.IDesignerHost" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events that are raised when a document is created or disposed of.">表示處理建立或配置文件時所引發的 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件的來源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary vsli:raw="Provides a base class for getting and setting option values for a designer.">提供基底類別，用於取得和設定設計工具的選項值。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.DesignerOptionService" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name and adds it to the given parent.">使用指定名稱建立新的 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />，並將其加入指定的父代。</summary>
      <param name="parent" vsli:raw="The parent designer option collection. All collections have a parent except the root object collection.">父設計工具選項集合。 除根物件集合之外的所有集合都具有父代。</param>
      <param name="name" vsli:raw="The name of this collection.">這個集合的名稱。</param>
      <param name="value" vsli:raw="The object providing properties for this collection. Can be &lt;see langword=&quot;null&quot; /&gt; if the collection should not provide any properties.">提供這個集合屬性的物件。 如果集合不應提供任何屬性，則可為 <see langword="null" />。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name.">具有給定名稱的新 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;parent&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="parent" /> 或 <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is an empty string.">
        <paramref name="name" /> 為空字串。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary vsli:raw="Contains a collection of designer options. This class cannot be inherited.">包含設計工具選項的集合。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to a compatible one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified index of the target array.">從目標陣列的指定索引開始，複製整個集合至相容的一維 <see cref="T:System.Array" />。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the collection. The &lt;paramref name=&quot;array&quot; /&gt; must have zero-based indexing.">一維 <see cref="T:System.Array" />，是從集合中複製的元素之目的端。 <paramref name="array" /> 必須有以零為起始的索引。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary vsli:raw="Gets the number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">取得這個 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 所包含之子選項集合的數目。</summary>
      <returns vsli:raw="The number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">這個 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 所包含之子選項集合的數目。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">傳回 <see cref="T:System.Collections.IEnumerator" />，可用來逐一查看這個集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">
        <see cref="T:System.Collections.IEnumerator" />，可用來逐一查看集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Returns the index of the first occurrence of a given value in a range of this collection.">傳回這個集合範圍中第一次出現指定值的索引。</summary>
      <param name="value" vsli:raw="The object to locate in the collection.">要在集合中找出的物件。</param>
      <returns vsli:raw="The index of the first occurrence of value within the entire collection, if found; otherwise, the lower bound of the collection minus 1.">如果找到的話，則為整個集合中的第一個相符值索引，否則為集合的下限減 1。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the child collection at the given index.">取得指定索引處的子集合。</summary>
      <param name="index" vsli:raw="The zero-based index of the child collection to get.">要取得之子集合以零起始的索引。</param>
      <returns vsli:raw="The child collection at the specified index.">在指定索引處的子集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary vsli:raw="Gets the child collection at the given name.">取得指定名稱處的子集合。</summary>
      <param name="name" vsli:raw="The name of the child collection.">子集合的名稱。</param>
      <returns vsli:raw="The child collection with the name specified by the &lt;paramref name=&quot;name&quot; /&gt; parameter, or &lt;see langword=&quot;null&quot; /&gt; if the name is not found.">具有 <paramref name="name" /> 參數指定之名稱的子集合，如果找不到名稱，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary vsli:raw="Gets the name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">取得這個 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 的名稱。</summary>
      <returns vsli:raw="The name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">這個 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 的名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary vsli:raw="Gets the parent collection object.">取得父集合物件。</summary>
      <returns vsli:raw="The parent collection object, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">父集合物件，如果沒有父集合物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary vsli:raw="Gets the collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">取得這個 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 所提供的屬性集合及其所有子系。</summary>
      <returns vsli:raw="The collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">這個 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 所提供的屬性集合及其所有子系。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary vsli:raw="Displays a dialog box user interface (UI) with which the user can configure the options in this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">顯示對話方塊使用者介面 (UI)，使用者可以使用它來設定這個 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 中的選項。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box can be displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以顯示對話方塊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized and, therefore, thread safe.">取得值，指出存取集合是否同步化, 且因而為執行緒安全。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合存取是同步的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">取得物件，這個物件可以用來對集合進行同步存取。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Object，可用來對集合同步存取。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">將項目加入至 <see cref="T:System.Collections.IList" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">要加入至 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns vsli:raw="The position into which the new element was inserted.">插入新項目的位置。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">移除集合的所有項目。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">判斷此集合是否包含特定的值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">要在集合中尋找的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在集合中找到 <see cref="T:System.Object" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">決定集合中指定項目的索引。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">要在集合中尋找的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at the specified index.">將項目插入至索引中的指定索引處。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">要插入至集合的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">取得值，這個值表示集合的大小是否是固定的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合具有固定大小，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">取得值，表示集合是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合是唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">在指定的索引位置上取得或設定項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">要取得或設定之以零為起始的項目索引。</param>
      <returns vsli:raw="The element at the specified index.">在指定索引上的項目。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">從集合中移除第一個出現的特定物件。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">要從集合中移除的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the collection item at the specified index.">移除指定索引處的集合項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除之項目的以零為起始的索引。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary vsli:raw="Gets the options collection for this service.">取得這個服務的選項集合。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; populated with available designer options.">用可用的設計工具選項填入 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Populates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">填入 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</summary>
      <param name="options" vsli:raw="The collection to populate.">要填入的集合。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary vsli:raw="Shows the options dialog box for the given object.">顯示指定物件的選項對話方塊。</summary>
      <param name="options" vsli:raw="The options collection containing the object to be invoked.">包含要叫用之物件的選項集合。</param>
      <param name="optionObject" vsli:raw="The actual options object.">實際選項物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box is shown; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果顯示核取方塊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of an option defined in this package.">取得在這個封裝 (Package) 中定義的選項值。</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">選項繫結的頁面。</param>
      <param name="valueName" vsli:raw="The name of the option value.">選項值的名稱。</param>
      <returns vsli:raw="The value of the option named &lt;paramref name=&quot;valueName&quot; /&gt;.">名為 <paramref name="valueName" /> 的選項值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="pageName" /> 或 <paramref name="valueName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of an option defined in this package.">設定在這個封裝中定義的選項值。</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">繫結至選項的頁面。</param>
      <param name="valueName" vsli:raw="The name of the option value.">選項值的名稱。</param>
      <param name="value" vsli:raw="The value of the option.">選項值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="pageName" /> 或 <paramref name="valueName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary vsli:raw="Provides a way to group a series of design-time actions to improve performance and enable most types of changes to be undone.">提供方式，用於群組一系列設計階段動作以改善效能，以及啟用大部分變更類型以復原。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class with no description.">不使用描述，初始化 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class using the specified transaction description.">使用指定的異動描述，初始化 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 類別的新執行個體。</summary>
      <param name="description" vsli:raw="A description for this transaction.">這個異動的描述。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary vsli:raw="Cancels the transaction and attempts to roll back the changes made by the events of the transaction.">取消異動，並嘗試復原異動事件所做的變更。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary vsli:raw="Gets a value indicating whether the transaction was canceled.">取得值，表示異動是否已取消。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was canceled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果交易已取消，則為，否則，<see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary vsli:raw="Commits this transaction.">認可這個異動。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary vsli:raw="Gets a value indicating whether the transaction was committed.">取得值，表示異動是否已認可。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was committed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果異動認可，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary vsli:raw="Gets a description for the transaction.">取得異動的描述。</summary>
      <returns vsli:raw="A description for the transaction.">異動的描述。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; and optionally releases the managed resources.">釋放 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary vsli:raw="Releases the resources associated with this object. This override commits this transaction if it was not already committed.">釋出與這個物件相關聯的資源。 如果這個異動還沒有認可，則這個覆寫會認可該異動。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Cancel&quot; /&gt; event.">引發 <see langword="Cancel" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary vsli:raw="Performs the actual work of committing a transaction.">執行認可異動的實際工作。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;.">釋放 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 所使用的所有資源。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events.">提供 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class, using the specified value that indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">使用會指出設計工具是否在異動上呼叫 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> 的指定值，初始化 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> 類別的新執行個體。</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">指示是否認可異動的值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> 類別的新執行個體。</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">指示是否認可異動的值。</param>
      <param name="lastTransaction" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這是要關閉的最後一個異動則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary vsli:raw="Gets a value indicating whether this is the last transaction to close.">取得值，指出這是否為要關閉的最後一個異動。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這是要關閉的最後一個異動則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary vsli:raw="Indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">指示設計工具是否在異動上呼叫 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果設計工具在異動上呼叫 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events of a designer.">表示處理設計工具的 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件的來源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary vsli:raw="Represents a verb that can be invoked from a designer.">表示可從設計工具叫用 (Invoke) 的動詞命令 (Verb)。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 類別的新執行個體。</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">顯示給使用者的功能表命令文字。</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">執行動詞命令動作的事件處理常式。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 類別的新執行個體。</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">顯示給使用者的功能表命令文字。</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">執行動詞命令動作的事件處理常式。</param>
      <param name="startCommandID" vsli:raw="The starting command ID for this verb. By default, the designer architecture sets aside a range of command IDs for verbs. You can override this by providing a custom command ID.">這個動詞命令的起始命令 ID。 根據預設值，設計工具架構會將某範圍的命令 ID 保留給動詞命令。 您可以藉由提供自訂命令 ID 的方式覆寫預設值。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary vsli:raw="Gets or sets the description of the menu item for the verb.">取得或設定動詞命令的功能表項目描述。</summary>
      <returns vsli:raw="A string describing the menu item.">描述功能表項目的字串。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary vsli:raw="Gets the text description for the verb command on the menu.">取得功能表上動詞命令的文字描述。</summary>
      <returns vsli:raw="A description for the verb command.">動詞命令的描述。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary vsli:raw="Overrides &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt;.">覆寫 <see cref="M:System.Object.ToString" />。</summary>
      <returns vsli:raw="The verb's text, or an empty string (&quot;&quot;) if the text field is empty.">動詞命令的文字，如果文字欄位空白，則為空字串 ("")。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">表示 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 物件的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class using the specified array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">使用 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 物件指定的陣列，來初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 類別的新執行個體。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array that indicates the verbs to contain within the collection.">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 陣列，表示要包含在集合中的動詞命令。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to the collection.">將指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 加入至集合。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add to the collection.">要加入至集合的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns vsli:raw="The index in the collection at which the verb was added.">動詞命令已在該處加入的集合索引。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Adds the specified set of designer verbs to the collection.">加入指定的設計工具動詞命令集至集合。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects to add to the collection.">要加入至集合中之 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 物件的陣列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary vsli:raw="Adds the specified collection of designer verbs to the collection.">加入指定的設計工具動詞命令集合至集合。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; to add to the collection.">要加入至集合的 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets a value indicating whether the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; exists in the collection.">取得值，表示指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 是否存在於集合中。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to search for in the collection.">要在集合中搜尋的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object exists in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的物件存在於集合中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary vsli:raw="Copies the collection members to the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array beginning at the specified destination index.">複製集合成員至指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 陣列，起始於指定的目的索引。</summary>
      <param name="array" vsli:raw="The array to copy collection members to.">集合成員所要複製的目的陣列。</param>
      <param name="index" vsli:raw="The destination index to begin copying to.">要開始複製到的目的索引。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">取得指定 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 的索引。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; whose index to get in the collection.">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" />，要在集合中取得其索引。</param>
      <returns vsli:raw="The index of the specified object if it is found in the list; otherwise, -1.">如果在清單中找到，則為指定物件的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">插入指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 於指定的索引處。</summary>
      <param name="index" vsli:raw="The index in the collection at which to insert the verb.">要將動詞命令插入處的集合索引。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to insert in the collection.">在集合中要插入的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">取得或設定在指定索引處的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <param name="index" vsli:raw="The index at which to get or set the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">要取得或設定 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 處的索引。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at each valid index in the collection.">集合中每個有效索引處的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>引發 <see langword="Clear" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>引發 <see langword="Insert" /> 事件。</summary>
      <param name="index">要插入項目處的索引。</param>
      <param name="value">要插入的物件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>引發 <see langword="Remove" /> 事件。</summary>
      <param name="index">要移除項目處的索引。</param>
      <param name="value">要移除的物件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>引發 <see langword="Set" /> 事件。</summary>
      <param name="index">要設定項目處的索引。</param>
      <param name="oldValue">舊物件。</param>
      <param name="newValue">新物件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Validate&quot; /&gt; event.">引發 <see langword="Validate" /> 事件。</summary>
      <param name="value" vsli:raw="The object to validate.">要驗證的物件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; from the collection.">從集合移除指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove from the collection.">要從集合中移除的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary vsli:raw="Represents a design-time license context that can support a license provider at design time.">表示可支援設計階段授權提供者 (Provider) 的設計階段授權內容。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="Gets a saved license key.">取得儲存的授權識別碼。</summary>
      <param name="type" vsli:raw="The type of the license key.">授權識別碼的型別。</param>
      <param name="resourceAssembly" vsli:raw="The assembly to get the key from.">取得索引鍵的來源組件。</param>
      <returns vsli:raw="The saved license key that matches the specified type.">儲存的授權識別碼，與指定的型別相符。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="Sets a saved license key.">設定儲存的授權識別碼。</summary>
      <param name="type" vsli:raw="The type of the license key.">授權識別碼的型別。</param>
      <param name="key" vsli:raw="The license key.">授權識別碼。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary vsli:raw="Gets the license usage mode.">取得授權使用方法模式。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; indicating the licensing mode for the context.">
        <see cref="T:System.ComponentModel.LicenseUsageMode" />，表示內容的授權模式。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary vsli:raw="Provides support for design-time license context serialization.">提供設計階段授權內容序列化 (Serialization) 的支援。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary vsli:raw="Serializes the licenses within the specified design-time license context using the specified key and output stream.">使用指定的索引鍵和輸出資料流，序列化指定的設計階段授權內容中的授權。</summary>
      <param name="o" vsli:raw="The stream to output to.">要輸出的目的資料流。</param>
      <param name="cryptoKey" vsli:raw="The key to use for encryption.">用來加密 (Encryption) 的索引鍵。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; indicating the license context.">
        <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />，表示授權內容。</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary vsli:raw="Defines identifiers that indicate information about the context in which a request for Help information originated.">定義識別項，這個識別項指示說明資訊要求產生的所在內容的相關資訊。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary vsli:raw="A general context.">一般內容。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary vsli:raw="A selection.">選取。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary vsli:raw="A tool window selection.">工具視窗選取。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary vsli:raw="A window.">視窗。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary vsli:raw="Specifies the context keyword for a class or member. This class cannot be inherited.">指定類別或成員的內容關鍵字。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 類別的新執行個體。</summary>
      <param name="keyword" vsli:raw="The Help keyword value.">Help 關鍵字值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;keyword&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyword" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class from the given type.">初始化指定型別之 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 類別的新執行個體。</summary>
      <param name="t" vsli:raw="The type from which the Help keyword will be taken.">會在其中使用 Help 關鍵字的型別。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;. This field is read-only.">表示 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 的預設值。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; instances are equal.">判斷兩個 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 執行個體是否相等。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">與目前的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 相比較的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 和目前的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">目前 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary vsli:raw="Gets the Help keyword supplied by this attribute.">取得這個屬性提供的 Help 關鍵字。</summary>
      <returns vsli:raw="The Help keyword supplied by this attribute.">這個屬性提供的 Help 關鍵字。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines whether the Help keyword is &lt;see langword=&quot;null&quot; /&gt;.">判斷 Help 關鍵字是否為 <see langword="null" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the Help keyword is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 Help 關鍵字為 <see langword="true" />，則為 <see langword="null" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary vsli:raw="Defines identifiers that indicate the type of a Help keyword.">定義表示 Help 關鍵字型別的識別項。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary vsli:raw="A keyword that F1 was pressed to request help about.">要按下 F1 要求相關說明的關鍵字。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary vsli:raw="A filter keyword.">篩選條件關鍵字。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary vsli:raw="A general keyword.">一般關鍵字。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary vsli:raw="Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; or &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">提供可加入和移除事件處理常式的介面給加入、變更、移除或重新命名元件的事件，並提供可引發 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 或 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件的方法。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary vsli:raw="Occurs when a component has been added.">發生於元件已加入時。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary vsli:raw="Occurs when a component is in the process of being added.">發生於正在加入元件的過程中。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary vsli:raw="Occurs when a component has been changed.">發生於元件已變更時。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary vsli:raw="Occurs when a component is in the process of being changed.">發生於正在變更元件的過程中。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary vsli:raw="Occurs when a component has been removed.">發生於元件已移除時。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary vsli:raw="Occurs when a component is in the process of being removed.">發生於正在移除元件的過程中。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary vsli:raw="Occurs when a component is renamed.">發生於元件重新命名時。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Announces to the component change service that a particular component has changed.">向元件變更服務通知特定元件已變更。</summary>
      <param name="component" vsli:raw="The component that has changed.">已變更的元件。</param>
      <param name="member" vsli:raw="The member that has changed. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">已變更的成員。 如果這個變更與任一成員無關，則這會是 <see langword="null" />。</param>
      <param name="oldValue" vsli:raw="The old value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">成員的舊值。 只有在成員不是 <see langword="null" /> 時，這才有效。</param>
      <param name="newValue" vsli:raw="The new value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">成員的新值。 只有在成員不是 <see langword="null" /> 時，這才有效。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Announces to the component change service that a particular component is changing.">向元件變更服務通知特定元件正在變更。</summary>
      <param name="component" vsli:raw="The component that is about to change.">正要變更的元件。</param>
      <param name="member" vsli:raw="The member that is changing. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">正在變更的成員。 如果這個變更與任一成員無關，則這會是 <see langword="null" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary vsli:raw="Enables enumeration of components at design time.">在設計階段啟用元件的列舉。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary vsli:raw="Gets the list of available component types.">取得可用元件型別的清單。</summary>
      <param name="designerHost" vsli:raw="The designer host providing design-time services. Can be &lt;see langword=&quot;null&quot; /&gt;.">提供設計階段服務的設計工具主應用程式。 可以是 <see langword="null" />。</param>
      <param name="baseType" vsli:raw="The base type specifying the components to retrieve. Can be &lt;see langword=&quot;null&quot; /&gt;.">指定要擷取之元件的基底型別 (Base Type)。 可以是 <see langword="null" />。</param>
      <returns vsli:raw="The list of available component types.">可用元件型別的清單。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary vsli:raw="Provides a set of recommended default values during component creation.">在元件建立期間提供一組建議的預設值。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Restores an instance of a component to its default state.">將元件的執行個體還原成其預設狀態。</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to reset the component's state.">具有預設屬性值 (名稱/值組) 的字典，使用該字典可以重設元件的狀態。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Initializes a new component using a set of recommended values.">使用一組建議值初始化新元件。</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to initialize the component's state.">具有預設屬性值 (名稱/值組) 的字典，使用該字典可以初始化元件的狀態。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary vsli:raw="Provides the basic framework for building a custom designer.">提供建置 (Build) 自訂設計工具的基本架構。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary vsli:raw="Gets the base component that this designer is designing.">取得此設計工具正在設計的基底元件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; indicating the base component that this designer is designing.">
        <see cref="T:System.ComponentModel.IComponent" />，表示這個設計工具正在設計的基底元件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary vsli:raw="Performs the default action for this designer.">執行這個設計工具的預設動作。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes the designer with the specified component.">使用指定的元件，初始化設計工具。</summary>
      <param name="component" vsli:raw="The component to associate with this designer.">與這個設計工具相關聯的元件。</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary vsli:raw="Gets a collection of the design-time verbs supported by the designer.">取得設計工具所支援的設計階段動詞命令集合。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the verbs supported by the designer, or &lt;see langword=&quot;null&quot; /&gt; if the component has no verbs.">
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />，包含設計工具所支援的動詞命令，如果元件沒有動詞命令則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary vsli:raw="Provides event notifications when root designers are added and removed, when a selected component changes, and when the current root designer changes.">在以下情況下提供事件通知：加入和移除主要設計工具時、變更選取的元件時，以及目前的主要計工具變更時。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary vsli:raw="Gets the root designer for the currently active document.">取得目前主動式文件的根設計工具。</summary>
      <returns vsli:raw="The currently active document, or &lt;see langword=&quot;null&quot; /&gt; if there is no active document.">目前的主動式文件，或 <see langword="null" /> (如果沒有主動式文件)。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary vsli:raw="Occurs when the current root designer changes.">發生於目前的根設計工具變更時。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary vsli:raw="Occurs when a root designer is created.">發生於根設計工具建立時。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary vsli:raw="Occurs when a root designer for a document is disposed.">發生於文件的根設計工具被捨棄時。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary vsli:raw="Gets a collection of root designers for design documents that are currently active in the development environment.">取得根設計工具的集合，用來設計目前在開發環境中的主動式文件。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; containing the root designers that have been created and not yet disposed.">
        <see cref="T:System.ComponentModel.Design.DesignerCollection" />，包含已經建立而且還沒捨棄的根設計工具。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary vsli:raw="Occurs when the current design-view selection changes.">發生於目前的設計檢視選取變更時。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary vsli:raw="Provides an interface that enables a designer to access and filter the dictionaries of a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that stores the property, attribute, and event descriptors that a component designer can expose to the design-time environment.">提供可以讓設計工具存取和篩選 <see cref="T:System.ComponentModel.TypeDescriptor" /> 物件字典的介面，在該物件中儲存了屬性 (Property)、屬性 (Attribute) 甚至是元件設計工具可公開至設計階段環境的事件描述項。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">在衍生類別中覆寫時，允許設計工具可以變更或移除透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 所公開之屬性集中的項目。</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">元件類別的 <see cref="T:System.Attribute" /> 物件。 屬性字典中索引鍵為屬性的 <see cref="P:System.Attribute.TypeId" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">在衍生類別中覆寫時，允許設計工具可以變更或移除透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 所公開之屬性集中的項目。</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 物件，表示元件類別的事件。 事件字典中的索引鍵是事件名稱。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">在衍生類別中覆寫時，允許設計工具可以變更或移除透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 所公開之屬性集中的項目。</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件，表示元件類別的屬性。 屬性字典中的索引鍵是屬性名稱。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">在衍生類別中覆寫時，允許設計工具可以將項目加入到透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公開的屬性集。</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">元件類別的 <see cref="T:System.Attribute" /> 物件。 屬性字典中索引鍵為屬性的 <see cref="P:System.Attribute.TypeId" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">在衍生類別中覆寫時，允許設計工具可以將項目加入到透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公開的事件集。</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 物件，表示元件類別的事件。 事件字典中的索引鍵是事件名稱。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">在衍生類別中覆寫時，允許設計工具可以將項目加入到透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公開的屬性集。</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件，表示元件類別的屬性。 屬性字典中的索引鍵是屬性名稱。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary vsli:raw="Provides an interface for managing designer transactions and components.">提供用來管理設計工具異動和元件的介面。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary vsli:raw="Activates the designer that this host is hosting.">啟動這個主應用程式正在裝載的設計工具。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary vsli:raw="Occurs when this designer is activated.">發生於這個設計工具啟動時。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary vsli:raw="Gets the container for this designer host.">取得這個設計工具主應用程式的容器。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; for this host.">這個主應用程式 (Host) 的 <see cref="T:System.ComponentModel.IContainer" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary vsli:raw="Creates a component of the specified type and adds it to the design document.">建立指定型別的元件，並將其加入至設計文件中。</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">要建立的元件型別。</param>
      <returns vsli:raw="The newly created component.">新建立的元件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary vsli:raw="Creates a component of the specified type and name, and adds it to the design document.">建立指定型別和名稱的元件，並將其加入至設計文件中。</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">要建立的元件型別。</param>
      <param name="name" vsli:raw="The name for the component.">元件的名稱。</param>
      <returns vsli:raw="The newly created component.">新建立的元件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality.">建立 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />，它可以封裝事件序列，以改善效能，並啟用復原和取消復原支援功能。</summary>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you complete the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 的新執行個體。 完成異動步驟時，您應該呼叫這個物件上的 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality, using the specified transaction description.">使用指定的異動描述，建立 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />，它可以用來封裝事件序列，以改善效能，並啟用復原和取消復原支援功能。</summary>
      <param name="description" vsli:raw="A title or description for the newly created transaction.">新建立的異動的標題或描述。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you have completed the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">新的 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />。 完成異動步驟時，您應該呼叫這個物件上的 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary vsli:raw="Occurs when this designer is deactivated.">發生於這個設計工具停用時。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary vsli:raw="Destroys the specified component and removes it from the designer container.">終結指定的元件，並將其從設計工具容器移除。</summary>
      <param name="component" vsli:raw="The component to destroy.">要終結的元件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the designer instance that contains the specified component.">取得含有指定元件的設計工具執行個體。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to retrieve the designer for.">要為其擷取設計工具的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if there is no designer for the specified component.">
        <see cref="T:System.ComponentModel.Design.IDesigner" /> 或 <see langword="null" /> (如果指定元件沒有設計工具)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary vsli:raw="Gets an instance of the specified, fully qualified type name.">取得指定的、完整的型別名稱的執行個體。</summary>
      <param name="typeName" vsli:raw="The name of the type to load.">要載入的型別名稱。</param>
      <returns vsli:raw="The type object for the specified type name, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be found.">指定型別名稱的型別物件，或 <see langword="null" /> (如果找不到型別)。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently in a transaction.">取得數值，指示設計工具主應用程式目前是否在異動中。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a transaction is in progress; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果異動正在進行中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary vsli:raw="Occurs when this designer completes loading its document.">發生於這個設計工具完成載入其文件時。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently loading the document.">取得數值，指示設計工具主應用程式目前是否正在載入文件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer host is currently loading the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果設計工具主應用程式目前正在載入文件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary vsli:raw="Gets the instance of the base class used as the root component for the current design.">取得用來做為目前設計根元件之基底類別的執行個體。</summary>
      <returns vsli:raw="The instance of the root component class.">根元件類別的執行個體。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary vsli:raw="Gets the fully qualified name of the class being designed.">取得正在設計的類別的完整名稱。</summary>
      <returns vsli:raw="The fully qualified name of the base component class.">基底元件類別的完整名稱。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; event.">加入 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 事件的事件處理常式。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; event.">加入 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件的事件處理常式。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary vsli:raw="Gets the description of the current transaction.">取得目前異動的描述。</summary>
      <returns vsli:raw="A description of the current transaction.">目前異動的描述。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpened&quot; /&gt; event.">加入 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" /> 事件的事件處理常式。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpening&quot; /&gt; event.">加入 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" /> 事件的事件處理常式。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary vsli:raw="Specifies methods for the designer host to report on the state of transactions.">為設計工具主應用程式指定可報告交易狀態的方法。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is closing a transaction.">取得值，表示設計工具主應用程式是否正在關閉交易。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is closing a transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果設計工具正在關閉交易，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary vsli:raw="Provides access to the designer options located on the Tools menu under the Options command in the Visual Studio development environment.">提供對設計工具選項的存取，這些選項位在 Visual Studio 開發環境中 [工具] 功能表的 [選項] 命令下。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of the specified Windows Forms Designer option.">取得指定之 [Windows Form 設計工具] 選項的值。</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">定義選項的頁面名稱。</param>
      <param name="valueName" vsli:raw="The name of the option property.">選項屬性的名稱。</param>
      <returns vsli:raw="The value of the specified option.">指定的選項值。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of the specified Windows Forms Designer option.">設定指定之 [Windows Form 設計工具] 選項的值。</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">定義選項的頁面名稱。</param>
      <param name="valueName" vsli:raw="The name of the option property.">選項屬性的名稱。</param>
      <param name="value" vsli:raw="The new value.">新值。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary vsli:raw="Provides a basic, component site-specific, key-value pair dictionary through a service that a designer can use to store user-defined data.">提供透過服務的基本、元件站台特定、機碼值組字典，設計工具可使用它來儲存使用者定義的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary vsli:raw="Gets the key corresponding to the specified value.">取得對應於指定值的索引鍵。</summary>
      <param name="value" vsli:raw="The value to look up in the dictionary.">要在字典中查詢的值。</param>
      <returns vsli:raw="The associated key, or &lt;see langword=&quot;null&quot; /&gt; if no key exists.">相關的索引鍵，或 <see langword="null" /> (如果沒有索引鍵)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary vsli:raw="Gets the value corresponding to the specified key.">取得對應於指定索引鍵的值。</summary>
      <param name="key" vsli:raw="The key to look up the value for.">要為其查詢值的索引鍵。</param>
      <returns vsli:raw="The associated value, or &lt;see langword=&quot;null&quot; /&gt; if no value exists.">相關的值，或 <see langword="null" /> (如果沒有值)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary vsli:raw="Sets the specified key-value pair.">設定指定的機碼值組。</summary>
      <param name="key" vsli:raw="An object to use as the key to associate the value with.">做為與值相關的索引鍵的物件。</param>
      <param name="value" vsli:raw="The value to store.">要儲存的值。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary vsli:raw="Provides a service for registering event handlers for component events.">提供為元件事件登錄事件處理常式的服務。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Creates a unique name for an event-handler method for the specified component and event.">建立指定元件和事件之事件處理常式方法的唯一名稱。</summary>
      <param name="component" vsli:raw="The component instance the event is connected to.">事件所連接的元件執行個體。</param>
      <param name="e" vsli:raw="The event to create a name for.">要為其建立名稱的事件。</param>
      <returns vsli:raw="The recommended name for the event-handler method for this event.">這個事件的事件處理常式方法的建議名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Gets a collection of event-handler methods that have a method signature compatible with the specified event.">取得具有與指定事件相容之方法簽章的事件處理常式方法的集合。</summary>
      <param name="e" vsli:raw="The event to get the compatible event-handler methods for.">要為其取得相容事件處理常式方法的事件。</param>
      <returns vsli:raw="A collection of strings.">字串的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the specified property descriptor represents, if it represents an event.">取得指定屬性描述項表示之事件的 <see cref="T:System.ComponentModel.EventDescriptor" /> (如果指定屬性描述項表示事件)。</summary>
      <param name="property" vsli:raw="The property that represents an event.">表示事件的屬性。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the property represents, or &lt;see langword=&quot;null&quot; /&gt; if the property does not represent an event.">屬性所表示事件的 <see cref="T:System.ComponentModel.EventDescriptor" />，或 <see langword="null" /> (如果屬性不表示事件)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary vsli:raw="Converts a set of event descriptors to a set of property descriptors.">將事件描述項集合轉換為屬性描述項集合。</summary>
      <param name="events" vsli:raw="The events to convert to properties.">要轉換為屬性的事件。</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that describe the event set.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件陣列，描述事件集。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Converts a single event descriptor to a property descriptor.">將單一事件描述項轉換為屬性描述項。</summary>
      <param name="e" vsli:raw="The event to convert.">要轉換的事件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the event.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，描述事件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary vsli:raw="Displays the user code for the designer.">顯示設計工具的使用者程式碼。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果程式碼已顯示，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Displays the user code for the specified event.">顯示指定事件的使用者程式碼。</summary>
      <param name="component" vsli:raw="The component that the event is connected to.">事件所連接的元件。</param>
      <param name="e" vsli:raw="The event to display.">要顯示的事件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果程式碼已顯示，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary vsli:raw="Displays the user code for the designer at the specified line.">在指定行中顯示設計工具的使用者程式碼。</summary>
      <param name="lineNumber" vsli:raw="The line number to place the caret on.">要放置插入號 (Caret) 的行數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果程式碼已顯示，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary vsli:raw="Provides an interface that can list extender providers.">提供可列出擴充性提供者 (Extender Provider) 的介面。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary vsli:raw="Gets the set of extender providers for the component.">取得元件的擴充性提供者的集合。</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that lists the active extender providers. If there are no providers, an empty array is returned.">
        <see cref="T:System.ComponentModel.IExtenderProvider" /> 型別的陣列，會列示作用中的擴充性提供者。 如果找不到提供者，會傳回空陣列。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary vsli:raw="Provides an interface for adding and removing extender providers at design time.">提供在設計階段加入及移除擴充性提供者 (Extender Provider) 的介面。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Adds the specified extender provider.">加入指定的擴充性提供者。</summary>
      <param name="provider" vsli:raw="The extender provider to add.">要加入的擴充性提供者。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Removes the specified extender provider.">移除指定的擴充性提供者。</summary>
      <param name="provider" vsli:raw="The extender provider to remove.">要移除的擴充性提供者。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary vsli:raw="Provides methods for showing Help topics and adding and removing Help keywords at design time.">提供在設計階段顯示說明主題以及加入和移除 Help 關鍵字的方法。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary vsli:raw="Adds a context attribute to the document.">加入內容屬性至文件。</summary>
      <param name="name" vsli:raw="The name of the attribute to add.">要加入的屬性名稱。</param>
      <param name="value" vsli:raw="The value of the attribute.">屬性的值。</param>
      <param name="keywordType" vsli:raw="The type of the keyword, from the enumeration &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordType&quot; /&gt;.">關鍵字的型別，來自列舉型別 <see cref="T:System.ComponentModel.Design.HelpKeywordType" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary vsli:raw="Removes all existing context attributes from the document.">從文件中移除所有現有的內容屬性。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary vsli:raw="Creates a local &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to manage subcontexts.">建立本機的 <see cref="T:System.ComponentModel.Design.IHelpService" /> 以管理子內容。</summary>
      <param name="contextType" vsli:raw="The priority type of the subcontext to add.">要加入的子內容的優先型別。</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt;.">新建立的 <see cref="T:System.ComponentModel.Design.IHelpService" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary vsli:raw="Removes a previously added context attribute.">移除先前加入的內容屬性。</summary>
      <param name="name" vsli:raw="The name of the attribute to remove.">要移除的屬性名稱。</param>
      <param name="value" vsli:raw="The value of the attribute to remove.">要移除的屬性值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary vsli:raw="Removes a context created with &lt;see cref=&quot;M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)&quot; /&gt;.">移除以 <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" /> 建立的內容。</summary>
      <param name="localContext" vsli:raw="The local context &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to remove.">要移除的本機內容 <see cref="T:System.ComponentModel.Design.IHelpService" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified keyword.">顯示對應於指定關鍵字的說明主題。</summary>
      <param name="helpKeyword" vsli:raw="The keyword of the Help topic to display.">要顯示之說明主題的關鍵字。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified URL.">顯示對應於指定 URL 的說明主題。</summary>
      <param name="helpUrl" vsli:raw="The URL of the Help topic to display.">要顯示之說明主題的 URL。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary vsli:raw="Provides methods for identifying the components of a component.">提供識別某個元件的元件之方法。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary vsli:raw="Searches the specified component for fields that implement the &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; interface and adds each to the specified container, storing the inheritance level of each which can be retrieved using the &lt;see cref=&quot;M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)&quot; /&gt; method.">搜尋指定的元件，以找出實作 <see cref="T:System.ComponentModel.IComponent" /> 介面的欄位，並將每一個欄位加入指定的容器，以儲存每一個欄位的繼承層級 (可利用 <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" /> 方法來擷取繼承層級)。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to search. Searching begins with this component.">要搜尋的 <see cref="T:System.ComponentModel.IComponent" />。 搜尋作業從這個元件開始。</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to add components to.">要加入元件的 <see cref="T:System.ComponentModel.IContainer" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the inheritance attribute for the specified component.">取得指定元件的繼承屬性。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for which to retrieve the inheritance attribute.">擷取繼承屬性的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; that describes the level of inheritance of the specified component.">
        <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的執行個體，描述指定元件的繼承層級。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary vsli:raw="Provides methods to manage the global designer verbs and menu commands available in design mode, and to show some types of shortcut menus.">提供方法，用來管理可於設計模式中使用的全域設計工具動詞命令和功能表命令，以及顯示捷徑功能表的某些型別。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Adds the specified standard menu command to the menu.">將指定的標準功能表命令加入至功能表。</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to add.">要加入的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; is already present on a menu.">指定之 <see cref="T:System.ComponentModel.Design.CommandID" /> 的 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 已經出現在功能表上。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified designer verb to the set of global designer verbs.">加入指定的設計工具動詞命令至全域設計工具動詞命令集。</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add.">要加入的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Searches for the specified command ID and returns the menu command associated with it.">搜尋指定的命令 ID，並傳回與它相關聯的功能表命令。</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; to search for.">要搜尋的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; associated with the command ID, or &lt;see langword=&quot;null&quot; /&gt; if no command is found.">與這個命令 ID 相關連的 <see cref="T:System.ComponentModel.Design.MenuCommand" />，或 <see langword="null" /> (如果找不到命令)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Invokes a menu or designer verb command matching the specified command ID.">叫用功能表或與指定之命令 ID 相符的設計工具動詞命令。</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the command to search for and execute.">要搜尋和執行之命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the command was found and invoked successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到命令且叫用成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Removes the specified standard menu command from the menu.">從功能表移除指定的標準功能表命令。</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to remove.">要移除的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified designer verb from the collection of global designer verbs.">從全域設計工具動詞命令的集合移除指定的設計工具動詞命令。</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove.">要移除的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary vsli:raw="Shows the specified shortcut menu at the specified location.">在指定位置顯示指定的捷徑功能表。</summary>
      <param name="menuID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the shortcut menu to show.">捷徑功能表要顯示的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <param name="x" vsli:raw="The x-coordinate at which to display the menu, in screen coordinates.">X 座標，要在該螢幕座標上顯示捷徑功能表。</param>
      <param name="y" vsli:raw="The y-coordinate at which to display the menu, in screen coordinates.">Y 座標，要在該螢幕座標上顯示捷徑功能表。</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary vsli:raw="Gets a collection of the designer verbs that are currently available.">取得目前可用的設計工具動詞命令集合。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the designer verbs that are currently available.">
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />，包含目前可用的設計工具動詞命令。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary vsli:raw="Provides an interface for obtaining references to objects within a project by name or type, obtaining the name of a specified object, and for locating the parent of a specified object within a designer project.">提供介面，在專案內依名稱或型別取得物件的參考、取得指定物件的名稱，以及在設計工具專案內找到指定物件的父物件。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary vsli:raw="Gets the component that contains the specified component.">取得包含指定元件的元件。</summary>
      <param name="reference" vsli:raw="The object to retrieve the parent component for.">要為其擷取父元件的物件。</param>
      <returns vsli:raw="The base &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that contains the specified object, or &lt;see langword=&quot;null&quot; /&gt; if no parent component exists.">包含指定物件的基底 <see cref="T:System.ComponentModel.IComponent" />，或是，如果不存在父元件則傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">取得指定元件的名稱。</summary>
      <param name="reference" vsli:raw="The object to return the name of.">要傳回其名稱的物件。</param>
      <returns vsli:raw="The name of the object referenced, or &lt;see langword=&quot;null&quot; /&gt; if the object reference is not valid.">參考的物件名稱，或 <see langword="null" /> (如果物件參考無效)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary vsli:raw="Gets a reference to the component whose name matches the specified name.">取得其名稱符合指定名稱的元件的參考。</summary>
      <param name="name" vsli:raw="The name of the component to return a reference to.">要參考傳回的目的元件名稱。</param>
      <returns vsli:raw="An object the specified name refers to, or &lt;see langword=&quot;null&quot; /&gt; if no reference is found.">指定名稱參考的物件，或 <see langword="null" /> (如果沒有找到任何的參考)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary vsli:raw="Gets all available references to project components.">取得專案元件的所有可用參考。</summary>
      <returns vsli:raw="An array of all objects with references available to the &lt;see cref=&quot;T:System.ComponentModel.Design.IReferenceService&quot; /&gt;.">所有物件的陣列，具有可供 <see cref="T:System.ComponentModel.Design.IReferenceService" /> 使用的參考。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary vsli:raw="Gets all available references to components of the specified type.">取得指定型別之元件的所有可用參考。</summary>
      <param name="baseType" vsli:raw="The type of object to return references to instances of.">物件的型別，要傳回其執行個體的參考。</param>
      <returns vsli:raw="An array of all available objects of the specified type.">指定型別的所有可用物件的陣列。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary vsli:raw="Provides an interface for designers to access resource readers and writers for specific &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; resource types.">提供設計工具的介面，存取特定 <see cref="T:System.Globalization.CultureInfo" /> 資源型別的資源讀取器 (Reader) 和寫入器 (Writer)。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource reader for the specified culture and returns it.">找到指定文化特性的資源讀取器 (Reader)，並將其傳回。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to retrieve a resource reader.">資源的 <see cref="T:System.Globalization.CultureInfo" />，會為其擷取資源讀取器。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceReader&quot; /&gt; interface that contains the resources for the culture, or &lt;see langword=&quot;null&quot; /&gt; if no resources for the culture exist.">
        <see cref="T:System.Resources.IResourceReader" /> 介面，包含文化特性的資源，或 <see langword="null" /> (如果文化特性資源不存在)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource writer for the specified culture and returns it.">找到指定文化特性 (Culture) 的資源寫入器，並將其傳回。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to create a resource writer.">要為其建立資源寫入器的資源的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceWriter&quot; /&gt; interface for the specified culture.">指定文化特性的 <see cref="T:System.Resources.IResourceWriter" /> 介面。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary vsli:raw="Provides support for root-level designer view technologies.">提供根層次設計工具檢視技術的支援。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary vsli:raw="Gets a view object for the specified view technology.">取得指定的檢視技術之檢視物件。</summary>
      <param name="technology" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; that indicates a particular view technology.">
        <see cref="T:System.ComponentModel.Design.ViewTechnology" />，表示特定的檢視技術。</param>
      <returns vsli:raw="An object that represents the view for this designer.">物件，表示這個設計工具的檢視。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified view technology is not supported or does not exist.">指定的檢視技術並不受支援或並不存在。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary vsli:raw="Gets the set of technologies that this designer can support for its display.">取得技術的集合，這個設計工具可以支援它的顯示。</summary>
      <returns vsli:raw="An array of supported &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; values.">支援的 <see cref="T:System.ComponentModel.Design.ViewTechnology" /> 值的陣列。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary vsli:raw="Provides an interface for a designer to select components.">提供介面供設計工具選取元件。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary vsli:raw="Gets a value indicating whether the specified component is currently selected.">取得值，表示指定的元件是否為目前所選取的。</summary>
      <param name="component" vsli:raw="The component to test.">要測試的元件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is part of the user's current selection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果元件是使用者目前選取的一部分，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary vsli:raw="Gets a collection of components that are currently selected.">取得目前所選取元件的集合。</summary>
      <returns vsli:raw="A collection that represents the current set of components that are selected.">集合，表示目前所選取的一組元件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary vsli:raw="Gets the object that is currently the primary selected object.">取得物件，為目前主要的選取物件。</summary>
      <returns vsli:raw="The object that is currently the primary selected object.">物件，為目前主要的選取物件。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary vsli:raw="Occurs when the current selection changes.">目前選取範圍變更時發生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary vsli:raw="Occurs when the current selection is about to change.">發生於目前的選取將要變更時。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary vsli:raw="Gets the count of selected objects.">取得選取物件的計數。</summary>
      <returns vsli:raw="The number of selected objects.">選取物件的數目。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary vsli:raw="Selects the specified collection of components.">選取指定的元件集合。</summary>
      <param name="components" vsli:raw="The collection of components to select.">選取的元件集合。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary vsli:raw="Selects the components from within the specified collection of components that match the specified selection type.">從符合指定選取類型的指定元件集合中，選取元件。</summary>
      <param name="components" vsli:raw="The collection of components to select.">選取的元件集合。</param>
      <param name="selectionType" vsli:raw="A value from the &lt;see cref=&quot;T:System.ComponentModel.Design.SelectionTypes&quot; /&gt; enumeration. The default is &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.SelectionTypes" /> 列舉中的值。 預設為 <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary vsli:raw="Provides a container for services.">提供服務的容器 (Container)。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">加入特定服務至服務容器。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">要加入的服務型別。</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">用於建立服務的回呼物件。 這個物件可以讓服務宣告為可用的，但是必須等到提出服務的要求時才會建立物件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to parent service containers.">加入指定的服務至服務容器，並且選擇性地將服務升級到父服務容器。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">要加入的服務型別。</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">用於建立服務的回呼物件。 這個物件可以讓服務宣告為可用的，但是必須等到提出服務的要求時才會建立物件。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要將這個要求升級到任何父服務容器，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">加入特定服務至服務容器。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">要加入的服務型別。</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">要加入的服務型別執行個體。 這個物件必須實作或繼承自 <paramref name="serviceType" /> 參數所指示的型別。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to any parent service containers.">加入指定的服務至服務容器，並且選擇性地將服務升級到任何父服務容器。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">要加入的服務型別。</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">要加入的服務型別執行個體。 這個物件必須實作或繼承自 <paramref name="serviceType" /> 參數所指示的型別。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要將這個要求升級到任何父服務容器，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">從服務容器中移除特定服務型別。</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">要移除的服務型別。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container, and optionally promotes the service to parent service containers.">將指定的服務型別從服務容器移除，並且選擇性地將服務升級到父服務容器。</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">要移除的服務型別。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要將這個要求升級到任何父服務容器，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary vsli:raw="Provides support for building a set of related custom designers.">為建置一組相關的自訂設計工具提供支援。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary vsli:raw="Gets a collection of child designers.">取得子設計工具的集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;, containing the collection of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; child objects of the current designer.">
        <see cref="T:System.Collections.ICollection" />，包含目前設計工具之 <see cref="T:System.ComponentModel.Design.IDesigner" /> 子物件的集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary vsli:raw="Gets the parent designer.">取得父設計工具。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; representing the parent designer, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">代表父設計工具的 <see cref="T:System.ComponentModel.Design.IDesigner" />，如果沒有父代，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary vsli:raw="Provides an interface to modify the set of member descriptors for a component in design mode.">提供介面，在設計模式中修改元件的成員描述項集。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the attributes that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">篩選元件透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 所公開的屬性。</summary>
      <param name="component" vsli:raw="The component to filter the attributes of.">要篩選其屬性的元件。</param>
      <param name="attributes" vsli:raw="A dictionary of attributes that can be modified.">可以修改的屬性字典。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered attributes is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">如果要對篩選的屬性集進行快取，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the events that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">篩選元件透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 所公開的事件。</summary>
      <param name="component" vsli:raw="The component to filter events for.">要為其篩選事件的元件。</param>
      <param name="events" vsli:raw="A dictionary of events that can be modified.">可以修改的事件字典。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered events is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">如果要對篩選的事件集進行快取，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the properties that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">篩選元件透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 所公開的屬性。</summary>
      <param name="component" vsli:raw="The component to filter properties for.">要為其篩選屬性的元件。</param>
      <param name="properties" vsli:raw="A dictionary of properties that can be modified.">可以修改的屬性字典。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered properties is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">如果要對篩選的屬性集進行快取，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary vsli:raw="Discovers available types at design time.">探索設計階段可用的型別。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary vsli:raw="Retrieves the list of available types.">擷取可用型別的清單。</summary>
      <param name="baseType" vsli:raw="The base type to match. Can be &lt;see langword=&quot;null&quot; /&gt;.">要符合的基底型別。 可以是 <see langword="null" />。</param>
      <param name="excludeGlobalTypes" vsli:raw="Indicates whether types from all referenced assemblies should be checked.">指出是否應檢查所有參考組件的型別。</param>
      <returns vsli:raw="A collection of types that match the criteria specified by &lt;paramref name=&quot;baseType&quot; /&gt; and &lt;paramref name=&quot;excludeGlobalTypes&quot; /&gt;.">型別集合，與 <paramref name="baseType" /> 和 <paramref name="excludeGlobalTypes" /> 所指定的準則相符。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary vsli:raw="Provides an interface to retrieve an assembly or type by name.">提供以名稱擷取組件 (Assembly) 或型別的介面。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the requested assembly.">取得要求的組件。</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">要擷取的組件名稱。</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">要求組件的執行個體，或 <see langword="null" /> (如果找不到組件)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary vsli:raw="Gets the requested assembly.">取得要求的組件。</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">要擷取的組件名稱。</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">如果找不到組件時，這個方法應擲回例外狀況，則為 <see langword="true" />，否則為 <see langword="false" />。並且如果找不到組件，這個方法會傳回 <see langword="null" />。</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">要求組件的執行個體，或 <see langword="null" /> (如果找不到組件)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the path to the file from which the assembly was loaded.">取得檔案的路徑，組件就是從這裡被載入。</summary>
      <param name="name" vsli:raw="The name of the assembly.">組件的名稱。</param>
      <returns vsli:raw="The path to the file from which the assembly was loaded.">檔案的路徑，組件就是從這裡被載入。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary vsli:raw="Loads a type with the specified name.">載入具有指定名稱的型別。</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">型別的名稱。 如果型別名稱不是指示組件的完整名稱，這個服務會搜尋內部的參考組件集合。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">
        <see cref="T:System.Type" /> 的執行個體，對應到指定的名稱，或 <see langword="null" /> (如果找不到型別)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">載入具有指定名稱的型別。</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">型別的名稱。 如果型別名稱不是指示組件的完整名稱，這個服務會搜尋內部的參考組件集合。</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">如果找不到組件時，這個方法應擲回例外狀況，則為 <see langword="true" />，否則為 <see langword="false" />。並且如果找不到組件，這個方法會傳回 <see langword="null" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">
        <see cref="T:System.Type" /> 的執行個體，對應到指定的名稱，或 <see langword="null" /> (如果找不到型別)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">載入具有指定名稱的型別。</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">型別的名稱。 如果型別名稱不是指示組件的完整名稱，這個服務會搜尋內部的參考組件集合。</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">如果找不到組件時，這個方法應擲回例外狀況，則為 <see langword="true" />，否則為 <see langword="false" />。並且如果找不到組件，這個方法會傳回 <see langword="null" />。</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore case when searching for types; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要在搜尋型別時忽略大小寫，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">
        <see cref="T:System.Type" /> 的執行個體，對應到指定的名稱，或 <see langword="null" /> (如果找不到型別)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Adds a reference to the specified assembly.">加入參考至指定的組件。</summary>
      <param name="name" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; that indicates the assembly to reference.">
        <see cref="T:System.Reflection.AssemblyName" />，表示要參考的組件。</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary vsli:raw="Represents a Windows menu or toolbar command item.">表示 Windows 功能表或工具列命令項目。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 類別的新執行個體。</summary>
      <param name="handler" vsli:raw="The event to raise when the user selects the menu item or toolbar button.">當使用者選取功能表項目或工具列按鈕時，所引發的事件。</param>
      <param name="command" vsli:raw="The unique command ID that links this menu command to the environment's menu.">唯一命令 ID，連結這個功能表命令到環境的功能表。</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is checked.">取得或設定值，表示是否檢查這個功能表項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is checked; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果項目已經核取，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary vsli:raw="Occurs when the menu command changes.">發生於功能表命令變更時。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with this menu command.">取得與這個功能表命令相關的 <see cref="T:System.ComponentModel.Design.CommandID" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with the menu command.">與功能表命令相關的 <see cref="T:System.ComponentModel.Design.CommandID" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary vsli:raw="Gets a value indicating whether this menu item is available.">取得值，表示是否可以使用這個功能表項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果項目是啟用的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary vsli:raw="Invokes the command.">叫用命令。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary vsli:raw="Invokes the command with the given parameter.">叫用具有指定參數的命令。</summary>
      <param name="arg" vsli:raw="An optional argument for use by the command.">命令所使用的選擇性引數。</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary vsli:raw="Gets the OLE command status code for this menu item.">取得這個功能表項目的 OLE 命令狀態程式碼。</summary>
      <returns vsli:raw="An integer containing a mixture of status flags that reflect the state of this menu item.">整數，含有反映這個功能表項目狀態之狀態旗標的混合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.MenuCommand.CommandChanged&quot; /&gt; event.">引發 <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" /> 事件。</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary vsli:raw="Gets the public properties associated with the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">取得與 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 關聯的公用屬性。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing the public properties of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" />，包含 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 的公用屬性。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is supported.">取得或設定值，表示是否支援這個功能表項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is supported, which is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果支援項目 (預設)，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary vsli:raw="Returns a string representation of this menu command.">傳回這個功能表命令的字串表示。</summary>
      <returns vsli:raw="A string containing the value of the &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.CommandID&quot; /&gt; property appended with the names of any flags that are set, separated by pipe bars (|). These flag properties include &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Checked&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Enabled&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Supported&quot; /&gt;, and &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Visible&quot; /&gt;.">包含 <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> 屬性值的字串，後面附加任何已設定之旗標的名稱，並以 (|) 隔開。 這些旗標屬性包含 <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />、<see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />、<see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /> 和 <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is visible.">取得或設定值，表示功能表項目是否為可見。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is visible; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果項目為可見的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary vsli:raw="Defines identifiers that indicate the type of a selection.">定義指示選取類型的識別項。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary vsli:raw="Represents an add selection that adds the selected components to the current selection, maintaining the current set of selected components.">表示新增選取範圍，將選取的元件加入目前的選取範圍，並維護目前的那一組所選元件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">表示一般選取。 此選取服務會回應 Ctrl 和 Shift 鍵，以支援在選取範圍中加入或移除元件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary vsli:raw="Represents a selection that occurs when a user clicks a component. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">表示使用者按一下元件時所發生的選取。 如果已經選取新選取的元件，它會升級成為主要的選取元件，而不會被取消選取。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary vsli:raw="Represents a selection that occurs when the user presses on the mouse button while the mouse pointer is over a component. If the component under the pointer is already selected, it is promoted to become the primary selected component rather than being canceled.">表示當滑鼠指標在元件的上方，使用者按下滑鼠按鈕時所發生的選取。 如果已經選取指標下方的元件，它會升級成為主要的選取元件，而不會被取消選取。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary vsli:raw="Represents a selection that occurs when the user releases the mouse button immediately after a component has been selected. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">表示在選取元件之後，使用者立刻放開滑鼠按鈕時所發生的選取。 如果已經選取新選取的元件，它會升級成為主要的選取元件，而不會被取消選取。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">表示一般選取。 此選取服務會回應 Ctrl 和 Shift 鍵，以支援在選取範圍中加入或移除元件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary vsli:raw="Represents a primary selection that occurs when a user clicks on a component. If a component in the selection list is already selected, the component is promoted to be the primary selection.">表示使用者按一下元件時所發生的主要選取。 如果已經選取選擇清單中的元件，則該元件會升級成為主要的選取元件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary vsli:raw="Represents a remove selection that removes the selected components from the current selection, maintaining the current set of selected components.">表示移除選取範圍，從目前的選取範圍中移除選取的元件，並維護目前的那一組所選元件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary vsli:raw="Represents a selection that occurs when the content of a selection is replaced. The selection service replaces the current selection with the replacement.">表示在選取內容被取代時所發生的選取。 選取服務會使用取代，取代目前的選取。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary vsli:raw="Represents a toggle selection that switches between the current selection and the provided selection. If a component is already selected and is passed into &lt;see cref=&quot;Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents&quot; /&gt; with a selection type of &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Toggle&quot; /&gt;, the component selection will be canceled.">表示切換選取，在目前的選取範圍以及提供的選取範圍之間進行切換。 如果已經選取某個元件，並將它傳遞到 <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> (其選取型別為 <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" />)，則將會取消選取該元件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary vsli:raw="Identifies the valid selection types as &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Replace&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseDown&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseUp&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Click&quot; /&gt;.">將有效的選取類型識別為 <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" /> 或 <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" />。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary vsli:raw="Provides the base class for serializing a set of components or serializable objects into a serialization store.">提供基底類別，以序列化元件集合或可序列化物件至序列化存放區。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">建立新的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</summary>
      <returns vsli:raw="A new created serialization store.">新建立的序列化存放區。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary vsli:raw="Deserializes the given store to produce a collection of objects.">還原序列化指定的存放區，以產生物件集合。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">要還原序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <returns vsli:raw="A collection of objects created according to the stored state.">根據儲存狀態建立的物件集合。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> 不包含序列化容器可以處理之格式的資料。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given store and populates the given &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with deserialized &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects.">還原序列化指定的存放區，並使用已還原序列化的 <see cref="T:System.ComponentModel.IContainer" /> 物件填入指定的 <see cref="T:System.ComponentModel.IComponent" />。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">要還原序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">要加入 <see cref="T:System.ComponentModel.IContainer" /> 物件的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <returns vsli:raw="A collection of objects created according to the stored state.">根據儲存狀態建立的物件集合。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 或 <paramref name="container" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> 不包含序列化容器可以處理之格式的資料。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container.">還原序列化指定的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 至指定的容器中。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">要還原序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">要加入 <see cref="T:System.ComponentModel.IComponent" /> 物件的容器。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 或 <paramref name="container" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> 不包含序列化容器可以處理之格式的資料。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally validating recycled types.">還原序列化指定的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 至指定的容器，可以選擇性地驗證回收型別。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">要還原序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">要加入 <see cref="T:System.ComponentModel.IComponent" /> 物件的容器。</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">
        <see langword="true" /> 表示保證還原序列化只會在套用至同一型別的物件時運作。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 或 <paramref name="container" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> 不包含序列化容器可以處理之格式的資料。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally applying default property values.">還原序列化指定的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 至指定的容器，可以選擇性地套用預設屬性值。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">要還原序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">要加入 <see cref="T:System.ComponentModel.IComponent" /> 物件的容器。</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">
        <see langword="true" /> 表示保證還原序列化只會在套用至同一型別的物件時運作。</param>
      <param name="applyDefaults" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the default property values should be applied.">
        <see langword="true" /> 表示應當套用預設屬性值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 或 <paramref name="container" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> 不包含序列化容器可以處理之格式的資料。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary vsli:raw="Loads a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; from a stream.">從資料流載入 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</summary>
      <param name="stream" vsli:raw="The &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; from which the store will be loaded.">
        <see cref="T:System.IO.Stream" />，從其中載入存放區。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; instance.">新的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 執行個體。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; does not contain data saved by a previous call to &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)&quot; /&gt;.">
        <paramref name="stream" /> 不包含先前呼叫 <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" /> 儲存的資料。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object to the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">序列化指定的物件至指定的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be written.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />，<paramref name="value" /> 的狀態將寫入其中。</param>
      <param name="value" vsli:raw="The object to serialize.">要序列化的物件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> 已關閉，或 <paramref name="store" /> 不是支援的序列化存放區類型。 請使用 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 傳回的存放區。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object, accounting for default property values.">序列化指定的物件，因而能夠產生預設屬性值。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be serialized.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />，<paramref name="value" /> 的狀態將序列化至其中。</param>
      <param name="value" vsli:raw="The object to serialize.">要序列化的物件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> 已關閉，或 <paramref name="store" /> 不是支援的序列化存放區類型。 請使用 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 傳回的存放區。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object.">在指定的物件上將指定的成員序列化。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />，<paramref name="member" /> 的狀態將序列化至其中。</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">附加 <paramref name="member" /> 的物件。</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; specifying the member to serialize.">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，指定要序列化的成員。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> 已關閉，或 <paramref name="store" /> 不是支援的序列化存放區類型。 請使用 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 傳回的存放區。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object, accounting for the default property value.">用預設屬性值序列化指定物件上的指定成員。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />，<paramref name="member" /> 的狀態將序列化至其中。</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">附加 <paramref name="member" /> 的物件。</param>
      <param name="member" vsli:raw="The member to serialize.">要序列化的成員。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> 已關閉，或 <paramref name="store" /> 不是支援的序列化存放區類型。 請使用 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 傳回的存放區。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary vsli:raw="Provides a stack object that can be used by a serializer to make information available to nested serializers.">提供堆疊物件，序列化工具可以使用這個堆疊物件，使資訊可以為巢狀序列化工具所用。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary vsli:raw="Appends an object to the end of the stack, rather than pushing it onto the top of the stack.">將物件附加至堆疊結尾，而不是將它推至堆疊的頂端。</summary>
      <param name="context" vsli:raw="A context object to append to the stack.">要附加至堆疊的內容物件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary vsli:raw="Gets the current object on the stack.">取得堆疊上的目前物件。</summary>
      <returns vsli:raw="The current object on the stack, or &lt;see langword=&quot;null&quot; /&gt; if no objects were pushed.">堆疊上的目前物件，或 <see langword="null" /> (如果沒有物件推入)。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary vsli:raw="Gets the object on the stack at the specified level.">取得所指定層次之堆疊上的物件。</summary>
      <param name="level" vsli:raw="The level of the object to retrieve on the stack. Level 0 is the top of the stack, level 1 is the next down, and so on. This level must be 0 or greater. If level is greater than the number of levels on the stack, it returns &lt;see langword=&quot;null&quot; /&gt;.">要在堆疊上擷取的物件層次。 第 0 層是堆疊的最上層，第 1 層則是下一層，依此類推。 這一層必須是 0 或更大的值。 如果層次數字大於堆疊層次的數字，就會傳回 <see langword="null" />。</param>
      <returns vsli:raw="The object on the stack at the specified level, or &lt;see langword=&quot;null&quot; /&gt; if no object exists at that level.">指定層次堆疊上的物件，或 <see langword="null" /> (如果該層次上沒有物件存在)。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;level&quot; /&gt; is less than 0.">
        <paramref name="level" /> 小於 0。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary vsli:raw="Gets the first object on the stack that inherits from or implements the specified type.">取得在堆疊上繼承自或實作指定型別的第一個物件。</summary>
      <param name="type" vsli:raw="A type to retrieve from the context stack.">要從內容堆疊中擷取的型別。</param>
      <returns vsli:raw="The first object on the stack that inherits from or implements the specified type, or &lt;see langword=&quot;null&quot; /&gt; if no object on the stack implements the type.">在堆疊上繼承自或實作指定型別的第一個物件，或 <see langword="null" /> (如果在堆疊上沒有物件實作該型別)。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary vsli:raw="Removes the current object off of the stack, returning its value.">將目前物件從堆疊中移除，並傳回物件的值。</summary>
      <returns vsli:raw="The object removed from the stack; &lt;see langword=&quot;null&quot; /&gt; if no objects are on the stack.">已從堆疊中移除的物件；如果堆疊中沒有物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary vsli:raw="Pushes, or places, the specified object onto the stack.">推入或放置指定物件至堆疊上。</summary>
      <param name="context" vsli:raw="The context object to push onto the stack.">要推入至堆疊的內容物件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; attribute is placed on a serializer to indicate the class to use as a default provider of that type of serializer.">將 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 屬性放置於序列化程式上，表示將類別用做該型別序列化程式的預設提供者。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the named provider type.">使用具名提供者類型，初始化 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 類別的新執行個體。</summary>
      <param name="providerTypeName" vsli:raw="The name of the serialization provider type.">序列化提供者類型的名稱。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerTypeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerTypeName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the given provider type.">使用指定的提供者類型，初始化 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 類別的新執行個體。</summary>
      <param name="providerType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the serialization provider.">序列化提供者的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary vsli:raw="Gets the type name of the serialization provider.">取得序列化提供者的類型名稱。</summary>
      <returns vsli:raw="A string containing the name of the provider.">包含提供者名稱的字串。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary vsli:raw="Provides a basic designer loader interface that can be used to implement a custom designer loader.">提供基本設計工具載入器介面，可用於實作自訂設計工具載入器。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary vsli:raw="Begins loading a designer.">開始載入設計工具。</summary>
      <param name="host" vsli:raw="The loader host through which this loader loads components.">載入器主應用程式，這個載入器是藉由它載入元件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt;.">釋放 <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary vsli:raw="Writes cached changes to the location that the designer was loaded from.">將快取變更寫入至載入設計工具的來源位置。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary vsli:raw="Gets a value indicating whether the loader is currently loading a document.">取得值，表示載入器目前是否正在載入文件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the loader is currently loading a document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果載入器目前正在載入文件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>指示序列化 (Serialization) 管理員要使用的序列化工具，以序列化這個屬性所套用的型別值。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 類別的新執行個體。</summary>
      <param name="serializerTypeName">序列化工具資料型別的完整名稱。</param>
      <param name="baseSerializerTypeName">序列化工具基底資料型別的完整名稱。 只要序列化工具有不同的基底型別，便可以為類別提供多個序列化工具。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 類別的新執行個體。</summary>
      <param name="serializerTypeName">序列化工具資料型別的完整名稱。</param>
      <param name="baseSerializerType">序列化工具的基底資料型別。 只要序列化工具有不同的基底型別，便可以為類別提供多個序列化工具。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 類別的新執行個體。</summary>
      <param name="serializerType">序列化工具的資料型別。</param>
      <param name="baseSerializerType">序列化工具的基底資料型別。 只要序列化工具有不同的基底型別，便可以為類別提供多個序列化工具。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>取得序列化工具基底型別的完整型別名稱。</summary>
      <returns>序列化工具基底型別的完整型別名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>取得序列化工具的完整型別名稱。</summary>
      <returns>序列化工具的完整型別名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId">
      <summary>表示此屬性型別的唯一 ID。</summary>
      <returns>此屬性型別的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary vsli:raw="Provides an interface that can extend a designer host to support loading from a serialized state.">提供可以擴充設計工具主應用程式 (Designer Host) 的介面，支援從序列化狀態的載入。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Ends the designer loading operation.">結束設計工具載入作業。</summary>
      <param name="baseClassName" vsli:raw="The fully qualified name of the base class of the document that this designer is designing.">這個設計工具正在設計的文件基底類別的完整名稱。</param>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is successfully loaded; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果設計工具載入成功，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <param name="errorCollection" vsli:raw="A collection containing the errors encountered during load, if any. If no errors were encountered, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">集合，含有載入期間所遇到的錯誤 (如果有的話)。 如果沒有遇到錯誤，則傳遞空集合或者 <see langword="null" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary vsli:raw="Reloads the design document.">重新載入設計文件。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary vsli:raw="Provides an interface that extends &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&quot; /&gt; to specify whether errors are tolerated while loading a design document.">提供擴充 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> 的介面，以指定載入設計文件時是否容忍錯誤。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary vsli:raw="Gets or sets a value indicating whether it is possible to reload with errors.">取得或設定值，指出在發生錯誤時是否能重新載入。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader can reload the design document when errors are detected; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果在偵測到錯誤時設計工具載入器可以重新載入設計文件，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary vsli:raw="Gets or sets a value indicating whether errors should be ignored when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload&quot; /&gt; is called.">取得或設定值，指出呼叫 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" /> 時是否應忽略錯誤。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader will ignore errors when it reloads; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果在重新載入時設計工具載入器將會忽略錯誤，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary vsli:raw="Provides an interface that can extend a designer loader to support asynchronous loading of external components.">提供可以擴充設計工具載入器的介面，支援外部元件的非同步 (Asynchronous) 載入。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary vsli:raw="Registers an external component as part of the load process managed by this interface.">將外部元件登錄成由這個介面所管理之載入處理的一部分。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Signals that a dependent load has finished.">表示相依載入已完成。</summary>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the load of the designer is successful; &lt;see langword=&quot;false&quot; /&gt; if errors prevented the load from finishing.">如果設計工具載入成功，則為 <see langword="true" />；如果錯誤使得載入無法完成，則為 <see langword="false" />。</param>
      <param name="errorCollection" vsli:raw="A collection of errors that occurred during the load, if any. If no errors occurred, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">錯誤的集合，在載入期間發生 (如果有的話)。 如果沒有發生錯誤，您可以傳送空集合或 <see langword="null" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary vsli:raw="Reloads the design document.">重新載入設計文件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reload request is accepted, or &lt;see langword=&quot;false&quot; /&gt; if the loader does not allow the reload.">如果接受重新載入要求，則為 <see langword="true" />；如果載入器不允許重新載入，則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary vsli:raw="Provides an interface that can manage design-time serialization.">提供可以管理設計階段序列化 (Serialization) 的介面。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Adds the specified serialization provider to the serialization manager.">加入指定的序列化提供者至序列化管理員。</summary>
      <param name="provider" vsli:raw="The serialization provider to add.">要加入的序列化提供者。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary vsli:raw="Gets a stack-based, user-defined storage area that is useful for communication between serializers.">取得以堆疊為基礎、使用者定義的儲存區，這個區域對於序列化程式之間的通訊很有用。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; that stores data.">
        <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />，儲存資料。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary vsli:raw="Creates an instance of the specified type and adds it to a collection of named instances.">建立指定型別的執行個體，並將它加入具名執行個體的集合。</summary>
      <param name="type" vsli:raw="The data type to create.">要建立的資料型別。</param>
      <param name="arguments" vsli:raw="The arguments to pass to the constructor for this type.">要傳送給這個型別的建構函式的引數。</param>
      <param name="name" vsli:raw="The name of the object. This name can be used to access the object later through &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the object is still created but cannot be accessed by name.">物件的名稱。 之後便可經由 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />，用這個名稱存取物件。 如果傳遞的是 <see langword="null" />，物件還是可以建立，但是無法以名稱存取。</param>
      <param name="addToContainer" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, this object is added to the design container. The object must implement &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for this to have any effect.">如果為 <see langword="true" />，會將這個物件加入設計容器中。 物件必須實作 <see cref="T:System.ComponentModel.IComponent" />，才能發生效用。</param>
      <returns vsli:raw="The newly created object instance.">新建立的物件執行個體。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary vsli:raw="Gets an instance of a created object of the specified name, or &lt;see langword=&quot;null&quot; /&gt; if that object does not exist.">取得以指定的名稱建立的物件的執行個體，或 <see langword="null" /> (如果物件不存在)。</summary>
      <param name="name" vsli:raw="The name of the object to retrieve.">要擷取的物件名稱。</param>
      <returns vsli:raw="An instance of the object with the given name, or &lt;see langword=&quot;null&quot; /&gt; if no object by that name can be found.">有指定名稱的物件的執行個體，或 <see langword="null" /> (如果找不到有該名稱的物件)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified object, or &lt;see langword=&quot;null&quot; /&gt; if the object has no name.">取得指定物件的名稱，或 <see langword="null" /> (如果物件沒有名稱)。</summary>
      <param name="value" vsli:raw="The object to retrieve the name for.">要為其擷取名稱的物件。</param>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object is unnamed.">物件的名稱，或 <see langword="null" /> (如果物件未命名)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer of the requested type for the specified object type.">為指定的物件型別取得要求的型別的序列化工具。</summary>
      <param name="objectType" vsli:raw="The type of the object to get the serializer for.">要為其取得序列化工具的物件型別。</param>
      <param name="serializerType" vsli:raw="The type of the serializer to retrieve.">要擷取的序列化工具型別。</param>
      <returns vsli:raw="An instance of the requested serializer, or &lt;see langword=&quot;null&quot; /&gt; if no appropriate serializer can be located.">要求的序列化工具的執行個體，或 <see langword="null" /> (如果找不到適當的序列化工具)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary vsli:raw="Gets a type of the specified name.">取得指定名稱的型別。</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the type to load.">要載入型別的完整名稱。</param>
      <returns vsli:raw="An instance of the type, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be loaded.">型別的執行個體，或 <see langword="null" /> (如果無法載入型別)。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary vsli:raw="Indicates custom properties that can be serializable with available serializers.">指示可使用可用的序列化工具序列化的自訂屬性。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties to be serialized.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，含有要被序列化的屬性。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Removes a custom serialization provider from the serialization manager.">將自訂的序列化提供者從序列化管理員移除。</summary>
      <param name="provider" vsli:raw="The provider to remove. This object must have been added using &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)&quot; /&gt;.">要移除的提供者。 這個物件必須已經使用 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" /> 加入。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary vsli:raw="Reports an error in serialization.">報告序列化中的錯誤。</summary>
      <param name="errorInformation" vsli:raw="The error to report. This information object can be of any object type. If it is an exception, the message of the exception is extracted and reported to the user. If it is any other type, &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt; is called to display the information to the user.">要報告的錯誤。 這個資訊物件可以是任何物件型別。 如果是例外狀況，其訊息會被擷取並向使用者報告。 如果是任何其他型別，則會呼叫 <see cref="M:System.Object.ToString" />，以便向使用者顯示資訊。</param>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary vsli:raw="Occurs when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)&quot; /&gt; cannot locate the specified name in the serialization manager's name table.">於 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> 無法在序列化管理員的名稱表格中找到指定的名稱時發生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary vsli:raw="Occurs when serialization is complete.">於序列化完成時發生。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary vsli:raw="Sets the name of the specified existing object.">設定指定的現有物件的名稱。</summary>
      <param name="instance" vsli:raw="The object instance to name.">要命名的物件執行個體。</param>
      <param name="name" vsli:raw="The name to give the instance.">要給執行個體的名稱。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary vsli:raw="Provides an interface that enables access to a serializer.">提供能夠存取序列化工具的介面。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer using the specified attributes.">使用指定的屬性 (Attribute)，取得序列化工具。</summary>
      <param name="manager" vsli:raw="The serialization manager requesting the serializer.">要求序列化工具的序列化管理員。</param>
      <param name="currentSerializer" vsli:raw="An instance of the current serializer of the specified type. This can be &lt;see langword=&quot;null&quot; /&gt; if no serializer of the specified type exists.">指定之型別的目前序列化工具執行個體。 如果指定型別的序列化工具不存在，則這可能是 <see langword="null" />。</param>
      <param name="objectType" vsli:raw="The data type of the object to serialize.">要序列化的物件資料型別。</param>
      <param name="serializerType" vsli:raw="The data type of the serializer to create.">要建立的序列化工具資料型別。</param>
      <returns vsli:raw="An instance of a serializer of the type requested, or &lt;see langword=&quot;null&quot; /&gt; if the request cannot be satisfied.">要求型別的序列化工具執行個體，或 <see langword="null" /> (如果無法滿足要求)。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary vsli:raw="Provides an interface that can invoke serialization and deserialization.">提供可以叫用序列化 (Serialization) 和還原序列化 (Deserialization) 的介面。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary vsli:raw="Deserializes the specified serialization data object and returns a collection of objects represented by that data.">將指定的序列化資料物件還原序列化，並傳回由資料所表示的物件集合。</summary>
      <param name="serializationData" vsli:raw="An object consisting of serialized data.">物件，由序列化資料所組成。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of objects rebuilt from the specified serialization data object.">物件的 <see cref="T:System.Collections.ICollection" />，這些物件重建自指定的序列化資料物件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary vsli:raw="Serializes the specified collection of objects and stores them in a serialization data object.">將指定的物件集合序列化，並將它們儲存在序列化資料物件中。</summary>
      <param name="objects" vsli:raw="A collection of objects to serialize.">要序列化的物件集合。</param>
      <returns vsli:raw="An object that contains the serialized state of the specified collection of objects.">物件，包含指定物件集合的序列化狀態。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary vsli:raw="Provides a service that can generate unique names for objects.">提供可以產生物件唯一名稱的服務。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary vsli:raw="Creates a new name that is unique to all components in the specified container.">建立在指定容器中所有元件的唯一新名稱。</summary>
      <param name="container" vsli:raw="The container where the new object is added.">加入新物件的所在容器。</param>
      <param name="dataType" vsli:raw="The data type of the object that receives the name.">接收名稱的物件資料型別。</param>
      <returns vsli:raw="A unique name for the data type.">資料型別的唯一名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">取得值，指出指定名稱是否有效。</summary>
      <param name="name" vsli:raw="The name to validate.">要驗證的名稱。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name is valid; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果名稱有效，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">取得值，指出指定名稱是否有效。</summary>
      <param name="name" vsli:raw="The name to validate.">要驗證的名稱。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary vsli:raw="Provides the information necessary to create an instance of an object. This class cannot be inherited.">提供建立物件執行個體 (Instance) 所需的資訊。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information and arguments.">使用指定的成員資訊和引數，初始化 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 類別的新執行個體。</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">描述項的成員資訊。 這可以是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.ConstructorInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />。 如果這是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，它必須表示 <see langword="static" /> 成員。</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">要傳遞至成員的引數集合。 如果沒有引數，這個參數可以是 <see langword="null" /> 或空集合。 集合也可以由 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 的其他執行個體組成。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">
        <paramref name="member" /> 的型別為 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，而且它並不代表 <see langword="static" /> 成員。
-或-
<paramref name="member" /> 的型別為 <see cref="T:System.Reflection.PropertyInfo" />，而且無法讀取。
-或-
<paramref name="member" /> 的類型為 <see cref="T:System.Reflection.MethodInfo" /> 或 <see cref="T:System.Reflection.ConstructorInfo" />，且 <paramref name="arguments" /> 中的引數數量與 <paramref name="member" /> 的簽章不相符。
-或-
<paramref name="member" /> 的型別為 <see cref="T:System.Reflection.ConstructorInfo" />，而且代表 <see langword="static" /> 成員。
-或-
<paramref name="member" /> 的型別為 <see cref="T:System.Reflection.FieldInfo" />，而且 <paramref name="arguments" /> 中的引數數目不為零。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information, arguments, and value indicating whether the specified information completely describes the instance.">使用指定的成員資訊、引數和指示指定資訊是否完整描述執行個體的值，初始化 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 類別的新執行個體。</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">描述項的成員資訊。 這可以是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.ConstructorInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />。 如果這是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，它必須表示 <see langword="static" /> 成員。</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">要傳遞至成員的引數集合。 如果沒有引數，這個參數可以是 <see langword="null" /> 或空集合。 集合也可以由 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 的其他執行個體組成。</param>
      <param name="isComplete" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified information completely describes the instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定資訊完整描述執行個體，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">
        <paramref name="member" /> 的型別為 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，而且它不代表 <see langword="static" /> 成員。
<paramref name="member" /> 的型別為 <see cref="T:System.Reflection.PropertyInfo" />，而且無法讀取。
<paramref name="member" /> 的型別為 <see cref="T:System.Reflection.MethodInfo" /> 或 <see cref="T:System.Reflection.ConstructorInfo" />，而且 <paramref name="arguments" /> 中的引數數目不符合 <paramref name="member" /> 的簽章。
<paramref name="member" /> 的型別為 <see cref="T:System.Reflection.ConstructorInfo" />，而且代表 <see langword="static" /> 成員。
<paramref name="member" /> 的型別為 <see cref="T:System.Reflection.FieldInfo" />，而且 <paramref name="arguments" /> 中的引數數目不為零。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary vsli:raw="Gets the collection of arguments that can be used to reconstruct an instance of the object that this instance descriptor represents.">取得可用來重建這個執行個體描述項所表示之物件執行個體的引數集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of arguments that can be used to create the object.">引數的 <see cref="T:System.Collections.ICollection" />，這些引數可用來建立物件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary vsli:raw="Invokes this instance descriptor and returns the object the descriptor describes.">叫用 (Invoke) 這個執行個體描述項，並傳回描述項所描述的物件。</summary>
      <returns vsli:raw="The object this instance descriptor describes.">這個執行個體描述項所描述的物件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary vsli:raw="Gets a value indicating whether the contents of this &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; completely identify the instance.">取得值，表示這個 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 的內容是否完整識別執行個體。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance is completely described; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果完整描述該執行個體，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary vsli:raw="Gets the member information that describes the instance this descriptor is associated with.">取得描述與這個描述項相關之執行個體的成員資訊。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that describes the instance that this object is associated with.">
        <see cref="T:System.Reflection.MemberInfo" />，描述與這個物件相關的執行個體。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary vsli:raw="Represents a single relationship between an object and a member.">表示物件和成員之間的單一關聯性。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 類別的新執行個體。</summary>
      <param name="owner" vsli:raw="The object that owns &lt;paramref name=&quot;member&quot; /&gt;.">擁有 <paramref name="member" /> 的物件。</param>
      <param name="member" vsli:raw="The member which is to be related to &lt;paramref name=&quot;owner&quot; /&gt;.">要關聯至 <paramref name="owner" /> 的成員。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; or &lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="owner" /> 或 <paramref name="member" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary vsli:raw="Represents the empty member relationship. This field is read-only.">表示空的成員關聯性。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance is equal to the specified object representing a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance.">判斷兩個 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 執行個體是否相等。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">與目前的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 相比較的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance and is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 和目前的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">目前 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship.">取得值，指出這個關聯性是否等於 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 關聯性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個關聯性等於 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 關聯性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary vsli:raw="Gets the related member.">取得相關成員。</summary>
      <returns vsli:raw="The member that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">傳遞至 <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" /> 的成員。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equivalent.">測試兩個指定的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構是否相等。</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the equality operator.">
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構，位在等號比較運算子的左方。</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the equality operator.">
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構，位在等號比較運算子的右方。</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果兩個 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構相等，則這個運算子會傳回 <see langword="true" />，否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different.">測試兩個指定的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構是否不同。</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the inequality operator.">
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構，位在不等比較運算子的左方。</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the inequality operator.">
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構，位在不等比較運算子的右方。</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果兩個 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構不同，則這個運算子會傳回 <see langword="true" />，否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary vsli:raw="Gets the owning object.">取得主控物件。</summary>
      <returns vsli:raw="The owning object that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">傳遞至 <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" /> 的主控物件。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary vsli:raw="Provides the base class for relating one member to another.">提供將一個成員關聯至其他成員的基底類別。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationshipService&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a relationship to the given source relationship.">取得至指定來源關聯性的關聯性。</summary>
      <param name="source" vsli:raw="The source relationship.">來源關聯性。</param>
      <returns vsli:raw="A relationship to &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if no relationship exists.">至 <paramref name="source" /> 的關聯性，如果不存在關聯性，則為 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">建立來源和目標物件之間的關聯性。</summary>
      <param name="source" vsli:raw="The source relationship. This is the left-hand side of a relationship assignment.">來源關聯性。 這是關聯性指派的左側。</param>
      <returns vsli:raw="The current relationship associated with &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if there is no relationship.">與 <paramref name="source" /> 相關聯的目前關聯性，如果沒有關聯性，則為 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> 上所宣告的預設值是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is empty, or the relationship is not supported by the service.">
        <paramref name="source" /> 為空，或服務不支援關聯性。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">建立來源和目標物件之間的關聯性。</summary>
      <param name="sourceOwner" vsli:raw="The owner of a source relationship.">來源關聯性的擁有者。</param>
      <param name="sourceMember" vsli:raw="The member of a source relationship.">來源關聯性的成員。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure encapsulating the relationship between a source and target object, or &lt;see langword=&quot;null&quot; /&gt; if there is no relationship.">封裝來源和目標物件之間關聯性的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構，如果沒有關聯性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="sourceOwner" /> 或 <paramref name="sourceMember" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is empty, or the relationship is not supported by the service.">
        <paramref name="sourceOwner" /> 或 <paramref name="sourceMember" /> 為空，或服務不支援關聯性。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Creates a relationship between the source object and target relationship.">建立來源物件和目標關聯性之間的關聯性。</summary>
      <param name="source" vsli:raw="The source relationship.">來源關聯性。</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">要設定至 source 的關聯性。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The relationship is not supported by the service.">服務不支援關聯性。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a value indicating whether the given relationship is supported.">取得值，指出是否支援指定的關聯性。</summary>
      <param name="source" vsli:raw="The source relationship.">來源關聯性。</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">要設定至 source 的關聯性。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a relationship between the given two objects is supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果支援這兩個特定物件之間的關聯性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event.">提供 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The name to resolve.">要解析的名稱。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary vsli:raw="Gets the name of the object to resolve.">取得要解析的物件名稱。</summary>
      <returns vsli:raw="The name of the object to resolve.">要解析的物件名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary vsli:raw="Gets or sets the object that matches the name.">取得或設定符合名稱的物件。</summary>
      <returns vsli:raw="The object that the name is associated with.">名稱與其相關聯的物件。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event of a serialization manager.">表示處理序列化 (Serialization) 管理員的 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件的來源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary vsli:raw="Indicates the base serializer to use for a root designer object. This class cannot be inherited.">指示用於根 (Root) 設計工具物件的基底序列化工具。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">使用指定的屬性，初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 類別的新執行個體。</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">序列化工具資料型別的完整名稱。</param>
      <param name="baseSerializerTypeName" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers as they all have different base types.">序列化工具基底型別的名稱。 類別可包含多個序列化工具，因為它們具有不同的基底型別。</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果序列化工具支援文件的動態重新載入，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">使用指定的屬性，初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 類別的新執行個體。</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">序列化工具資料型別的完整名稱。</param>
      <param name="baseSerializerType" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers, as they all have different base types.">序列化工具基底型別的名稱。 類別可包含多個序列化工具，因為它們具有不同的基底型別。</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果序列化工具支援文件的動態重新載入，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">使用指定的屬性，初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 類別的新執行個體。</summary>
      <param name="serializerType" vsli:raw="The data type of the serializer.">序列化工具的資料型別。</param>
      <param name="baseSerializerType" vsli:raw="The base type of the serializer. A class can include multiple serializers as they all have different base types.">序列化工具的基底型別。 類別可包含多個序列化工具，因為它們具有不同的基底型別。</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果序列化工具支援文件的動態重新載入，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary vsli:raw="Gets a value indicating whether the root serializer supports reloading of the design document without first disposing the designer host.">取得值，表示根序列化工具是否支援設計文件的重新載入，而不需先配置設計工具主應用程式 (Designer Host)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the root serializer supports reloading; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果根序列化工具支援重新載入，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the base type of the serializer.">取得序列化工具基底型別的完整型別名稱。</summary>
      <returns vsli:raw="The name of the base type of the serializer.">序列化工具基底型別的名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the serializer.">取得序列化工具的完整型別名稱。</summary>
      <returns vsli:raw="The name of the type of the serializer.">序列化工具型別的名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary vsli:raw="Gets a unique ID for this attribute type.">取得此屬性型別的唯一 ID。</summary>
      <returns vsli:raw="An object containing a unique ID for this attribute type.">物件，包含此屬性型別的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary vsli:raw="Provides the base class for storing serialization data for the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt;.">提供基底類別，以儲存 <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> 的序列化資料。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary vsli:raw="Closes the serialization store.">關閉序列化存放區。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; and optionally releases the managed resources.">釋放 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary vsli:raw="Gets a collection of errors that occurred during serialization or deserialization.">取得序列化或還原序列化期間發生的錯誤集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that contains errors that occurred during serialization or deserialization.">
        <see cref="T:System.Collections.ICollection" />，包含序列化或還原序列化期間發生的錯誤。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary vsli:raw="Saves the store to the given stream.">將存放區儲存至指定資料流。</summary>
      <param name="stream" vsli:raw="The stream to which the store will be serialized.">存放區將序列化至的資料流。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">釋放 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 所使用的所有資源。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary vsli:raw="Provides a simple implementation of the &lt;see cref=&quot;T:System.ComponentModel.Design.IServiceContainer&quot; /&gt; interface. This class cannot be inherited.">提供 <see cref="T:System.ComponentModel.Design.IServiceContainer" /> 介面的簡單實作。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class using the specified parent service provider.">使用指定的父服務提供者，初始化 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 類別的新執行個體。</summary>
      <param name="parentProvider" vsli:raw="A parent service provider.">父服務提供者。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">加入特定服務至服務容器。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">要加入的服務型別。</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">可以建立服務的回呼物件。 這允許將服務宣告為可用的，但是會將物件的建立延遲至要求服務的時候。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> 或 <paramref name="callback" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">此容器內已含有 <paramref name="serviceType" /> 類型的服務。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">加入特定服務至服務容器。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">要加入的服務型別。</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">可以建立服務的回呼物件。 這允許將服務宣告為可用的，但是會將物件的建立延遲至要求服務的時候。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個服務應該加入至任何父服務容器，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> 或 <paramref name="callback" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">此容器內已含有 <paramref name="serviceType" /> 類型的服務。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">加入特定服務至服務容器。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">要加入的服務型別。</param>
      <param name="serviceInstance" vsli:raw="An instance of the service to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">要加入的服務執行個體。 這個物件必須實作或繼承自 <paramref name="serviceType" /> 參數所指示的型別。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> 或 <paramref name="serviceInstance" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">此容器內已含有 <paramref name="serviceType" /> 類型的服務。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">加入特定服務至服務容器。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">要加入的服務型別。</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">要加入的服務型別執行個體。 這個物件必須實作或繼承自 <paramref name="serviceType" /> 參數所指示的型別。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個服務應該加入至任何父服務容器，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> 或 <paramref name="serviceInstance" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">此容器內已含有 <paramref name="serviceType" /> 類型的服務。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary vsli:raw="Gets the default services implemented directly by &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt;.">取得 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 直接實作的預設服務。</summary>
      <returns vsli:raw="The default services.">預設服務。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary vsli:raw="Disposes this service container.">處置這個服務容器。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Disposes this service container.">處置這個服務容器。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; is in the process of being disposed of; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果正在處置 <see cref="T:System.ComponentModel.Design.ServiceContainer" />，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service.">取得所要求的服務。</summary>
      <param name="serviceType" vsli:raw="The type of service to retrieve.">要擷取的服務類型。</param>
      <returns vsli:raw="An instance of the service if it could be found, or &lt;see langword=&quot;null&quot; /&gt; if it could not be found.">如果可找到，則為服務的執行個體，如果無法找到，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">從服務容器中移除特定服務型別。</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">要移除的服務型別。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container.">從服務容器中移除特定服務型別。</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">要移除的服務型別。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be removed from any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個服務應該從任何父服務容器移除，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary vsli:raw="Provides a callback mechanism that can create an instance of a service on demand.">提供回呼 (Callback) 機制，這個回呼機制可以視需要建立服務的執行個體。</summary>
      <param name="container" vsli:raw="The service container that requested the creation of the service.">要求服務建立的服務容器 (Container)。</param>
      <param name="serviceType" vsli:raw="The type of service to create.">要建立的服務類型。</param>
      <returns vsli:raw="The service specified by &lt;paramref name=&quot;serviceType&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the service could not be created.">
        <paramref name="serviceType" /> 所指定的服務，或 <see langword="null" /> (如果無法建立服務)。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary vsli:raw="Defines identifiers for the standard set of commands that are available to most applications.">為大部分應用程式可用的標準命令集合定義識別項。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardCommands&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.StandardCommands" /> 類別的新執行個體。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignBottom command. This field is read-only.">取得 AlignBottom 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignHorizontalCenters command. This field is read-only.">取得 AlignHorizontalCenters 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignLeft command. This field is read-only.">取得 AlignLeft 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignRight command. This field is read-only.">取得 AlignRight 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignToGrid command. This field is read-only.">取得 AlignToGrid 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignTop command. This field is read-only.">取得 AlignTop 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignVerticalCenters command. This field is read-only.">取得 AlignVerticalCenters 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeBottom command. This field is read-only.">取得 ArrangeBottom 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeIcons command. This field is read-only.">取得 ArrangeIcons 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeRight command. This field is read-only.">取得 ArrangeRight 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringForward command. This field is read-only.">取得 BringForward 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringToFront command. This field is read-only.">取得 BringToFront 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterHorizontally command. This field is read-only.">取得 CenterHorizontally 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterVertically command. This field is read-only.">取得 CenterVertically 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Copy command. This field is read-only.">取得 Copy 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Cut command. This field is read-only.">取得 Cut 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Delete command. This field is read-only.">取得 Delete 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Document Outline command. This field is read-only.">取得文件大綱命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the F1Help command. This field is read-only.">取得 F1Help 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Group command. This field is read-only.">取得 Group 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceConcatenate command. This field is read-only.">取得 HorizSpaceConcatenate 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceDecrease command. This field is read-only.">取得 HorizSpaceDecrease 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceIncrease command. This field is read-only.">取得 HorizSpaceIncrease 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceMakeEqual command. This field is read-only.">取得 HorizSpaceMakeEqual 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LineupIcons command. This field is read-only.">取得 LineupIcons 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LockControls command. This field is read-only.">取得 LockControls 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelRedo command. This field is read-only.">取得 MultiLevelRedo 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelUndo command. This field is read-only.">取得 MultiLevelUndo 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Paste command. This field is read-only.">取得 Paste 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Properties command. This field is read-only.">取得 Properties 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the PropertiesWindow command. This field is read-only.">取得 PropertiesWindow 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Redo command. This field is read-only.">取得 Redo 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Replace command. This field is read-only.">取得 Replace 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SelectAll command. This field is read-only.">取得 SelectAll 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendBackward command. This field is read-only.">取得 SendBackward 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendToBack command. This field is read-only.">取得 SendToBack 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowGrid command. This field is read-only.">取得 ShowGrid 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowLargeIcons command. This field is read-only.">取得 ShowLargeIcons 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControl command. This field is read-only.">取得 SizeToControl 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlHeight command. This field is read-only.">取得 SizeToControlHeight 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlWidth command. This field is read-only.">取得 SizeToControlWidth 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToFit command. This field is read-only.">取得 SizeToFit 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToGrid command. This field is read-only.">取得 SizeToGrid 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SnapToGrid command. This field is read-only.">取得 SnapToGrid 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the TabOrder command. This field is read-only.">取得 TabOrder 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Undo command. This field is read-only.">取得 Undo 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Ungroup command. This field is read-only.">取得 Ungroup 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary vsli:raw="Gets the first of a set of verbs. This field is read-only.">取得第一個動詞命令集合。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary vsli:raw="Gets the last of a set of verbs. This field is read-only.">取得最後一個動詞命令集合。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceConcatenate command. This field is read-only.">取得 VertSpaceConcatenate 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceDecrease command. This field is read-only.">取得 VertSpaceDecrease 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceIncrease command. This field is read-only.">取得 VertSpaceIncrease 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceMakeEqual command. This field is read-only.">取得 VertSpaceMakeEqual 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewCode command. This field is read-only.">取得 ViewCode 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewGrid command. This field is read-only.">取得 ViewGrid 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary vsli:raw="Defines GUID identifiers that correspond to the standard set of tool windows that are available in the design environment.">定義 GUID 識別項，這個識別項會對應至可以在設計環境中取得的標準工具視窗集合。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardToolWindows&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.StandardToolWindows" /> 類別的新執行個體。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary vsli:raw="Gets the GUID for the object browser. This field is read-only.">取得物件瀏覽器的 GUID。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary vsli:raw="Gets the GUID for the output window. This field is read-only.">取得輸出視窗的 GUID。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary vsli:raw="Gets the GUID for the solution explorer. This field is read-only.">取得方案總管的 GUID。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary vsli:raw="Gets the GUID for the Properties window. This field is read-only.">取得屬性視窗的 GUID。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary vsli:raw="Gets the GUID for the related links frame. This field is read-only.">取得相關連結框架 (Frame) 的 GUID。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary vsli:raw="Gets the GUID for the server explorer. This field is read-only.">取得伺服器總管的 GUID。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary vsli:raw="Gets the GUID for the task list. This field is read-only.">取得工作清單的 GUID。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary vsli:raw="Gets the GUID for the Toolbox. This field is read-only.">取得工具箱的 GUID。 此欄位為唯讀。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary vsli:raw="Provides a type description provider for a specified type.">為指定的型別，提供型別描述提供者。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.TypeDescriptionProviderService&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary vsli:raw="Gets a type description provider for the specified object.">取得指定之物件的型別描述提供者。</summary>
      <param name="instance" vsli:raw="The object to get a type description provider for.">要為其取得型別描述提供者的物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;instance&quot; /&gt;.">與 <paramref name="instance" /> 對應的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary vsli:raw="Gets a type description provider for the specified type.">取得指定之型別的型別描述提供者。</summary>
      <param name="type" vsli:raw="The type to get a type description provider for.">要為其取得型別描述提供者的型別。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;type&quot; /&gt;.">與 <paramref name="type" /> 對應的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary vsli:raw="Defines identifiers for a set of technologies that designer hosts support.">定義設計工具主應用程式 (Designer Host) 所支援的技術集合的識別項。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary vsli:raw="Specifies the default view technology support.&#xA;        &#xA;The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host. Hosting environments such as Visual Studio provide a way to plug in new view technology adapters. The default view object for the Windows Forms designer is a &lt;see cref=&quot;T:System.Windows.Forms.Control&quot; /&gt; instance.">指定預設檢視技術的支援。
根目錄設計工具可以傳回任何型別的物件，但該物件必須與主機技術的配接器相容。 Visual Studio 這類裝載環境可用來插入新的檢視技術配接器。 Windows Form 設計工具的預設檢視物件是 <see cref="T:System.Windows.Forms.Control" /> 執行個體。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary vsli:raw="Represents a mode in which the view object is passed directly to the development environment.&#xA;        &#xA;The view object must implement any interfaces the development environment requires. The Visual Studio development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through the Visual Studio VSI (Visual Studio Integration) program. The Visual Studio development environment provides support for this view technology. Support for this view technology is not necessarily available in all development environments.">表示直接將檢視物件傳遞至開發環境的模式。
檢視物件必須實作任何開發環境所需的介面。 Visual Studio 開發環境支援的檢視物件可以是 ActiveX 控制項、使用中文件，或是實作透過 Visual Studio VSI (Visual Studio 整合) 程式提供之 IVsWindowPane 介面的物件。 Visual Studio 開發環境提供此檢視技術的支援。 並非所有開發環境都支援此檢視技術。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary vsli:raw="Represents a mode in which a Windows Forms control object provides the display for the root designer. The designer host fills the development environment document window with the Windows Forms control.">表示 Windows Form 控制項物件為主要設計工具提供顯示方式的模式。 設計工具主應用程式使用 Windows Form 控制項來填入開發環境文件視窗。</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>指定用來實作元件之設計階段服務的類別。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>使用提供設計階段服務的型別名稱來初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 類別的新執行個體。</summary>
      <param name="designerTypeName">針對這個屬性所繫結至之元件提供設計階段服務的型別，其完整名稱的串連，以及這個型別所在的組件名稱。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>使用設計工具型別和設計工具的基底類別 (Base Class) 來初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 類別的新執行個體。</summary>
      <param name="designerTypeName">針對這個屬性所繫結至之元件提供設計階段服務的型別，其完整名稱的串連，以及這個型別所在的組件名稱。</param>
      <param name="designerBaseTypeName">與設計工具類別相關的基底類別的完整名稱。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>使用設計工具類別的名稱和設計工具的基底類別來初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 類別的新執行個體。</summary>
      <param name="designerTypeName">針對這個屬性所繫結至之元件提供設計階段服務的型別，其完整名稱的串連，以及這個型別所在的組件名稱。</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" />，表示與 <paramref name="designerTypeName" /> 相關的基底類別。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>使用提供設計階段服務的型別來初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 類別的新執行個體。</summary>
      <param name="designerType">
        <see cref="T:System.Type" />，表示為與這個屬性繫結的元件提供設計階段服務的類別。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>使用設計工具的型別和設計工具基底類別來初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 類別的新執行個體。</summary>
      <param name="designerType">
        <see cref="T:System.Type" />，表示為與這個屬性繫結的元件提供設計階段服務的類別。</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" />，表示與 <paramref name="designerType" /> 相關的基底類別。</param>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>取得這個設計工具的基底型別名稱。</summary>
      <returns>這個設計工具的基底型別名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>取得與這個設計工具屬性相關的設計工具型別名稱。</summary>
      <returns>與這個設計工具屬性相關的設計工具型別名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.Equals(System.Object)">
      <summary>傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.DesignerAttribute" />。</summary>
      <param name="obj">測試其數值相等的物件。</param>
      <returns>如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.TypeId">
      <summary>取得此屬性型別的唯一 ID。</summary>
      <returns>此屬性型別的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary vsli:raw="&lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; marks a component's visibility. If &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Yes&quot; /&gt; is present, a visual designer can show this component on a designer.">
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> 標記元件的可視性。 如果有 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" />，視覺化設計工具 (Visual Designer) 可以在設計工具上顯示這個元件。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; set to the default value of &lt;see langword=&quot;false&quot; /&gt;.">建立新的 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" />，預設值為 <see langword="false" />。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; with the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property set to the given value in &lt;paramref name=&quot;visible&quot; /&gt;.">建立新的 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" />，並將其 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> 屬性設定為 <paramref name="visible" /> 中的指定值。</summary>
      <param name="visible" vsli:raw="The value that the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property will be set against.">設定 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> 屬性時要依據的值。</param>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary vsli:raw="The default visibility which is &lt;see langword=&quot;Yes&quot; /&gt;.">預設可視性，即 <see langword="Yes" />。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj" vsli:raw="An Object to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">要與這個執行個體或 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />) 進行比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value.">取得值，表示此執行個體是否等於 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個執行個體等於 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary vsli:raw="Marks a component as not visible in a visual designer.">將元件標記為在視覺化設計工具中不可見。</summary>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary vsli:raw="Gets or sets whether the component should be shown at design time.">取得或設定元件是否應該在設計階段顯示。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this component should be shown at design time, or &lt;see langword=&quot;false&quot; /&gt; if it shouldn't.">如果元件應該在設計階段顯示，則為 <see langword="true" />；如果不應該，則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary vsli:raw="Marks a component as visible in a visual designer.">將元件標記為在視覺化設計工具中可見。</summary>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary vsli:raw="Provides a type converter to convert double-precision, floating point number objects to and from various other representations.">提供型別轉換子 (Type Converter) 將雙精度浮點數和浮點數物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DoubleConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.DoubleConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>指定用來變更屬性的編輯器。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>使用預設的編輯器 (也就是沒有編輯器)，初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>使用編輯器的型別名稱和基底型別名稱，初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 類別的新執行個體。</summary>
      <param name="typeName">編輯器的完整型別名稱。</param>
      <param name="baseTypeName">基底類別或介面的完整型別名稱，用來做為編輯器的查閱索引鍵。 這個類別必須是或衍生自 <see cref="T:System.Drawing.Design.UITypeEditor" />。</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>使用型別名稱和基底型別，初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 類別的新執行個體。</summary>
      <param name="typeName">編輯器的完整型別名稱。</param>
      <param name="baseType">基底類別或介面的 <see cref="T:System.Type" />，用來做為編輯器的查閱索引鍵。 這個類別必須是或衍生自 <see cref="T:System.Drawing.Design.UITypeEditor" />。</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>使用型別和基底型別，初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示編輯器的型別。</param>
      <param name="baseType">基底類別或介面的 <see cref="T:System.Type" />，用來做為編輯器的查閱索引鍵。 這個類別必須是或衍生自 <see cref="T:System.Drawing.Design.UITypeEditor" />。</param>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>取得基底類別或介面的名稱，做為這個編輯器的查閱索引鍵。</summary>
      <returns>基底類別或介面的名稱，做為這個編輯器的查閱索引鍵。</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>取得 <see cref="P:System.Type.AssemblyQualifiedName" /> 格式的編輯器類別的名稱。</summary>
      <returns>
        <see cref="P:System.Type.AssemblyQualifiedName" /> 格式的編輯器類別的名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.Equals(System.Object)">
      <summary>傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.EditorAttribute" />。</summary>
      <param name="obj">測試其數值相等的物件。</param>
      <returns>如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.TypeId">
      <summary>取得此屬性型別的唯一 ID。</summary>
      <returns>此屬性型別的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Enum&quot; /&gt; objects to and from various other representations.">提供型別轉換子 (Type Converter) 將 <see cref="T:System.Enum" /> 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EnumConverter&quot; /&gt; class for the given type.">初始化指定型別之 <see cref="T:System.ComponentModel.EnumConverter" /> 類別的新執行個體。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of enumeration to associate with this enumeration converter.">
        <see cref="T:System.Type" />，表示要與這個列舉型別轉換子產生關聯的列舉型別。</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to an enumeration object using the specified context.">取得值，指出這個轉換子是否可以使用指定的內容，將指定來源型別中的物件轉換成列舉型別物件。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">
        <see cref="T:System.Type" />，表示要轉換為何種目標型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; that can be used to sort the values of the enumeration.">取得可以用於排序列舉型別之值的 <see cref="T:System.Collections.IComparer" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; for sorting the enumeration values.">
        <see cref="T:System.Collections.IComparer" /> 用於排序列舉型別的值。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to an enumeration object.">將指定的值物件轉換為列舉型別物件。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">選擇性 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供，則會假設使用目前的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> 對於目標型別並不是有效的值。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">將指定的數值物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">選擇性 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供，則會假設使用目前的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">值將會轉換成這個 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the enumeration.">
        <paramref name="value" /> 不是列舉型別的有效值。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary vsli:raw="Specifies the type of the enumerator this converter is associated with.">指定這個轉換子關聯的列舉值型別。</summary>
      <returns vsli:raw="The type of the enumerator this converter is associated with.">這個轉換子關聯的列舉值型別。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">針對這個驗證程式設計目標的資料型別，取得由該資料型別的標準值所組成的集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">保留標準有效值集合的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，或者如果資料類型不支援標準值集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list using the specified context.">取得值，表示從 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 所傳回的標準值清單是否為獨佔清單。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">如果從 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 傳回的 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 是可能值的獨佔清單，則為 <see langword="true" />，如果其他的值為可能，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">取得值，指出這個物件是否支援可以使用指定內容從清單選取的標準值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">因為應該呼叫 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 來尋找物件支援的通用值集合，所以會是 <see langword="true" />。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Gets a value indicating whether the given object value is valid for this type.">取得值，表示指定物件值對這個型別是否有效。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test.">要測試的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定值對這個物件有效，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary vsli:raw="Gets or sets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">取得或設定 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，指定列舉型別的可能值。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，指定列舉型別的可能值。</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary vsli:raw="Provides information about an event.">提供事件的相關資訊。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">使用指定 <see cref="T:System.ComponentModel.EventDescriptor" /> 中的名稱和屬性，初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 類別的新執行個體。</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the event and its attributes.">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，包含事件的名稱和其屬性。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">使用指定 <see cref="T:System.ComponentModel.EventDescriptor" /> 中的名稱，以及 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.ComponentModel.MemberDescriptor" /> 陣列中的屬性，初始化 <see cref="T:System.Attribute" /> 類別的新執行個體。</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，具有成員的名稱和屬性。</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes you want to add to this event description.">
        <see cref="T:System.Attribute" /> 陣列，具有要加入至這個事件描述的屬性。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the specified name and attribute array.">使用指定的名稱和屬性陣列，初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the event.">事件的名稱。</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the event attributes.">
        <see cref="T:System.Attribute" /> 型別的陣列，包含事件屬性。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, binds the event to the component.">在衍生類別中覆寫時，將事件繫結至元件。</summary>
      <param name="component" vsli:raw="A component that provides events to the delegate.">元件，將事件提供給委派。</param>
      <param name="value" vsli:raw="A delegate that represents the method that handles the event.">委派，表示處理事件的方法。</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of component this event is bound to.">在衍生類別中覆寫時，取得這個事件所繫結的元件型別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component the event is bound to.">
        <see cref="T:System.Type" />，表示事件所繫結的元件型別。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary vsli:raw="When overridden in a derived class, gets the type of delegate for the event.">在衍生類別中覆寫時，取得事件的委派型別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of delegate for the event.">
        <see cref="T:System.Type" />，表示事件的委派型別。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the event delegate is a multicast delegate.">在衍生類別中覆寫時，取得指示事件委派是否為多點傳送委派的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event delegate is multicast; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果事件委派是多點傳送，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, unbinds the delegate from the component so that the delegate will no longer receive events from the component.">在衍生類別中覆寫時，將委派與元件解除繫結，以便委派不再接收來自元件的事件。</summary>
      <param name="component" vsli:raw="The component that the delegate is bound to.">委派所繫結的元件。</param>
      <param name="value" vsli:raw="The delegate to unbind from the component.">要與元件解除繫結的委派。</param>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">表示 <see cref="T:System.ComponentModel.EventDescriptor" /> 物件的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">使用 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 物件的指定陣列，初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 類別的新執行個體。</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 型別的陣列，提供這個集合的事件。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects. The collection is optionally read-only.">使用 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 物件的指定陣列，初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 類別的新執行個體。 可選擇將集合設為唯讀。</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 型別的陣列，提供這個集合的事件。</param>
      <param name="readOnly" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify a read-only collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 指定這是唯讀集合，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Adds an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the end of the collection.">將 <see cref="T:System.ComponentModel.EventDescriptor" /> 加入集合的結尾。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to add to the collection.">
        <see cref="T:System.ComponentModel.EventDescriptor" />，要加入至集合中。</param>
      <returns vsli:raw="The position of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 在集合中的位置。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary vsli:raw="Removes all objects from the collection.">從集合中移除所有物件。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">傳回值，表示集合是否含有指定的 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">要在集合中尋找的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the &lt;paramref name=&quot;value&quot; /&gt; parameter given; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合含有指定的 <paramref name="value" /> 參數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of event descriptors in the collection.">取得這個集合中事件描述項的數目。</summary>
      <returns vsli:raw="The number of event descriptors in the collection.">這個集合中事件描述項的數目。</returns>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection to use, rather than creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定要使用的空集合，而非建立沒有項目的新集合。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Gets the description of the event with the specified name in the collection.">使用集合中之指定名稱取得事件的描述。</summary>
      <param name="name" vsli:raw="The name of the event to get from the collection.">要從集合中取得的事件名稱。</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the event; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果您要忽略事件的大小寫，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">具有指定名稱的 <see cref="T:System.ComponentModel.EventDescriptor" /> 或 <see langword="null" /> (如果事件不存在)。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">取得這個 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的列舉值。</summary>
      <returns vsli:raw="An enumerator that implements &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">列舉值，實作 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">傳回指定 <see cref="T:System.ComponentModel.EventDescriptor" /> 的索引。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">要在集合中尋找的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">集合中指定 <see cref="T:System.ComponentModel.EventDescriptor" /> 的索引。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Inserts an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the collection at a specified index.">將 <see cref="T:System.ComponentModel.EventDescriptor" /> 插入在指定索引處的集合。</summary>
      <param name="index" vsli:raw="The index within the collection in which to insert the &lt;paramref name=&quot;value&quot; /&gt; parameter.">索引，在要插入 <paramref name="value" /> 參數的集合中。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to insert into the collection.">
        <see cref="T:System.ComponentModel.EventDescriptor" />，要插入集合中。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">使用指定的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，排序這個 <see cref="T:System.Collections.IComparer" /> 的成員。</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">比較子，用於將這個集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 物件排序。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">排序這個 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成員。 首先會套用指定的順序，其後是這個集合的預設排序，通常是依字母順序。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">字串的陣列，描述要將這個集合中 <see cref="T:System.ComponentModel.EventDescriptor" /> 物件排序的順序。</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the event with the specified index number.">取得或設定具有指定索引編號的事件。</summary>
      <param name="index" vsli:raw="The zero-based index number of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">要取得或設定的 <see cref="T:System.ComponentModel.EventDescriptor" /> 的以零起始的索引。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified index number.">具有指定索引編號的 <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)&quot; /&gt;.">
        <paramref name="index" /> 不是 <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" /> 的有效索引。</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the event with the specified name.">取得或設定具有指定名稱的事件。</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">要取得或設定的 <see cref="T:System.ComponentModel.EventDescriptor" /> 的名稱。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">具有指定名稱的 <see cref="T:System.ComponentModel.EventDescriptor" /> 或 <see langword="null" /> (如果事件不存在)。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; from the collection.">從集合移除指定的 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove from the collection.">要從集合中移除的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; at the specified index from the collection.">從集合中移除指定索引處的 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove.">要移除的 <see cref="T:System.ComponentModel.EventDescriptor" /> 的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the default sort for this collection, which is usually alphabetical.">使用這個集合的預設排序，通常是依字母順序，排序這個 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成員。</summary>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">使用指定的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，排序這個 <see cref="T:System.Collections.IComparer" /> 的成員。</summary>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">
        <see cref="T:System.Collections.IComparer" />，要用於排序這個集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 物件。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order.">提供指定的排序順序，排序這個 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成員。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">字串的陣列，描述要將這個集合中 <see cref="T:System.ComponentModel.EventDescriptor" /> 物件排序的順序。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order and an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">提供指定的排序順序和 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，排序這個 <see cref="T:System.Collections.IComparer" /> 的成員。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">字串的陣列，描述要將這個集合中 <see cref="T:System.ComponentModel.EventDescriptor" /> 物件排序的順序。</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">
        <see cref="T:System.Collections.IComparer" />，要用於排序這個集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 物件。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">從特定的 <see cref="T:System.Array" /> 索引開始，將集合的項目複製至 <see cref="T:System.Array" />。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">一維 <see cref="T:System.Array" />，是從集合複製的元素之目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">取得集合所包含的項目數目。</summary>
      <returns vsli:raw="The number of elements contained in the collection.">集合中所包含的項目數目。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized.">取得值，表示對集合的存取是否為同步的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果對集合的存取是同步處理的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">取得物件，這個物件可以用來對集合進行同步存取。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Object，可用來對集合同步存取。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">將項目加入至集合。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the collection.">要加入至集合的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="The position into which the new element was inserted.">插入新項目的位置。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all the items from the collection.">從集合中移除所有項目。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">判斷此集合是否包含特定的值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">要在集合中尋找的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在集合中找到 <see cref="T:System.Object" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">決定集合中指定項目的索引。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">要在集合中尋找的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the collection at the specified index.">將項目插入至集合中的指定索引處。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">要插入至集合的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">取得值，這個值表示集合的大小是否是固定的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合具有固定大小，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">取得值，表示集合是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合是唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">在指定的索引位置上取得或設定項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">要取得或設定之以零為起始的項目索引。</param>
      <returns vsli:raw="The element at the specified index.">在指定索引上的項目。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">
        <paramref name="index" /> 小於 0。
-或-
<paramref name="index" /> 等於或大於 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">從集合中移除第一個出現的特定物件。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">要從集合中移除的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">移除在指定索引處的項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary vsli:raw="Provides a type converter to convert expandable objects to and from various other representations.">提供型別轉換子將可擴展的物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExpandableObjectConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ExpandableObjectConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of object specified by the value parameter.">取得由值參數所指定的物件型別的屬性集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of object to get the properties for.">
        <see cref="T:System.Object" />，表示要其取得其屬性的物件型別。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">
        <see cref="T:System.Attribute" /> 型別的陣列，可當做篩選條件使用。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有為這個元件所公開的屬性；如果沒有屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">使用指定內容取得值，表示這個物件是否使用支援屬性。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />，因為應該呼叫 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 尋找這個物件的屬性。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary vsli:raw="Specifies a property that is offered by an extender provider. This class cannot be inherited.">指定擴充性提供者提供的屬性。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExtenderProvidedPropertyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">要與這個執行個體進行比較的 <see cref="T:System.Object" />，或 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary vsli:raw="Gets the property that is being provided.">取得提供的屬性。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; encapsulating the property that is being provided.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，封裝提供的屬性。</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary vsli:raw="Provides an indication whether the value of this instance is the default value for the derived class.">提供這個執行個體的值是否為衍生類別預設值的指示。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個執行個體為預設屬性的類別，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary vsli:raw="Gets the extender provider that is providing the property.">取得提供屬性的擴充性提供者。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that is providing the property.">提供屬性的 <see cref="T:System.ComponentModel.IExtenderProvider" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary vsli:raw="Gets the type of object that can receive the property.">取得可以接收屬性之物件的型別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; describing the type of object that can receive the property.">
        <see cref="T:System.Type" />，描述可以接收屬性之物件的型別。</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Guid&quot; /&gt; objects to and from various other representations.">提供型別轉換子 (Type Converter) 將 <see cref="T:System.Guid" /> 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.GuidConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.GuidConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a GUID object using the context.">取得值，表示此轉換子是否可以使用內容將指定來源型別中的物件轉換成 GUID 物件。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">
        <see cref="T:System.Type" />，表示要轉換為何種目標型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a GUID object.">將指定的物件轉換為 GUID 物件。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">選擇性 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供，則會假設使用目前的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">將指定的物件轉換為另一個型別。</summary>
      <param name="context" vsli:raw="A formatter context.">格式子 (Formatter) 內容。</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" /> 所要轉換成的文化特性 (Culture)。</param>
      <param name="value" vsli:raw="The object to convert.">要轉換的物件。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">要將物件轉換成的類型。</param>
      <returns vsli:raw="The converted object.">轉換的物件。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary vsli:raw="Provides data for events that can be handled completely in an event handler.">提供事件處理常式中可以完全處理之事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with a default &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property value of &lt;see langword=&quot;false&quot; /&gt;.">使用預設 <see cref="T:System.ComponentModel.HandledEventArgs" /> 屬性值 <see langword="false" />，初始化 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with the specified default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">使用 <see cref="T:System.ComponentModel.HandledEventArgs" /> 屬性的指定預設值，初始化 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 類別的新執行個體。</summary>
      <param name="defaultHandledValue" vsli:raw="The default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">
        <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 屬性的預設值。</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary vsli:raw="Gets or sets a value that indicates whether the event handler has completely handled the event or whether the system should continue its own processing.">取得或設定值，指出事件處理常式已經完全處理事件或系統應繼續自己的處理。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been completely handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果事件已完全處理，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary vsli:raw="Represents a method that can handle events which may or may not require further processing after the event handler has returned.">表示方法，在事件處理常式傳回後，這個方法可以處理不一定需要進一步處理的事件。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件的來源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.HandledEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary vsli:raw="Provides the features required to support both complex and simple scenarios when binding to a data source.">提供繫結至資料來源時支援複雜和簡單案例所需的功能。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the indexes used for searching.">將 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 加入用來搜尋的索引中。</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the indexes used for searching.">要加入至用來搜尋之索引的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary vsli:raw="Adds a new item to the list.">將新的項目加入至清單中。</summary>
      <returns vsli:raw="The item added to the list.">加入此清單的項目。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowNew&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> 為 <see langword="false" />。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary vsli:raw="Gets whether you can update items in the list.">取得值，指出您是否可以更新清單中的項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can update the items in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果您可以更新清單中的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary vsli:raw="Gets whether you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">取得值，指出您是否可以使用 <see cref="M:System.ComponentModel.IBindingList.AddNew" /> 將項目加入清單。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果您可以使用 <see cref="M:System.ComponentModel.IBindingList.AddNew" /> 將項目加入清單，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary vsli:raw="Gets whether you can remove items from the list, using &lt;see cref=&quot;M:System.Collections.IList.Remove(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.Collections.IList.RemoveAt(System.Int32)&quot; /&gt;.">取得值，指出您是否可以使用 <see cref="M:System.Collections.IList.Remove(System.Object)" /> 或 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" /> 從清單移除項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果您可以從清單移除項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;.">根據 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" /> 來排序清單。</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">要做為排序依據的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">其中一個 <see cref="T:System.ComponentModel.ListSortDirection" /> 值。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Returns the index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">傳回具有指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的列索引。</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">要在其上搜尋的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;property&quot; /&gt; parameter to search for.">要搜尋的 <paramref name="property" /> 參數值。</param>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">具有指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的列索引。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> 為 <see langword="false" />。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary vsli:raw="Gets whether the items in the list are sorted.">取得值，指出清單中項目是否已排序。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已呼叫 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 而尚未呼叫 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 為 <see langword="false" />。</exception>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary vsli:raw="Occurs when the list changes or an item in the list changes.">發生在清單變更或清單項目變更時。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the indexes used for searching.">從用來搜尋的索引中移除 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">要從用來搜尋的索引中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary vsli:raw="Removes any sort applied using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">移除任何使用 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 的套用排序。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 為 <see langword="false" />。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary vsli:raw="Gets the direction of the sort.">取得排序的方向。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">其中一個 <see cref="T:System.ComponentModel.ListSortDirection" /> 值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 為 <see langword="false" />。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">取得已經用來排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">已經用來排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 為 <see langword="false" />。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary vsli:raw="Gets whether a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or an item in the list changes.">取得值，指出當清單變更或清單項目變更時是否引發 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果清單變更或項目變更時引發 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary vsli:raw="Gets whether the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method.">取得值，指出清單是否支援使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法進行搜尋。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果清單支援使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法的搜尋，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary vsli:raw="Gets whether the list supports sorting.">取得值，指出清單是否支援排序。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果清單支援搜尋，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary vsli:raw="Extends the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; interface by providing advanced sorting and filtering capabilities.">提供進階排序和篩選功能，以擴充 <see cref="T:System.ComponentModel.IBindingList" /> 介面。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary vsli:raw="Sorts the data source based on the given &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">根據指定的 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 來排序資料來源。</summary>
      <param name="sorts" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; containing the sorts to apply to the data source.">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />，包含要套用至資料來源的排序。</param>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary vsli:raw="Gets or sets the filter to be used to exclude items from the collection of items returned by the data source.">取得或設定要用來從資料來源所傳回項目集合中排除項目的篩選條件。</summary>
      <returns vsli:raw="The string used to filter items out in the item collection returned by the data source.">要用來在資料來源傳回之項目集合中篩選掉項目的字串。</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary vsli:raw="Removes the current filter applied to the data source.">移除目前套用至資料來源的篩選條件。</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary vsli:raw="Gets the collection of sort descriptions currently applied to the data source.">取得目前套用到資料來源中的排序描述集合。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; currently applied to the data source.">目前套用到資料來源中的 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary vsli:raw="Gets a value indicating whether the data source supports advanced sorting.">取得值，指出資料來源是否支援進階排序。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports advanced sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果資料來源支援進階排序，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary vsli:raw="Gets a value indicating whether the data source supports filtering.">取得值，指出資料來源是否支援篩選。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports filtering; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果資料來源支援篩選，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary vsli:raw="Adds transactional capability when adding a new item to a collection.">將新項目加入至集合時，加入異動功能。</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item from the collection.">從集合中捨棄暫止的新項目。</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">先前已加入至集合之項目的索引。</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">將暫止的新項目認可到集合中。</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">先前已加入至集合之項目的索引。</param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary vsli:raw="Provides a top-level mapping layer between a COM object and a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">在 COM 物件和 <see cref="T:System.ComponentModel.TypeDescriptor" /> 之間提供最上層對應圖層。</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary vsli:raw="Gets the attributes for the specified component.">取得指定之元件的屬性。</summary>
      <param name="component" vsli:raw="The component to get attributes for.">要為其取得屬性的元件。</param>
      <returns vsli:raw="A collection of attributes for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> 之屬性的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary vsli:raw="Gets the class name for the specified component.">取得指定之元件的類別名稱。</summary>
      <param name="component" vsli:raw="The component to get the class name for.">要為其取得類別名稱的元件。</param>
      <returns vsli:raw="The name of the class that corresponds with &lt;paramref name=&quot;component&quot; /&gt;.">與 <paramref name="component" /> 對應之類別的名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary vsli:raw="Gets the type converter for the specified component.">取得指定之元件的型別轉換子。</summary>
      <param name="component" vsli:raw="The component to get the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for.">要為其取得 <see cref="T:System.ComponentModel.TypeConverter" /> 的元件。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> 的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Gets the default event for the specified component.">取得指定之元件的預設事件。</summary>
      <param name="component" vsli:raw="The component to get the default event for.">要為其取得預設事件的元件。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default event.">
        <see cref="T:System.ComponentModel.EventDescriptor" />，表示 <paramref name="component" /> 的預設值。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Gets the default property for the specified component.">取得指定之元件的預設屬性。</summary>
      <param name="component" vsli:raw="The component to get the default property for.">要取得預設屬性的元件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default property.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，表示 <paramref name="component" /> 的預設屬性。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets the editor for the specified component.">取得指定之元件的編輯器。</summary>
      <param name="component" vsli:raw="The component to get the editor for.">要為其取得編輯器的元件。</param>
      <param name="baseEditorType" vsli:raw="The base type of the editor for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> 之編輯器的基底型別。</param>
      <returns vsli:raw="The editor for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> 的編輯器。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary vsli:raw="Gets the events for the specified component.">取得指定之元件的事件。</summary>
      <param name="component" vsli:raw="The component to get events for.">要為其取得事件的元件。</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> 之事件描述元的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the events with the specified attributes for the specified component.">取得指定之元件的事件和指定的屬性。</summary>
      <param name="component" vsli:raw="The component to get events for.">要為其取得事件的元件。</param>
      <param name="attributes" vsli:raw="The attributes used to filter events.">用來篩選事件的屬性。</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> 之事件描述元的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">取得指定元件的名稱。</summary>
      <param name="component" vsli:raw="The component to get the name of.">要取得其名稱的元件。</param>
      <returns vsli:raw="The name of &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> 的名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the properties with the specified attributes for the specified component.">取得指定之元件的屬性 (Property) 和指定的屬性 (Attribute)。</summary>
      <param name="component" vsli:raw="The component to get events for.">要為其取得事件的元件。</param>
      <param name="attributes" vsli:raw="The attributes used to filter properties.">用來篩選屬性 (Property) 的屬性 (Attribute)。</param>
      <returns vsli:raw="A collection of property descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> 之屬性描述元的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified dispatch identifier.">取得含有指定之分派識別項 (Dispatch Identifier) 的屬性值。</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">屬性所屬的物件。</param>
      <param name="dispid" vsli:raw="The dispatch identifier.">分派識別項。</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">
        <see cref="T:System.Boolean" /> (以傳址 (By Reference) 方式傳遞)，表示是否已擷取屬性。</param>
      <returns vsli:raw="The value of the property that has the specified dispatch identifier.">含有指定之分派識別項 (Dispatch Identifier) 的屬性值。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified name.">取得具有指定名稱之屬性的值。</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">屬性所屬的物件。</param>
      <param name="propertyName" vsli:raw="The name of the property.">屬性的名稱。</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">
        <see cref="T:System.Boolean" /> (以傳址 (By Reference) 方式傳遞)，表示是否已擷取屬性。</param>
      <returns vsli:raw="The value of the property that has the specified name.">具有指定名稱之屬性的值。</returns>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary vsli:raw="Provides an interface that supplies dynamic custom type information for an object.">提供介面來提供物件的動態自訂型別資訊。</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for this instance of a component.">傳回元件之這個執行個體的自訂屬性集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for this object.">
        <see cref="T:System.ComponentModel.AttributeCollection" />，其包含此物件的屬性。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the class name of this instance of a component.">傳回這個元件執行個體的類別名稱。</summary>
      <returns vsli:raw="The class name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the class does not have a name.">此物件的類別名稱，或如果類別沒有名稱，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of this instance of a component.">傳回這個元件執行個體的名稱。</summary>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object does not have a name.">物件的名稱；如果物件沒有名稱，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for this instance of a component.">傳回這個元件執行個體的類型轉換子。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is the converter for this object, or &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for this object.">這個物件之轉換子的 <see cref="T:System.ComponentModel.TypeConverter" />；如果這個物件沒有 <see cref="T:System.ComponentModel.TypeConverter" />，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the default event for this instance of a component.">傳回這個元件執行個體的預設事件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents the default event for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have events.">代表這個物件之預設事件的 <see cref="T:System.ComponentModel.EventDescriptor" /> ；如果這個物件沒有事件，則為 <see langword="null" /> 。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the default property for this instance of a component.">傳回這個元件執行個體的屬性。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the default property for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have properties.">代表這個物件之預設屬性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果這個物件沒有屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type for this instance of a component.">傳回元件的這個執行個體之指定類型編輯器。</summary>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the editor for this object.">表示此物件編輯器的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type that is the editor for this object, or &lt;see langword=&quot;null&quot; /&gt; if the editor cannot be found.">為此物件之編輯器的指定類型 <see cref="T:System.Object" />，如果找不到編輯器，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns the events for this instance of a component.">傳回這個元件執行個體的事件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the events for this component instance.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" />，代表此元件執行個體的事件。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns the events for this instance of a component using the specified attribute array as a filter.">使用指定屬性陣列做為篩選條件傳回元件之執行個體的事件。</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">
        <see cref="T:System.Attribute" /> 類型陣列，可當做篩選條件使用。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the filtered events for this component instance.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" />，代表此元件執行個體篩選過的事件。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns the properties for this instance of a component.">傳回元件之這個執行個體的屬性。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties for this component instance.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，代表這個元件執行個體的屬性。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns the properties for this instance of a component using the attribute array as a filter.">使用屬性陣列做為篩選條件，傳回這個元件執行個體的屬性。</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">
        <see cref="T:System.Attribute" /> 類型陣列，可當做篩選條件使用。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the filtered properties for this component instance.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，代表這個元件執行個體的篩選後屬性。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">傳回物件，包含指定的屬性描述項所描述的屬性。</summary>
      <param name="pd" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the property whose owner is to be found.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，代表要尋找其擁有者的屬性。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the owner of the specified property.">
        <see cref="T:System.Object" />，代表指定之屬性的擁有者。</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary vsli:raw="Provides the functionality to offer custom error information that a user interface can bind to.">提供功能，以供應使用者介面可繫結的自訂錯誤資訊。</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary vsli:raw="Gets an error message indicating what is wrong with this object.">取得錯誤訊息，表示這個物件有什麼錯誤。</summary>
      <returns vsli:raw="An error message indicating what is wrong with this object. The default is an empty string (&quot;&quot;).">錯誤訊息，表示這個物件有什麼錯誤。 預設為空字串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary vsli:raw="Gets the error message for the property with the given name.">使用指定的名稱取得屬性的錯誤訊息。</summary>
      <param name="columnName" vsli:raw="The name of the property whose error message to get.">要取得其錯誤訊息的屬性名稱。</param>
      <returns vsli:raw="The error message for the property. The default is an empty string (&quot;&quot;).">屬性的錯誤訊息。 預設為空字串 ("")。</returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary vsli:raw="Defines the interface for extending properties to other components in a container.">將擴充屬性的介面定義至容器 (Container) 中的其他元件。</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary vsli:raw="Specifies whether this object can provide its extender properties to the specified object.">指定這個物件是否可以將它的擴充項屬性提供給指定的物件。</summary>
      <param name="extendee" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to receive the extender properties.">接收擴充項屬性的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can provide extender properties to the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個物件能夠提供擴充項屬性給指定的物件則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary vsli:raw="Provides an interface to facilitate the retrieval of the builder's name and to display the builder.">提供加速擷取產生器名稱和顯示產生器的介面。</summary>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary vsli:raw="Gets a localized name.">取得當地語系化名稱。</summary>
      <returns vsli:raw="A localized name.">當地語系化名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary vsli:raw="Shows the builder.">顯示產生器。</summary>
      <param name="language" vsli:raw="The language service that is calling the builder.">呼叫產生的語言服務。</param>
      <param name="value" vsli:raw="The expression being edited.">編輯中的運算式。</param>
      <param name="newValue" vsli:raw="The new value.">新值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value should be replaced with &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt; (if the user cancels, for example).">如果值應該取代成 <paramref name="newValue" />，則為 <see langword="true" />，否則為 <see langword="false" /> (例如，如果使用者取消)。</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary vsli:raw="Provides functionality to an object to return a list that can be bound to a data source.">提供功能，使物件傳回可繫結至資料來源的清單。</summary>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary vsli:raw="Gets a value indicating whether the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects.">取得值，表示集合是否為 <see cref="T:System.Collections.IList" /> 物件的集合。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合為 <see cref="T:System.Collections.IList" /> 物件的集合，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from an object that does not implement an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; itself.">從本身沒有實作 <see cref="T:System.Collections.IList" /> 的物件傳回可以繫結至資料來源的 <see cref="T:System.Collections.IList" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from the object.">
        <see cref="T:System.Collections.IList" />，從物件繫結至資料來源。</returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary vsli:raw="Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.">提供巢狀容器的功能，巢狀容器邏輯上包含零或多個其他元件，並且由父元件所擁有。</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for the nested container.">取得巢狀容器的主控元件。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns the nested container.">擁有巢狀容器的 <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary vsli:raw="Provides the ability to retrieve the full nested name of a component.">提供擷取元件完整巢狀名稱的能力。</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary vsli:raw="Gets the full name of the component in this site.">取得這個站台中的元件完整名稱。</summary>
      <returns vsli:raw="The full name of the component in this site.">這個站台中的元件完整名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary vsli:raw="Indicates whether the component associated with this attribute has been inherited from a base class. This class cannot be inherited.">指示與這個屬性相關的元件是否已經繼承自基底類別。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class with the specified inheritance level.">使用指定的繼承層級，初始化 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 類別的新執行個體。</summary>
      <param name="inheritanceLevel" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; that indicates the level of inheritance to set this attribute to.">
        <see cref="T:System.ComponentModel.InheritanceLevel" />，表示這個屬性所設定的繼承層級。</param>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary vsli:raw="Specifies that the default value for &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; is &lt;see cref=&quot;F:System.ComponentModel.InheritanceAttribute.NotInherited&quot; /&gt;. This field is read-only.">指定 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的預設值為 <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" />。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary vsli:raw="Override to test for equality.">覆寫以測試是否相等。</summary>
      <param name="value" vsli:raw="The object to test.">要測試的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is the same; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果物件相同則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">傳回這個物件的雜湊程式碼。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">目前 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary vsli:raw="Gets or sets the current inheritance level stored in this attribute.">取得或設定儲存在這個屬性中的目前繼承層級。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; stored in this attribute.">儲存在這個屬性中的 <see cref="T:System.ComponentModel.InheritanceLevel" />。</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary vsli:raw="Specifies that the component is inherited. This field is read-only.">指定元件已繼承。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary vsli:raw="Specifies that the component is inherited and is read-only. This field is read-only.">指定元件已繼承且為唯讀。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">取得值，指出目前屬性值是否為屬性的預設值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果屬性目前的值是預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary vsli:raw="Specifies that the component is not inherited. This field is read-only.">指定元件並未繼承。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary vsli:raw="Converts this attribute to a string.">將這個屬性轉換成字串。</summary>
      <returns vsli:raw="A string that represents this &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">表示這個 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的字串。</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary vsli:raw="Defines identifiers for types of inheritance levels.">定義繼承層級型別的識別項。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary vsli:raw="The object is inherited.">物件已繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary vsli:raw="The object is inherited, but has read-only access.">物件已繼承，但只可唯讀存取。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary vsli:raw="The object is not inherited.">物件未繼承。</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary vsli:raw="Specifies the installer for a type that installs components.">指定安裝元件的型別之安裝程式。</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class with the name of the component's installer type.">使用元件的安裝程式型別名稱，初始化 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 類別的新執行個體。</summary>
      <param name="typeName" vsli:raw="The name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">
        <see cref="T:System.Type" /> 的名稱，表示這個屬性所繫結的元件安裝程式。 這個類別必須實作 <see cref="T:System.ComponentModel.Design.IDesigner" />。</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class, when given a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for a component.">當指定表示元件安裝程式的 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 時，初始化 <see cref="T:System.Type" /> 類別的新執行個體。</summary>
      <param name="installerType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">
        <see cref="T:System.Type" />，表示這個屬性所繫結的元件安裝程式。 這個類別必須實作 <see cref="T:System.ComponentModel.Design.IDesigner" />。</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.InstallerTypeAttribute" />。</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">測試其數值相等的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">傳回這個物件的雜湊程式碼。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">目前 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary vsli:raw="Gets the type of installer associated with this attribute.">取得與這個屬性相關的安裝程式型別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of installer associated with this attribute, or &lt;see langword=&quot;null&quot; /&gt; if an installer does not exist.">
        <see cref="T:System.Type" />，是表示與這個屬性相關的安裝程式型別，如果安裝程式不存在，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary vsli:raw="Creates an instance of a particular type of property from a drop-down box within the &lt;see cref=&quot;T:System.Windows.Forms.PropertyGrid&quot; /&gt;.">從 <see cref="T:System.Windows.Forms.PropertyGrid" /> 中的下拉式方塊，建立屬性特定型別的執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstanceCreationEditor&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.InstanceCreationEditor" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="When overridden in a derived class, returns an instance of the specified type.">在衍生類別中覆寫時，傳回指定型別的執行個體。</summary>
      <param name="context" vsli:raw="The context information.">內容資訊。</param>
      <param name="instanceType" vsli:raw="The specified type.">指定的型別。</param>
      <returns vsli:raw="An instance of the specified type or &lt;see langword=&quot;null&quot; /&gt;.">指定型別的執行個體或 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary vsli:raw="Gets the specified text.">取得指定的文字。</summary>
      <returns vsli:raw="The specified text.">指定的文字。</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit signed integer objects to and from other representations.">提供類型轉換器，將 16 位元帶正負號的整數物件與其他表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int16Converter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Int16Converter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit signed integer objects to and from other representations.">提供型別轉換子 (Type Converter) 將 32 位元帶正負號的整數 (Signed Integer) 物件與其他表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int32Converter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Int32Converter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit signed integer objects to and from various other representations.">提供型別轉換子 (Type Converter) 將 64 位元帶正負號的整數 (Signed Integer) 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int64Converter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.Int64Converter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.InvalidAsynchronousStateException">
      <summary>在應該執行作業的執行緒不存在或沒有訊息迴圈時擲回。</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別的新執行個體。</summary>
      <param name="info">要用於還原序列化 (Deserialization) 的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">要用於還原序列化的目的端。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)">
      <summary>使用指定的詳細描述來初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的詳細描述。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)">
      <summary>使用指定的詳細描述和指定的例外狀況，初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的詳細描述。</param>
      <param name="innerException">造成這個例外狀況之內部例外狀況的參考。</param>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary vsli:raw="Indicates whether a class converts property change events to &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">指出類別是否會將屬性變更事件轉換成 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">取得值，指出 <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 物件是否會引發 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events when one of its property values changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 物件會在其中一個屬性值變更時引發 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary vsli:raw="Allows coordination of initialization for a component and its dependent properties.">允許協調元件及其相依屬性的初始化。</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary vsli:raw="Occurs when initialization of the component is completed.">在完成元件的初始化時發生。</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary vsli:raw="Gets a value indicating whether the component is initialized.">取得值，指出是否已初始化元件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the component has completed initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示元件已完成初始化，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary vsli:raw="Provides contextual information about a component, such as its container and property descriptor.">提供元件的內容資訊，例如其容器和屬性描述項。</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary vsli:raw="Gets the container representing this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; request.">取得表示這個 <see cref="T:System.ComponentModel.TypeDescriptor" /> 要求的容器。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with the set of objects for this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no container or if the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; does not use outside objects.">
        <see cref="T:System.ComponentModel.IContainer" />，含有這個 <see cref="T:System.ComponentModel.TypeDescriptor" /> 的物件集，如果沒有容器或 <see cref="T:System.ComponentModel.TypeDescriptor" /> 不使用外部物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary vsli:raw="Gets the object that is connected with this type descriptor request.">取得與這個型別描述項要求關聯的物件。</summary>
      <returns vsli:raw="The object that invokes the method on the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no object responsible for the call.">在 <see cref="T:System.ComponentModel.TypeDescriptor" /> 上叫用方法的物件，如果沒有物件負責呼叫，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">引發 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">引發 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can be changed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個物件可以變更，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is associated with the given context item.">取得與指定內容項目關聯的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the given context item; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; responsible for the call.">描述指定內容項目的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，如果沒有 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 負責呼叫時，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary vsli:raw="Provides functionality to discover the schema for a bindable list, where the properties available for binding differ from the public properties of the object to bind to.">提供發現可繫結清單的結構描述 (Schema) 的功能，其中可用於繫結的屬性與要繫結物件的公用 (Public) 屬性是不同的。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">傳回代表繫結資料所用各項目屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to find in the collection as bindable. This can be &lt;see langword=&quot;null&quot; /&gt;.">要在可繫結集合中尋找的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件的陣列。 這可以是 <see langword="null" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">代表繫結資料所用各項目屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the name of the list.">傳回清單的名稱。</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects, for which the list name is returned. This can be &lt;see langword=&quot;null&quot; /&gt;.">傳回清單名稱之 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件的陣列。 這可以是 <see langword="null" />。</param>
      <returns vsli:raw="The name of the list.">清單的名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for all licenses. A license is granted to a specific instance of a component.">所有授權的 <see langword="abstract" /> 基底類別。 授權是授與給元件的特定執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.License" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary vsli:raw="When overridden in a derived class, disposes of the resources used by the license.">在衍生類別中覆寫時，處置授權所使用的資源。</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary vsli:raw="When overridden in a derived class, gets the license key granted to this component.">在衍生類別中覆寫時，取得授與這個元件的授權識別碼。</summary>
      <returns vsli:raw="A license key granted to this component.">授與這個元件的授權識別碼。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary vsli:raw="Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.">指定您何時可以使用授權的物件，並提供方法來取得在其網域中執行支援授權所需的其他服務。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.LicenseContext" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.">在衍生類別中覆寫時，從指定的資源組件 (Assembly) 傳回指定型別的已儲存授權識別碼。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component.">
        <see cref="T:System.Type" />，表示元件的型別。</param>
      <param name="resourceAssembly" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; with the license key.">具有授權識別碼的 <see cref="T:System.Reflection.Assembly" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type. This method returns &lt;see langword=&quot;null&quot; /&gt; unless you override it.">指定型別的 <see cref="P:System.ComponentModel.License.LicenseKey" />。 除非您加以覆寫，否則這個方法會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service, if it is available.">如果有可用的服務，則取得所要求的服務。</summary>
      <param name="type" vsli:raw="The type of service to retrieve.">要擷取的服務型別。</param>
      <returns vsli:raw="An instance of the service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be found.">服務的執行個體，或 <see langword="null" /> (如果找不到服務)。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="When overridden in a derived class, sets a license key for the specified type.">在衍生類別中覆寫時，為指定的型別設定授權識別碼。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component associated with the license key.">
        <see cref="T:System.Type" />，表示與授權識別碼相關的元件。</param>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to save for the type of component.">為元件的型別所儲存的 <see cref="P:System.ComponentModel.License.LicenseKey" />。</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary vsli:raw="When overridden in a derived class, gets a value that specifies when you can use a license.">在衍生類別中覆寫時，取得當您可以使用授權時所指定的值。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values that specifies when you can use a license. The default is &lt;see cref=&quot;F:System.ComponentModel.LicenseUsageMode.Runtime&quot; /&gt;.">其中一個 <see cref="T:System.ComponentModel.LicenseUsageMode" /> 值，當您可以使用授權時指定的。 預設為 <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary vsli:raw="Represents the exception thrown when a component cannot be granted a license.">表示元件無法取得授權時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class with the given &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">使用指定的 <see cref="T:System.ComponentModel.LicenseException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">要用於還原序列化 (Deserialization) 的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">要用於還原序列化的目的端。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type of component that was denied a license.">為無法取得授權元件的型別，初始化 <see cref="T:System.ComponentModel.LicenseException" /> 類別的新執行個體。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">
        <see cref="T:System.Type" />，表示未取得授權元件的型別。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license.">為無法取得授權元件的型別和執行個體，初始化 <see cref="T:System.ComponentModel.LicenseException" /> 類別的新執行個體。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">
        <see cref="T:System.Type" />，表示未取得授權元件的型別。</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">未取得授權之元件的執行個體。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display.">為無法取得授權元件的型別和執行個體，以及要顯示的訊息，初始化 <see cref="T:System.ComponentModel.LicenseException" /> 類別的新執行個體。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">
        <see cref="T:System.Type" />，表示未取得授權元件的型別。</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">未取得授權之元件的執行個體。</param>
      <param name="message" vsli:raw="The exception message to display.">要顯示的例外狀況訊息。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display and the original exception thrown.">為無法取得授權元件的型別和執行個體，以及要顯示的訊息和擲回的原始例外狀況，初始化 <see cref="T:System.ComponentModel.LicenseException" /> 類別的新執行個體。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">
        <see cref="T:System.Type" />，表示未取得授權元件的型別。</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">未取得授權之元件的執行個體。</param>
      <param name="message" vsli:raw="The exception message to display.">要顯示的例外狀況訊息。</param>
      <param name="innerException" vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the original exception.">
        <see cref="T:System.Exception" />，表示原始例外狀況。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">使用例外狀況的相關資訊來設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">要用於還原序列化 (Deserialization) 的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">要用於還原序列化的目的端。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary vsli:raw="Gets the type of the component that was not granted a license.">取得未取得授權元件的型別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">
        <see cref="T:System.Type" />，表示未取得授權元件的型別。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary vsli:raw="Provides properties and methods to add a license to a component and to manage a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. This class cannot be inherited.">提供屬性和方法以新增授權至元件，以及管理 <see cref="T:System.ComponentModel.LicenseProvider" />。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary vsli:raw="Creates an instance of the specified type, given a context in which you can use the licensed instance.">建立指定型別的執行個體，需指定可以使用授權執行個體的內容。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">
        <see cref="T:System.Type" />，表示要建立的型別。</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">
        <see cref="T:System.ComponentModel.LicenseContext" />，指定何時可以使用授權執行個體。</param>
      <returns vsli:raw="An instance of the specified type.">指定型別的執行個體。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary vsli:raw="Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.">建立具有指定引數的指定型別執行個體，需指定可以使用授權執行個體的內容。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">
        <see cref="T:System.Type" />，表示要建立的型別。</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">
        <see cref="T:System.ComponentModel.LicenseContext" />，指定何時可以使用授權執行個體。</param>
      <param name="args" vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the arguments for the type.">
        <see cref="T:System.Object" /> 型別的陣列，表示型別的引數。</param>
      <returns vsli:raw="An instance of the specified type with the given array of arguments.">具有指定引數陣列的指定型別執行個體。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary vsli:raw="Gets or sets the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt;, which specifies when you can use the licensed object.">取得或設定目前的 <see cref="T:System.ComponentModel.LicenseContext" />，它會指定何時可以使用授權物件。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed object.">
        <see cref="T:System.ComponentModel.LicenseContext" />，指定何時可以使用授權物件。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property is currently locked and cannot be changed.">
        <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 屬性目前是鎖定的而且無法變更。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary vsli:raw="Returns whether the given type has a valid license.">傳回指定型別是否具有有效授權。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to find a valid license for.">要為它搜尋有效授權的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given type is licensed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的型別已授權，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified type.">判斷是否授與指定型別的有效授權。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">
        <see cref="T:System.Type" />，表示要求 <see cref="T:System.ComponentModel.License" /> 的物件型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid license can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果授與有效授權，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">判斷是否授與型別之指定執行個體的有效授權。 這個方法會建立有效的 <see cref="T:System.ComponentModel.License" />。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">
        <see cref="T:System.Type" />，表示要求授權的物件型別。</param>
      <param name="instance" vsli:raw="An object of the specified type or a type derived from the specified type.">指定型別的物件或衍生自指定型別的型別。</param>
      <param name="license" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; that is a valid license, or &lt;see langword=&quot;null&quot; /&gt; if a valid license cannot be granted.">
        <see cref="T:System.ComponentModel.License" /> 是有效的授權；如果無法授與有效授權，則為 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以授與有效的 <see cref="T:System.ComponentModel.License" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary vsli:raw="Prevents changes being made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">防止對指定物件的目前 <see cref="T:System.ComponentModel.LicenseContext" /> 做變更。</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to lock.">要鎖定它目前內容的物件。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The context is already locked.">已經鎖定內容。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary vsli:raw="Allows changes to be made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">允許對指定物件的目前 <see cref="T:System.ComponentModel.LicenseContext" /> 做變更。</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to unlock.">要解除鎖定它目前內容的物件。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;contextUser&quot; /&gt; represents a different user than the one specified in a previous call to &lt;see cref=&quot;M:System.ComponentModel.LicenseManager.LockContext(System.Object)&quot; /&gt;.">
        <paramref name="contextUser" /> 表示不同於之前呼叫 <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" /> 所指定的使用者。</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; which specifies when you can use the licensed object for the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt;.">取得 <see cref="T:System.ComponentModel.LicenseUsageMode" />，它會指定何時可以使用 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 的授權物件。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values, as specified in the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property.">其中一個 <see cref="T:System.ComponentModel.LicenseUsageMode" /> 值，如同 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 屬性中所指定。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary vsli:raw="Determines whether a license can be granted for the specified type.">判斷是否授與指定型別的授權。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">
        <see cref="T:System.Type" />，表示要求授權的物件型別。</param>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">
        <see cref="T:System.ComponentModel.License" /> 無法授與。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary vsli:raw="Determines whether a license can be granted for the instance of the specified type.">判斷是否授與指定型別執行個體的授權。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">
        <see cref="T:System.Type" />，表示要求授權的物件型別。</param>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type or a type derived from the specified type.">指定型別的 <see cref="T:System.Object" /> 或衍生自指定型別的型別。</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">有效的 <see cref="T:System.ComponentModel.License" />。</returns>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="The type is licensed, but a &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">型別已授權，但是無法授與 <see cref="T:System.ComponentModel.License" />。</exception>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for implementing a license provider.">提供 <see langword="abstract" /> 基底類別，以便實作授權提供者。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.LicenseProvider" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.">不論授權的拒絕是否擲回例外狀況，在提供內容時，如果在衍生類別中覆寫，則取得元件的執行個體或型別的授權。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">
        <see cref="T:System.ComponentModel.LicenseContext" />，指定您可以使用授權物件的位置。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the license.">
        <see cref="T:System.Type" />，表示要求授權的元件。</param>
      <param name="instance" vsli:raw="An object that is requesting the license.">正在要求授權的物件。</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when the component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果元件無法取得授權時應該擲回 <see cref="T:System.ComponentModel.LicenseException" />，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">有效的 <see cref="T:System.ComponentModel.License" />。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary vsli:raw="Specifies the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; to use with a class. This class cannot be inherited.">指定要與類別一起使用的 <see cref="T:System.ComponentModel.LicenseProvider" />。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class without a license provider.">不使用授權提供者來初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type.">使用指定的型別來初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 類別的新執行個體。</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the license provider class.">授權提供者類別的完整名稱。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type of license provider.">使用授權提供者的指定型別來初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 類別的新執行個體。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider class.">
        <see cref="T:System.Type" />，表示授權提供者類別的型別。</param>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary vsli:raw="Specifies the default value, which is no provider. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定預設值，也就是沒有提供者。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">指示這個執行個體和指定的物件是否相等。</summary>
      <param name="value" vsli:raw="Another object to compare to.">要比較的另一個物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 等於這個執行個體則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt;.">目前 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary vsli:raw="Gets the license provider that must be used with the associated class.">取得必須與關聯類別一起使用的授權提供者。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider. The default value is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Type" />，表示授權提供者的型別。 預設值為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary vsli:raw="Indicates a unique ID for this attribute type.">表示此屬性型別的唯一 ID。</summary>
      <returns vsli:raw="A unique ID for this attribute type.">此屬性型別的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary vsli:raw="Specifies when the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be used.">指定何時可以使用 <see cref="T:System.ComponentModel.License" />。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary vsli:raw="Used during design time by a visual designer or the compiler.">在設計階段中由視覺化設計工具或編譯器所使用。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary vsli:raw="Used during runtime.">在執行階段期間使用。</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary vsli:raw="Provides an implementation of a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.">提供 <see cref="T:System.ComponentModel.LicenseProvider" /> 的實作。 提供者 (Provider) 運作的方式與 Microsoft .NET Framework 標準授權模型類似。</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicFileLicenseProvider&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.LicFileLicenseProvider" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary vsli:raw="Returns a key for the specified type.">傳回指定型別的索引鍵。</summary>
      <param name="type" vsli:raw="The object type to return the key.">要傳回索引鍵的物件型別。</param>
      <returns vsli:raw="A confirmation that the &lt;paramref name=&quot;type&quot; /&gt; parameter is licensed.">
        <paramref name="type" /> 參數已授權的確認。</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Returns a license for the instance of the component, if one is available.">傳回元件的執行個體 (Instance) 授權 (如果有的話)。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">
        <see cref="T:System.ComponentModel.LicenseContext" />，指定您可以使用授權物件的位置。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">
        <see cref="T:System.Type" />，表示要求 <see cref="T:System.ComponentModel.License" /> 的元件。</param>
      <param name="instance" vsli:raw="An object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">要求 <see cref="T:System.ComponentModel.License" /> 的物件。</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when a component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果元件無法取得授權時應該擲回 <see cref="T:System.ComponentModel.LicenseException" />，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;. If this method cannot find a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; or a valid &lt;paramref name=&quot;context&quot; /&gt; parameter, it returns &lt;see langword=&quot;null&quot; /&gt;.">有效的 <see cref="T:System.ComponentModel.License" />。 如果這個方法無法找到有效的 <see cref="T:System.ComponentModel.License" /> 或有效的 <paramref name="context" /> 參數，就會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary vsli:raw="Determines whether the key that the &lt;see cref=&quot;M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)&quot; /&gt; method retrieves is valid for the specified type.">判斷 <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> 方法所擷取的索引鍵對指定型別是否有效。</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to check.">要進行檢查的 <see cref="P:System.ComponentModel.License.LicenseKey" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">
        <see cref="T:System.Type" />，表示要求 <see cref="T:System.ComponentModel.License" /> 的元件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is a valid &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="P:System.ComponentModel.License.LicenseKey" /> 是指定型別的有效索引鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary vsli:raw="Specifies that a list can be used as a data source. A visual designer should use this attribute to determine whether to display a particular list in a data-binding picker. This class cannot be inherited.">指定可以用來做為資料來源的清單。 視覺化設計工具 (Visual Designer) 應該使用這個屬性 (Attribute)，判斷是否要在資料繫結選擇器中顯示特定的清單。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using a value to indicate whether the list is bindable.">使用指示清單是否為可繫結的值，初始化 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 類別的新執行個體。</summary>
      <param name="listBindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果清單為可繫結，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; to indicate whether the list is bindable.">使用 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 指示清單是否為可繫結，初始化 <see cref="T:System.ComponentModel.BindableSupport" /> 類別的新執行個體。</summary>
      <param name="flags" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; that indicates whether the list is bindable.">
        <see cref="T:System.ComponentModel.BindableSupport" />，指出清單是否為可繫結。</param>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">表示 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 的預設值。</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">傳回傳遞的物件是否等於這個 <see cref="T:System.ComponentModel.ListBindableAttribute" />。</summary>
      <param name="obj" vsli:raw="The object to test equality with.">要測試相等比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果傳遞的物件和這個 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">目前 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns whether &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value.">不論 <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> 是否設定為預設值都傳回值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> 設定為預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary vsli:raw="Gets whether the list is bindable.">取得值，指出清單是否為可繫結。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果清單為可繫結，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary vsli:raw="Specifies that the list is not bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定清單是不可繫結的。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary vsli:raw="Specifies that the list is bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定清單是可繫結的。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event.">提供 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected.">指定變更類型和受影響的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />，初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 類別的新執行個體。</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">
        <see cref="T:System.ComponentModel.ListChangedType" /> 值，指出變更的型別。</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, removed, or changed.">已加入、移除或變更的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the index of the affected item.">指定變更類型和受影響項目的索引，初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 類別的新執行個體。</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">
        <see cref="T:System.ComponentModel.ListChangedType" /> 值，指出變更的型別。</param>
      <param name="newIndex" vsli:raw="The index of the item that was added, changed, or removed.">已加入、變更或移除項目的索引。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change, the index of the affected item, and a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the affected item.">指定變更類型、受影響項目的索引和描述受影響項目的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />，初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 類別的新執行個體。</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">
        <see cref="T:System.ComponentModel.ListChangedType" /> 值，指出變更的型別。</param>
      <param name="newIndex" vsli:raw="The index of the item that was added or changed.">已加入或變更項目的索引。</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the item.">描述項目的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the old and new index of the item that was moved.">指定變更類型和已移動項目的新舊索引，初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 類別的新執行個體。</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">
        <see cref="T:System.ComponentModel.ListChangedType" /> 值，指出變更的型別。</param>
      <param name="newIndex" vsli:raw="The new index of the item that was moved.">已移動項目的新索引。</param>
      <param name="oldIndex" vsli:raw="The old index of the item that was moved.">已移動項目的舊索引。</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary vsli:raw="Gets the type of change.">取得變更類型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">
        <see cref="T:System.ComponentModel.ListChangedType" /> 值，指出變更的型別。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary vsli:raw="Gets the index of the item affected by the change.">取得受變更影響之項目的索引。</summary>
      <returns vsli:raw="The index of the affected by the change.">受變更影響之項目的索引。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary vsli:raw="Gets the old index of an item that has been moved.">取得已移動項目的舊索引。</summary>
      <returns vsli:raw="The old index of the moved item.">已移動項目的舊索引。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, changed, or deleted.">取得已加入、變更或刪除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected by the change.">受變更所影響的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event of the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; class.">代表將處理 <see cref="T:System.ComponentModel.IBindingList" /> 類別的 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件之方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件的來源。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.ListChangedEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary vsli:raw="Specifies how the list changed.">指定清單變更的方式。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary vsli:raw="An item added to the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was added.">加入至清單的項目。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含加入項目的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary vsli:raw="An item changed in the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was changed.">在清單中變更的項目。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含變更項目的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary vsli:raw="An item deleted from the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was deleted.">從清單中刪除的項目。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含刪除項目的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary vsli:raw="An item moved within the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.OldIndex&quot; /&gt; contains the previous index for the item, whereas &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the new index for the item.">在清單中移動的項目。 <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> 包含先前的項目索引，而 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含新的項目索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was added, which changed the schema.">已加入 <see cref="T:System.ComponentModel.PropertyDescriptor" />，其變更結構描述 (Schema)。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was changed, which changed the schema.">已變更 <see cref="T:System.ComponentModel.PropertyDescriptor" />，其變更結構描述。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was deleted, which changed the schema.">已刪除 <see cref="T:System.ComponentModel.PropertyDescriptor" />，其變更結構描述。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary vsli:raw="Much of the list has changed. Any listening controls should refresh all their data from the list.">大部分的清單已變更。 任何接聽的控制項都應該從清單中重新整理它們的所有資料。</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary vsli:raw="Provides a description of the sort operation applied to a data source.">提供套用至資料來源的排序作業描述。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; class with the specified property description and direction.">使用指定的屬性描述和方向，初始化 <see cref="T:System.ComponentModel.ListSortDescription" /> 類別的新執行個體。</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the property by which the data source is sorted.">描述排序資料來源所依據之屬性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; values.">其中一個 <see cref="T:System.ComponentModel.ListSortDescription" /> 值。</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary vsli:raw="Gets or sets the abstract description of a class property associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">取得或設定與這個 <see cref="T:System.ComponentModel.ListSortDescription" /> 關聯之類別屬性的抽象描述。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">與這個 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 相關聯的 <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary vsli:raw="Gets or sets the direction of the sort operation associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">取得或設定與這個 <see cref="T:System.ComponentModel.ListSortDescription" /> 關聯之排序作業方向。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">其中一個 <see cref="T:System.ComponentModel.ListSortDirection" /> 值。</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">表示 <see cref="T:System.ComponentModel.ListSortDescription" /> 物件的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class with the specified array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">使用指定的 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 物件陣列，初始化 <see cref="T:System.ComponentModel.ListSortDescription" /> 類別的新執行個體。</summary>
      <param name="sorts" vsli:raw="The array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects to be contained in the collection.">要包含在集合中的 <see cref="T:System.ComponentModel.ListSortDescription" /> 物件陣列。</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary vsli:raw="Determines if the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; contains a specific value.">判斷 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 是否含有特定值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">要在集合中尋找的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在集合中找到 <see cref="T:System.Object" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of the collection to the specified array, starting at the specified destination array index.">從指定之目的陣列索引開始，將集合之內容複製到指定的陣列。</summary>
      <param name="array" vsli:raw="The destination array for the items copied from the collection.">從集合複製過來的項目之目的陣列。</param>
      <param name="index" vsli:raw="The index of the destination array at which copying begins.">目的陣列的索引，複製會從該位置開始。</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary vsli:raw="Gets the number of items in the collection.">取得集合中的項目數目。</summary>
      <returns vsli:raw="The number of items in the collection.">集合中的項目數目</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary vsli:raw="Returns the index of the specified item in the collection.">傳回集合中指定之項目的索引。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">要在集合中尋找的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">取得或設定指定的 <see cref="T:System.ComponentModel.ListSortDescription" />。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">要在集合中取得或設定的 <see cref="T:System.ComponentModel.ListSortDescription" /> 之以零起始的索引。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">具有指定索引的 <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An item is set in the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;, which is read-only.">在唯讀的 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 中設定項目。</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is thread safe.">取得值，指出對集合的存取是否為安全執行緒。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">所有情況下都是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the current instance that can be used to synchronize access to the collection.">取得可以用來同步處理對集合之存取的目前執行個體。</summary>
      <returns vsli:raw="The current instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 的目前執行個體。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">取得可以用來逐一查看集合的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">將項目加入至集合。</summary>
      <param name="value" vsli:raw="The item to add to the collection.">要新增至集合中的項目。</param>
      <returns vsli:raw="The position into which the new element was inserted.">插入新項目的位置。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">在所有情況下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">移除集合的所有項目。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">在所有情況下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">在指定的索引位置，插入項目至集合之中。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">要在集合中取得或設定的 <see cref="T:System.ComponentModel.ListSortDescription" /> 之以零起始的索引</param>
      <param name="value" vsli:raw="The item to insert into the collection.">要插入集合中的項目。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">在所有情況下。</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">取得值，這個值表示集合的大小是否是固定的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">所有情況下都是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">取得值，表示集合是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">所有情況下都是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">取得指定的 <see cref="T:System.ComponentModel.ListSortDescription" />。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get in the collection.">要在集合中取得的 <see cref="T:System.ComponentModel.ListSortDescription" /> 之以零起始的索引</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">具有指定索引的 <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of an item from the collection.">從集合移除第一個項目。</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">要從集合中移除的項目。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">在所有情況下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes an item from the collection at a specified index.">從指定索引的集合移除項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to remove from the collection.">要從集合中移除的 <see cref="T:System.ComponentModel.ListSortDescription" /> 之以零起始的索引</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">在所有情況下。</exception>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary vsli:raw="Specifies the direction of a sort operation.">指定排序作業的方向。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary vsli:raw="Sorts in ascending order.">依遞增順序排序。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary vsli:raw="Sorts in descending order.">依遞減順序排序。</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the properties that support lookup-based binding. This class cannot be inherited.">指定支援查閱架構之繫結的屬性。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class using no parameters.">不使用參數來初始化 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 類別的新執行個體。</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">做為資料來源的屬性名稱。</param>
      <param name="displayMember" vsli:raw="The name of the property to be used for the display name.">做為顯示名稱的屬性名稱。</param>
      <param name="valueMember" vsli:raw="The name of the property to be used as the source for values.">做為值來源的屬性名稱。</param>
      <param name="lookupMember" vsli:raw="The name of the property to be used for lookups.">查閱時使用的屬性名稱。</param>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">取得 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所繫結之元件的資料來源屬性名稱。</summary>
      <returns vsli:raw="The data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所繫結之元件的資料來源屬性。</returns>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">表示 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 類別的預設值。</summary>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary vsli:raw="Gets the name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">取得 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所繫結之元件的顯示成員屬性名稱。</summary>
      <returns vsli:raw="The name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所繫結之元件的顯示成員屬性名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">判斷指定的 <see cref="T:System.Object" /> 和目前的 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 執行個體是否相等。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">要與目前 <see cref="T:System.Object" /> 執行個體比較的 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">如果物件和目前執行個體相等，則為 <see langword="true" />，否則為 <see langword="false" />，表示不相等。</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt;.">目前 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary vsli:raw="Gets the name of the lookup member for the component to which this attribute is bound.">取得這個屬性所繫結之元件的查閱成員名稱。</summary>
      <returns vsli:raw="The name of the lookup member for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所繫結之元件的查閱成員名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary vsli:raw="Gets the name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">取得 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所繫結之元件的值成員屬性名稱。</summary>
      <returns vsli:raw="The name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所繫結之元件的值成員屬性名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary vsli:raw="Implements &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and provides the base implementation for remotable components that are marshaled by value (a copy of the serialized object is passed).">實作 <see cref="T:System.ComponentModel.IComponent" /> 並且提供由數值 (傳遞序列化物件的複本) 所封送處理之可遠端使用元件的基底實作。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary vsli:raw="Gets the container for the component.">取得元件的容器。</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; interface that represents the component's container, or &lt;see langword=&quot;null&quot; /&gt; if the component does not have a site.">物件，實作表示元件容器的 <see cref="T:System.ComponentModel.IContainer" /> 介面，或者如果元件並沒有站台，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary vsli:raw="Gets a value indicating whether the component is currently in design mode.">取得值，表示元件目前是否處於設計模式。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is in design mode; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果元件處於設計模式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt;.">釋放 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; and optionally releases the managed resources.">釋放 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary vsli:raw="Adds an event handler to listen to the &lt;see cref=&quot;E:System.ComponentModel.MarshalByValueComponent.Disposed&quot; /&gt; event on the component.">加入事件處理常式來接聽 (Listen) 元件上的 <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> 事件。</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary vsli:raw="Gets the list of event handlers that are attached to this component.">取得附加在這個元件上的事件處理常式清單。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventHandlerList&quot; /&gt; that provides the delegates for this component.">
        <see cref="T:System.ComponentModel.EventHandlerList" />，提供這個元件的委派。</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary vsli:raw="Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.">允許物件在記憶體回收進行回收之前，嘗試釋放資源並執行其他清除作業。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary vsli:raw="Gets the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">取得 <see cref="T:System.IServiceProvider" /> 的實作器。</summary>
      <param name="service" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of service you want.">
        <see cref="T:System.Type" />，表示您想要服務的型別。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">
        <see cref="T:System.Object" />，表示 <see cref="T:System.IServiceProvider" /> 的實作器。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary vsli:raw="Gets or sets the site of the component.">取得或設定元件的站台。</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface that represents the site of the component.">物件，實作表示元件站台的 <see cref="T:System.ComponentModel.ISite" /> 介面。</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any. This method should not be overridden.">傳回任何包含 <see cref="T:System.ComponentModel.Component" /> 名稱的 <see cref="T:System.String" />。 不應覆寫此方法。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any.  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; is unnamed.">
        <see cref="T:System.String" />，其中可能含有 <see cref="T:System.ComponentModel.Component" /> 的名稱。
如果 <see cref="T:System.ComponentModel.Component" /> 尚未命名，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary vsli:raw="Represents a mask-parsing service that can be used by any number of controls that support masking, such as the &lt;see cref=&quot;T:System.Windows.Forms.MaskedTextBox&quot; /&gt; control.">表示遮罩剖析服務，任何支援遮罩的控制項數目都可以使用它，例如 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 控制項。</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask.">使用指定的遮罩，初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 類別的新執行個體。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">
        <see cref="T:System.String" />，表示輸入遮罩。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and ASCII restriction value.">使用指定的遮罩和 ASCII 限制值，初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 類別的新執行個體。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">
        <see cref="T:System.String" />，表示輸入遮罩。</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">
        <see langword="true" /> 表示輸入限於 ASCII 相容字元，而 <see langword="false" /> 則表示允許完整 Unicode 集。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, password character, and prompt usage value.">使用指定的遮罩、密碼字元和提示使用值，初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 類別的新執行個體。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">
        <see cref="T:System.String" />，表示輸入遮罩。</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">
        <see cref="T:System.Char" />，將針對輸入至密碼字串的字元顯示。</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示允許提示字元當做輸入，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and culture.">使用指定的遮罩和文化特性，初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 類別的新執行個體。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">
        <see cref="T:System.String" />，表示輸入遮罩。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">
        <see cref="T:System.Globalization.CultureInfo" />，用來設定可區分區域的分隔符號。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, and ASCII restriction value.">使用指定的遮罩、文化特性和 ASCII 限制值，初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 類別的新執行個體。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">
        <see cref="T:System.String" />，表示輸入遮罩。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">
        <see cref="T:System.Globalization.CultureInfo" />，用來設定可區分區域的分隔符號。</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">
        <see langword="true" /> 表示輸入限於 ASCII 相容字元，而 <see langword="false" /> 則表示允許完整 Unicode 集。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, prompt usage value, prompt character, password character, and ASCII restriction value.">使用指定的遮罩、文化特性、提示使用值、提示字元、密碼字元和 ASCII 限制值，初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 類別的新執行個體。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">
        <see cref="T:System.String" />，表示輸入遮罩。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">
        <see cref="T:System.Globalization.CultureInfo" />，用來設定可區分區域的分隔符號。</param>
      <param name="allowPromptAsInput" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value that specifies whether the prompt character should be allowed as a valid input character.">
        <see cref="T:System.Boolean" /> 值，指定是否允許提示字元當做有效輸入字元。</param>
      <param name="promptChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed as a placeholder for user input.">
        <see cref="T:System.Char" />，將顯示為使用者輸入的替代符號。</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">
        <see cref="T:System.Char" />，將針對輸入至密碼字串的字元顯示。</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">
        <see langword="true" /> 表示輸入限於 ASCII 相容字元，而 <see langword="false" /> 則表示允許完整 Unicode 集。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The mask parameter is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The mask contains one or more non-printable characters.">遮罩參數是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
-或-
遮罩包含一或多個無法列印的字元。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, password character, and prompt usage value.">使用指定的遮罩、文化特性、密碼字元和提示使用值，初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 類別的新執行個體。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">
        <see cref="T:System.String" />，表示輸入遮罩。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">
        <see cref="T:System.Globalization.CultureInfo" />，用來設定可區分區域的分隔符號。</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">
        <see cref="T:System.Char" />，將針對輸入至密碼字串的字元顯示。</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示允許提示字元當做輸入，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string.">將指定的輸入字元加入至格式化字串的結尾。</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">
        <see cref="T:System.Char" /> 值，要附加至格式化字串。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果輸入字元已成功加入，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string, and then outputs position and descriptive information.">將指定的輸入字元加入至格式化字串的結尾，然後輸出位置和描述性資訊。</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">
        <see cref="T:System.Char" /> 值，要附加至格式化字串。</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">格式化字串中以零起始的位置，在這個位置上嘗試加入字元。 輸出參數。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述運算的結果。 輸出參數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果輸入字元已成功加入，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string.">將指定輸入字串的字元加入至格式化字串的結尾。</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">
        <see cref="T:System.String" />，包含要附加至格式化字串的字元值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">
        <see langword="true" /> 表示輸入字串的所有字元已成功加入，而 <see langword="false" /> 則表示未加入任何字元。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string, and then outputs position and descriptive information.">將指定輸入字串的字元加入至格式化字串的結尾，然後輸出位置和描述性資訊。</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">
        <see cref="T:System.String" />，包含要附加至格式化字串的字元值。</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">格式化字串中以零起始的位置，在這個位置上嘗試加入字元。 輸出參數。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述運算的結果。 輸出參數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">
        <see langword="true" /> 表示輸入字串的所有字元已成功加入，而 <see langword="false" /> 則表示未加入任何字元。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary vsli:raw="Gets a value indicating whether the prompt character should be treated as a valid input character or not.">取得值，指出提示字元是否應視為有效輸入字元。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the user can enter &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt; into the control; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果使用者可以輸入 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> 至控制項，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary vsli:raw="Gets a value indicating whether the mask accepts characters outside of the ASCII character set.">取得值，指出遮罩是否接受 ASCII 字元集之外的字元。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if only ASCII is accepted; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; can accept any arbitrary Unicode character. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果只接受 ASCII，則為 <see langword="true" />，但如果 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 可以接受任意 Unicode 字元，則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions that have already been successfully assigned an input value.">取得已成功指派輸入值之可編輯的字元位置數目。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions in the input mask that have already been assigned a character value in the formatted string.">
        <see cref="T:System.Int32" />，包含輸入遮罩中可編輯的字元位置數目，在格式化字串中已指派字元值給這些位置。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions in the input mask that have not yet been assigned an input value.">取得輸入遮罩中尚未指派輸入值的可編輯字元位置數目。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions that not yet been assigned a character value.">
        <see cref="T:System.Int32" />，包含尚未指派字元值的可編輯字元位置數目。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters.">從格式化字串清除所有可編輯的輸入字元，並取代成提示字元。</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters, and then outputs descriptive information.">從格式化字串清除所有可編輯的輸入字元，並取代成提示字元，然後輸出描述性資訊。</summary>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述運算的結果。 輸出參數。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary vsli:raw="Creates a copy of the current &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt;.">建立目前的 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 複本。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; object this method creates, cast as an object.">這個方法所建立的 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 物件，其轉型為物件。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary vsli:raw="Gets the culture that determines the value of the localizable separators and placeholders in the input mask.">取得文化特性，以便判斷輸入遮罩中可當地語系化分隔符號和替代符號的值。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; containing the culture information associated with the input mask.">
        <see cref="T:System.Globalization.CultureInfo" />，包含與輸入遮罩相關聯的文化特性資訊。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary vsli:raw="Gets the default password character used obscure user input.">取得用來遮蔽使用者輸入的預設密碼字元。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that represents the default password character.">表示預設密碼字元的 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary vsli:raw="Gets the number of editable positions in the formatted string.">取得格式化字串中可編輯的位置數目。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable positions in the formatted string.">
        <see cref="T:System.Int32" />，包含格式化字串中可編輯的位置數目。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary vsli:raw="Gets a newly created enumerator for the editable positions in the formatted string.">取得格式化字串中可編輯位置的新建立列舉值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that supports enumeration over the editable positions in the formatted string.">
        <see cref="T:System.Collections.IEnumerator" />，支援列舉格式化字串中的可編輯位置。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position after the specified position using the specified search direction.">使用指定搜尋方向，傳回指定位置之後的第一個指定可編輯位置。</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">格式化字串中要開始搜尋的以零起始的位置。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">表示搜尋方向的 <see cref="T:System.Boolean" />；<see langword="true" /> 表示向前搜尋，<see langword="false" /> 則為向後搜尋。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果成功，則為 <see cref="T:System.Int32" />，表示找到第一個指定可編輯位置之以零起始的位置，否則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position between the specified positions using the specified search direction.">使用指定搜尋方向，傳回指定位置之間的第一個指定可編輯位置。</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">格式化字串中要開始搜尋的以零起始的位置。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">格式化字串中要結束搜尋的以零起始的位置。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">表示搜尋方向的 <see cref="T:System.Boolean" />；<see langword="true" /> 表示向前搜尋，<see langword="false" /> 則為向後搜尋。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果成功，則為 <see cref="T:System.Int32" />，表示找到第一個指定可編輯位置之以零起始的位置，否則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position after the specified position using the specified search direction.">使用指定搜尋方向，傳回指定位置之後的第一個可編輯位置。</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">格式化字串中要開始搜尋的以零起始的位置。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">表示搜尋方向的 <see cref="T:System.Boolean" />；<see langword="true" /> 表示向前搜尋，<see langword="false" /> 則為向後搜尋。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果成功，則為 <see cref="T:System.Int32" />，表示找到第一個可編輯位置之以零起始的位置，否則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position between the specified positions using the specified search direction.">使用指定搜尋方向，傳回指定位置之間的第一個可編輯位置。</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">格式化字串中要開始搜尋的以零起始的位置。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">格式化字串中要結束搜尋的以零起始的位置。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">表示搜尋方向的 <see cref="T:System.Boolean" />；<see langword="true" /> 表示向前搜尋，<see langword="false" /> 則為向後搜尋。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果成功，則為 <see cref="T:System.Int32" />，表示找到第一個可編輯位置之以零起始的位置，否則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position after the specified position using the specified search direction.">使用指定搜尋方向，傳回指定位置之後的第一個非可編輯位置。</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">格式化字串中要開始搜尋的以零起始的位置。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">表示搜尋方向的 <see cref="T:System.Boolean" />；<see langword="true" /> 表示向前搜尋，<see langword="false" /> 則為向後搜尋。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果成功，則為 <see cref="T:System.Int32" />，表示找到第一個常值位置之以零起始的位置，否則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position between the specified positions using the specified search direction.">使用指定搜尋方向，傳回指定位置之間的第一個非可編輯位置。</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">格式化字串中要開始搜尋的以零起始的位置。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">格式化字串中要結束搜尋的以零起始的位置。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">表示搜尋方向的 <see cref="T:System.Boolean" />；<see langword="true" /> 表示向前搜尋，<see langword="false" /> 則為向後搜尋。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果成功，則為 <see cref="T:System.Int32" />，表示找到第一個常值位置之以零起始的位置，否則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position after the specified position using the specified search direction.">使用指定搜尋方向，傳回指定位置之後第一個未指定的可編輯位置。</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">格式化字串中要開始搜尋的以零起始的位置。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">表示搜尋方向的 <see cref="T:System.Boolean" />；<see langword="true" /> 表示向前搜尋，<see langword="false" /> 則為向後搜尋。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果成功，則為 <see cref="T:System.Int32" />，表示找到第一個未指定的可編輯位置之以零起始的位置，否則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position between the specified positions using the specified search direction.">使用指定搜尋方向，傳回指定位置之間第一個未指定的可編輯位置。</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">格式化字串中要開始搜尋的以零起始的位置。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">格式化字串中要結束搜尋的以零起始的位置。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">表示搜尋方向的 <see cref="T:System.Boolean" />；<see langword="true" /> 表示向前搜尋，<see langword="false" /> 則為向後搜尋。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果成功，則為 <see cref="T:System.Int32" />，表示找到第一個未指定的可編輯位置之以零起始的位置，否則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; denotes success or failure.">判斷指定的 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 代表成功或失敗。</summary>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value typically obtained as an output parameter from a previous operation.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 值，通常以先前作業的輸出參數方式取得。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value represents a success; otherwise, &lt;see langword=&quot;false&quot; /&gt; if it represents failure.">如果指定的 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 值表示成功，則為 <see langword="true" />，如果表示失敗，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary vsli:raw="Gets or sets a value that indicates whether literal characters in the input mask should be included in the formatted string.">取得或設定值，指出輸入遮罩中的常值字元是否應該包含在格式化字串中。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if literals are included; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果包含常值，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary vsli:raw="Gets or sets a value indicating whether &lt;see cref=&quot;P:System.Windows.Forms.MaskedTextBox.PromptChar&quot; /&gt; is used to represent the absence of user input when displaying the formatted string.">取得或設定值，指出 <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> 是否用來表示，在顯示格式化字串時使用者輸入項目不存在。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character is used to represent the positions where no user input was provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果提示字元用來表示未提供使用者輸入的位置，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string.">在格式化字串中的指定位置插入指定字元。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">要插入的 <see cref="T:System.Char" />。</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">格式化字串中要插入字元之以零起始的位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果插入成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string, returning the last insertion position and the status of the operation.">在格式化字串中的指定位置插入指定字元，並傳回上一個插入位置和作業狀態。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">要插入的 <see cref="T:System.Char" />。</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">格式化字串中要插入字元之以零起始的位置。</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">如果方法成功，則為最後一個插入字元位置，否則為插入失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述插入作業的結果。 輸出參數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果插入成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string.">在格式化字串中的指定位置插入指定字串。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">要插入的 <see cref="T:System.String" />。</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">格式化字串中要插入輸入字串之以零起始的位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果插入成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string, returning the last insertion position and the status of the operation.">在格式化字串中的指定位置插入指定字串，並傳回上一個插入位置和作業狀態。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">要插入的 <see cref="T:System.String" />。</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">格式化字串中要插入輸入字串之以零起始的位置。</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">如果方法成功，則為最後一個插入字元位置，否則為插入失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述插入作業的結果。 輸出參數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果插入成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary vsli:raw="Gets the upper bound of the range of invalid indexes.">取得無效索引範圍的上限。</summary>
      <returns vsli:raw="A value representing the largest invalid index, as determined by the provider implementation. For example, if the lowest valid index is 0, this property will return -1.">值，表示最大的無效索引，由提供者實作決定。 例如，如果最小的有效索引是 0，則這個屬性會傳回 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is available for assignment.">判斷指定的位置是否可用於指派。</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">遮罩中要測試之以零起始的位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable and has not been assigned to yet; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果格式化字串中的指定位置為可編輯並且尚未指定，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is editable.">判斷指定的位置是否可編輯。</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">遮罩中要測試之以零起始的位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果格式化字串中的指定位置是可編輯，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary vsli:raw="Gets or sets a value that determines whether password protection should be applied to the formatted string.">取得或設定值，判斷密碼保護是否應套用至格式化字串。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input string is to be treated as a password string; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果輸入字串視為密碼字串，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid input character.">判斷指定的字元是否為有效的輸入字元。</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">要測試的 <see cref="T:System.Char" /> 值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid input value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果指定字元包含有效的輸入值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid mask character.">判斷指定的字元是否為有效的遮罩字元。</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">要測試的 <see cref="T:System.Char" /> 值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid mask value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果指定字元包含有效的遮罩值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid password character.">判斷指定的字元是否為有效的密碼字元。</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">要測試的 <see cref="T:System.Char" /> 值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid password value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果指定字元包含有效的密碼值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified position in the formatted string.">取得格式化字串中位於指定位置的項目。</summary>
      <param name="index" vsli:raw="A zero-based index of the element to retrieve.">要擷取的項目之以零起始索引。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; at the specified position in the formatted string.">格式化字串中位於指定位置的 <see cref="T:System.Char" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero or greater than or equal to the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.Length&quot; /&gt; of the mask.">
        <paramref name="index" /> 小於零，或大於或等於遮罩的 <see cref="P:System.ComponentModel.MaskedTextProvider.Length" />。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary vsli:raw="Gets the index in the mask of the rightmost input character that has been assigned to the mask.">取得遮罩中最右側指定輸入字元的索引。</summary>
      <returns vsli:raw="If at least one input character has been assigned to the mask, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the index of rightmost assigned position; otherwise, if no position has been assigned, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">如果至少有一個輸入字元指派給遮罩，則為 <see cref="T:System.Int32" />，包含最右側的指定位置索引，但如果沒有指派位置，則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary vsli:raw="Gets the length of the mask, absent any mask modifier characters.">取得遮罩長度，不計任何遮罩修飾詞字元。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of positions in the mask, excluding characters that modify mask input.">
        <see cref="T:System.Int32" />，包含遮罩的位置數目，不含修改遮罩輸入的字元。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary vsli:raw="Gets the input mask.">取得輸入遮罩。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the full mask.">含有完全遮罩的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary vsli:raw="Gets a value indicating whether all required inputs have been entered into the formatted string.">取得值，指出所有必要的輸入項目是否已輸入格式化字串。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required input has been entered into the mask; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果所有必要輸入項目已輸入遮罩中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary vsli:raw="Gets a value indicating whether all required and optional inputs have been entered into the formatted string.">取得值，指出所有必要和選擇性的輸入項目是否已輸入格式化字串。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required and optional inputs have been entered; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已經輸入所有必要和選擇性的輸入，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary vsli:raw="Gets or sets the character to be substituted for the actual input characters.">取得或設定字元，取代實際輸入字元。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value used as the password character.">當做密碼字元使用的 <see cref="T:System.Char" /> 值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The password character specified when setting this property is the same as the current prompt character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt;. The two are required to be different.">設定這個屬性時，指定的密碼字元和目前提示字元 (<see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />) 相同。 這兩個項目不能相同。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">設定這個屬性時，指定的字元不是有效的密碼字元 (由 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 方法判斷)。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary vsli:raw="Gets or sets the character used to represent the absence of user input for all available edit positions.">取得或設定字元，用來表示所有可用編輯位置的使用者輸入項目不存在。</summary>
      <returns vsli:raw="The character used to prompt the user for input. The default is an underscore (_).">用來提示使用者輸入資料的字元。 預設為底線 (_)。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The prompt character specified when setting this property is the same as the current password character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt;. The two are required to be different.">設定這個屬性時，指定的提示字元和目前密碼字元 (<see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />) 相同。 這兩個項目不能相同。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">設定這個屬性時，指定的字元不是有效的密碼字元 (由 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 方法判斷)。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary vsli:raw="Removes the last assigned character from the formatted string.">從格式化字串移除上一個指定的字元。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功移除字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the last assigned character from the formatted string, and then outputs the removal position and descriptive information.">從格式化字串移除上一個指定的字元，然後輸出移除位置和描述性資訊。</summary>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the character was actually removed. An output parameter.">格式化字串中實際移除字元之以零起始的位置。 輸出參數。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述運算的結果。 輸出參數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功移除字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the assigned character at the specified position from the formatted string.">移除格式化字串中指定位置上的指定字元。</summary>
      <param name="position" vsli:raw="The zero-based position of the assigned character to remove.">要移除指定字元之以零起始的位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功移除字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string.">移除格式化字串中指定位置之間的指定字元。</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">要移除第一個指定字元之以零起始的索引。</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">要移除最後一個指定字元之以零起始的索引。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功移除字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string, and then outputs the removal position and descriptive information.">移除格式化字串中指定位置之間的指定字元，然後輸出移除位置和描述性資訊。</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">要移除第一個指定字元之以零起始的索引。</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">要移除最後一個指定字元之以零起始的索引。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string of where the characters were actually removed; otherwise, the first position where the operation failed. An output parameter.">如果成功，則會是格式化字串中實際移除字元之以零起始的位置，否則，會是作業失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述運算的結果。 輸出參數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功移除字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value.">將指定位置或之外的單一字元取代成指定字元值。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">取代現有值的 <see cref="T:System.Char" /> 值。</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">搜尋第一個可編輯的字元並加以取代的以零起始的位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功取代字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character between the specified starting and ending positions with the specified character value, and then outputs the removal position and descriptive information.">將指定起始位置和結束位置之間的單一字元取代成指定字元值，然後輸出移除位置和描述性資訊。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">取代現有值的 <see cref="T:System.Char" /> 值。</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">格式化字串中要開始取代之以零起始的位置。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">格式化字串中要結束取代之以零起始的位置。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">如果成功，則會是格式化字串中實際取代最後一個字元的以零起始的位置，否則，會是作業失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述取代作業的結果。 輸出參數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功取代字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value, and then outputs the removal position and descriptive information.">將指定位置或之外的單一字元取代成指定字元值，然後輸出移除位置和描述性資訊。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">取代現有值的 <see cref="T:System.Char" /> 值。</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">搜尋第一個可編輯的字元並加以取代的以零起始的位置。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">如果成功，則會是格式化字串中實際取代最後一個字元的以零起始的位置，否則，會是作業失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述取代作業的結果。 輸出參數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功取代字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string.">從指定的位置開始，將可編輯的字元範圍取代成指定字串。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">用來取代現有可編輯字元的 <see cref="T:System.String" /> 值。</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">搜尋第一個可編輯的字元並加以取代的以零起始的位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功取代所有字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters between the specified starting and ending positions with the specified string, and then outputs the removal position and descriptive information.">將指定起始位置和結束位置之間的可編輯字元範圍取代成指定字串，然後輸出移除位置和描述性資訊。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">用來取代現有可編輯字元的 <see cref="T:System.String" /> 值。</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">格式化字串中要開始取代之以零起始的位置。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">格式化字串中要結束取代之以零起始的位置。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">如果成功，則會是格式化字串中實際取代最後一個字元的以零起始的位置，否則，會是作業失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述取代作業的結果。 輸出參數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功取代所有字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string, and then outputs the removal position and descriptive information.">從指定的位置開始，將可編輯的字元範圍取代成指定字串，然後輸出移除位置和描述性資訊。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">用來取代現有可編輯字元的 <see cref="T:System.String" /> 值。</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">搜尋第一個可編輯的字元並加以取代的以零起始的位置。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">如果成功，則會是格式化字串中實際取代最後一個字元的以零起始的位置，否則，會是作業失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述取代作業的結果。 輸出參數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功取代所有字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary vsli:raw="Gets or sets a value that determines how an input character that matches the prompt character should be handled.">取得或設定值，判斷應如何處理符合提示字元的輸入字元。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character entered as input causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the prompt character is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> 表示輸入的提示字元會造成遮罩中目前的可編輯位置重設，而 <see langword="false" /> 則表示提示字元會當做一般輸入字元處理。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary vsli:raw="Gets or sets a value that determines how a space input character should be handled.">取得或設定值，判斷應如何處理空格輸入字元。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the space input character causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that it is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> 表示空格輸入字元會造成遮罩中目前的可編輯位置重設，而 <see langword="false" /> 則表示當做一般輸入字元處理。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary vsli:raw="Sets the formatted string to the specified input string.">將格式化字串設為指定的輸入字串。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">用來設定格式化字串的 <see cref="T:System.String" /> 值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功設定所有字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Sets the formatted string to the specified input string, and then outputs the removal position and descriptive information.">將格式化字串設為指定的輸入字串，然後輸出移除位置和描述性資訊。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">用來設定格式化字串的 <see cref="T:System.String" /> 值。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually set; otherwise, the first position where the operation failed. An output parameter.">如果成功，則會是格式化字串中實際設定最後一個字元之以零起始的位置，否則，會是作業失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the set operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述設定作業的結果。 輸出參數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功設定所有字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary vsli:raw="Gets or sets a value indicating whether literal character positions in the mask can be overwritten by their same values.">取得或設定值，指出遮罩中的常值字元位置是否可以用其相同值覆寫。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow literals to be added back; otherwise, &lt;see langword=&quot;false&quot; /&gt; to not allow the user to overwrite literal characters. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> 表示允許常值加回，而 <see langword="false" /> 則表示不允許使用者覆寫常值字元。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary vsli:raw="Returns the formatted string in a displayable form.">用可顯示格式傳回格式化字串。</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes prompts and mask literals.">格式化 <see cref="T:System.String" />，包含提示和遮罩常值。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary vsli:raw="Returns the formatted string that includes all the assigned character values.">傳回格式化字串，包含所有指定的字元值。</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values.">格式化 <see cref="T:System.String" />，包含所有指定的字元值。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including password characters.">傳回格式化字串，選擇性包含密碼字元。</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">
        <see langword="true" /> 表示傳回實際的可編輯字元，而 <see langword="false" /> 則表示接受 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 屬性。</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes literals, prompts, and optionally password characters.">格式化 <see cref="T:System.String" />，包含常值、提示和選擇性的密碼字元。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including prompt and literal characters.">傳回格式化字串，選擇性包含提示和常值字元。</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要在傳回字串中包含提示字元，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要在傳回字串中包含常值字元，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values and optionally includes literals and prompts.">格式化 <see cref="T:System.String" />，包含所有指定的字元值，而選擇性包含常值和提示。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt, literal, and password characters.">傳回格式化字串的子字串，選擇性包含提示、常值和密碼字元。</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">
        <see langword="true" /> 表示傳回實際的可編輯字元，而 <see langword="false" /> 則表示接受 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 屬性。</param>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要在傳回字串中包含提示字元，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要在傳回字串中傳回常值字元，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">格式化字串中要開始輸出的以零起始的位置。</param>
      <param name="length" vsli:raw="The number of characters to return.">要傳回的字元數。</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals, prompts, and password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">如果成功，則為格式化 <see cref="T:System.String" /> 的子字串，包含所有指定的字元值，而選擇性包含常值、提示和密碼字元，否則為 <see cref="F:System.String.Empty" /> 字串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt and literal characters.">傳回格式化字串的子字串，選擇性包含提示和常值字元。</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要在傳回字串中包含提示字元，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要在傳回字串中包含常值字元，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">格式化字串中要開始輸出的以零起始的位置。</param>
      <param name="length" vsli:raw="The number of characters to return.">要傳回的字元數。</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals and prompts; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">如果成功，則為格式化 <see cref="T:System.String" /> 的子字串，包含所有指定的字元值，而選擇性包含常值和提示，否則為 <see cref="F:System.String.Empty" /> 字串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including password characters.">傳回格式化字串的子字串，選擇性包含密碼字元。</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">
        <see langword="true" /> 表示傳回實際的可編輯字元，而 <see langword="false" /> 則表示接受 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 屬性。</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">格式化字串中要開始輸出的以零起始的位置。</param>
      <param name="length" vsli:raw="The number of characters to return.">要傳回的字元數。</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes literals, prompts, and optionally password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">如果成功，則為格式化 <see cref="T:System.String" /> 的子字串，包含常值、提示和選擇性的密碼字元，否則為 <see cref="F:System.String.Empty" /> 字串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string.">傳回格式化字串的子字串。</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">格式化字串中要開始輸出的以零起始的位置。</param>
      <param name="length" vsli:raw="The number of characters to return.">要傳回的字元數。</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">如果成功，則為格式化 <see cref="T:System.String" /> 的子字串，包含所有指定的字元值，否則為 <see cref="F:System.String.Empty" /> 字串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified character could be set successfully at the specified position.">測試在指定位置上是否可以成功設定指定的字元。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">要測試的 <see cref="T:System.Char" /> 值。</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">遮罩中要測試輸入字元的位置。</param>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述運算的結果。 輸出參數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character is valid for the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定字元對指定位置有效，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary vsli:raw="Tests whether the specified character would be escaped at the specified position.">測試在指定位置上是否可以逸出指定的字元。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">要測試的 <see cref="T:System.Char" /> 值。</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">遮罩中要測試輸入字元的位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character would be escaped at the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在指定位置可以逸出指定字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary vsli:raw="Tests whether the specified string could be set successfully.">測試是否可以成功設定指定的字串。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">要測試的 <see cref="T:System.String" /> 值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定字串表示有效輸入，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified string could be set successfully, and then outputs position and descriptive information.">測試是否可以成功設定指定的字串，然後輸出位置和描述性資訊。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">要測試的 <see cref="T:System.String" /> 值。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position of the last character actually tested; otherwise, the first position where the test failed. An output parameter.">如果成功，則為最後一個實際測試字元之以零起始的位置，否則為測試失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the test operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述測試作業的結果。 輸出參數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定字串表示有效輸入，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary vsli:raw="Specifies values that succinctly describe the results of a masked text parsing operation.">指定值，簡潔描述遮罩文字剖析作業的結果。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not alphanumeric. .">作業失敗。發現非英數字元的輸入字元。 執行個體時提供 SQL Server 登入。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not a member of the ASCII character set.">作業失敗。發現非 ASCII 字元集成員的輸入字元。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary vsli:raw="Success. The operation succeeded because a literal, prompt or space character was an escaped character. For more information about escaped characters, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)&quot; /&gt; method.">成功。 作業成功，因為常值、提示或空格字元是逸出字元。 如需逸出字元的詳細資訊，請參閱 <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" /> 方法。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a digit.">作業失敗。 發現非數字的輸入字元。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary vsli:raw="Operation did not succeed. The program encountered an input character that was not valid. For more information about characters that are not valid, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)&quot; /&gt; method.">作業失敗。 程式發現無效輸入字元。 如需無效字元的詳細資訊，請參閱 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" /> 方法。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a letter.">作業失敗。 發現非字母的輸入字元。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed; therefore, no side effect was produced.">成功。 主要作業未執行，因為不需要，因此未產生副作用。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary vsli:raw="Operation did not succeed. The current position in the formatted string is a literal character.">作業失敗。 格式化字串中的目前位置是常值字元。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary vsli:raw="Operation did not succeed. The specified position is not in the range of the target string; typically it is either less than zero or greater then the length of the target string.">作業失敗。 指定位置不在目標字串的範圍內，通常是小於零或大於目標字串的長度。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary vsli:raw="Operation did not succeed. The prompt character is not valid at input, perhaps because the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.">作業失敗。 輸入的提示字元無效，可能因為 <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> 屬性設為 <see langword="false" />。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed, but the method produced a side effect. For example, the &lt;see cref=&quot;Overload:System.ComponentModel.MaskedTextProvider.RemoveAt&quot; /&gt; method can delete an unassigned edit position, which causes left-shifting of subsequent characters in the formatted string.">成功。 主要作業未執行，因為不需要，但方法產生副作用。 例如，<see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> 方法可以刪除未指定的編輯位置，造成格式化字串中的後續字元向左移位。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a signed digit.">作業失敗。 發現不是帶正負號數字的輸入字元。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary vsli:raw="Success. The primary operation succeeded.">成功。 主要作業成功。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary vsli:raw="Operation did not succeed. There were not enough edit positions available to fulfill the request.">作業失敗。 編輯位置不足，無法滿足需求。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary vsli:raw="Unknown. The result of the operation could not be determined.">未知。 作業結果未定。</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary vsli:raw="Represents a class member, such as a property or event. This is an abstract base class.">表示類別成員，例如屬性或事件。 這是個抽象基底類別。</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">使用指定的 <see cref="T:System.ComponentModel.MemberDescriptor" /> 初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 類別的新執行個體。</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the member and its attributes.">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，包含成員的名稱和其屬性。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the old &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">使用指定 <see cref="T:System.ComponentModel.MemberDescriptor" /> 中的名稱，以及舊的 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.ComponentModel.MemberDescriptor" /> 陣列的屬性，初始化 <see cref="T:System.Attribute" /> 類別的新執行個體。</summary>
      <param name="oldMemberDescriptor" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，具有成員的名稱和屬性。</param>
      <param name="newAttributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects with the attributes you want to add to the member.">
        <see cref="T:System.Attribute" /> 物件的陣列，具有要加入至成員的屬性。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member.">使用指定的成員名稱，初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the member.">成員的名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">名稱為空字串 ("") 或 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member and an array of attributes.">使用成員的指定名稱和屬性的陣列，初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the member.">成員的名稱。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the member attributes.">
        <see cref="T:System.Attribute" /> 型別的陣列，包含成員屬性。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">名稱為空字串 ("") 或 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary vsli:raw="Gets or sets an array of attributes.">取得或設定屬性的陣列。</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the attributes of this member.">型別 <see cref="T:System.Attribute" /> 的陣列，包含這個成員的屬性。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary vsli:raw="Gets the collection of attributes for this member.">取得這個成員的屬性集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that provides the attributes for this member, or an empty collection if there are no attributes in the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt;.">
        <see cref="T:System.ComponentModel.AttributeCollection" />，提供這個成員的屬性；如果在 <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> 中沒有屬性則為空集合。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary vsli:raw="Gets the name of the category to which the member belongs, as specified in the &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;.">取得成員所屬的分類名稱，如 <see cref="T:System.ComponentModel.CategoryAttribute" /> 中所指定的。</summary>
      <returns vsli:raw="The name of the category to which the member belongs. If there is no &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;, the category name is set to the default category, &lt;see langword=&quot;Misc&quot; /&gt;.">成員所屬的分類名稱。 如果沒有 <see cref="T:System.ComponentModel.CategoryAttribute" />，則分類名稱會設定為預設分類 <see langword="Misc" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary vsli:raw="Creates a collection of attributes using the array of attributes passed to the constructor.">使用傳遞給建構函式的屬性陣列，建立屬性的集合。</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that contains the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt; attributes.">新的 <see cref="T:System.ComponentModel.AttributeCollection" />，包含 <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> 屬性。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary vsli:raw="Gets the description of the member, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;.">取得成員的描述，如 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 中所指定的。</summary>
      <returns vsli:raw="The description of the member. If there is no &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;, the property value is set to the default, which is an empty string (&quot;&quot;).">成員的描述。 如果沒有 <see cref="T:System.ComponentModel.DescriptionAttribute" />，則屬性值會設為預設，即空字串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary vsli:raw="Gets whether this member should be set only at design time, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignOnlyAttribute&quot; /&gt;.">取得值，表示這個成員是否只在設計階段設定，如 <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> 中所指定的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this member should be set only at design time; &lt;see langword=&quot;false&quot; /&gt; if the member can be set during run time.">如果這個成員只應該在設計階段設定，則為 <see langword="true" />；如果成員可在 Run Time 期間設定，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary vsli:raw="Gets the name that can be displayed in a window, such as a Properties window.">取得可在視窗 (例如 [屬性] 視窗) 中顯示的名稱。</summary>
      <returns vsli:raw="The name to display for the member.">要顯示的成員名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this instance to the given object to see if they are equivalent.">比較這個執行個體和指定的物件，以檢視它們是否相等。</summary>
      <param name="obj" vsli:raw="The object to compare to the current instance.">要與目前執行個體相比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="When overridden in a derived class, adds the attributes of the inheriting class to the specified list of attributes in the parent class.">當在衍生類別中覆寫時，將繼承類別的屬性加入父類別中屬性的指定清單。</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">
        <see cref="T:System.Collections.IList" />，列出父類別中的屬性。 這個一開始是空的。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary vsli:raw="Finds the given method through reflection, searching only for public methods.">透過反映搜尋指定的方法，只搜尋公用 (Public) 方法。</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">包含方法的元件。</param>
      <param name="name" vsli:raw="The name of the method to find.">要搜尋的方法名稱。</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">方法的參數陣列，用來在多載的方法之間選擇。</param>
      <param name="returnType" vsli:raw="The type to return for the method.">要傳回的方法型別。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">
        <see cref="T:System.Reflection.MethodInfo" />，表示方法；如果找不到方法，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary vsli:raw="Finds the given method through reflection, with an option to search only public methods.">使用只搜尋公用方法的選項，透過反映搜尋指定的方法。</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">包含方法的元件。</param>
      <param name="name" vsli:raw="The name of the method to find.">要搜尋的方法名稱。</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">方法的參數陣列，用來在多載的方法之間選擇。</param>
      <param name="returnType" vsli:raw="The type to return for the method.">要傳回的方法型別。</param>
      <param name="publicOnly" vsli:raw="Whether to restrict search to public methods.">是否將搜尋限制在公用方法。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">
        <see cref="T:System.Reflection.MethodInfo" />，表示方法；如果找不到方法，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">目前 <see cref="T:System.ComponentModel.MemberDescriptor" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="Retrieves the object that should be used during invocation of members.">擷取應該在成員的引動過程使用的物件。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">引動目標的 <see cref="T:System.Type" />。</param>
      <param name="instance" vsli:raw="The potential invocation target.">可能的引動目標。</param>
      <returns vsli:raw="The object to be used during member invocations.">要在引動成員過程使用的物件。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 或 <paramref name="instance" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary vsli:raw="Gets the component on which to invoke a method.">取得要在其上叫用 (Invoke) 方法的元件。</summary>
      <param name="componentClass" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of component this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; is bound to. For example, if this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; describes a property, this parameter should be the class that the property is declared on.">
        <see cref="T:System.Type" />，表示這個 <see cref="T:System.ComponentModel.MemberDescriptor" /> 所繫結的元件型別。 例如，如果這個 <see cref="T:System.ComponentModel.MemberDescriptor" /> 描述屬性，則這個參數應為宣告屬性的類別。</param>
      <param name="component" vsli:raw="An instance of the object to call.">要呼叫的物件執行個體。</param>
      <returns vsli:raw="An instance of the component to invoke. This method returns a visual designer when the property is attached to a visual designer.">要叫用的元件執行個體。 當屬性附加至視覺化設計工具時，這個方法會傳回視覺化設計工具。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentClass&quot; /&gt; or &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentClass" /> 或 <paramref name="component" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary vsli:raw="Gets a component site for the given component.">取得指定元件的元件站台 (Component Site)。</summary>
      <param name="component" vsli:raw="The component for which you want to find a site.">要為其搜尋站台的元件。</param>
      <returns vsli:raw="The site of the component, or &lt;see langword=&quot;null&quot; /&gt; if a site does not exist.">元件的站台，如果站台不存在，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary vsli:raw="Gets a value indicating whether the member is browsable, as specified in the &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;.">取得值，表示成員是否可瀏覽，如 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 中指定的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is browsable; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If there is no &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;, the property value is set to the default, which is &lt;see langword=&quot;true&quot; /&gt;.">如果成員是可瀏覽的則為 <see langword="true" />，否則為 <see langword="false" />。 如果沒有 <see cref="T:System.ComponentModel.BrowsableAttribute" />，則屬性值會設為預設，即 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary vsli:raw="Gets the name of the member.">取得成員的名稱。</summary>
      <returns vsli:raw="The name of the member.">成員的名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary vsli:raw="Gets the hash code for the name of the member, as specified in &lt;see cref=&quot;M:System.String.GetHashCode&quot; /&gt;.">取得成員名稱的雜湊程式碼，如 <see cref="M:System.String.GetHashCode" /> 中所指定的。</summary>
      <returns vsli:raw="The hash code for the name of the member.">成員名稱的雜湊程式碼。</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary vsli:raw="Provides a type converter to convert multiline strings to a simple string.">提供型別轉換子，將多行字串轉換成簡單字串。</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MultilineStringConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.MultilineStringConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">使用指定的內容和文化特性資訊，將指定值物件轉換成指定類型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 如果傳遞 <see langword="null" /> ，則會採用目前的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">要轉換值參數的目標 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the &lt;paramref name=&quot;value&quot; /&gt; parameter, using the specified context and attributes.">使用指定的內容和屬性 (Attribute)，傳回由 <paramref name="value" /> 數所指定之陣列型別的屬性 (Property) 集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">
        <see cref="T:System.Object" /> ，指定要取得屬性之陣列的型別。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">
        <see cref="T:System.Attribute" /> 類型陣列，可當做篩選條件使用。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有為這個資料型別所公開的屬性，如果沒有屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">會使用指定的內容傳回數值，表示這個物件是否支援屬性。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.ComponentModel.MultilineStringConverter.GetProperties&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果應該呼叫 <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" /> 以尋找這個物件的屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary vsli:raw="Provides the base implementation for the &lt;see cref=&quot;T:System.ComponentModel.INestedContainer&quot; /&gt; interface, which enables containers to have an owning component.">提供 <see cref="T:System.ComponentModel.INestedContainer" /> 介面的簡單實作，讓容器有主控元件。</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NestedContainer&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.NestedContainer" /> 類別的新執行個體。</summary>
      <param name="owner" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">擁有這個巢狀容器的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="owner" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site for the component within the container.">為容器內的元件建立站台。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">要為其建立站台的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">要指派給 <paramref name="component" /> 的名稱，或 <see langword="null" />，表示略過名稱的指派。</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt;.">新建立的 <see cref="T:System.ComponentModel.ISite" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the resources used by the nested container.">釋放巢狀容器所使用的資源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">取得指定型別的服務物件 (如果有的話)。</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">要擷取服務的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that implements the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">實作所要求之服務的 <see cref="T:System.Object" />，或 <see langword="null" /> (如果無法解析服務)。</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for this nested container.">取得這個巢狀容器的主控元件。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">擁有這個巢狀容器的 <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary vsli:raw="Gets the name of the owning component.">取得主控元件的名稱。</summary>
      <returns vsli:raw="The name of the owning component.">主控元件的名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary vsli:raw="Provides automatic conversion between a nullable type and its underlying primitive type.">提供可為 Null 的類型及其基礎基本類型之間的自動轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NullableConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.NullableConverter" /> 類別的新執行個體。</summary>
      <param name="type" vsli:raw="The specified nullable type.">指定的可為 null 型別。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is not a nullable type.">
        <paramref name="type" /> 不是可為 null 的型別。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">會傳回這個轉換子是否可以使用指定內容，將指定型別的物件轉換為這個轉換子的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">傳回這個轉換器是否可以使用指定的內容，將物件轉換成指定的類型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">
        <see cref="T:System.Type" />，代表您想要轉換成的類型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">使用指定的內容和文化特性資訊，將指定物件轉換為這個轉換子的類型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">要用作目前文化特性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">使用指定的內容和文化特性資訊，將指定值物件轉換成指定類型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">要用作目前文化特性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">要轉換值參數的目標 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">使用指定的內容，建立與這個 <see cref="T:System.ComponentModel.TypeConverter" /> 相關聯之類型的執行個體，並為物件提供一組屬性值。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">新屬性值的 <see cref="T:System.Collections.IDictionary" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">代表指定 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Object" />；如果無法建立物件，則為 <see langword="null" />。 這個方法一律會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">會使用指定的內容，傳回在這個物件上變更值是否需要呼叫 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 來建立新值。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在這個物件上變更屬性需要呼叫 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 來建立新的值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">使用指定的內容和屬性 (Attribute)，傳回由值參數所指定之陣列型別的屬性 (Property) 集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">
        <see cref="T:System.Object" /> ，指定要取得屬性之陣列的型別。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">
        <see cref="T:System.Attribute" /> 型別的陣列，可當做篩選條件使用。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有為這個資料型別所公開的屬性，如果沒有屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">會使用指定的內容傳回數值，表示這個物件是否支援屬性。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果應該呼叫 <see langword="true" /> 以尋找這個物件的屬性則為 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">當有提供格式內容時，會傳回這個型別轉換子設計之資料型別的標準值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供可用於擷取轉換子叫用 (Invoke) 環境之其他資訊的格式內容。 這個參數或這個參數的屬性可為 <see langword="null" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 會保留標準有效值的集合，如果資料型別不支援標準值集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;Overload:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">會使用指定的內容，傳回從 <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" /> 所傳回的標準值集合是否為可能值的獨佔清單。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">如果從 <see langword="true" /> 傳回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的獨占清單則為 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />，如果其他的值為可能則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">會使用指定的內容傳回，這個物件是否支援可從清單中挑選的標準值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果應該呼叫 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 以尋找物件支援的通用值集合，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">會傳回指定值物件是否對這個型別和指定的內容有效。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">要測試有效性的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定值對這個物件有效，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary vsli:raw="Gets the nullable type.">取得可為 null 的型別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the nullable type.">
        <see cref="T:System.Type" />，表示可為 null 的型別。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary vsli:raw="Gets the underlying type.">取得基礎型別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the underlying type.">表示基礎型別的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary vsli:raw="Gets the underlying type converter.">取得基礎型別轉換子。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that represents the underlying type converter.">表示基礎型別轉換子的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary vsli:raw="Indicates that an object's text representation is obscured by characters such as asterisks. This class cannot be inherited.">指出以星號之類的字元來遮蔽物件的文字表示。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class, optionally showing password text.">初始化 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 類別的新執行個體，選擇性顯示密碼文字。</summary>
      <param name="password" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示屬性應該顯示為密碼文字，否則為 <see langword="false" />。 預設為 <see langword="false" />。</param>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">指定 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 的預設值。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; instances are equal.">判斷兩個 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 執行個體是否相等。</summary>
      <param name="o" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">與目前的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 相比較的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 和目前的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">目前 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns an indication whether the value of this instance is the default value.">傳回此執行個體的值是否為預設值之指示。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個執行個體為預設屬性的類別，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary vsli:raw="Specifies that a text property is not used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">指定文字屬性不做為密碼。 這個 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />) 欄位是唯讀的。</summary>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary vsli:raw="Gets a value indicating if the property for which the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is defined should be shown as password text.">取得值，指出已定義 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 的屬性是否應顯示為密碼文字。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果屬性應該顯示為密碼文字，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary vsli:raw="Specifies that a text property is used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">指定文字屬性做為密碼。 這個 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />) 欄位是唯讀的。</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary vsli:raw="Provides an abstraction of a property on a class.">提供類別上屬性的抽象。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">使用指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 中的名稱和屬性，初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 類別的新執行個體。</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the property and its attributes.">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，包含屬性的名稱和其屬性。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">使用指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 中的名稱，以及 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.ComponentModel.MemberDescriptor" /> 陣列中的屬性，初始化 <see cref="T:System.Attribute" /> 類別的新執行個體。</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; containing the name of the member and its attributes.">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，包含成員名稱和其屬性。</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array containing the attributes you want to associate with the property.">
        <see cref="T:System.Attribute" /> 陣列，含有要與屬性 (Property) 關聯的屬性 (Attribute)。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the specified name and attributes.">使用指定的名稱和屬性，初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the property.">屬性的名稱。</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the property attributes.">
        <see cref="T:System.Attribute" /> 型別的陣列，包含 Property 屬性。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">使其他物件能在這個屬性變更時受到告知。</summary>
      <param name="component" vsli:raw="The component to add the handler for.">要為其加入處理常式的元件。</param>
      <param name="handler" vsli:raw="The delegate to add as a listener.">要加入以做為接聽程式 (Listener) 的委派。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 或 <paramref name="handler" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, returns whether resetting an object changes its value.">在衍生類別中覆寫時，傳回重設物件是否變更其值。</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">要測試重設能力的元件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes its value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果重設元件會變更其值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the component this property is bound to.">在衍生類別中覆寫時，取得這個屬性所繫結的元件型別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component this property is bound to. When the &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)&quot; /&gt; methods are invoked, the object specified might be an instance of this type.">
        <see cref="T:System.Type" />，表示這個屬性所繫結的元件型別。 當叫用 <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> 或 <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> 方法時，指定的物件可能是這個型別的執行個體。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary vsli:raw="Gets the type converter for this property.">取得這個屬性的型別轉換子。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is used to convert the &lt;see cref=&quot;T:System.Type&quot; /&gt; of this property.">
        <see cref="T:System.ComponentModel.TypeConverter" />，用來轉換這個屬性的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary vsli:raw="Creates an instance of the specified type.">建立指定類型的執行個體。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">
        <see cref="T:System.Type" />，表示要建立的型別。</param>
      <returns vsli:raw="A new instance of the type.">型別的新執行個體。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this to another object to see if they are equivalent.">比較這個與另一個物件，以檢視它們是否相等。</summary>
      <param name="obj" vsli:raw="The object to compare to this &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">與這個 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 相比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果值相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="Adds the attributes of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the specified list of attributes in the parent class.">將 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的屬性加入至父類別中的指定屬性清單。</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">
        <see cref="T:System.Collections.IList" />，列出父類別中的屬性。 這個一開始是空的。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt;.">傳回預設的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <returns vsli:raw="A collection of property descriptor.">屬性描述元的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; using a specified array of attributes as a filter.">使用指定的屬性陣列做為篩選條件，傳回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">做為篩選條件使用的 <see cref="T:System.Attribute" /> 類型陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有與指定屬性 (Attribute) 相符的屬性 (Property)。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object.">傳回指定物件的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">要為其取得屬性的元件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">具有指定元件之屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object using a specified array of attributes as a filter.">使用指定的屬性陣列做為篩選條件，傳回指定物件的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">要為其取得屬性的元件。</param>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">
        <see cref="T:System.Attribute" /> 型別的陣列，可用來當做篩選條件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，其屬性 (Property) 符合指定元件的指定屬性 (Attribute)。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Gets an editor of the specified type.">取得指定型別的編輯器。</summary>
      <param name="editorBaseType" vsli:raw="The base type of editor, which is used to differentiate between multiple editors that a property supports.">編輯器的基底型別 (Base Type)，用來區分屬性支援的多個編輯器。</param>
      <returns vsli:raw="An instance of the requested editor type, or &lt;see langword=&quot;null&quot; /&gt; if an editor cannot be found.">要求的編輯器型別的執行個體，或者如果找不到，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">傳回這個物件的雜湊程式碼。</summary>
      <returns vsli:raw="The hash code for this object.">這個物件的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="This method returns the object that should be used during invocation of members.">這個方法會傳回應該在成員的引動過程使用的物件。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">引動目標的 <see cref="T:System.Type" />。</param>
      <param name="instance" vsli:raw="The potential invocation target.">可能的引動目標。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; that should be used during invocation of members.">
        <see cref="T:System.Object" />，應該在成員的引動過程使用。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary vsli:raw="Returns a type using its name.">使用其名稱以傳回型別。</summary>
      <param name="typeName" vsli:raw="The assembly-qualified name of the type to retrieve.">要擷取型別的組件限定名稱。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that matches the given type name, or &lt;see langword=&quot;null&quot; /&gt; if a match cannot be found.">符合指定型別名稱的 <see cref="T:System.Type" />，或者如果找不到符合的指定型別名稱，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, gets the current value of the property on a component.">在衍生類別中覆寫時，取得元件上屬性的目前值。</summary>
      <param name="component" vsli:raw="The component with the property for which to retrieve the value.">具有要為其擷取值之屬性的元件。</param>
      <returns vsli:raw="The value of a property for a given component.">指定元件的屬性值。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary vsli:raw="Retrieves the current set of &lt;c&gt;ValueChanged&lt;/c&gt; event handlers for a specific component.">擷取特定元件目前的 <c>ValueChanged</c> 事件處理常式集。</summary>
      <param name="component" vsli:raw="The component for which to retrieve event handlers.">為其擷取事件處理常式的元件。</param>
      <returns vsli:raw="A combined multicast event handler, or &lt;see langword=&quot;null&quot; /&gt; if no event handlers are currently assigned to &lt;paramref name=&quot;component&quot; /&gt;.">組合的多點傳送事件處理常式；如果目前沒有指定給 <paramref name="component" /> 的事件處理常式，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary vsli:raw="Gets a value indicating whether this property should be localized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt;.">取得值，表示這個屬性是否應該當地語系化，如 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 中指定的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is marked with the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt; set to &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成員是以設為 <see langword="true" /> 的 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 標記則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether this property is read-only.">在衍生類別中覆寫時，取得數值以指示這個屬性是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果屬性是唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary vsli:raw="Raises the &lt;c&gt;ValueChanged&lt;/c&gt; event that you implemented.">引發您之前實作的 <c>ValueChanged</c> 事件。</summary>
      <param name="component" vsli:raw="The object that raises the event.">引發事件的物件。</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the property.">在衍生類別中覆寫時，取得屬性的型別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">
        <see cref="T:System.Type" />，表示屬性的型別。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">使其他物件能在這個屬性變更時受到告知。</summary>
      <param name="component" vsli:raw="The component to remove the handler for.">要為其移除處理常式的元件。</param>
      <param name="handler" vsli:raw="The delegate to remove as a listener.">要移除以做為接聽程式的委派。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 或 <paramref name="handler" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, resets the value for this property of the component to the default value.">在衍生類別中覆寫時，將元件的這個屬性值重設為預設值。</summary>
      <param name="component" vsli:raw="The component with the property value that is to be reset to the default value.">屬性值要重設為預設值的元件。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary vsli:raw="Gets a value indicating whether this property should be serialized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibilityAttribute&quot; /&gt;.">取得值，表示這個屬性是否應該序列化，如 <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> 中指定的。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibility&quot; /&gt; enumeration values that specifies whether this property should be serialized.">其中一個 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 列舉值，指定這個屬性是否應該序列化。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary vsli:raw="When overridden in a derived class, sets the value of the component to a different value.">在衍生類別中覆寫時，將元件的值設定為不同的值。</summary>
      <param name="component" vsli:raw="The component with the property value that is to be set.">屬性值將要設定的元件。</param>
      <param name="value" vsli:raw="The new value.">新值。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.">在衍生類別中覆寫時，判斷指示這個屬性的值是否需要保存的值。</summary>
      <param name="component" vsli:raw="The component with the property to be examined for persistence.">元件，具有要檢查保存性 (Persistence) 的屬性。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be persisted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果屬性應該要保存，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary vsli:raw="Gets a value indicating whether value change notifications for this property may originate from outside the property descriptor.">取得值，表示這個屬性的數值變更告知是否可能來自屬性描述項之外。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if value change notifications may originate from outside the property descriptor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果數值變更告知可能來自屬性描述項之外則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">表示 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 類別的新執行個體。</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 型別的陣列，提供這個集合的屬性。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class, which is optionally read-only.">初始化 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 類別的新執行個體，可以選擇這個類別是否為唯讀。</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 型別的陣列，提供這個集合的屬性。</param>
      <param name="readOnly" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, specifies that the collection cannot be modified.">如果是 <see langword="true" />，表示無法修改集合。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection.">將指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 加入至集合。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">要加入至集合的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added to the collection.">已加入至集合之 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary vsli:raw="Removes all &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects from the collection.">從集合中移除所有 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">傳回值，表示集合是否含有指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to find in the collection.">要在集合中尋找的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合含有指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 參數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to an array, starting at the specified index number.">將整個集合複製至陣列，開始於指定的索引編號。</summary>
      <param name="array" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to copy elements of the collection to.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件的陣列，用於複製集合的元素。</param>
      <param name="index" vsli:raw="The index of the &lt;paramref name=&quot;array&quot; /&gt; parameter at which copying begins.">
        <paramref name="array" /> 參數的索引，位於複製開始的位置。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of property descriptors in the collection.">取得這個集合中屬性描述項的數目。</summary>
      <returns vsli:raw="The number of property descriptors in the collection.">這個集合中屬性描述項的數目。</returns>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use instead of creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定您可以使用的空集合，而不必建立沒有項目的新集合。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, using a Boolean to indicate whether to ignore case.">使用布林值 (Boolean) 指示是否忽略大小寫，並以指定的名稱傳回 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return from the collection.">要從集合中傳回的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 名稱。</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the property name; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果您要忽略屬性名稱的大小寫，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">具有指定名稱的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 或 <see langword="null" /> (如果屬性不存在)。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">傳回這個類別的列舉值。</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 型別的列舉程式。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">傳回指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return the index of.">要傳回索引的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection at the specified index number.">在指定的索引編號將 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 加入集合。</summary>
      <param name="index" vsli:raw="The index at which to add the &lt;paramref name=&quot;value&quot; /&gt; parameter to the collection.">要將 <paramref name="value" /> 參數加入集合的索引處。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">要加入至集合的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">使用指定的 <see cref="T:System.Collections.IComparer" />，排序這個集合的成員。</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">比較子，用於將這個集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件排序。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">排序這個集合的成員。 首先會套用指定的順序，其後是這個集合的預設排序，通常是依字母順序。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">字串的陣列，描述要將這個集合中 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件排序的順序。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index number.">取得或設定在指定索引編號的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get or set.">要取得或設定的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的以零起始的索引。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified index number.">具有指定索引編號的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)&quot; /&gt;.">
        <paramref name="index" /> 參數不是 <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" /> 的有效索引。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name.">取得或設定具有指定之名稱的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get from the collection.">要從集合中取得的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 名稱。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">具有指定名稱的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 或 <see langword="null" /> (如果屬性不存在)。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the collection.">從集合移除指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">要從集合中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index from the collection.">從集合中移除指定索引處的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">要從集合中移除之 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this collection, using the default sort for this collection, which is usually alphabetical.">使用這個集合的預設排序，通常是依字母順序，排序這個集合的成員。</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含已排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">使用指定的 <see cref="T:System.Collections.IComparer" />，排序這個集合的成員。</summary>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">比較子，用於將這個集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件排序。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含已排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">排序這個集合的成員。 首先會套用指定的順序，其後是這個集合的預設排序，通常是依字母順序。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">字串的陣列，描述要將這個集合中 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件排序的順序。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含已排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the sort using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">排序這個集合的成員。 首先會套用指定的順序，其後是使用指定 <see cref="T:System.Collections.IComparer" /> 的排序。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">字串的陣列，描述要將這個集合中 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件排序的順序。</param>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">比較子，用於將這個集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件排序。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含已排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">取得集合所包含的項目數目。</summary>
      <returns vsli:raw="The number of elements contained in the collection.">集合中所包含的項目數目。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread safe).">取得值，表示是否同步化存取集合 (執行緒安全)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果同步處理對集合的存取 (具備執行緒安全)，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">取得物件，這個物件可以用來對集合進行同步存取。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Object，可用來對集合同步存取。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">將隨附有索引鍵和值的項目加入至 <see cref="T:System.Collections.IDictionary" />。</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the key of the element to add.">
        <see cref="T:System.Object" />，用做要加入之項目的索引鍵。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the value of the element to add.">
        <see cref="T:System.Object" />，用做要加入之項目的值。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">移除 <see cref="T:System.Collections.IDictionary" /> 中的所有項目。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">判斷 <see cref="T:System.Collections.IDictionary" /> 是否包含具有指定之索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">要在 <see cref="T:System.Collections.IDictionary" /> 中尋找的索引鍵。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 包含具有該索引鍵的項目，則為 <see cref="T:System.Collections.IDictionary" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">傳回這個類別的列舉值。</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 型別的列舉程式。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">取得值，指出 <see cref="T:System.Collections.IDictionary" /> 是否有固定的大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IDictionary" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">取得值，指出 <see cref="T:System.Collections.IDictionary" /> 是否唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.IDictionary" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">取得或設定具有指定索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key of the element to get or set.">要取得或設定之項目的索引鍵。</param>
      <returns vsli:raw="The element with the specified key.">具有指定索引鍵的項目。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">取得 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的索引鍵。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的索引鍵。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">從 <see cref="T:System.Collections.IDictionary" /> 中移除具有指定之索引鍵的項目。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的項目索引鍵。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">取得 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">傳回 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">將項目加入至 <see cref="T:System.Collections.IList" />。</summary>
      <param name="value" vsli:raw="The item to add to the collection.">要新增至集合中的項目。</param>
      <returns vsli:raw="The position into which the new element was inserted.">插入新項目的位置。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">移除集合的所有項目。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">判斷此集合是否包含特定的值。</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">要在集合中尋找的項目。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在集合中找到項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specified item in the collection.">判斷集合中指定項目的索引。</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">要在集合中尋找的項目。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list, otherwise -1.">如果在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">在指定的索引位置，插入項目至集合之中。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value" vsli:raw="The item to insert into the collection.">要插入集合中的項目。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">取得值，這個值表示集合的大小是否是固定的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合具有固定大小，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">取得值，表示集合是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合是唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets an item from the collection at a specified index.">從集合中取得或設定在指定索引的項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to get or set.">要取得或設定的項目之以零起始的索引。</param>
      <returns vsli:raw="The element at the specified index.">在指定索引上的項目。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">
        <paramref name="value" /> 不是 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">
        <paramref name="index" /> 小於 0。
-或-
<paramref name="index" /> 等於或大於 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specified value from the collection.">從集合中移除指定值的第一個符合項目。</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">要從集合中移除的項目。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">移除在指定索引處的項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">集合是唯讀的。</exception>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary vsli:raw="Identifies the property tab or tabs to display for the specified class or classes.">識別屬性索引標籤，以顯示給指定的類別 (Class)。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name.">使用指定的索引標籤類別名稱，初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 類別的新執行個體。</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">要建立之索引標籤型別的組件限定名稱。 如需這個格式慣例的範例，請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name and tab scope.">使用指定的索引標籤類別名稱和索引標籤範圍 (Scope)，初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 類別的新執行個體。</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">要建立之索引標籤型別的組件限定名稱。 如需這個格式慣例的範例，請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />。</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">
        <see cref="T:System.ComponentModel.PropertyTabScope" />，表示這個索引標籤的範圍。如果範圍為 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />，則只會以對應之 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 顯示元件的範圍。 如果是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，則會顯示文件上所有元件的範圍。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">
        <paramref name="tabScope" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab.">使用指定的索引標籤型別，初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 類別的新執行個體。</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">要建立的索引標籤型別。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab and tab scope.">使用指定的索引標籤型別和索引標籤範圍，初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 類別的新執行個體。</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">要建立的索引標籤型別。</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">
        <see cref="T:System.ComponentModel.PropertyTabScope" />，表示這個索引標籤的範圍。如果範圍為 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />，則只會以對應之 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 顯示元件的範圍。 如果是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，則會顯示文件上所有元件的範圍。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">
        <paramref name="tabScope" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified attribute.">傳回值，表示這個執行個體是否等於指定的屬性。</summary>
      <param name="other" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">要與這個執行個體進行比較的 <see cref="T:System.ComponentModel.PropertyTabAttribute" />，或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 執行個體相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter cannot be found.">找不到 <paramref name="other" /> 參數之 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 屬性所指定的型別。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="other" vsli:raw="An object to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">要與這個執行個體相比較的物件，或為 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; refers to the same &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="other" /> 參考相同的 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 執行個體，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter could not be found.">找不到 <paramref name="other" /> 參數的 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 屬性所指定的類型。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary vsli:raw="Gets the hash code for this object.">取得這個物件的雜湊程式碼。</summary>
      <returns vsli:raw="The hash code for the object the attribute belongs to.">屬性所屬物件的雜湊程式碼。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">使用指定索引標籤類別的名稱和索引標籤範圍的陣列，初始化屬性。</summary>
      <param name="tabClassNames" vsli:raw="An array of fully qualified type names of the types to create for tabs on the Properties window.">型別之完整型別名稱的陣列，用於在 [屬性] 視窗建立索引標籤。</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">每個索引標籤的範圍。如果範圍為 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />，則只會以對應之 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 顯示元件的範圍。 如果是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，則會顯示文件上所有元件的範圍。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="tabScopes" /> 中的一或多個值不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。
-或-
<paramref name="tabClassNames" /> 和 <paramref name="tabScopes" /> 陣列的長度不相符。
-或-
<paramref name="tabClassNames" /> 或 <paramref name="tabScopes" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">使用指定索引標籤類別的名稱和索引標籤範圍的陣列，初始化屬性。</summary>
      <param name="tabClasses" vsli:raw="The types of tabs to create.">要建立的索引標籤型別。</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">每個索引標籤的範圍。如果範圍為 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />，則只會以對應之 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 顯示元件的範圍。 如果是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，則會顯示文件上所有元件的範圍。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="tabScopes" /> 中的一或多個值不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。
-或-
<paramref name="tabClassNames" /> 和 <paramref name="tabScopes" /> 陣列的長度不相符。
-或-
<paramref name="tabClassNames" /> 或 <paramref name="tabScopes" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary vsli:raw="Gets the types of tabs that this attribute uses.">取得這個屬性使用的索引標籤型別。</summary>
      <returns vsli:raw="An array of types indicating the types of tabs that this attribute uses.">型別的陣列，表示這個屬性使用的索引標籤型別。</returns>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property could not be found.">找不到 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 屬性所指定的型別。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary vsli:raw="Gets the names of the tab classes that this attribute uses.">取得這個屬性使用之索引標籤類別的名稱。</summary>
      <returns vsli:raw="The names of the tab classes that this attribute uses.">這個屬性使用之索引標籤類別的名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary vsli:raw="Gets an array of tab scopes of each tab of this &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;.">取得陣列，該陣列為這個 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 之每個索引標籤的索引標籤範圍。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; objects that indicate the scopes of the tabs.">
        <see cref="T:System.ComponentModel.PropertyTabScope" /> 物件的陣列，表示索引標籤的範圍。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary vsli:raw="Defines identifiers that indicate the persistence scope of a tab in the Properties window.">定義識別項，表示 [屬性] 視窗中索引標籤的保存性 (Persistence) 範圍。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary vsli:raw="This tab is specific to the current component. This tab is added to the Properties window for the current component only and is removed when the component is no longer selected.">這個索引標籤是針對目前的元件。 這個索引標籤只會加入至目前元件的 [屬性] 視窗，並且當元件不再被選取時移除。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary vsli:raw="This tab is specific to the current document. This tab is added to the Properties window and is removed when the currently selected document changes.">這個索引標籤是針對目前的文件。 這個索引標籤只會加入至 [屬性] 視窗，並且當目前選取的文件變更時移除。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary vsli:raw="This tab is added to the Properties window and can only be removed explicitly by a parent component.">這個索引標籤會加入至 [屬性] 視窗，並且只有父代 (Parent) 元件才能明確將它移除。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary vsli:raw="This tab is added to the Properties window and cannot be removed.">這個索引標籤會加入至 [屬性] 視窗，並且無法將它移除。</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary vsli:raw="Specifies the name of the property that an implementer of &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; offers to other components. This class cannot be inherited.">指定 <see cref="T:System.ComponentModel.IExtenderProvider" /> 的實作器提供給其他元件的屬性名稱。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and the type of its receiver.">使用屬性名稱和其接收者的型別來初始化 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">擴充至指定型別的物件的屬性名稱。</param>
      <param name="receiverTypeName" vsli:raw="The name of the data type this property can extend.">這個屬性可擴充的資料型別名稱。</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and its &lt;see cref=&quot;T:System.Type&quot; /&gt;.">使用屬性和其 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 的名稱，初始化 <see cref="T:System.Type" /> 類別的新執行個體。</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">擴充至指定型別的物件的屬性名稱。</param>
      <param name="receiverType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the data type of the object that can receive the property.">物件資料型別的 <see cref="T:System.Type" />，此物件可以接受該屬性。</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />。</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">測試其數值相等的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">目前 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary vsli:raw="Gets the name of a property that this class provides.">取得這個類別提供的屬性名稱。</summary>
      <returns vsli:raw="The name of a property that this class provides.">這個類別提供的屬性名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary vsli:raw="Gets the name of the data type this property can extend.">取得這個屬性可擴充的資料型別名稱。</summary>
      <returns vsli:raw="The name of the data type this property can extend.">這個屬性可擴充的資料型別名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary vsli:raw="Gets a unique identifier for this attribute.">取得這個屬性的唯一識別項。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that is a unique identifier for the attribute.">
        <see cref="T:System.Object" />，屬性的唯一識別項。</returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary vsli:raw="Specifies that the property can be used as an application setting.">指定可用來做為應用程式設定的屬性。</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 類別的新執行個體。</summary>
      <param name="recommendedAsConfigurable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個屬性 (Attribute) 繫結的屬性 (Property) 可以當做應用程式設定來使用則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.RecommendedAsConfigurableAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 的預設值，就是 <see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">指示這個執行個體和指定的物件是否相等。</summary>
      <param name="obj" vsli:raw="Another object to compare to.">要比較的另一個物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 等於這個執行個體則為 <paramref name="obj" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;.">目前 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Indicates whether the value of this instance is the default value for the class.">表示此執行個體的值是否為此類別的預設值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個執行個體為預設屬性的類別，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary vsli:raw="Specifies that a property cannot be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定無法用來做為應用程式設定的屬性。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary vsli:raw="Gets a value indicating whether the property this attribute is bound to can be used as an application setting.">取得值，表示這個屬性 (Attribute) 繫結的屬性 (Property) 是否可用來做為應用程式設定。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個屬性 (Attribute) 繫結的屬性 (Property) 可以當做應用程式設定來使用則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary vsli:raw="Specifies that a property can be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定可用來做為應用程式設定的屬性。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary vsli:raw="Provides a type converter to convert object references to and from other representations.">提供型別轉換子 (Type Converter) 將物件參考與其他表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ReferenceConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ReferenceConverter" /> 類別的新執行個體。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this reference converter.">
        <see cref="T:System.Type" />，表示要與這個參考轉換子產生關聯的型別。</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a reference object using the specified context.">取得值，指出此轉換子是否可以使用指定的內容，將指定來源型別中的物件轉換成參考物件。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個物件可以執行轉換則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the reference type.">將指定的物件轉換為參考型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">
        <see cref="T:System.Globalization.CultureInfo" />，指定用於表示字型的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the reference type using the specified context and arguments.">使用指定的內容和引數將指定值物件轉換成參考型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">
        <see cref="T:System.Globalization.CultureInfo" />，指定用於表示字型的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">要將物件轉換成的類型。</param>
      <returns vsli:raw="The converted object.">轉換的物件。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the reference data type.">取得參考資料型別的標準值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 會保留標準有效值的集合，如果資料型別不支援標準值集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exclusive list.">取得值，表示從 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 所傳回的標準值清單是否為獨佔清單。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">因為從 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 傳回的 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能值的詳盡清單，所以會是 <see langword="true" />。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">取得值，表示這個物件是否支援可以從清單選取的標準值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">因為可以呼叫 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 來尋找物件支援的通用值集合，所以會是 <see langword="true" />。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value indicating whether a particular value can be added to the standard values collection.">傳回值，指出特定值是否可以加入至標準值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides an additional context.">提供其他內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The value to check.">要檢查的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is allowed and can be added to the standard values collection; &lt;see langword=&quot;false&quot; /&gt; if the value cannot be added to the standard values collection.">如果值是允許且可以加入至標準值集合，則為 <see langword="true" />；如果值不可加入至標準值集合，則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event.">提供 <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the component that has changed.">使用已經變更的元件來初始化 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 類別的新執行個體。</summary>
      <param name="componentChanged" vsli:raw="The component that changed.">已變更的元件。</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the type of component that has changed.">使用已變更元件的類型來初始化 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 類別的新執行個體。</summary>
      <param name="typeChanged" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">已變更的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary vsli:raw="Gets the component that changed its properties, events, or extenders.">取得已變更其屬性、事件或擴充項 (Extender) 的元件。</summary>
      <returns vsli:raw="The component that changed its properties, events, or extenders, or &lt;see langword=&quot;null&quot; /&gt; if all components of the same type have changed.">已變更其屬性、事件或擴充項 (Extender) 的元件；如果相同類型的所有元件已經變更，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">取得已變更其屬性或事件的 <see cref="T:System.Type" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">已變更其屬性或事件的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event raised when a &lt;see cref=&quot;T:System.Type&quot; /&gt; or component is changed during design time.">表示當 <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 或元件在設計階段期間變更時，會處理所引發 <see cref="T:System.Type" /> 事件的方法。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; that contains the component or &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">
        <see cref="T:System.ComponentModel.RefreshEventArgs" />，含有已變更的元件或 <see cref="T:System.Type" />。</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary vsli:raw="Specifies whether the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed.">指定在安裝組件時是否應該叫用 Visual Studio Custom Action Installer 或 Installutil.exe (安裝程式工具)。</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 類別的新執行個體。</summary>
      <param name="runInstaller" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果安裝組件時應該叫用安裝程式則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary vsli:raw="Specifies the default visibility, which is &lt;see cref=&quot;F:System.ComponentModel.RunInstallerAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">設定預設可見度，即 <see cref="F:System.ComponentModel.RunInstallerAttribute.No" />。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the value of the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equivalent to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">判斷指定之 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 的值是否與目前的 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 相等。</summary>
      <param name="obj" vsli:raw="The object to compare.">要比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 和目前的 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary vsli:raw="Generates a hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">產生目前 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 的雜湊程式碼。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">目前 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">判斷這個屬性是否為預設值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果屬性是這個屬性類別的預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should not be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定在安裝組件時不要叫用 Visual Studio Custom Action Installer 或 Installutil.exe (安裝程式工具)。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary vsli:raw="Gets a value indicating whether an installer should be invoked during installation of an assembly.">取得值，指出在安裝組件時是否要叫用安裝程式。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果安裝組件時應該叫用安裝程式則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">指定在安裝組件時應該要叫用 Visual Studio Custom Action Installer 或 Installutil.exe (安裝程式工具)。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from a string.">提供型別轉換子 (Type Converter) 將 8 位元不帶正負號的整數 (Unsigned Integer) 物件與其他字串相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SByteConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.SByteConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary vsli:raw="Specifies when a component property can be bound to an application setting.">指定元件屬性可以繫結至應用程式設定的時間。</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SettingsBindableAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.SettingsBindableAttribute" /> 類別的新執行個體。</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that a property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 指定屬性適合繫結設定，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating whether a property is appropriate to bind settings to.">取得值，指出屬性是否適合繫結設定。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果屬性適合繫結設定，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">要與這個執行個體進行比較的 <see cref="T:System.Object" />，或 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not appropriate to bind settings to.">指定屬性不適合繫結設定。</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is appropriate to bind settings to.">指定屬性適合繫結設定。</summary>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary vsli:raw="Provides a type converter to convert single-precision, floating point number objects to and from various other representations.">提供型別轉換子 (Type Converter) 將單精確度浮點數、浮點數物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SingleConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.SingleConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary vsli:raw="Provides a type converter to convert string objects to and from other representations.">提供型別轉換子 (Type Converter) 將字串物件與其他表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.StringConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.StringConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a string using the specified context.">取得值，表示此轉換器是否可以用指定的內容將指定來源型別的物件轉換成字串。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">將指定值物件轉換為 <see cref="T:System.String" /> 物件。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use.">要使用的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">無法執行轉換。</exception>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary vsli:raw="Provides methods to verify the machine name and path conform to a specific syntax. This class cannot be inherited.">提供方法來驗證機器名稱以及遵循特定語法的路徑。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary vsli:raw="Checks the syntax of the machine name to confirm that it does not contain &quot;\&quot;.">檢查機器名稱的語法，確認它並未包含 "\"。</summary>
      <param name="value" vsli:raw="A string containing the machine name to check.">字串，包含要檢查的機器名稱。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper machine name format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 符合適當的機器名稱格式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see whether it starts with &quot;\\&quot;.">檢查路徑的語法，查看它的開頭是否為 "\\"。</summary>
      <param name="value" vsli:raw="A string containing the path to check.">字串，包含要檢查的路徑。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 符合適當的路徑格式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see if it starts with &quot;\&quot; or drive letter &quot;C:&quot;.">檢查路徑的語法，查看它是否以 "\" 或磁碟機代號 "C:" 開頭。</summary>
      <param name="value" vsli:raw="A string containing the path to check.">字串，包含要檢查的路徑。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 符合適當的路徑格式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; objects to and from other representations.">提供型別轉換子 (Type Converter) 將 <see cref="T:System.TimeSpan" /> 物件與其他表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TimeSpanConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.TimeSpanConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; using the specified context.">取得值，表示這個轉換子是否可以使用指定的內容，將指定來源型別中的物件轉換成 <see cref="T:System.TimeSpan" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">
        <see cref="T:System.Type" />，表示要轉換為何種目標型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> 對於目標型別並不是有效的值。</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;.">將指定物件轉換為 <see cref="T:System.TimeSpan" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">選擇性 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供，則會假設使用目前的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> 對於目標型別並不是有效的值。</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">將指定的物件轉換為另一個型別。</summary>
      <param name="context" vsli:raw="A formatter context.">格式子 (Formatter) 內容。</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" /> 所要轉換成的文化特性 (Culture)。</param>
      <param name="value" vsli:raw="The object to convert.">要轉換的物件。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">要將物件轉換成的類型。</param>
      <returns vsli:raw="The converted object.">轉換的物件。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary vsli:raw="Represents an attribute of a toolbox item.">代表工具箱項目的屬性。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and specifies whether to use default initialization values.">初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 類別的新執行個體，並且指定是否使用預設的初始設定值。</summary>
      <param name="defaultType" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to create a toolbox item attribute for a default type; &lt;see langword=&quot;false&quot; /&gt; to associate no default toolbox item support for this attribute.">
        <see langword="true" />，為預設型別建立工具箱項目屬性；<see langword="false" />，則為這個屬性沒有關聯的預設工具箱項目支援。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified name of the type.">使用指定的型別名稱，初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 類別的新執行個體。</summary>
      <param name="toolboxItemTypeName" vsli:raw="The names of the type of the toolbox item and of the assembly that contains the type.">工具箱項目型別的名稱，以及包含型別的組件。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified type of the toolbox item.">使用指定的工具箱項目型別，初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 類別的新執行個體。</summary>
      <param name="toolboxItemType" vsli:raw="The type of the toolbox item.">工具箱項目的型別。</param>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to the default, &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;. This field is read-only.">初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 類別的新執行個體，並設定型別為預設值 <see cref="T:System.Drawing.Design.ToolboxItem" />。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">要與這個執行個體進行比較的 <see cref="T:System.Object" />，或 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">取得值，指出目前屬性值是否為屬性的預設值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果屬性目前的值是預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to &lt;see langword=&quot;null&quot; /&gt;. This field is read-only.">初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 類別的新執行個體，並將型別設定為 <see langword="null" />。 此欄位為唯讀。</summary>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary vsli:raw="Gets or sets the type of the toolbox item.">取得或設定工具箱項目的型別。</summary>
      <returns vsli:raw="The type of the toolbox item.">工具箱項目的型別。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The type cannot be found.">找不到型別。</exception>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary vsli:raw="Gets or sets the name of the type of the current &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;.">取得或設定目前 <see cref="T:System.Drawing.Design.ToolboxItem" /> 型別的名稱。</summary>
      <returns vsli:raw="The fully qualified type name of the current toolbox item.">目前工具箱項目的完整型別名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary vsli:raw="Specifies the filter string and filter type to use for a toolbox item.">指定要用於工具箱項目的篩選條件字串和篩選條件型別。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string.">使用指定的篩選條件字串來初始化 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 類別的新執行個體。</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">工具箱項目的篩選條件字串。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string and type.">使用指定的篩選條件字串和型別來初始化 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 類別的新執行個體。</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">工具箱項目的篩選條件字串。</param>
      <param name="filterType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; indicating the type of the filter.">指示篩選條件型別的 <see cref="T:System.ComponentModel.ToolboxItemFilterType" />。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">要與這個執行個體進行比較的 <see cref="T:System.Object" />，或 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary vsli:raw="Gets the filter string for the toolbox item.">取得工具箱項目的篩選條件字串。</summary>
      <returns vsli:raw="The filter string for the toolbox item.">工具箱項目的篩選條件字串。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary vsli:raw="Gets the type of the filter.">取得篩選條件的型別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; that indicates the type of the filter.">指示篩選條件型別的 <see cref="T:System.ComponentModel.ToolboxItemFilterType" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary vsli:raw="Indicates whether the specified object has a matching filter string.">指示指定物件是否具有相符的篩選條件字串。</summary>
      <param name="obj" vsli:raw="The object to test for a matching filter string.">要為相符的篩選條件字串測試的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object has a matching filter string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的物件具有相符的篩選條件字串，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary vsli:raw="Returns a string that represents the current object.">傳回代表目前物件的字串。</summary>
      <returns vsli:raw="A string that represents the current object.">表示目前物件的字串。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary vsli:raw="Gets the type ID for the attribute.">取得屬性的型別 ID。</summary>
      <returns vsli:raw="The type ID for this attribute. All &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; objects with the same filter string return the same type ID.">這個屬性的型別 ID。 所有具有相同篩選條件字串的 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 物件會傳回相同的型別 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary vsli:raw="Defines identifiers used to indicate the type of filter that a &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; uses.">定義用來指示 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 所使用篩選條件型別的識別項。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary vsli:raw="Indicates that a toolbox item filter string is allowed, but not required.">指示允許工具箱項目篩選條件字串，但並非必要。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary vsli:raw="Indicates that custom processing is required to determine whether to use a toolbox item filter string. It is typically specified on a root designer class to indicate that the designer wishes to accept or reject a toolbox item through code. The designer must implement the &lt;see cref=&quot;M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)&quot; /&gt; method of the &lt;see cref=&quot;T:System.Drawing.Design.IToolboxUser&quot; /&gt; interface.">指示需要自訂處理來判斷是否要使用工具箱項目篩選條件字串。 通常會在根設計工具類別上設定，指出設計工具想要透過程式碼接受或拒絕工具箱項目。 設計工具必須實作 <see cref="T:System.Drawing.Design.IToolboxUser" /> 介面的 <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" /> 方法。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary vsli:raw="Indicates that a toolbox item filter string is not allowed. If a designer and a component class both have a filter string and the value of one is &lt;c&gt;ToolboxItemFilterType.Prevent&lt;/c&gt;, the toolbox item will not be available.">指示不允許工具箱項目篩選條件字串。 如果設計工具和元件類別都具有篩選字串，且其中一個值是 <c>ToolboxItemFilterType.Prevent</c>，則工具箱項目將無法使用。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary vsli:raw="Indicates that a toolbox item filter string must be present for a toolbox item to be enabled.  For a toolbox item with a filter type of &lt;c&gt;Require&lt;/c&gt; to be enabled, the designer and the component class must have a matching filter string. Additionally, neither the designer or component class can have a filter type of &lt;c&gt;Prevent&lt;/c&gt; for the toolbox item to be enabled.">指示工具箱項目篩選條件必須為要啟用的工具箱項目存在。  若要啟用篩選型別為 <c>Require</c> 的工具箱項目，設計工具和元件類別必須具有相符的篩選字串。 此外，設計工具或元件類別針對要啟用的工具箱項目不能是 <c>Prevent</c> 篩選型別。</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary vsli:raw="Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.">會提供轉換實值型別為其他型別，以及存取標準值和子屬性的統一方式。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.TypeConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">會傳回這個轉換子是否可以使用指定內容，將指定型別的物件轉換為這個轉換子的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">傳回值，指出這個轉換子是否可將指定之型別的物件轉換為這個轉換子的型別。</summary>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">
        <see cref="T:System.Type" />，表示您要轉換的來源類型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">傳回這個轉換器是否可以使用指定的內容，將物件轉換成指定的類型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">
        <see cref="T:System.Type" />，代表您想要轉換成的類型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">傳回值，指出這個轉換子是否可以將物件轉換成指定的型別。</summary>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">
        <see cref="T:System.Type" />，代表您想要轉換成的類型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">使用指定的內容和文化特性資訊，將指定物件轉換為這個轉換子的類型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">要用作目前文化特性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary vsli:raw="Converts the given value to the type of this converter.">會將指定值轉換為這個轉換子的型別。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture and the specified context.">會使用不區分的文化特性和指定的內容，將指定的字串轉換為這個轉換子的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.String" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">表示轉換文字的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture.">會使用不因文化特性而異，將指定字串轉換為這個轉換子的型別。</summary>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.String" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">表示轉換文字的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context and culture information.">會使用指定內容和文化特性資訊，將指定文字轉換為物件。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 如果傳遞 <see langword="null" /> ，則會採用目前的文化特性。</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.String" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">表示轉換文字的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context.">會使用指定的內容，將指定文字轉換為物件。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.String" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">表示轉換文字的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary vsli:raw="Converts the specified text to an object.">會將指定的文字轉換成物件。</summary>
      <param name="text" vsli:raw="The text representation of the object to convert.">要轉換物件的文字表示。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">表示轉換文字的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The string cannot be converted into the appropriate object.">字串無法轉換為適當的物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">使用指定的內容和文化特性資訊，將指定值物件轉換成指定類型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 如果傳遞 <see langword="null" /> ，則會採用目前的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">要將 <paramref name="value" /> 參數轉換成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the arguments.">會使用引數，將指定值物件轉換成指定型別。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">要將 <paramref name="value" /> 參數轉換成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation, using the specified context.">會使用指定的內容，將指定值轉換成不因文化特性而異的字串表示。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">
        <see cref="T:System.String" />，表示轉換的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation.">會將指定值轉換成不因文化特性而異的字串表示。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">
        <see cref="T:System.String" />，表示轉換的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the specified context and culture information.">會使用指定的內容和文化特性資訊，將指定值轉換為字串表示。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 如果傳遞 <see langword="null" /> ，則會採用目前的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the given context.">會使用指定的內容，將指定值轉換為字串表示。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary vsli:raw="Converts the specified value to a string representation.">會將指定值轉換成字串表示。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary vsli:raw="Re-creates an &lt;see cref=&quot;T:System.Object&quot; /&gt; given a set of property values for the object.">重新建立 <see cref="T:System.Object" />，需為物件提供一組屬性值。</summary>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; that represents a dictionary of new property values.">
        <see cref="T:System.Collections.IDictionary" />，表示新屬性值的字典。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">代表指定 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Object" />；如果無法建立物件，則為 <see langword="null" />。 這個方法一律會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">使用指定的內容，建立與這個 <see cref="T:System.ComponentModel.TypeConverter" /> 相關聯之類型的執行個體，並為物件提供一組屬性值。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">新屬性值的 <see cref="T:System.Collections.IDictionary" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">代表指定 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Object" />；如果無法建立物件，則為 <see langword="null" />。 這個方法一律會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">無法執行轉換時，會傳回要擲回的例外狀況。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">要轉換的 <see cref="T:System.Object" />，如果無法取得物件，則為 <see langword="null" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">
        <see cref="T:System.Exception" />，表示無法執行轉換時將擲回的例外狀況。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">由這個方法自動擲回。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">無法執行轉換時，會傳回要擲回的例外狀況。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">要轉換的 <see cref="T:System.Object" />，如果無法取得物件，則為 <see langword="null" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type the conversion was trying to convert to.">
        <see cref="T:System.Type" />，表示轉換嘗試轉換的型別。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">
        <see cref="T:System.Exception" />，表示無法執行轉換時將擲回的例外狀況。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">由這個方法自動擲回。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to the &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; method to create a new value.">傳回值，指出在這個物件上變更值時是否需要呼叫 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 方法來建立新值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在這個物件上變更屬性需要呼叫 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 來建立新值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">會使用指定的內容，傳回在這個物件上變更值是否需要呼叫 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 來建立新值。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在這個物件上變更屬性需要呼叫 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 來建立新值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context.">會使用指定的內容，傳回由值參數所指定之陣列型別的屬性集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">
        <see cref="T:System.Object" />，指定要取得屬性之陣列的型別。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有為這個資料型別所公開的屬性，如果沒有屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">使用指定的內容和屬性 (Attribute)，傳回由值參數所指定之陣列型別的屬性 (Property) 集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">
        <see cref="T:System.Object" /> ，指定要取得屬性之陣列的型別。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">
        <see cref="T:System.Attribute" /> 型別的陣列，可當做篩選條件使用。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有為這個資料型別所公開的屬性，如果沒有屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter.">傳回由值參數所指定之陣列型別的屬性集合。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">
        <see cref="T:System.Object" />，指定要取得屬性之陣列的型別。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有為這個資料型別所公開的屬性，如果沒有屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary vsli:raw="Returns whether this object supports properties.">傳回值，指出這個物件是否支援屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果應該呼叫 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 以尋找這個物件的屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">會使用指定的內容傳回數值，表示這個物件是否支援屬性。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果應該呼叫 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 以尋找這個物件的屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary vsli:raw="Returns a collection of standard values from the default context for the data type this type converter is designed for.">從為這個型別轉換子所設計的資料型別預設內容中，會傳回標準值的集合。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 含有標準有效值的集合，如果資料型別不支援標準值集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">當有提供格式內容時，會傳回這個型別轉換子設計之資料型別的標準值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供可用於擷取轉換子叫用 (Invoke) 環境之其他資訊的格式內容。 這個參數或這個參數的屬性可為 <see langword="null" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 會保留標準有效值的集合，如果資料型別不支援標準值集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list.">傳回值，這個值表示從 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 所傳回的標準值集合是否為獨佔清單。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">如果從 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 傳回的 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 是可能值的獨佔清單，則為 <see langword="true" />，如果其他的值為可能，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">會使用指定的內容，傳回從 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 所傳回的標準值集合是否為可能值的獨佔清單。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">如果從 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 傳回的 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 是可能值的獨佔清單，則為 <see langword="true" />，如果其他的值為可能，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list.">會傳回這個物件是否支援可以從清單中挑選的標準值組。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果應該呼叫 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 以尋找物件支援的通用值集合，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">會使用指定的內容傳回，這個物件是否支援可從清單中挑選的標準值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果應該呼叫 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 以尋找物件支援的通用值集合，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">會傳回指定值物件是否對這個型別和指定的內容有效。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">要測試有效性的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定值對這個物件有效，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type.">會傳回指定值物件是否對這個型別有效。</summary>
      <param name="value" vsli:raw="The object to test for validity.">要測試有效性的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定值對這個物件有效，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary vsli:raw="Represents an &lt;see langword=&quot;abstract&quot; /&gt; class that provides properties for objects that do not have properties.">表示 <see langword="abstract" /> 類別，此類別會針對沒有屬性的物件提供屬性。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 類別的新執行個體。</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">
        <see cref="T:System.Type" />，表示這個屬性描述項繫結的元件型別。</param>
      <param name="name" vsli:raw="The name of the property.">屬性的名稱。</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">
        <see cref="T:System.Type" />，表示這個屬性的資料型別。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 類別的新執行個體。</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">
        <see cref="T:System.Type" />，表示這個屬性描述項繫結的元件型別。</param>
      <param name="name" vsli:raw="The name of the property.">屬性的名稱。</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">
        <see cref="T:System.Type" />，表示這個屬性的資料型別。</param>
      <param name="attributes" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes to associate with the property.">
        <see cref="T:System.Attribute" /> 陣列，具有與屬性 (Property) 相關的屬性 (Attribute)。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="Returns whether resetting the component changes the value of the component.">傳回數值，表示重設元件是否變更元件的值。</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">要測試重設能力的元件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes the value of the component; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果重設元件會變更元件的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary vsli:raw="Gets the type of component to which this property description binds.">取得這個屬性描述繫結的元件型別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property binds.">
        <see cref="T:System.Type" />，表示這個屬性繫結的元件型別。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this property is read-only.">取得值，表示這個屬性是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; &lt;see langword=&quot;false&quot; /&gt; if the property is read/write.">如果屬性是唯讀，則為 <see langword="true" />；如果屬性是讀取/寫入，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary vsli:raw="Gets the type of the property.">取得屬性的型別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">
        <see cref="T:System.Type" />，表示屬性的型別。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="Resets the value for this property of the component.">重設元件的這個屬性值。</summary>
      <param name="component" vsli:raw="The component with the property value to be reset.">具有要重設之屬性值的元件。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="Returns whether the value of this property can persist.">傳回數值，表示這個屬性的值是否能保存。</summary>
      <param name="component" vsli:raw="The component with the property that is to be examined for persistence.">具有要檢查保存性 (Persistence) 之屬性的元件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the property can persist; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果屬性的值可以保存，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary vsli:raw="Sorts a collection of properties.">排序屬性的集合。</summary>
      <param name="props" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that has the properties to sort.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有要排序的屬性。</param>
      <param name="names" vsli:raw="An array of names in the order you want the properties to appear in the collection.">依據您要屬性在集合中出現之順序的名稱陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含已排序的屬性。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary vsli:raw="Represents a collection of values.">代表值集合。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 類別的新執行個體。</summary>
      <param name="values" vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that represents the objects to put into the collection.">
        <see cref="T:System.Collections.ICollection" />，表示要放到集合的物件。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of this collection to an array.">將這個集合的內容複製到陣列。</summary>
      <param name="array" vsli:raw="An &lt;see cref=&quot;T:System.Array&quot; /&gt; that represents the array to copy to.">
        <see cref="T:System.Array" />，表示要複製的目的陣列。</param>
      <param name="index" vsli:raw="The index to start from.">做為開頭的索引。</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary vsli:raw="Gets the number of objects in the collection.">取得集合中的物件數目。</summary>
      <returns vsli:raw="The number of objects in the collection.">集合中的物件數目。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this collection.">傳回這個集合的列舉值。</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 型別的列舉程式。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the object at the specified index number.">取得在指定索引編號的物件。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.Object&quot; /&gt; to get from the collection.">要從集合取得的 <see cref="T:System.Object" /> 之以零起始的索引。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; with the specified index.">具有指定索引的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.IsSynchronized&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">所有情況下都是 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.SyncRoot&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;null&quot; /&gt; in all cases.">所有情況下都是 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>指定要用來做為此屬性所繫結至物件的型別轉換子。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>使用預設型別轉換子，也就是空字串 ("")，來初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>使用指定型別名稱做為這個屬性所繫結之物件的資料轉換子，來初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 類別的新執行個體。</summary>
      <param name="typeName">類別的完整名稱，用於這個屬性所繫結之物件的資料轉換。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>使用指定型別做為這個屬性所繫結之物件的資料轉換子，來初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.Type" /> 表示轉換子類別的型別，用於這個屬性所繫結之物件的資料轉換。</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>取得 <see cref="T:System.Type" /> 的完整型別名稱來做為這個屬性所繫結之物件的轉換子。</summary>
      <returns>
        <see cref="T:System.Type" /> 的完整型別名稱，用來做為這個屬性所繫結之物件的轉換子，如果屬性值不存在的話，則為空字串 ("")。 預設值為空字串 ("")。</returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary>指定這個屬性繫結物件所要用來做為轉換子的型別。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.TypeConverterAttribute" />。</summary>
      <param name="obj">測試其數值相等的物件。</param>
      <returns>如果指定的物件值等於目前 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary vsli:raw="Provides supplemental metadata to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">提供補充性中繼資料給 <see cref="T:System.ComponentModel.TypeDescriptor" />。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class using a parent type description provider.">使用父型別描述提供者，初始化 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 類別的新執行個體。</summary>
      <param name="parent" vsli:raw="The parent type description provider.">父型別描述提供者。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">建立可以代替另一種資料類型的物件。</summary>
      <param name="provider" vsli:raw="An optional service provider.">選擇性的服務提供者。</param>
      <param name="objectType" vsli:raw="The type of object to create. This parameter is never &lt;see langword=&quot;null&quot; /&gt;.">要建立的物件類型。 這個參數絕對不是 <see langword="null" />。</param>
      <param name="argTypes" vsli:raw="An optional array of types that represent the parameter types to be passed to the object's constructor. This array can be &lt;see langword=&quot;null&quot; /&gt; or of zero length.">選擇性的型別陣列，表示要傳遞至物件建構函式的參數型別。 這個陣列可以是 <see langword="null" /> 或長度為零。</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor.">要傳遞給物件建構函式的選擇性參數值陣列。</param>
      <returns vsli:raw="The substitute &lt;see cref=&quot;T:System.Object&quot; /&gt;.">替代的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary vsli:raw="Gets a per-object cache, accessed as an &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of key/value pairs.">取得個別物件的快取，以索引鍵/值組的 <see cref="T:System.Collections.IDictionary" /> 方式存取。</summary>
      <param name="instance" vsli:raw="The object for which to get the cache.">要為其取得快取的物件。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; if the provided object supports caching; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果提供的物件支援快取，則為 <see cref="T:System.Collections.IDictionary" />，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets an extended custom type descriptor for the given object.">取得特定物件的擴充自訂型別描述項。</summary>
      <param name="instance" vsli:raw="The object for which to get the extended type descriptor.">要為其取得擴充型別描述項的物件。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide extended metadata for the object.">
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />，可以提供物件的擴充中繼資料。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary vsli:raw="Gets the extender providers for the specified object.">取得指定之物件的擴充項提供者。</summary>
      <param name="instance" vsli:raw="The object to get extender providers for.">要為其取得擴充項提供者的物件。</param>
      <returns vsli:raw="An array of extender providers for &lt;paramref name=&quot;instance&quot; /&gt;.">
        <paramref name="instance" /> 之擴充項提供者的陣列。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">取得指定之元件的名稱，或 <see langword="null" /> (如果元件沒有名稱)。</summary>
      <param name="component" vsli:raw="The specified component.">指定的元件。</param>
      <returns vsli:raw="The name of the specified component.">指定之元件的名稱。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object.">對指定的物件執行一般反映。</summary>
      <param name="instance" vsli:raw="An instance of the type (should not be &lt;see langword=&quot;null&quot; /&gt;).">型別的執行個體 (不可以是 <see langword="null" />)。</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;instance&quot; /&gt;.">這個 <paramref name="instance" /> 的反映類型。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary vsli:raw="Performs normal reflection against a type.">對型別執行一般反映。</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">要為其擷取 <see cref="T:System.Reflection.IReflect" /> 之物件的型別。</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">這個 <paramref name="objectType" /> 的反映類型。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="objectType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object with the given type.">對具有特定型別的特定物件執行一般反映。</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">要為其擷取 <see cref="T:System.Reflection.IReflect" /> 之物件的型別。</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt;.">型別的執行個體。 可以是 <see langword="null" />。</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">這個 <paramref name="objectType" /> 的反映類型。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary vsli:raw="Converts a reflection type into a runtime type.">將反映型別轉換成執行階段型別。</summary>
      <param name="reflectionType" vsli:raw="The type to convert to its runtime equivalent.">要轉換成其執行階段對等項目的型別。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the runtime equivalent of &lt;paramref name=&quot;reflectionType&quot; /&gt;.">
        <see cref="T:System.Type" />，表示 <paramref name="reflectionType" /> 的執行階段對等項目。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reflectionType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reflectionType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given object.">取得特定物件的自訂型別描述項。</summary>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">型別的執行個體。 如果未傳遞執行個體至 <see cref="T:System.ComponentModel.TypeDescriptor" />，可以為 <see langword="null" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />，可以提供型別的中繼資料。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary vsli:raw="Gets a custom type descriptor for the given type.">取得特定型別的自訂型別描述項。</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">要為其擷取型別描述項之物件的型別。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />，可以提供型別的中繼資料。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given type and object.">取得特定型別和物件的自訂型別描述項。</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">要為其擷取型別描述項之物件的型別。</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">型別的執行個體。 如果未傳遞執行個體至 <see cref="T:System.ComponentModel.TypeDescriptor" />，可以為 <see langword="null" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />，可以提供型別的中繼資料。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary vsli:raw="Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers.">取得值，這個值指出指定的型別是否與型別描述及其型別描述提供者的鏈結相容。</summary>
      <param name="type" vsli:raw="The type to test for compatibility.">要測試其相容性的型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;type&quot; /&gt; is compatible with the type description and its chain of type description providers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="type" /> 與型別描述及其型別描述提供者的鏈結相容則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary>指定類別的自訂型別描述提供者。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary>使用指定的型別名稱，初始化 <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> 類別的新執行個體。</summary>
      <param name="typeName">型別的限定名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary>使用指定的型別，初始化 <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> 類別的新執行個體。</summary>
      <param name="type">要儲存在屬性中的型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary>取得型別描述提供者的型別名稱。</summary>
      <returns>
        <see cref="T:System.String" />，包含 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 的限定型別名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary vsli:raw="Provides information about the characteristics for a component, such as its attributes, properties, and events. This class cannot be inherited.">提供元件特性的相關資訊，例如其屬性 (attribute)、屬性 (property) 與事件。 此類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component instance.">將類別層級屬性加入目標元件執行個體。</summary>
      <param name="instance" vsli:raw="An instance of the target component.">目標元件的執行個體。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">要加入元件類別的 <see cref="T:System.Attribute" /> 物件陣列。</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">之前用以加入指定屬性之新建立的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">其中一個參數或兩者皆為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component type.">將類別層級屬性加入目標元件類型。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目標元件的 <see cref="T:System.Type" />。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">要加入元件類別的 <see cref="T:System.Attribute" /> 物件陣列。</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">之前用以加入指定屬性之新建立的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">其中一個參數或兩者皆為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary vsli:raw="Adds an editor table for the given editor base type.">為指定的編輯器基底類型加入編輯器資料表。</summary>
      <param name="editorBaseType" vsli:raw="The editor base type to add the editor table for. If a table already exists for this type, this method will do nothing.">要加入編輯器資料表的編輯器基底類型。 如果此類型已經有資料表，這個方法將不會採取任何動作。</param>
      <param name="table" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Hashtable&quot; /&gt; to add.">要加入的 <see cref="T:System.Collections.Hashtable" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">加入元件之單一執行個體的類型描述提供者。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">要加入的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance" vsli:raw="An instance of the target component.">目標元件的執行個體。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">加入元件類別的類型描述提供者。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">要加入的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目標元件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">加入元件之單一執行個體的類型描述提供者。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">要加入的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance" vsli:raw="An instance of the target component.">目標元件的執行個體。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">加入元件類別的類型描述提供者。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">要加入的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目標元件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary vsli:raw="Gets or sets the provider for the Component Object Model (COM) type information for the target component.">取得或設定目標元件之元件物件模型 (COM) 類型資訊的提供者。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComNativeDescriptorHandler&quot; /&gt; instance representing the COM type information provider.">
        <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" /> 執行個體，代表 COM 類型資訊提供者。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary vsli:raw="Gets the type of the Component Object Model (COM) object represented by the target component.">取得以目標元件表示之元件物件模型 (COM) 物件的類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the COM object represented by this component, or &lt;see langword=&quot;null&quot; /&gt; for non-COM objects.">以這個元件表示之 COM 物件的 <see cref="T:System.Type" />；如果不是 COM 物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary vsli:raw="Creates a primary-secondary association between two objects.">建立兩個物件之間的主要-次要關聯。</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">主要 <see cref="T:System.Object" />。</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">次要 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">其中一或二個參數都為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is equal to &lt;paramref name=&quot;secondary&quot; /&gt;.">
        <paramref name="primary" /> 等於 <paramref name="secondary" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary vsli:raw="Creates an instance of the designer associated with the specified component and of the specified type of designer.">建立與指定元件關聯並屬於指定設計工具類型的設計工具執行個體。</summary>
      <param name="component" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that specifies the component to associate with the designer.">
        <see cref="T:System.ComponentModel.IComponent" />，指定要與設計工具關聯的元件。</param>
      <param name="designerBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of designer to create.">
        <see cref="T:System.Type" />，代表要建立的設計工具類型。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; that is an instance of the designer for the component, or &lt;see langword=&quot;null&quot; /&gt; if no designer can be found.">
        <see cref="T:System.ComponentModel.Design.IDesigner" />，亦即元件的設計工具執行個體；如果找不到設計工具，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor, when passed the existing &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">當傳遞到現有的 <see cref="T:System.ComponentModel.EventDescriptor" /> 時，建立與現有事件描述元相同的新事件描述元。</summary>
      <param name="componentType" vsli:raw="The type of the component for which to create the new event.">要建立新事件的元件類型。</param>
      <param name="oldEventDescriptor" vsli:raw="The existing event information.">現有的事件資訊。</param>
      <param name="attributes" vsli:raw="The new attributes.">新屬性</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that has merged the specified metadata attributes with the existing metadata attributes.">新的 <see cref="T:System.ComponentModel.EventDescriptor" />，其合併了指定的中繼資料屬性與現有的中繼資料屬性。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor by dynamically generating descriptor information from a specified event on a type.">從類型上指定事件動態產生描述項資訊，藉此建立與現有事件描述項相同的新的事件描述項。</summary>
      <param name="componentType" vsli:raw="The type of the component the event lives on.">此事件所在的元件類型。</param>
      <param name="name" vsli:raw="The name of the event.">事件的名稱。</param>
      <param name="type" vsli:raw="The type of the delegate that handles the event.">處理此事件的委派類型。</param>
      <param name="attributes" vsli:raw="The attributes for this event.">這個事件的屬性。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that is bound to a type.">繫結至類型的 <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">建立可以代替另一種資料類型的物件。</summary>
      <param name="provider" vsli:raw="The service provider that provides a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; service. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">提供 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 服務的服務提供者。 這個參數可以是 <see langword="null" />。</param>
      <param name="objectType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of object to create.">要建立的物件 <see cref="T:System.Type" />。</param>
      <param name="argTypes" vsli:raw="An optional array of parameter types to be passed to the object's constructor. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an array of zero length.">要傳遞給物件建構函式的選擇性參數類型陣列。 這個參數可以是 <see langword="null" /> 或長度為零的陣列。</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor. If not &lt;see langword=&quot;null&quot; /&gt;, the number of elements must be the same as &lt;paramref name=&quot;argTypes&quot; /&gt;.">要傳遞給物件建構函式的選擇性參數值陣列。 如果不是 <see langword="null" />，項目數就必須和 <paramref name="argTypes" /> 相同。</param>
      <returns vsli:raw="An instance of the substitute data type if an associated &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; is found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果找到相關聯的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />，則為替代資料類型的執行個體；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or &lt;paramref name=&quot;args&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; when &lt;paramref name=&quot;argTypes&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="objectType" /> 是 <see langword="null" /> 或 <paramref name="args" /> 是 <see langword="null" />，當 <paramref name="argTypes" /> 不是 <see langword="null" /> 時。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;argTypes&quot; /&gt; and &lt;paramref name=&quot;args&quot; /&gt; have different number of elements.">
        <paramref name="argTypes" /> 和 <paramref name="args" /> 的項目數不同。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new property descriptor from an existing property descriptor, using the specified existing &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and attribute array.">使用指定的現有 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和屬性 (Attribute) 陣列，從現有的屬性 (Property) 描述項建立新的屬性 (Property) 描述項。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">屬性所屬之元件的 <see cref="T:System.Type" />。</param>
      <param name="oldPropertyDescriptor" vsli:raw="The existing property descriptor.">現有的屬性描述項。</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">這個屬性 (Property) 的新屬性 (Attribute)。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that has the specified metadata attributes merged with the existing metadata attributes.">新的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，其中的指定中繼資料屬性已與現有的中繼資料屬性合併。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates and dynamically binds a property descriptor to a type, using the specified property name, type, and attribute array.">使用指定的屬性名稱、類型和屬性陣列，建立並以動態方式將屬性描述項繫結至類型。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">屬性所屬之元件的 <see cref="T:System.Type" />。</param>
      <param name="name" vsli:raw="The name of the property.">屬性的名稱。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the property.">屬性的 <see cref="T:System.Type" />。</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">這個屬性 (Property) 的新屬性 (Attribute)。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is bound to the specified type and that has the specified metadata attributes merged with the existing metadata attributes.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，繫結至指定的類型，且具有與現有的中繼資料屬性合併的指定的中繼資料屬性。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary vsli:raw="Returns an instance of the type associated with the specified primary object.">傳回與指定主要物件相關聯類型的執行個體。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目標元件的 <see cref="T:System.Type" />。</param>
      <param name="primary" vsli:raw="The primary object of the association.">關聯的主要物件。</param>
      <returns vsli:raw="An instance of the secondary type that has been associated with the primary object if an association exists; otherwise, &lt;paramref name=&quot;primary&quot; /&gt; if no specified association exists.">如有關聯存在，為已與主要物件產生關聯的次要類型執行個體；如果沒有指定關聯存在，則為 <paramref name="primary" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary vsli:raw="Returns the collection of attributes for the specified component.">傳回指定元件的屬性集合。</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">您要取得屬性的元件。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the component. If &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">
        <see cref="T:System.ComponentModel.AttributeCollection" />，其包含元件的屬性。 如果 <paramref name="component" /> 為 <see langword="null" />，這個方法會傳回空集合。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a collection of attributes for the specified component and a Boolean indicating that a custom type descriptor has been created.">傳回指定元件的屬性集合，以及表示是否已建立自訂類型描述元的布林值。</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">您要取得屬性的元件。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use a baseline set of attributes from the custom type descriptor if &lt;paramref name=&quot;component&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示當 <paramref name="component" /> 屬於 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 類型時，使用自訂類型描述元中的一組基準屬性，否則為 <see langword="false" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">內含這個元件之屬性的 <see cref="T:System.ComponentModel.AttributeCollection" />。 如果元件為 <see langword="null" />，這個方法會傳回空集合。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary vsli:raw="Returns a collection of attributes for the specified type of component.">傳回指定元件類型的屬性集合。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目標元件的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the type of the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">內含這個元件類型之屬性的 <see cref="T:System.ComponentModel.AttributeCollection" />。 如果元件為 <see langword="null" />，這個方法會傳回空集合。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary vsli:raw="Returns the name of the class for the specified component using the default type descriptor.">傳回使用預設類型描述元之指定元件的類別名稱。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">需要類別名稱的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">
        <see cref="T:System.String" />，包含指定元件的類別名稱。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the class for the specified component using a custom type descriptor.">傳回使用自訂類型描述元之指定元件的類別名稱。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">需要類別名稱的 <see cref="T:System.Object" />。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要考慮自訂類型描述資訊，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">
        <see cref="T:System.String" />，包含指定元件的類別名稱。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary vsli:raw="Returns the name of the class for the specified type.">傳回指定類型之類別的名稱。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目標元件的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component type.">
        <see cref="T:System.String" />，包含指定元件類型之類別的名稱。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary vsli:raw="Returns the name of the specified component using the default type descriptor.">使用預設類型描述元傳回指定元件的名稱。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">需要類別名稱的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">包含指定元件名稱的 <see cref="T:System.String" />，或如果沒有元件名稱，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the specified component using a custom type descriptor.">使用自訂類型描述元傳回指定元件的名稱。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">需要類別名稱的 <see cref="T:System.Object" />。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要考慮自訂類型描述資訊，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns vsli:raw="The name of the class for the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">指定元件類別的名稱，或如果沒有元件名稱，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary vsli:raw="Returns a type converter for the type of the specified component.">傳回指定元件類型的類型轉換子。</summary>
      <param name="component" vsli:raw="A component to get the converter for.">要為其取得轉換子的元件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">指定元件的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a type converter for the type of the specified component with a custom type descriptor.">傳回指定元件類型的類型轉換子，並提供自訂類型描述元。</summary>
      <param name="component" vsli:raw="A component to get the converter for.">要為其取得轉換子的元件。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要考慮自訂類型描述資訊，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">指定元件的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary vsli:raw="Returns a type converter for the specified type.">傳回指定類型的類型轉換子。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目標元件的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">指定類型的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Returns the default event for the specified component.">傳回指定元件的預設事件。</summary>
      <param name="component" vsli:raw="The component to get the event for.">要取得事件的元件。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">具有預設事件的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者如果沒有任何事件，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default event for a component with a custom type descriptor.">傳回具有自訂類型描述元之元件的預設事件。</summary>
      <param name="component" vsli:raw="The component to get the event for.">要取得事件的元件。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要考慮自訂類型描述資訊，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">具有預設事件的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者如果沒有任何事件，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary vsli:raw="Returns the default event for the specified type of component.">傳回指定元件類型的預設事件。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目標元件的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">具有預設事件的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者如果沒有任何事件，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Returns the default property for the specified component.">傳回指定元件的預設屬性。</summary>
      <param name="component" vsli:raw="The component to get the default property for.">要取得預設屬性的元件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 與預設屬性，或如果沒有任何屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default property for the specified component with a custom type descriptor.">傳回具有自訂類型描述元之指定元件的預設屬性。</summary>
      <param name="component" vsli:raw="The component to get the default property for.">要取得預設屬性的元件。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要考慮自訂類型描述資訊，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 與預設屬性，或如果沒有任何屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary vsli:raw="Returns the default property for the specified type of component.">傳回指定元件類型的預設屬性。</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the class to get the property for.">
        <see cref="T:System.Type" />，代表要取得其屬性的類別。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 與預設屬性，或如果沒有任何屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets an editor with the specified base type for the specified component.">取得具有指定元件之指定基底類型的編輯器。</summary>
      <param name="component" vsli:raw="The component to get the editor for.">要為其取得編輯器的元件。</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">
        <see cref="T:System.Type" />，代表您想要尋找之編輯器的基底類型。</param>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">編輯器的執行個體，可以轉型為指定的編輯器類型；如果找不到要求類型的編輯器，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 或 <paramref name="editorBaseType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary vsli:raw="Returns an editor with the specified base type and with a custom type descriptor for the specified component.">傳回具有指定基底類型與指定元件之自訂類型描述元的編輯器。</summary>
      <param name="component" vsli:raw="The component to get the editor for.">要為其取得編輯器的元件。</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">
        <see cref="T:System.Type" />，代表您想要尋找之編輯器的基底類型。</param>
      <param name="noCustomTypeDesc" vsli:raw="A flag indicating whether custom type description information should be considered.">表示是否應該考慮自訂類型描述資訊的旗標。</param>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">編輯器的執行個體，可以轉型為指定的編輯器類型；如果找不到要求類型的編輯器，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 或 <paramref name="editorBaseType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary vsli:raw="Returns an editor with the specified base type for the specified type.">傳回具有指定類型之指定基底類型的編輯器。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目標元件的 <see cref="T:System.Type" />。</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you are trying to find.">
        <see cref="T:System.Type" /> 代表您想要尋找之編輯器的基底類型。</param>
      <returns vsli:raw="An instance of the editor object that can be cast to the given base type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">編輯器的執行個體，可以轉型為指定的基底類型；如果找不到要求類型的編輯器，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 或 <paramref name="editorBaseType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary vsli:raw="Returns the collection of events for the specified component.">傳回指定元件的事件集合。</summary>
      <param name="component" vsli:raw="A component to get the events for.">要取得</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">這個元件具有事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter.">使用指定的屬性陣列做為篩選條件，傳回指定元件的事件集合。</summary>
      <param name="component" vsli:raw="A component to get the events for.">要取得</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">
        <see cref="T:System.Attribute" /> 類型陣列，可供您做為篩選條件。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">具有符合此元件指定屬性之事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">使用指定的屬性陣列做為篩選條件並使用自訂類型描述元，傳回指定元件的事件集合。</summary>
      <param name="component" vsli:raw="A component to get the events for.">要取得</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">做為篩選條件使用的 <see cref="T:System.Attribute" /> 類型陣列。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要考慮自訂類型描述資訊，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">具有符合此元件指定屬性之事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component with a custom type descriptor.">傳回具有自訂類型描述元之指定元件的事件集合。</summary>
      <param name="component" vsli:raw="A component to get the events for.">要取得</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要考慮自訂類型描述資訊，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">這個元件具有事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary vsli:raw="Returns the collection of events for a specified type of component.">傳回指定元件類型的事件集合。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目標元件的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">這個元件具有事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified type of component using a specified array of attributes as a filter.">使用指定的屬性陣列做為篩選條件，傳回指定元件類型的事件集合。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目標元件的 <see cref="T:System.Type" />。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">
        <see cref="T:System.Attribute" /> 類型陣列，可供您做為篩選條件。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">具有符合此元件指定屬性之事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary vsli:raw="Returns the fully qualified name of the component.">傳回元件的完整名稱。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to find the name for.">要尋找其名稱的 <see cref="T:System.ComponentModel.Component" />。</param>
      <returns vsli:raw="The fully qualified name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">指定元件的完整名稱；如果元件有沒有名稱，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary vsli:raw="Returns the collection of properties for a specified component.">傳回指定元件的屬性集合。</summary>
      <param name="component" vsli:raw="A component to get the properties for.">要為其取得屬性的元件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">具有指定元件之屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter.">使用指定的屬性陣列做為篩選條件，傳回指定元件的屬性集合。</summary>
      <param name="component" vsli:raw="A component to get the properties for.">要為其取得屬性的元件。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">做為篩選條件使用的 <see cref="T:System.Attribute" /> 類型陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，其屬性 (Property) 符合指定元件的指定屬性 (Attribute)。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">使用指定的屬性陣列做為篩選條件並使用自訂類型描述元，傳回指定元件的屬性集合。</summary>
      <param name="component" vsli:raw="A component to get the properties for.">要為其取得屬性的元件。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">做為篩選條件使用的 <see cref="T:System.Attribute" /> 類型陣列。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要考慮自訂類型描述資訊，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the events that match the specified attributes for the specified component.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，其事件符合指定元件的指定屬性。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using the default type descriptor.">傳回使用預設類型描述元之指定元件的屬性集合。</summary>
      <param name="component" vsli:raw="A component to get the properties for.">要為其取得屬性的元件。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示不考慮自訂類型描述資訊，否則為 <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified component.">具有指定元件之屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary vsli:raw="Returns the collection of properties for a specified type of component.">傳回元件指定類型的屬性集合。</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component to get properties for.">表示要取得屬性之元件的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified type of component.">有指定元件類型屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified type of component using a specified array of attributes as a filter.">使用指定的屬性陣列做為篩選條件，傳回元件指定類型的屬性集合。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目標元件的 <see cref="T:System.Type" />。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">做為篩選條件使用的 <see cref="T:System.Attribute" /> 類型陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for this type of component.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，其屬性 (Property) 符合此類型元件的指定屬性 (Attribute)。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary vsli:raw="Returns the type description provider for the specified component.">傳回指定元件的類型描述提供者。</summary>
      <param name="instance" vsli:raw="An instance of the target component.">目標元件的執行個體。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified component.">與指定元件關聯的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary vsli:raw="Returns the type description provider for the specified type.">傳回指定類型的類型描述提供者。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目標元件的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified type.">與指定類型關聯的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given an object.">傳回指定物件時可用來執行反映的 <see cref="T:System.Type" />。</summary>
      <param name="instance" vsli:raw="An instance of the target component.">目標元件的執行個體。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; for the specified object.">指定物件的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given a class type.">傳回指定類別類型時可用來執行反映的 <see cref="T:System.Type" />。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目標元件的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; of the specified class.">指定類別的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary vsli:raw="Gets a type that represents a type description provider for all interface types.">取得代表所有介面類型的類型描述提供者的類型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents a custom type description provider for all interface types.">
        <see cref="T:System.Type" />，代表所有介面類型的自訂類型描述提供者。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary vsli:raw="Clears the properties and events for the specified component from the cache.">從快取清除指定元件的屬性和事件。</summary>
      <param name="component" vsli:raw="A component for which the properties or events have changed.">其屬性或事件已變更的元件。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary vsli:raw="Clears the properties and events for the specified assembly from the cache.">從快取清除指定組件的屬性和事件。</summary>
      <param name="assembly" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; that represents the assembly to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this assembly will be refreshed.">表示要重新整理之組件的 <see cref="T:System.Reflection.Assembly" />。 這個組件中的每個 <see cref="T:System.Type" /> 都會重新整理。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary vsli:raw="Clears the properties and events for the specified module from the cache.">從快取清除指定模組的屬性和事件。</summary>
      <param name="module" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; that represents the module to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this module will be refreshed.">表示要重新整理之模組的 <see cref="T:System.Reflection.Module" />。 模組中的每個 <see cref="T:System.Type" /> 都會重新整理。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary vsli:raw="Clears the properties and events for the specified type of component from the cache.">從快取清除指定元件類型的屬性和事件。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目標元件的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary vsli:raw="Occurs when the cache for a component is cleared.">清除元件快取時發生。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary vsli:raw="Removes an association between two objects.">移除兩個物件之間的關聯。</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">主要 <see cref="T:System.Object" />。</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">次要 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary vsli:raw="Removes all associations for a primary object.">移除所有主要物件的關聯。</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt; in an association.">在關聯中主要的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="primary" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">移除先前所加入之與指定物件相關聯的類型描述提供者。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance" vsli:raw="An instance of the target component.">目標元件的執行個體。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">移除先前所加入與指定類型相關聯的類型描述提供者。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目標元件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">移除先前所加入之與指定物件相關聯的類型描述提供者。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance" vsli:raw="An instance of the target component.">目標元件的執行個體。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">移除先前所加入與指定類型相關聯的類型描述提供者。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">目標元件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary vsli:raw="Sorts descriptors using the name of the descriptor.">使用描述項名稱的排序描述元。</summary>
      <param name="infos" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that contains the descriptors to sort.">
        <see cref="T:System.Collections.IList" /> 包含排序描述元以排序。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;infos&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="infos" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary vsli:raw="Provides a type converter that can be used to populate a list box with available types.">提供可以用於將可用的型別填入清單方塊的型別轉換子 (Type Converter)。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeListConverter&quot; /&gt; class using the type array as the available types.">使用型別陣列做為可用的型別，初始化 <see cref="T:System.ComponentModel.TypeListConverter" /> 類別的新執行個體。</summary>
      <param name="types" vsli:raw="The array of type &lt;see cref=&quot;T:System.Type&quot; /&gt; to use as the available types.">當做可用型別使用的 <see cref="T:System.Type" /> 型別陣列。</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert the specified &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object using the given context.">取得值，指出此轉換子是否可以使用指定的內容轉換來源物件的指定 <see cref="T:System.Type" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object.">來源物件的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">
        <see cref="T:System.Type" />，表示要轉換為何種目標型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the native type of the converter.">將指定的物件轉換成轉換子的原生型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">
        <see cref="T:System.Globalization.CultureInfo" />，指定用於表示字型的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">將指定的數值物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">選擇性 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供，則會假設使用目前的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">值將會轉換成這個 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">針對這個驗證程式設計目標的資料型別，取得由該資料型別的標準值所組成的集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">保留標準有效值集合的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，或者如果資料類型不支援標準值集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">取得值，表示從 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 方法所傳回的標準值清單是否為獨佔清單。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">因為從 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 傳回的 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能值的詳盡清單，所以會是 <see langword="true" />。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">取得值，指出這個物件是否支援可以使用指定內容從清單選取的標準值集合。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">因為應該呼叫 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 來尋找物件支援的通用值集合，所以會是 <see langword="true" />。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit unsigned integer objects to and from other representations.">提供型別轉換子 (Type Converter) 將 16 位元不帶正負號的整數 (Unsigned Integer) 物件與其他表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt16Converter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.UInt16Converter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit unsigned integer objects to and from various other representations.">提供型別轉換子 (Type Converter) 將 32 位元不帶正負號的整數 (Unsigned Integer) 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt32Converter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.UInt32Converter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit unsigned integer objects to and from other representations.">提供類型轉換器，將 64 位元不帶正負號的整數物件與其他表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt64Converter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.UInt64Converter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.VersionConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Version&quot; /&gt; objects to and from various other representations.">提供型別轉換子 (Type Converter) 將 <see cref="T:System.Version" /> 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.VersionConverter&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.VersionConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">取得值，指出這個轉換器是否可以將指定來源型別的物件轉換成 <see cref="T:System.Version" />。</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">提供內容資訊的物件。</param>
      <param name="sourceType" vsli:raw="The type of the object to be converted.">要轉換之物件的型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can convert sourceType to a &lt;see cref=&quot;T:System.Version&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若這個轉換器可以將 sourceType 轉換成 <see cref="T:System.Version" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">提供內容資訊的物件。</param>
      <param name="destinationType" vsli:raw="The target type for the conversion.">轉換的目標型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the converter can convert an object to the given destination type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若轉換器可以將物件轉換成指定的目的地型別，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">將指定物件轉換為 <see cref="T:System.Version" />。</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">提供內容資訊的物件。</param>
      <param name="culture" vsli:raw="The culture to use for the conversion.">要用於轉換的文化特性。</param>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">要轉換為 <see cref="T:System.Version" /> 的值。</param>
      <returns vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; converted to a &lt;see cref=&quot;T:System.Version&quot; /&gt; value.">轉換成 <see cref="T:System.Version" /> 值的 <paramref name="value" />。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Version&quot; /&gt; string.">
        <paramref name="value" /> 不是有效的 <see cref="T:System.Version" /> 字串。</exception>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified value to the specified destination type using the specified context and arguments.">使用指定的內容和引數，將指定值轉換成指定的目的地型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The culture that supplies formatting information for the conversion.">提供轉換格式化資訊的文化特性 (Culture)。</param>
      <param name="value" vsli:raw="The value to be converted.">要轉換的值。</param>
      <param name="destinationType" vsli:raw="The type to convert the value parameter to.">value 參數所要轉換成的類型。</param>
      <returns vsli:raw="An object that represents the converted value.">物件，表示轉換的值。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the given value object is valid for this type and for the specified context.">傳回值，指出指定的值物件是否對這個類型和指定內容有效。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The object to test for validity.">要測試有效性的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的值對這個物件有效，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary vsli:raw="Specifies an exception that is handled as a warning instead of an error.">指定被當做警告而非錯誤處理的例外狀況。</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.WarningException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class using the specified serialization data and context.">使用指定的序列化資料和內容，初始化 <see cref="T:System.ComponentModel.WarningException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">要用於還原序列化 (Deserialization) 的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">要用於還原序列化的目的端。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message and no Help file.">使用指定的訊息和無說明檔來初始化 <see cref="T:System.ComponentModel.WarningException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message to display to the end user.">對使用者顯示的訊息。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified detailed description and the specified exception.">使用指定的詳細描述和指定的例外狀況，初始化 <see cref="T:System.ComponentModel.WarningException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="A detailed description of the error.">錯誤的詳細描述。</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">造成這個例外狀況之內部例外狀況的參考。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file.">使用指定的訊息和存取指定的說明檔來初始化 <see cref="T:System.ComponentModel.WarningException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message to display to the end user.">對使用者顯示的訊息。</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">使用者要求說明時將會顯示的說明檔。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file and topic.">使用指定的訊息和存取指定的說明檔和主題來初始化 <see cref="T:System.ComponentModel.WarningException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message to display to the end user.">對使用者顯示的訊息。</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">使用者要求說明時將會顯示的說明檔。</param>
      <param name="helpTopic" vsli:raw="The Help topic to display if the user requests help.">使用者要求說明時將會顯示的說明主題。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with the parameter name and additional exception information.">以參數名稱和其他例外狀況資訊設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info" vsli:raw="Stores the data that was being used to serialize or deserialize the object that the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.CodeDomSerializer&quot; /&gt; was serializing or deserializing.">儲存曾經用於序列化或還原序列化物件的資料，此物件正由 <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> 序列化或還原序列化。</param>
      <param name="context" vsli:raw="Describes the source and destination of the stream that generated the exception, as well as a means for serialization to retain that context and an additional caller-defined context.">描述已產生例外狀況 (Exception) 之資料流的來源和目的端，和讓序列化保留該內容和額外的呼叫端定義內容的方式。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary vsli:raw="Gets the Help topic associated with the warning.">取得與警告相關的說明主題。</summary>
      <returns vsli:raw="The Help topic associated with the warning.">與警告相關的說明主題。</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary vsli:raw="Gets the Help file associated with the warning.">取得與警告相關的說明檔。</summary>
      <returns vsli:raw="The Help file associated with the warning.">與警告相關的說明檔。</returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary vsli:raw="Converts colors from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">將色彩從某資料型別轉換為其他資料型別。 這個類別可透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 來存取。</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.ColorConverter&quot; /&gt; class.">初始化 <see cref="T:System.Drawing.ColorConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">判斷這個轉換子是否可以將指定來源型別中的物件轉換成轉換子的原生型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 您可以使用這個物件來取得正在叫用這個轉換子之來源環境的相關額外資訊。</param>
      <param name="sourceType" vsli:raw="The type from which you want to convert.">您要轉換的來源型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個物件可以執行轉換則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">取得值，指出這個轉換子是否可以使用內容來將物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to which you want to convert.">
        <see cref="T:System.Type" />，表示要轉換之目的型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行作業，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">將指定的物件轉換成轉換子的原生型別。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">
        <see cref="T:System.ComponentModel.TypeDescriptor" />，提供格式內容。 您可以使用這個物件來取得正在叫用這個轉換子之來源環境的相關額外資訊。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">
        <see cref="T:System.Globalization.CultureInfo" />，指定用來表示色彩的文化特性。</param>
      <param name="value" vsli:raw="The object to convert.">要轉換的物件。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">
        <see cref="T:System.Object" />，表示轉換的值。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">將指定的物件轉換為另一個型別。</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">格式子 (Formatter) 內容。 使用這個物件來擷取正在叫用這個轉換子之來源環境的相關額外資訊。 永遠檢查這個值是否為 <see langword="null" />。 此外，內容物件上的屬性可能會傳回 <see langword="null" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">
        <see cref="T:System.Globalization.CultureInfo" />，指定用來表示色彩的文化特性。</param>
      <param name="value" vsli:raw="The object to convert.">要轉換的物件。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">要將物件轉換成的類型。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">
        <see cref="T:System.Object" />，表示轉換的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationtype&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationtype" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Retrieves a collection containing a set of standard values for the data type for which this validator is designed. This will return &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">擷取集合，含有設計這個驗證程式之資料型別的標準值集。 如果資料型別不支援標準值集，就會傳回 <see langword="null" />。</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">格式子 (Formatter) 內容。 使用這個物件來擷取正在叫用這個轉換子之來源環境的相關額外資訊。 永遠檢查這個值是否為 <see langword="null" />。 此外，內容物件上的屬性可能會傳回 <see langword="null" />。</param>
      <returns vsli:raw="A collection containing &lt;see langword=&quot;null&quot; /&gt; or a standard set of valid values. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">包含 <see langword="null" /> 的集合，或有效值的標準集。 預設的實作 (Implementation) 一定會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports a standard set of values that can be chosen from a list.">判斷這個物件是否支援可以從清單選取的值標準集。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.TypeDescriptor" />，可透過它來提供其他內容。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.Drawing.ColorConverter.GetStandardValues&quot; /&gt; must be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果必須呼叫 <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" /> 以尋找物件支援的通用值集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object from one data type to another.">將 <see cref="T:System.Drawing.Point" /> 物件從某一個資料型別轉換為另一個資料型別。</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.PointConverter&quot; /&gt; class.">初始化 <see cref="T:System.Drawing.PointConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">判斷這個轉換子是否可以將指定來源型別中的物件轉換成轉換子的原生型別。</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">格式子 (Formatter) 內容。 這個物件可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">要轉換的來源型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個物件可以執行轉換則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 物件。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">
        <see cref="T:System.Type" /> 物件，表示要轉換成的型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object.">將指定的物件轉換為 <see cref="T:System.Drawing.Point" /> 物件。</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">格式子 (Formatter) 內容。 這個物件可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">包含特定文化特性資訊 (例如與特定文化特性相關的語言、日曆和文化慣例) 的物件。 以 RFC 1766 標準為基礎。</param>
      <param name="value" vsli:raw="The object to convert.">要轉換的物件。</param>
      <returns vsli:raw="The converted object.">轉換的物件。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">無法完成轉換作業。</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">將指定的物件轉換成指定的型別。</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">格式子 (Formatter) 內容。 這個物件可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">包含特定文化特性資訊 (例如與特定文化特性相關的語言、日曆和文化慣例) 的物件。 以 RFC 1766 標準為基礎。</param>
      <param name="value" vsli:raw="The object to convert.">要轉換的物件。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">要將物件轉換成的類型。</param>
      <returns vsli:raw="The converted object.">轉換的物件。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">無法完成轉換作業。</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object.">建立為物件提供一組屬性值的這個物件的執行個體。</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">可用來提供其他內容的型別描述項。</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt;.">新屬性值的字典。 字典包含了一系列的名稱/值組，每一個都會從 <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 傳回一個屬性。</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">新建立的物件，或 <see langword="null" /> (如果無法建立物件)。 預設實作會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">判斷在這個物件上變更值是否需要呼叫 <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 來建立新的值。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.TypeDescriptor" />，可透過它來提供其他內容。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在對此物件的一或多個屬性進行變更時，應該呼叫 <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 方法，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">擷取這個型別的屬性集。 根據預設值，型別不傳回任何屬性。</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">可用來提供其他內容的型別描述項。</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">要為其取得屬性的物件的值。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">描述屬性的 <see cref="T:System.Attribute" /> 物件陣列。</param>
      <returns vsli:raw="The set of properties that are exposed for this data type. If no properties are exposed, this method might return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">公開給這個資料型別的屬性集。 如果沒有屬性集公開，則這個方法可能傳回 <see langword="null" />。 預設的實作 (Implementation) 一定會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">判斷這個物件是否支援屬性。 根據預設，這是 <see langword="false" />。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.TypeDescriptor" />，可透過它來提供其他內容。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果應該呼叫 <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 以尋找這個物件的屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary vsli:raw="Converts rectangles from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">將矩形從某一資料型別轉換為另一資料型別。 這個類別可透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 來存取。</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.RectangleConverter&quot; /&gt; class.">初始化 <see cref="T:System.Drawing.RectangleConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">判斷這個轉換子是否可以將指定來源型別中的物件轉換成轉換子的原生型別。</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">格式子 (Formatter) 內容。 這個物件可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">要轉換的來源型別。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個物件可以執行轉換，則這個方法會傳回 <see langword="true" />；否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context. This can be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object can also return &lt;see langword=&quot;null&quot; /&gt;.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 物件。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">
        <see cref="T:System.Type" /> 物件，表示要轉換成的型別。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則這個方法會傳回 <see langword="true" />；否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.Drawing.Rectangle&quot; /&gt; object.">將指定的物件轉換為 <see cref="T:System.Drawing.Rectangle" /> 物件。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">
        <see cref="T:System.Globalization.CultureInfo" />，包含文化特有的資訊，例如與特定文化相關的語言、日曆和文化習俗。 以 RFC 1766 標準為基礎。</param>
      <param name="value" vsli:raw="The object to convert.">要轉換的物件。</param>
      <returns vsli:raw="The converted object.">轉換的物件。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">無法完成轉換作業。</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">將指定的物件轉換成指定的型別。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">
        <see cref="T:System.Globalization.CultureInfo" />，包含文化特有的資訊，例如與特定文化相關的語言、日曆和文化習俗。 以 RFC 1766 標準為基礎。</param>
      <param name="value" vsli:raw="The object to convert.">要轉換的物件。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">要將物件轉換成的類型。</param>
      <returns vsli:raw="The converted object.">轉換的物件。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">無法完成轉換作業。</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object. This is useful for objects that are immutable but still want to provide changeable properties.">建立為物件提供一組屬性值的這個物件的執行個體。 對於不變但是仍然要提供可變屬性的物件來說，這很有用。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可透過它來提供其他內容。</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from a call to the &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">新屬性值的字典。 字典包含一系列的名稱值配對，從 <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 屬性的呼叫傳回的每個屬性都會有一個配對。</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">新建立的物件，或 <see langword="null" /> (如果無法建立物件)。 預設實作會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">判斷在這個物件上變更值是否需要呼叫 <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 來建立新的值。</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">可用來提供其他內容的型別描述項。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在對這個物件的一或多個屬性進行變更時應該呼叫 <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />，則這個方法會傳回 <see langword="true" />；否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">擷取這個型別的屬性集。 根據預設值，型別不傳回任何屬性。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可透過它來提供其他內容。</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">要為其取得屬性的物件的值。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">描述屬性的 <see cref="T:System.Attribute" /> 物件陣列。</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">應該公開給這個資料型別的屬性集。 如果沒有屬性應該公開，則會傳回 <see langword="null" />。 預設的實作 (Implementation) 一定會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">判斷這個物件是否支援屬性。 根據預設，這是 <see langword="false" />。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可透過它來提供其他內容。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果應該呼叫 <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 來尋找這個物件的屬性，則這個方法會傳回 <see langword="true" />；否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; class is used to convert from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; object.">
        <see cref="T:System.Drawing.SizeConverter" /> 類別是用來將某一種資料型別轉換成另一種資料型別。 這個類別可透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 物件來存取。</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; object.">初始化新的 <see cref="T:System.Drawing.SizeConverter" /> 物件。</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether this converter can convert an object in the specified source type to the native type of the converter.">判斷這個轉換子是否可以將指定來源型別的物件轉換成轉換子的原生 (Native) 型別。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">要轉換的來源型別。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion.">如果這個物件可以執行轉換，則這個方法會傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This can be &lt;see langword=&quot;null&quot; /&gt;, so always check. Also, properties on the context object can return &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以一定要檢查。 甚至，內容物件上的屬性可能會傳回 <see langword="null" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">
        <see cref="T:System.Type" />，代表您想要轉換成的類型。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則這個方法會傳回 <see langword="true" />；否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the converter's native type.">將指定的物件轉換成轉換子的原生型別。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">
        <see cref="T:System.Globalization.CultureInfo" /> 物件，包含文化特有的資訊，例如與特定文化相關的語言、日曆和文化習俗。 以 RFC 1766 標準為基礎。</param>
      <param name="value" vsli:raw="The object to convert.">要轉換的物件。</param>
      <returns vsli:raw="The converted object.">轉換的物件。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">無法完成轉換作業。</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">將指定的物件轉換成指定的型別。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">
        <see cref="T:System.Globalization.CultureInfo" /> 物件，包含文化特有的資訊，例如與特定文化相關的語言、日曆和文化習俗。 以 RFC 1766 標準為基礎。</param>
      <param name="value" vsli:raw="The object to convert.">要轉換的物件。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">要將物件轉換成的類型。</param>
      <returns vsli:raw="The converted object.">轉換的物件。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">無法完成轉換作業。</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an object of this type by using a specified set of property values for the object. This is useful for creating non-changeable objects that have changeable properties.">藉由使用指定的物件屬性值組，來建立這個型別的物件。 這對於建立擁有可變更屬性的不可變更物件非常有用。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.TypeDescriptor" />，可透過它來提供其他內容。</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">新屬性值的字典。 字典包含了一系列的名稱/值組，每一個都會從 <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 方法傳回一個屬性。</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">新建立的物件，或 <see langword="null" /> (如果無法建立物件)。 預設實作會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether changing a value on this object should require a call to the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method to create a new value.">判斷在這個物件上變更值是否需要呼叫 <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 方法來建立新的值。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.TypeDescriptor" />，可透過它來提供其他內容。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; object should be called when a change is made to one or more properties of this object.">如果在對  <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 物件的一或多個屬性進行變更時，應該呼叫此物件，則為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not have any properties to return.">擷取這個型別的屬性集。 根據預設值，型別不傳回任何屬性。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.TypeDescriptor" />，可透過它來提供其他內容。</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">要為其取得屬性的物件的值。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">描述屬性的 <see cref="T:System.Attribute" /> 物件陣列。</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">應該公開給這個資料型別的屬性集。 如果沒有屬性應該公開，則會傳回 <see langword="null" />。 預設的實作 (Implementation) 一定會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">判斷這個物件是否支援屬性。 根據預設，這是 <see langword="false" />。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.TypeDescriptor" />，可透過它來提供其他內容。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method should be called to find the properties of this object.">如果應該呼叫 <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 方法來尋找這個物件的屬性，則為  <see langword="true" />。</returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary vsli:raw="Converts &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; objects from one type to another.">將 <see cref="T:System.Drawing.SizeF" /> 物件從一個型別轉換為另一個型別。</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; class.">初始化 <see cref="T:System.Drawing.SizeFConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the converter can convert from the type specified to the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type, using the specified context.">傳回值，指示轉換子是否可以透過使用指定的内容，從指定的型別轉換為 <see cref="T:System.Drawing.SizeF" /> 型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用來提供其他內容。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; the represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the conversion can be performed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示可以執行轉換，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; can convert a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; to the specified type.">傳回值，指示 <see cref="T:System.Drawing.SizeFConverter" /> 是否可將 <see cref="T:System.Drawing.SizeF" /> 轉換為指定的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用來提供其他內容。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">
        <see cref="T:System.Type" />，表示您要轉換的來源類型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">使用指定的內容和文化特性資訊，將指定物件轉換為這個轉換子的類型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">要用作目前文化特性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">使用指定的內容和文化特性資訊，將指定值物件轉換成指定類型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If null is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 如果傳遞 null，則會採用目前的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">要轉換值參數的目標 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; with the specified property values using the specified context.">透過使用指定的内容，建立具有指定的屬性值之 <see cref="T:System.Drawing.SizeF" /> 的執行個體。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用來提供其他內容。</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing property names and values.">包含屬性名稱和值的 <see cref="T:System.Collections.IDictionary" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the new &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created.">
        <see cref="T:System.Object" />，表示新的 <see cref="T:System.Drawing.SizeF" />，如果無法建立物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a value indicating whether changing a value on this object requires a call to the &lt;see cref=&quot;Overload:System.Drawing.SizeFConverter.CreateInstance&quot; /&gt; method to create a new value.">傳回值，指示在這個物件上變更值是否需要呼叫 <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" /> 方法來建立新的值。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. This may be &lt;see langword=&quot;null&quot; /&gt;.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 這可能是 <see langword="null" />。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">一律傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves a set of properties for the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type using the specified context and attributes.">透過使用指定的內容和屬性 (Attribute)，擷取 <see cref="T:System.Drawing.SizeF" /> 的屬性 (Property) 集。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用來提供其他內容。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to return properties for.">要傳回其屬性的 <see cref="T:System.Object" />。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">描述屬性的 <see cref="T:System.Attribute" /> 物件陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties.">包含屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type supports properties.">傳回值，指示 <see cref="T:System.Drawing.SizeF" /> 型別是否支援屬性。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用來提供其他內容。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">一律傳回 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class represents the type converter for extended protection policy used by the server to validate incoming client connections.">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> 類別，代表伺服器用來驗證連入用戶端連線的延伸保護原則型別轉換子。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class.">初始化 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">傳回值，指出這個轉換子是否可以將物件轉換成指定的型別。</summary>
      <param name="context" vsli:raw="The object to convert.">要轉換的物件。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">
        <see cref="T:System.Type" />，代表您想要轉換成的類型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Convert the object to the specified type.">將物件轉換成指定的類型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> 物件。 如果傳遞 <see langword="null" />，則會採用目前的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This should be a &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot; /&gt; object.">要進行轉換的 <see cref="T:System.Object" />。 應該是 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 物件。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">要轉換值參數的目標 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt; parameter.">
        <see cref="T:System.Object" /> 參數，代表轉換的 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">無法執行轉換。</exception>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">提供 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的資料。</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary vsli:raw="Gets the date/time when the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">取得引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的日期/時間。</summary>
      <returns vsli:raw="The time the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">
        <see cref="E:System.Timers.Timer.Elapsed" /> 事件所引發的時間。</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">代表將處理 <see cref="E:System.Timers.Timer.Elapsed" /> 之 <see cref="T:System.Timers.Timer" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件的來源。</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.Timers.ElapsedEventArgs&quot; /&gt; object that contains the event data.">包含事件資料的 <see cref="T:System.Timers.ElapsedEventArgs" /> 物件。</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary vsli:raw="Generates an event after a set interval, with an option to generate recurring events.">使用產生週期性事件的選項，在設定的間隔後產生事件。</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets all the properties to their initial values.">初始化 <see cref="T:System.Timers.Timer" /> 類別的新執行個體，並將所有屬性設為其初始值。</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets the &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property to the specified number of milliseconds.">初始化 <see cref="T:System.Timers.Timer" /> 類別的新執行個體，並將 <see cref="P:System.Timers.Timer.Interval" /> 屬性設定為指定的毫秒數。</summary>
      <param name="interval" vsli:raw="The time, in milliseconds, between events. The value must be greater than zero and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">事件與事件之間的時間間隔 (單位為毫秒)。 這個值必須大於零，並且小於或等於 <see cref="F:System.Int32.MaxValue" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The value of the &lt;paramref name=&quot;interval&quot; /&gt; parameter is less than or equal to zero, or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="interval" /> 參數值會小於或等於零，或者大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary vsli:raw="Gets or sets a Boolean indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once (&lt;see langword=&quot;false&quot; /&gt;) or repeatedly (&lt;see langword=&quot;true&quot; /&gt;).">取得或設定布林值，表示 <see cref="T:System.Timers.Timer" /> 是否應該只引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件一次 (<see langword="false" />) 或重複 (<see langword="true" />)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event each time the interval elapses; &lt;see langword=&quot;false&quot; /&gt; if it should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once, after the first time the interval elapses. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果 <see cref="T:System.Timers.Timer" /> 應於每次間隔耗盡時引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，則為 <see langword="true" />；如果應該在第一次間隔耗盡後只引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件一次，則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary vsli:raw="Begins the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">開始用於表單或為另一個元件所使用之 <see cref="T:System.Timers.Timer" /> 的執行階段初始化。</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary vsli:raw="Releases the resources used by the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">釋放 <see cref="T:System.Timers.Timer" /> 使用的資源。</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases all resources used by the current &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">釋放目前 <see cref="T:System.Timers.Timer" /> 所使用的所有資源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary vsli:raw="Occurs when the interval elapses.">發生於間隔耗盡時。</summary>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">取得或設定值，表示 <see cref="T:System.Timers.Timer" /> 是否應引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Timers.Timer" /> 應該引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This property cannot be set because the timer has been disposed.">無法設定這個屬性，因為計時器已處置。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property was set to a value greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; before the timer was enabled.">啟用計時器之前，<see cref="P:System.Timers.Timer.Interval" /> 屬性已設定為大於 <see cref="F:System.Int32.MaxValue" /> 的值。</exception>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary vsli:raw="Ends the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">結束用於表單或為另一個元件所使用之 <see cref="T:System.Timers.Timer" /> 的執行階段初始化。</summary>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary vsli:raw="Gets or sets the interval, expressed in milliseconds, at which to raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">取得或設定引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的間隔 (以毫秒為單位)。</summary>
      <returns vsli:raw="The time, in milliseconds, between &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; events. The value must be greater than zero, and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;. The default is 100 milliseconds.">
        <see cref="E:System.Timers.Timer.Elapsed" /> 事件之間的時間間隔 (以毫秒為單位)。 這個值必須大於零，並且小於或等於 <see cref="F:System.Int32.MaxValue" />。 預設為 100 毫秒。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The interval is less than or equal to zero.&#xA;&#xA; -or-&#xA;&#xA; The interval is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;, and the timer is currently enabled. (If the timer is not currently enabled, no exception is thrown until it becomes enabled.)">間隔是小於或等於零。
-或-
間隔大於 <see cref="F:System.Int32.MaxValue" />，且計時器目前已啟用。 (如果目前沒有啟用計數器，則在計數器變成啟用狀態之前，不會擲回例外狀況)。</exception>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary vsli:raw="Gets or sets the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; to its container in design mode.">取得或設定在設計模式中繫結 <see cref="T:System.Timers.Timer" /> 到其容器的站台。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface representing the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; object to its container.">
        <see cref="T:System.ComponentModel.ISite" /> 介面，代表繫結 <see cref="T:System.Timers.Timer" /> 物件到其容器的站台。</returns>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary vsli:raw="Starts raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;.">將 <see cref="P:System.Timers.Timer.Enabled" /> 設定為 <see langword="true" />，開始引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; is created with an interval equal to or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; + 1, or set to an interval less than zero.">
        <see cref="T:System.Timers.Timer" /> 是使用等於或大於 <see cref="F:System.Int32.MaxValue" /> + 1 的間隔所建立，或設為小於零的間隔。</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary vsli:raw="Stops raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">將 <see cref="P:System.Timers.Timer.Enabled" /> 設定為 <see langword="false" />，停止引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary vsli:raw="Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.">取得或設定物件，用來封送處理事件處理常式的呼叫 (當間隔已經耗盡時所發出)。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ISynchronizeInvoke&quot; /&gt; representing the object used to marshal the event-handler calls that are issued when an interval has elapsed. The default is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，表示用來封送處理事件處理常式呼叫 (當間隔已經耗盡時所發出) 的物件。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary vsli:raw="Sets the description that visual designers can display when referencing an event, extender, or property.">設定視覺化設計工具 (Visual Designer) 在參考事件、擴充項 (Extender) 或屬性時，可以顯示的描述。</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.TimersDescriptionAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Timers.TimersDescriptionAttribute" /> 類別的新執行個體。</summary>
      <param name="description" vsli:raw="The description to use.">要使用的描述。</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary vsli:raw="Gets the description that visual designers can display when referencing an event, extender, or property.">取得視覺化設計工具在參考事件、擴充項或屬性時，可以顯示的描述。</summary>
      <returns vsli:raw="The description for the event, extender, or property.">事件、擴充項或屬性的描述。</returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; type to a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type, and vice versa.">將 <see cref="T:System.String" /> 型別轉換成 <see cref="T:System.Uri" /> 型別，反之亦然。</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.UriTypeConverter&quot; /&gt; class.">初始化 <see cref="T:System.UriTypeConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">傳回值，指出這個轉換子是否可將指定之型別的物件轉換為這個轉換子的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert from.">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;sourceType&quot; /&gt; is a &lt;see cref=&quot;T:System.String&quot; /&gt; type or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type can be assigned from &lt;paramref name=&quot;sourceType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="sourceType" /> 為 <see cref="T:System.String" /> 型別或是可以從 <paramref name="sourceType" /> 指派 <see cref="T:System.Uri" /> 型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;sourceType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="sourceType" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">傳回這個轉換器是否可以使用指定的內容，將物件轉換成指定的類型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert to.">
        <see cref="T:System.Type" />，表示要轉換成的型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;destinationType&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Uri&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="destinationType" /> 屬於型別 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />、<see cref="T:System.String" /> 或 <see cref="T:System.Uri" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">使用指定的內容和文化特性資訊，將指定物件轉換為這個轉換子的類型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">要用作目前文化特性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a given value object to the specified type, using the specified context and culture information.">會使用指定的內容和文化特性資訊，將指定值物件轉換成指定的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 如果傳遞 <see langword="null" /> ，則會採用目前的文化特性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">要將 <paramref name="value" /> 參數轉換成的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created from it.">傳回值，指出指定之值物件是否為 <see cref="T:System.Uri" /> 或是可以從它建立 <see cref="T:System.Uri" />。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">要測試有效性的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.String&quot; /&gt; from which a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 為 <see cref="T:System.Uri" /> 或是可以從中建立 <see cref="T:System.String" /> 的 <see cref="T:System.Uri" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
  </members>
</doc>